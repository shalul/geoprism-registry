/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Geoprism Registry(tm).
 *
 * Geoprism Registry(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Geoprism Registry(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Geoprism Registry(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package net.geoprism.registry.etl;

@com.runwaysdk.business.ClassSignature(hash = -658120492)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TermReferenceProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TermReferenceProblemBase extends net.geoprism.registry.etl.ValidationProblem
{
  public final static String CLASS = "net.geoprism.registry.etl.TermReferenceProblem";
  public static final java.lang.String ATTRIBUTECODE = "attributeCode";
  public static final java.lang.String ATTRIBUTELABEL = "attributeLabel";
  public static final java.lang.String LABEL = "label";
  public static final java.lang.String MDATTRIBUTE = "mdAttribute";
  public static final java.lang.String PARENTCODE = "parentCode";
  private static final long serialVersionUID = -658120492;
  
  public TermReferenceProblemBase()
  {
    super();
  }
  
  public String getAttributeCode()
  {
    return getValue(ATTRIBUTECODE);
  }
  
  public void validateAttributeCode()
  {
    this.validateAttribute(ATTRIBUTECODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getAttributeCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.TermReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ATTRIBUTECODE);
  }
  
  public void setAttributeCode(String value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTECODE, "");
    }
    else
    {
      setValue(ATTRIBUTECODE, value);
    }
  }
  
  public String getAttributeLabel()
  {
    return getValue(ATTRIBUTELABEL);
  }
  
  public void validateAttributeLabel()
  {
    this.validateAttribute(ATTRIBUTELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getAttributeLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.TermReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ATTRIBUTELABEL);
  }
  
  public void setAttributeLabel(String value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTELABEL, "");
    }
    else
    {
      setValue(ATTRIBUTELABEL, value);
    }
  }
  
  public String getLabel()
  {
    return getValue(LABEL);
  }
  
  public void validateLabel()
  {
    this.validateAttribute(LABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.TermReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LABEL);
  }
  
  public void setLabel(String value)
  {
    if(value == null)
    {
      setValue(LABEL, "");
    }
    else
    {
      setValue(LABEL, value);
    }
  }
  
  public com.runwaysdk.system.metadata.MdAttributeTerm getMdAttribute()
  {
    if (getValue(MDATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttributeTerm.get(getValue(MDATTRIBUTE));
    }
  }
  
  public String getMdAttributeOid()
  {
    return getValue(MDATTRIBUTE);
  }
  
  public void validateMdAttribute()
  {
    this.validateAttribute(MDATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getMdAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.TermReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(MDATTRIBUTE);
  }
  
  public void setMdAttribute(com.runwaysdk.system.metadata.MdAttributeTerm value)
  {
    if(value == null)
    {
      setValue(MDATTRIBUTE, "");
    }
    else
    {
      setValue(MDATTRIBUTE, value.getOid());
    }
  }
  
  public void setMdAttributeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(MDATTRIBUTE, "");
    }
    else
    {
      setValue(MDATTRIBUTE, oid);
    }
  }
  
  public String getParentCode()
  {
    return getValue(PARENTCODE);
  }
  
  public void validateParentCode()
  {
    this.validateAttribute(PARENTCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getParentCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.TermReferenceProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PARENTCODE);
  }
  
  public void setParentCode(String value)
  {
    if(value == null)
    {
      setValue(PARENTCODE, "");
    }
    else
    {
      setValue(PARENTCODE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TermReferenceProblemQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    TermReferenceProblemQuery query = new TermReferenceProblemQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static TermReferenceProblem get(String oid)
  {
    return (TermReferenceProblem) com.runwaysdk.business.Business.get(oid);
  }
  
  public static TermReferenceProblem getByKey(String key)
  {
    return (TermReferenceProblem) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static TermReferenceProblem lock(java.lang.String oid)
  {
    TermReferenceProblem _instance = TermReferenceProblem.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static TermReferenceProblem unlock(java.lang.String oid)
  {
    TermReferenceProblem _instance = TermReferenceProblem.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
