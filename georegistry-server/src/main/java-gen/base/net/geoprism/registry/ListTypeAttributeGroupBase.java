/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Geoprism Registry(tm).
 *
 * Geoprism Registry(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Geoprism Registry(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Geoprism Registry(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package net.geoprism.registry;

@com.runwaysdk.business.ClassSignature(hash = 29353999)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ListTypeAttributeGroup.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ListTypeAttributeGroupBase extends net.geoprism.registry.ListTypeGroup
{
  public final static String CLASS = "net.geoprism.registry.ListTypeAttributeGroup";
  public final static java.lang.String TYPEATTRIBUTE = "typeAttribute";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 29353999;
  
  public ListTypeAttributeGroupBase()
  {
    super();
  }
  
  public com.runwaysdk.system.metadata.MdAttribute getTypeAttribute()
  {
    if (getValue(TYPEATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttribute.get(getValue(TYPEATTRIBUTE));
    }
  }
  
  public String getTypeAttributeOid()
  {
    return getValue(TYPEATTRIBUTE);
  }
  
  public void validateTypeAttribute()
  {
    this.validateAttribute(TYPEATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getTypeAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeAttributeGroup.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(TYPEATTRIBUTE);
  }
  
  public void setTypeAttribute(com.runwaysdk.system.metadata.MdAttribute value)
  {
    if(value == null)
    {
      setValue(TYPEATTRIBUTE, "");
    }
    else
    {
      setValue(TYPEATTRIBUTE, value.getOid());
    }
  }
  
  public void setTypeAttributeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(TYPEATTRIBUTE, "");
    }
    else
    {
      setValue(TYPEATTRIBUTE, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ListTypeAttributeGroupQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ListTypeAttributeGroupQuery query = new ListTypeAttributeGroupQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ListTypeAttributeGroup get(String oid)
  {
    return (ListTypeAttributeGroup) com.runwaysdk.business.Business.get(oid);
  }
  
  public static ListTypeAttributeGroup getByKey(String key)
  {
    return (ListTypeAttributeGroup) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static ListTypeAttributeGroup lock(java.lang.String oid)
  {
    ListTypeAttributeGroup _instance = ListTypeAttributeGroup.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static ListTypeAttributeGroup unlock(java.lang.String oid)
  {
    ListTypeAttributeGroup _instance = ListTypeAttributeGroup.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
