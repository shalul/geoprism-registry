package net.geoprism.registry.geoobjecttype;

@com.runwaysdk.business.ClassSignature(hash = -1070515664)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TypeHasPrivateParents.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TypeHasPrivateParentsBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = "net.geoprism.registry.geoobjecttype.TypeHasPrivateParents";
  public static java.lang.String OID = "oid";
  public static java.lang.String TYPELABEL = "typeLabel";
  private static final long serialVersionUID = -1070515664;
  
  public TypeHasPrivateParentsBase()
  {
    super();
  }
  
  public TypeHasPrivateParentsBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public TypeHasPrivateParentsBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public TypeHasPrivateParentsBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.geoobjecttype.TypeHasPrivateParents.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public String getTypeLabel()
  {
    return getValue(TYPELABEL);
  }
  
  public void validateTypeLabel()
  {
    this.validateAttribute(TYPELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getTypeLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.geoobjecttype.TypeHasPrivateParents.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(TYPELABEL);
  }
  
  public void setTypeLabel(String value)
  {
    if(value == null)
    {
      setValue(TYPELABEL, "");
    }
    else
    {
      setValue(TYPELABEL, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{oid}", this.getOid());
    message = replace(message, "{typeLabel}", this.getTypeLabel());
    return message;
  }
  
}
