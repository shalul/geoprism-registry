package net.geoprism.registry.curation;

@com.runwaysdk.business.ClassSignature(hash = -1928968286)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoObjectProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoObjectProblemBase extends net.geoprism.registry.curation.CurationProblem
{
  public final static String CLASS = "net.geoprism.registry.curation.GeoObjectProblem";
  public static java.lang.String GOCODE = "goCode";
  public static java.lang.String TYPECODE = "typeCode";
  public static java.lang.String UID = "uid";
  private static final long serialVersionUID = -1928968286;
  
  public GeoObjectProblemBase()
  {
    super();
  }
  
  public String getGoCode()
  {
    return getValue(GOCODE);
  }
  
  public void validateGoCode()
  {
    this.validateAttribute(GOCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGoCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.curation.GeoObjectProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GOCODE);
  }
  
  public void setGoCode(String value)
  {
    if(value == null)
    {
      setValue(GOCODE, "");
    }
    else
    {
      setValue(GOCODE, value);
    }
  }
  
  public String getTypeCode()
  {
    return getValue(TYPECODE);
  }
  
  public void validateTypeCode()
  {
    this.validateAttribute(TYPECODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getTypeCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.curation.GeoObjectProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(TYPECODE);
  }
  
  public void setTypeCode(String value)
  {
    if(value == null)
    {
      setValue(TYPECODE, "");
    }
    else
    {
      setValue(TYPECODE, value);
    }
  }
  
  public String getUid()
  {
    return getValue(UID);
  }
  
  public void validateUid()
  {
    this.validateAttribute(UID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getUidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.curation.GeoObjectProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(UID);
  }
  
  public void setUid(String value)
  {
    if(value == null)
    {
      setValue(UID, "");
    }
    else
    {
      setValue(UID, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeoObjectProblem get(String oid)
  {
    return (GeoObjectProblem) com.runwaysdk.business.Business.get(oid);
  }
  
  public static GeoObjectProblem getByKey(String key)
  {
    return (GeoObjectProblem) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static GeoObjectProblem lock(java.lang.String oid)
  {
    GeoObjectProblem _instance = GeoObjectProblem.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static GeoObjectProblem unlock(java.lang.String oid)
  {
    GeoObjectProblem _instance = GeoObjectProblem.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
