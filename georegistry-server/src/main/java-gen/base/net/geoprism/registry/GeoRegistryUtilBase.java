package net.geoprism.registry;

@com.runwaysdk.business.ClassSignature(hash = -568730057)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoRegistryUtil.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoRegistryUtilBase extends com.runwaysdk.business.Util
{
  public final static String CLASS = "net.geoprism.registry.GeoRegistryUtil";
  public static java.lang.String OID = "oid";
  private static final long serialVersionUID = -568730057;
  
  public GeoRegistryUtilBase()
  {
    super();
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.GeoRegistryUtil.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeoRegistryUtil get(String oid)
  {
    return (GeoRegistryUtil) com.runwaysdk.business.Util.get(oid);
  }
  
  public static java.lang.String applyClassificationType(java.lang.String json)
  {
    String msg = "This method should never be invoked.  It should be overwritten in net.geoprism.registry.GeoRegistryUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.lang.String createHierarchyType(java.lang.String htJSON)
  {
    String msg = "This method should never be invoked.  It should be overwritten in net.geoprism.registry.GeoRegistryUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.io.InputStream exportShapefile(java.lang.String code, java.lang.String hierarchyCode)
  {
    String msg = "This method should never be invoked.  It should be overwritten in net.geoprism.registry.GeoRegistryUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.io.InputStream exportSpreadsheet(java.lang.String code, java.lang.String hierarchyCode)
  {
    String msg = "This method should never be invoked.  It should be overwritten in net.geoprism.registry.GeoRegistryUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static void importTypes(java.lang.String orgCode, java.io.InputStream istream)
  {
    String msg = "This method should never be invoked.  It should be overwritten in net.geoprism.registry.GeoRegistryUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static void submitChangeRequest(java.lang.String sJson)
  {
    String msg = "This method should never be invoked.  It should be overwritten in net.geoprism.registry.GeoRegistryUtil.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
