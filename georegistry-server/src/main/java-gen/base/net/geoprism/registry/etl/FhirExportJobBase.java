package net.geoprism.registry.etl;

@com.runwaysdk.business.ClassSignature(hash = -755080358)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to FhirExportJob.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class FhirExportJobBase extends net.geoprism.registry.etl.MasterListJob
{
  public final static String CLASS = "net.geoprism.registry.etl.FhirExportJob";
  public static java.lang.String EXTERNALSYSTEM = "externalSystem";
  public static java.lang.String IMPLEMENTATION = "implementation";
  public static java.lang.String VERSION = "version";
  private static final long serialVersionUID = -755080358;
  
  public FhirExportJobBase()
  {
    super();
  }
  
  public net.geoprism.registry.graph.FhirExternalSystem getExternalSystem()
  {
    return (net.geoprism.registry.graph.FhirExternalSystem)com.runwaysdk.business.graph.VertexObject.get("net.geoprism.registry.graph.FhirExternalSystem", getValue(EXTERNALSYSTEM));
  }
  
  public void validateExternalSystem()
  {
    this.validateAttribute(EXTERNALSYSTEM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getExternalSystemMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.FhirExportJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(EXTERNALSYSTEM);
  }
  
  public void setExternalSystem(net.geoprism.registry.graph.FhirExternalSystem value)
  {
    if(value == null)
    {
      setValue(EXTERNALSYSTEM, "");
    }
    else
    {
      setValue(EXTERNALSYSTEM, value.getOid());
    }
  }
  
  public String getImplementation()
  {
    return getValue(IMPLEMENTATION);
  }
  
  public void validateImplementation()
  {
    this.validateAttribute(IMPLEMENTATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getImplementationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.FhirExportJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(IMPLEMENTATION);
  }
  
  public void setImplementation(String value)
  {
    if(value == null)
    {
      setValue(IMPLEMENTATION, "");
    }
    else
    {
      setValue(IMPLEMENTATION, value);
    }
  }
  
  public net.geoprism.registry.MasterListVersion getVersion()
  {
    if (getValue(VERSION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return net.geoprism.registry.MasterListVersion.get(getValue(VERSION));
    }
  }
  
  public String getVersionOid()
  {
    return getValue(VERSION);
  }
  
  public void validateVersion()
  {
    this.validateAttribute(VERSION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getVersionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.etl.FhirExportJob.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(VERSION);
  }
  
  public void setVersion(net.geoprism.registry.MasterListVersion value)
  {
    if(value == null)
    {
      setValue(VERSION, "");
    }
    else
    {
      setValue(VERSION, value.getOid());
    }
  }
  
  public void setVersionId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(VERSION, "");
    }
    else
    {
      setValue(VERSION, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static FhirExportJobQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    FhirExportJobQuery query = new FhirExportJobQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static FhirExportJob get(String oid)
  {
    return (FhirExportJob) com.runwaysdk.business.Business.get(oid);
  }
  
  public static FhirExportJob getByKey(String key)
  {
    return (FhirExportJob) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static FhirExportJob lock(java.lang.String oid)
  {
    FhirExportJob _instance = FhirExportJob.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static FhirExportJob unlock(java.lang.String oid)
  {
    FhirExportJob _instance = FhirExportJob.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
