package net.geoprism.registry;

@com.runwaysdk.business.ClassSignature(hash = -980796918)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to OrganizationRMException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class OrganizationRMExceptionBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = "net.geoprism.registry.OrganizationRMException";
  public static java.lang.String GEOOBJECTTYPELABEL = "geoObjectTypeLabel";
  public static java.lang.String OID = "oid";
  public static java.lang.String ORGANIZATIONLABEL = "organizationLabel";
  private static final long serialVersionUID = -980796918;
  
  public OrganizationRMExceptionBase()
  {
    super();
  }
  
  public OrganizationRMExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public OrganizationRMExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public OrganizationRMExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getGeoObjectTypeLabel()
  {
    return getValue(GEOOBJECTTYPELABEL);
  }
  
  public void validateGeoObjectTypeLabel()
  {
    this.validateAttribute(GEOOBJECTTYPELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getGeoObjectTypeLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.OrganizationRMException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(GEOOBJECTTYPELABEL);
  }
  
  public void setGeoObjectTypeLabel(String value)
  {
    if(value == null)
    {
      setValue(GEOOBJECTTYPELABEL, "");
    }
    else
    {
      setValue(GEOOBJECTTYPELABEL, value);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.OrganizationRMException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public String getOrganizationLabel()
  {
    return getValue(ORGANIZATIONLABEL);
  }
  
  public void validateOrganizationLabel()
  {
    this.validateAttribute(ORGANIZATIONLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getOrganizationLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.OrganizationRMException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ORGANIZATIONLABEL);
  }
  
  public void setOrganizationLabel(String value)
  {
    if(value == null)
    {
      setValue(ORGANIZATIONLABEL, "");
    }
    else
    {
      setValue(ORGANIZATIONLABEL, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{geoObjectTypeLabel}", this.getGeoObjectTypeLabel());
    message = replace(message, "{oid}", this.getOid());
    message = replace(message, "{organizationLabel}", this.getOrganizationLabel());
    return message;
  }
  
}
