package net.geoprism.registry;

@com.runwaysdk.business.ClassSignature(hash = -116827773)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to LabeledPropertyGraphTypeVersion.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class LabeledPropertyGraphTypeVersionQuery extends com.runwaysdk.query.GeneratedBusinessQuery

{

  public LabeledPropertyGraphTypeVersionQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public LabeledPropertyGraphTypeVersionQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return net.geoprism.registry.LabeledPropertyGraphTypeVersion.CLASS;
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry()
  {
    return getEntry(null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY);

    return (net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY, mdAttributeIF, this, alias, null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY);

    return (net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getForDate()
  {
    return getForDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getForDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.FORDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getForDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.FORDATE, alias, displayLabel);

  }
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType()
  {
    return getGraphType(null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE);

    return (net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE, mdAttributeIF, this, alias, null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE);

    return (net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getPublishDate()
  {
    return getPublishDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getPublishDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.PUBLISHDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getPublishDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.PUBLISHDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getVersionNumber()
  {
    return getVersionNumber(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.VERSIONNUMBER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.VERSIONNUMBER, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY)) 
    {
       return new net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE)) 
    {
       return new net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends LabeledPropertyGraphTypeVersion> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<LabeledPropertyGraphTypeVersion>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.getBusinessQuery().isParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.getBusinessQuery().isParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(graphHasEdgeQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.getBusinessQuery().isNotParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.getBusinessQuery().isNotParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(graphHasEdgeQuery);
  }


  public com.runwaysdk.query.Condition vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.getBusinessQuery().isParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.getBusinessQuery().isParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(graphHasVertexQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.getBusinessQuery().isNotParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.getBusinessQuery().isNotParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(graphHasVertexQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface LabeledPropertyGraphTypeVersionQueryReferenceIF extends com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry();
    public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias);
    public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getForDate();
    public com.runwaysdk.query.SelectableMoment getForDate(String alias);
    public com.runwaysdk.query.SelectableMoment getForDate(String alias, String displayLabel);
    public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType();
    public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias);
    public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getPublishDate();
    public com.runwaysdk.query.SelectableMoment getPublishDate(String alias);
    public com.runwaysdk.query.SelectableMoment getPublishDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getVersionNumber();
    public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias);
    public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.registry.LabeledPropertyGraphTypeVersion labeledPropertyGraphTypeVersion);

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.registry.LabeledPropertyGraphTypeVersion labeledPropertyGraphTypeVersion);


  public com.runwaysdk.query.Condition edges();

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery);

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery);


  public com.runwaysdk.query.Condition SUBSELECT_edges();

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery);

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery);


  public com.runwaysdk.query.Condition vertices();

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery);

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery);


  public com.runwaysdk.query.Condition SUBSELECT_vertices();

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery);

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery);


  public com.runwaysdk.query.Condition NOT_IN_edges();

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery);

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery);


  public com.runwaysdk.query.Condition NOT_IN_vertices();

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery);

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class LabeledPropertyGraphTypeVersionQueryReference extends com.runwaysdk.query.AttributeReference
 implements LabeledPropertyGraphTypeVersionQueryReferenceIF

  {

  public LabeledPropertyGraphTypeVersionQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.registry.LabeledPropertyGraphTypeVersion labeledPropertyGraphTypeVersion)
    {
      if(labeledPropertyGraphTypeVersion == null) return this.EQ((java.lang.String)null);
      return this.EQ(labeledPropertyGraphTypeVersion.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.registry.LabeledPropertyGraphTypeVersion labeledPropertyGraphTypeVersion)
    {
      if(labeledPropertyGraphTypeVersion == null) return this.NE((java.lang.String)null);
      return this.NE(labeledPropertyGraphTypeVersion.getOid());
    }

  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN,  alias, displayLabel);

  }
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry()
  {
    return getEntry(null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY, alias, null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias, String displayLabel)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getForDate()
  {
    return getForDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getForDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.FORDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getForDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.FORDATE, alias, displayLabel);

  }
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType()
  {
    return getGraphType(null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE, alias, null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias, String displayLabel)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getPublishDate()
  {
    return getPublishDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getPublishDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.PUBLISHDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getPublishDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.PUBLISHDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getVersionNumber()
  {
    return getVersionNumber(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.VERSIONNUMBER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.VERSIONNUMBER, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.isParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.isParentIn_SUBSELECT(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.isParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.isParentIn_SUBSELECT(graphHasEdgeQuery);
  }


  public com.runwaysdk.query.Condition vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.isParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.isParentIn_SUBSELECT(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.isParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.isParentIn_SUBSELECT(graphHasVertexQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.isNotParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    return this.isNotParentIn_SUBSELECT(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasEdge.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphEdgeQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.isNotParentIn(graphHasEdgeQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_edges(net.geoprism.registry.LabeledPropertyGraphEdgeQuery labeledPropertyGraphEdgeQuery, net.geoprism.registry.action.GraphHasEdgeQuery graphHasEdgeQuery)
  {
    graphHasEdgeQuery.AND(graphHasEdgeQuery.hasChild(labeledPropertyGraphEdgeQuery));
    return this.isNotParentIn_SUBSELECT(graphHasEdgeQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.isNotParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    return this.isNotParentIn_SUBSELECT(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.registry.action.GraphHasVertex.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(labeledPropertyGraphVertexQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.isNotParentIn(graphHasVertexQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_vertices(net.geoprism.registry.LabeledPropertyGraphVertexQuery labeledPropertyGraphVertexQuery, net.geoprism.registry.action.GraphHasVertexQuery graphHasVertexQuery)
  {
    graphHasVertexQuery.AND(graphHasVertexQuery.hasChild(labeledPropertyGraphVertexQuery));
    return this.isNotParentIn_SUBSELECT(graphHasVertexQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY)) 
    {
       return new net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE)) 
    {
       return new net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface LabeledPropertyGraphTypeVersionQueryMultiReferenceIF extends com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry();
    public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias);
    public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getForDate();
    public com.runwaysdk.query.SelectableMoment getForDate(String alias);
    public com.runwaysdk.query.SelectableMoment getForDate(String alias, String displayLabel);
    public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType();
    public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias);
    public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getPublishDate();
    public com.runwaysdk.query.SelectableMoment getPublishDate(String alias);
    public com.runwaysdk.query.SelectableMoment getPublishDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getVersionNumber();
    public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias);
    public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion);
    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion);
    public com.runwaysdk.query.Condition containsAll(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion);
    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion);
    public com.runwaysdk.query.Condition containsExactly(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class LabeledPropertyGraphTypeVersionQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements LabeledPropertyGraphTypeVersionQueryMultiReferenceIF

  {

  public LabeledPropertyGraphTypeVersionQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion)  {

      String[] itemIdArray = new String[labeledPropertyGraphTypeVersion.length]; 

      for (int i=0; i<labeledPropertyGraphTypeVersion.length; i++)
      {
        itemIdArray[i] = labeledPropertyGraphTypeVersion[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion)  {

      String[] itemIdArray = new String[labeledPropertyGraphTypeVersion.length]; 

      for (int i=0; i<labeledPropertyGraphTypeVersion.length; i++)
      {
        itemIdArray[i] = labeledPropertyGraphTypeVersion[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion)  {

      String[] itemIdArray = new String[labeledPropertyGraphTypeVersion.length]; 

      for (int i=0; i<labeledPropertyGraphTypeVersion.length; i++)
      {
        itemIdArray[i] = labeledPropertyGraphTypeVersion[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion)  {

      String[] itemIdArray = new String[labeledPropertyGraphTypeVersion.length]; 

      for (int i=0; i<labeledPropertyGraphTypeVersion.length; i++)
      {
        itemIdArray[i] = labeledPropertyGraphTypeVersion[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(net.geoprism.registry.LabeledPropertyGraphTypeVersion ... labeledPropertyGraphTypeVersion)  {

      String[] itemIdArray = new String[labeledPropertyGraphTypeVersion.length]; 

      for (int i=0; i<labeledPropertyGraphTypeVersion.length; i++)
      {
        itemIdArray[i] = labeledPropertyGraphTypeVersion[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN,  alias, displayLabel);

  }
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry()
  {
    return getEntry(null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY, alias, null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF getEntry(String alias, String displayLabel)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getForDate()
  {
    return getForDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getForDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.FORDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getForDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.FORDATE, alias, displayLabel);

  }
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType()
  {
    return getGraphType(null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE, alias, null);

  }
 
  public net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF getGraphType(String alias, String displayLabel)
  {
    return (net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getPublishDate()
  {
    return getPublishDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getPublishDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.PUBLISHDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getPublishDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.PUBLISHDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getVersionNumber()
  {
    return getVersionNumber(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.VERSIONNUMBER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVersionNumber(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(net.geoprism.registry.LabeledPropertyGraphTypeVersion.VERSIONNUMBER, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.ENTRY)) 
    {
       return new net.geoprism.registry.LabeledPropertyGraphTypeEntryQuery.LabeledPropertyGraphTypeEntryQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.GRAPHTYPE)) 
    {
       return new net.geoprism.registry.LabeledPropertyGraphTypeQuery.LabeledPropertyGraphTypeQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.registry.LabeledPropertyGraphTypeVersion.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
