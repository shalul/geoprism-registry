package net.geoprism.registry;

@com.runwaysdk.business.ClassSignature(hash = -1438572362)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AbstractParentException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class AbstractParentExceptionBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = "net.geoprism.registry.AbstractParentException";
  public static java.lang.String CHILDGEOOBJECTTYPELABEL = "childGeoObjectTypeLabel";
  public static java.lang.String HIERARCHYTYPELABEL = "hierarchyTypeLabel";
  public static java.lang.String OID = "oid";
  public static java.lang.String PARENTGEOOBJECTTYPELABEL = "parentGeoObjectTypeLabel";
  private static final long serialVersionUID = -1438572362;
  
  public AbstractParentExceptionBase()
  {
    super();
  }
  
  public AbstractParentExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public AbstractParentExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public AbstractParentExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getChildGeoObjectTypeLabel()
  {
    return getValue(CHILDGEOOBJECTTYPELABEL);
  }
  
  public void validateChildGeoObjectTypeLabel()
  {
    this.validateAttribute(CHILDGEOOBJECTTYPELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getChildGeoObjectTypeLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.AbstractParentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(CHILDGEOOBJECTTYPELABEL);
  }
  
  public void setChildGeoObjectTypeLabel(String value)
  {
    if(value == null)
    {
      setValue(CHILDGEOOBJECTTYPELABEL, "");
    }
    else
    {
      setValue(CHILDGEOOBJECTTYPELABEL, value);
    }
  }
  
  public String getHierarchyTypeLabel()
  {
    return getValue(HIERARCHYTYPELABEL);
  }
  
  public void validateHierarchyTypeLabel()
  {
    this.validateAttribute(HIERARCHYTYPELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getHierarchyTypeLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.AbstractParentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(HIERARCHYTYPELABEL);
  }
  
  public void setHierarchyTypeLabel(String value)
  {
    if(value == null)
    {
      setValue(HIERARCHYTYPELABEL, "");
    }
    else
    {
      setValue(HIERARCHYTYPELABEL, value);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.AbstractParentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public String getParentGeoObjectTypeLabel()
  {
    return getValue(PARENTGEOOBJECTTYPELABEL);
  }
  
  public void validateParentGeoObjectTypeLabel()
  {
    this.validateAttribute(PARENTGEOOBJECTTYPELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getParentGeoObjectTypeLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.AbstractParentException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PARENTGEOOBJECTTYPELABEL);
  }
  
  public void setParentGeoObjectTypeLabel(String value)
  {
    if(value == null)
    {
      setValue(PARENTGEOOBJECTTYPELABEL, "");
    }
    else
    {
      setValue(PARENTGEOOBJECTTYPELABEL, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{childGeoObjectTypeLabel}", this.getChildGeoObjectTypeLabel());
    message = replace(message, "{hierarchyTypeLabel}", this.getHierarchyTypeLabel());
    message = replace(message, "{oid}", this.getOid());
    message = replace(message, "{parentGeoObjectTypeLabel}", this.getParentGeoObjectTypeLabel());
    return message;
  }
  
}
