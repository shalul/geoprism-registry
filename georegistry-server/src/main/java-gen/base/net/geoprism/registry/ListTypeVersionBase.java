package net.geoprism.registry;

@com.runwaysdk.business.ClassSignature(hash = -898295067)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ListTypeVersion.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ListTypeVersionBase extends com.runwaysdk.business.Business
{
  public final static String CLASS = "net.geoprism.registry.ListTypeVersion";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String ENTRY = "entry";
  public static java.lang.String FORDATE = "forDate";
  public static java.lang.String GEOSPATIALACCESSCONSTRAINTS = "geospatialAccessConstraints";
  private com.runwaysdk.business.Struct geospatialAccessConstraints = null;
  
  public static java.lang.String GEOSPATIALACKNOWLEDGEMENTS = "geospatialAcknowledgements";
  private com.runwaysdk.business.Struct geospatialAcknowledgements = null;
  
  public static java.lang.String GEOSPATIALCOLLECTIONDATE = "geospatialCollectionDate";
  public static java.lang.String GEOSPATIALCONTACTNAME = "geospatialContactName";
  public static java.lang.String GEOSPATIALDESCRIPTION = "geospatialDescription";
  private com.runwaysdk.business.Struct geospatialDescription = null;
  
  public static java.lang.String GEOSPATIALDISCLAIMER = "geospatialDisclaimer";
  private com.runwaysdk.business.Struct geospatialDisclaimer = null;
  
  public static java.lang.String GEOSPATIALDISTRIBUTIONFORMAT = "geospatialDistributionFormat";
  public static java.lang.String GEOSPATIALEMAIL = "geospatialEmail";
  public static java.lang.String GEOSPATIALLABEL = "geospatialLabel";
  private com.runwaysdk.business.Struct geospatialLabel = null;
  
  public static java.lang.String GEOSPATIALLANGUAGES = "geospatialLanguages";
  public static java.lang.String GEOSPATIALLINEAGE = "geospatialLineage";
  public static java.lang.String GEOSPATIALMASTER = "geospatialMaster";
  public static java.lang.String GEOSPATIALORGANIZATION = "geospatialOrganization";
  public static java.lang.String GEOSPATIALORIGINATOR = "geospatialOriginator";
  public static java.lang.String GEOSPATIALPLACEKEYWORDS = "geospatialPlaceKeywords";
  public static java.lang.String GEOSPATIALPROCESS = "geospatialProcess";
  private com.runwaysdk.business.Struct geospatialProcess = null;
  
  public static java.lang.String GEOSPATIALPROGRESS = "geospatialProgress";
  private com.runwaysdk.business.Struct geospatialProgress = null;
  
  public static java.lang.String GEOSPATIALREFERENCESYSTEM = "geospatialReferenceSystem";
  public static java.lang.String GEOSPATIALREPORTSPECIFICATION = "geospatialReportSpecification";
  public static java.lang.String GEOSPATIALSCALERESOLUTION = "geospatialScaleResolution";
  public static java.lang.String GEOSPATIALSPATIALREPRESENTATION = "geospatialSpatialRepresentation";
  public static java.lang.String GEOSPATIALTELEPHONENUMBER = "geospatialTelephoneNumber";
  public static java.lang.String GEOSPATIALTOPICCATEGORIES = "geospatialTopicCategories";
  public static java.lang.String GEOSPATIALUPDATEFREQUENCY = "geospatialUpdateFrequency";
  public static java.lang.String GEOSPATIALUSECONSTRAINTS = "geospatialUseConstraints";
  private com.runwaysdk.business.Struct geospatialUseConstraints = null;
  
  public static java.lang.String GEOSPATIALVISIBILITY = "geospatialVisibility";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LISTACCESSCONSTRAINTS = "listAccessConstraints";
  private com.runwaysdk.business.Struct listAccessConstraints = null;
  
  public static java.lang.String LISTACKNOWLEDGEMENTS = "listAcknowledgements";
  private com.runwaysdk.business.Struct listAcknowledgements = null;
  
  public static java.lang.String LISTCOLLECTIONDATE = "listCollectionDate";
  public static java.lang.String LISTCONTACTNAME = "listContactName";
  public static java.lang.String LISTDESCRIPTION = "listDescription";
  private com.runwaysdk.business.Struct listDescription = null;
  
  public static java.lang.String LISTDISCLAIMER = "listDisclaimer";
  private com.runwaysdk.business.Struct listDisclaimer = null;
  
  public static java.lang.String LISTEMAIL = "listEmail";
  public static java.lang.String LISTLABEL = "listLabel";
  private com.runwaysdk.business.Struct listLabel = null;
  
  public static java.lang.String LISTMASTER = "listMaster";
  public static java.lang.String LISTORGANIZATION = "listOrganization";
  public static java.lang.String LISTORIGINATOR = "listOriginator";
  public static java.lang.String LISTPROCESS = "listProcess";
  private com.runwaysdk.business.Struct listProcess = null;
  
  public static java.lang.String LISTPROGRESS = "listProgress";
  private com.runwaysdk.business.Struct listProgress = null;
  
  public static java.lang.String LISTTELEPHONENUMBER = "listTelephoneNumber";
  public static java.lang.String LISTTYPE = "listType";
  public static java.lang.String LISTUSECONSTRAINTS = "listUseConstraints";
  private com.runwaysdk.business.Struct listUseConstraints = null;
  
  public static java.lang.String LISTVISIBILITY = "listVisibility";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String MDBUSINESS = "mdBusiness";
  public static java.lang.String OID = "oid";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String PUBLISHDATE = "publishDate";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TYPE = "type";
  public static java.lang.String VERSIONNUMBER = "versionNumber";
  public static java.lang.String WORKING = "working";
  private static final long serialVersionUID = -898295067;
  
  public ListTypeVersionBase()
  {
    super();
    geospatialAccessConstraints = super.getStruct("geospatialAccessConstraints");
    geospatialAcknowledgements = super.getStruct("geospatialAcknowledgements");
    geospatialDescription = super.getStruct("geospatialDescription");
    geospatialDisclaimer = super.getStruct("geospatialDisclaimer");
    geospatialLabel = super.getStruct("geospatialLabel");
    geospatialProcess = super.getStruct("geospatialProcess");
    geospatialProgress = super.getStruct("geospatialProgress");
    geospatialUseConstraints = super.getStruct("geospatialUseConstraints");
    listAccessConstraints = super.getStruct("listAccessConstraints");
    listAcknowledgements = super.getStruct("listAcknowledgements");
    listDescription = super.getStruct("listDescription");
    listDisclaimer = super.getStruct("listDisclaimer");
    listLabel = super.getStruct("listLabel");
    listProcess = super.getStruct("listProcess");
    listProgress = super.getStruct("listProgress");
    listUseConstraints = super.getStruct("listUseConstraints");
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedByOid()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainOid()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getOid());
    }
  }
  
  public void setEntityDomainId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, oid);
    }
  }
  
  public net.geoprism.registry.ListTypeEntry getEntry()
  {
    if (getValue(ENTRY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return net.geoprism.registry.ListTypeEntry.get(getValue(ENTRY));
    }
  }
  
  public String getEntryOid()
  {
    return getValue(ENTRY);
  }
  
  public void validateEntry()
  {
    this.validateAttribute(ENTRY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getEntryMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ENTRY);
  }
  
  public void setEntry(net.geoprism.registry.ListTypeEntry value)
  {
    if(value == null)
    {
      setValue(ENTRY, "");
    }
    else
    {
      setValue(ENTRY, value.getOid());
    }
  }
  
  public void setEntryId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(ENTRY, "");
    }
    else
    {
      setValue(ENTRY, oid);
    }
  }
  
  public java.util.Date getForDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(FORDATE));
  }
  
  public void validateForDate()
  {
    this.validateAttribute(FORDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getForDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(FORDATE);
  }
  
  public void setForDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(FORDATE, "");
    }
    else
    {
      setValue(FORDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialAccessConstraints getGeospatialAccessConstraints()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialAccessConstraints) geospatialAccessConstraints;
  }
  
  public void validateGeospatialAccessConstraints()
  {
    this.validateAttribute(GEOSPATIALACCESSCONSTRAINTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialAccessConstraintsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALACCESSCONSTRAINTS);
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialAcknowledgements getGeospatialAcknowledgements()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialAcknowledgements) geospatialAcknowledgements;
  }
  
  public void validateGeospatialAcknowledgements()
  {
    this.validateAttribute(GEOSPATIALACKNOWLEDGEMENTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialAcknowledgementsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALACKNOWLEDGEMENTS);
  }
  
  public java.util.Date getGeospatialCollectionDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(GEOSPATIALCOLLECTIONDATE));
  }
  
  public void validateGeospatialCollectionDate()
  {
    this.validateAttribute(GEOSPATIALCOLLECTIONDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getGeospatialCollectionDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(GEOSPATIALCOLLECTIONDATE);
  }
  
  public void setGeospatialCollectionDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALCOLLECTIONDATE, "");
    }
    else
    {
      setValue(GEOSPATIALCOLLECTIONDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public String getGeospatialContactName()
  {
    return getValue(GEOSPATIALCONTACTNAME);
  }
  
  public void validateGeospatialContactName()
  {
    this.validateAttribute(GEOSPATIALCONTACTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialContactNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALCONTACTNAME);
  }
  
  public void setGeospatialContactName(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALCONTACTNAME, "");
    }
    else
    {
      setValue(GEOSPATIALCONTACTNAME, value);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialDescription getGeospatialDescription()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialDescription) geospatialDescription;
  }
  
  public void validateGeospatialDescription()
  {
    this.validateAttribute(GEOSPATIALDESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALDESCRIPTION);
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialDisclaimer getGeospatialDisclaimer()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialDisclaimer) geospatialDisclaimer;
  }
  
  public void validateGeospatialDisclaimer()
  {
    this.validateAttribute(GEOSPATIALDISCLAIMER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialDisclaimerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALDISCLAIMER);
  }
  
  public String getGeospatialDistributionFormat()
  {
    return getValue(GEOSPATIALDISTRIBUTIONFORMAT);
  }
  
  public void validateGeospatialDistributionFormat()
  {
    this.validateAttribute(GEOSPATIALDISTRIBUTIONFORMAT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialDistributionFormatMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALDISTRIBUTIONFORMAT);
  }
  
  public void setGeospatialDistributionFormat(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALDISTRIBUTIONFORMAT, "");
    }
    else
    {
      setValue(GEOSPATIALDISTRIBUTIONFORMAT, value);
    }
  }
  
  public String getGeospatialEmail()
  {
    return getValue(GEOSPATIALEMAIL);
  }
  
  public void validateGeospatialEmail()
  {
    this.validateAttribute(GEOSPATIALEMAIL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialEmailMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALEMAIL);
  }
  
  public void setGeospatialEmail(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALEMAIL, "");
    }
    else
    {
      setValue(GEOSPATIALEMAIL, value);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialLabel getGeospatialLabel()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialLabel) geospatialLabel;
  }
  
  public void validateGeospatialLabel()
  {
    this.validateAttribute(GEOSPATIALLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALLABEL);
  }
  
  public String getGeospatialLanguages()
  {
    return getValue(GEOSPATIALLANGUAGES);
  }
  
  public void validateGeospatialLanguages()
  {
    this.validateAttribute(GEOSPATIALLANGUAGES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialLanguagesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALLANGUAGES);
  }
  
  public void setGeospatialLanguages(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALLANGUAGES, "");
    }
    else
    {
      setValue(GEOSPATIALLANGUAGES, value);
    }
  }
  
  public String getGeospatialLineage()
  {
    return getValue(GEOSPATIALLINEAGE);
  }
  
  public void validateGeospatialLineage()
  {
    this.validateAttribute(GEOSPATIALLINEAGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialLineageMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALLINEAGE);
  }
  
  public void setGeospatialLineage(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALLINEAGE, "");
    }
    else
    {
      setValue(GEOSPATIALLINEAGE, value);
    }
  }
  
  public Boolean getGeospatialMaster()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(GEOSPATIALMASTER));
  }
  
  public void validateGeospatialMaster()
  {
    this.validateAttribute(GEOSPATIALMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getGeospatialMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(GEOSPATIALMASTER);
  }
  
  public void setGeospatialMaster(Boolean value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALMASTER, "");
    }
    else
    {
      setValue(GEOSPATIALMASTER, java.lang.Boolean.toString(value));
    }
  }
  
  public String getGeospatialOrganization()
  {
    return getValue(GEOSPATIALORGANIZATION);
  }
  
  public void validateGeospatialOrganization()
  {
    this.validateAttribute(GEOSPATIALORGANIZATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialOrganizationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALORGANIZATION);
  }
  
  public void setGeospatialOrganization(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALORGANIZATION, "");
    }
    else
    {
      setValue(GEOSPATIALORGANIZATION, value);
    }
  }
  
  public String getGeospatialOriginator()
  {
    return getValue(GEOSPATIALORIGINATOR);
  }
  
  public void validateGeospatialOriginator()
  {
    this.validateAttribute(GEOSPATIALORIGINATOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialOriginatorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALORIGINATOR);
  }
  
  public void setGeospatialOriginator(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALORIGINATOR, "");
    }
    else
    {
      setValue(GEOSPATIALORIGINATOR, value);
    }
  }
  
  public String getGeospatialPlaceKeywords()
  {
    return getValue(GEOSPATIALPLACEKEYWORDS);
  }
  
  public void validateGeospatialPlaceKeywords()
  {
    this.validateAttribute(GEOSPATIALPLACEKEYWORDS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialPlaceKeywordsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALPLACEKEYWORDS);
  }
  
  public void setGeospatialPlaceKeywords(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALPLACEKEYWORDS, "");
    }
    else
    {
      setValue(GEOSPATIALPLACEKEYWORDS, value);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialProcess getGeospatialProcess()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialProcess) geospatialProcess;
  }
  
  public void validateGeospatialProcess()
  {
    this.validateAttribute(GEOSPATIALPROCESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialProcessMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALPROCESS);
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialProgress getGeospatialProgress()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialProgress) geospatialProgress;
  }
  
  public void validateGeospatialProgress()
  {
    this.validateAttribute(GEOSPATIALPROGRESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialProgressMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALPROGRESS);
  }
  
  public String getGeospatialReferenceSystem()
  {
    return getValue(GEOSPATIALREFERENCESYSTEM);
  }
  
  public void validateGeospatialReferenceSystem()
  {
    this.validateAttribute(GEOSPATIALREFERENCESYSTEM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialReferenceSystemMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALREFERENCESYSTEM);
  }
  
  public void setGeospatialReferenceSystem(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALREFERENCESYSTEM, "");
    }
    else
    {
      setValue(GEOSPATIALREFERENCESYSTEM, value);
    }
  }
  
  public String getGeospatialReportSpecification()
  {
    return getValue(GEOSPATIALREPORTSPECIFICATION);
  }
  
  public void validateGeospatialReportSpecification()
  {
    this.validateAttribute(GEOSPATIALREPORTSPECIFICATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialReportSpecificationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALREPORTSPECIFICATION);
  }
  
  public void setGeospatialReportSpecification(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALREPORTSPECIFICATION, "");
    }
    else
    {
      setValue(GEOSPATIALREPORTSPECIFICATION, value);
    }
  }
  
  public String getGeospatialScaleResolution()
  {
    return getValue(GEOSPATIALSCALERESOLUTION);
  }
  
  public void validateGeospatialScaleResolution()
  {
    this.validateAttribute(GEOSPATIALSCALERESOLUTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialScaleResolutionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALSCALERESOLUTION);
  }
  
  public void setGeospatialScaleResolution(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALSCALERESOLUTION, "");
    }
    else
    {
      setValue(GEOSPATIALSCALERESOLUTION, value);
    }
  }
  
  public String getGeospatialSpatialRepresentation()
  {
    return getValue(GEOSPATIALSPATIALREPRESENTATION);
  }
  
  public void validateGeospatialSpatialRepresentation()
  {
    this.validateAttribute(GEOSPATIALSPATIALREPRESENTATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialSpatialRepresentationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALSPATIALREPRESENTATION);
  }
  
  public void setGeospatialSpatialRepresentation(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALSPATIALREPRESENTATION, "");
    }
    else
    {
      setValue(GEOSPATIALSPATIALREPRESENTATION, value);
    }
  }
  
  public String getGeospatialTelephoneNumber()
  {
    return getValue(GEOSPATIALTELEPHONENUMBER);
  }
  
  public void validateGeospatialTelephoneNumber()
  {
    this.validateAttribute(GEOSPATIALTELEPHONENUMBER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialTelephoneNumberMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALTELEPHONENUMBER);
  }
  
  public void setGeospatialTelephoneNumber(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALTELEPHONENUMBER, "");
    }
    else
    {
      setValue(GEOSPATIALTELEPHONENUMBER, value);
    }
  }
  
  public String getGeospatialTopicCategories()
  {
    return getValue(GEOSPATIALTOPICCATEGORIES);
  }
  
  public void validateGeospatialTopicCategories()
  {
    this.validateAttribute(GEOSPATIALTOPICCATEGORIES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialTopicCategoriesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALTOPICCATEGORIES);
  }
  
  public void setGeospatialTopicCategories(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALTOPICCATEGORIES, "");
    }
    else
    {
      setValue(GEOSPATIALTOPICCATEGORIES, value);
    }
  }
  
  public String getGeospatialUpdateFrequency()
  {
    return getValue(GEOSPATIALUPDATEFREQUENCY);
  }
  
  public void validateGeospatialUpdateFrequency()
  {
    this.validateAttribute(GEOSPATIALUPDATEFREQUENCY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeospatialUpdateFrequencyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALUPDATEFREQUENCY);
  }
  
  public void setGeospatialUpdateFrequency(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALUPDATEFREQUENCY, "");
    }
    else
    {
      setValue(GEOSPATIALUPDATEFREQUENCY, value);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionGeospatialUseConstraints getGeospatialUseConstraints()
  {
    return (net.geoprism.registry.ListTypeVersionGeospatialUseConstraints) geospatialUseConstraints;
  }
  
  public void validateGeospatialUseConstraints()
  {
    this.validateAttribute(GEOSPATIALUSECONSTRAINTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getGeospatialUseConstraintsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(GEOSPATIALUSECONSTRAINTS);
  }
  
  public String getGeospatialVisibility()
  {
    return getValue(GEOSPATIALVISIBILITY);
  }
  
  public void validateGeospatialVisibility()
  {
    this.validateAttribute(GEOSPATIALVISIBILITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getGeospatialVisibilityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(GEOSPATIALVISIBILITY);
  }
  
  public void setGeospatialVisibility(String value)
  {
    if(value == null)
    {
      setValue(GEOSPATIALVISIBILITY, "");
    }
    else
    {
      setValue(GEOSPATIALVISIBILITY, value);
    }
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedByOid()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public net.geoprism.registry.ListTypeVersionListAccessConstraints getListAccessConstraints()
  {
    return (net.geoprism.registry.ListTypeVersionListAccessConstraints) listAccessConstraints;
  }
  
  public void validateListAccessConstraints()
  {
    this.validateAttribute(LISTACCESSCONSTRAINTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListAccessConstraintsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTACCESSCONSTRAINTS);
  }
  
  public net.geoprism.registry.ListTypeVersionListAcknowledgements getListAcknowledgements()
  {
    return (net.geoprism.registry.ListTypeVersionListAcknowledgements) listAcknowledgements;
  }
  
  public void validateListAcknowledgements()
  {
    this.validateAttribute(LISTACKNOWLEDGEMENTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListAcknowledgementsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTACKNOWLEDGEMENTS);
  }
  
  public java.util.Date getListCollectionDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LISTCOLLECTIONDATE));
  }
  
  public void validateListCollectionDate()
  {
    this.validateAttribute(LISTCOLLECTIONDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getListCollectionDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LISTCOLLECTIONDATE);
  }
  
  public void setListCollectionDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(LISTCOLLECTIONDATE, "");
    }
    else
    {
      setValue(LISTCOLLECTIONDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public String getListContactName()
  {
    return getValue(LISTCONTACTNAME);
  }
  
  public void validateListContactName()
  {
    this.validateAttribute(LISTCONTACTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getListContactNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LISTCONTACTNAME);
  }
  
  public void setListContactName(String value)
  {
    if(value == null)
    {
      setValue(LISTCONTACTNAME, "");
    }
    else
    {
      setValue(LISTCONTACTNAME, value);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionListDescription getListDescription()
  {
    return (net.geoprism.registry.ListTypeVersionListDescription) listDescription;
  }
  
  public void validateListDescription()
  {
    this.validateAttribute(LISTDESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTDESCRIPTION);
  }
  
  public net.geoprism.registry.ListTypeVersionListDisclaimer getListDisclaimer()
  {
    return (net.geoprism.registry.ListTypeVersionListDisclaimer) listDisclaimer;
  }
  
  public void validateListDisclaimer()
  {
    this.validateAttribute(LISTDISCLAIMER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListDisclaimerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTDISCLAIMER);
  }
  
  public String getListEmail()
  {
    return getValue(LISTEMAIL);
  }
  
  public void validateListEmail()
  {
    this.validateAttribute(LISTEMAIL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getListEmailMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LISTEMAIL);
  }
  
  public void setListEmail(String value)
  {
    if(value == null)
    {
      setValue(LISTEMAIL, "");
    }
    else
    {
      setValue(LISTEMAIL, value);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionListLabel getListLabel()
  {
    return (net.geoprism.registry.ListTypeVersionListLabel) listLabel;
  }
  
  public void validateListLabel()
  {
    this.validateAttribute(LISTLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTLABEL);
  }
  
  public Boolean getListMaster()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(LISTMASTER));
  }
  
  public void validateListMaster()
  {
    this.validateAttribute(LISTMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getListMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(LISTMASTER);
  }
  
  public void setListMaster(Boolean value)
  {
    if(value == null)
    {
      setValue(LISTMASTER, "");
    }
    else
    {
      setValue(LISTMASTER, java.lang.Boolean.toString(value));
    }
  }
  
  public String getListOrganization()
  {
    return getValue(LISTORGANIZATION);
  }
  
  public void validateListOrganization()
  {
    this.validateAttribute(LISTORGANIZATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getListOrganizationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LISTORGANIZATION);
  }
  
  public void setListOrganization(String value)
  {
    if(value == null)
    {
      setValue(LISTORGANIZATION, "");
    }
    else
    {
      setValue(LISTORGANIZATION, value);
    }
  }
  
  public String getListOriginator()
  {
    return getValue(LISTORIGINATOR);
  }
  
  public void validateListOriginator()
  {
    this.validateAttribute(LISTORIGINATOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getListOriginatorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LISTORIGINATOR);
  }
  
  public void setListOriginator(String value)
  {
    if(value == null)
    {
      setValue(LISTORIGINATOR, "");
    }
    else
    {
      setValue(LISTORIGINATOR, value);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionListProcess getListProcess()
  {
    return (net.geoprism.registry.ListTypeVersionListProcess) listProcess;
  }
  
  public void validateListProcess()
  {
    this.validateAttribute(LISTPROCESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListProcessMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTPROCESS);
  }
  
  public net.geoprism.registry.ListTypeVersionListProgress getListProgress()
  {
    return (net.geoprism.registry.ListTypeVersionListProgress) listProgress;
  }
  
  public void validateListProgress()
  {
    this.validateAttribute(LISTPROGRESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListProgressMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTPROGRESS);
  }
  
  public String getListTelephoneNumber()
  {
    return getValue(LISTTELEPHONENUMBER);
  }
  
  public void validateListTelephoneNumber()
  {
    this.validateAttribute(LISTTELEPHONENUMBER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getListTelephoneNumberMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(LISTTELEPHONENUMBER);
  }
  
  public void setListTelephoneNumber(String value)
  {
    if(value == null)
    {
      setValue(LISTTELEPHONENUMBER, "");
    }
    else
    {
      setValue(LISTTELEPHONENUMBER, value);
    }
  }
  
  public net.geoprism.registry.ListType getListType()
  {
    if (getValue(LISTTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return net.geoprism.registry.ListType.get(getValue(LISTTYPE));
    }
  }
  
  public String getListTypeOid()
  {
    return getValue(LISTTYPE);
  }
  
  public void validateListType()
  {
    this.validateAttribute(LISTTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getListTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LISTTYPE);
  }
  
  public void setListType(net.geoprism.registry.ListType value)
  {
    if(value == null)
    {
      setValue(LISTTYPE, "");
    }
    else
    {
      setValue(LISTTYPE, value.getOid());
    }
  }
  
  public void setListTypeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(LISTTYPE, "");
    }
    else
    {
      setValue(LISTTYPE, oid);
    }
  }
  
  public net.geoprism.registry.ListTypeVersionListUseConstraints getListUseConstraints()
  {
    return (net.geoprism.registry.ListTypeVersionListUseConstraints) listUseConstraints;
  }
  
  public void validateListUseConstraints()
  {
    this.validateAttribute(LISTUSECONSTRAINTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getListUseConstraintsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(LISTUSECONSTRAINTS);
  }
  
  public String getListVisibility()
  {
    return getValue(LISTVISIBILITY);
  }
  
  public void validateListVisibility()
  {
    this.validateAttribute(LISTVISIBILITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getListVisibilityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(LISTVISIBILITY);
  }
  
  public void setListVisibility(String value)
  {
    if(value == null)
    {
      setValue(LISTVISIBILITY, "");
    }
    else
    {
      setValue(LISTVISIBILITY, value);
    }
  }
  
  public com.runwaysdk.system.SingleActor getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedByOid()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public com.runwaysdk.system.metadata.MdBusiness getMdBusiness()
  {
    if (getValue(MDBUSINESS).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdBusiness.get(getValue(MDBUSINESS));
    }
  }
  
  public String getMdBusinessOid()
  {
    return getValue(MDBUSINESS);
  }
  
  public void validateMdBusiness()
  {
    this.validateAttribute(MDBUSINESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getMdBusinessMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(MDBUSINESS);
  }
  
  public void setMdBusiness(com.runwaysdk.system.metadata.MdBusiness value)
  {
    if(value == null)
    {
      setValue(MDBUSINESS, "");
    }
    else
    {
      setValue(MDBUSINESS, value.getOid());
    }
  }
  
  public void setMdBusinessId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(MDBUSINESS, "");
    }
    else
    {
      setValue(MDBUSINESS, oid);
    }
  }
  
  public String getOid()
  {
    return getValue(OID);
  }
  
  public void validateOid()
  {
    this.validateAttribute(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerOid()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getOid());
    }
  }
  
  public void setOwnerId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, oid);
    }
  }
  
  public java.util.Date getPublishDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(PUBLISHDATE));
  }
  
  public void validatePublishDate()
  {
    this.validateAttribute(PUBLISHDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getPublishDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(PUBLISHDATE);
  }
  
  public void setPublishDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(PUBLISHDATE, "");
    }
    else
    {
      setValue(PUBLISHDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPE);
  }
  
  public Integer getVersionNumber()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(VERSIONNUMBER));
  }
  
  public void validateVersionNumber()
  {
    this.validateAttribute(VERSIONNUMBER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getVersionNumberMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(VERSIONNUMBER);
  }
  
  public void setVersionNumber(Integer value)
  {
    if(value == null)
    {
      setValue(VERSIONNUMBER, "");
    }
    else
    {
      setValue(VERSIONNUMBER, java.lang.Integer.toString(value));
    }
  }
  
  public Boolean getWorking()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(WORKING));
  }
  
  public void validateWorking()
  {
    this.validateAttribute(WORKING);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getWorkingMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.ListTypeVersion.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(WORKING);
  }
  
  public void setWorking(Boolean value)
  {
    if(value == null)
    {
      setValue(WORKING, "");
    }
    else
    {
      setValue(WORKING, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ListTypeVersionQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ListTypeVersionQuery query = new ListTypeVersionQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ListTypeVersion get(String oid)
  {
    return (ListTypeVersion) com.runwaysdk.business.Business.get(oid);
  }
  
  public static ListTypeVersion getByKey(String key)
  {
    return (ListTypeVersion) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public java.lang.String publish()
  {
    String msg = "This method should never be invoked.  It should be overwritten in net.geoprism.registry.ListTypeVersion.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String publish(java.lang.String oid)
  {
    ListTypeVersion _instance = ListTypeVersion.get(oid);
    return _instance.publish();
  }
  
  public static ListTypeVersion lock(java.lang.String oid)
  {
    ListTypeVersion _instance = ListTypeVersion.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static ListTypeVersion unlock(java.lang.String oid)
  {
    ListTypeVersion _instance = ListTypeVersion.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
