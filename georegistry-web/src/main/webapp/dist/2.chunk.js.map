{"version":3,"sources":["webpack:///./src/app/admin/admin.module.ts","webpack:///./src/app/admin/service/account.service.ts","webpack:///./src/app/admin/component/account/account-invite.component.ts","webpack:///./src/app/admin/component/account/account-invite.component.html","webpack:///./src/app/admin/service/system-logo.service.ts","webpack:///./src/app/admin/service/email.service.ts","webpack:///./src/app/admin/service/settings.service.ts","webpack:///./src/app/admin/service/localization-manager.service.ts","webpack:///./src/app/admin/component/account/account.component.ts","webpack:///./src/app/admin/component/account/account.component.html","webpack:///./src/app/admin/component/account/role-management.component.ts","webpack:///./src/app/admin/component/account/role-management.component.html","webpack:///./src/app/admin/component/logo/system-logo.component.ts","webpack:///./src/app/admin/component/logo/system-logo.component.html","webpack:///./src/app/admin/component/logo/system-logos.component.ts","webpack:///./src/app/admin/component/logo/system-logos.component.html","webpack:///./src/app/admin/component/email/email.component.ts","webpack:///./src/app/admin/component/email/email.component.html","webpack:///./src/app/admin/component/account/accounts.component.ts","webpack:///./src/app/admin/component/account/accounts.component.html","webpack:///./src/app/admin/component/account/account-invite-complete.component.ts","webpack:///./src/app/admin/component/account/account-invite-complete.component.html","webpack:///./src/app/admin/component/settings.component.ts","webpack:///./src/app/admin/component/settings.component.html","webpack:///./src/app/admin/component/organization/organization-modal.component.ts","webpack:///./src/app/admin/component/organization/organization-modal.component.html","webpack:///./src/app/admin/component/external-system/external-system-modal.component.ts","webpack:///./src/app/admin/component/external-system/external-system-modal.component.html","webpack:///./src/app/admin/component/localization-manager/new-locale-modal.component.ts","webpack:///./src/app/admin/component/localization-manager/new-locale-modal.component.html","webpack:///./src/app/admin/component/localization-manager/import-localization-modal.component.ts","webpack:///./src/app/admin/component/localization-manager/import-localization-modal.component.html","webpack:///./src/app/admin/model/account.ts","webpack:///./src/app/admin/model/localization-manager.ts","webpack:///./src/app/admin/admin-routing.module.ts"],"names":["AdminModule","SystemLogoService","EmailService","AccountService","SettingsService","LocalizationManagerService","CommonModule","FormsModule","ReactiveFormsModule","FileUploadModule","NgxPaginationModule","SharedModule","AdminRoutingModule","SystemLogoComponent","SystemLogosComponent","AccountsComponent","AccountInviteCompleteComponent","AccountInviteComponent","AccountComponent","EmailComponent","SettingsComponent","OrganizationModalComponent","NewLocaleModalComponent","RoleManagementComponent","ExternalSystemModalComponent","ImportLocalizationModalComponent","http","eventService","page","p","params","HttpParams","set","toString","this","start","get","acp","pipe","finalize","complete","toPromise","edit","oid","headers","HttpHeaders","post","JSON","stringify","newInstance","organizationCodes","newUserInstance","newInvite","remove","apply","user","roleNames","account","unlock","inviteUser","invite","roleIds","inviteComplete","token","getRolesForUser","userOID","service","bsModalRef","settingsService","message","ngOnInit","UserInvite","then","roles","catch","err","error","cancel","hide","onRoleIdsUpdate","onSubmit","ErrorHandler","getMessageFromError","getIcons","getInstance","email","setting","getNewLocaleInfo","installLocale","language","country","variant","installFile","formData","authService","localizeService","isSRA","isRA","orgCodes","getMyOrganizations","data","onEdit","Subject","event","response","onChangePassword","changePassword","password","length","next","decode","$event","EventEmitter","_roleIds","isAdmin","isMaintainer","isContributor","isContributer","_roles","formatRoles","onChangeRole","formattedObj","forEach","role","orgCode","ORGANIZATIONS","orgGroup","ORGANIZATIONLABEL","orgLabel","localizedValue","type","RA","addToGeoObjectTypeGroup","geoObjectTypeGroup","geoObjectTypeLabel","assigned","ENABLEDROLE","name","GEOOBJECTTYPEROLES","push","newObj","SRA","sortRoles","org","gotrole","GEOOBJECTTYPEROLESGROUP","sort","a","b","RegistryRoleType","organization","exists","rg","GEOOBJECTTYPELABEL","onToggleOrgRA","onToggleSRA","setGroupRole","group","target","newRoleIds","emit","removeRoleId","id","pos","indexOf","splice","showData","console","log","route","dropActive","context","onSuccess","options","autoUpload","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBeforeUploadItem","fileItem","onCompleteItem","item","status","onSuccessItem","onErrorItem","onBuildItemForm","form","append","icon","ngAfterViewInit","that","onAfterAddingFile","uploadElRef","nativeElement","value","reader","FileReader","onload","e","file","result","readAsDataURL","_file","fileOver","uploadAll","clear","clearQueue","router","modalService","changeDetectorRef","random","onClickRemove","show","ConfirmModalComponent","animated","backdrop","ignoreBackdropClick","content","submitText","onConfirm","subscribe","resp","icons","ico","Math","detectChanges","custom","server","username","port","from","to","res","resultSet","count","pageNumber","pageSize","index","findIndex","u","onPageChange","inviteUsers","ErrorModalComponent","sub","ngOnDestroy","unsubscribe","window","location","href","externalSystemService","orgService","organizations","settings","isConfigured","systems","installedLocales","getLocales","getOrganizations","orgs","onSystemPageChange","getCGRVersion","getVersion","exportLocalization","importLocalization","onEditOrganization","isNewOrganization","x","code","onRemoveOrganization","ModalTypes","danger","removeOrganization","i","newOrganization","newLocalization","locale","addLocale","configureEmail","getExternalSystems","newSystem","init","onEditSystem","system","getExternalSystem","onRemoveSystem","label","removeExternalSystem","lService","create","contactInfo","updateOrganization","systemService","description","filter","o","isOrganizationRA","applyExternalSystem","localizationManagerService","allLocaleInfo","AllLocaleInfo","allLocaleInfoIN","submit","localizationService","fileRef","parse","queue","User","Group","Account","Role","FormattedRoles","FormattedOrganization","FormattedGeoObjectTypeRoleGroup","LocaleInfo","Locale","routes","path","canActivate","AuthGuard","component","title","provide","LocationStrategy","useClass","HashLocationStrategy","RouterModule","forChild"],"mappings":"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AC,UAAS,WACd,EAAKZ,aAAaa,eAElBC,a,iCApDSpC,GAA0B,sD,oCAA1BA,EAA0B,QAA1BA,EAA0B,O,EADvC,GACa,EAAAA,8B,4GCXb,KAGA,MAHA,IAIA,QAOA,GAHA,OACA,MAEA,Q,oICXQ,6BAAqE,YAAW,kB,8BAAX,+C,sBAyFjE,6BACE,6BACF,kB,sBAgDJ,4BACE,yBACE,6BACF,iBACF,kB,mDAGI,+BACE,oG,uBADF,iB,KAAqD,+E,mDAErD,+BACE,oG,uBADF,iB,KAAoD,0D,yBAJxD,4BACE,6BACE,iCAEA,iCAEF,iBACF,kB,8BALyB,8DAEA,8D,sBA6BnB,6BACE,6BACF,kB,mDA3BN,0BACE,4BACE,6BACE,4BACE,6BACF,iBACF,iBACA,6BACE,8BACE,kCAAuB,kHAAvB,iBAEA,0CACF,iBACF,iBACF,iBACA,6BACE,8BACE,6BACE,8BACF,iBACF,iBACA,8BACE,+BACE,8BACF,iBACA,gCAGF,iBACF,iBACF,iB,qDArB+B,+DAEA,uEAYA,yCAEpB,4E,mDAaX,0BACE,4BACE,+BACE,+BACE,kHADF,iBAEA,2BAAM,6BAAsD,iBAC9D,iBACA,+BACE,+BACE,kHADF,iBAEA,2BAAM,6BAAwD,iBAChE,iBACF,iBACF,iB,iCAVuE,wCAAe,mCAKf,wCAAc,oC,mDAOrF,yCAAwG,+GAA4C,iB,iCAA7G,uDAAwC,0B,0GAnNrF,+BAAwD,kIAGtD,+BAEE,4BACE,8BAEA,4BACE,2BACE,4BACF,iBACF,iBACA,4BACE,6BACE,6BACE,8BACF,iBACF,iBACA,8BACE,+BACE,gCAAmB,kHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,8BACE,6BACE,8BACF,iBACF,iBACA,8BACE,+BACE,gCAAmB,iHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,8BACE,6BACE,8BACF,iBACF,iBACA,8BACE,+BACE,gCAAmB,qHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,8BACE,6BACE,8BACF,iBACF,iBACA,8BACE,+BACE,gCAAmB,oHAAnB,iBACF,iBACF,iBACF,iBA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","file":"2.chunk.js","sourcesContent":["///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\nimport { SystemLogoService } from './service/system-logo.service';\nimport { EmailService } from './service/email.service';\nimport { AccountService } from './service/account.service';\nimport { SettingsService } from './service/settings.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\n\n\n\nimport { AccountsComponent } from './component/account/accounts.component';\nimport { RoleManagementComponent } from './component/account/role-management.component';\nimport { AccountInviteComponent } from './component/account/account-invite.component';\nimport { AccountInviteCompleteComponent } from './component/account/account-invite-complete.component';\nimport { AccountComponent } from './component/account/account.component';\nimport { SystemLogoComponent } from './component/logo/system-logo.component';\nimport { SystemLogosComponent } from './component/logo/system-logos.component';\nimport { EmailComponent } from './component/email/email.component';\nimport { SettingsComponent } from './component/settings.component';\nimport { OrganizationModalComponent } from './component/organization/organization-modal.component';\nimport { NewLocaleModalComponent } from './component/localization-manager/new-locale-modal.component'\nimport { ImportLocalizationModalComponent } from './component/localization-manager/import-localization-modal.component';\nimport { ExternalSystemModalComponent } from './component/external-system/external-system-modal.component';\n\n\nimport { AdminRoutingModule } from './admin-routing.module';\n\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\tNgxPaginationModule,\n\t\tSharedModule,\n\t\tAdminRoutingModule\n\t],\n\tdeclarations: [\n\t\t// Global components\n\t\tSystemLogoComponent,\n\t\tSystemLogosComponent,\n\t\tAccountsComponent,\n\t\tAccountInviteCompleteComponent,\n\t\tAccountInviteComponent,\n\t\tAccountComponent,\n\t\tSystemLogoComponent,\n\t\tSystemLogosComponent,\n\t\tEmailComponent,\n\t\tSettingsComponent,\n\t\tOrganizationModalComponent,\n\t\tNewLocaleModalComponent,\n\t\tRoleManagementComponent,\n\t\tExternalSystemModalComponent,\n\t\tImportLocalizationModalComponent\n\t],\n\texports: [\n\t\tSystemLogoComponent,\n\t\tSystemLogosComponent\n\t],\n\tproviders: [\n\t\tSystemLogoService,\n\t\tEmailService,\n\t\tAccountService,\n\t\tSettingsService,\n\t\tLocalizationManagerService\n\t],\n\tentryComponents: [\n\t\tAccountInviteComponent,\n\t\tAccountComponent,\n\t\tOrganizationModalComponent,\n\t\tNewLocaleModalComponent,\n\t\tRoleManagementComponent,\n\t\tExternalSystemModalComponent,\n\t\tImportLocalizationModalComponent\n\t]\n})\n\nexport class AdminModule { }\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service'\n\nimport { Account, User, UserInvite } from '@admin/model/account';\n\nimport { PageResult } from '@shared/model/core'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class AccountService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    page( p: number ): Promise<PageResult<User>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'number', p.toString() );\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<User>>( acp + '/registryaccount/page', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    edit( oid: string ): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/registryaccount/edit', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInstance(organizationCodes: string[]): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/registryaccount/newInstance', JSON.stringify( {\"organizationCodes\": organizationCodes} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newUserInstance(): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<User>( acp + '/registryaccount/newUserInstance', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInvite(): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/registryaccount/newInvite', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/registryaccount/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    apply( user: User, roleNames: string[] ): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/registryaccount/apply', JSON.stringify( { account: user, roleNames: roleNames } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/registryaccount/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    inviteUser( invite: UserInvite, roleIds: string[] ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n//        console.log( \"Submitting to inviteUser : \", JSON.stringify( { invite: invite, roleIds: roleIds } ) );\n\n        return this.http\n            .post<void>( acp + '/registryaccount/inviteUser', JSON.stringify( { invite: invite, roleIds: roleIds } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    inviteComplete( user: User, token: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/registryaccount/inviteComplete', JSON.stringify( { user: user, token: token } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    getRolesForUser( userOID: string ): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'userOID', userOID );\n\n        this.eventService.start();\n\n        return this.http\n            .get<any>( acp + '/cgr/account/get-roles-for-user', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorHandler } from '@shared/component';\nimport { Account, UserInvite } from '@admin/model/account';\nimport { Organization } from '@shared/model/core';\n\nimport { SettingsService } from '@admin/service/settings.service'\nimport { AccountService } from '@admin/service/account.service';\n\n\n@Component({\n\tselector: 'account-invite',\n\ttemplateUrl: './account-invite.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class AccountInviteComponent implements OnInit {\n\tinvite: UserInvite;\n\tmessage: string = null;\n\troleIds: string[] = [];\n\torganization: Organization;\n\torganizations: Organization[];\n\n\tconstructor(\n\t\tprivate service: AccountService,\n\t\tpublic bsModalRef: BsModalRef,\n\t\tpublic settingsService: SettingsService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.invite = new UserInvite();\n\n\t\tthis.service.newInvite().then((account: Account) => {\n\t\t\tthis.invite.roles = account.roles;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\t// this.settingsService.getOrganizations().then(orgs => {\n\t\t//     this.organizations = orgs\n\t\t// }).catch((err: HttpErrorResponse) => {\n\t\t//     this.error(err);\n\t\t// });\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tonRoleIdsUpdate(roleIds: string[]): void {\n\t\tthis.roleIds = roleIds;\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.inviteUser(this.invite, this.roleIds).then(() => {\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n}","<div>\n  <!-- <header></header> -->\n  \n  <message></message>\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" style=\"height:calc(100vh - 144px);padding-bottom: 20px;overflow-y: auto;\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n      <!-- <div class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n        <fieldset>            \n          <div class=\"heading\">\n            <h3>Invite a User</h3>\n          </div>      \n          <hr>        \n          \n          <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"account.email\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"invite.email\" name=\"email\" required #aemail=\"ngModel\" email>\n              </span>\n              <div *ngIf=\"aemail.errors?.email && invite.email && invite.email.length > 0\" class=\"inline-error-message\">\n                <localize key=\"account.email.validation\"></localize>\n              </div>                                          \n            </div>\n          </div>   \n          \n          <role-management *ngIf=\"invite.roles\" [newInstance]=\"true\" [roles]=\"invite.roles\" (onRoleIdsUpdate)=\"onRoleIdsUpdate($event)\"></role-management>\n\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid && roleIds.length > 0)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service'\n\nimport { SystemLogo } from '@admin/model/system-logo';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SystemLogoService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetIcons(): Promise<{ icons: SystemLogo[] }> {\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<{ icons: SystemLogo[] }>(acp + '/logo/getAll')\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/logo/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service'\n\nimport { Email } from '@admin/model/email';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class EmailService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) {\n\t}\n\n\tgetInstance(): Promise<Email> {\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http.get<Email>(acp + '/email/getInstance')\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tapply(email: Email): Promise<Email> {\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<Email>(acp + '/email/apply', JSON.stringify({ setting: email }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SettingsService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service';\n\nimport { AllLocaleInfo } from '@admin/model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\n\tgetNewLocaleInfo(): Promise<AllLocaleInfo> {\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<AllLocaleInfo>(acp + '/localization/getNewLocaleInformation')\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tinstallLocale(language: string, country: string, variant: string): Promise<{ locale: string }> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tif (language != null) {\n\t\t\tparams = params.set('language', language);\n\t\t}\n\n\t\tif (country != null) {\n\t\t\tparams = params.set('country', country);\n\t\t}\n\n\t\tif (variant != null) {\n\t\t\tparams = params.set('variant', variant);\n\t\t}\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<{ locale: string }>(acp + '/localization/installLocale', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tinstallFile(formData: FormData): Promise<void> {\n\t\tlet headers = new HttpHeaders();\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http.post<void>(acp + \"/localization/importSpreadsheet\", formData, { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\n\nimport { Account, User, Role } from '@admin/model/account';\nimport { AccountService } from '@admin/service/account.service';\nimport { LocalizationService, AuthService } from '@shared/service';\n\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n    selector: 'account',\n    templateUrl: './account.component.html',\n    styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}'],\n    styleUrls: ['./account.css']\n} )\nexport class AccountComponent implements OnInit {\n\n    message: string = null;\n    account: Account;\n    roles: Role[];\n    roleIds: string[] = [];\n\n    isSRA: boolean;\n\tisRA: boolean;\n\n    @Input()\n    set oid( oid: string ) {\n        if ( oid === 'NEW' ) {\n\n            let orgCodes = [];\n            if(this.isRA){\n                orgCodes = this.authService.getMyOrganizations();\n            }\n\n            this.service.newInstance(orgCodes).then( data => {\n                this.account = data;\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        }\n        else if ( oid ) {\n            this.service.edit( oid ).then( data => {\n                this.account = data;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    public onEdit: Subject<Account>;\n\n    constructor(\n        private service: AccountService,\n        private authService: AuthService,\n        public bsModalRef: BsModalRef,\n        private localizeService: LocalizationService\n    ) {\n\n        this.isSRA = authService.isSRA();\n\t\tthis.isRA = authService.isRA();\n    }\n\n    ngOnInit(): void {\n        this.onEdit = new Subject();\n    }\n\n    onRoleIdsUpdate(event): void {\n        this.roleIds = event;\n    }\n\n\n    cancel(): void {\n        if ( this.account.user.newInstance === true ) {\n            this.bsModalRef.hide();\n        }\n        else {\n            this.service.unlock( this.account.user.oid ).then( response => {\n                this.bsModalRef.hide();\n            } );\n        }\n    }\n\n    onChangePassword(): void {\n        this.account.changePassword = !this.account.changePassword;\n    }\n\n    onSubmit(): void {\n\n        if ( !this.account.changePassword && !this.account.user.newInstance ) {\n            delete this.account.user.password;\n        }\n\n        if (this.roleIds.length > 0) {\n            this.service.apply(this.account.user, this.roleIds).then(data => {\n                this.onEdit.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n        else{\n            this.message = this.localizeService.decode(\"account.role.management.roles.required.message\");\n        }\n    }\n\n\n    public error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}","<div>\n  <!-- <header></header> -->\n\n  <message></message>\n\n  <loading-bar></loading-bar>\n\n  <div class=\"heading text-center\">\n    <h1>\n      Account\n    </h1>\n  </div>\n\n  <form *ngIf=\"account\" #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n    <!-- <div *ngIf=\"account\" class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n    <fieldset>\n\n      <div class=\"modal-body\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading\">\n          <h4 class=\"modal-title\">\n            <localize key=\"account.user.heading\"></localize>\n          </h4>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.firstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.firstName\" name=\"firstname\" required>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.lastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.lastName\" name=\"lastname\" required>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altFirstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.altFirstName\" name=\"altFirstname\">\n            </span>\n          </div>\n        </div>        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altLastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.altLastName\" name=\"altLastname\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.phonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.phoneNumber\" name=\"phoneNumber\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altPhonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.altPhoneNumber\" name=\"altPhoneNumber\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.email\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"email\" [(ngModel)]=\"account.user.email\" name=\"email\" required #aemail=\"ngModel\" required email>\n            </span>\n            <div *ngIf=\"aemail.errors?.email && account.user.email && account.user.email.length > 0\" class=\"inline-error-message\">\n              <localize key=\"account.email.validation\"></localize>\n            </div>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.position\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.position\" name=\"position\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.department\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.department\" name=\"department\">\n            </span>\n          </div>\n        </div>\n\n\n        <!-- <div class=\"heading\">\n          <h4>\n            <localize key=\"account.info.heading\"></localize>\n          </h4>\n        </div> -->\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.username\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [disabled]=\"!account.user.newInstance && account.user.username === 'admin'\" [(ngModel)]=\"account.user.username\" name=\"username\" required>\n            </span>\n          </div>\n        </div>\n\n\n        <div *ngIf=\"!account.user.newInstance\" class=\"heading\">\n          <h4>\n            <localize key=\"account.user.password\"></localize>\n          </h4>\n        </div>\n        <div *ngIf=\"!account.user.newInstance\" class=\"row-holder\">\n          <div class=\"button-holder\" style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!account.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"account.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n        <div *ngIf=\"account.changePassword || account.user.newInstance\">\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label>\n                <localize key=\"account.password\"></localize>\n              </label>\n            </div>\n            <div class=\"holder\">\n              <span class=\"text\">\n                <input type=\"password\" [(ngModel)]=\"account.user.password\" name=\"password\" #password=\"ngModel\" required\n                  minlength=\"5\" maxlength=\"50\">\n                <password-strength-bar [passwordToCheck]=\"account.user.password\"></password-strength-bar>\n              </span>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label>\n                <localize key=\"account.certainPassword\"></localize>\n              </label>\n            </div>\n            <div class=\"holder\">\n              <span class=\"text\">\n                <input type=\"password\" [ngModel]=\"certainPassword\" name=\"certainPassword\" #certainPassword=\"ngModel\" required />\n              </span>\n              <div *ngIf=\"certainPassword.errors?.mustMatch\" class=\"inline-error-message\">\n                <localize key=\"account.certainPassword.validation\"></localize>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n        <div class=\"heading\">\n          <h4>\n            <localize key=\"account.user.status\"></localize>\n          </h4>\n        </div>\n        <div *ngIf=\"!(!account.user.newInstance && account.user.username === 'admin')\">\n          <div class=\"row-holder\">\n            <label class=\"radio radio-inline\">\n              <input class=\"inline-radio-input\" type=\"radio\" name=\"userActive\" [value]=\"false\"\n                [(ngModel)]=\"account.user.inactive\">\n              <span><localize key=\"account.user.status.active\"></localize></span>\n            </label>\n            <label class=\"radio radio-inline\">\n              <input class=\"inline-radio-input\" type=\"radio\" name=\"userActive\" [value]=\"true\"\n                [(ngModel)]=\"account.user.inactive\">\n              <span><localize key=\"account.user.status.inactive\"></localize></span>\n            </label>\n          </div>\n        </div>\n\n        <role-management *ngIf=\"account.roles\" [newInstance]=\"account.user.newInstance\" [roles]=\"account.roles\" (onRoleIdsUpdate)=\"onRoleIdsUpdate($event)\"></role-management>\n        \n        <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n              </div>\n            </div>\n        </div>\n\n      </div> <!-- End modal-body -->\n\n    </fieldset>\n    <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { AuthService } from '@shared/service';\n\nimport { Role, FormattedRoles, FormattedOrganization, FormattedGeoObjectTypeRoleGroup } from '@admin/model/account';\nimport { RegistryRoleType } from '@shared/model/core';\n\n@Component({\n\tselector: 'role-management',\n\ttemplateUrl: './role-management.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}'],\n\tstyleUrls: ['./role-management.css']\n})\nexport class RoleManagementComponent {\n\n\tmessage: string = null;\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\tisSRA: boolean;\n\n\t_roles: FormattedRoles;\n\n\t@Input('roles')\n\tset roles(data: any) {\n\t\tif (data) {\n\t\t\tthis._roles = this.formatRoles(data);\n\t\t\tthis.onChangeRole();\n\t\t}\n\t}\n\n\t@Output() onRoleIdsUpdate = new EventEmitter();\n\n\t_roleIds: string[] = [];\n\t@Input() newInstance: boolean = true;\n\n\n\tconstructor(public bsModalRef: BsModalRef, private authService: AuthService) {\n\t\tthis.isSRA = authService.isSRA();\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tformatRoles(roles: Role[]): any {\n\n\t\tlet formattedObj: FormattedRoles = { \"SRA\": null, \"ORGANIZATIONS\": [] };\n\n\t\troles.forEach(role => {\n\n\t\t\t// If orgCode exists this is NOT an SRA\n\t\t\tif (role.orgCode) {\n\n\t\t\t\tlet addedToGroup = false;\n\n\t\t\t\tformattedObj.ORGANIZATIONS.forEach(orgGroup => {\n\n\t\t\t\t\tif (orgGroup.ORGANIZATIONLABEL === role.orgLabel.localizedValue) {\n\n\t\t\t\t\t\tif (role.type === \"RA\") {\n\t\t\t\t\t\t\torgGroup.RA = role;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\tlet added = this.addToGeoObjectTypeGroup(orgGroup, role);\n\n\t\t\t\t\t\t\tif (!added) {\n\t\t\t\t\t\t\t\tlet geoObjectTypeGroup: FormattedGeoObjectTypeRoleGroup = { \"GEOOBJECTTYPEROLESGROUP\": [role], \"ENABLEDROLE\": \"\", \"GEOOBJECTTYPELABEL\": role.geoObjectTypeLabel.localizedValue };\n\n\t\t\t\t\t\t\t\tif (role.assigned) {\n\t\t\t\t\t\t\t\t\tgeoObjectTypeGroup.ENABLEDROLE = role.name\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\torgGroup.GEOOBJECTTYPEROLES.push(geoObjectTypeGroup);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\taddedToGroup = true;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\n\t\t\t\t// The organization hasn't been created yet\n\t\t\t\tif (!addedToGroup) {\n\n\t\t\t\t\tlet newObj: FormattedOrganization = { \"ORGANIZATIONLABEL\": null, \"RA\": null, \"GEOOBJECTTYPEROLES\": [] };\n\n\t\t\t\t\tif (role.type === \"RA\") {\n\t\t\t\t\t\tnewObj.ORGANIZATIONLABEL = role.orgLabel.localizedValue;\n\t\t\t\t\t\tnewObj.RA = role;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnewObj.ORGANIZATIONLABEL = role.orgLabel.localizedValue;\n\n\t\t\t\t\t\tlet geoObjectTypeGroup: FormattedGeoObjectTypeRoleGroup = { \"GEOOBJECTTYPEROLESGROUP\": [role], \"ENABLEDROLE\": \"\", \"GEOOBJECTTYPELABEL\": role.geoObjectTypeLabel.localizedValue };\n\n\t\t\t\t\t\tif (role.assigned) {\n\t\t\t\t\t\t\tgeoObjectTypeGroup.ENABLEDROLE = role.name\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewObj.GEOOBJECTTYPEROLES.push(geoObjectTypeGroup);\n\t\t\t\t\t}\n\n\t\t\t\t\tformattedObj.ORGANIZATIONS.push(newObj)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (role.type === \"SRA\") {\n\t\t\t\tformattedObj.SRA = role;\n\t\t\t}\n\t\t})\n\n\t\tthis.sortRoles(formattedObj);\n\n\t\treturn formattedObj;\n\t}\n\n\tsortRoles(roles: FormattedRoles): void {\n\t\troles.ORGANIZATIONS.forEach(org => {\n\t\t\torg.GEOOBJECTTYPEROLES.forEach(gotrole => {\n\t\t\t\tgotrole.GEOOBJECTTYPEROLESGROUP.sort((a, b) => {\n\t\t\t\t\tif (RegistryRoleType[a.type] < RegistryRoleType[b.type]) return -1;\n\t\t\t\t\tif (RegistryRoleType[a.type] > RegistryRoleType[b.type]) return 1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t})\n\t\t});\n\t}\n\n\taddToGeoObjectTypeGroup(organization: FormattedOrganization, role: Role): boolean {\n\t\tlet exists = false;\n\t\torganization.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\tif (rg.GEOOBJECTTYPELABEL === role.geoObjectTypeLabel.localizedValue) {\n\n\t\t\t\tif (role.assigned) {\n\t\t\t\t\trg.ENABLEDROLE = role.name\n\t\t\t\t}\n\n\t\t\t\trg.GEOOBJECTTYPEROLESGROUP.push(role);\n\n\t\t\t\texists = true;\n\t\t\t}\n\t\t});\n\n\t\treturn exists;\n\t}\n\n\tonToggleOrgRA(event: any, organization: FormattedOrganization): void {\n\n\t\torganization.RA.assigned = event;\n\n\t\t// Disable all GeoObjectType radio buttons in this organization\n\t\tif (organization.RA.assigned) {\n\t\t\torganization.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\t\trg.ENABLEDROLE = \"\";\n\t\t\t});\n\t\t}\n\n\t\tthis.onChangeRole();\n\t}\n\n\tonToggleSRA(event: any, role: Role): void {\n\n\t\tthis._roles.ORGANIZATIONS.forEach(org => {\n\t\t\torg.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\t\trg.ENABLEDROLE = \"\";\n\t\t\t});\n\t\t})\n\n\t\tthis.onChangeRole();\n\t}\n\n\tsetGroupRole(group: FormattedGeoObjectTypeRoleGroup, role: Role, event: any): void {\n\n\t\tif (role === null) {\n\t\t\tgroup.ENABLEDROLE = \"\";\n\t\t}\n\t\telse {\n\t\t\tgroup.ENABLEDROLE = (event.target.checked) ? role.name : \"\";\n\t\t}\n\n\t\tthis.onChangeRole();\n\t}\n\n\tonChangeRole(): void {\n\n\t\tlet newRoleIds: string[] = [];\n\n\t\tthis._roles.ORGANIZATIONS.forEach(orgGroup => {\n\n\t\t\tif (orgGroup.RA && orgGroup.RA.assigned) {\n\t\t\t\tnewRoleIds.push(orgGroup.RA.name);\n\t\t\t}\n\t\t\t// If organization RA is enabled we don't add GeoObjectType level roles\n\t\t\telse {\n\t\t\t\torgGroup.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\t\t\tif (rg.ENABLEDROLE && rg.ENABLEDROLE.length > 0) {\n\t\t\t\t\t\t// add GeoObjectType level role selected\n\t\t\t\t\t\tnewRoleIds.push(rg.ENABLEDROLE);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (this._roles.SRA && this._roles.SRA.assigned) {\n\t\t\tnewRoleIds.push(this._roles.SRA.name);\n\t\t}\n\n\t\tthis._roleIds = newRoleIds;\n\t\tthis.onRoleIdsUpdate.emit(this._roleIds);\n\t}\n\n\tremoveRoleId(id: string): void {\n\n\t\tlet pos = this._roleIds.indexOf(id);\n\t\tif (pos !== -1) {\n\t\t\tthis._roleIds.splice(pos, 1);\n\t\t}\n\n\t\tthis.onRoleIdsUpdate.emit(JSON.stringify(this._roleIds));\n\t}\n\n\tshowData() {\n\t\tconsole.log(this._roles)\n\t}\n}","<div>\n\n  <message></message>\n\n  <loading-bar></loading-bar>\n  <form>\n    <fieldset>\n      \n      <div *ngIf=\"_roles\">\n\n        <!-- SRA -->\n        <div *ngIf=\"_roles.SRA\" class=\"row\" style=\"padding: 20px;\">\n          <div class=\"col-sm-12\">\n            <boolean-field [(value)]=\"_roles.SRA.assigned\" (change)=\"onToggleSRA($event, _roles.SRA)\"\n              [label]=\"_roles.SRA.label.localizedValue\" [disable]=\"!isSRA\"></boolean-field>\n          </div>\n        </div>\n\n        <div *ngFor=\"let org of _roles.ORGANIZATIONS\" class=\"row-holder\">\n\n          <div class=\"heading\">\n            <h4>{{org.ORGANIZATIONLABEL}}</h4>\n          </div>\n\n\n          <!-- Organization administrator -->\n          <div *ngIf=\"org.RA && isSRA\" class=\"row\" style=\"padding: 20px;\">\n            <div class=\"col-sm-12\">\n              <boolean-field [(value)]=\"org.RA.assigned\" (change)=\"onToggleOrgRA($event, org)\"\n                [label]=\"org.RA.label.localizedValue\" [disable]=\"_roles.SRA && _roles.SRA.assigned\"></boolean-field>\n            </div>\n          </div>\n\n          <!-- Organization GeoObjectTypes -->\n          <div class=\"row\">\n            <div class=\"col-sm-12 org-container\" style=\"padding-left:50px;padding-right:50px;\">\n\n              <fieldset [disabled]=\"(org.RA && org.RA.assigned) || (_roles.SRA && _roles.SRA.assigned)\">\n                <div *ngFor=\"let roleGroup of org.GEOOBJECTTYPEROLES; let i = index\">\n              \n                  <div class=\"heading\">\n                    <h4>{{roleGroup.GEOOBJECTTYPELABEL}}</h4>\n                  </div>\n              \n                  <label class=\"radio\" *ngFor=\"let role of roleGroup.GEOOBJECTTYPEROLESGROUP\">\n                    <input type=\"checkbox\" [value]=\"role.name\" [checked]=\"roleGroup.ENABLEDROLE === role.name\" (change)=\"setGroupRole(roleGroup, role, $event)\"\n                      [name]=\"role.orgCode + role.geoObjectTypeCode\" >\n                    <span style=\"font-weight: 400;\">{{role.label.localizedValue}}</span>\n                  </label>\n\n                  <label class=\"radio\">\n                    <input type=\"checkbox\" [value]=\"\" [checked]=\"roleGroup.ENABLEDROLE === ''\" (change)=\"setGroupRole(roleGroup, null, $event)\"\n                      [name]=\"roleGroup + '_none'\" >\n                    <span style=\"font-weight: 400;\">None</span>\n                  </label>\n              \n                </div>\n              </fieldset>\n\n            </div>\n          </div>\n\n        </div> <!-- End organizations row -->\n\n      </div>\n\n    </fieldset>\n  </form>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef, Inject, Input } from '@angular/core';\nimport { ActivatedRoute, Params, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ErrorHandler } from '@shared/component';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { Observable } from 'rxjs';\n\n\nimport { EventService } from '@shared/service';\nimport { SystemLogoService } from '@admin/service/system-logo.service';\nimport { SystemLogo } from '@admin/model/system-logo';\n\ndeclare var acp: any;\n\n@Component( {\n\n    selector: 'system-logo',\n    templateUrl: './system-logo.component.html',\n    styles: []\n} )\nexport class SystemLogoComponent implements OnInit {\n    message: string = null;\n    icon: SystemLogo;\n\n    public uploader: FileUploader;\n    public dropActive: boolean = false;\n\n    file: any;\n    context: string;\n\n    @ViewChild( 'uploadEl' )\n    private uploadElRef: ElementRef;\n\n    public onSuccess: Subject<any>;\n\n\n    constructor( private route: ActivatedRoute,\n        private eventService: EventService,\n        public bsModalRef: BsModalRef )\n        {\n            this.context = acp as string;\n        }\n\n    ngOnInit(): void {\n\n        this.onSuccess = new Subject();\n\n        let options: FileUploaderOptions = {\n            autoUpload: false,\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: acp + '/logo/apply'\n        };\n\n        this.uploader = new FileUploader( options );\n\n        this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.onSuccess.next( item );\n            this.bsModalRef.hide();\n        };\n        this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.error( response );\n        };\n        this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n            form.append( 'oid', this.icon.oid );\n        };\n    }\n\n    ngAfterViewInit() {\n        let that = this;\n\n        this.uploader.onAfterAddingFile = ( item => {\n            this.uploadElRef.nativeElement.value = '';\n\n            let reader = new FileReader();\n            reader.onload = function( e: any ) {\n                that.file = reader.result;\n            };\n            reader.readAsDataURL( item._file );\n        } );\n    }\n\n    fileOver( e: any ): void {\n        this.dropActive = e;\n    }\n\n    cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    onSubmit(): void {\n        if( this.file == null ) {\n            this.bsModalRef.hide();\n        }\n        else {\n            this.uploader.uploadAll();\n        }\n    }\n\n    clear(): void {\n        this.file = null;\n\n        this.uploader.clearQueue()\n    }\n\n    error( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div>\n\n  <message ></message>\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n        \n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n        \n        <fieldset>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>          \n            <div class=\"holder\">\n              <span class=\"text\">\n\n                <div>\n                  <!-- For display only when editing an icon-->\n                  <img *ngIf=\"!file && icon\" style=\"max-width:300px;max-height:300px;\" [src]=\"context + '/logo/view?oid=' + icon.oid\" class=\"thumb\">\n                      \n                  <!-- Actual uploaded file preview -->\n                  <img *ngIf=\"file\" style=\"max-width:300px;max-height:300px;\" [src]=\"file\" class=\"thumb\">\n                </div>                        \n              \n                <div class=\"drop-box-container\" ng2FileDrop [ngClass]=\"{'drop-active': dropActive}\" (fileOver)=\"fileOver($event)\" [uploader]=\"uploader\" (click)=fileInput.click()>\n                  <div class=\"drop-box\">\n                    <div class=\"inner-drop-box\">\n                      <i class=\"fa fa-cloud-upload\">\n                        <p class=\"upload-text\"><localize key=\"system.image.uploadText\"></localize></p>\n                      </i>\n                    </div>\n                  </div>\n                  <input type=\"file\" #uploadEl ng2FileSelect #fileInput [uploader]=\"uploader\" id=\"uploader-input\" style=\"display:none\" />\n                </div>\n                \n              </span>\n            </div>\n          </div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'category.icon.ok' | localize\" class=\"btn btn-primary\" (disabled)=\"form.invalid\" />                \n              </div>\n            </div>\n          </div>\n        </fieldset>  \n  </form>\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\nimport { SystemLogoComponent } from './system-logo.component'\n\nimport { SystemLogo } from '@admin/model/system-logo';\nimport { SystemLogoService } from '@admin/service/system-logo.service';\n\nimport { ErrorHandler } from '@shared/component';\n\ndeclare let acp: string;\n\n@Component({\n  \n  selector: 'system-logos',\n  templateUrl: './system-logos.component.html',\n  styleUrls: []\n})\nexport class SystemLogosComponent implements OnInit {\n  public icons: SystemLogo[];\n  context: string;\n  bsModalRef: BsModalRef;\n  message: string = null;\n  random = 0;\n\n  constructor(\n    private router: Router,\n    private service: SystemLogoService,\n    private modalService: BsModalService,\n    private localizeService: LocalizationService,\n    private changeDetectorRef: ChangeDetectorRef\n    ) {\n\n    this.context = acp as string;\n  }\n\n  ngOnInit(): void {\n    this.getIcons();\n  }\n\n  onClickRemove(icon) : void {\n    this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n    } );\n    this.bsModalRef.content.message = this.localizeService.decode( \"system.image.removeContent\" );\n    this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n    this.bsModalRef.content.onConfirm.subscribe( data => {\n      this.remove(icon);\n    } );\n  }\n\n  getIcons(): void {\n    this.service.getIcons().then(resp => {\n\n      this.icons = resp.icons;\n    })\n    .catch(( err: HttpErrorResponse ) => {\n      this.error( err );\n    } );\n  }\n\n  edit(icon: SystemLogo): void {\n    // this.router.navigate(['/admin/logo', icon.oid]);\n\n    let bsModalRef = this.modalService.show( SystemLogoComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        bsModalRef.content.icon = icon;\n\n        bsModalRef.content.onSuccess.subscribe( data => {\n\n          this.icons.forEach(ico => {\n\n            // Setting a random number at the end of the url is a hack to change \n            // the image url to force Angular to rerender the image.\n            this.random = Math.random();\n\n            ico.oid = ico.oid\n          })\n\n          this.changeDetectorRef.detectChanges();\n        })\n  }\n\n  remove(icon: SystemLogo): void {\n    this.service.remove(icon.oid).then(response => {\n      icon.custom = false;\n    })\n    .catch(( err: HttpErrorResponse ) => {\n      this.error( err );\n    } );\n  }\n\n  error( err: HttpErrorResponse ): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div>\n\n\n  <!-- <message ></message> -->\n  \n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n  \n  <div class=\"list-table-wrapper\">\n    <table id=\"manage-icons-table\" class=\"list-table table table-bordered table-striped\">        \n      <thead>\n        <tr>\n          <th></th>\n          <th class=\"label-column\"><localize key='system.image.label'></localize></th>\n          <th class=\"label-column\"><localize key='system.image.preview'></localize></th>\n        </tr>\n      </thead>    \n      <tbody>\n        <tr *ngFor=\"let icon of icons\" class=\"fade-ngRepeat-item\">\n          <td class=\"button-column\">\n            <span>\n              <a class=\"fa fa-pencil ico-edit\" (click)=\"edit(icon)\" [title]=\"'system.image.editTooltip' | localize\"></a>\n              <a *ngIf=\"icon.custom\" class=\"fa fa-trash-o ico-remove\" [title]=\"'system.image.removeTooltip' | localize\"\n                 (click)=\"onClickRemove(icon, $event)\"></a>\n            </span>\n          </td>\n          <td class=\"label-column\">{{ icon.label }}</td>\n          <td class=\"icon-thumbnail-column\">\n            <img style=\"width:42px;height:42px;\" class=\"thumb\" [src]=\"context + '/logo/view?oid=' + icon.oid + '&random=' + random\" alt=\"Icon\">\n          </td>\n        </tr>      \n      </tbody>    \n    </table>\n  </div>\n  \n  <div *ngIf=\"icons === null\" ><localize key='dataset.loadingData'></localize></div>\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\nimport { ErrorHandler } from '@shared/component';\nimport { Email } from '@admin/model/email';\nimport { EmailService } from '@admin/service/email.service';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n\n@Component({\n\n\tselector: 'email',\n\ttemplateUrl: './email.component.html',\n\tstyleUrls: []\n})\nexport class EmailComponent implements OnInit {\n\tmessage: string = null;\n\tpublic email: Email = {\n\t\toid: '',\n\t\tserver: '',\n\t\tusername: '',\n\t\tpassword: '',\n\t\tport: 0,\n\t\tfrom: '',\n\t\tto: '',\n\t};\n\n\tpublic onSuccess: Subject<any>;\n\n\tconstructor(private service: EmailService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.service.getInstance().then(email => {\n\t\t\tthis.email = email;\n\t\t});\n\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.apply(this.email)\n\t\t\t.then(() => {\n\t\t\t\tthis.onSuccess.next(true);\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t})\n\t\t\t.catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","\n<div>\n  <message ></message>  \n  <loading-bar></loading-bar>\n  \n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <!-- <div class=\"modal-dialog\"> -->\n      <!-- <div class=\"modal-content\"> -->\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n        <div class=\"heading\">\n          <h1><localize key=\"email.modal.heading\"></localize></h1>\n        </div>      \n        <fieldset>            \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.server\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.server\" name=\"server\" required #server=\"ngModel\">\n              </span>\n              <div *ngIf=\"server.errors?.url\" class=\"inline-error-message\">\n                <localize key=\"email.server.validation\"></localize>\n              </div>                            \n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.username\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.username\" name=\"username\" required>\n              </span>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.password\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"password\" [(ngModel)]=\"email.password\" name=\"password\" required>\n              </span>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.port\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"number\" [(ngModel)]=\"email.port\" name=\"port\" required #port=\"ngModel\" number>\n              </span>\n              <div *ngIf=\"port.errors?.number\" class=\"inline-error-message\">\n                <localize key=\"email.port.validation\"></localize>\n              </div>                                                        \n            </div>\n          </div>          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.from\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.from\" name=\"from\" required #from=\"ngModel\" email>\n              </span>\n              <div *ngIf=\"from.errors?.email\" class=\"inline-error-message\">\n                <localize key=\"email.from.validation\"></localize>\n              </div>                                          \n            </div>\n          </div>          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.to\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.to\" name=\"to\"  #to=\"ngModel\" email>\n              </span>\n              <div *ngIf=\"to.errors?.email\" class=\"inline-error-message\">\n                <localize key=\"email.to.validation\"></localize>\n              </div>                                                        \n            </div>\n          </div>          \n\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { PageResult } from '@shared/model/core';\n\nimport { User, Account } from '@admin/model/account';\nimport { AccountService } from '@admin/service/account.service';\nimport { AccountComponent } from './account.component';\nimport { AccountInviteComponent } from '../account/account-invite.component';\n\n@Component({\n\tselector: 'accounts',\n\ttemplateUrl: './accounts.component.html',\n\tstyleUrls: ['./accounts.css']\n})\nexport class AccountsComponent implements OnInit {\n\tres: PageResult<User> = {\n\t\tresultSet: [],\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10\n\t};\n\tbsModalRef: BsModalRef;\n\tmessage: string = null;\n\n\tconstructor(private service: AccountService, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.service.page(1).then(res => {\n\t\t\tthis.res = res;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\n\tedit(user: User): void {\n\t\t// this.router.navigate(['/admin/account', user.oid]);\n\n\t\tthis.bsModalRef = this.modalService.show(AccountComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.oid = user.oid;\n\n\t\tlet that = this;\n\t\tthis.bsModalRef.content.onEdit.subscribe((data: Account) => {\n\n\t\t\tlet index = that.res.resultSet.findIndex(u => u.oid === data.user.oid);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthat.res.resultSet[index] = data.user;\n\t\t\t}\n\t\t});\n\t}\n\n\tnewInstance(): void {\n\t\t// this.router.navigate(['/admin/account', 'NEW']);\n\n\t\tthis.bsModalRef = this.modalService.show(AccountComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.oid = 'NEW';\n\n\t\tthis.bsModalRef.content.onEdit.subscribe(data => {\n\t\t\tthis.onPageChange(this.res.pageNumber);\n\t\t});\n\n\t}\n\t\n\tinviteUsers(): void {\n\t\t// this.router.navigate(['/admin/invite']);\t  \n\n\t\tthis.bsModalRef = this.modalService.show(AccountInviteComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.organization = null;\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.service.page(pageNumber).then(res => {\n\t\t\tthis.res = res;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <message></message>\n        <!-- <loading-bar></loading-bar> -->\n\n        <h2>\n            <localize key=\"accounts.title\"></localize>\n        </h2>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div class=\"col-md-12 text-right\">\n                <input class=\"btn btn-primary\" style=\"margin-top: 10px;\" type=\"submit\" value=\"Invite User\" (click)=\"inviteUsers()\">\n            </div>\n        </div>\n\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        \n        <div class=\"list-table-wrapper\">\n            <table id=\"manage-accounts-table\" class=\"list-table table table-bordered table-striped\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th class=\"label-column\"><localize key='account.username'></localize></th>\n                        <th class=\"label-column\"><localize key='account.firstname'></localize></th>\n                        <th class=\"label-column\"><localize key='account.lastname'></localize></th>\n                        <th class=\"label-column\"><localize key='account.phonenumber'></localize></th>\n                        <th class=\"label-column\"><localize key='account.email'></localize></th>\n                        <th class=\"label-column\"><localize key='account.status'></localize></th>\n                        <!-- <th class=\"label-column\"><localize key='account.roles'></localize></th> -->\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let account of res.resultSet | paginate: { itemsPerPage: res.pageSize, currentPage: res.pageNumber, totalItems: res.count }\" class=\"fade-ngRepeat-item\" [ngClass]=\"{'inactive': account.inactive}\">\n                        <td class=\"button-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"edit(account, $event)\" [title]=\"'account.editTooltip' | localize\"></a> \n                        <td class=\"label-column username-col\">{{ account.username }}</td>\n                        <td class=\"label-column firstname-col\">{{ account.firstName }}</td>\n                        <td class=\"label-column lastname-col\">{{ account.lastName }}</td>\n                        <td class=\"label-column phone-col\">{{ account.phoneNumber }}</td>\n                        <td class=\"label-column email-col\">{{ account.email }}</td>\n                        <td class=\"label-column email-col\">\n                          <localize *ngIf=\"account.inactive\" key='account.status.inactive'></localize>\n                          <localize *ngIf=\"!account.inactive\" key='account.status.active'></localize>\n                        </td>\n                        <!-- <td class=\"label-column role-col\">{{ account.roles }}</td> -->\n                    </tr>\n                    <tr>\n                        <td class=\"button-column\"><a class=\"fa fa-plus\" (click)=\"newInstance()\" [title]=\"'account.newTooltip' | localize\"></a></td>\n                    </tr>\n\n                </tbody>\n            </table>\n        </div>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n    </div>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Subscription } from 'rxjs';\n\nimport { User } from '@admin/model/account';\nimport { AccountService } from '@admin/service/account.service';\n\nimport { ErrorHandler } from '@shared/component';\n\ndeclare let acp: string;\n\n@Component({\n\tselector: 'account-invite-complete',\n\ttemplateUrl: './account-invite-complete.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class AccountInviteCompleteComponent implements OnInit, OnDestroy {\n\tuser: User;\n\tsub: Subscription;\n\ttoken: string;\n\tmessage: string = null;\n\n\tconstructor(\n\t\tprivate service: AccountService,\n\t\tprivate route: ActivatedRoute) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.newUserInstance().then((user: User) => {\n\t\t\tthis.user = user;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.sub = this.route.params.subscribe(params => {\n\t\t\tthis.token = params['token'];\n\t\t});\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.sub.unsubscribe();\n\t}\n\n\tcancel(): void {\n\t\twindow.location.href = acp;\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.inviteComplete(this.user, this.token).then(response => {\n\t\t\twindow.location.href = acp;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n}","<div class=\"new-admin-design-main\">\n  <cgr-header [loggedIn]=false></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n\t  <message></message>\n\t  <loading-bar></loading-bar>\n\t  \n\t  <h2><localize key=\"account.invite.createTitle\"></localize></h2>\n\t\n\t  <form *ngIf=\"user != null\" #form=\"ngForm\" style=\"padding-bottom: 20px;\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n\t    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n\t      <!--  <div class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n\t        <fieldset>            \n\t          <div class=\"heading\">\n\t            <h3><localize key=\"account.user.heading\"></localize></h3>\n\t          </div>      \n\t          <hr>        \n\t          \n\t          <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\t          \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.firstname\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.firstName\" name=\"firstname\" required>\n\t              </span>\n\t            </div>\n\t          </div>          \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.lastname\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.lastName\" name=\"lastname\" required>\n\t              </span>\n\t            </div>\n\t          </div>  \n            \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altFirstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"user.altFirstName\" name=\"altFirstname\">\n            </span>\n          </div>\n        </div>        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altLastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"user.altLastName\" name=\"altLastname\">\n            </span>\n          </div>\n        </div>\n            \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.phonenumber\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.phoneNumber\" name=\"phoneNumber\" >\n\t              </span>\n\t<!--               <div *ngIf=\"aphone.errors?.phone\" class=\"inline-error-message\"> -->\n\t<!--                 <localize key=\"account.phone.validation\"></localize> -->\n\t<!--               </div>                                           -->\n\t            </div>\n\t          </div>  \n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altPhonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"user.altPhoneNumber\" name=\"altPhoneNumber\">\n            </span>\n          </div>\n        </div>\n            \n                     \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.email\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.email\" name=\"email\" required #aemail=\"ngModel\" email>\n\t              </span>\n\t              <div *ngIf=\"aemail.errors?.email && user.email && user.email.length > 0\" class=\"inline-error-message\">\n\t                <localize key=\"account.email.validation\"></localize>\n\t              </div>                                          \n\t            </div>\n\t          </div>          \n            \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.position\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"user.position\" name=\"position\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.department\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"user.department\" name=\"department\">\n            </span>\n          </div>\n        </div>\n            \n            \n\t          <div class=\"heading\">\n\t            <h3><localize key=\"account.info.heading\"></localize></h3>\n\t          </div>      \n\t          <hr>          \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.username\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [disabled]=\"!user.newInstance && user.username === 'admin'\" [(ngModel)]=\"user.username\" name=\"username\" required>\n\t              </span>\n\t            </div>\n\t          </div>\n\t          <div>\n\t            <div class=\"row-holder\">\n\t              <div class=\"label-holder\">\n\t                <label><localize key=\"account.password\"></localize></label>\n\t              </div>          \n\t              <div class=\"holder\" >\n\t                <span class=\"text\">\n\t                  <input type=\"password\" [(ngModel)]=\"user.password\" name=\"password\" #password=\"ngModel\" required minlength=\"5\" maxlength=\"50\" >\n                      <password-strength-bar [passwordToCheck]=\"user.password\"></password-strength-bar>\n\t                </span>\n\t              </div>\n\t            </div>  \n\t            <div class=\"row-holder\">\n\t              <div class=\"label-holder\">\n\t                <label><localize key=\"account.certainPassword\"></localize></label>\n\t              </div>          \n\t              <div class=\"holder\" >\n\t                <span class=\"text\">\n\t                  <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" [value]=\"password\"/>\n\t                </span>\n\t                <div *ngIf=\"certainPassword.errors?.equalTo\" class=\"inline-error-message\">\n\t                  <localize key=\"account.certainPassword.validation\"></localize>\n\t                </div>                                                       \n\t              </div>\n\t            </div>  \n\t          </div>\n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t            </div>                    \n\t            <div class=\"holder\">\n\t              <div class=\"button-holder\">\n\t                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n\t                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n\t              </div>\n\t            </div>\n\t          </div>\n\t        </fieldset>\n\t      <!-- </div> -->\n\t    <!-- </div> -->\n\t  </form>\n  </div>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { AccountInviteComponent } from './account/account-invite.component';\nimport { EmailComponent } from './email/email.component'\nimport { OrganizationModalComponent } from './organization/organization-modal.component'\nimport { ExternalSystemModalComponent } from './external-system/external-system-modal.component'\nimport { NewLocaleModalComponent } from './localization-manager/new-locale-modal.component';\nimport { ImportLocalizationModalComponent } from './localization-manager/import-localization-modal.component';\n\nimport { Settings } from '@admin/model/settings';\nimport { Locale } from '@admin/model/localization-manager';\n\nimport { PageResult, Organization, ExternalSystem } from '@shared/model/core';\nimport { ModalTypes } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService, ExternalSystemService, OrganizationService } from '@shared/service';\n\ndeclare let acp: string;\n\n@Component({\n\tselector: 'settings',\n\ttemplateUrl: './settings.component.html',\n\tstyleUrls: ['./settings.css']\n})\nexport class SettingsComponent implements OnInit {\n\tbsModalRef: BsModalRef;\n\tmessage: string = null;\n\torganizations: Organization[] = [];\n\tinstalledLocales: Locale[]; // TODO: this should be from the localizaiton-manager model\n\tisAdmin: boolean;\n\tisSRA: boolean;\n\tisRA: boolean;\n\tsettings: Settings = { email: { isConfigured: false } }\n\tsystems: PageResult<ExternalSystem> = {\n\t\tresultSet: [],\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10\n\t};\n\n\tconstructor(\n\t\tprivate modalService: BsModalService,\n\t\tprivate localizeService: LocalizationService,\n\t\tprivate authService: AuthService,\n\t\tprivate externalSystemService: ExternalSystemService,\n\t\tprivate orgService: OrganizationService\n\t) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isSRA = authService.isSRA();\n\t\tthis.isRA = authService.isRA();\n\t}\n\n\tngOnInit(): void {\n\n\t\t// this.registryService.getLocales().then( locales => {\n\t\t//     this.localizeService.setLocales( locales );\n\t\t// } ).catch(( err: HttpErrorResponse ) => {\n\t\t//     this.error( err );\n\t\t// } );\n\n\t\tthis.installedLocales = this.getLocales();\n\n\t\tthis.orgService.getOrganizations().then(orgs => {\n\t\t\tthis.organizations = orgs\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.onSystemPageChange(1);\n\t}\n\n\n\tpublic getCGRVersion(): string {\n\t\treturn this.authService.getVersion();\n\t}\n\n\tpublic getLocales(): Locale[] {\n\t\treturn this.authService.getLocales();\n\t}\n\n\texportLocalization() {\n\t\t//this.localizationManagerService.exportLocalization();\n\t\twindow.location.href = acp + \"/localization/exportSpreadsheet\";\n\t}\n\n\tpublic importLocalization(): void {\n\t\tthis.modalService.show(ImportLocalizationModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t}\n\n\n\tpublic onEditOrganization(org: Organization): void {\n\t\tlet bsModalRef = this.modalService.show(OrganizationModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tbsModalRef.content.organization = org;\n\t\tbsModalRef.content.isNewOrganization = false;\n\n\t\tbsModalRef.content.onSuccess.subscribe(data => {\n\t\t\t//\t\t\tthis.organizations.push(data);\n\t\t\tconst index = this.organizations.findIndex(x => x.code === data.code);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.organizations[index] = data;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.organizations.push(data);\n\t\t\t}\n\n\t\t})\n\t}\n\n\tpublic onRemoveOrganization(code: string, name: string): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + name + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\t// this.orgService.removeOrganization(code);\n\n\t\t\tthis.orgService.removeOrganization(code).then(response => {\n\t\t\t\tfor (let i = this.organizations.length - 1; i >= 0; i--) {\n\t\t\t\t\tif (this.organizations[i].code === code) {\n\t\t\t\t\t\tthis.organizations.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\tpublic newOrganization(): void {\n\t\tlet bsModalRef = this.modalService.show(OrganizationModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tbsModalRef.content.isNewOrganization = true;\n\n\t\tbsModalRef.content.onSuccess.subscribe(data => {\n\t\t\tthis.organizations.push(data);\n\t\t})\n\t}\n\n\tpublic newLocalization(): void {\n\n\t\tlet bsModalRef = this.modalService.show(NewLocaleModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true\n\t\t});\n\n\t\tbsModalRef.content.onSuccess.subscribe((locale: string) => {\n\t\t\tthis.localizeService.addLocale(locale);\n\t\t})\n\t}\n\n\tpublic configureEmail(): void {\n\t\tthis.bsModalRef = this.modalService.show(EmailComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.onSuccess.subscribe(data => {\n\t\t\tthis.settings.email.isConfigured = data\n\t\t})\n\t}\n\n\tinviteUsers(): void {\n\t\t// this.router.navigate(['/admin/invite']);\t  \n\n\t\tthis.bsModalRef = this.modalService.show(AccountInviteComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.organization = null;\n\t}\n\n\n\t/* EXTERNAL SYSTEM LOGIC */\n\n\tonSystemPageChange(pageNumber: number): void {\n\t\tthis.externalSystemService.getExternalSystems(pageNumber, this.systems.pageSize).then(systems => {\n\t\t\tthis.systems = systems;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tnewSystem(): void {\n\t\tlet bsModalRef = this.modalService.show(ExternalSystemModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tbsModalRef.content.init(this.organizations);\n\t\tbsModalRef.content.onSuccess.subscribe(data => {\n\t\t\tthis.onSystemPageChange(this.systems.pageNumber);\n\t\t})\n\t}\n\n\tonEditSystem(system: ExternalSystem): void {\n\n\t\tthis.externalSystemService.getExternalSystem(system.oid).then(system => {\n\n\t\t\tlet bsModalRef = this.modalService.show(ExternalSystemModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(this.organizations, system);\n\t\t\tbsModalRef.content.onSuccess.subscribe(data => {\n\t\t\t\tthis.onSystemPageChange(this.systems.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonRemoveSystem(system: ExternalSystem): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + system.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.externalSystemService.removeExternalSystem(system.oid).then(response => {\n\t\t\t\tthis.onSystemPageChange(this.systems.pageNumber);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\t/* ERROR HANDLING LOGIC */\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\t\t// TODO: add error modal\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n\n    <div id=\"app-container\" class=\"container\">\n\n        <message></message>\n        <!-- <loading-bar></loading-bar> -->\n\n        <h2>\n            <localize key=\"settings.title\"></localize>\n        </h2>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div style=\"padding-bottom: 30px;\"> \n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.information.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <h4><localize key=\"settings.version.label\"></localize> {{getCGRVersion()}}</h4>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isAdmin\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.organizations.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <div class=\"list-table-wrapper\">\n                            <table id=\"manage-organizations-table\" class=\"list-table table table-bordered table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th *ngIf=\"isSRA\"></th>\n                                        <th>\n                                            <localize key=\"settings.manage.orgs.table.code.header\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.orgs.table.name.header\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.orgs.table.contact.header\"></localize>\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let org of organizations\">\n                                        <td *ngIf=\"isSRA\" class=\"button-column\">\n                                            <a class=\"fa fa-pencil ico-edit\" (click)=\"onEditOrganization(org)\"  [title]=\"'account.editTooltip' | localize\"></a> \n                                            <a class=\"fa fa-trash-o ico-remove\" (click)=\"onRemoveOrganization(org.code, org.code)\" [title]=\"'account.removeTooltip' | localize\" ></a>\n                                        </td>\n                                        <td class=\"label-column\">{{org.code}}</td>\n                                        <td class=\"label-column\">{{org.label.localizedValue}}</td>\n                                        <td class=\"label-column\">{{org.contactInfo.localizedValue}}</td>\n                                    </tr>\n                                    <tr *ngIf=\"isSRA\">\n                                        <td class=\"button-column\">\n                                            <a class=\"fa fa-plus\" (click)=\"newOrganization()\" [title]=\"'account.newTooltip' | localize\"></a>\n                                        </td>\n                                    </tr>\n\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA || isRA\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.accounts.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <a [routerLink]=\"'/admin/accounts/'\" routerLinkActive=\"active\">\n                                    <button class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"settings.manage.accounts.button\"></localize>\n                                    </button>\n                                </a>\n                          </div>\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <input class=\"btn btn-primary\" style=\"margin-top:10px;\" type=\"submit\" value=\"Invite User\" (click)=\"inviteUsers()\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.localization.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <div class=\"list-table-wrapper\">\n                            <table id=\"manage-accounts-table\" class=\"list-table table table-bordered table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.lang.table.country.header\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.lang.table.variant.header\"></localize>\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let loc of installedLocales\">\n                                        <td class=\"label-column\">{{loc.language}}</td>\n                                        <td class=\"label-column\">{{loc.country}}</td>\n                                        <td class=\"label-column\">{{loc.variant}}</td>\n                                    </tr>\n                                    <tr>\n                                        <td class=\"button-column\"><a class=\"fa fa-plus\" (click)=\"newLocalization()\" [title]=\"'account.newTooltip' | localize\"></a></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        \n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                               <input class=\"btn btn-primary\" type=\"submit\" (click)=\"exportLocalization()\" [value]=\"'localization-manager.exportButton' | localize\">\n                            </div>\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                               <input class=\"btn btn-primary\" style=\"margin-top:10px;\" type=\"submit\" (click)=\"importLocalization()\" [value]=\"'localization-manager.importButton' | localize\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.branding.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <system-logos></system-logos>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA\" class=\"row\" style=\"margin-bottom: 30px;\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.email.heading\"></localize></h3>\n                     \n                    <div class=\"content-wrapper\">\n                        <input class=\"btn btn-primary\" type=\"submit\" (click)=\"configureEmail()\" value=\"Configure\">\n\n                        <i *ngIf=\"settings.email.isConfigured\" class=\"fa fa-check\" aria-hidden=\"true\">Configured</i>\n                    </div>\n                </div>\n            </div>\n            \n            <div *ngIf=\"isRA && organizations.length > 0\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.external.system.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <div class=\"list-table-wrapper\">\n                            <table id=\"manage-systems-table\" class=\"list-table table table-bordered table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th></th>\n                                        <th>\n                                            <localize key=\"external.system.type\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"external.system.label\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"external.system.description\"></localize>\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let system of systems.resultSet | paginate: { itemsPerPage: systems.pageSize, currentPage: systems.pageNumber, totalItems: systems.count }\">\n                                        <td class=\"button-column\">\n                                          <a class=\"fa fa-pencil ico-edit\" (click)=\"onEditSystem(system)\"  [title]=\"'account.editTooltip' | localize\"></a> \n                                          <a class=\"fa fa-trash-o ico-remove\" (click)=\"onRemoveSystem(system)\" [title]=\"'account.removeTooltip' | localize\" ></a>\n                                        </td>\n                                        <td class=\"label-column\">\n                                          <localize *ngIf=\"system.type === 'DHIS2ExternalSystem'\" key=\"external.system.dhis2\"></localize>\n                                          <localize *ngIf=\"system.type === 'RevealExternalSystem'\" key=\"external.system.reveal\"></localize>                                        \n                                        </td>\n                                        <td class=\"label-column\">{{system.label.localizedValue}}</td>\n                                        <td class=\"label-column\">{{system.description.localizedValue}}</td>\n                                    </tr>\n                                    <tr>\n                                        <td class=\"button-column\">\n                                            <a class=\"fa fa-plus\" (click)=\"newSystem()\" [title]=\"'account.newTooltip' | localize\"></a>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <pagination-controls (pageChange)=\"onSystemPageChange($event)\"></pagination-controls>\n                            \n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n            <div *ngIf=\"isRA && organizations.length > 0\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3>\n                        <localize key=\"settings.external.synchronization.heading\"></localize>\n                    </h3>\n            \n                    <div class=\"content-wrapper\">\n            \n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <a [routerLink]=\"'/registry/synchronization-configs'\" routerLinkActive=\"active\">\n                                    <button class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"settings.external.synchronization.button\"></localize>\n                                    </button>\n                                </a>\n                            </div>\n                        </div>\n            \n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    </div>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ErrorHandler } from '@shared/component';\nimport { Organization } from '@shared/model/core';\n\nimport { LocalizationService, OrganizationService } from '@shared/service';\n\n@Component({\n\tselector: 'organization-modal',\n\ttemplateUrl: './organization-modal.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class OrganizationModalComponent implements OnInit {\n\n\tmessage: string = null;\n\torganization: Organization = { code: \"\", label: this.lService.create(), contactInfo: this.lService.create() };\n\tisNewOrganization: boolean = true;\n\n\tpublic onSuccess: Subject<Organization>;\n\n\tconstructor(private orgService: OrganizationService, public bsModalRef: BsModalRef, private lService: LocalizationService) { }\n\n\tngOnInit(): void {\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tonSubmit(): void {\n\t\tif (this.isNewOrganization) {\n\t\t\tthis.orgService.newOrganization(this.organization).then(data => {\n\t\t\t\tthis.onSuccess.next(data);\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.orgService.updateOrganization(this.organization).then(data => {\n\t\t\t\tthis.onSuccess.next(data);\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}","<div>\n  <!-- <header></header> -->\n  \n  <message></message>\n\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n      <!-- <div *ngIf=\"account\" class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n        <fieldset>            \n          <div class=\"heading\">\n            <h3><localize key=\"organization.heading\"></localize></h3>\n          </div>      \n          \n          <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"organization.code\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"organization.code\" name=\"code\" [disabled]=\"!isNewOrganization\" required>\n              </span>\n            </div>\n          </div>     \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"organization.name\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n\n                <div class=\"form-group\" *ngFor=\"let localeValue of organization.label.localeValues\">\n                  <label> {{localeValue.locale}}</label>\n                  <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\" required>\n                </div>\n                <!-- <input type=\"text\" [(ngModel)]=\"organization.label\" name=\"name\" required> -->\n              </span>\n            </div>\n          </div>  \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"organization.contact\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <div class=\"form-group\" *ngFor=\"let localeValue of organization.contactInfo.localeValues\">\n                  <label> {{localeValue.locale}}</label>\n                  <input  [(ngModel)]=\"localeValue.value\" [name]=\"'contact-' + localeValue.locale\" type=\"input\" class=\"form-control\">\n                </div>\n                <!-- <input type=\"text\" [(ngModel)]=\"organization.contactInfo\" name=\"contact\" required> -->\n              </span>\n            </div>\n          </div>  \n\n          <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              {{organization.label.localizedValue}} Registry Administrator\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"organization.code\" name=\"code\" [disabled]=\"!isNewOrganization\" required>\n              </span>\n            </div>\n          </div>   -->\n\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ExternalSystem, Organization } from '@shared/model/core';\n\nimport { LocalizationService, AuthService, ExternalSystemService } from '@shared/service';\n\nimport { ErrorHandler } from '@shared/component';\n\n@Component({\n\tselector: 'external-system-modal',\n\ttemplateUrl: './external-system-modal.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ExternalSystemModalComponent implements OnInit {\n\n\tmessage: string = null;\n\n\tsystem: ExternalSystem = {\n\t\tid: \"\",\n\t\ttype: 'DHIS2ExternalSystem',\n\t\torganization: \"\",\n\t\tlabel: this.lService.create(),\n\t\tdescription: this.lService.create()\n\t};\n\n\torganizations: Organization[] = [];\n\n\n\tpublic onSuccess: Subject<ExternalSystem>;\n\n\tconstructor(private systemService: ExternalSystemService, private authService: AuthService, public bsModalRef: BsModalRef, private lService: LocalizationService) { }\n\n\tngOnInit(): void {\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tinit(organizations: Organization[], system: ExternalSystem): void {\n\t\tthis.organizations = organizations.filter(o => {\n\t\t\treturn this.authService.isOrganizationRA(o.code);\n\t\t});\n\n\t\tif (system != null) {\n\t\t\tthis.system = system;\n\t\t}\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tonSubmit(): void {\n\t\tthis.systemService.applyExternalSystem(this.system).then(data => {\n\t\t\tthis.onSuccess.next(data);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}","<div>\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n        <fieldset>            \n          <div class=\"heading\">\n            <h3><localize key=\"external.system.heading\"></localize></h3>\n          </div>      \n          \n          <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.type\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"select\">\n                <select type=\"text\" [(ngModel)]=\"system.type\" name=\"type\" [disabled]=\"system.oid != null\" required>\n                  <option></option>\n                  <option value=\"DHIS2ExternalSystem\"><localize key=\"external.system.dhis2\"></localize></option>\n                  <option value=\"RevealExternalSystem\"><localize key=\"external.system.reveal\"></localize></option>\n                </select>\n              </span>\n            </div>\n          </div>     \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.organization\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"select\">\n                <select type=\"text\" [(ngModel)]=\"system.organization\" name=\"organization\" [disabled]=\"system.oid != null\" required>\n                  <option></option>\n                  <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n                </select>\n              </span>\n            </div>\n          </div>     \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.id\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"system.id\" name=\"id\" [disabled]=\"system.oid != null\" required>\n              </span>\n            </div>\n          </div>     \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.label\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n\n                <div class=\"form-group\" *ngFor=\"let localeValue of system.label.localeValues\">\n                  <label> {{localeValue.locale}}</label>\n                  <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n                </div>\n                <!-- <input type=\"text\" [(ngModel)]=\"external.system.label\" name=\"name\" required> -->\n              </span>\n            </div>\n          </div>  \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.description\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <div class=\"form-group\" *ngFor=\"let localeValue of system.description.localeValues\">\n                  <label> {{localeValue.locale}}</label>\n                  <input  [(ngModel)]=\"localeValue.value\" [name]=\"'contact-' + localeValue.locale\" type=\"input\" class=\"form-control\">\n                </div>\n                <!-- <input type=\"text\" [(ngModel)]=\"external.system.contactInfo\" name=\"contact\" required> -->\n              </span>\n            </div>\n          </div>  \n          \n          <div *ngIf=\"system.type === 'DHIS2ExternalSystem'\" class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.username\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"system.username\" name=\"username\" required>\n              </span>\n            </div>\n          </div>     \n          \n          <div *ngIf=\"system.type === 'DHIS2ExternalSystem'\" class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.password\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"password\" [(ngModel)]=\"system.password\" name=\"password\">\n              </span>\n            </div>\n          </div>     \n          \n          <div *ngIf=\"system.type === 'DHIS2ExternalSystem'\" class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.url\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"system.url\" name=\"url\" required>\n              </span>\n            </div>\n          </div>     \n\n          <div *ngIf=\"system.type === 'DHIS2ExternalSystem'\" class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"external.system.version\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"select\">\n                <select type=\"text\" [(ngModel)]=\"system.version\" name=\"version\" required>\n                  <option></option>\n                  <option value=\"2.31.9\">2.31.9</option>\n                </select>\n              </span>\n            </div>\n          </div>     \n\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n  </form>\n</div>\n","import { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { LocalizationManagerService } from '@admin/service/localization-manager.service';\nimport { AllLocaleInfo } from '@admin/model/localization-manager';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\n@Component({\n\tselector: 'new-locale-modal',\n\ttemplateUrl: './new-locale-modal.component.html',\n\tstyleUrls: []\n})\nexport class NewLocaleModalComponent {\n\n\tallLocaleInfo: AllLocaleInfo;\n\tlanguage: string;\n\tcountry: string;\n\tvariant: string;\n\n\tpublic onSuccess: Subject<string>;\n\n\tconstructor(public bsModalRef: BsModalRef, private localizationManagerService: LocalizationManagerService, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.allLocaleInfo = new AllLocaleInfo();\n\n\t\tthis.localizationManagerService.getNewLocaleInfo().then(allLocaleInfoIN => {\n\t\t\tthis.allLocaleInfo = allLocaleInfoIN;\n\t\t}).catch((err: HttpErrorResponse) => {\n\n\t\t\tthis.bsModalRef.hide();\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tsubmit(): void {\n\n\t\tthis.localizationManagerService.installLocale(this.language, this.country, this.variant).then((response: { locale: string }) => {\n\t\t\tthis.onSuccess.next(response.locale);\n\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.bsModalRef.hide();\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\tlet modal = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\tmodal.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","<div>\n  <loading-bar></loading-bar>\n\n<form #form=\"ngForm\" class=\"modal-form\" name=\"new-locale-form\" (ngSubmit)=\"form.valid && submit()\">\n  <div class=\"modal-body\">\n  <fieldset>\n    <div class=\"heading\">\n      <h3>\n        <localize key=\"new-locale.title\"></localize>\n      </h3>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <label>\n          <localize key=\"new-locale.language\"></localize>\n        </label>\n        <select [(ngModel)]=\"language\" name=\"new-locale-language\">\n          <option *ngFor=\"let lang of allLocaleInfo.languages\" [ngValue]=\"lang.key\">{{lang.label}}</option>\n        </select>\n      </div>\n    </div>\n\n    <div>\n      <label>\n        <localize key=\"new-locale.country\"></localize>\n      </label>\n      <select [(ngModel)]=\"country\" name=\"new-locale-country\">\n        <option *ngFor=\"let count of allLocaleInfo.countries\" [ngValue]=\"count.key\">{{count.label}}</option>\n      </select>\n    </div>\n\n    <div>\n      <label>\n        <localize key=\"new-locale.variant\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"variant\" name=\"new-locale-variant\" />\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>\n              <localize key=\"new-locale.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n            <span>\n              <localize key=\"new-locale.submit\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n  </div>\n</form>\n\n</div>\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\nimport { LocalizationService, EventService } from '@shared/service';\n\ndeclare var acp: any;\n\n\n@Component({\n\tselector: 'import-localization-modal',\n\ttemplateUrl: './import-localization-modal.component.html',\n\tstyleUrls: []\n})\nexport class ImportLocalizationModalComponent {\n\n\t@ViewChild('myFile')\n\tfileRef: ElementRef;\n\n\n    /*\n     * File uploader\n     */\n\tuploader: FileUploader;\n\n\n\tconstructor(public bsModalRef: BsModalRef, private localizationService: LocalizationService, private eventService: EventService, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tlet options: FileUploaderOptions = {\n\t\t\tqueueLimit: 1,\n\t\t\tremoveAfterUpload: true,\n\t\t\turl: acp + \"/localization/importSpreadsheet\"\n\t\t};\n\n\t\tthis.uploader = new FileUploader(options);\n\n\t\tthis.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n\t\t};\n\t\tthis.uploader.onBeforeUploadItem = (fileItem: any) => {\n\t\t\tthis.eventService.start();\n\t\t};\n\t\tthis.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n\t\t\tthis.fileRef.nativeElement.value = \"\";\n\t\t\tthis.eventService.complete();\n\t\t};\n\t\tthis.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tthis.bsModalRef.hide();\n\t\t};\n\t\tthis.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst error = JSON.parse(response)\n\n\t\t\tthis.error({ error: error });\n\t\t}\n\t}\n\n\tsubmit(): void {\n\n\t\tif (this.uploader.queue != null && this.uploader.queue.length > 0) {\n\t\t\tthis.uploader.uploadAll();\n\t\t}\n\t\telse {\n\t\t\tthis.error({\n\t\t\t\tmessage: this.localizationService.decode('io.missing.file'),\n\t\t\t\terror: {},\n\t\t\t});\n\t\t}\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tpublic error(err: any): void {\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n  <loading-bar></loading-bar>\n\n<form #form=\"ngForm\" class=\"modal-form\" name=\"new-locale-form\" (ngSubmit)=\"form.valid && submit()\">\n  <div class=\"modal-body\">\n  <fieldset>\n    <div class=\"heading\">\n      <h3>\n        <localize key=\"localization-manager.importButton\"></localize>\n      </h3>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n          <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>\n              <localize key=\"new-locale.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n            <span>\n              <localize key=\"new-locale.submit\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n  </div>\n</form>\n\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nexport class UserInvite {\n  email: string;\n  roles: any;\n}\n\nexport class User {\n  oid: string;\n  username: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n  inactive: boolean;\n  newInstance: boolean;\n  roles: string[];\n  altFirstName?: string;\n  altLastName?: string;\n  altPhoneNumber?: string;\n  position?: string;\n  department?: string;\n}\n\n// export class Role {\n//   roleId:string;\n//   displayLabel:string;\n//   assigned:boolean;\n// }\n\nexport class Group {\n  name:string;\n  assigned:string;\n  roles:Role[];\n}\n\nexport class Account {\n  user:User;\n  roles: any;\n  changePassword:boolean;\n}\n\nexport class Role {\n  type:string;\n  name:string;\n  label:any;\n  orgCode:string;\n  orgLabel:any;\n  geoObjectTypeCode:string;\n  geoObjectTypeLabel: any;\n  assigned: boolean;\n}\n\nexport class FormattedRoles {\n  SRA: Role;\n  ORGANIZATIONS: FormattedOrganization[];\n}\n\nexport class FormattedOrganization {\n  ORGANIZATIONLABEL: any;\n  RA: Role;\n  GEOOBJECTTYPEROLES: FormattedGeoObjectTypeRoleGroup[];\n}\n\nexport class FormattedGeoObjectTypeRoleGroup {\n  ENABLEDROLE: string;\n  GEOOBJECTTYPELABEL: any;\n  GEOOBJECTTYPEROLESGROUP: Role[];\n}\n","export class LocaleInfo {\n  key: string;\n  label: string;\n}\n\nexport class AllLocaleInfo {\n  countries: LocaleInfo[];\n  languages: LocaleInfo[];\n}\n\nexport class Locale {\n  language: string;\n  country: string\n  name: string;\n  variant: string;\n}","import { NgModule, Injectable, Inject } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthGuard, AdminGuard, MaintainerGuard, ContributerGuard } from '../shared/service/guard.service';\nimport { PendingChangesGuard } from \"../shared/service/pending-changes-guard\";\n\nimport { AccountsComponent } from './component/account/accounts.component';\nimport { SettingsComponent } from './component/settings.component';\nimport { AccountInviteComponent } from './component/account/account-invite.component';\nimport { AccountInviteCompleteComponent } from './component/account/account-invite-complete.component';\nimport { AccountComponent } from './component/account/account.component';\nimport { SystemLogoComponent } from './component/logo/system-logo.component';\nimport { SystemLogosComponent } from './component/logo/system-logos.component';\nimport { EmailComponent } from './component/email/email.component';\n\n\nconst routes: Routes = [\n    {\n        path: 'logos',\n        canActivate: [AuthGuard],\n        component: SystemLogosComponent,\n        data: { title: 'System_Configuration' }\n    },\n    {\n        path: 'logo/:oid',\n        canActivate: [AuthGuard],\n        component: SystemLogoComponent,\n        data: { title: 'System_Configuration' }\n\n    },\n    {\n        path: 'email',\n        canActivate: [AuthGuard],\n        component: EmailComponent,\n        data: { title: 'System_Configuration' }\n\n    },\n    {\n        path: '',\n        canActivate: [AuthGuard],\n        component: AccountsComponent,\n        data: { title: 'useraccounts.title' }\n    },   \n    {\n        path: 'settings',\n        canActivate: [AuthGuard],\n        component: SettingsComponent,\n        data: { title: 'settings.title' }\n    }, \n    {\n        path: 'accounts',\n        canActivate: [AuthGuard],\n        component: AccountsComponent,\n        data: { title: 'useraccounts.title' }\n    },\n    {\n        path: 'account/:oid',\n        component: AccountComponent,\n        //   resolve: {\n        //     account: AccountResolver\n        //   },        \n        canActivate: [AuthGuard],\n        data: { title: 'account.title' }\n    },\n    {\n        path: 'invite',\n        component: AccountInviteComponent,\n        data: { title: 'account.title' }\n    },\n    {\n        path: 'invite-complete/:token',\n        component: AccountInviteCompleteComponent,\n        data: { title: 'account.title' }\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class AdminRoutingModule { }\n"],"sourceRoot":""}