{"version":3,"sources":["webpack:///./src/app/admin/admin.module.ts","webpack:///./src/app/admin/service/account.service.ts","webpack:///./src/app/admin/service/settings.service.ts","webpack:///./src/app/admin/service/system-logo.service.ts","webpack:///./src/app/admin/service/email.service.ts","webpack:///./src/app/admin/service/localization-manager.service.ts","webpack:///./src/app/admin/component/account/account.component.ts","webpack:///./src/app/admin/component/account/account.component.html","webpack:///./src/app/admin/component/account/role-management.component.ts","webpack:///./src/app/admin/component/account/role-management.component.html","webpack:///./src/app/admin/component/account/account-invite.component.ts","webpack:///./src/app/admin/component/account/account-invite.component.html","webpack:///./src/app/admin/component/logo/system-logo.component.ts","webpack:///./src/app/admin/component/logo/system-logo.component.html","webpack:///./src/app/admin/component/logo/system-logos.component.ts","webpack:///./src/app/admin/component/logo/system-logos.component.html","webpack:///./src/app/admin/component/email/email.component.ts","webpack:///./src/app/admin/component/email/email.component.html","webpack:///./src/app/admin/component/account/accounts.component.ts","webpack:///./src/app/admin/component/account/accounts.component.html","webpack:///./src/app/admin/component/account/account-invite-complete.component.ts","webpack:///./src/app/admin/component/account/account-invite-complete.component.html","webpack:///./src/app/admin/component/settings.component.ts","webpack:///./src/app/admin/component/settings.component.html","webpack:///./src/app/admin/component/organization/organization-modal.component.ts","webpack:///./src/app/admin/component/organization/organization-modal.component.html","webpack:///./src/app/admin/component/localization-manager/new-locale-modal.component.ts","webpack:///./src/app/admin/component/localization-manager/new-locale-modal.component.html","webpack:///./src/app/admin/model/account.ts","webpack:///./src/app/admin/model/localization-manager.ts","webpack:///./src/app/admin/admin-routing.module.ts"],"names":["AdminModule","SystemLogoService","EmailService","AccountService","SettingsService","LocalizationManagerService","CommonModule","FormsModule","ReactiveFormsModule","FileUploadModule","NgxPaginationModule","SharedModule","AdminRoutingModule","SystemLogoComponent","SystemLogosComponent","AccountsComponent","AccountInviteCompleteComponent","AccountInviteComponent","AccountComponent","EmailComponent","SettingsComponent","OrganizationModalComponent","NewLocaleModalComponent","RoleManagementComponent","http","eventService","page","p","params","HttpParams","set","toString","this","start","get","acp","pipe","finalize","complete","toPromise","edit","oid","headers","HttpHeaders","post","JSON","stringify","newInstance","organizationCodes","newUserInstance","newInvite","remove","apply","user","roleNames","account","unlock","inviteUser","invite","roleIds","inviteComplete","token","getRolesForUser","userOID","getOrganizations","updateOrganization","json","newOrganization","removeOrganization","code","getIcons","getInstance","email","setting","getNewLocaleInfo","installLocale","language","country","variant","service","authService","location","bsModalRef","localizeService","message","isSRA","isRA","orgCodes","getMyOrganizations","then","data","catch","err","error","ngOnInit","onEdit","Subject","onRoleIdsUpdate","event","cancel","hide","response","onChangePassword","changePassword","onSubmit","password","length","next","decode","localizedMessage","$event","EventEmitter","_roleIds","isAdmin","isMaintainer","isContributor","isContributer","_roles","formatRoles","onChangeRole","roles","formattedObj","forEach","role","orgCode","ORGANIZATIONS","orgGroup","ORGANIZATIONLABEL","orgLabel","localizedValue","type","RA","addToGeoObjectTypeGroup","geoObjectTypeGroup","geoObjectTypeLabel","assigned","ENABLEDROLE","name","GEOOBJECTTYPEROLES","push","newObj","SRA","sortRoles","org","gotrole","GEOOBJECTTYPEROLESGROUP","sort","a","b","RegistryRoleType","organization","exists","rg","GEOOBJECTTYPELABEL","onToggleOrgRA","onToggleSRA","setGroupRole","group","target","newRoleIds","emit","removeRoleId","id","pos","indexOf","splice","showData","console","log","settingsService","UserInvite","route","dropActive","context","onSuccess","options","autoUpload","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBeforeUploadItem","fileItem","onCompleteItem","item","status","onSuccessItem","onErrorItem","onBuildItemForm","form","append","icon","ngAfterViewInit","that","onAfterAddingFile","uploadElRef","nativeElement","value","reader","FileReader","onload","e","file","result","readAsDataURL","_file","fileOver","uploadAll","clear","clearQueue","router","modalService","changeDetectorRef","random","onClickRemove","show","ConfirmModalComponent","animated","backdrop","ignoreBackdropClick","content","submitText","onConfirm","subscribe","resp","icons","ico","Math","detectChanges","custom","server","username","port","from","to","res","resultSet","count","pageNumber","pageSize","updatedUserIndex","map","onPageChange","ErrorModalComponent","sub","window","href","organizations","settings","isConfigured","installedLocales","getLocales","orgs","getCGRVersion","getVersion","exportLocalization","onEditOrganization","isNewOrganization","onRemoveOrganization","ModalTypes","danger","i","newLocalization","configureEmail","inviteUsers","lService","label","create","contactInfo","localizationManagerService","allLocaleInfo","AllLocaleInfo","allLocaleInfoIN","submit","User","Group","Account","Role","FormattedRoles","FormattedOrganization","FormattedGeoObjectTypeRoleGroup","PageResult","LocaleInfo","Locale","routes","path","canActivate","AuthGuard","component","title","provide","LocationStrategy","useClass","HashLocationStrategy","RouterModule","forChild"],"mappings":"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","file":"2.chunk.js","sourcesContent":["///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\nimport { SystemLogoService } from './service/system-logo.service';\nimport { EmailService } from './service/email.service';\nimport { AccountService } from './service/account.service';\nimport { SettingsService } from './service/settings.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\n\n\nimport { AccountsComponent } from './component/account/accounts.component';\nimport { RoleManagementComponent } from './component/account/role-management.component';\nimport { AccountInviteComponent } from './component/account/account-invite.component';\nimport { AccountInviteCompleteComponent } from './component/account/account-invite-complete.component';\nimport { AccountComponent } from './component/account/account.component';\nimport { SystemLogoComponent } from './component/logo/system-logo.component';\nimport { SystemLogosComponent } from './component/logo/system-logos.component';\nimport { EmailComponent } from './component/email/email.component';\nimport { SettingsComponent } from './component/settings.component';\nimport { OrganizationModalComponent } from './component/organization/organization-modal.component';\nimport { NewLocaleModalComponent } from './component/localization-manager/new-locale-modal.component'\n\n\nimport { AdminRoutingModule } from './admin-routing.module';\n\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n@NgModule( {\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        NgxPaginationModule,\n        SharedModule,\n        AdminRoutingModule\n    ],\n    declarations: [\n        // Global components\n        SystemLogoComponent,\n        SystemLogosComponent,\n        AccountsComponent,\n        AccountInviteCompleteComponent,\n        AccountInviteComponent,\n        AccountComponent,\n        SystemLogoComponent,\n        SystemLogosComponent,\n        EmailComponent,\n        SettingsComponent,\n        OrganizationModalComponent,\n        NewLocaleModalComponent,\n        RoleManagementComponent\n    ],\n    exports: [\n        SystemLogoComponent,\n        SystemLogosComponent\n    ],\n    providers: [\n        SystemLogoService,\n        EmailService,\n        AccountService,\n        SettingsService,\n        LocalizationManagerService\n    ],\n    entryComponents: [\n        AccountInviteComponent,\n        AccountComponent,\n        OrganizationModalComponent,\n        NewLocaleModalComponent,\n        RoleManagementComponent\n    ]\n} )\nexport class AdminModule { }\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service'\nimport { MessageContainer } from '../../shared/model/core';\n\nimport { Account, User, PageResult, UserInvite } from '../model/account';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class AccountService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    page( p: number ): Promise<PageResult> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'number', p.toString() );\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult>( acp + '/account/page', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    edit( oid: string ): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/registryaccount/edit', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInstance(organizationCodes: string[]): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/registryaccount/newInstance', JSON.stringify( {\"organizationCodes\": organizationCodes} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newUserInstance(): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<User>( acp + '/registryaccount/newUserInstance', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    newInvite(): Promise<Account> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<Account>( acp + '/registryaccount/newInvite', JSON.stringify( {} ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    remove( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/account/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    apply( user: User, roleNames: string[] ): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<User>( acp + '/registryaccount/apply', JSON.stringify( { account: user, roleNames: roleNames } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/account/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    inviteUser( invite: UserInvite, roleIds: string[] ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n//        console.log( \"Submitting to inviteUser : \", JSON.stringify( { invite: invite, roleIds: roleIds } ) );\n\n        return this.http\n            .post<void>( acp + '/registryaccount/inviteUser', JSON.stringify( { invite: invite, roleIds: roleIds } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    inviteComplete( user: User, token: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/registryaccount/inviteComplete', JSON.stringify( { user: user, token: token } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    getRolesForUser( userOID: string ): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'userOID', userOID );\n\n        this.eventService.start();\n\n        return this.http\n            .get<any>( acp + '/cgr/account/get-roles-for-user', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service'\nimport { MessageContainer } from '../../shared/model/core';\n\nimport { Account, User, PageResult, UserInvite } from '../model/account';\nimport { Settings, Organization } from '../model/settings'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SettingsService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetOrganizations(): Promise<Organization[]> {\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<Organization[]>(acp + '/cgr/organizations/get-all')\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tupdateOrganization(json: any): Promise<Organization> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<Organization>(acp + '/cgr/orgainization/update', JSON.stringify({ json: json }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tnewOrganization(json: any): Promise<any> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/cgr/orgainization/create', JSON.stringify({ json: json }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremoveOrganization(code: any): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/cgr/orgainization/delete', JSON.stringify({ code: code }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service'\n\nimport { SystemLogo } from '../model/system-logo';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SystemLogoService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetIcons(): Promise<{ icons: SystemLogo[] }> {\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<{ icons: SystemLogo[] }>(acp + '/logo/getAll')\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/logo/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service'\n\nimport { Email } from '../model/email';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class EmailService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) {\n\t}\n\n\tgetInstance(): Promise<Email> {\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http.get<Email>(acp + '/email/getInstance')\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tapply(email: Email): Promise<Email> {\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<Email>(acp + '/email/apply', JSON.stringify({ setting: email }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '../../shared/service/event.service';\n\nimport { AllLocaleInfo } from '../model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, Input, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { Location } from '@angular/common';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\n\nimport { Account, User, Role } from '../../model/account';\nimport { AccountService } from '../../service/account.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component( {\n    selector: 'account',\n    templateUrl: './account.component.html',\n    styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}'],\n    styleUrls: ['./account.css']\n} )\nexport class AccountComponent implements OnInit {\n\n    message: string = null;\n    account: Account;\n    roles: Role[];\n    roleIds: string[] = [];\n\n    isSRA: boolean;\n\tisRA: boolean;\n\n    @Input()\n    set oid( oid: string ) {\n        if ( oid === 'NEW' ) {\n\n            let orgCodes = [];\n            if(this.isRA){\n                orgCodes = this.authService.getMyOrganizations();\n            }\n\n            this.service.newInstance(orgCodes).then( data => {\n                this.account = data;\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        }\n        else if ( oid ) {\n            this.service.edit( oid ).then( data => {\n                this.account = data;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    public onEdit: Subject<User>;\n\n    constructor(\n        private service: AccountService,\n        private authService: AuthService,\n        private location: Location,\n        public bsModalRef: BsModalRef,\n        private localizeService: LocalizationService\n    ) {\n\n        this.isSRA = authService.isSRA();\n\t\tthis.isRA = authService.isRA();\n    }\n\n    ngOnInit(): void {\n        this.onEdit = new Subject();\n    }\n\n    onRoleIdsUpdate(event): void {\n        this.roleIds = event;\n    }\n\n\n    cancel(): void {\n        if ( this.account.user.newInstance === true ) {\n            this.bsModalRef.hide();\n        }\n        else {\n            this.service.unlock( this.account.user.oid ).then( response => {\n                this.bsModalRef.hide();\n            } );\n        }\n    }\n\n    onChangePassword(): void {\n        this.account.changePassword = !this.account.changePassword;\n    }\n\n    onSubmit(): void {\n\n        if ( !this.account.changePassword && !this.account.user.newInstance ) {\n            delete this.account.user.password;\n        }\n\n        if (this.roleIds.length > 0) {\n            this.service.apply(this.account.user, this.roleIds).then(data => {\n                this.onEdit.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n        else{\n            this.message = this.localizeService.decode(\"account.role.management.roles.required.message\");\n        }\n    }\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}","<div>\n  <!-- <header></header> -->\n\n  <message></message>\n\n  <loading-bar></loading-bar>\n\n  <div class=\"modal-header\" style=\"text-align: center; border-bottom:none;\">\n    <h2 class=\"modal-title\">\n      Account\n    </h2>\n  </div>\n\n  <form *ngIf=\"account\" #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n    <!-- <div *ngIf=\"account\" class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n    <fieldset>\n\n      <div class=\"modal-body\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading\">\n          <h4 class=\"modal-title\">\n            <localize key=\"account.user.heading\"></localize>\n          </h4>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.firstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.firstName\" name=\"firstname\" required>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.lastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.lastName\" name=\"lastname\" required>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.phonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"account.user.phoneNumber\" name=\"phoneNumber\">\n            </span>\n            <!--               <div *ngIf=\"aphone.errors?.phone\" class=\"inline-error-message\"> -->\n            <!--                 <localize key=\"account.phone.validation\"></localize> -->\n            <!--               </div>                                           -->\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.email\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"email\" [(ngModel)]=\"account.user.email\" name=\"email\" required #aemail=\"ngModel\" required email>\n            </span>\n            <div *ngIf=\"aemail.errors?.email && account.user.email && account.user.email.length > 0\" class=\"inline-error-message\">\n              <localize key=\"account.email.validation\"></localize>\n            </div>\n          </div>\n        </div>\n\n\n        <!-- <div class=\"heading\">\n          <h4>\n            <localize key=\"account.info.heading\"></localize>\n          </h4>\n        </div> -->\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.username\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [disabled]=\"!account.user.newInstance && account.user.username === 'admin'\" [(ngModel)]=\"account.user.username\" name=\"username\" required>\n            </span>\n          </div>\n        </div>\n\n\n        <div *ngIf=\"!account.user.newInstance\" class=\"heading\">\n          <h4>\n            <localize key=\"account.user.password\"></localize>\n          </h4>\n        </div>\n        <div *ngIf=\"!account.user.newInstance\" class=\"row-holder\">\n          <div class=\"button-holder\" style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!account.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"account.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n        <div *ngIf=\"account.changePassword || account.user.newInstance\">\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label>\n                <localize key=\"account.password\"></localize>\n              </label>\n            </div>\n            <div class=\"holder\">\n              <span class=\"text\">\n                <input type=\"password\" [(ngModel)]=\"account.user.password\" name=\"password\" #password=\"ngModel\" required\n                  minlength=\"5\" maxlength=\"50\">\n                <password-strength-bar [passwordToCheck]=\"account.user.password\"></password-strength-bar>\n              </span>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label>\n                <localize key=\"account.certainPassword\"></localize>\n              </label>\n            </div>\n            <div class=\"holder\">\n              <span class=\"text\">\n                <input type=\"password\" [ngModel]=\"certainPassword\" name=\"certainPassword\" #certainPassword=\"ngModel\" required />\n              </span>\n              <div *ngIf=\"certainPassword.errors?.mustMatch\" class=\"inline-error-message\">\n                <localize key=\"account.certainPassword.validation\"></localize>\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n        <div class=\"heading\">\n          <h4>\n            <localize key=\"account.user.status\"></localize>\n          </h4>\n        </div>\n        <div *ngIf=\"!(!account.user.newInstance && account.user.username === 'admin')\">\n          <div class=\"row-holder\">\n            <label class=\"radio radio-inline\">\n              <input class=\"inline-radio-input\" type=\"radio\" name=\"userActive\" [value]=\"false\"\n                [(ngModel)]=\"account.user.inactive\">\n              <span><localize key=\"account.user.status.active\"></localize></span>\n            </label>\n            <label class=\"radio radio-inline\">\n              <input class=\"inline-radio-input\" type=\"radio\" name=\"userActive\" [value]=\"true\"\n                [(ngModel)]=\"account.user.inactive\">\n              <span><localize key=\"account.user.status.inactive\"></localize></span>\n            </label>\n          </div>\n        </div>\n\n        <role-management *ngIf=\"account.roles\" [newInstance]=\"account.user.newInstance\" [roles]=\"account.roles\" (onRoleIdsUpdate)=\"onRoleIdsUpdate($event)\"></role-management>\n\n       </div> <!-- End modal-body -->\n\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n    <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { Role, FormattedRoles, FormattedOrganization, FormattedGeoObjectTypeRoleGroup } from '../../model/account';\nimport { RegistryRoleType } from '../../../shared/model/core';\n\n@Component({\n\tselector: 'role-management',\n\ttemplateUrl: './role-management.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}'],\n\tstyleUrls: ['./role-management.css']\n})\nexport class RoleManagementComponent implements OnInit {\n\n\tmessage: string = null;\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\tisSRA: boolean;\n\n\t_roles: FormattedRoles;\n\n\t@Input('roles')\n\tset roles(data: any) {\n\t\tif (data) {\n\t\t\tthis._roles = this.formatRoles(data);\n\t\t\tthis.onChangeRole();\n\t\t}\n\t}\n\n\t@Output() onRoleIdsUpdate = new EventEmitter();\n\n\t_roleIds: string[] = [];\n\t@Input() newInstance: boolean = true;\n\n\n\tconstructor(\n\t\tpublic bsModalRef: BsModalRef, private authService: AuthService\n\t) {\n\n\t\tthis.isSRA = authService.isSRA();\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n\t}\n\n\tngOnInit(): void {\n\t}\n\n\n\tformatRoles(roles: Role[]): any {\n\n\t\tlet formattedObj: FormattedRoles = { \"SRA\": null, \"ORGANIZATIONS\": [] };\n\n\t\troles.forEach(role => {\n\n\t\t\t// If orgCode exists this is NOT an SRA\n\t\t\tif (role.orgCode) {\n\n\t\t\t\tlet addedToGroup = false;\n\n\t\t\t\tformattedObj.ORGANIZATIONS.forEach(orgGroup => {\n\n\t\t\t\t\tif (orgGroup.ORGANIZATIONLABEL === role.orgLabel.localizedValue) {\n\n\t\t\t\t\t\tif (role.type === \"RA\") {\n\t\t\t\t\t\t\torgGroup.RA = role;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\tlet added = this.addToGeoObjectTypeGroup(orgGroup, role);\n\n\t\t\t\t\t\t\tif (!added) {\n\t\t\t\t\t\t\t\tlet geoObjectTypeGroup: FormattedGeoObjectTypeRoleGroup = { \"GEOOBJECTTYPEROLESGROUP\": [role], \"ENABLEDROLE\": \"\", \"GEOOBJECTTYPELABEL\": role.geoObjectTypeLabel.localizedValue };\n\n\t\t\t\t\t\t\t\tif (role.assigned) {\n\t\t\t\t\t\t\t\t\tgeoObjectTypeGroup.ENABLEDROLE = role.name\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\torgGroup.GEOOBJECTTYPEROLES.push(geoObjectTypeGroup);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\taddedToGroup = true;\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\n\t\t\t\t// The organization hasn't been created yet\n\t\t\t\tif (!addedToGroup) {\n\n\t\t\t\t\tlet newObj: FormattedOrganization = { \"ORGANIZATIONLABEL\": null, \"RA\": null, \"GEOOBJECTTYPEROLES\": [] };\n\n\t\t\t\t\tif (role.type === \"RA\") {\n\t\t\t\t\t\tnewObj.ORGANIZATIONLABEL = role.orgLabel.localizedValue;\n\t\t\t\t\t\tnewObj.RA = role;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnewObj.ORGANIZATIONLABEL = role.orgLabel.localizedValue;\n\n\t\t\t\t\t\tlet geoObjectTypeGroup: FormattedGeoObjectTypeRoleGroup = { \"GEOOBJECTTYPEROLESGROUP\": [role], \"ENABLEDROLE\": \"\", \"GEOOBJECTTYPELABEL\": role.geoObjectTypeLabel.localizedValue };\n\n\t\t\t\t\t\tif (role.assigned) {\n\t\t\t\t\t\t\tgeoObjectTypeGroup.ENABLEDROLE = role.name\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewObj.GEOOBJECTTYPEROLES.push(geoObjectTypeGroup);\n\t\t\t\t\t}\n\n\t\t\t\t\tformattedObj.ORGANIZATIONS.push(newObj)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (role.type === \"SRA\") {\n\t\t\t\tformattedObj.SRA = role;\n\t\t\t}\n\t\t})\n\n\t\tthis.sortRoles(formattedObj);\n\n\t\treturn formattedObj;\n\t}\n\n\tsortRoles(roles: FormattedRoles): void {\n\t\troles.ORGANIZATIONS.forEach(org => {\n\t\t\torg.GEOOBJECTTYPEROLES.forEach(gotrole => {\n\t\t\t\tgotrole.GEOOBJECTTYPEROLESGROUP.sort((a, b) => {\n\t\t\t\t\tif (RegistryRoleType[a.type] < RegistryRoleType[b.type]) return -1;\n\t\t\t\t\tif (RegistryRoleType[a.type] > RegistryRoleType[b.type]) return 1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t})\n\t\t});\n\t}\n\n\taddToGeoObjectTypeGroup(organization: FormattedOrganization, role: Role): boolean {\n\t\tlet exists = false;\n\t\torganization.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\tif (rg.GEOOBJECTTYPELABEL === role.geoObjectTypeLabel.localizedValue) {\n\n\t\t\t\tif (role.assigned) {\n\t\t\t\t\trg.ENABLEDROLE = role.name\n\t\t\t\t}\n\n\t\t\t\trg.GEOOBJECTTYPEROLESGROUP.push(role);\n\n\t\t\t\texists = true;\n\t\t\t}\n\t\t});\n\n\t\treturn exists;\n\t}\n\n\tonToggleOrgRA(event: any, organization: FormattedOrganization): void {\n\n\t\torganization.RA.assigned = event;\n\n\t\t// Disable all GeoObjectType radio buttons in this organization\n\t\tif (organization.RA.assigned) {\n\t\t\torganization.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\t\trg.ENABLEDROLE = \"\";\n\t\t\t});\n\t\t}\n\n\t\tthis.onChangeRole();\n\t}\n\n\tonToggleSRA(event: any, role: Role): void {\n\n\t\tthis._roles.ORGANIZATIONS.forEach(org => {\n\t\t\torg.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\t\trg.ENABLEDROLE = \"\";\n\t\t\t});\n\t\t})\n\n\t}\n\n\tsetGroupRole(group: FormattedGeoObjectTypeRoleGroup, role: Role, event:any): void {\t\n\t\t\n\t\tif(role === null){\n\t\t\tgroup.ENABLEDROLE = \"\";\n\t\t}\n\t\telse{\n\t\t\tgroup.ENABLEDROLE = (event.target.checked) ? role.name : \"\";\n\t\t}\n\t\t\n\t\tthis.onChangeRole();\n\t}\n\n\tonChangeRole(): void {\n\n\t\tlet newRoleIds: string[] = [];\n\n\t\tthis._roles.ORGANIZATIONS.forEach(orgGroup => {\n\n\t\t\tif (orgGroup.RA && orgGroup.RA.assigned) {\n\t\t\t\tnewRoleIds.push(orgGroup.RA.name);\n\t\t\t}\n\t\t\t// If organization RA is enabled we don't add GeoObjectType level roles\n\t\t\telse {\n\t\t\t\torgGroup.GEOOBJECTTYPEROLES.forEach(rg => {\n\t\t\t\t\tif (rg.ENABLEDROLE && rg.ENABLEDROLE.length > 0) {\n\t\t\t\t\t\t// add GeoObjectType level role selected\n\t\t\t\t\t\tnewRoleIds.push(rg.ENABLEDROLE);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif(this._roles.SRA && this._roles.SRA.assigned) {\n\t\t\tnewRoleIds.push(this._roles.SRA.name);\n\t\t}\n\n\t\tthis._roleIds = newRoleIds;\n\t\tthis.onRoleIdsUpdate.emit(this._roleIds);\n\t}\n\n\tremoveRoleId(id: string): void {\n\n\t\tlet pos = this._roleIds.indexOf(id);\n\t\tif (pos !== -1) {\n\t\t\tthis._roleIds.splice(pos, 1);\n\t\t}\n\n\t\tthis.onRoleIdsUpdate.emit(JSON.stringify(this._roleIds));\n\t}\n\n\tshowData() {\n\t\tconsole.log(this._roles)\n\t}\n\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\n\t}\n\n}","<div>\n\n  <message></message>\n\n  <loading-bar></loading-bar>\n  <form>\n    <fieldset>\n      \n      <div *ngIf=\"_roles\">\n\n        <!-- SRA -->\n        <div *ngIf=\"_roles.SRA\" class=\"row\" style=\"padding: 20px;\">\n          <div class=\"col-sm-12\">\n            <boolean-field [(value)]=\"_roles.SRA.assigned\" (change)=\"onToggleSRA($event, _roles.SRA)\"\n              [label]=\"_roles.SRA.label.localizedValue\" [disable]=\"!isSRA\"></boolean-field>\n          </div>\n        </div>\n\n        <div *ngFor=\"let org of _roles.ORGANIZATIONS\" class=\"row-holder\">\n\n          <div class=\"heading\">\n            <h4>{{org.ORGANIZATIONLABEL}}</h4>\n          </div>\n\n\n          <!-- Organization administrator -->\n          <div *ngIf=\"org.RA && isSRA\" class=\"row\" style=\"padding: 20px;\">\n            <div class=\"col-sm-12\">\n              <boolean-field [(value)]=\"org.RA.assigned\" (change)=\"onToggleOrgRA($event, org)\"\n                [label]=\"org.RA.label.localizedValue\" [disable]=\"_roles.SRA && _roles.SRA.assigned\"></boolean-field>\n            </div>\n          </div>\n\n          <!-- Organization GeoObjectTypes -->\n          <div class=\"row\">\n            <div class=\"col-sm-12 org-container\" style=\"padding-left:50px;padding-right:50px;\">\n\n              <fieldset [disabled]=\"(org.RA && org.RA.assigned) || (_roles.SRA && _roles.SRA.assigned)\">\n                <div *ngFor=\"let roleGroup of org.GEOOBJECTTYPEROLES; let i = index\">\n              \n                  <div class=\"heading\">\n                    <h4>{{roleGroup.GEOOBJECTTYPELABEL}}</h4>\n                  </div>\n              \n                  <label class=\"radio\" *ngFor=\"let role of roleGroup.GEOOBJECTTYPEROLESGROUP\">\n                    <input type=\"checkbox\" [value]=\"role.name\" [checked]=\"roleGroup.ENABLEDROLE === role.name\" (change)=\"setGroupRole(roleGroup, role, $event)\"\n                      [name]=\"role.orgCode + role.geoObjectTypeCode\" >\n                    <span style=\"font-weight: 400;\">{{role.label.localizedValue}}</span>\n                  </label>\n\n                  <label class=\"radio\">\n                    <input type=\"checkbox\" [value]=\"\" [checked]=\"roleGroup.ENABLEDROLE === ''\" (change)=\"setGroupRole(roleGroup, null, $event)\"\n                      [name]=\"roleGroup + '_none'\" >\n                    <span style=\"font-weight: 400;\">None</span>\n                  </label>\n              \n                </div>\n              </fieldset>\n\n            </div>\n          </div>\n\n        </div> <!-- End organizations row -->\n\n      </div>\n\n    </fieldset>\n  </form>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Account, UserInvite } from '../../model/account';\nimport { Organization } from '../../model/settings';\n\nimport { SettingsService } from '../../service/settings.service'\nimport { AccountService } from '../../service/account.service';\n\n\n@Component({\n\tselector: 'account-invite',\n\ttemplateUrl: './account-invite.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class AccountInviteComponent implements OnInit {\n\tinvite: UserInvite;\n\tmessage: string = null;\n\troleIds: string[] = [];\n\torganization: Organization;\n\torganizations: Organization[];\n\n\tconstructor(\n\t\tprivate service: AccountService,\n\t\tpublic bsModalRef: BsModalRef,\n\t\tpublic settingsService: SettingsService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.invite = new UserInvite();\n\n\t\tthis.service.newInvite().then((account: Account) => {\n\t\t\tthis.invite.roles = account.roles;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\t// this.settingsService.getOrganizations().then(orgs => {\n\t\t//     this.organizations = orgs\n\t\t// }).catch((err: HttpErrorResponse) => {\n\t\t//     this.error(err);\n\t\t// });\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tonRoleIdsUpdate(roleIds: string[]): void {\n\t\tthis.roleIds = roleIds;\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.inviteUser(this.invite, this.roleIds).then(() => {\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n}","<div>\n  <!-- <header></header> -->\n  \n  <message></message>\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" style=\"height:calc(100vh - 144px);padding-bottom: 20px;overflow-y: auto;\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n      <!-- <div class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n        <fieldset>            \n          <div class=\"heading\">\n            <h3>Invite a User</h3>\n          </div>      \n          <hr>        \n          \n          <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"account.email\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"invite.email\" name=\"email\" required #aemail=\"ngModel\" email>\n              </span>\n              <div *ngIf=\"aemail.errors?.email && invite.email && invite.email.length > 0\" class=\"inline-error-message\">\n                <localize key=\"account.email.validation\"></localize>\n              </div>                                          \n            </div>\n          </div>   \n          \n          <role-management *ngIf=\"invite.roles\" [newInstance]=\"true\" [roles]=\"invite.roles\" (onRoleIdsUpdate)=\"onRoleIdsUpdate($event)\"></role-management>\n\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid && roleIds.length > 0)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef, Inject, Input } from '@angular/core';\nimport { ActivatedRoute, Params, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { Observable } from 'rxjs';\n\n\nimport { EventService } from '../../../shared/service/event.service';\nimport { SystemLogoService } from '../../service/system-logo.service';\nimport { SystemLogo } from '../../model/system-logo';\n\ndeclare var acp: any;\n\n@Component( {\n\n    selector: 'system-logo',\n    templateUrl: './system-logo.component.html',\n    styles: []\n} )\nexport class SystemLogoComponent implements OnInit {\n    message: string = null;\n    icon: SystemLogo;\n\n    public uploader: FileUploader;\n    public dropActive: boolean = false;\n\n    file: any;\n    context: string;\n\n    @ViewChild( 'uploadEl' )\n    private uploadElRef: ElementRef;\n\n    public onSuccess: Subject<any>;\n\n\n    constructor( private route: ActivatedRoute,\n        private eventService: EventService,\n        public bsModalRef: BsModalRef )\n        {\n            this.context = acp as string;\n        }\n\n    ngOnInit(): void {\n\n        this.onSuccess = new Subject();\n\n        let options: FileUploaderOptions = {\n            autoUpload: false,\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: acp + '/logo/apply'\n        };\n\n        this.uploader = new FileUploader( options );\n\n        this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.onSuccess.next( item );\n            this.bsModalRef.hide();\n        };\n        this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.error( response );\n        };\n        this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n            form.append( 'oid', this.icon.oid );\n        };\n    }\n\n    ngAfterViewInit() {\n        let that = this;\n\n        this.uploader.onAfterAddingFile = ( item => {\n            this.uploadElRef.nativeElement.value = '';\n\n            let reader = new FileReader();\n            reader.onload = function( e: any ) {\n                that.file = reader.result;\n            };\n            reader.readAsDataURL( item._file );\n        } );\n    }\n\n    fileOver( e: any ): void {\n        this.dropActive = e;\n    }\n\n    cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    onSubmit(): void {\n        if( this.file == null ) {\n            this.bsModalRef.hide();\n        }\n        else {\n            this.uploader.uploadAll();\n        }\n    }\n\n    clear(): void {\n        this.file = null;\n\n        this.uploader.clearQueue()\n    }\n\n    error( err: string ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = err;\n        }\n    }\n}\n","<div>\n\n  <message ></message>\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n        \n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n        \n        <fieldset>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>          \n            <div class=\"holder\">\n              <span class=\"text\">\n\n                <div>\n                  <!-- For display only when editing an icon-->\n                  <img *ngIf=\"!file && icon\" style=\"max-width:300px;max-height:300px;\" [src]=\"context + '/logo/view?oid=' + icon.oid\" class=\"thumb\">\n                      \n                  <!-- Actual uploaded file preview -->\n                  <img *ngIf=\"file\" style=\"max-width:300px;max-height:300px;\" [src]=\"file\" class=\"thumb\">\n                </div>                        \n              \n                <div class=\"drop-box-container\" ng2FileDrop [ngClass]=\"{'drop-active': dropActive}\" (fileOver)=\"fileOver($event)\" [uploader]=\"uploader\" (click)=fileInput.click()>\n                  <div class=\"drop-box\">\n                    <div class=\"inner-drop-box\">\n                      <i class=\"fa fa-cloud-upload\">\n                        <p class=\"upload-text\"><localize key=\"system.image.uploadText\"></localize></p>\n                      </i>\n                    </div>\n                  </div>\n                  <input type=\"file\" #uploadEl ng2FileSelect #fileInput [uploader]=\"uploader\" id=\"uploader-input\" style=\"display:none\" />\n                </div>\n                \n              </span>\n            </div>\n          </div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'category.icon.ok' | localize\" class=\"btn btn-primary\" (disabled)=\"form.invalid\" />                \n              </div>\n            </div>\n          </div>\n        </fieldset>  \n  </form>\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { SystemLogoComponent } from './system-logo.component'\n\nimport { SystemLogo } from '../../model/system-logo';\nimport { SystemLogoService } from '../../service/system-logo.service';\n\ndeclare let acp: string;\n\n@Component({\n  \n  selector: 'system-logos',\n  templateUrl: './system-logos.component.html',\n  styleUrls: []\n})\nexport class SystemLogosComponent implements OnInit {\n  public icons: SystemLogo[];\n  context: string;\n  bsModalRef: BsModalRef;\n  message: string = null;\n  random = 0;\n\n  constructor(\n    private router: Router,\n    private service: SystemLogoService,\n    private modalService: BsModalService,\n    private localizeService: LocalizationService,\n    private changeDetectorRef: ChangeDetectorRef\n    ) {\n\n    this.context = acp as string;\n  }\n\n  ngOnInit(): void {\n    this.getIcons();\n  }\n\n  onClickRemove(icon) : void {\n    this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n        animated: true,\n        backdrop: true,\n        ignoreBackdropClick: true,\n    } );\n    this.bsModalRef.content.message = this.localizeService.decode( \"system.image.removeContent\" );\n    this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n    this.bsModalRef.content.onConfirm.subscribe( data => {\n      this.remove(icon);\n    } );\n  }\n\n  getIcons(): void {\n    this.service.getIcons().then(resp => {\n\n      this.icons = resp.icons;\n    })\n    .catch(( err: HttpErrorResponse ) => {\n      this.error( err );\n    } );\n  }\n\n  edit(icon: SystemLogo): void {\n    // this.router.navigate(['/admin/logo', icon.oid]);\n\n    let bsModalRef = this.modalService.show( SystemLogoComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        bsModalRef.content.icon = icon;\n\n        bsModalRef.content.onSuccess.subscribe( data => {\n\n          this.icons.forEach(ico => {\n\n            // Setting a random number at the end of the url is a hack to change \n            // the image url to force Angular to rerender the image.\n            this.random = Math.random();\n\n            ico.oid = ico.oid\n          })\n\n          this.changeDetectorRef.detectChanges();\n        })\n  }\n\n  remove(icon: SystemLogo): void {\n    this.service.remove(icon.oid).then(response => {\n      icon.custom = false;\n    })\n    .catch(( err: HttpErrorResponse ) => {\n      this.error( err );\n    } );\n  }\n\n  error( err: HttpErrorResponse ): void {\n    // Handle error\n    if ( err !== null ) {\n      this.message = ( err.error.localizedMessage || err.error.message || err.message );\n    }\n  }\n}\n","<div>\n\n\n  <!-- <message ></message> -->\n  \n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n  \n  <div class=\"list-table-wrapper\">\n    <table id=\"manage-icons-table\" class=\"list-table table table-bordered table-striped\">        \n      <thead>\n        <tr>\n          <th></th>\n          <th class=\"label-column\"><localize key='system.image.label'></localize></th>\n          <th class=\"label-column\"><localize key='system.image.preview'></localize></th>\n        </tr>\n      </thead>    \n      <tbody>\n        <tr *ngFor=\"let icon of icons\" class=\"fade-ngRepeat-item\">\n          <td class=\"button-column\">\n            <span>\n              <a class=\"fa fa-pencil ico-edit\" (click)=\"edit(icon)\" [title]=\"'system.image.editTooltip' | localize\"></a>\n              <a *ngIf=\"icon.custom\" class=\"fa fa-trash-o ico-remove\" [title]=\"'system.image.removeTooltip' | localize\"\n                 (click)=\"onClickRemove(icon, $event)\"></a>\n            </span>\n          </td>\n          <td class=\"label-column\">{{ icon.label }}</td>\n          <td class=\"icon-thumbnail-column\">\n            <img style=\"width:42px;height:42px;\" class=\"thumb\" [src]=\"context + '/logo/view?oid=' + icon.oid + '&random=' + random\" alt=\"Icon\">\n          </td>\n        </tr>      \n      </tbody>    \n    </table>\n  </div>\n  \n  <div *ngIf=\"icons === null\" ><localize key='dataset.loadingData'></localize></div>\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, EventEmitter, Input, OnInit, OnChanges, Output, Inject, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Params, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\n\nimport { Email } from '../../model/email';\nimport { EmailService } from '../../service/email.service';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n\n@Component({\n\n  selector: 'email',\n  templateUrl: './email.component.html',\n  styleUrls: []\n})\nexport class EmailComponent implements OnInit {\n  message: string = null;\n  public email: Email = {\n    oid: '',\n    server: '',\n    username: '',\n    password: '',\n    port: 0,\n    from: '',\n    to: '',\n  };\n\n  public onSuccess: Subject<any>;\n\n  constructor(\n    private service: EmailService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private location: Location,\n    public bsModalRef: BsModalRef) {\n  }\n\n  ngOnInit(): void {\n    this.service.getInstance().then(email => {\n      this.email = email;\n    });\n\n    this.onSuccess = new Subject();\n  }\n\n  cancel(): void {\n    this.bsModalRef.hide();\n  }\n\n  onSubmit(): void {\n    this.service.apply(this.email)\n      .then(email => {\n        this.onSuccess.next(true);\n        this.bsModalRef.hide();\n      })\n      .catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n  }\n\n  error(err: HttpErrorResponse): void {\n    // Handle error\n    if (err !== null) {\n      this.message = (err.error.localizedMessage || err.error.message || err.message);\n    }\n  }\n}\n","\n<div>\n  <message ></message>  \n  <loading-bar></loading-bar>\n  \n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <!-- <div class=\"modal-dialog\"> -->\n      <!-- <div class=\"modal-content\"> -->\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n        <div class=\"heading\">\n          <h1><localize key=\"email.modal.heading\"></localize></h1>\n        </div>      \n        <fieldset>            \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.server\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.server\" name=\"server\" required #server=\"ngModel\">\n              </span>\n              <div *ngIf=\"server.errors?.url\" class=\"inline-error-message\">\n                <localize key=\"email.server.validation\"></localize>\n              </div>                            \n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.username\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.username\" name=\"username\" required>\n              </span>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.password\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"password\" [(ngModel)]=\"email.password\" name=\"password\" required>\n              </span>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.port\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"number\" [(ngModel)]=\"email.port\" name=\"port\" required #port=\"ngModel\" number>\n              </span>\n              <div *ngIf=\"port.errors?.number\" class=\"inline-error-message\">\n                <localize key=\"email.port.validation\"></localize>\n              </div>                                                        \n            </div>\n          </div>          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.from\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.from\" name=\"from\" required #from=\"ngModel\" email>\n              </span>\n              <div *ngIf=\"from.errors?.email\" class=\"inline-error-message\">\n                <localize key=\"email.from.validation\"></localize>\n              </div>                                          \n            </div>\n          </div>          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"email.to\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"email.to\" name=\"to\"  #to=\"ngModel\" email>\n              </span>\n              <div *ngIf=\"to.errors?.email\" class=\"inline-error-message\">\n                <localize key=\"email.to.validation\"></localize>\n              </div>                                                        \n            </div>\n          </div>          \n\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { User, PageResult } from '../../model/account';\nimport { AccountService } from '../../service/account.service';\nimport { AccountComponent } from './account.component';\n\n@Component( {\n    selector: 'accounts',\n    templateUrl: './accounts.component.html',\n    styleUrls: ['./accounts.css']\n} )\nexport class AccountsComponent implements OnInit {\n    res: PageResult = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10\n    };\n    bsModalRef: BsModalRef;\n    message: string = null;\n\n    constructor(\n        private service: AccountService,\n        private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.service.page( 1 ).then( res => {\n            this.res = res;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n\n    edit( user: User ): void {\n        // this.router.navigate(['/admin/account', user.oid]);\n\n        this.bsModalRef = this.modalService.show( AccountComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.oid = user.oid;\n\n        let that = this;\n        ( <AccountComponent>this.bsModalRef.content ).onEdit.subscribe( data => {\n            let updatedUserIndex = that.res.resultSet.map(\n                function( e ) { return e.oid; }\n            ).indexOf( data.oid );\n\n            if ( updatedUserIndex !== -1 ) {\n                that.res.resultSet[updatedUserIndex] = data;\n            }\n        } );\n    }\n\n    newInstance(): void {\n        // this.router.navigate(['/admin/account', 'NEW']);\n\n        this.bsModalRef = this.modalService.show( AccountComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.oid = 'NEW';\n\n        this.bsModalRef.content.onEdit.subscribe( data => {\n            this.onPageChange( this.res.pageNumber );\n        } );\n\n    }\n\n    onPageChange( pageNumber: number ): void {\n        this.service.page( pageNumber ).then( res => {\n            this.res = res;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <message></message>\n        <!-- <loading-bar></loading-bar> -->\n\n        <h2>\n            <localize key=\"accounts.title\"></localize>\n        </h2>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        \n        <div class=\"list-table-wrapper\">\n            <table id=\"manage-accounts-table\" class=\"list-table table table-bordered table-striped\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th class=\"label-column\"><localize key='account.username'></localize></th>\n                        <th class=\"label-column\"><localize key='account.firstname'></localize></th>\n                        <th class=\"label-column\"><localize key='account.lastname'></localize></th>\n                        <th class=\"label-column\"><localize key='account.phonenumber'></localize></th>\n                        <th class=\"label-column\"><localize key='account.email'></localize></th>\n                        <!-- <th class=\"label-column\"><localize key='account.roles'></localize></th> -->\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let account of res.resultSet | paginate: { itemsPerPage: res.pageSize, currentPage: res.pageNumber, totalItems: res.count }\" class=\"fade-ngRepeat-item\" [ngClass]=\"{'inactive': account.inactive}\">\n                        <td class=\"button-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"edit(account, $event)\" [title]=\"'account.editTooltip' | localize\"></a> \n                        <td class=\"label-column username-col\">{{ account.username }}</td>\n                        <td class=\"label-column firstname-col\">{{ account.firstName }}</td>\n                        <td class=\"label-column lastname-col\">{{ account.lastName }}</td>\n                        <td class=\"label-column phone-col\">{{ account.phoneNumber | phone }}</td>\n                        <td class=\"label-column email-col\">{{ account.email }}</td>\n                        <!-- <td class=\"label-column role-col\">{{ account.roles }}</td> -->\n                    </tr>\n                    <tr>\n                        <td class=\"button-column\"><a class=\"fa fa-plus\" (click)=\"newInstance()\" [title]=\"'account.newTooltip' | localize\"></a></td>\n                    </tr>\n\n                </tbody>\n            </table>\n        </div>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n    </div>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, EventEmitter, Input, OnInit, OnChanges, Output, Inject, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Params, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { Observable } from 'rxjs';\n\n\nimport { User, PageResult, Account } from '../../model/account';\nimport { AccountService } from '../../service/account.service';\n\ndeclare let acp: string;\n\n@Component({\n  selector: 'account-invite-complete',\n  templateUrl: './account-invite-complete.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class AccountInviteCompleteComponent implements OnInit {\n  user:User;\n  private sub: any;\n  token: string;\n  message: string = null;\n  \n  constructor(\n    private service:AccountService,\n    private route:ActivatedRoute,\n    private location:Location) {\n  }\n\n  ngOnInit(): void {\n    this.service.newUserInstance().then((user:User) => {\n      this.user = user;\n    })\n    .catch(( err: HttpErrorResponse ) => {\n      this.error( err );\n    } );\n    \n    this.sub = this.route.params.subscribe(params => {\n       this.token = params['token'];\n    });\n  }\n  \n  cancel(): void {\n    window.location.href = acp;\n  } \n  \n  onSubmit(): void {\n    this.service.inviteComplete(this.user, this.token).then(response => {\n      window.location.href = acp;\n    })\n    .catch(( err: HttpErrorResponse ) => {\n      this.error( err );\n    } );\n  }  \n  \n  error( err: HttpErrorResponse ): void {\n    // Handle error\n    if ( err !== null ) {\n      this.message = ( err.error.localizedMessage || err.error.message || err.message );\n    }\n  }\n}","<div class=\"new-admin-design-main\">\n  <cgr-header [loggedIn]=false></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n\t  <message></message>\n\t  <loading-bar></loading-bar>\n\t  \n\t  <h2><localize key=\"account.invite.createTitle\"></localize></h2>\n\t\n\t  <form *ngIf=\"user != null\" #form=\"ngForm\" style=\"padding-bottom: 20px;\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n\t    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n\t      <!--  <div class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n\t        <fieldset>            \n\t          <div class=\"heading\">\n\t            <h3><localize key=\"account.user.heading\"></localize></h3>\n\t          </div>      \n\t          <hr>        \n\t          \n\t          <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\t          \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.firstname\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.firstName\" name=\"firstname\" required>\n\t              </span>\n\t            </div>\n\t          </div>          \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.lastname\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.lastName\" name=\"lastname\" required>\n\t              </span>\n\t            </div>\n\t          </div>  \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.phonenumber\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.phoneNumber\" name=\"phoneNumber\" >\n\t              </span>\n\t<!--               <div *ngIf=\"aphone.errors?.phone\" class=\"inline-error-message\"> -->\n\t<!--                 <localize key=\"account.phone.validation\"></localize> -->\n\t<!--               </div>                                           -->\n\t            </div>\n\t          </div>           \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.email\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [(ngModel)]=\"user.email\" name=\"email\" required #aemail=\"ngModel\" email>\n\t              </span>\n\t              <div *ngIf=\"aemail.errors?.email && user.email && user.email.length > 0\" class=\"inline-error-message\">\n\t                <localize key=\"account.email.validation\"></localize>\n\t              </div>                                          \n\t            </div>\n\t          </div>          \n\t          <div class=\"heading\">\n\t            <h3><localize key=\"account.info.heading\"></localize></h3>\n\t          </div>      \n\t          <hr>          \n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t              <label><localize key=\"account.username\"></localize></label>\n\t            </div>          \n\t            <div class=\"holder\" >\n\t              <span class=\"text\">\n\t                <input type=\"text\" [disabled]=\"!user.newInstance && user.username === 'admin'\" [(ngModel)]=\"user.username\" name=\"username\" required>\n\t              </span>\n\t            </div>\n\t          </div>\n\t          <div>\n\t            <div class=\"row-holder\">\n\t              <div class=\"label-holder\">\n\t                <label><localize key=\"account.password\"></localize></label>\n\t              </div>          \n\t              <div class=\"holder\" >\n\t                <span class=\"text\">\n\t                  <input type=\"password\" [(ngModel)]=\"user.password\" name=\"password\" #password=\"ngModel\" required minlength=\"5\" maxlength=\"50\" >\n\t                  <ng2-password-strength-bar\n\t                    [passwordToCheck]=\"user.password\">\n\t                  </ng2-password-strength-bar>                              \n\t                </span>\n\t              </div>\n\t            </div>  \n\t            <div class=\"row-holder\">\n\t              <div class=\"label-holder\">\n\t                <label><localize key=\"account.certainPassword\"></localize></label>\n\t              </div>          \n\t              <div class=\"holder\" >\n\t                <span class=\"text\">\n\t                  <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" [value]=\"password\"/>\n\t                </span>\n\t                <div *ngIf=\"certainPassword.errors?.equalTo\" class=\"inline-error-message\">\n\t                  <localize key=\"account.certainPassword.validation\"></localize>\n\t                </div>                                                       \n\t              </div>\n\t            </div>  \n\t          </div>\n\t          <div class=\"row-holder\">\n\t            <div class=\"label-holder\">\n\t            </div>                    \n\t            <div class=\"holder\">\n\t              <div class=\"button-holder\">\n\t                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n\t                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n\t              </div>\n\t            </div>\n\t          </div>\n\t        </fieldset>\n\t      <!-- </div> -->\n\t    <!-- </div> -->\n\t  </form>\n  </div>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ConfirmModalComponent } from '../../shared/component/modals/confirm-modal.component';\nimport { ErrorModalComponent } from '../../shared/component/modals/error-modal.component';\nimport { LocalizationService } from '../../shared/service/localization.service';\n\nimport { AccountInviteComponent } from './account/account-invite.component';\nimport { EmailComponent } from './email/email.component'\nimport { OrganizationModalComponent } from './organization/organization-modal.component'\nimport { NewLocaleModalComponent } from './localization-manager/new-locale-modal.component';\n\nimport { SettingsService } from '../service/settings.service';\nimport { Settings, Organization } from '../model/settings';\nimport { Locale } from '../model/localization-manager';\n\nimport { AuthService } from '../../shared/service/auth.service';\nimport { ModalTypes } from '../../shared/model/modal';\n\n\ndeclare let acp: string;\n\n@Component( {\n    selector: 'settings',\n    templateUrl: './settings.component.html',\n    styleUrls: ['./settings.css']\n} )\nexport class SettingsComponent implements OnInit {\n    bsModalRef: BsModalRef;\n    message: string = null;\n    organizations: Organization[] = [];\n    installedLocales: Locale[]; // TODO: this should be from the localizaiton-manager model\n    isAdmin: boolean;\n    isSRA: boolean;\n    isRA: boolean;\n    settings: Settings = {email: {isConfigured: false}}\n\n    constructor(\n        private modalService: BsModalService,\n        private localizeService: LocalizationService,\n        private settingsService:  SettingsService,\n        private authService: AuthService,\n    ) {\n        this.isAdmin = authService.isAdmin();\n        this.isSRA = authService.isSRA();\n        this.isRA = authService.isRA();\n     }\n\n    ngOnInit(): void {\n\n        // this.registryService.getLocales().then( locales => {\n        //     this.localizeService.setLocales( locales );\n        // } ).catch(( err: HttpErrorResponse ) => {\n        //     this.error( err );\n        // } );\n\n        this.installedLocales = this.getLocales();\n\n        this.settingsService.getOrganizations().then(orgs => {\n            this.organizations = orgs\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n    }\n\n\n    public getCGRVersion(): string {\n        return this.authService.getVersion();\n    }\n\n    public getLocales(): Locale[] {\n        return this.authService.getLocales();\n    }\n\n    exportLocalization() {\n        //this.localizationManagerService.exportLocalization();\n        window.location.href = acp + \"/localization/exportSpreadsheet\";\n    }\n\n    public onEditOrganization(org: Organization): void {\n        let bsModalRef = this.modalService.show( OrganizationModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        bsModalRef.content.organization = org;\n        bsModalRef.content.isNewOrganization = false;\n\n        bsModalRef.content.onSuccess.subscribe( data => {\n            this.organizations.push(data);\n        })\n    }\n\n    public onRemoveOrganization(code: string, name: string): void {\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + name + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n            // this.settingsService.removeOrganization(code);\n            \n            this.settingsService.removeOrganization(code).then(response => {\n\t\t\t\tfor(let i = this.organizations.length - 1; i >= 0; i--) {\n                    if(this.organizations[i].code === code){\n                        this.organizations.splice(i, 1);\n                    }\n                }\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n            });\n            \n        });\n    }\n\n    public newOrganization(): void {\n        let bsModalRef = this.modalService.show( OrganizationModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        bsModalRef.content.isNewOrganization = true;\n\n         bsModalRef.content.onSuccess.subscribe( data => {\n            this.organizations.push(data);\n         })\n    }\n\n    \n    public newLocalization(): void {\n\n        let bsModalRef = this.modalService.show( NewLocaleModalComponent, { \n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        } );\n\n        bsModalRef.content.onSuccess.subscribe( data => {\n            this.installedLocales.push(data);\n        })\n    }\n\n    public configureEmail(): void {\n        this.bsModalRef = this.modalService.show( EmailComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n         this.bsModalRef.content.onSuccess.subscribe( data => {\n            this.settings.email.isConfigured = data\n         })\n    }\n\n    inviteUsers(): void {\n        // this.router.navigate(['/admin/invite']);\t  \n\n        this.bsModalRef = this.modalService.show( AccountInviteComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        this.bsModalRef.content.organization = null;\n    }\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n\n    <div id=\"app-container\" class=\"container\">\n\n        <message></message>\n        <!-- <loading-bar></loading-bar> -->\n\n        <h2>\n            <localize key=\"settings.title\"></localize>\n        </h2>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div> \n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.information.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <h4><localize key=\"settings.version.label\"></localize> {{getCGRVersion()}}</h4>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isAdmin\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.organizations.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <div class=\"list-table-wrapper\">\n                            <table id=\"manage-organizations-table\" class=\"list-table table table-bordered table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th *ngIf=\"isSRA\"></th>\n                                        <th>\n                                            <localize key=\"settings.manage.orgs.table.code.header\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.orgs.table.name.header\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.orgs.table.contact.header\"></localize>\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let org of organizations\">\n                                        <td *ngIf=\"isSRA\" class=\"button-column\">\n                                            <a class=\"fa fa-pencil ico-edit\" (click)=\"onEditOrganization(org)\"  [title]=\"'account.editTooltip' | localize\"></a> \n                                            <a class=\"fa fa-trash-o ico-remove\" (click)=\"onRemoveOrganization(org.code, org.code)\" [title]=\"'account.removeTooltip' | localize\" ></a>\n                                        </td>\n                                        <td class=\"label-column\">{{org.code}}</td>\n                                        <td class=\"label-column\">{{org.label.localizedValue}}</td>\n                                        <td class=\"label-column\">{{org.contactInfo.localizedValue}}</td>\n\n                                        \n                                    </tr>\n                                    <tr *ngIf=\"isSRA\">\n                                        <td class=\"button-column\">\n                                            <a class=\"fa fa-plus\" (click)=\"newOrganization()\" [title]=\"'account.newTooltip' | localize\"></a>\n                                        </td>\n                                    </tr>\n\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA || isRA\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.accounts.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <a [routerLink]=\"'/admin/accounts/'\" routerLinkActive=\"active\">\n                                    <button class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"settings.manage.accounts.button\"></localize>\n                                    </button>\n                                </a>\n                          </div>\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <input class=\"btn btn-primary\" style=\"margin-top:10px;\" type=\"submit\" value=\"Invite User\" (click)=\"inviteUsers()\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.localization.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <div class=\"list-table-wrapper\">\n                            <table id=\"manage-accounts-table\" class=\"list-table table table-bordered table-striped\">\n                                <thead>\n                                    <tr>\n                                        <th>\n                                            <localize key=\"settings.manage.lang.table.language.header\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.lang.table.country.header\"></localize>\n                                        </th>\n                                        <th>\n                                            <localize key=\"settings.manage.lang.table.variant.header\"></localize>\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let loc of installedLocales\">\n                                        <td class=\"label-column\">{{loc.language}}</td>\n                                        <td class=\"label-column\">{{loc.country}}</td>\n                                        <td class=\"label-column\">{{loc.variant}}</td>\n                                    </tr>\n                                    <tr>\n                                        <td class=\"button-column\"><a class=\"fa fa-plus\" (click)=\"newLocalization()\" [title]=\"'account.newTooltip' | localize\"></a></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <input class=\"btn btn-primary\" type=\"submit\" (click)=\"exportLocalization()\" value=\"Export localization\">\n                    \n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA\" class=\"row\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.branding.heading\"></localize></h3>\n\n                    <div class=\"content-wrapper\">\n                        <system-logos></system-logos>\n                    </div>\n                </div>\n            </div>\n\n            <div *ngIf=\"isSRA\" class=\"row\" style=\"margin-bottom: 30px;\">\n                <div class=\"col-md-12\">\n                    <h3><localize key=\"settings.email.heading\"></localize></h3>\n                     \n                    <div class=\"content-wrapper\">\n                        <input class=\"btn btn-primary\" type=\"submit\" (click)=\"configureEmail()\" value=\"Configure\">\n\n                        <i *ngIf=\"settings.email.isConfigured\" class=\"fa fa-check\" aria-hidden=\"true\">Configured</i>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { Organization } from '../../model/settings';\nimport { SettingsService } from '../../service/settings.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n@Component({\n\tselector: 'organization-modal',\n\ttemplateUrl: './organization-modal.component.html',\n\tstyles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class OrganizationModalComponent implements OnInit {\n\n\tmessage: string = null;\n\torganization: Organization = { code: \"\", label: this.lService.create(), contactInfo: this.lService.create() };\n\tisNewOrganization: boolean = true;\n\n\tpublic onSuccess: Subject<Organization>;\n\n\tconstructor(private service: SettingsService, public bsModalRef: BsModalRef, private lService: LocalizationService) { }\n\n\tngOnInit(): void {\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tcancel(): void {\n\t\tthis.bsModalRef.hide();\n\t}\n\n\tonSubmit(): void {\n\t\tif (this.isNewOrganization) {\n\t\t\tthis.service.newOrganization(this.organization).then(data => {\n\t\t\t\tthis.onSuccess.next(data);\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.service.updateOrganization(this.organization).then(data => {\n\t\t\t\tthis.onSuccess.next(data);\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\n\t}\n\n}","<div>\n  <!-- <header></header> -->\n  \n  <message></message>\n\n  <loading-bar></loading-bar>\n\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <!-- <div class=\"modal-dialog\" style=\"height: 100%;\"> -->\n      <!-- <div *ngIf=\"account\" class=\"modal-content\" style=\"height: 100%;overflow-y: auto;\"> -->\n        <fieldset>            \n          <div class=\"heading\">\n            <h3><localize key=\"organization.heading\"></localize></h3>\n          </div>      \n          \n          <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"organization.code\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"organization.code\" name=\"code\" [disabled]=\"!isNewOrganization\" required>\n              </span>\n            </div>\n          </div>     \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"organization.name\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n\n                <div class=\"form-group\" *ngFor=\"let localeValue of organization.label.localeValues\">\n                  <label> {{localeValue.locale}}</label>\n                  <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\" required>\n                </div>\n                <!-- <input type=\"text\" [(ngModel)]=\"organization.label\" name=\"name\" required> -->\n              </span>\n            </div>\n          </div>  \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"organization.contact\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <div class=\"form-group\" *ngFor=\"let localeValue of organization.contactInfo.localeValues\">\n                  <label> {{localeValue.locale}}</label>\n                  <input  [(ngModel)]=\"localeValue.value\" [name]=\"'contact-' + localeValue.locale\" type=\"input\" class=\"form-control\">\n                </div>\n                <!-- <input type=\"text\" [(ngModel)]=\"organization.contactInfo\" name=\"contact\" required> -->\n              </span>\n            </div>\n          </div>  \n\n          <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              {{organization.label.localizedValue}} Registry Administrator\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"organization.code\" name=\"code\" [disabled]=\"!isNewOrganization\" required>\n              </span>\n            </div>\n          </div>   -->\n\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { LocalizationManagerService } from '../../service/localization-manager.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { AllLocaleInfo } from '../../model/localization-manager';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\n@Component({\n  selector: 'new-locale-modal',\n  templateUrl: './new-locale-modal.component.html',\n  styleUrls: []\n})\nexport class NewLocaleModalComponent {\n\n  allLocaleInfo: AllLocaleInfo;\n  language: string;\n  country: string;\n  variant: string;\n\n  public onSuccess: Subject<any>;\n\n  constructor(public bsModalRef: BsModalRef,\n    private localizationManagerService: LocalizationManagerService,\n    private eventService: EventService,\n    private modalService: BsModalService\n  ) { }\n\n  ngOnInit(): void {\n    this.allLocaleInfo = new AllLocaleInfo();\n\n    this.localizationManagerService.getNewLocaleInfo()\n      .then(allLocaleInfoIN => {\n        this.allLocaleInfo = allLocaleInfoIN;\n        this.eventService.complete();\n      }).catch((err: HttpErrorResponse) => {\n        console.log(err);\n\n        this.bsModalRef.hide();\n        this.eventService.complete();\n        this.error(err);\n      });\n\n    this.onSuccess = new Subject();\n  }\n\n  submit(): void {\n    this.eventService.start();\n\n    this.localizationManagerService.installLocale(this.language, this.country, this.variant)\n      .then(() => {\n        this.onSuccess.next(this.language);\n        this.eventService.complete();\n        this.bsModalRef.hide();\n      }).catch((err: HttpErrorResponse) => {\n        console.log(err);\n\n        this.bsModalRef.hide();\n        this.eventService.complete();\n        this.error(err);\n      });\n  }\n\n  cancel(): void {\n    this.bsModalRef.hide();\n\n\n  }\n\n  public error(err: HttpErrorResponse): void {\n    // Handle error\n    if (err !== null) {\n      let bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n      bsModalRef.content.message = (err.error.localizedMessage || err.error.message || err.message);\n    }\n  }\n}\n","<form #form=\"ngForm\" class=\"modal-form\" name=\"new-locale-form\" (ngSubmit)=\"form.valid && submit()\">\n  <div class=\"modal-body\">\n  <fieldset>\n    <div class=\"heading\">\n      <h3>\n        <localize key=\"new-locale.title\"></localize>\n      </h3>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <label>\n          <localize key=\"new-locale.language\"></localize>\n        </label>\n        <select [(ngModel)]=\"language\" name=\"new-locale-language\">\n          <option *ngFor=\"let lang of allLocaleInfo.languages\" [ngValue]=\"lang.key\">{{lang.label}}</option>\n        </select>\n      </div>\n    </div>\n\n    <div>\n      <label>\n        <localize key=\"new-locale.country\"></localize>\n      </label>\n      <select [(ngModel)]=\"country\" name=\"new-locale-country\">\n        <option *ngFor=\"let count of allLocaleInfo.countries\" [ngValue]=\"count.key\">{{count.label}}</option>\n      </select>\n    </div>\n\n    <div>\n      <label>\n        <localize key=\"new-locale.variant\"></localize>\n      </label>\n      <input type=\"text\" [(ngModel)]=\"variant\" name=\"new-locale-variant\" />\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>\n              <localize key=\"new-locale.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n            <span>\n              <localize key=\"new-locale.submit\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n  </div>\n</form>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nexport class UserInvite {\n  email: string;\n  roles: any;\n}\n\nexport class User {\n  oid: string;\n  username: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n  inactive: boolean;\n  newInstance: boolean;\n  roles: string[];\n}\n\n// export class Role {\n//   roleId:string;\n//   displayLabel:string;\n//   assigned:boolean;\n// }\n\nexport class Group {\n  name:string;\n  assigned:string;\n  roles:Role[];\n}\n\nexport class Account {\n  user:User;\n  roles: any;\n  changePassword:boolean;\n}\n\nexport class Role {\n  type:string;\n  name:string;\n  label:any;\n  orgCode:string;\n  orgLabel:any;\n  geoObjectTypeCode:string;\n  geoObjectTypeLabel: any;\n  assigned: boolean;\n}\n\nexport class FormattedRoles {\n  SRA: Role;\n  ORGANIZATIONS: FormattedOrganization[];\n}\n\nexport class FormattedOrganization {\n  ORGANIZATIONLABEL: any;\n  RA: Role;\n  GEOOBJECTTYPEROLES: FormattedGeoObjectTypeRoleGroup[];\n}\n\nexport class FormattedGeoObjectTypeRoleGroup {\n  ENABLEDROLE: string;\n  GEOOBJECTTYPELABEL: any;\n  GEOOBJECTTYPEROLESGROUP: Role[];\n}\n\nexport class PageResult {\n  count: number;\n  pageNumber: number;\n  pageSize: number;\n  resultSet: User[];\n}","export class LocaleInfo {\n  key: string;\n  label: string;\n}\n\nexport class AllLocaleInfo {\n  countries: LocaleInfo[];\n  languages: LocaleInfo[];\n}\n\nexport class Locale {\n  language: string;\n  country: string\n  name: string;\n  variant: string;\n}","import { NgModule, Injectable, Inject } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthGuard, AdminGuard, MaintainerGuard, ContributerGuard } from '../shared/service/guard.service';\nimport { PendingChangesGuard } from \"../shared/service/pending-changes-guard\";\n\nimport { AccountsComponent } from './component/account/accounts.component';\nimport { SettingsComponent } from './component/settings.component';\nimport { AccountInviteComponent } from './component/account/account-invite.component';\nimport { AccountInviteCompleteComponent } from './component/account/account-invite-complete.component';\nimport { AccountComponent } from './component/account/account.component';\nimport { SystemLogoComponent } from './component/logo/system-logo.component';\nimport { SystemLogosComponent } from './component/logo/system-logos.component';\nimport { EmailComponent } from './component/email/email.component';\n\n\nconst routes: Routes = [\n    {\n        path: 'logos',\n        canActivate: [AuthGuard],\n        component: SystemLogosComponent,\n        data: { title: 'System_Configuration' }\n    },\n    {\n        path: 'logo/:oid',\n        canActivate: [AuthGuard],\n        component: SystemLogoComponent,\n        data: { title: 'System_Configuration' }\n\n    },\n    {\n        path: 'email',\n        canActivate: [AuthGuard],\n        component: EmailComponent,\n        data: { title: 'System_Configuration' }\n\n    },\n    {\n        path: '',\n        canActivate: [AuthGuard],\n        component: AccountsComponent,\n        data: { title: 'useraccounts.title' }\n    },   \n    {\n        path: 'settings',\n        canActivate: [AuthGuard],\n        component: SettingsComponent,\n        data: { title: 'settings.title' }\n    }, \n    {\n        path: 'accounts',\n        canActivate: [AuthGuard],\n        component: AccountsComponent,\n        data: { title: 'useraccounts.title' }\n    },\n    {\n        path: 'account/:oid',\n        component: AccountComponent,\n        //   resolve: {\n        //     account: AccountResolver\n        //   },        \n        canActivate: [AuthGuard],\n        data: { title: 'account.title' }\n    },\n    {\n        path: 'invite',\n        component: AccountInviteComponent,\n        data: { title: 'account.title' }\n    },\n    {\n        path: 'invite-complete/:token',\n        component: AccountInviteCompleteComponent,\n        data: { title: 'account.title' }\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class AdminRoutingModule { }\n"],"sourceRoot":""}