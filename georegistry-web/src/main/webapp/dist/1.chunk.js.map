{"version":3,"sources":["webpack:///./src/app/registry/registry.module.ts","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-controller.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.html","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.ts","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.html","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","AccordionModule","forRoot","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","AddRemoveChildDetailComponent","SetParentDetailComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","ManageVersionsModalComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","ManageParentVersionsModalComponent","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","LocationManagerComponent","ContextLayerModalComponent","services","PRESENT","TreeEntity","code","label","description","children","this","addChild","term","push","Term","GeoObject","attributes","GeoObjectType","Task","geoObjectType","getVotAtDate","date","attrCode","lService","retVot","startDate","endDate","value","time","getTime","i","attr","type","create","isChangeOverTime","values","forEach","vot","Date","parse","JSON","stringify","Array","isArray","length","GeoObjectOverTime","ValueOverTime","isDefault","required","unique","Attribute","isChange","rootTerm","termOptions","setRootTerm","AttributeTerm","precision","scale","AttributeDecimal","GeoObjectTypeModalStates","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","PaginationPage","AbstractScheduledJob","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","MasterList","MasterListVersion","HierarchyOverTime","ImportStrategy","MasterListByOrg","SynchronizationConfig","OrgSyncInfo","ExportScheduledJob","ContextLayer","ContextLayerGroup","ImportSheet","Location","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","http","eventService","getHierarchyTypes","types","params","HttpParams","set","get","acp","toPromise","addChildToHierarchy","hierarchyCode","parentGeoObjectTypeCode","childGeoObjectTypeCode","headers","HttpHeaders","start","post","pipe","finalize","complete","insertBetweenTypes","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","removeFromHierarchy","createHierarchyType","htJSON","updateHierarchyType","deleteHierarchyType","setInheritedHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","geoObjectTypeCode","removeInheritedHierarchy","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","EventEmitter","message","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","attribute","animate","onAnimationDone","event","isValid","indexOf","localeValues","console","log","toString","trigger","style","transition","service","iService","bsModalRef","authService","readonly","edit","isNew","onMasterListChange","master","listGeoObjectTypes","then","myOrgTypes","orgCode","typeCode","superTypeCode","isGeoObjectTypeRM","catch","err","error","oid","displayLabel","representativityDate","publishingStartDate","publishDate","listAbstract","process","progress","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","hierarchies","subtypeHierarchies","leaf","frequency","isMaster","visibility","init","org","getIsDisabled","elClasses","target","classList","onChange","getHierarchiesForType","getHierarchiesForSubtypes","onSubmit","createMasterList","response","hide","onCancel","ErrorHandler","getMessageFromError","key","disabled","valueChange","modalService","preGeoObject","postGeoObject","calculatedPreObject","calculatedPostObject","attributeExcludes","forDate","readOnly","isEditingGeometries","isGeometryInlined","valid","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","apply","geomAttr","geometry","LocalizedValue","attributeForm","statusChanges","subscribe","result","emit","changes","calculate","calculateCurrent","geometryEditor","reload","goot","object","formatDate","localize","handleChangeCode","e","onManageAttributeVersions","show","animated","backdrop","ignoreBackdropClick","content","geoObjectOverTime","isNewGeoObject","onAttributeVersionChange","versionObj","tfInit","onManageGeometryVersions","isDifferentText","trim","isDifferentValue","onSelectPropertyOption","option","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attrOpts","removeStatuses","isStatusChanged","pre","preCompare","postCompare","getTypeDefinition","getIsValid","getGeoObject","getAllActions","requestId","applyAction","action","applyActionStatusProperties","lockAction","actionId","unlockAction","getAllRequests","filter","getRequestDetails","confirmChangeRequest","execute","rejectAllActions","actions","approveAllActions","submitChangeRequest","importSpreadsheet","configuration","json","cancelImport","importShapefile","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","includeTypes","getGeoObjectSuggestions","text","parent","hierarchy","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","data","deleteTermSynonym","createTerm","parentTermCode","termJSON","removeTerm","termCode","getNewLocaleInfo","installLocale","language","country","variant","mapboxgl","accessToken","roots","select","childTypeCode","getGeoObjectTypes","getParentGeoObjects","childId","parentTypes","recursive","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","addAttributeType","geoObjTypeId","updateAttributeType","deleteAttributeType","attributeName","addAttributeTermTypeOption","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","id","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","pageSize","pageNumber","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","getExportDetails","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","versionType","getAllMasterListVersions","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","newGeoObjectOverTime","setAttributeVersions","collection","list","createMasterListVersion","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","parentTreeNode","geoObject","masterListId","notes","sort","valueAttribute","publishShapefile","getMasterListsByOrg","getPublishMasterListJobs","getOrganizations","getPage","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","remove","unlock","run","getJobs","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","status","isPointWithin","point","bbox","y","height","x","width","fontSize","d3","append","classed","node","getBBox","svg","pt","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","parseInt","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","configurationChange","stateChange","onNext","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","name","exclusion","termProblems","attributeCode","registryService","geometryChange","onClickEdit","setTimeout","mapDiv","nativeElement","Math","floor","random","map","Map","container","zoom","center","on","initMap","onValidChange","removeLayers","addLayers","editingControl","getAll","features","saveDraw","preGeometry","zoomToBbox","addControl","NavigationControl","addEditButton","enableEditing","simpleEditControl","editEmitter","geometryType","MapboxDraw","controls","line_string","polygon","trash","combine_features","uncombine_features","postGeometry","add","removeSource","prefix","sourceName","removeLayer","getSource","renderGeometryAsLayer","color","addSource","addLayer","setData","bboxCode","bboxType","bboxDate","boundArr","bounds","LngLatBounds","fitBounds","padding","featureCollection","polygons","feature","j","coordinates","points","lines","cHierarchies","parentMap","day","getUTCDate","dateStr","getUTCFullYear","getUTCMonth","entries","pot","parents","getHierarchies","onManageVersions","find","h","onVersionChange","ErrorModalComponent","changeRequestService","localizeService","geoObjectTypes","geoObjectId","reason","dataSource","Observable","observer","results","organizationCode","isGeoObjectTypeRC","a","b","localizedValue","toLowerCase","pos","getGeoObjectTypePosition","splice","newValid","attributeEditor","changeTypeaheadLoading","typeaheadLoading","typeaheadOnSelect","item","submit","goSubmit","cancel","SuccessModalComponent","decode","tabIndex","submitFunction","arePropertiesValid","areParentsValid","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","handleDateChange","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","goPropertiesPost","configureFromImportError","importError","importErrorId","resolution","configureAsExisting","fetchGeoObject","fetchHierarchies","locales","setLocales","typeTypeCode","getTypeAheadObservable","ptn","properties","parentSelector","changePage","nextPage","force","persistModelChanges","_stepConfig","contextMenuService","changeDetectorRef","userOrganization","currentHierarchy","instance","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","options","displayField","actionMapping","mouse","click","tree","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","renderTree","rootGeoObjectTypes","got","canDrag","overflowDiv","scrollLeft","scrollRight","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","registerSvgHandlers","calculateCanDrag","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","calculateRelatedHierarchies","relatedHiers","hierarchyType","descendants","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","dropZoneBbox","activeDropZones","gotRectW","gotRectH","clearGhostNodes","isDragGroup","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","dropElY","childW","childH","dzg","dropTargetHasChildren","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","ghostNode","drag","rect","getBoundingClientRect","left","top","selThis","document","elementFromPoint","selectAll","each","sidebarDragHandler","startPoint","svgGot","getPos","setPos","split","svgDragHandler","findHierarchyByCode","ht","index","relatedHierarchies","refreshPrimaryHierarchy","isRA","isOrganizationRA","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","setGeoObjectTypes","organizations","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","findIndex","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","gOT","childType","nodeMenuComponent","leafMenuComponent","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","onHierarchytTypeCreate","nameA","toUpperCase","nameB","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","abstractDescription","acknowledgement","contact","isPrimaryHierarchy","groupSuperType","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","onGeoObjectTypeSubmitted","position","parentGotCode","gotCode","isActive","filtered","handleInheritHierarchy","handleUninheritHierarchy","auth","orgs","organizationLabel","getOrganizationLabelFromCode","toggleIsLeaf","isLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","geoObjectTypeManagementService","modalStateSubscription","unsubscribe","onModalStateChange","onGeoObjectTypeChange","update","close","modalStepIndicatorService","localizationService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","fetchOrganizationLabel","manageAttributes","onDeleteAttribute","defineAttributeModal","defineAttribute","editAttribute","removeAttributeType","attributeType","newAttribute","setAttribute","attributeInputComponent","isFormValid","isAttrValid","validator","c","geoObjectAttributeCode","validate","provide","NG_VALIDATORS","useExisting","multi","Object","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","termOption","replace","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","t","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","getCode","treeNode","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","lineWidth","textWidth","headerGBbox","headerFontSize","getRelatedHierarchies","descends","insert","gtree","links","join","d","source","gHeader","gotHeaderW","arrowRectD","gArrow","html","renderRelatedHierarchiesMenu","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","sysService","showImportConfig","importStrategies","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","getExternalSystems","paginatedSystems","externalSystems","resultSet","getUrl","format","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","externalSystem","sys","onErrorItem","onClick","queue","uploadAll","setImportSource","onCreate","createDate","lastUpdateDate","write","admin","read","lists","onView","onEdit","pair","ret","onDelete","arr","onFormat","confirm","objectKeys","keys","requests","columns","filterCriteria","prop","sortable","refresh","onSelect","selected","onExecute","changeRequest","request","onApproveAll","onRejectAll","requestTrackBy","toggle","parentElement","className","includes","toggleId","criteria","setActionStatus","approvalStatus","getActiveDetailComponent","actionType","endsWith","showActionDetail","curAction","cuDetail","endEdit","arDetail","spDetail","editingGeometry","hasDuplicateDate","vAttribute","onDateChange","vAttributes","snapDates","votArr","prev","current","formatDateString","onAddNewVersion","terms","editGeometry","getVersionData","versions","val","getDefaultLocaleVal","locale","defVal","locVal","setDateAttribute","version","opacity","newArray","dateObj","month","elRef","visible","onAdd","onRemove","transform","items","entry","pType","uid","ancestors","ancestor","pService","route","p","page","count","order","isPublished","isRefreshing","isWritable","searchPlaceholder","snapshot","paramMap","isCollapsed","onPageChange","baseUrl","window","location","hostname","port","notifier","webSocket","handleProgressChange","onSort","clearFilters","search","toggleFilter","getValues","base","unshift","total","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","editModal","onGoto","open","onPublish","onNewGeoObject","onExport","href","encodeURIComponent","isSRA","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onDownloadShapefile","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","interval","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","onResolveScheduledJob","allSelected","timeCounter","isPolling","hasRowValidationProblem","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onProblemResolvedListener","onEditGeoObject","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onViewAllCompletedTasks","onSuccess","level","system","cOrg","cSystem","levelRows","orgUnitGroups","oIndex","sIndex","systems","esConfig","levels","levelRow","levelNum","isAttributeEditor","hasAttributes","onOrganizationSelected","onChangeExternalSystem","lvl","addLevel","len","removeLevel","levelRowIndex","editorIndex","getEditorIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Id","dhis2Attrs","dhis2Attr","onChangeAttrMapping","newValue","attrCfg","attrs","attrCfgAttr","isDifferentGot","isOrgUnitGroup","onChangeTargetType","hasOwnProperty","onRun","exportErrors","mapService","geojson","breadcrumbs","active","vectorLayers","contextLayerGroups","baseLayers","sprite","baselayerIconHover","preventSingleClick","convertListsToContextLayers","layer","protocol","host","attributionControl","thisList","contextLayers","thisContextLayer","enabled","AttributionControl","compact","handleMapClickEvent","cLayerGroup","cLayer","addVectorLayer","handleBasemapStyle","baseLayer","setStyle","addContextLayerModal","cLayerGroups","highlightMapFeature","clearHighlightMapFeature","onListEntityHover","site","onListEntityHoverOff","zoomToFeature","timer","clearTimeout","drillDown","addBreadcrumb","expand","setNodes","nodes","groupHasEnabledContextLayers","group","hasEnabled","hasEnabledContextLayers","removeContextLayer","toggleContextLayer","tiles","navigator","groupHasContextLayers","hasCLayers","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","existingMenu","contextMenuGroup","titleLabel","removeFromHierarchyLabel","noRelatedHierLabel","removeWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","myBbox","existingSecondary","primaryHierBbox","svgHt","gSecondary","paddingLeft","relatedGotHasParents","buttonLabelPadding","inheritLabel","onClickInheritHierarchy","onClickUninheritHierarchy","secondaryGot","secondaryGotBbox","gConnector","toRoot","onNodeChange","allGeoObjectTypes","gObj","selectedGeoObjectType","geoObjectJson","canDeactivate","afterDeactivate","isDeactivating","unlockActionSync","startEdit","$","ajax","method","success","async","original","ChangeRequest","AbstractAction","UpdateGeoObjectAction","CreateGeoObjectAction","AddChildAction","RemoveChildAction","GovernanceStatus","PageEvent","SetParentAction","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","routes","path","component","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"mKAAA,SACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,OAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UAEA,UACA,UAEA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,UAEA,O,oUAGA,4B,wCA6IaA,I,8DAAAA,IAAc,UA9Cf,CACV,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,8BACA,SA3GQ,CACR,EAAAC,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBAEA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,sBACE,GAAAC,gBAAgBC,c,EAnBpB,GA6Ia,EAAA9B,mB,iEAAAA,GAAc,eAvHzB,EAAA+B,mBACA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,8BACA,EAAAC,yBACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BACA,GAAAC,kBACA,GAAAC,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,EAAAC,uBACA,EAAAC,wCACA,EAAAC,6BACA,EAAAC,6BACA,EAAAC,yBACA,GAAAC,+BACA,GAAAtD,oBACA,EAAAuD,4BACA,GAAAC,kBACA,EAAAC,kBACA,EAAAC,2BACA,GAAAC,qBACA,GAAAC,mCACA,GAAAC,2BACA,EAAAxC,mBACA,GAAAyC,sBACA,GAAAC,oBAEA,EAAAC,2BACA,GAAAC,oBACA,GAAAC,2BACA,GAAAC,oCACA,EAAAC,sBACA,GAAAC,wBAEA,EAAAC,2BACA,GAAAC,uBACA,GAAAC,aACA,GAAAC,0BACA,GAAAC,uBACA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAA5E,uBACA,GAAA6E,6BACA,GAAAC,oBAEA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,+BACA,GAAAC,qBAEA,GAAAC,yBACA,GAAAC,4BAA0B,SA3F1B,EAAAlF,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBAEA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,sBAAqB,sB,uBA6CrB,GAAA2C,2BAA0B,wmEAC1B,EAAAxC,mBAzCA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,8BACA,EAAAC,yBACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BAEA,GAAAE,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,EAAAC,uBACA,EAAAC,wCACA,EAAAC,6BACA,EAAAC,6BACA,EAAAC,yBAGA,EAAAE,4BACA,GAAAC,kBACA,EAAAC,kBACA,EAAAC,2BACA,GAAAC,qBACA,GAAAC,mCACA,GAAAC,2BAEA,GAAAC,sBACA,GAAAC,oBAEA,EAAAC,2BACA,GAAAC,oBACA,GAAAC,2BACA,GAAAC,oCACA,EAAAC,sBACA,GAAAC,wBAEA,EAAAC,2BACA,GAAAC,uBACA,GAAAC,aACA,GAAAC,0BACA,GAAAC,uBACA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAA5E,uBACA,GAAA6E,6BACA,GAAAC,oBAEA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,+BACA,GAAAC,qBAEA,GAAAC,yBACA,GAAAC,4BAA0B,qPArD1B,GAAA9C,kBAeA,GAAAe,+BACA,GAAAtD,uB,uZCjKF,aACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEa,EAAAsF,SAAkB,CAC9B,EAAA5F,qBACA,EAAAE,+BACA,EAAAJ,iBACA,EAAAG,UACA,EAAAF,2BACA,EAAAF,WACA,EAAAM,gBACA,EAAAK,6BACA,EAAAJ,aAGD,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,a,2gCC1Ba,EAAAyF,QAAkB,aAE/B,mBAAa,EAAAC,aAMb,iBAKC,WAAYC,EAAcC,EAAuBC,GAKjD,KAAAC,SAAmB,GAJlBC,KAAKJ,KAAOA,EACZI,KAAKH,MAAQA,EACbG,KAAKF,YAAcA,EAOrB,OAHC,YAAAG,SAAA,SAASC,GACRF,KAAKD,SAASI,KAAKD,IAErB,EAfA,GAAa,EAAAE,OAiBb,mBAAa,EAAAC,YAeb,iBAQC,KAAAC,WAAkE,IARtD,EAAAC,gBAeb,mBAAa,EAAAC,OAwBb,iBAMC,WAAmBC,EAA8BH,GAChDN,KAAKS,cAAgBA,EACrBT,KAAKM,WAAaA,EAgDpB,OA7CQ,YAAAI,aAAP,SAAoBC,EAAYC,EAAkBC,GAKjD,IAJA,IAAIC,EAAS,CAAEC,UAAWJ,EAAMK,QAAS,KAAMC,MAAO,MAEhDC,EAAOP,EAAKQ,U,WAETC,GACR,IAAIC,EAAO,EAAKZ,cAAcH,WAAWc,GAEzC,GAAIC,EAAKzB,OAASgB,EAAU,CAK3B,GAJkB,UAAdS,EAAKC,OACRR,EAAOG,MAAQJ,EAASU,UAGrBF,EAAKG,iBACK,EAAKlB,WAAWe,EAAKzB,MAAM6B,OAEjCC,SAAQ,SAAAC,GAEd,IAAMZ,EAAYa,KAAKC,MAAMF,EAAIZ,WAC3BC,EAAUY,KAAKC,MAAMF,EAAIX,SAE3BE,GAAQH,GAAaG,GAAQF,IAEd,UAAdK,EAAKC,KACRR,EAAOG,MAAQa,KAAKD,MAAMC,KAAKC,UAAUJ,EAAIV,QAEvB,SAAdI,EAAKC,MAAgC,MAAbK,EAAIV,OAAiBe,MAAMC,QAAQN,EAAIV,QAAUU,EAAIV,MAAMiB,OAAS,EACpGpB,EAAOG,MAAQU,EAAIV,MAAM,GAGzBH,EAAOG,MAAQU,EAAIV,eAMtBH,EAAOG,MAAQ,EAAKX,WAAWe,EAAKzB,M,uBA/B9BwB,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,SAAUd,EAAG,C,eAAtDA,G,MAsCT,OAAON,GAET,EAxDA,GAAa,EAAAqB,oBA0Db,mBAAa,EAAAC,gBAOb,MAYC,SAAYxC,EAAc0B,EAAczB,EAAuBC,EAA6BuC,EAAoBC,EAAmBC,EAAiBf,GAEnJxB,KAAKJ,KAAOA,EACZI,KAAKsB,KAAOA,EACZtB,KAAKH,MAAQA,EACbG,KAAKF,YAAcA,EACnBE,KAAKqC,UAAYA,EACjBrC,KAAKsC,UAAW,EAChBtC,KAAKuC,OAASA,EACdvC,KAAKwB,iBAAmBA,GArBb,EAAAgB,YA0Bb,kBAGC,WAAY5C,EAAc0B,EAAczB,EAAuBC,EAA6BuC,EAAoBC,EAAmBC,EAAiBE,GAApJ,MACC,YAAM7C,EAAM0B,EAAMzB,EAAOC,EAAauC,EAAWC,EAAUC,EAAQE,IAAS,K,OAG7E,EAAAC,SAAiB,IAAItC,EAAK,KAAM,KAAM,MAEtC,EAAAuC,YAAsB,G,EAKvB,OAdmC,OAWlC,YAAAC,YAAA,SAAY1C,GACXF,KAAK0C,SAAWxC,GAElB,EAdA,CAAmCsC,GAAtB,EAAAK,gBAgBb,kBACC,WAAYjD,EAAc0B,EAAczB,EAAuBC,EAA6BuC,EAAoBC,EAAmBC,EAAiBE,GAApJ,MACC,YAAM7C,EAAM0B,EAAMzB,EAAOC,EAAauC,EAAWC,EAAUC,EAAQE,IAAS,K,OAE5E,EAAKK,UAAY,GACjB,EAAKC,MAAQ,E,EAEf,OAPsC,OAOtC,EAPA,CAAsCP,GAAzB,EAAAQ,mBASb,SAAYC,GACX,uCACA,iCACA,qCACA,wCACA,oCACA,+CAND,CAAY,EAAAA,2BAAA,EAAAA,yBAAwB,KASpC,mBAAa,EAAAC,WAKb,+B,+CAEA,OAFmC,OAEnC,EAFA,CAAmCA,GAAtB,EAAAC,gBAIb,+B,+CAEA,OAFoC,OAEpC,EAFA,CAAoCD,GAAvB,EAAAE,iBAIb,mBAAa,EAAAC,gCAMb,mBAAa,EAAAC,iBAOb,mBAAa,EAAAC,uBAcb,+B,+CAMA,OANkC,OAMlC,EANA,CAAkCA,GAArB,EAAAC,eAQb,+B,+CAEA,OAF0C,OAE1C,EAFA,CAA0CA,GAA7B,EAAAC,uBASb,mBAAa,EAAAC,cASb,mBAAa,EAAAC,kBAMb,mBAAa,EAAAC,2BAKb,mBAAa,EAAAC,oBAMb,mBAAa,EAAAC,aAIb,mBAAa,EAAAC,OAOb,mBAAa,EAAAC,aA6Bb,mBAAa,EAAAC,oBAiBb,mBAAa,EAAAC,oBAcb,SAAYC,GACX,kCACA,sBACA,4BAHD,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAM1B,mBAAa,EAAAC,kBAgBb,mBAAa,EAAAC,wBAWb,mBAAa,EAAAC,cAOb,+B,+CAEA,OAFwC,OAExC,EAFA,CAAwCf,GAA3B,EAAAgB,qBAIb,mBAAa,EAAAC,eAOb,mBAAa,EAAAC,qB,qMC3Zb,mBAAa,EAAAC,cAUb,mBAAa,EAAAC,WAOb,mBAAa,EAAAvE,OAKb,mBAAa,EAAAwE,cAUb,mBAAa,EAAAC,kBAUb,mBAAa,EAAAC,YAKb,mBAAa,EAAAC,UAMb,mBAAa,EAAAC,uB,0HCvDb,SACA,Q,OAIA,aAOC,aAHQ,KAAAC,wBAA0B,IAAI,EAAAC,QACtC,KAAAC,gBAAkBnF,KAAKiF,wBAAwBG,e,OAIxC,YAAAC,cAAP,WACC,OAAOrF,KAAKsF,YAGN,YAAAC,cAAP,SAAqBC,GACpBxF,KAAKsF,WAAaE,EAElBxF,KAAKiF,wBAAwBQ,KAAKzF,KAAKsF,a,iCAf5BvL,I,oCAAAA,EAA8B,QAA9BA,EAA8B,O,EAD3C,GACa,EAAAA,kC,4GCab,SACA,QAEA,Q,GAIA,M,sBAIA,aAGC,WAAoB2L,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAC,kBAAA,SAAkBC,GACjB,IAAIC,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,QAASlE,KAAKC,UAAU8D,IAErC7F,KAAK0F,KACVO,IAAqBC,IAAM,6BAA8B,CAAEJ,OAAQA,IACnEK,aAGH,YAAAC,oBAAA,SAAoBC,EAAuBC,EAAiCC,GAA5E,WAEKC,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,yBAA0BpE,KAAKC,UAAU,CAAEsE,cAAeA,EAAeC,wBAAyBA,EAAyBC,uBAAwBA,IAA2B,CAAEC,QAASA,IACnNI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAY,mBAAA,SAAmBV,EAAuBC,EAAiCU,EAAiCC,GAA5G,WAEKT,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,gCAAiCpE,KAAKC,UAAU,CAAEsE,cAAeA,EAAeC,wBAAyBA,EAAyBU,wBAAyBA,EAAyBC,0BAA2BA,IAA8B,CAAET,QAASA,IAClRI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAe,oBAAA,SAAoBb,EAAuBC,EAAiCC,GAA5E,WAEKC,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,4BAA6BpE,KAAKC,UAAU,CAAEsE,cAAeA,EAAeC,wBAAyBA,EAAyBC,uBAAwBA,IAA2B,CAAEC,QAASA,IACtNI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAgB,oBAAA,SAAoBC,GAApB,WAEKZ,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,4BAA6BpE,KAAKC,UAAU,CAAE,OAAUqF,IAAW,CAAEZ,QAASA,IACxGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAkB,oBAAA,SAAoBD,GAApB,WAEKZ,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,4BAA6BpE,KAAKC,UAAU,CAAE,OAAUqF,IAAW,CAAEZ,QAASA,IACxGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAmB,oBAAA,SAAoB1H,GAApB,WAEK4G,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAiBT,IAAM,4BAA6B,CAAE,KAAQtG,GAAQ,CAAE4G,QAASA,IACjFI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAoB,sBAAA,SAAsBC,EAA2BC,EAAoCC,GAArF,WAEKlB,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,0BAA2BpE,KAAKC,UAAU,CAAE,kBAAqByF,EAAmB,2BAA8BC,EAA4B,kBAAqBC,IAAsB,CAAElB,QAASA,IAC9NI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAwB,yBAAA,SAAyBH,EAA2BE,GAApD,WAEKlB,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,6BAA8BpE,KAAKC,UAAU,CAAE,kBAAqByF,EAAmB,kBAAqBE,IAAsB,CAAElB,QAASA,IACvKI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,a,iCA1ISxM,GAAgB,sD,oCAAhBA,EAAgB,QAAhBA,EAAgB,O,EAD7B,GACa,EAAAA,oB,mHC/Bb,WACA,O,GASA,OACA,O,6HCIE,uCAA4C,+GAAwE,iB,gCAAxE,+C,mDAG5C,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,6BACE,+BAAmB,+GAAnB,iBACF,iBACF,iBACF,iB,gCAHyB,8D,mDAKzB,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,6BACE,+BAAmB,2GAAnB,iBACF,iBACF,iBACF,iB,gCAHyB,0DDtB3B,iBA6BC,WAAoBiO,EAA4CC,GAA5C,KAAAD,mBAA4C,KAAAC,MAVvD,KAAAC,kBAA4B,EAC5B,KAAAC,oBAA8B,EAC9B,KAAAC,WAAqB,EAGpB,KAAAC,gBAAkB,IAAI,EAAAC,aAChC,KAAAC,QAAkB,KAElB,KAAA3C,MAAgB,O,OAKhB,YAAA4C,SAAA,aAIA,YAAAC,gBAAA,WACCrI,KAAKwF,MAAQ,OACbxF,KAAK6H,IAAIS,iBAGV,YAAAC,YAAA,aAIA,YAAAC,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAC,eAAA,WACC1I,KAAK2I,UAAUpG,QAAUvC,KAAK2I,UAAUpG,QAGzC,YAAAqG,QAAA,WACC5I,KAAKwF,MAAQ,QAGd,YAAAqD,gBAAA,SAAgBC,GACf9I,KAAKwF,MAAQ,QAGd,YAAAuD,QAAA,WACC,QAAI/I,KAAK2I,UAAU/I,QAGwB,IAAtCI,KAAK2I,UAAU/I,KAAKoJ,QAAQ,OAI0B,IAAtDhJ,KAAK2I,UAAU9I,MAAMoJ,aAAa,GAAGhI,MAAMiB,SAI3ClC,KAAKgI,WACRkB,QAAQC,IAAInJ,KAAK2I,aAGd3I,KAAKgI,WAA0C,MAA5BhI,KAAK2I,UAAU7F,WAA4D,IAAvC9C,KAAK2I,UAAU7F,UAAUsG,eAIhFpJ,KAAKgI,WAAsC,MAAxBhI,KAAK2I,UAAU5F,OAAoD,IAAnC/C,KAAK2I,UAAU5F,MAAMqG,gB,iCApElEtM,GAAuB,mF,iCAAvBA,EAAuB,khCClCpC,0BACE,4BACE,4BACE,4BACE,4BACF,iBACF,iBACA,4BACE,6BACE,8BAA2D,uEAA3D,iBACF,iBACF,iBACF,iBAEA,wCAAiB,sEAA4D,iBAC7E,yCAGA,+BAaA,+BAYF,kB,MAlCqC,2DAA6B,4BAK/C,uDACD,0DAGQ,gDAaA,kD,+eDVb,CACX,EAAAuM,QAAQ,eAAgB,CACvB,EAAA7D,MAAM,aACL,EAAA8D,MAAM,CAAE,QAAW,KAEpB,EAAA9D,MAAM,OACL,EAAA8D,MAAM,CAAE,QAAW,KAEpB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,gB,EAZtC,GAiBa,EAAA9L,2B,iHElCb,KACA,MADA,IAEA,QAMA,GAFA,OAEA,Q,GACA,M,+ECRI,6BAAqE,YAAW,kB,6BAAX,+C,sBAGjE,yBACI,6BACJ,kB,yBACA,yBACI,YACA,6BACJ,kB,6BAFI,mF,mDAQA,4BACI,4BACI,4BAAQ,6BAA6C,YACrD,iBACJ,iBACA,6BACI,+BAAO,2FAAP,iBACJ,iBACJ,iB,8CAN6D,wDAI9C,+CAA+B,yBAA/B,CAA+B,sBAA/B,CAA+B,wC,yBAWlC,gCAAuD,YAAc,kB,uBAAlC,6BAAoB,6C,mDARnE,4BACI,4BACI,+BAAuB,6BACvB,iBACJ,iBACA,6BACI,gCAA0D,2GAA6B,iFACnF,wBACA,kCACJ,iBACJ,iBACJ,iB,gCALkE,yDAE9C,gD,sBAwBZ,+BAAuE,6BAAuD,kB,sBAmKtI,4BACI,uBACA,6BACI,6BACJ,iBACJ,kB,2GAQY,6BAGI,6BAGI,6BAAK,kHAAiC,KAAO,EAAH,wBACtC,sBACJ,iBAEA,+BAAiC,YAAgB,iBAGrD,iBAGJ,iB,+CAVyF,4FAIhD,6C,yBAhBrD,0BACI,4BACI,4BACI,4BAAQ,YAAoB,iBAChC,iBACA,6BACI,+BAiBJ,iBACJ,iBACJ,kB,uBAtBoB,qDAGS,kD,mDA2BjB,6BAGI,6BAGI,6BAAK,kHAAiC,KAAO,EAAH,wBACtC,sBACJ,iBAEA,+BAAiC,YAAmB,iBACxD,iBACJ,iB,+CAN+F,4FAItD,6C,yBAhBrD,0BACI,4BACI,4BACI,4BAAQ,6BAA0D,iBACtE,iBACA,6BACI,+BAaJ,iBACJ,iBACJ,kB,6BAf6B,oE,mDAwBjB,gCAAwC,2FACpC,6BACJ,iB,iDAFmG,oCDjR3H,iBAgCC,WAAoB0M,EAAkCC,EAA6B5I,EAAsC6I,EAAgCC,GAArI,KAAAH,UAAkC,KAAAC,WAA6B,KAAA5I,WAAsC,KAAA6I,aAAgC,KAAAC,cA1BzJ,KAAAxB,QAAkB,KAiBlB,KAAAyB,UAAoB,EAKpB,KAAAC,MAAgB,EAEhB,KAAAC,OAAiB,E,OAIjB,YAAA1B,SAAA,sBAECpI,KAAK+J,mBAAqB,IAAI,EAAA7E,QAEX,MAAflF,KAAKgK,QAAmBhK,KAAK4J,WAChC5J,KAAKyJ,SAASQ,oBAAmB,GAAMC,MAAK,SAAArE,GAG3C,IADA,IAAIsE,EAAa,GACR/I,EAAI,EAAGA,EAAIyE,EAAM3D,SAAUd,EAAG,CACtC,IAAMgJ,EAAUvE,EAAMzE,GAAGgJ,QACnBC,EAAqC,MAA1BxE,EAAMzE,GAAGkJ,cAAwBzE,EAAMzE,GAAGkJ,cAAgBzE,EAAMzE,GAAGxB,KAEhF,EAAK+J,YAAYY,kBAAkBH,EAASC,IAC/CF,EAAWhK,KAAK0F,EAAMzE,IAGxB,EAAKyE,MAAQsE,KAEXK,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZzK,KAAKgK,OAAS,CACbW,IAAK,KACLN,SAAU,GACVO,aAAc5K,KAAKa,SAASU,SAC5B3B,KAAM,GACNiL,qBAAsB,KACtBC,oBAAqB,KACrBC,YAAa,KACbC,aAAc,GACdC,QAAS,GACTC,SAAU,GACVC,kBAAmB,GACnBC,eAAgB,GAChBC,iBAAkB,GAClBC,WAAY,GACZC,YAAa,GACbC,aAAc,GACdC,gBAAiB,GACjBC,MAAO,GACPC,YAAa,GACbC,mBAAoB,GACpBC,MAAM,EACNC,UAAW,SACXC,SAAU,KACVC,WAAY,QAKf,YAAAC,KAAA,SAAKC,GACJlM,KAAKgK,OAAOwB,aAAeU,EAAIvB,KAGhC,YAAAwB,cAAA,SAAcrD,GAEb,IADA,IAAIsD,EAAYtD,EAAMuD,OAAOC,UACpBlL,EAAI,EAAGA,EAAIgL,EAAUlK,OAAQd,IAAK,CAE1C,GAAU,aADFgL,EAAUhL,GAEjB,OAAO,EAIT,OAAO,GAGR,YAAAmL,SAAA,sBAE6B,MAAxBvM,KAAKgK,OAAOK,UAAoBrK,KAAKgK,OAAOK,SAASnI,OAAS,GACjElC,KAAKyJ,SAAS+C,sBAAsBxM,KAAKgK,OAAOK,UAAU,GAAMH,MAAK,SAAAyB,GACpE,EAAK3B,OAAO2B,YAAcA,KACxBnB,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZzK,KAAKyJ,SAASgD,0BAA0BzM,KAAKgK,OAAOK,UAAU,GAAOH,MAAK,SAAAyB,GACzE,EAAK3B,OAAO4B,mBAAqBD,KAC/BnB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIZzK,KAAKgK,OAAO2B,YAAc,IAI5B,YAAAe,SAAA,sBACC1M,KAAKwJ,QAAQmD,iBAAiB3M,KAAKgK,QAAQE,MAAK,SAAA0C,GAE/C,EAAK7C,mBAAmBtE,KAAKmH,GAC7B,EAAKlD,WAAWmD,UACdrC,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAqC,SAAA,WACC9M,KAAK0J,WAAWmD,QAGjB,YAAAnC,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAnIrClM,GAAqB,0L,iCAArBA,EAAqB,8iH,GAAA,MChBlC,4BACI,8BAEA,4BACI,6BAGA,6BAIJ,iBAEA,+BAEI,+BACI,8BASA,8BAYA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,oEAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BAAyD,iBACrE,iBACA,8BACI,oCAA6C,yEACzC,yBACA,iCAAuB,8BAAwD,iBAC/E,iCAAwB,8BAAyD,iBACjF,iCAAwB,8BAAyD,iBACrF,iBACA,kCACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,mFAAP,iBACJ,iBACJ,iBAEA,6BACI,6BACI,6BAAO,8BAAiD,iBAC5D,iBACA,8BACI,iCAA8C,0EAC1C,yBACA,iCAAuB,8BAA6C,iBACpE,iCAAwB,8BAA8C,iBAC1E,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BAAgD,iBAC5D,iBACA,8BACI,8BACI,8BAEI,8BAAK,yCAAS,EAAA4N,cAAA,GAAwB,KAAO,EAAH,sCACtC,uBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAyBA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,4EAAiG,iBAC/G,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,uEAAuF,iBACrG,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,wEAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,iFAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,8EAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,gFAAyG,iBACvH,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,0EAA6F,iBAC3G,iBACJ,iBAEA,6BACI,yBACA,+BACI,+BACJ,iBACJ,iBAEA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,2EAAP,iBACJ,iBACJ,iBACA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,+EAAP,iBACJ,iBACJ,iBACA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,qEAAP,iBACJ,iBACJ,iBAEA,gCAOA,iCA2BA,gCAuBA,8BACI,yBACA,+BACI,+BACI,kCAAsB,wCAAS,EAAAW,cAC3B,+BACJ,iBACA,oCAGJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,6BArSS,oDAGG,4CAGA,6CASwB,0EASA,mEAkBT,qDAAyB,+BAQa,0DAA8B,uBAMpE,oDASA,oEAAwC,uBASD,2DAA+B,uBAe4B,qGAqC/F,6DAAiC,uBASjC,wDAA4B,uBAS/B,yDAA6B,uBAS7B,kEAAsC,uBAStC,+DAAmC,uBAShC,iEAAqC,uBASrC,2DAA+B,uBAiBlC,6DAAgC,uBAShC,gEAAoC,uBASpC,sDAA0B,uBAIjB,kEAOnB,4DA2BA,yEA4BqB,oEAEN,kD,ySDjRhC,GAKa,EAAAvO,yB,mHEhBb,W,GACA,O,gFCDA,4BACE,4BACE,4BACE,4BACA,YACF,iBACF,iBACA,4BACE,6BACE,8BAAO,2FAAP,iBACF,iBACF,iBACF,iB,8CATgB,yCACV,wDAKO,+CAA+B,yBAA/B,CAA+B,sBAA/B,CAA+B,wCDN5C,iBAWI,aALgB,KAAA0O,IAAc,GAEd,KAAAC,UAAoB,EACnB,KAAAC,YAAc,IAAI,EAAAjF,a,wCAJ1B/K,I,iCAAAA,EAAuB,wXCRpC,8B,KAAwB,8C,sIDGxB,GAKa,EAAAA,2B,mIERb,WAGA,GAFA,MAEA,MAEA,SAGA,GAFA,MAEA,QAEA,SAEA,S,+HCM8C,2BACE,6BACF,kB,sBACA,2BACE,6BACF,kB,yBACA,2BACE,YACF,kB,wCADE,qE,yBAGF,2BACE,YACF,kB,6DADE,sI,yBAbJ,yBAEE,+BAGA,+BAGA,+BAIA,+BAGF,kB,4DAbQ,oDAGA,4DAGA,6EAIA,8I,yBAON,2BACE,YACF,kB,6DADE,sI,yBAHJ,yBACE,6BACA,+BAGF,kB,4DAHQ,8I,mDAON,+BAAyC,4JAA6C,0FAAtF,iB,gEAA2H,gDAAuB,kDAAzG,uDAA6C,sB,yBADxF,0BACE,iCACF,kB,8BADS,qD,wBAIP,0B,6DAA2F,gDAAuB,kDAAzE,8D,yBAEzC,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,yBAJpE,0BACE,iCAEA,6BAIF,kB,4DANS,oDAEiB,oE,yBAYpB,2BACE,6BAAgE,YAClE,kB,uFADkE,wG,yBALpE,4BACE,yBAAI,YAAsB,iBAC1B,0BAEA,6BAGF,kB,qFANM,6CACY,mEAAmD,kBAAnD,CAAmD,mCAE3C,oL,yBAL5B,2BACE,8BAQF,kB,6DAR8B,0F,yBAFhC,0BACE,8BAUF,kB,4DAVyB,gF,yBAerB,2BACE,6BAAgE,Y,mBAClE,kB,6DADkE,qG,yBAJtE,0BACI,0B,mBAEA,6BAIJ,kB,4DAN6F,+DAAuB,kDAA7F,6FAEK,qE,yBAiBxB,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,yBAZtE,0BACI,4BACI,0BACA,6BACJ,iBAEA,4BACI,0BACA,6BACJ,iBAEA,6BAIJ,kB,4DAbsG,oEAA4B,uDAAtG,6DAAiD,YAK2B,qEAA6B,wDAAzG,8DAAkD,YAIlD,qE,yBAUxB,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,mDALtE,0BACI,+BAA8B,iKAA9B,iBAGA,6BAIJ,iB,+DANQ,+DAAuB,kDADG,6DAGN,qE,yBASxB,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,mDAJtE,0BACI,+BAAqB,iKAArB,iBAEA,6BAIJ,iB,+DANsF,+DAAuB,kDAApF,6DAEG,qE,yBASpB,gCAAsG,YAA+B,kB,uBAAtD,6BAAuB,4D,yBAM1G,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,mDAVtE,0BACI,gCAA8G,iKAC1G,2BACA,kCACJ,iBAKA,6BAIJ,iB,+DAZY,+DAAuB,uDAA+E,6DAElG,sFAMY,2I,mDAM5B,0BACE,iDAOE,kHAEF,iBACF,iB,iCATI,yEAAgD,cAAhD,CAAgD,6FAAhD,CAAgD,gGAAhD,CAAgD,0CAAhD,CAAgD,gCAAhD,CAAgD,mD,mDAWpD,6BACE,gCAA+B,gJAC7B,6BACF,iBACF,kB,yBAjIJ,4BACI,6BAiBA,6BAQA,8BAIA,8BASA,8BAaA,8BASA,8BAiBA,8BAUA,8BASA,+BAeA,+BAaA,gCAKJ,kB,4CAjIQ,wDAiBA,wDAQC,oDAIA,0EASA,qDAaA,oDASA,uDAiBA,qDAUA,uDASA,oDAeA,6EAaA,wD,yBAxIjC,4BAMI,4BACI,wBACI,4BACI,4BACI,2BACI,gC,+CAmIJ,iBACJ,iBACJ,iBACR,iBACH,kB,8BAvIoG,mH,mDAwIpG,0BAME,6BACE,iDAOE,kHAEF,iBACF,iBACF,iB,iCAVM,yEAAgD,cAAhD,CAAgD,6FAAhD,CAAgD,gGAAhD,CAAgD,0CAAhD,CAAgD,gCAAhD,CAAgD,mD,yBA5J3D,0BACI,8BAmJC,8BAmBN,kB,6BAtKU,2DAmJC,iFDxItB,iBA4DC,WAAoBiQ,EAAsCvM,GAAtC,KAAAuM,eAAsC,KAAAvM,WAtCjD,KAAAwM,aAAkC,KAKlC,KAAAC,cAAmC,KAG5C,KAAAC,oBAA2B,GAE3B,KAAAC,qBAA4B,GAInB,KAAAC,kBAA8B,GAE9B,KAAAC,QAAgB,IAAI9L,KAEpB,KAAA+L,UAAoB,EAEpB,KAAA7D,OAAiB,EAEjB,KAAA8D,qBAAsB,EAEtB,KAAAC,mBAAoB,EAInB,KAAAC,MAAQ,IAAI,EAAA5F,aAEtB,KAAA6F,mBAA2B,KAC3B,KAAAC,kBAA0B,KAC1B,KAAAjF,SAAmB,EAEnB,KAAAkF,2BAAuC,CAAC,MAAO,WAAY,OAAQ,iBAAkB,c,OAQrF,YAAA7F,SAAA,WAE+B,MAA1BpI,KAAKyN,oBACRzN,KAAKiO,2BAA2B9N,KAAK+N,MAAMlO,KAAKiO,2BAA4BjO,KAAKyN,mBAE5EzN,KAAK6N,mBACT7N,KAAKiO,2BAA2B9N,KAAK,aAKvC,IADA,IAAIgO,EAAW,KACN/M,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,SAAUd,EACb,aAA1CpB,KAAKS,cAAcH,WAAWc,GAAGxB,OACpCuO,EAAWnO,KAAKS,cAAcH,WAAWc,IAG3C,GAAgB,MAAZ+M,EAAkB,CACrB,IAAIC,EAAsB,IAAI,EAAA5L,UAAU,WAAY,WAAY,IAAI,EAAA6L,eAAe,WAAY,MAAO,IAAI,EAAAA,eAAe,WAAY,OAAO,GAAM,GAAO,GAAO,GAChKrO,KAAKS,cAAcH,WAAWH,KAAKiO,KAIrC,YAAA/F,gBAAA,sBACCrI,KAAKsO,cAAcC,cAAcC,WAAU,SAAAC,GAC1C,EAAK1F,QAAsB,UAAX0F,GAAiC,aAAXA,EAEtC,EAAKX,MAAMY,KAAK,EAAK3F,aAIvB,YAAAR,YAAA,SAAYoG,GACPA,EAAsB,cAAKA,EAAsB,cAEpD3O,KAAKqN,aAAe,IAAI,EAAAlL,kBAAkBnC,KAAKS,cAAeqB,KAAKD,MAAMC,KAAKC,UAAU/B,KAAKqN,eAAe/M,YAElF,MAAtBN,KAAKsN,cACRtN,KAAKsN,cAAgB,IAAI,EAAAnL,kBAAkBnC,KAAKS,cAAeqB,KAAKD,MAAMC,KAAKC,UAAU/B,KAAKqN,eAAe/M,YAG7GN,KAAKsN,cAAgB,IAAI,EAAAnL,kBAAkBnC,KAAKS,cAAeqB,KAAKD,MAAMC,KAAKC,UAAU/B,KAAKsN,gBAAgBhN,YAG/GN,KAAK4O,aAEGD,EAAiB,SACzB3O,KAAK4O,aAIP,YAAAA,UAAA,WACC5O,KAAKuN,oBAAsBvN,KAAK6O,iBAAiB7O,KAAKqN,cACtDrN,KAAKwN,qBAAuBxN,KAAK6O,iBAAiB7O,KAAKsN,eAE5B,MAAvBtN,KAAK8O,gBACR9O,KAAK8O,eAAeC,UAItB,YAAAF,iBAAA,SAAiBG,GAKhB,IALD,WACOC,EAAS,GAET/N,EAAOlB,KAAK0N,QAAQvM,U,WAEjBC,GACR,IAAIC,EAAO,EAAKZ,cAAcH,WAAWc,IACzC6N,EAAO5N,EAAKzB,MAAQ,KAEF,UAAdyB,EAAKC,OACR2N,EAAO5N,EAAKzB,MAAQ,EAAKiB,SAASU,UAG/BF,EAAKG,kBACKwN,EAAK1O,WAAWe,EAAKzB,MAAM6B,OAEjCC,SAAQ,SAAAC,GAEd,IAAMZ,EAAYa,KAAKC,MAAMF,EAAIZ,WAC3BC,EAAUY,KAAKC,MAAMF,EAAIX,SAE3BE,GAAQH,GAAaG,GAAQF,IAEd,UAAdK,EAAKC,KACR2N,EAAO5N,EAAKzB,MAAQ,CACnBmB,UAAW,EAAKmO,WAAWvN,EAAIZ,WAC/BC,QAAS,EAAKkO,WAAWvN,EAAIX,SAC7BC,MAAOa,KAAKD,MAAMC,KAAKC,UAAUJ,EAAIV,SAGhB,SAAdI,EAAKC,MAAgC,MAAbK,EAAIV,OAAiBe,MAAMC,QAAQN,EAAIV,QAAUU,EAAIV,MAAMiB,OAAS,EACpG+M,EAAO5N,EAAKzB,MAAQ,CACnBmB,UAAW,EAAKmO,WAAWvN,EAAIZ,WAC/BC,QAAS,EAAKkO,WAAWvN,EAAIX,SAC7BC,MAAOU,EAAIV,MAAM,IAIlBgO,EAAO5N,EAAKzB,MAAQ,CACnBmB,UAAW,EAAKmO,WAAWvN,EAAIZ,WAC/BC,QAAS,EAAKkO,WAAWvN,EAAIX,SAC7BC,MAAOU,EAAIV,WAOfgO,EAAO5N,EAAKzB,MAAQoP,EAAK1O,WAAWe,EAAKzB,O,OA3ClCwB,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,SAAUd,E,EAAnDA,GA+CT,IAASA,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,SAAUd,EAAG,CAC9D,IAAIC,EAAOrB,KAAKS,cAAcH,WAAWc,GAErCC,EAAKG,kBAAyC,MAArByN,EAAO5N,EAAKzB,QACxCqP,EAAO5N,EAAKzB,MAAQ,CACnBmB,UAAW,KACXC,QAAS,KACTC,MAAO,KAKV,OAAOgO,GAGR,YAAAC,WAAA,SAAWvO,GACV,OAAIA,IAAS,EAAAjB,QACLM,KAAKa,SAASsO,SAAS,iBAAkB,WAG1CxO,GAGR,YAAAyO,iBAAA,SAAiBC,GAChBrP,KAAKsN,cAAchN,WAAWV,KAAOI,KAAKwN,qBAA2B,MAMtE,YAAA8B,0BAAA,SAA0B3G,GAA1B,WACC3I,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAjS,6BAA8B,CACtEkS,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAItB1P,KAAK0J,WAAWiG,QAAQC,kBAAoB5P,KAAKsN,cACjDtN,KAAK0J,WAAWiG,QAAQlP,cAAgBT,KAAKS,cAC7CT,KAAK0J,WAAWiG,QAAQE,eAAiB7P,KAAK8J,MAC9C9J,KAAK0J,WAAWiG,QAAQhH,UAAYA,EACpC3I,KAAK0J,WAAWiG,QAAQG,yBAAyBtB,WAAU,SAAAuB,GAC1D,EAAKnB,eAEN5O,KAAK0J,WAAWiG,QAAQK,UAGzB,YAAAC,yBAAA,WAEC,IADA,IAAI7B,EAAW,KACNhN,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,SAAUd,EACb,aAA1CpB,KAAKS,cAAcH,WAAWc,GAAGxB,OACpCwO,EAAWpO,KAAKS,cAAcH,WAAWc,IAI3CpB,KAAKsP,0BAA0BlB,IAGhC,YAAA8B,gBAAA,SAAgBvH,GACf,OAAiD,MAA7C3I,KAAKwN,qBAAqB7E,EAAU/I,OAA6D,MAA5CI,KAAKuN,oBAAoB5E,EAAU/I,OAIpFI,KAAKwN,qBAAqB7E,EAAU/I,MAAMqB,OAASjB,KAAKwN,qBAAqB7E,EAAU/I,MAAMqB,MAAMkP,SAAWnQ,KAAKuN,oBAAoB5E,EAAU/I,MAAMqB,OAGhK,YAAAmP,iBAAA,SAAiBzH,GAChB,OAAiD,MAA7C3I,KAAKwN,qBAAqB7E,EAAU/I,OAA6D,MAA5CI,KAAKuN,oBAAoB5E,EAAU/I,OAIpFI,KAAKwN,qBAAqB7E,EAAU/I,MAAMqB,OAASjB,KAAKwN,qBAAqB7E,EAAU/I,MAAMqB,QAAUjB,KAAKuN,oBAAoB5E,EAAU/I,MAAMqB,OAGzJ,YAAAoP,uBAAA,SAAuBvH,EAAYwH,GAClCtQ,KAAKgO,kBAAoBlM,KAAKD,MAAMC,KAAKC,UAAU/B,KAAK+N,sBAGzD,YAAAwC,qCAAA,SAAqCC,GACpC,IAAK,IAAIpP,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,OAAQd,IAAK,CAC9D,IAAIC,EAAYrB,KAAKS,cAAcH,WAAWc,GAE9C,GAAkB,SAAdC,EAAKC,MAAmBD,EAAKzB,OAAS4Q,EAAmB,CAG5D,IAAIC,GADJpP,EAAsBA,GACFqB,SAAS3C,SAE7B,MAAkB,WAAdsB,EAAKzB,KACD,UAAM8Q,eAAeD,GAGrBA,GAKV,OAAO,MAGR,YAAAE,gBAAA,SAAgBhK,EAAMiK,GAErB,GAAW,MAAPA,GAAuB,MAARjK,EAClB,OAAO,EAGR,GAAW,MAAPiK,GAAuB,MAARjK,GAA8B,GAAdiK,EAAI1O,QAA8B,GAAfyE,EAAKzE,OAC1D,OAAO,EAGR,IAAI2O,EAAaD,EACb5O,MAAMC,QAAQ2O,KACjBC,EAAaD,EAAI,IAGlB,IAAIE,EAAcnK,EAKlB,OAJI3E,MAAMC,QAAQ0E,KACjBmK,EAAcnK,EAAK,IAGbkK,IAAeC,GAGvB,YAAAC,kBAAA,SAAkB9D,GAKjB,IAAK,IAAI7L,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,OAAQd,IAAK,CAC9D,IAAIC,EAAOrB,KAAKS,cAAcH,WAAWc,GAEzC,GAAIC,EAAKzB,OAASqN,EACjB,OAAO5L,EAAKC,KAId,OAAO,MAGD,YAAA0P,WAAP,WACC,OAAOhR,KAAK+I,SAGN,YAAAkI,aAAP,WACC,OAAOjR,KAAKsN,e,iCA/SDjQ,GAAuC,mF,iCAAvCA,EAAuC,0E,OAAA,M,mfAXxC,CAAC,EAAAnD,WAAS,u/DCnBtB,+BACI,+BAEQ,8BAyKR,iBACJ,kB,MA1KiB,qD,m5BDYjB,GAea,EAAAmD,2C,kHE9Bb,W,GACA,O,gFCDA,4BACE,4BACE,4BACE,4BACA,YACF,iBACF,iBACA,4BACE,6BACE,iCAAU,2FAAmG,iBAC/G,iBACF,iBACF,iB,8CATgB,yCACV,wDAKU,+CAA+B,sBAA/B,CAA+B,iCDN/C,iBAWI,aALgB,KAAA4P,IAAc,GAEd,KAAAC,UAAoB,EACnB,KAAAC,YAAc,IAAI,EAAAjF,a,wCAJ1B9K,I,iCAAAA,EAAsB,6UCRnC,8B,KAAwB,8C,kHDGxB,GAKa,EAAAA,0B,gHERb,SACA,QACA,Q,GAGA,M,sBAKA,aAGI,WAAqBsI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAEhD,YAAAuL,cAAA,SAAeC,GAAf,WACSrL,EAAqB,IAAI,EAAAC,WAQ7B,OANkB,MAAboL,IACDrL,EAASA,EAAOE,IAAK,YAAamL,IAGtCnR,KAAK2F,aAAae,QAEX1G,KAAK0F,KACPO,IAAuBC,IAAM,+BAAgC,CAAEJ,OAAQA,IAChFc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aA0BT,YAAAiL,YAAA,SAAaC,GAAb,WACQ7K,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACPiB,KAAYT,IAAM,6BAA8BpE,KAAKC,UAAW,CAAEsP,OAAQA,IAAY,CAAE7K,QAASA,IAC1GI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGZ,YAAAmL,4BAAA,SAA6BD,GAA7B,WACW7K,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACPiB,KAAYT,IAAM,6CAA8CpE,KAAKC,UAAW,CAAEsP,OAAQA,IAAY,CAAE7K,QAASA,IAC1HI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAIT,YAAAoL,WAAA,SAAYC,GAAZ,WACQhL,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACPiB,KAAYT,IAAM,4BAA6BpE,KAAKC,UAAW,CAAEyP,SAAUA,IAAc,CAAEhL,QAASA,IAC7GI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGT,YAAAsL,aAAA,SAAcD,GAAd,WACQhL,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACPiB,KAAYT,IAAM,8BAA+BpE,KAAKC,UAAW,CAAEyP,SAAUA,IAAc,CAAEhL,QAASA,IAC/GI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGT,YAAAuL,eAAA,SAAeC,GACjB,IAAI7L,EAAqB,IAAI,EAAAC,WAIvB,OAFND,EAASA,EAAOE,IAAI,SAAU2L,GAEjB3R,KAAK0F,KAAKO,IAAsBC,IAAM,kCAAmC,CAAEJ,OAAQA,IACrFK,aAGT,YAAAyL,kBAAA,SAAmBT,GAAnB,WACQrL,EAAqB,IAAI,EAAAC,WAK7B,OAJAD,EAASA,EAAOE,IAAK,YAAamL,GAElCnR,KAAK2F,aAAae,QAEX1G,KAAK0F,KAAKO,IAAoBC,IAAM,qCAAsC,CAAEJ,OAAQA,IAC/Fc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGZ,YAAA0L,qBAAA,SAAsBV,GAAtB,WACW3K,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KAAKiB,KAAqBT,IAAM,wCAAyCpE,KAAKC,UAAW,CAAEoP,UAAWA,IAAe,CAAE3K,QAASA,IAChJI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGT,YAAA2L,QAAA,SAASX,GAAT,WACQ3K,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KAAKiB,KAAqBT,IAAM,iCAAkCpE,KAAKC,UAAW,CAAEoP,UAAWA,IAAe,CAAE3K,QAASA,IACzII,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGT,YAAA4L,iBAAA,SAAkBZ,EAAmBa,GAArC,WACQxL,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KAAKiB,KAAwBT,IAAM,oCAAqCpE,KAAKC,UAAW,CAAEoP,UAAWA,EAAWa,QAASA,IAAa,CAAExL,QAASA,IACjKI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGT,YAAA8L,kBAAA,SAAmBd,EAAmBa,GAAtC,WACQxL,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KAAKiB,KAAwBT,IAAM,qCAAsCpE,KAAKC,UAAW,CAAEoP,UAAWA,EAAWa,QAASA,IAAa,CAAExL,QAASA,IAClKI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,aAGT,YAAA+L,oBAAA,SAAqBF,GAArB,WACQxL,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAGhBX,EAAqB,IAAI,EAAAC,WAK7B,OAJAD,EAASA,EAAOE,IAAK,UAAWgM,GAEhChS,KAAK2F,aAAae,QAEX1G,KAAK0F,KAAKiB,KAAiBT,IAAM,2BAA4B,CAAC8L,QAASA,GAAU,CAAExL,QAASA,IACvGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAETX,a,iCArMAtM,GAAoB,sD,oCAApBA,EAAoB,QAApBA,EAAoB,O,EADjC,GACa,EAAAA,wB,qGCXb,SACA,QACA,Q,GAGA,M,sBAIA,aAGC,WAAoB6L,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAwM,kBAAA,SAAkBC,GAAlB,WACK5L,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAA0BT,IAAM,cAAepE,KAAKC,UAAU,CAAEsQ,KAAMD,IAAkB,CAAE5L,QAASA,IACnGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAmM,aAAA,SAAaF,GAAb,WACK5L,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAWT,IAAM,qBAAsBpE,KAAKC,UAAU,CAAEqQ,cAAeA,IAAkB,CAAE5L,QAASA,IACpGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAoM,gBAAA,SAAgBH,GAAhB,WACK5L,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAA0BT,IAAM,cAAepE,KAAKC,UAAU,CAAEsQ,KAAMD,IAAkB,CAAE5L,QAASA,IACnGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA8D,mBAAA,SAAmBuI,GAClB,IAAI1M,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,uBAAwBwM,EAAqBpJ,YAE1DpJ,KAAK0F,KACVO,IAAwDC,IAAM,gCAAiC,CAAEJ,OAAQA,IACzGK,aAGH,YAAAsM,iBAAA,SAAiB7S,EAAcyG,EAAuBqM,GACrD,IAAI5M,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,gBAAiBK,IACrBL,IAAI,wBAAyB0M,EAAsBtJ,YAE5DpJ,KAAK0F,KACVO,IAAgBC,IAAM,mCAAoC,CAAEJ,OAAQA,IACpEK,aAGH,YAAAqG,sBAAA,SAAsB5M,EAAc+S,GAApC,WACK7M,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,eAAgB2M,EAAavJ,YAEjDpJ,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAAmFC,IAAM,qCAAsC,CAAEJ,OAAQA,IACzIc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAsG,0BAAA,SAA0B7M,EAAc+S,GAAxC,WACK7M,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,eAAgB2M,EAAavJ,YAEjDpJ,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAAmFC,IAAM,6CAA8C,CAAEJ,OAAQA,IACjJc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAyM,wBAAA,SAAwBC,EAAcvR,EAAcwR,EAAgBC,GAEnE,IAAIvM,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CACZ+M,KAAMA,EACNvR,KAAMA,GAQP,OALc,MAAVwR,GAA+B,MAAbC,IACrBjN,EAAOgN,OAASA,EAChBhN,EAAOiN,UAAYD,GAGb9S,KAAK0F,KACViB,KAAUT,IAAM,6BAA8BpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IACjFL,aAGH,YAAA6M,uBAAA,SAAuBC,EAAkBpT,GAAzC,WACK2G,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAcT,IAAM,sCAAuCpE,KAAKC,UAAU,CAAEkR,SAAUA,EAAUpT,MAAOA,IAAU,CAAE2G,QAASA,IAC5HI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA+M,uBAAA,SAAuBC,EAAmBC,GAA1C,WACK5M,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAWT,IAAM,sCAAuCpE,KAAKC,UAAU,CAAEoR,UAAWA,EAAWC,KAAMA,IAAS,CAAE5M,QAASA,IACzHI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAkN,mBAAA,SAAmBC,EAAuBT,EAAcU,GAEvD,IAAIzN,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAOE,IAAI,gBAAiBsN,IACrBtN,IAAI,OAAQ6M,IACZ7M,IAAI,QAASuN,GAEtBvT,KAAK0F,KACVO,IAAmCC,IAAM,qCAAsC,CAAEJ,OAAQA,IACzFK,aAGH,YAAAqN,kBAAA,SAAkBC,EAAsB5T,GACvC,IAAI2G,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbiN,EAAO5R,KAAKC,UAAU,CAAE0R,aAAcA,EAAc5T,MAAOA,IAE/D,OAAOG,KAAK0F,KACViB,KAAcT,IAAM,oCAAqCwN,EAAM,CAAElN,QAASA,IAC1EL,aAGH,YAAAwN,kBAAA,SAAkBR,GACjB,IAAI3M,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbiN,EAAO5R,KAAKC,UAAU,CAAEoR,UAAWA,IAEvC,OAAOnT,KAAK0F,KACViB,KAAWT,IAAM,oCAAqCwN,EAAM,CAAElN,QAASA,IACvEL,aAGH,YAAAyN,WAAA,SAAW/T,EAAeD,EAAciU,GACvC,IAAIrN,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CAAE+N,eAAgBA,EAAgBC,SAAU,CAAEjU,MAAOA,EAAOD,KAAMA,IAE/E,OAAOI,KAAK0F,KACViB,KAAWT,IAAM,6BAA8BpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IAClFL,aAGH,YAAA4N,WAAA,SAAWF,EAAwBG,GAClC,IAAIxN,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGjB,OAAOzG,KAAK0F,KACViB,KAAWT,IAAM,gCAAiCpE,KAAKC,UAAU,CAAE,eAAkB8R,EAAgB,SAAYG,IAAa,CAAExN,QAASA,IACzIL,a,iCA7MSrM,GAAS,sD,oCAATA,EAAS,QAATA,EAAS,O,EADtB,GACa,EAAAA,a,sHCSb,SACA,Q,GAGA,M,sBAMA,aAII,WAAqB4L,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAG/C,YAAAsO,iBAAA,WACI,OAAOjU,KAAK0F,KACPO,IAAoBC,IAAM,yCAC1BC,aAGT,YAAA+N,cAAA,SAAeC,EAAkBC,EAAiBC,GAC9C,IAAIvO,EAAqB,IAAI,EAAAC,WAc7B,OAZiB,MAAZoO,IACDrO,EAASA,EAAOE,IAAK,WAAYmO,IAGrB,MAAXC,IACDtO,EAASA,EAAOE,IAAK,UAAWoO,IAGpB,MAAXC,IACDvO,EAASA,EAAOE,IAAK,UAAWqO,IAG7BrU,KAAK0F,KACPO,IAAWC,IAAM,8BAA+B,CAAEJ,OAAQA,IAC1DK,a,iCA7BAvM,GAA0B,sD,oCAA1BA,EAA0B,QAA1BA,EAA0B,O,EADvC,GACa,EAAAA,8B,sGC9Bb,SACA,QACA,QACA,S,GAGA,M,sBAIA,aAGC,WAAoB8L,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,eAC5C2O,EAAiBC,YAAc,gG,OAGjC,YAAAC,MAAA,SAAMnK,EAAkBhE,EAAuB1F,GAA/C,WAEKmF,EAAqB,IAAI,EAAAC,WAgB7B,OAdgB,MAAZsE,IACHvE,EAASA,EAAOE,IAAI,WAAYqE,IAGZ,MAAjBhE,IACHP,EAASA,EAAOE,IAAI,gBAAiBK,IAG1B,MAAR1F,IACHmF,EAASA,EAAOE,IAAI,OAAQrF,IAG7BX,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAAyBC,IAAM,0BAA2B,CAAEJ,OAAQA,IACpEc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAsO,OAAA,SAAO7U,EAAcyK,EAAkBqK,EAAuBrO,EAAuB1F,GAArF,WACKmF,EAAqB,IAAI,EAAAC,WAkB7B,OAhBAD,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,WAAYqE,GAEpB,MAAR1J,IACHmF,EAASA,EAAOE,IAAI,OAAQrF,IAGR,MAAjB+T,IACH5O,EAASA,EAAOE,IAAI,gBAAiB0O,IAGjB,MAAjBrO,IACHP,EAASA,EAAOE,IAAI,gBAAiBK,IAGtCrG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAAyBC,IAAM,2BAA4B,CAAEJ,OAAQA,IACrEc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,a,iCAxDSzM,GAAU,sD,oCAAVA,EAAU,QAAVA,EAAU,O,EADvB,GACa,EAAAA,c,2GCQb,SACA,QAGA,Q,GAWA,M,sBAKA,aAGC,WAAoBgM,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAsG,KAAA,WACC,OAAOjM,KAAK0F,KAAKO,IAAgHC,IAAM,aACrIC,aAIH,YAAAwO,kBAAA,SAAkB9O,EAAiB8F,GAClC,IAAI7F,EAAqB,IAAI,EAAAC,WAW7B,OARa,MAATF,IACHC,EAASA,EAAOE,IAAI,QAASlE,KAAKC,UAAU8D,KAG1B,MAAf8F,IACH7F,EAASA,EAAOE,IAAI,cAAelE,KAAKC,UAAU4J,KAG5C3L,KAAK0F,KACVO,IAAqBC,IAAM,6BAA8B,CAAEJ,OAAQA,IACnEK,aAGH,YAAAyO,oBAAA,SAAoBC,EAAiBH,EAAuBI,EAAkBC,EAAoBpU,GACjG,IAAImF,EAAqB,IAAI,EAAAC,WAW7B,OANAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,UAAW6O,IACf7O,IAAI,gBAAiB0O,IACrB1O,IAAI,cAAelE,KAAKC,UAAU+S,KAClC9O,IAAI,YAAalE,KAAKC,UAAUgT,IAEpC,MAARpU,IACHmF,EAASA,EAAOE,IAAI,OAAQrF,IAGtBX,KAAK0F,KACVO,IAAoBC,IAAM,uCAAwC,CAAEJ,OAAQA,IAC5EK,aAGH,YAAA6O,mBAAA,SAAmBC,EAAkBC,EAAwBC,EAAoBJ,GAChF,IAAIjP,EAAqB,IAAI,EAAAC,WAO7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,WAAYiP,IAChBjP,IAAI,iBAAkBkP,IACtBlP,IAAI,gBAAiBlE,KAAKC,UAAUoT,KACpCnP,IAAI,YAAalE,KAAKC,UAAUgT,IAEzC/U,KAAK0F,KACVO,IAAmBC,IAAM,6BAA8B,CAAEJ,OAAQA,IACjEK,aAGH,YAAAiP,qBAAA,SAAqB/K,GAArB,WACK7D,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAUT,IAAM,sCAAuCpE,KAAKC,UAAU,CAAE,SAAYsI,IAAa,CAAE7D,QAASA,IAC5GI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAkP,oBAAA,SAAoBC,GAApB,WAEK9O,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,4BAA6BpE,KAAKC,UAAU,CAAE,OAAUuT,IAAW,CAAE9O,QAASA,IACxGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAoP,oBAAA,SAAoBD,GAApB,WACK9O,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAoBT,IAAM,4BAA6BpE,KAAKC,UAAU,CAAE,OAAUuT,IAAW,CAAE9O,QAASA,IACxGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAqP,oBAAA,SAAoB5V,GAApB,WACK4G,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAWT,IAAM,4BAA6BpE,KAAKC,UAAU,CAAEnC,KAAMA,IAAS,CAAE4G,QAASA,IACzFI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAsP,iBAAA,SAAiBC,EAAsB/M,GAAvC,WAEKnC,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAgBT,IAAM,kCAAmCpE,KAAKC,UAAU,CAAE,aAAgB2T,EAAc,cAAiB/M,IAAc,CAAEnC,QAASA,IAClJI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAwP,oBAAA,SAAoBD,EAAsB/M,GAA1C,WAEKnC,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzG,KAAK2F,aAAae,QAGX1G,KAAK0F,KACViB,KAAgBT,IAAM,qCAAsCpE,KAAKC,UAAU,CAAE,aAAgB2T,EAAc,cAAiB/M,IAAc,CAAEnC,QAASA,IACrJI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAyP,oBAAA,SAAoBF,EAAsBG,GAA1C,WAEKrP,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzG,KAAK2F,aAAae,QAGX1G,KAAK0F,KACViB,KAAcT,IAAM,qCAAsCpE,KAAKC,UAAU,CAAE,aAAgB2T,EAAc,cAAiBG,IAAkB,CAAErP,QAASA,IACvJI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA2P,2BAAA,SAA2BjC,EAAwB3T,GAAnD,WAEKsG,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzG,KAAK2F,aAAae,QAGX1G,KAAK0F,KACViB,KAAWT,IAAM,6BAA8BpE,KAAKC,UAAU,CAAE,eAAkB8R,EAAgB,SAAY3T,IAAS,CAAEsG,QAASA,IAClII,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA4P,8BAAA,SAA8BlC,EAAwBC,GAAtD,WAEKtN,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzG,KAAK2F,aAAae,QAGX1G,KAAK0F,KACViB,KAAWT,IAAM,gCAAiCpE,KAAKC,UAAU,CAAE,eAAkB8R,EAAgB,SAAYC,IAAa,CAAEtN,QAASA,IACzII,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA6P,8BAAA,SAA8BnC,EAAwBG,GAAtD,WAEKxN,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzG,KAAK2F,aAAae,QAGX1G,KAAK0F,KACViB,KAAgBT,IAAM,gCAAiCpE,KAAKC,UAAU,CAAE,eAAkB8R,EAAgB,SAAYG,IAAa,CAAExN,QAASA,IAC9II,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA8K,aAAA,SAAagF,EAAY5L,GACxB,IAAIvE,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,KAAMiQ,IACVjQ,IAAI,WAAYqE,GAEzBrK,KAAK0F,KACVO,IAAeC,IAAM,qBAAsB,CAAEJ,OAAQA,IACrDK,aAGH,YAAA+P,mBAAA,SAAmBtW,EAAcyK,GAChC,IAAIvE,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,WAAYqE,GAEzBrK,KAAK0F,KACVO,IAAcC,IAAM,4BAA6B,CAAEJ,OAAQA,IAC3DK,aAGH,YAAAgQ,yBAAA,SAAyBvW,EAAcyK,EAAkB1J,GACxD,IAAImF,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,WAAYqE,IAChBrE,IAAI,OAAQrF,GAErBX,KAAK0F,KACVO,IAAcC,IAAM,iCAAkC,CAAEJ,OAAQA,IAChEK,aAGH,YAAAiQ,mBAAA,SAAmBxW,EAAcyK,GAChC,IAAIvE,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,WAAYqE,GAEzBrK,KAAK0F,KACVO,IAAeC,IAAM,0BAA2B,CAAEJ,OAAQA,IAC1DK,aAGH,YAAAkQ,2BAAA,SAA2BzW,EAAcyK,GAAzC,WACKvE,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,OAAQpG,IACZoG,IAAI,WAAYqE,GAEhCrK,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAAyBC,IAAM,2CAA4C,CAAEJ,OAAQA,IACrFc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAyM,wBAAA,SAAwBC,EAAcvR,EAAcwR,EAAgBC,EAAmBpS,GAEtF,IAAI6F,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CACZ+M,KAAMA,EACNvR,KAAMA,GAYP,OATc,MAAVwR,GAA+B,MAAbC,IACrBjN,EAAOgN,OAASA,EAChBhN,EAAOiN,UAAYA,GAGR,MAARpS,IACHmF,EAAOnF,KAAOA,GAGRX,KAAK0F,KACViB,KAAgBT,IAAM,6BAA8BpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IACvFL,aAGH,YAAAmQ,iCAAA,SAAiCzD,EAAcvR,GAC9C,IAAIkF,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CACZ+M,KAAMA,EACNvR,KAAMA,GAGP,OAAOtB,KAAK0F,KACViB,KAAgBT,IAAM,6BAA8BpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IACvFL,aAGH,YAAAoQ,iBAAA,SAAiBC,EAAkBC,EAAoBC,EAAkBC,GAExE,IAAI7Q,EAAqB,IAAI,EAAAC,WAO7B,OAHAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,WAAYwQ,EAASpN,aACzBpD,IAAI,aAAcyQ,EAAWrN,aAC7BpD,IAAI,WAAY0Q,IAChB1Q,IAAI,cAAe2Q,EAAYvN,YAGxCpJ,KAAK0F,KACVO,IAAoBC,IAAM,kBAAmB,CAAEJ,OAAQA,IACvDK,aAGH,YAAAyQ,0BAAA,SAA0BJ,EAAkBC,EAAoBC,EAAkBC,GAEjF,IAAI7Q,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,WAAYwQ,EAASpN,aACzBpD,IAAI,aAAcyQ,EAAWrN,aAC7BpD,IAAI,WAAY0Q,IAChB1Q,IAAI,cAAe2Q,EAAYvN,YAExCpJ,KAAK0F,KACVO,IAAoBC,IAAM,qBAAsB,CAAEJ,OAAQA,IAC1DK,aAGH,YAAA0Q,gBAAA,SAAgBC,EAAmBN,EAAkBC,EAAoBM,GACxE,IAAIjR,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,YAAa8Q,IACjB9Q,IAAI,WAAYwQ,EAASpN,aACzBpD,IAAI,aAAcyQ,EAAWrN,aAC7BpD,IAAI,iBAAkB+Q,EAAe3N,YAE9CpJ,KAAK0F,KACVO,IAAkBC,IAAM,0BAA2B,CAAEJ,OAAQA,IAC7DK,aAGH,YAAA6Q,iBAAA,SAAiBF,EAAmBN,EAAkBC,GACrD,IAAI3Q,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAOE,IAAI,YAAa8Q,IACjB9Q,IAAI,WAAYwQ,EAASpN,aACzBpD,IAAI,aAAcyQ,EAAWrN,YAEtCpJ,KAAK0F,KACVO,IAAkBC,IAAM,0BAA2B,CAAEJ,OAAQA,IAC7DK,aAGH,YAAA8Q,oBAAA,SAAoBH,GAApB,WACKtQ,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAWT,IAAM,sBAAuBpE,KAAKC,UAAU,CAAE+U,UAAWA,IAAc,CAAEtQ,QAASA,IAC7FI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA+Q,wBAAA,SAAwBC,GAAxB,WACK3Q,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAiBT,IAAM,0BAA2BpE,KAAKC,UAAU,CAAEoV,OAAQA,IAAW,CAAE3Q,QAASA,IACjGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAiR,mBAAA,SAAmBD,GAAnB,WACK3Q,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAiBT,IAAM,qBAAsBpE,KAAKC,UAAU,CAAEoV,OAAQA,IAAW,CAAE3Q,QAASA,IAC5FI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAkR,eAAA,WACC,IAAIvR,EAAqB,IAAI,EAAAC,WAE7B,OAAO/F,KAAK0F,KACVO,IAAgHC,IAAM,wBAAyB,CAAEJ,OAAQA,IACzJK,aAGH,YAAAmR,qBAAA,SAAqB3M,EAAa4M,GACjC,IAAIzR,EAAqB,IAAI,EAAAC,WAI7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,MAAO2E,IACX3E,IAAI,cAAeuR,GAE5BvX,KAAK0F,KACVO,IAAgBC,IAAM,wBAAyB,CAAEJ,OAAQA,IACzDK,aAGH,YAAAqR,yBAAA,WACC,IAAI1R,EAAqB,IAAI,EAAAC,WAE7B,OAAO/F,KAAK0F,KACVO,IAAkBC,IAAM,iCAAkC,CAAEJ,OAAQA,IACpEK,aAGH,YAAAsR,qBAAA,SAAqB9M,GACpB,IAAI7E,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,MAAO2E,GAEpB3K,KAAK0F,KACVO,IAAuBC,IAAM,uBAAwB,CAAEJ,OAAQA,IAC/DK,aAGH,YAAAuR,WAAA,WACC,IAAI5R,EAAqB,IAAI,EAAAC,WAE7B,OAAO/F,KAAK0F,KACVO,IAAcC,IAAM,4BAA6B,CAAEJ,OAAQA,IAC3DK,aAGH,YAAAwR,qBAAA,SAAqBC,EAAuBlQ,GAC7B,IAAI,EAAAjB,YAAY,CAC7B,eAAgB,qBADjB,IAcIX,EAAqB,IAAI,EAAAC,WAI7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,OAAQ4R,IACZ5R,IAAI,WAAY0B,GAEzB1H,KAAK0F,KACVO,IAAuBC,IAAM,+BAAgC,CAAEJ,OAAQA,IACvEK,aAIH,YAAA0R,qBAAA,SAAqBxN,GAArB,WACK7D,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAUT,IAAM,2CAA4CpE,KAAKC,UAAU,CAAE,SAAYsI,IAAa,CAAE7D,QAASA,IACjHI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAkBH,YAAA2R,qBAAA,SAAqBF,EAAuBlQ,EAA2BmO,EAAuBkC,GAA9F,WACKvR,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CACZ8R,cAAeA,EACflQ,kBAAmBA,EACnBmO,cAAeA,EACfkC,WAAYA,GAMb,OAFA/X,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAeT,IAAM,sCAAuCpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IAC/FI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAwG,iBAAA,SAAiBqL,GAAjB,WACKxR,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAiBT,IAAM,sBAAuBpE,KAAKC,UAAU,CAAEiW,KAAMA,IAAS,CAAExR,QAASA,IACzFI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA8R,wBAAA,SAAwBtN,EAAa+C,GAArC,WACKlH,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAwBT,IAAM,8BAA+BpE,KAAKC,UAAU,CAAE4I,IAAKA,EAAK+C,QAASA,IAAY,CAAElH,QAASA,IACxHI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA+R,0BAAA,SAA0BvN,GAA1B,WACKnE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAsBT,IAAM,gCAAiCpE,KAAKC,UAAU,CAAE4I,IAAKA,IAAQ,CAAEnE,QAASA,IACtGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAgS,iBAAA,SAAiBxN,GAAjB,WACKnE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAWT,IAAM,sBAAuBpE,KAAKC,UAAU,CAAE4I,IAAKA,IAAQ,CAAEnE,QAASA,IACjFI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAiS,wBAAA,SAAwBzN,GAAxB,WACKnE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAWT,IAAM,8BAA+BpE,KAAKC,UAAU,CAAE4I,IAAKA,IAAQ,CAAEnE,QAASA,IACzFI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAkS,kBAAA,SAAkB1N,GACjB,IAAInE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGjB,OAAOzG,KAAK0F,KAAKiB,KAAwBT,IAAM,uBAAwBpE,KAAKC,UAAU,CAAE4I,IAAKA,IAAQ,CAAEnE,QAASA,KAGjH,YAAA8R,cAAA,SAAc3N,GACb,IAAI7E,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,MAAO2E,GAEpB3K,KAAK0F,KACVO,IAAgBC,IAAM,mBAAoB,CAAEJ,OAAQA,IACpDK,aAMH,YAAAoS,mBAAA,SAAmBC,EAAqCC,EAA8B3O,EAAgB4O,EAAsBC,GAA5H,WACKnS,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CAAE0S,eAAgBA,EAAgBC,UAAWA,EAAW3O,MAAOA,EAAO4O,aAAcA,GAQjG,OANa,MAATC,IACH7S,EAAc,MAAI6S,GAGnB3Y,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAWT,IAAM,0BAA2BpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IAC/EI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAuN,KAAA,SAAK/I,EAAa8L,EAAoBD,EAAkB7E,EAAgDiH,GACvG,IAAIpS,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CACZ6E,IAAKA,EACLiO,KAAMA,GAeP,OAZkB,MAAdnC,IACH3Q,EAAO2Q,WAAaA,GAGL,MAAZD,IACH1Q,EAAO0Q,SAAWA,GAGf7E,EAAOzP,OAAS,IACnB4D,EAAO6L,OAASA,GAGV3R,KAAK0F,KACViB,KAAUT,IAAM,oBAAqBpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IACxEL,aAGH,YAAA1E,OAAA,SAAOkJ,EAAa1J,EAAe4U,EAAuBgD,EAAwBlH,GACjF,IAAInL,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CACZ6E,IAAKA,EACLkL,cAAeA,EACfgD,eAAgBA,GAYjB,OATIlH,EAAOzP,OAAS,IACnB4D,EAAO6L,OAASA,GAGJ,MAAT1Q,GAAiBA,EAAMiB,OAAS,IACnC4D,EAAO7E,MAAQA,GAITjB,KAAK0F,KACViB,KAAyCT,IAAM,sBAAuBpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IACzGL,aAGH,YAAA2S,iBAAA,SAAiBnO,GAChB,IAAInE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,CACZ6E,IAAKA,GAGN,OAAO3K,KAAK0F,KACViB,KAAwBT,IAAM,kCAAmCpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IACpGL,aAGH,YAAA+E,SAAA,SAASP,GACR,IAAI7E,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,MAAO2E,GAEpB3K,KAAK0F,KACVO,IAAcC,IAAM,wBAAyB,CAAEJ,OAAQA,IACvDK,aAGH,YAAA4S,oBAAA,WACC,IAAIjT,EAAqB,IAAI,EAAAC,WAE7B,OAAO/F,KAAK0F,KACVO,IAAoDC,IAAM,wBAAyB,CAAEJ,OAAQA,IAC7FK,aAGH,YAAA6S,yBAAA,SAAyBrO,EAAa6L,EAAkBC,EAAoBC,EAAkBC,GAE7F,IAAI7Q,EAAqB,IAAI,EAAAC,WAQ7B,OAHAD,GADAA,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,MAAO2E,IACX3E,IAAI,WAAYwQ,EAASpN,aACzBpD,IAAI,aAAcyQ,EAAWrN,aAC7BpD,IAAI,WAAY0Q,IAChB1Q,IAAI,cAAe2Q,EAAYvN,YAGxCpJ,KAAK0F,KACVO,IAAoBC,IAAM,gCAAiC,CAAEJ,OAAQA,IACrEK,aAIH,YAAA8S,iBAAA,sBAIC,OAFAjZ,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAAoBC,IAAM,8BAC1BU,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,a,iCAvvBSnM,GAAe,sD,oCAAfA,EAAe,QAAfA,EAAe,O,EAD5B,GACa,EAAAA,mB,wHCrBb,SACA,QAEA,Q,GAEA,M,sBAQA,aAGC,WAAoB0L,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAuT,QAAA,SAAQzC,EAAoBD,GAA5B,WAEK1Q,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,aAAcyQ,EAAWrN,aAC7BpD,IAAI,WAAYwQ,EAASpN,YAEzCpJ,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAAuCC,IAAM,kCAAmC,CAAEJ,OAAQA,IAC1Fc,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAF,IAAA,SAAI0E,GAAJ,WAEK7E,EAAqB,IAAI,EAAAC,WAK7B,OAJAD,EAASA,EAAOE,IAAI,MAAO2E,GAE3B3K,KAAK2F,aAAae,QAEX1G,KAAK0F,KACVO,IAA2BC,IAAM,8BAA+B,CAAEJ,OAAQA,IAC1Ec,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAgT,iBAAA,SAAiBzR,EAA2B0R,GAA5C,WAEOtT,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,aAAcoT,IAClBpT,IAAI,oBAAqB0B,GAEzC1H,KAAK2F,aAAae,QAEX1G,KAAK0F,KACTO,IAA6BC,IAAM,0CAA2C,CAAEJ,OAAQA,IACxFc,KAAK,EAAAC,UAAS,WACb,EAAKlB,aAAamB,eAEnBX,aAGN,YAAAkT,eAAA,SAAeC,EAA0B9R,GAAzC,WAEO1B,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,mBAAoBsT,IACxBtT,IAAI,oBAAqBwB,GAEzCxH,KAAK2F,aAAae,QAEX1G,KAAK0F,KACTO,IAA6BC,IAAM,4CAA6C,CAAEJ,OAAQA,IAC1Fc,KAAK,EAAAC,UAAS,WACb,EAAKlB,aAAamB,eAEnBX,aAGN,YAAA+H,MAAA,SAAMiJ,GAAN,WAEK3Q,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAA4BT,IAAM,gCAAiCpE,KAAKC,UAAU,CAAEoV,OAAQA,IAAW,CAAE3Q,QAASA,IAClHI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA0D,KAAA,SAAKc,GAAL,WAEKnE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGbX,EAAS,GAQb,OANW,MAAP6E,IACH7E,EAAS,CAAE6E,IAAKA,IAGjB3K,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAA6DT,IAAM,+BAAgCpE,KAAKC,UAAU+D,GAAS,CAAEU,QAASA,IACtII,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAoT,OAAA,SAAO5O,GAAP,WAEKnE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAUT,IAAM,iCAAkCpE,KAAKC,UAAU,CAAE4I,IAAKA,IAAQ,CAAEnE,QAASA,IAC3FI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAqT,OAAA,SAAO7O,GAAP,WAEKnE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAUT,IAAM,iCAAkCpE,KAAKC,UAAU,CAAE4I,IAAKA,IAAQ,CAAEnE,QAASA,IAC3FI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAsT,IAAA,SAAI9O,GAAJ,WAEKnE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAUT,IAAM,8BAA+BpE,KAAKC,UAAU,CAAE4I,IAAKA,IAAQ,CAAEnE,QAASA,IACxFI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAAuT,QAAA,SAAQ/O,EAAY8L,EAAoBD,GAEvC,IAAI1Q,EAAqB,IAAI,EAAAC,WAO7B,OAJAD,GADAA,GADAA,EAASA,EAAOE,IAAI,MAAO2E,IACX3E,IAAI,aAAcyQ,EAAWrN,aAC7BpD,IAAI,WAAYwQ,EAASpN,YAIlCpJ,KAAK0F,KACVO,IAAoCC,IAAM,mCAAoC,CAAEJ,OAAQA,IAIxFK,a,iCAvKS9L,GAA4B,sD,oCAA5BA,EAA4B,QAA5BA,EAA4B,O,EADzC,GACa,EAAAA,gC,uGCdb,SACA,QACA,Q,GAGA,M,sBAKA,aAGC,WAAoBqL,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAgU,WAAA,SAAWC,EAAiBpD,EAAkBqD,GAC7C,IAAI/T,EAAqB,IAAI,EAAAC,WAO7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,UAAW,eACfA,IAAI,UAAW4T,EAAQxQ,aACvBpD,IAAI,WAAYwQ,EAASpN,aACzBpD,IAAI,cAAe6T,GAE5B7Z,KAAK0F,KACVO,IAAoBC,IAAM,aAAc,CAAEJ,OAAQA,IAClDK,aAGH,YAAA2T,aAAA,SAAaC,GAAb,WACKvT,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAUT,IAAM,kBAAmBpE,KAAKC,UAAU,CAAE,GAAMgY,IAAW,CAAEvT,QAASA,IAChFI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,aAGH,YAAA6T,cAAA,SAAcD,EAAgBE,GAA9B,WACKzT,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzG,KAAK2F,aAAae,QAEX1G,KAAK0F,KACViB,KAAUT,IAAM,uBAAwBpE,KAAKC,UAAU,CAAE,GAAMgY,EAAQ,OAAUE,IAAW,CAAEzT,QAASA,IACvGI,KAAK,EAAAC,UAAS,WACd,EAAKlB,aAAamB,eAElBX,a,iCA5CSlM,GAAW,sD,oCAAXA,EAAW,QAAXA,EAAW,O,EADxB,GACa,EAAAA,e,8MC9Bb,aA8BA,SAAgBigB,EAAcC,EAAiCC,GAC9D,OAAOD,EAAME,EAAID,EAAKC,GAAKF,EAAME,EAAKD,EAAKC,EAAID,EAAKE,QAAWH,EAAMI,EAAIH,EAAKG,GAAKJ,EAAMI,EAAKH,EAAKG,EAAIH,EAAKI,MA7B7G,8BAAmC3H,EAAc4H,GAChD,IAUIL,EAVMM,EAAGjG,OAAO,QAEIkG,OAAO,KAAKC,QAAQ,eAAe,GAEhCD,OAAO,QAChCtZ,KAAK,KAAM,KACXA,KAAK,KAAM,KACXA,KAAK,YAAaoZ,GAClB5H,KAAKA,GAEWgI,OAAOC,UAIzB,OAFAJ,EAAGjG,OAAO,gBAAgB8E,SAEnBa,EAAKI,OAGb,oBAAyBD,EAAWF,GACnC,IAAIU,EAAWL,EAAGjG,OAAO,QAAQoG,OAC7BG,EAAKD,EAAIE,iBAKb,OAHAD,EAAGT,EAAIA,EACPS,EAAGX,EAAIA,EAEAW,EAAGE,gBAAgBH,EAAII,eAAeC,YAG9C,kBAIA,iCAAsCC,EAAgEC,GACrG,OAAOpB,EAAc,CAAEK,EAAGc,EAAMd,EAAGF,EAAGgB,EAAMhB,GAAKiB,IAAUpB,EAAc,CAAEK,EAAGc,EAAMd,EAAIc,EAAMb,MAAOH,EAAGgB,EAAMhB,EAAIgB,EAAMf,QAAUgB,IAC9HpB,EAAc,CAAEK,EAAGc,EAAMd,EAAIc,EAAMb,MAAOH,EAAGgB,EAAMhB,GAAKiB,IAAUpB,EAAc,CAAEK,EAAGc,EAAMd,EAAGF,EAAGgB,EAAMhB,EAAIgB,EAAMf,QAAUgB,IAGhI,+BAAoCD,EAAgEC,GACnG,OAAOpB,EAAc,CAAEK,EAAGc,EAAMd,EAAGF,EAAGgB,EAAMhB,GAAKiB,IAAUpB,EAAc,CAAEK,EAAGc,EAAMd,EAAIc,EAAMb,MAAOH,EAAGgB,EAAMhB,EAAIgB,EAAMf,QAAUgB,IAC9HpB,EAAc,CAAEK,EAAGc,EAAMd,EAAIc,EAAMb,MAAOH,EAAGgB,EAAMhB,GAAKiB,IAAUpB,EAAc,CAAEK,EAAGc,EAAMd,EAAGF,EAAGgB,EAAMhB,EAAIgB,EAAMf,QAAUgB,IAGhI,gCAAqCC,GACpC,MAAO,CAAEhB,EAAGiB,SAASD,EAAUla,KAAK,MAAOgZ,EAAGmB,SAASD,EAAUla,KAAK,MAAOmZ,MAAOgB,SAASD,EAAUla,KAAK,UAAWiZ,OAAQkB,SAASD,EAAUla,KAAK,c,oOCzC3I,EAAAoa,kBAAoB,UACpB,EAAAC,0BAA4B,UAC5B,EAAAC,oBAAsB,UACtB,EAAAC,4BAA8B,UAC9B,EAAAC,0BAA4B,EAAAD,4BAEzC,mBAAa,EAAAE,Y,mHCVb,W,GAGA,O,sDCyBc,gCAAqF,YAAmB,kB,uBAA5C,wCAAyB,6C,yBAiBrF,gCAA+F,YAAQ,kB,uBAAvB,mCAAe,uC,mDATvG,4BACE,4BACE,4BACE,8BAAgB,YAAkC,iBACpD,iBACA,6BACE,gCACE,4FACA,wBACA,kCACF,iBACF,iBACF,iBACF,iB,8CAVsB,2DAGR,wEAA4E,mBAA5E,CAA4E,uBAG1E,qF,8FAQhB,4BACE,4BACE,4BACE,8BACE,6BACF,iBACF,iBACA,6BACE,6BACE,6BAAK,6IAGH,sBACF,iBACF,iBAEF,iBACF,iBACF,iB,gCARU,0F,yBAmBF,gCAAmF,YAAQ,kB,uBAAvB,mCAAe,uC,yBAanF,gCAAmF,YAAQ,kB,uBAAvB,mCAAe,uC,mDARzF,4BACE,4BACE,8BAAgB,6BAA6D,iBAC/E,iBACA,6BACE,gCACE,+HACA,wBACA,kCACF,iBACF,iBACF,iB,iCALM,4EAAgD,eAExC,8E,mDAtBhB,4BACE,4BACE,4BACE,8BAAgB,6BAA6C,iBAC/D,iBACA,6BACE,gCACE,mIACA,wBACA,kCACF,iBACF,iBACF,iBAEA,+BAYF,iB,gCAnBQ,iFAAqD,eAE7C,6EAKT,wI,qBA+CG,6B,qBACA,6BDlIhB,iBAWI,aAHU,KAAAC,oBAAsB,IAAI,EAAA7T,aAC1B,KAAA8T,YAAc,IAAI,EAAA9T,a,OAK5B,YAAA+T,OAAA,WACIjc,KAAK+b,oBAAoBrN,KAAM1O,KAAKoS,eACpCpS,KAAKgc,YAAYtN,KAAM,SAG3B,YAAA5B,SAAA,WACI9M,KAAKgc,YAAYtN,KAAM,W,iCAflBvS,I,iCAAAA,EAAuB,s2C,GAAA,MCVpC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBAQE,+BAEE,4BACE,4BACE,6BACE,+BACE,8BACF,iBACF,iBACA,8BACE,iCAA6C,gFAC3C,yBACA,mCACF,iBACF,iBACF,iBACF,iBAEA,qBAEA,gCAeA,qBAEA,gCAoBA,iCAsDA,6BACE,6BACE,8BACE,iCAAsB,wCAAS,EAAA2Q,cAC3B,8BACJ,iBACA,iCAAsB,wCAAS,EAAAmP,YAC3B,qCACA,qCACJ,iBACF,iBACF,iBACF,iBACF,iBAEJ,kB,4BApHyD,kEAEnC,mEAQQ,uEAiBnB,kEAoBA,+DA4DgF,kDACjE,gEACA,iE,kRDlI1B,GAKa,EAAA9f,2B,iHEVb,W,GAEA,OAEA,O,+DCmBkB,gCAAgF,YAAQ,kB,uBAAvB,wBAAe,uC,sBAWnF,gCAA0D,6BAA6C,kB,sBACvG,gCAA2H,6BAA8C,kB,mDAvBlL,6BACE,4BACE,6BACE,6BAA2B,4BAAQ,YAAmB,iBAAQ,iBAC9D,6BACE,6BACE,4BAAO,6BAAyD,iBAClE,iBACA,8BACE,iCAA4B,4FAC1B,4BACA,mCACF,iBACF,iBACA,8BACE,6BAAO,8BAAgE,iBACzE,iBACA,8BACE,iCAA0D,mGAC3D,yBACA,iCAAoB,8BAAwC,iBAC5D,iCAAqB,8BAAyC,iBAC9D,mCACA,mCACF,iBACC,iBACF,iBACF,iBACF,iBACF,iB,wDA1ByC,qDAMH,gDAA6B,sBAE/C,6EAOF,uDAA6B,0BAA7B,CAA6B,0CAI9B,+DACA,6HD7BvB,iBAYI,WAAqBqN,GAAA,KAAAA,UAHX,KAAAuS,oBAAsB,IAAI,EAAA7T,aAC1B,KAAA8T,YAAc,IAAI,EAAA9T,a,OAI5B,YAAAE,SAAA,sBACIpI,KAAKwJ,QAAQiJ,iBAAkBzS,KAAKoS,cAAc9Q,KAAK1B,KAAMI,KAAKoS,cAAcW,WAAW,GAAO7I,MAAM,SAAAgS,GACpG,EAAK9J,cAAc8J,UAAYA,MAIvC,YAAAD,OAAA,WAEIjc,KAAK+b,oBAAoBrN,KAAM1O,KAAKoS,eACpCpS,KAAKgc,YAAYtN,KAAM,SAG3B,YAAAyN,OAAA,WACInc,KAAKgc,YAAYtN,KAAM,SAG3B,YAAA5B,SAAA,WACI9M,KAAKgc,YAAYtN,KAAM,W,iCAzBlBtS,GAAqB,mC,iCAArBA,EAAqB,uzC,GAAA,MCZlC,6BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,4BACE,kCAEE,+BA+BA,6BACE,6BACE,8BACE,iCAAsB,wCAAS,EAAA+f,YAC3B,8BACJ,iBACA,iCAAmB,wCAAS,EAAArP,cACxB,8BACJ,iBACA,iCAAsB,wCAAS,EAAAmP,YAC3B,8BACJ,iBACF,iBACF,iBACF,iBAEF,iBACF,iBACF,kB,4BAjD8B,iEAwC6D,oD,wQD9C3F,GAMa,EAAA7f,yB,wHEZb,WAEA,GADA,OACA,Q,6DCQI,4BACE,6BACE,6BACF,iBACF,kB,yBACA,4BACE,6BAAgC,YAAW,iBAC7C,kB,6BADkC,+C,mDAyBhC,0BACE,0CAAkF,kGAAgC,iBACpH,iB,wDADoB,yCAAmB,gCAAnB,CAAmB,Y,qBAW/B,6B,qBACA,6BDlDd,iBAYI,aAHU,KAAA4f,YAAc,IAAI,EAAA9T,aAC5B,KAAAC,QAAkB,K,OAIlB,YAAAC,SAAA,aAGA,YAAAgU,YAAA,WACI,IAAM,IAAIhb,EAAI,EAAGA,EAAIpB,KAAKoS,cAAciK,iBAAiBna,OAAQd,IAE7D,IAAMpB,KAAKoS,cAAciK,iBAAiBjb,GAAGkb,SACzC,OAAO,EAIf,OAAO,GAGX,YAAAC,YAAA,SAAa9R,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,IAGxD,YAAAwR,OAAA,WAC0C,MAAjCjc,KAAKoS,cAAcoK,aACpBxc,KAAKoS,cAAcoK,WAAa,IAGpC,IAAM,IAAIpb,EAAI,EAAGA,EAAIpB,KAAKoS,cAAciK,iBAAiBna,OAAQd,IAAM,CACnE,IAAMqb,EAAUzc,KAAKoS,cAAciK,iBAAiBjb,GAEpD,GAAKqb,EAAQH,UAAmC,oBAAvBG,EAAQpL,OAAOqL,KAA6B,CACjE,IACMC,EAAY,CAAE/c,KAAM,aAAcqB,MADN,MAAlBwb,EAAQ3J,OAAiB2J,EAAQ3J,OAAS,IAAM2J,EAAQ5c,MAAQ4c,EAAQ5c,OAGxFG,KAAKoS,cAAcoK,WAAWrc,KAAMwc,IAK5C3c,KAAKgc,YAAYtN,KAAM,SAG3B,YAAA5B,SAAA,WACI9M,KAAKgc,YAAYtN,KAAM,W,iCA/ClBrS,I,iCAAAA,EAA4B,q6BCVzC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,0BACE,8BAKA,8BAGA,kCACE,6BACE,6BACE,6BACE,6BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACF,iBACA,gCAGA,6BACE,8BACE,iCAAsB,wCAAS,EAAAyQ,cAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,wCAAS,EAAAmP,YAC7B,4BACE,qCACA,qCACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MAnDS,oDAKA,oDA0BE,yEAU8E,wDAEjE,uEACA,yE,mKDlDxB,GAMa,EAAA5f,gC,oHEVb,W,GACA,O,4DCSI,4BACE,6BACE,6BACF,iBACF,kB,yBACA,4BACE,6BAAgC,YAAW,iBAC7C,kB,6BADkC,+C,mDAyBhC,0BACE,sCAA8E,kGAAgC,iBAChH,iB,wDADgB,yCAAmB,gCAAnB,CAAmB,YDvCzC,iBAYI,aAHU,KAAA2f,YAAc,IAAI,EAAA9T,aAC5B,KAAAC,QAAkB,K,OAIlB,YAAAC,SAAA,aAGA,YAAAgU,YAAA,WACI,IAAM,IAAIhb,EAAI,EAAGA,EAAIpB,KAAKoS,cAAcwK,aAAa1a,OAAQd,IAEzD,IAAMpB,KAAKoS,cAAcwK,aAAaxb,GAAGkb,SACrC,OAAO,EAIf,OAAO,GAGX,YAAAL,OAAA,WAC0C,MAAjCjc,KAAKoS,cAAcoK,aACpBxc,KAAKoS,cAAcoK,WAAa,IAGpC,IAAM,IAAIpb,EAAI,EAAGA,EAAIpB,KAAKoS,cAAcwK,aAAa1a,OAAQd,IAAM,CAC/D,IAAMqb,EAAUzc,KAAKoS,cAAcwK,aAAaxb,GAEhD,GAAKqb,EAAQH,UAAmC,UAAvBG,EAAQpL,OAAOqL,KAAmB,CACvD,IAAMC,EAAY,CAAE/c,KAAM6c,EAAQI,cAAe5b,MAAOwb,EAAQ5c,OAEhEG,KAAKoS,cAAcoK,WAAWrc,KAAMwc,IAI5C3c,KAAKgc,YAAYtN,KAAM,SAG3B,YAAA5B,SAAA,WACI9M,KAAKgc,YAAYtN,KAAM,W,iCAzClBnS,I,iCAAAA,EAAwB,80BCTrC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,4BACE,8BAKA,8BAGA,kCACE,6BACE,6BACE,6BACE,6BACF,iBACF,iBACA,8BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,8BACE,6BACE,8BACF,iBACF,iBACF,iBACA,gCAGA,6BACE,8BACE,iCAAsB,wCAAS,EAAAuQ,cAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,wCAAS,EAAAmP,YAC7B,4BACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MAlDS,oDAKA,oDA0BE,qEAU8E,0D,+JDhDzF,GAMa,EAAA1f,4B,uHETb,WAKA,GAFA,OAEA,QACA,SAEA,S,oFAKA,aA8DI,WAAqBugB,GAAA,KAAAA,kBA1CX,KAAAC,eAAiB,IAAI,EAAA7U,aA2BtB,KAAAyF,UAAoB,EAKnB,KAAAqP,YAAc,IAAI,EAAA9U,a,OAc5B,YAAAE,SAAA,aAGA,YAAAC,gBAAA,sBACI4U,YAAW,WAIL3I,EAAkBC,YAAc,gGAElC,EAAK2I,OAAOC,cAAclH,GAAKmH,KAAKC,MAAuB,OAAhBD,KAAKE,UAA0B,IAE1E,EAAKC,IAAM,IAAI,EAAAC,IAAK,CAChBC,UAAW,EAAKP,OAAOC,cAAclH,GACrC3M,MAAO,sCACPoU,KAAM,EACNC,OAAQ,CAAC,WAAY,aAGzB,EAAKJ,IAAIK,GAAI,QAAQ,WACjB,EAAKC,aAGT,EAAKN,IAAIK,GAAI,eAAe,WACxB,EAAKE,mBAET,EAAKP,IAAIK,GAAI,eAAe,WACxB,EAAKE,mBAET,EAAKP,IAAIK,GAAI,eAAe,WACxB,EAAKE,qBAMV,KAGP,YAAAvV,YAAA,SAAaoG,IACJA,EAAqB,aAAKA,EAAsB,eACjD3O,KAAK+O,UAIN,YAAAA,OAAP,WACqB,MAAZ/O,KAAKud,MACNvd,KAAK+d,eACL/d,KAAKge,cAIb,YAAAxV,YAAA,WACIxI,KAAKud,IAAIhE,UAGb,YAAAvI,WAAA,WACI,IAAMhR,KAAK2N,SAAW,CAClB,IAAI5E,GAAmB,EAEvB,GAA4B,MAAvB/I,KAAKie,eACuBje,KAAKie,eAAeC,SAE1BC,SAASjc,OAAS,IACrC6G,GAAU,GAIlB,OAAOA,EAGX,OAAO,GAGH,YAAA+U,cAAR,WACI9d,KAAK+c,eAAerO,KAAM1O,KAAKoe,aAGnC,YAAAP,QAAA,sBAEI7d,KAAKud,IAAIK,GAAI,cAAc,WACvB,EAAKI,YACL,EAAKF,mBAIT9d,KAAKge,YAEoB,MAApBhe,KAAKqe,aAA4C,KAArBre,KAAKqe,aAClCre,KAAKse,aAITte,KAAKud,IAAIgB,WAAY,IAAI,EAAAC,mBAEnBxe,KAAK2N,SAIP3N,KAAKye,gBAHLze,KAAK0e,gBAMT1e,KAAK8d,iBAGT,YAAAW,cAAA,sBACIze,KAAK2e,kBAAkBC,YAAYpQ,WAAW,SAAAuB,GAC1C,EAAKiN,YAAYtO,UAGrB1O,KAAKud,IAAIgB,WAAYve,KAAK2e,oBAG9B,YAAAD,cAAA,WAC+B,iBAAtB1e,KAAK6e,cAAyD,YAAtB7e,KAAK6e,aAC9C7e,KAAKie,eAAiB,IAAIa,EAAY,CAClCC,SAAU,CACN5E,OAAO,EACP6E,aAAa,EACbC,SAAS,EACTC,OAAO,EACPC,kBAAkB,EAClBC,oBAAoB,KAIA,UAAtBpf,KAAK6e,cAAkD,eAAtB7e,KAAK6e,aAC5C7e,KAAKie,eAAiB,IAAIa,EAAY,CAClCC,SAAU,CACN5E,OAAO,EACP6E,aAAa,EACbC,SAAS,EACTC,OAAO,EACPC,kBAAkB,EAClBC,oBAAoB,KAIA,SAAtBpf,KAAK6e,cAAiD,cAAtB7e,KAAK6e,eAC3C7e,KAAKie,eAAiB,IAAIa,EAAY,CAClCC,SAAU,CACN5E,OAAO,EACP6E,aAAa,EACbC,SAAS,EACTC,OAAO,EACPC,kBAAkB,EAClBC,oBAAoB,MAIhCpf,KAAKud,IAAIgB,WAAYve,KAAKie,gBAEA,MAArBje,KAAKqf,cACNrf,KAAKie,eAAeqB,IAAKtf,KAAKqf,eAItC,YAAAE,aAAA,SAAcC,GACV,IAAIC,EAAqBD,EAAS,aAEP,iBAAtBxf,KAAK6e,cAAyD,YAAtB7e,KAAK6e,aAC9C7e,KAAKud,IAAImC,YAAaD,EAAa,YAEP,UAAtBzf,KAAK6e,cAAkD,eAAtB7e,KAAK6e,aAC5C7e,KAAKud,IAAImC,YAAaD,EAAa,UAEP,SAAtBzf,KAAK6e,cAAiD,cAAtB7e,KAAK6e,cAC3C7e,KAAKud,IAAImC,YAAaD,EAAa,SAGvCzf,KAAKud,IAAIgC,aAAcE,IAG3B,YAAA1B,aAAA,WACS/d,KAAKud,IAAIoC,UAAW,kBACrB3f,KAAKuf,aAAc,OAElBvf,KAAKud,IAAIoC,UAAW,mBACrB3f,KAAKuf,aAAc,SAI3B,YAAAvB,UAAA,WAC6B,MAApBhe,KAAKqe,aAA4C,KAArBre,KAAKqe,aAClCre,KAAK4f,sBAAuB5f,KAAKqe,YAAa,MAAO,WAEpDre,KAAK2N,UAAiC,MAArB3N,KAAKqf,cAA8C,KAAtBrf,KAAKqf,cACpDrf,KAAK4f,sBAAuB5f,KAAKqf,aAAc,OAAQ,YAI/D,YAAAO,sBAAA,SAAuBxR,EAAeoR,EAAgBK,GAClD,IAAIJ,EAAqBD,EAAS,aAElCxf,KAAKud,IAAIuC,UAAWL,EAAY,CAC5Bne,KAAM,UACNoS,KAAM,CACF,KAAQ,oBACR,SAAY,MAIO,iBAAtB1T,KAAK6e,cAAyD,YAAtB7e,KAAK6e,aAE9C7e,KAAKud,IAAIwC,SAAU,CACf,GAAMN,EAAa,WACnB,KAAQ,OACR,OAAUA,EACV,MAAS,CACL,aAAcI,EACd,qBAAsB,QACtB,eAAgB,MAII,UAAtB7f,KAAK6e,cAAkD,eAAtB7e,KAAK6e,aAE5C7e,KAAKud,IAAIwC,SAAU,CACf,GAAMN,EAAa,SACnB,KAAQ,SACR,OAAUA,EACV,MAAS,CACL,gBAAiB,EACjB,eAAgBI,EAChB,sBAAuB,EACvB,sBAAuB,aAIH,SAAtB7f,KAAK6e,cAAiD,cAAtB7e,KAAK6e,cAC3C7e,KAAKud,IAAIwC,SAAU,CACf,GAAMN,EAAa,QACnB,OAAUA,EACV,KAAQ,OACR,OAAU,CACN,YAAa,QACb,WAAY,SAEhB,MAAS,CACL,aAAcI,EACd,aAAc,KAKnB7f,KAAKud,IAAIoC,UAAWF,GAAeO,QAAS5R,IAGvD,YAAAkQ,WAAA,sBAC0B,MAAjBte,KAAKigB,UAAqC,MAAjBjgB,KAAKkgB,WACT,MAAjBlgB,KAAKmgB,SACNngB,KAAK8c,gBAAgB5G,mBAAoBlW,KAAKigB,SAAUjgB,KAAKkgB,UAAWhW,MAAM,SAAAkW,GAC1E,IAAIC,EAAS,IAAI,EAAAC,aAAc,CAACF,EAAS,GAAIA,EAAS,IAAK,CAACA,EAAS,GAAIA,EAAS,KAElF,EAAK7C,IAAIgD,UAAWF,EAAQ,CAAEG,QAAS,QACvChW,OAAM,SAAEC,GACR,EAAKC,MAAOD,MAIhBzK,KAAK8c,gBAAgB3G,yBAA0BnW,KAAKigB,SAAUjgB,KAAKkgB,SAAUlgB,KAAKmgB,UAAWjW,MAAM,SAAAkW,GAC/F,IAAIC,EAAS,IAAI,EAAAC,aAAc,CAACF,EAAS,GAAIA,EAAS,IAAK,CAACA,EAAS,GAAIA,EAAS,KAElF,EAAK7C,IAAIgD,UAAWF,EAAQ,CAAEG,QAAS,QACvChW,OAAM,SAAEC,GACR,EAAKC,MAAOD,QAM5B,YAAA2T,SAAA,WACI,GAA4B,MAAvBpe,KAAKie,eAAyB,CAC/B,IAAIwC,EAAyBzgB,KAAKie,eAAeC,SAEjD,GAAKuC,EAAkBtC,SAASjc,OAAS,EAAI,CAKzC,GAA2B,iBAAtBlC,KAAK6e,aAAkC,CAGxC,IAFA,IAAI6B,EAAW,GAELtf,EAAI,EAAGA,EAAIqf,EAAkBtC,SAASjc,OAAQd,IAAM,CAG1D,GAA+B,kBAF3Buf,EAAUF,EAAkBtC,SAAS/c,IAE5BgN,SAAS9M,KAClB,IAAM,IAAIsf,EAAI,EAAGA,EAAID,EAAQvS,SAASyS,YAAY3e,OAAQ0e,IACtDF,EAASvgB,KAAMwgB,EAAQvS,SAASyS,YAAYD,SAIhDF,EAASvgB,KAAMwgB,EAAQvS,SAASyS,aAIxC,MAAO,CACHA,YAAaH,EACbpf,KAAM,gBAGT,GAA2B,eAAtBtB,KAAK6e,aAAgC,CAC3C,IAAIiC,EAAS,GAEb,IAAU1f,EAAI,EAAGA,EAAIqf,EAAkBtC,SAASjc,OAAQd,IAAM,CAG1D,GAA+B,gBAF3Buf,EAAUF,EAAkBtC,SAAS/c,IAE5BgN,SAAS9M,KAClB,IAAUsf,EAAI,EAAGA,EAAID,EAAQvS,SAASyS,YAAY3e,OAAQ0e,IACtDE,EAAO3gB,KAAMwgB,EAAQvS,SAASyS,YAAYD,SAI9CE,EAAO3gB,KAAMwgB,EAAQvS,SAASyS,aAItC,MAAO,CACHA,YAAaC,EACbxf,KAAM,cAGT,GAA2B,cAAtBtB,KAAK6e,aAA+B,CAC1C,IAAIkC,EAAQ,GAEZ,IAAU3f,EAAI,EAAGA,EAAIqf,EAAkBtC,SAASjc,OAAQd,IAAM,CAC1D,IAAIuf,EAEJ,GAA+B,qBAF3BA,EAAUF,EAAkBtC,SAAS/c,IAE5BgN,SAAS9M,KAClB,IAAUsf,EAAI,EAAGA,EAAID,EAAQvS,SAASyS,YAAY3e,OAAQ0e,IACtDG,EAAM5gB,KAAMwgB,EAAQvS,SAASyS,YAAYD,SAI7CG,EAAM5gB,KAAMwgB,EAAQvS,SAASyS,aAIrC,MAAO,CACHA,YAAaE,EACbzf,KAAM,mBAIV,OAAOmf,EAAkBtC,SAAS,GAAG/P,SAI7C,OAAOpO,KAAKqf,aAGhB,OAAOrf,KAAKqf,cAGT,YAAA3U,MAAP,SAAcD,GAEVvB,QAAQC,IAAK,QAASsB,I,iCA5ZjB/M,GAA2B,yC,iCAA3BA,EAA2B,+E,OAAA,M,qlBCvBxC,yBAEA,8C,iDDWA,GAUa,EAAAA,+B,gHEvBb,WAQA,GALA,MAIA,OACA,QAEA,S,uFCGc,6BACE,YAEA,0BAGF,kB,qDALE,qDAGE,0HAA4G,oC,mDAbxH,4BACE,4BACE,4BACE,YACF,iBACF,iBACA,4BACE,4BACE,4BACE,8BAQF,iBAEA,4BACE,4BACI,8BACI,iCAA+B,2HAC3B,8BACJ,iBACJ,iBACJ,iBACF,iBACF,iBACF,iBACF,iB,0BA3BM,qDAMyD,kDDDrE,iBAyBI,WAAqB0P,EAAsC0P,GAAtC,KAAA1P,eAAsC,KAAA0P,kBAhBjD,KAAAhP,MAAQ,IAAI,EAAA5F,aAEb,KAAAa,SAAmB,EAInB,KAAA2E,QAAgB,IAAI9L,KAI7B,KAAAof,aAAsB,GAEtB,KAAAC,UAAiB,G,OAQjB,YAAA7Y,SAAA,WACI,IAAM8Y,EAAMlhB,KAAK0N,QAAQyT,aAEzBnhB,KAAKohB,QAAUphB,KAAK0N,QAAQ2T,iBAAmB,KAAQrhB,KAAK0N,QAAQ4T,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,EAG1HlhB,KAAK0N,QAAU,IAAI9L,KAAMA,KAAKC,MAAO7B,KAAKohB,UAE1CphB,KAAK4O,aAGT,YAAArG,YAAA,SAAaoG,GAEJA,EAAiB,SAClB3O,KAAK4O,aAIb,YAAAA,UAAA,sBACU1N,EAAOlB,KAAK0N,QAAQvM,UAE1BnB,KAAK+I,SAAU,EAEf/I,KAAKghB,aAAe,GACpBhhB,KAAK2L,YAAYjK,SAAS,SAAAqR,GACtB,IAAM9D,EAAS,GACfA,EAAc,MAAI8D,EAAUlT,MAC5BoP,EAAa,KAAI8D,EAAUnT,KAE3B,EAAKmJ,QAAU,EAAKA,SAAa,EAAK4C,YAAYzJ,OAAS,EAE3D6Q,EAAUwO,QAAQ7f,SAAS,SAAA8f,GACvB,IAAMzgB,EAAYa,KAAKC,MAAO2f,EAAIzgB,WAC5BC,EAAUY,KAAKC,MAAO2f,EAAIxgB,SAEhC,GAAKE,GAAQH,GAAaG,GAAQF,EAAU,CACxC,IAAI,EAAU,GAEd+R,EAAUlN,MAAMnE,SAAS,SAAAJ,GACrB,IAAIwR,EAAc,CACdlT,KAAM0B,EAAK1B,KACXC,MAAOyB,EAAKzB,OAGe,MAA1B2hB,EAAIC,QAAQngB,EAAK1B,QAClBkT,EAAOD,KAAO2O,EAAIC,QAAQngB,EAAK1B,MAAMiT,KACrCC,EAAO2F,UAAY+I,EAAIC,QAAQngB,EAAK1B,MAAM6Y,WAG9C,EAAQtY,KAAM2S,MAGlB7D,EAAgB,QAAI,MAI5B,EAAK+R,aAAa7gB,KAAM8O,MAI5BjP,KAAK8N,MAAMY,QAGR,YAAAsC,WAAP,WACI,OAAO,GAGJ,YAAA0Q,eAAP,WACI,OAAO1hB,KAAK2L,aAGhB,YAAAgW,iBAAA,SAAkB/hB,GAAlB,WAEUmT,EAAY/S,KAAK2L,YAAYiW,MAAM,SAAAC,GAAK,OAAAA,EAAEjiB,OAASA,KAEzDI,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAxR,mCAAoC,CAC1EyR,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB1P,KAAK0J,WAAWiG,QAAQ1D,KAAM8G,GAC9B/S,KAAK0J,WAAWiG,QAAQmS,gBAAgBtT,WAAW,SAAAuE,GAC/C,EAAKnE,gBAIN,YAAAlE,MAAP,SAAcD,GACWzK,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC/DE,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAhH7D3M,GAAoB,+E,iCAApBA,EAAoB,+D,OAAA,K,+7BChBjC,+BACE,+BACE,0BACE,+BA+BF,iBACF,iBACF,kB,MAjCwD,wD,iIDQxD,GAKa,EAAAA,wB,wHEjBb,KAEA,MAFA,IAIA,QAGA,S,GACA,MAEA,O,oJCS4B,gCAA2D,YAC3D,kB,uBAD2C,0BAAgB,oE,mDAwB3E,0BACI,8DAAoD,kGAAoC,kGAGxF,iBACJ,iB,gCAHQ,6DAAoC,8BAApC,CAAoC,gCAApC,CAAoC,yBDhCxD,iBA4CC,WAAoBsP,EAAsC0P,EACjDkF,EAAoDC,EAA8CtY,GAD3G,WAAoB,KAAAyD,eAAsC,KAAA0P,kBACjD,KAAAkF,uBAAoD,KAAAC,kBAA8C,KAAAtY,cA/B3G,KAAAuY,eAAkC,GAMlC,KAAAC,YAAsB,GAEtB,KAAAC,OAAiB,GAWjB,KAAA/U,aAAkC,KAKlC,KAAAC,cAAmC,KAEnC,KAAAvE,SAAmB,EAEnB,KAAAkF,2BAAuC,CAAC,MAAO,WAAY,OAAQ,iBAAkB,aAAc,UAKlGjO,KAAKqiB,WAAa,EAAAC,WAAW/gB,QAAO,SAACghB,GACpC,EAAKzF,gBAAgBxG,iCAAiC,EAAK6L,YAAa,EAAK1hB,cAAcb,MAAMsK,MAAK,SAAAsY,GACrGD,EAAS9c,KAAK+c,S,OAKjB,YAAApa,SAAA,sBACCpI,KAAK8c,gBAAgBnI,kBAAkB,GAAI,MAAMzK,MAAK,SAAArE,GAGrD,IADA,IAAIsE,EAAa,GACR/I,EAAI,EAAGA,EAAIyE,EAAM3D,SAAUd,EAAG,CACtC,IAAME,EAAOuE,EAAMzE,GACbgJ,EAAU9I,EAAKmhB,iBACfpY,EAAiC,MAAtB/I,EAAKgJ,eAA+C,IAAtBhJ,EAAKgJ,cAAsBhJ,EAAKgJ,cAAgBhJ,EAAK1B,KAEhG,EAAK+J,YAAY+Y,kBAAkBtY,EAASC,IAC/CF,EAAWhK,KAAK0F,EAAMzE,IAGxB,EAAK8gB,eAAiB/X,EAEtB,EAAK+X,eAAetJ,MAAK,SAAC+J,EAAGC,GAC5B,OAAID,EAAE9iB,MAAMgjB,eAAeC,cAAgBF,EAAE/iB,MAAMgjB,eAAeC,eAAuB,EAChFH,EAAE9iB,MAAMgjB,eAAeC,cAAgBF,EAAE/iB,MAAMgjB,eAAeC,cAAsB,EACjF,KAGb,IAAIC,EAAM,EAAKC,yBAAyB,QACpCD,GACH,EAAKb,eAAee,OAAOF,EAAK,MAK/BvY,OAAM,SAACC,GACT,EAAKC,MAAMD,OAOL,YAAAqT,cAAR,SAAsBoF,GACI,MAArBljB,KAAKqN,eAKkB,MAAvBrN,KAAK8O,gBAA2B9O,KAAK8O,eAAekC,gBAK5B,MAAxBhR,KAAKmjB,iBAA4BnjB,KAAKmjB,gBAAgBnS,cAK1DhR,KAAK+I,SAAU,EAdd/I,KAAK+I,SAAU,GAiBT,YAAAia,yBAAR,SAAiCpjB,GAChC,IAAK,IAAIwB,EAAI,EAAGA,EAAIpB,KAAKkiB,eAAehgB,OAAQd,IAAK,CAEpD,GADUpB,KAAKkiB,eAAe9gB,GACtBxB,OAASA,EAChB,OAAOwB,EAIT,OAAO,MAGR,YAAAgiB,uBAAA,SAAuB/T,GACtBrP,KAAKqjB,iBAAmBhU,GAGzB,YAAAiU,kBAAA,SAAkBjU,GAAlB,WACCrP,KAAK8c,gBAAgBnF,qBAAqBtI,EAAEkU,KAAK3jB,KAAMI,KAAKS,cAAcb,MAAMsK,MAAK,SAAAuO,GACpF,EAAKpL,aAAeoL,EACpB,EAAKnL,cAAgBxL,KAAKD,MAAMC,KAAKC,UAAU,EAAKsL,kBAElD7C,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA+Y,OAAA,sBAEKC,EAA8BzjB,KAAKmjB,gBAAgBlS,eAEnDjR,KAAK8O,eAKT,IAAIkD,EAAU,CAAC,CACd,WAAc,mBACd,WAAc,eACd,kBAAoB,IAAIpQ,MAAOT,UAC/B,UAAasiB,EACb,iBAAoBzjB,KAAKoiB,SAG1BpiB,KAAKgiB,qBAAqB9P,oBAAoBpQ,KAAKC,UAAUiQ,IAC3D9H,MAAK,SAAAuO,GACL,EAAKiL,SAEL,EAAKha,WAAa,EAAK0D,aAAamC,KAAK,EAAAoU,sBAAuB,CAAElU,UAAU,IAC5E,EAAK/F,WAAWiG,QAAQxH,QAAU,EAAK8Z,gBAAgB2B,OAAO,qCAE5DpZ,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGbzK,KAAK+I,SAAU,GAGhB,YAAA2a,OAAA,WACC1jB,KAAK+I,SAAU,EACf/I,KAAKqN,aAAe,KACpBrN,KAAKsN,cAAgB,KACrBtN,KAAKmiB,YAAc,KACnBniB,KAAKS,cAAgB,KACrBT,KAAKoiB,OAAS,MAGR,YAAA1X,MAAP,SAAaD,GACZzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC1EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA3KxDlN,GAA4B,yM,iCAA5BA,EAA4B,8D,OAAA,M,w4CChBzC,6BAEA,+BACI,+BACI,4BAEI,4BACI,4BACI,4BACI,4BACJ,iBACJ,iBACA,4BACI,8BACI,gCACI,sEAEA,kCAEJ,iBACJ,iBACJ,iBACJ,iBAEA,8BACI,6BACI,6BACI,8BACJ,iBACJ,iBACA,6BACI,8BACI,gCAAmB,oEAAyB,wCAEnB,EAAA+lB,kBAAA,MAFzB,iBAKJ,iBACJ,iBACJ,iBAEA,gCAOA,8BACI,6BACI,6BACI,8BACJ,iBACJ,iBACA,6BACI,8BACI,mCAA6B,+DAAkD,iBACnF,iBACJ,iBACJ,iBAEA,6BACI,wBAEA,6BACI,8BACI,iCAA8C,wCAAS,EAAAI,YACnD,8BACJ,iBACA,iCAA8C,wCAAS,EAAAF,YACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBACJ,kB,4BA/D4B,wDAEQ,wDAeO,qDAAyB,4BAAzB,CAAyB,oBAAzB,CAAyB,yBAAzB,CAAyB,2BASnD,mDAeoC,gDAaoC,mD,oXD1DzF,GAKa,EAAAjmB,gC,oHElBb,KACA,MACA,MAFA,IAGA,OAGA,SAMA,GAJA,OACA,MAGA,QAGA,Q,0ICFgB,6BACE,6BACF,kB,mDAsBR,8DAGI,gGAOJ,iB,gCANI,8CAAoC,iCAApC,CAAoC,mCAApC,CAAoC,oBAApC,CAAoC,yBAApC,CAAoC,8C,mDAUxC,0BACE,mDAC2B,gGAG3B,iBACF,iB,gCAJI,iDAAwB,oBAAxB,CAAwB,8B,sBAqBpB,2BAAwC,kCAAmB,kB,mDALnE,6BACI,6BAA0B,4BAAO,6BAAyE,iBAAQ,iBAClH,6BACE,kCAAiG,iGAA0C,iBAC3I,6BACE,6BACF,iBACF,iBACJ,iB,gCALuG,+CAE5F,8C,2HDvDnB,aAkFI,WAAqB6P,EAAqC1D,EAC9CoT,EAA0CmF,EAClDtY,GAFiB,KAAAyD,eAAqC,KAAA1D,aAC9C,KAAAoT,kBAA0C,KAAAmF,kBApEtD,KAAAlZ,SAAmB,EAInB,KAAA8a,SAAmB,EAOnB,KAAAhU,gBAA0B,EAI1B,KAAAiU,eAA2B,KAW3B,KAAAC,oBAA8B,EAoB9B,KAAAC,iBAA2B,EAO3B,KAAA5C,QAAkB,KAKlB,KAAA1T,QAAgB,KAEhB,KAAAE,qBAA+B,EAW3B5N,KAAKikB,QAAUta,EAAYsa,UAC3BjkB,KAAKkkB,aAAelkB,KAAKikB,SAAWta,EAAYua,eAChDlkB,KAAKmkB,cAAgBnkB,KAAKikB,SAAWjkB,KAAKkkB,cAAgBva,EAAYya,gBAEtEpkB,KAAK0N,QAAU,IAAI9L,KAEnB,IAAMsf,EAAMlhB,KAAK0N,QAAQyT,aACzBnhB,KAAKohB,QAAUphB,KAAK0N,QAAQ2T,iBAAmB,KAAQrhB,KAAK0N,QAAQ4T,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,E,OAG9H,YAAA9Y,SAAA,aAIA,YAAAic,qBAAA,SAAsBC,EAAUvjB,GAC9B,IAAK,IAAIK,EAAY,EAAGA,EAAIkjB,EAASpiB,SAAUd,EAE7C,GAAIkjB,EAASljB,GAAGL,YAAcA,EAE5B,OAAOujB,EAASljB,GAIpB,OAAO,MAGT,YAAAmjB,gBAAA,SAAiBtO,GACbjW,KAAK0Y,aAAezC,GAGxB,YAAAuO,iBAAA,WACIxkB,KAAK0N,QAAU,IAAI9L,KAAMA,KAAKC,MAAO7B,KAAKohB,WAG9C,YAAAqD,qBAAA,SAAsBC,GAClB1kB,KAAK2kB,kBAAoBD,GAKtB,YAAAE,eAAP,SAAuBva,EAAkB+W,EAAiByD,GAA1D,WACI7kB,KAAK6P,gBAAiB,EACtB7P,KAAKohB,QAAUA,EACfphB,KAAK0N,QAAU,IAAI9L,KAAMA,KAAKC,MAAO7B,KAAKohB,UAC1CphB,KAAK6kB,mBAAqBA,EAE1B7kB,KAAK8kB,mBAAoBza,GACzBrK,KAAK+kB,eAEL/kB,KAAK8c,gBAAgBjF,qBAAsBxN,GAAWH,MAAM,SAAA8a,GACxD,EAAKC,gBAAkB,IAAI,EAAA9iB,kBAAkB,EAAK1B,cAAeukB,EAAQvM,UAAUnY,YACnF,EAAK4kB,iBAAmB,IAAI,EAAA/iB,kBAAkB,EAAK1B,cAAeqB,KAAKD,MAAOC,KAAKC,UAAW,EAAKkjB,kBAAoB3kB,YAEvH,EAAKqL,YAAcqZ,EAAQrZ,gBAK5B,YAAAwZ,yBAAP,SAAiCC,EAA0BtO,EAAmBsK,EAAiByD,GAA/F,WACQxa,EAAW+a,EAAYnW,OAAOwJ,UAAUnY,WAAWgB,KACvDtB,KAAK6P,eAAiBuV,EAAYnW,OAAOnF,MACzC9J,KAAKohB,QAAUA,EACfphB,KAAK0N,QAAU,IAAI9L,KAAMA,KAAKC,MAAOuf,IACrCphB,KAAK6kB,mBAAqBA,EAE1B7kB,KAAK8kB,mBAAoBza,GACzBrK,KAAK+kB,eAEqB,MAAtBK,EAAYnW,QAAgD,MAA9BmW,EAAYnW,OAAOwS,SAAmB2D,EAAYnW,OAAOwS,QAAQvf,OAAS,GAE1GlC,KAAK2L,YAAcyZ,EAAYnW,OAAOwS,QACtCzhB,KAAKgkB,iBAAkB,IAIvBhkB,KAAK8c,gBAAgBjF,qBAAsBxN,GAAWH,MAAM,SAAA8a,GAC1D,EAAKrZ,YAAcqZ,EAAQrZ,eAE7B3L,KAAKgkB,iBAAkB,GAIzBhkB,KAAKilB,gBAAkB,IAAI,EAAA9iB,kBAAkBnC,KAAKS,cAAe2kB,EAAYnW,OAAOwJ,UAAUnY,YAC9FN,KAAKklB,iBAAmB,IAAI,EAAA/iB,kBAAkBnC,KAAKS,cAAe2kB,EAAYnW,OAAOwJ,UAAUnY,YAE/FN,KAAK8jB,eAAiB,WACpB,IAAI3M,EAAS,CACXL,UAAYA,EACZuO,cAAeD,EAAYnP,GAC3BqP,WAAY,mBACZ9M,eAAgB,EAAK7M,YACrB8M,UAAW,EAAKgL,SAChB3Z,MAAOsb,EAAYnW,OAAOnF,OAG5B,EAAKgT,gBAAgB1F,mBAAoBD,GACtCjN,MAAK,WAE2B,MAA1B,EAAKya,mBACN,EAAKA,uBAGPna,OAAM,SAAEC,GACV,EAAKC,MAAOD,QAMf,YAAA8a,oBAAP,SAA4B3lB,EAAcyK,EAAkB+W,EAAiByD,GACzE7kB,KAAK6P,gBAAiB,EACtB7P,KAAKohB,QAAUA,EACfphB,KAAK0N,QAAU,IAAI9L,KAAMA,KAAKC,MAAO7B,KAAKohB,UAC1CphB,KAAK6kB,mBAAqBA,EAE1B7kB,KAAKwlB,eAAgB5lB,EAAMyK,GAC3BrK,KAAK8kB,mBAAoBza,GACzBrK,KAAKylB,iBAAkB7lB,EAAMyK,GAC7BrK,KAAK+kB,gBAGD,YAAAS,eAAR,SAAwB5lB,EAAcyK,GAAtC,WACIrK,KAAK8c,gBAAgBnF,qBAAsB/X,EAAMyK,GAAWH,MAAM,SAAAuO,GAC9D,EAAKwM,gBAAkB,IAAI,EAAA9iB,kBAAkB,EAAK1B,cAAeqB,KAAKD,MAAOC,KAAKC,UAAW0W,IAAcnY,YAC3G,EAAK4kB,iBAAmB,IAAI,EAAA/iB,kBAAkB,EAAK1B,cAAeqB,KAAKD,MAAOC,KAAKC,UAAW,EAAKkjB,kBAAoB3kB,YAGvH,EAAKmjB,SAAW,EAAKyB,iBAGrB,EAAKnB,oBAAqB,EAC1B,EAAKhb,SAAU,KACfyB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIZ,YAAAsa,aAAR,sBACI/kB,KAAK8c,gBAAgBpF,aAAaxN,MAAM,SAAAwb,GACpC,EAAKzD,gBAAgB0D,WAAYD,MACjClb,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIZ,YAAAqa,mBAAR,SAA4BllB,GAA5B,WACII,KAAK8c,gBAAgBnI,kBAAmB,CAAC/U,GAAO,MAC3CsK,MAAM,SAAAzJ,GACH,EAAKA,cAAgBA,EAAc,GAEP,MAAxB,EAAKwkB,kBAEP,EAAKA,gBAAgBxkB,cAAgB,EAAKA,eAEf,MAAzB,EAAKykB,mBAEP,EAAKA,iBAAiBzkB,cAAgB,EAAKA,eAGvC,EAAKA,cAAcokB,sBAIzBra,OAAM,SAAEC,GACRvB,QAAQC,IAAKsB,OAKjB,YAAAgb,iBAAR,SAA0B7lB,EAAcgmB,GAAxC,WACI5lB,KAAK8c,gBAAgBzG,2BAA4BzW,EAAMgmB,GAClD1b,MAAK,SAAEyB,GACJ,EAAKA,YAAcA,EAGnB,EAAKqY,iBAAkB,KAEvBxZ,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIxB,YAAAob,uBAAA,SAAwBhT,EAAMxI,GAA9B,WACI,OAAO,EAAAiY,WAAW/gB,QAAO,SAAEghB,GACvB,EAAKzF,gBAAgBxG,iCAAkCzD,EAAMxI,GAAWH,MAAM,SAAAsY,GAC1ED,EAAS9c,KAAM+c,UAK3B,YAAAc,kBAAA,SAAmBjU,EAAmByW,GAAtC,WACI9lB,KAAK8c,gBAAgB1G,mBAAoB/G,EAAEkU,KAAK3jB,KAAMkmB,EAAIrN,UAAUsN,WAAWzkB,MAC1E4I,MAAM,SAAAuO,GAEHqN,EAAIrN,UAAYA,KAEhBjO,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIhB,YAAAqT,cAAR,WACiC,MAAxB9d,KAAKmjB,kBACNnjB,KAAK+jB,mBAAqB/jB,KAAKmjB,gBAAgBnS,cAKvB,MAAvBhR,KAAKgmB,iBACNhmB,KAAKgkB,gBAAkBhkB,KAAKgmB,eAAehV,cAI/ChR,KAAK+I,QAAU/I,KAAK+jB,oBAAsB/jB,KAAKgkB,iBAGnD,YAAAiC,WAAA,SAAYC,EAAkBC,QAAA,IAAAA,OAAA,IACrBD,IAAalmB,KAAK6jB,UAAasC,KAKpCnmB,KAAKomB,sBAELpmB,KAAK6jB,SAAWqC,EAEhBlmB,KAAK8d,gBAIH9d,KAAK4N,oBAFU,IAAbsY,IAUA,YAAAE,oBAAR,WACiC,MAAxBpmB,KAAKmjB,kBACRnjB,KAAKklB,iBAAmBllB,KAAKmjB,gBAAgBlS,gBAEnB,MAAvBjR,KAAKgmB,iBACRhmB,KAAK2L,YAAc3L,KAAKgmB,eAAetE,kBAGzC1hB,KAAKyjB,SAAWzjB,KAAKklB,kBAOlB,YAAAxa,MAAP,SAAcD,GACRzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC3EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,IAGlE,YAAAiZ,OAAP,WACE1jB,KAAK0J,WAAWmD,QAGX,YAAA2W,OAAP,sBACOxjB,KAAK+I,UACR/I,KAAK0J,WAAWmD,OAEhB7M,KAAKomB,sBAEsB,MAAvBpmB,KAAK8jB,eAEP9jB,KAAK8c,gBAAgBvE,mBAAoBvY,KAAK2L,YAAa3L,KAAKyjB,SAAUzjB,KAAK6P,eAAgB7P,KAAK0Y,aAAc1Y,KAAK2Y,OACpHzO,MAAK,WAE2B,MAA1B,EAAKya,mBACN,EAAKA,uBAGPna,OAAM,SAAEC,GACV,EAAKC,MAAOD,MAKhBzK,KAAK8jB,mB,iCAtWFtmB,GAAwB,+L,iCAAxBA,EAAwB,yD,OAAA,M,+RAPtB,CAAC,EAAAtD,YAAS,umD,GAAA,MCvBzB,4BAEI,+BAQI,4BACI,4BAEI,8BAGJ,iBACJ,iBACA,4BAEI,4BACI,4BACI,8BAAqF,wCAAS,aAAgB,MAC1G,6BACJ,iBACA,+BAA8G,wCAAS,aAAgB,MACnI,6BACJ,iBACA,+BAAoH,8DAA+B,aAAgB,MAC/J,8BACJ,iBACJ,iBACJ,iBACJ,iBAIA,8DAcA,gCAkBA,gCAUC,8BACG,8BAA0B,6BAAO,8BAAkD,iBAAQ,iBAC3F,8BACI,gCAAuC,gEAAqB,4BAAW,EAAAsqB,sBAAvE,iBACJ,iBACJ,iBAEA,6BAEI,6BACI,8BACI,iCAA8C,wCAAS,EAAAd,YACnD,8BACJ,iBACA,iCAA8C,wCAAS,EAAAF,YACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,4BAvFqB,uDAS0C,8EAGA,iGAGA,oGAUnD,6HAaC,wEAkBA,oDAa0C,iDAW8B,8DACnD,sG,ixCD3ElC,GAWa,EAAAhmB,4B,kHE9Bb,KACA,MAEA,OAHA,I,uGCEQ,2BAGI,YACJ,kB,uBAFI,6GACA,sD,yBAJR,2BACI,6BAKJ,kB,6BAJQ,4DDGZ,iBAgBI,WAAqBykB,GAAA,KAAAA,kBAEjBjiB,KAAKqmB,YAAc,CAAC,MAAS,I,OAXjC,sBACI,oBAAK,C,IADT,SACUplB,GACNjB,KAAKqmB,YAAcplB,G,gCAavB,YAAAmH,SAAA,aAGA,YAAAI,YAAA,a,iCApBSpO,GAAsB,6C,iCAAtBA,EAAsB,iRCXnC,4BACI,6BAOJ,kB,MAPQ,uG,ioDDKR,GAKa,EAAAA,0B,8GEXb,SAEA,QACA,QAIA,GAHA,MAEA,OACA,QAEA,SACA,SACA,SAEA,SAEA,GADA,MACA,QAOA,GAFA,OAEA,QACA,SAEA,S,sMCSS,6BACC,gCAAQ,kGAA6B,MAAM,MAE1C,sBACA,6BACD,iBAE8B,gCAAQ,kGAA6B,MAAM,MAEvC,sBACA,6BACJ,iBAC/B,kB,mDAWE,2BAEC,2I,uBAEgC,iB,KADhC,kE,mDAQgC,2BACI,wIAAmC,MAEvC,kB,mDAhBlC,8BAEC,6BAMA,2BACC,uIAAmC,M,uBAEH,iBAEA,6BAIlC,iB,+DAdE,sEAOA,+EAGmC,kD,mDAMrC,8BACC,2BACC,uIAAmC,M,uBACU,iBAC/C,iB,MADE,gF,+FA7BH,4BAKC,YAEA,gCAmBA,gCAKD,kB,4CA7BuD,0BAAgB,yFADrD,mGAA6G,0BAI9H,oEAEM,2EAmBA,6E,yBA9CR,0BAEC,6BACC,4BAAO,YAAsC,iBAC9C,iBAEA,+BAcA,+BAgCD,kB,2DAjDS,+DAGH,oEAgBa,gD,yBAvBpB,4BACC,+BAqDD,kB,uBArDM,sD,mDAuEJ,6BACC,gCAAQ,mGAEP,sBACA,6BACD,iBACD,kB,mDASE,2BAEC,2I,uBAC8C,iB,KAA9C,kE,mDAJF,8BACC,6BAIA,2BACC,qIAAsC,M,uBACO,iBAC/C,iB,+DAPI,sEAMF,gF,mDAGF,8BACC,2BACC,qIAAsC,M,uBACO,iBAC/C,iB,MADE,gF,mGAnBH,4BAGC,0HACA,sBAA8B,YAE9B,gCAUA,gCAKD,iB,+CArB0D,0BAAqB,iFAIhD,oEAExB,2EAUA,6E,yBA9BR,0BAEC,6BACC,4BAAO,YAA2C,iBACnD,iBAEA,+BAQA,8BAsBD,kB,2DAjCS,+DAGH,oEAQD,sD,yBAfN,4BACC,+BAqCD,kB,uBArCM,4D,sBA8CR,6BAEC,6BACC,6BACC,2BACC,6BACD,iBACD,iBACD,iBACD,kBDzHL,IAGA,aAqFC,WAAYwN,EAA4CwF,EAC/CkZ,EAAgDC,EACxDtE,EAA8CnF,EAA0CnT,GAFzF,WAAwD,KAAAyD,eAC/C,KAAAkZ,qBAAgD,KAAAC,oBACV,KAAAzJ,kBAA0C,KAAAnT,cA/EzF,KAAA6c,iBAA2B,KAG3B,KAAAC,iBAAkC,KAElC,KAAAC,SAAqB,IAAI,EAAA5K,SAGzB,KAAAoG,eAAkC,GAElC,KAAAyE,iBAA0E,GAC1E,KAAAC,WAA8D,GAE9D,KAAAjV,OAAiB,GACjB,KAAAkV,yBAAkF,GAClF,KAAAC,mBAAsE,GAGtE,KAAAC,8BAA0C,CAAC,YAAa,mBACxD,KAAAC,8BAA0C,CAAC,QAE3C,KAAAC,SAAmB,EA4BnB,KAAAC,QAAU,CAMTC,aAAc,QACdC,cAAe,CACdC,MAAO,CACNC,MAAO,SAACC,EAAW1M,EAAW2M,GAC7B,EAAKC,gBAAgB5M,EAAM2M,IAE5BE,YAAa,SAACH,EAAW1M,EAAW2M,GACnC,EAAKG,aAAa9M,EAAM2M,MAI3BH,MAAO,IAkBPrnB,KAAK4H,iBAAmBA,EACxB5H,KAAKiiB,gBAAkBA,E,OAGxB,YAAA7Z,SAAA,sBACCpI,KAAK4nB,WAAW,MAEhB,EAAAC,UAAU7nB,KAAK8nB,YAAY3K,cAAe,SAASvW,KAGlD,EAAA+K,OAAOoW,SACP,EAAAC,aAAa,KACb,EAAAC,uBACA,EAAAC,KAAI,WACH,EAAKC,qBAGL3Z,aAGH,YAAAW,SAAA,SAASlC,GACR,OAAOjN,KAAKiiB,gBAAgB2B,OAAO3W,IAG5B,YAAAmb,WAAR,sBACC,GAA6B,MAAzBpoB,KAAKymB,kBAAwE,MAA5CzmB,KAAKymB,iBAAiB4B,oBAAiF,GAAnDroB,KAAKymB,iBAAiB4B,mBAAmBnmB,OAKjI,OAJAwY,EAAGjG,OAAO,QAAQ8E,cAClBvZ,KAAKkiB,eAAexgB,SAAQ,SAAC4mB,GACxBA,EAAIC,SAAU,KAKpB7N,EAAGjG,OAAO,mBAAmB8E,SAC7BmB,EAAGjG,OAAO,6BAA6B8E,SACvCmB,EAAGjG,OAAO,8BAA8B8E,SAExC,IAAIiP,EAAmB9N,EAAGjG,OAAO,iBAAiBoG,OAC9C4N,EAAaD,EAAYC,WACzBC,EAAcF,EAAYE,YAE1B3N,EAAML,EAAGjG,OAAO,QAEF,MAAdsG,EAAIF,SACPE,EAAML,EAAGjG,OAAO,cAAckG,OAAO,QACjCtZ,KAAK,KAAM,OAGhBrB,KAAK2oB,oBAAsB,IAAI,EAAAC,iBAAiB5oB,KAAM+a,EAAK/a,KAAKymB,kBAAkB,EAAMzmB,KAAKiiB,gBAAiBjiB,KAAKoN,cACnHpN,KAAK2oB,oBAAoBE,SAEzB7oB,KAAK8oB,sBAEL,IAAIC,EAAoBrO,EAAGjG,OAAO,iBAAiBoG,OACnDkO,EAAaN,WAAaA,EAC1BM,EAAaL,YAAcA,EAE3B1oB,KAAKgpB,sBAELhpB,KAAKkiB,eAAexgB,SAAQ,SAAC4mB,GACzBA,EAAIC,QAAU,EAAKU,iBAAiBX,OAIzC,YAAAQ,oBAAA,WACC,IAAI/N,EAAWL,EAAGjG,OAAO,QAGrB,EAFesG,EAAIF,OAEeC,UAAhCP,EAAC,IAAEF,EAAC,IAAEG,EAAK,QAAEF,EAAM,SAIzBS,EAAI1Z,KAAK,UAAYkZ,EAFJ,GAEoB,KAAOF,EAD3B,IAC2C,KAAOG,EAAQ0O,IAAgB,KAAO5O,EAAS6O,KAE3G3O,EAzKkC,KAyKzBA,EAAQ0O,IACjB5O,EAzKkC,KAyKxBA,EAAS6O,IAEnBzO,EAAGjG,OAAO,cAAcnL,MAAM,QAASkR,EAAQ,OAIhD,YAAAyO,iBAAA,SAAiBX,GACf,IAAIc,EAAqBppB,KAEzB,GAAgC,MAA5BA,KAAK2oB,oBAoCP,OAAO,EAlCP,GAAwD,MAApD3oB,KAAK2oB,oBAAoBU,cAAcf,EAAI1oB,MAE5C,OAAO,EAGT,GAAI0oB,EAAIgB,WACR,CACE,IAAI,GAAiB,EAYrB,GAVAtpB,KAAKkiB,eAAexgB,SAAQ,SAAC6nB,GACvBA,EAAMjf,gBAAkBge,EAAI1oB,MAE0C,MAApEwpB,EAAmBT,oBAAoBU,cAAcE,EAAM3pB,QAE7D,GAAiB,MAKnB,EAEF,OAAO,OAGN,GAAyB,MAArB0oB,EAAIhe,eAEoE,MAA3E8e,EAAmBT,oBAAoBU,cAAcf,EAAIhe,eAE3D,OAAO,EASd,OAAO,GAGT,YAAAkf,4BAAA,SAA4BlB,GAG3B,IAFA,IAAImB,EAAe,GAEVroB,EAAI,EAAGA,EAAIpB,KAAK2L,YAAYzJ,SAAUd,EAAG,CACjD,IAAIsoB,EAAgB1pB,KAAK2L,YAAYvK,GAErC,GAAwC,MAApCsoB,EAAcrB,oBAA8BqB,EAAcrB,mBAAmBnmB,OAAS,EACvEwY,EAAG3H,UAAU2W,EAAcrB,mBAAmB,IAAIsB,cAE5C/H,MAAK,SAAC/G,GAC7B,OAAOA,EAAKnH,KAAKjT,gBAAkB6nB,EAAI1oB,MAA4C,MAApCib,EAAKnH,KAAKkW,2BAIzDH,EAAatpB,KAAKupB,EAAc9pB,MAKnC,OAAO6pB,GAGA,YAAAI,qBAAR,WACC,IAuRIC,EAAgBC,EAAgBvP,EAvRhCwP,EAAOhqB,KAEPiqB,EAA4B,GAGhCA,EAAY9pB,KAAK,CAChB+pB,aAAc,sBAAuBC,OAAQ,SAASC,EAAiBC,GAMtE,GALmB,MAAfrqB,KAAKqqB,SACRrqB,KAAKqqB,OAAO/gB,MAAM,eAAgB,MAClCtJ,KAAKqqB,OAAS,MAGD,MAAVA,EAAgB,CACnB,IAAIC,EAAyBD,EAAOE,QAAQ,uBAEd,MAA1BD,IACHtqB,KAAKqqB,OAAS3P,EAAGjG,OAAO6V,GAAwBhhB,MAAM,eAAgB,cAGtEkhB,OAAQ,SAASJ,GACA,MAAfpqB,KAAKqqB,SACRrqB,KAAKqqB,OAAO/gB,MAAM,eAAgB,MAClC0gB,EAAK/pB,SAAS+pB,EAAKvD,iBAAiB7mB,KAAM,OAAQ8a,EAAGjG,OAAO2V,GAAQ/oB,KAAK,OACzErB,KAAKqqB,OAAS,SAMjBJ,EAAY9pB,KAAK,CAChB+pB,aAAc,qBAAsBC,OAAQ,SAASC,EAAiBK,EAAsB3hB,GAAhD,WAC3C9I,KAAK0qB,iBAEL,IAAIC,EAAa3qB,KAAKqqB,OAKtB,GAAW,MAFI3P,EAAGjG,OAAO,QAAQoG,OAEjC,CAGA,IAAI+P,EAAgB,EAAAC,SAAS/hB,EAAMgiB,YAAYC,MAAOjiB,EAAMgiB,YAAYE,OA0BxE,GAtBAhB,EAAKrB,oBAAoBsC,YAAYtB,cAAcjoB,SAAQ,SAACmZ,GAC3B,cAA5BA,EAAKnH,KAAKjT,eAAiC,EAAAyZ,cAAc0Q,EAAe/P,EAAKnH,KAAKwX,eACrF,EAAKb,OAAS3P,EAAGjG,OAAO,oEAAsEoG,EAAKnH,KAAKjT,cAAgB,MACxHoa,EAAKnH,KAAKyX,iBAAkB,EAET,MAAftQ,EAAK/H,SACR+H,EAAKnH,KAAKwX,aAAe,CAAE3Q,EAAGM,EAAKN,EAAI,EAAAqO,iBAAiBwC,SAAW,EAAG/Q,EAAGQ,EAAKR,EAAgC,EAA5B,EAAAuO,iBAAiByC,SAAc7Q,MAAO,EAAAoO,iBAAiBwC,SAAU9Q,OAAoC,EAA5B,EAAAsO,iBAAiByC,aAI7KxQ,EAAKnH,KAAKyX,iBAAkB,EAET,MAAftQ,EAAK/H,SACR+H,EAAKnH,KAAKwX,aAAe,CAAE3Q,EAAGM,EAAKN,EAAI,EAAAqO,iBAAiBwC,SAAW,EAAG/Q,EAAGQ,EAAKR,EAAI,EAAAuO,iBAAiByC,SAAW,EAAG7Q,MAAO,EAAAoO,iBAAiBwC,SAAU9Q,OAAQ,EAAAsO,iBAAiByC,gBAK5J,MAAfrrB,KAAKqqB,QAAiC,MAAdM,GAAqC,MAAf3qB,KAAKqqB,QAAkBM,EAAWtpB,KAAK,iBAAmBrB,KAAKqqB,OAAOhpB,KAAK,kBAC5HrB,KAAKsrB,iBAAgB,GAGH,MAAftrB,KAAKqqB,OAAgB,CACvB,IAAIkB,EAAc7Q,EAAGjG,OAAO2V,GAAQxP,QAAQ,oBACvC,EAAU5a,KAAKqqB,OAAOhpB,KAAK,gBAC7BmqB,EAAWxB,EAAKrB,oBAAoBsC,YAAYrJ,MAAK,SAAC/G,GAAW,OAAOA,EAAKnH,KAAKjT,gBAAkB,KACpGgrB,EAAczB,EAAK0B,wBAAwB,GAASpC,WAExDtpB,KAAKqqB,OAAOhpB,KAAK,SAAU,QAE3B,IAAMsqB,EAAUnQ,SAASxb,KAAKqqB,OAAOhpB,KAAK,MACpCuqB,EAAUpQ,SAASxb,KAAKqqB,OAAOhpB,KAAK,MAGpCwqB,EAAiB,EAAAjD,iBAAiBwC,SAClCU,EAAiB,EAAAlD,iBAAiByC,SAEpCU,EAAMrR,EAAGjG,OAAO,QAAQkG,OAAO,KAAKC,QAAQ,kBAAkB,GAG9DoR,IAA+C,MAArBR,EAASzrB,UAAgD,GAA5ByrB,EAASzrB,SAASmC,QACzE+pB,IAAmBR,GAAiBF,GAAgBS,GACxD,GAAIC,EACJ,CACEjsB,KAAKksB,cAAgBH,EAAIpR,OAAO,QAAQC,QAAQ,2BAA2B,GACzEvZ,KAAK,IAAKsqB,EAAW,EAAA/C,iBAAiBwC,SAAW,EAAMS,EAAS,GAChExqB,KAAK,IAAKuqB,EAAU,EAAAhD,iBAAiByC,SAAW,IAChDhqB,KAAK,QAASwqB,GACdxqB,KAAK,SAAUyqB,GACfzqB,KAAK,OAAQ,SAEfrB,KAAKmsB,QAAUJ,EAAIpR,OAAO,QAAQC,QAAQ,oBAAoB,GAC5DvZ,KAAK,IAAKsqB,EAAW,EAAA/C,iBAAiBwC,SAAW,EAAMS,EAAS,GAChExqB,KAAK,IAAKuqB,EAAU,EAAAhD,iBAAiByC,SAAW,IAChDhqB,KAAK,QAASwqB,GACdxqB,KAAK,SAAUyqB,GACfzqB,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,mBAAoB,OAE3B,IAAI+qB,EAAgBJ,EAAwBhC,EAAK/H,gBAAgB2B,OAAO,oCAAsCoG,EAAK/H,gBAAgB2B,OAAO,8BAC1I5jB,KAAKqsB,YAAcN,EAAIpR,OAAO,QAAQC,QAAQ,yBAAyB,GACrEvZ,KAAK,cAAe,cACpBA,KAAK,YAAa,IAClBA,KAAK,OAAQ,SACbA,KAAK,IAAKsqB,EAAW,EAAA/C,iBAAiBwC,SAAW,EAAK,EAAAkB,mBAAmBF,EAAe,IAAM,GAC9F/qB,KAAK,IAAKuqB,EAAU,EAAAhD,iBAAiByC,SAAW,GAAKS,EAAS,EAAI,GAClEjZ,KAAKuZ,GAIJ,IAAKb,EACL,CACHvrB,KAAKusB,eAAiBR,EAAIpR,OAAO,QAAQC,QAAQ,4BAA4B,GAC3EvZ,KAAK,IAAKsqB,EAAW,EAAA/C,iBAAiBwC,SAAW,EAAMS,EAAS,GAChExqB,KAAK,IAAKuqB,EAAU,EAAAhD,iBAAiB4D,WAAaV,GAClDzqB,KAAK,QAASwqB,GACdxqB,KAAK,SAAUyqB,GACfzqB,KAAK,OAAQ,SAEfrB,KAAKysB,SAAWV,EAAIpR,OAAO,QAAQC,QAAQ,qBAAqB,GAC9DvZ,KAAK,IAAKsqB,EAAW,EAAA/C,iBAAiBwC,SAAW,EAAMS,EAAS,GAChExqB,KAAK,IAAKuqB,EAAU,EAAAhD,iBAAiB4D,WAAaV,GAClDzqB,KAAK,QAASwqB,GACdxqB,KAAK,SAAUyqB,GACfzqB,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,mBAAoB,OAE1BqZ,EAAGjG,OAAO,2BAA2B8E,SACjC,IAAImT,EAAoC,MAAnBlB,EAAS1Y,OAAiBkX,EAAK/H,gBAAgB2B,OAAO,+BAAiCoG,EAAK/H,gBAAgB2B,OAAO,qCACxI5jB,KAAK2sB,aAAeZ,EAAIpR,OAAO,QAAQC,QAAQ,0BAA0B,GACtEvZ,KAAK,cAAe,cACpBA,KAAK,YAAa,IAClBA,KAAK,OAAQ,SACbA,KAAK,IAAKsqB,EAAW,EAAA/C,iBAAiBwC,SAAW,EAAK,EAAAkB,mBAAmBI,EAAgB,IAAM,GAC/FrrB,KAAK,IAAKuqB,EAAU,EAAAhD,iBAAiB4D,WAAaV,EAAS,EAAI,GAC/DjZ,KAAK6Z,GAIf,GAAI1sB,KAAK4sB,WAAa,IAGC,MAAlB5sB,KAAK4sB,WACR5sB,KAAKsrB,gBAAmC,MAAnBE,EAAS1Y,QAGR,MAAnB0Y,EAAS1Y,QAAgB,CAE5B,IADA,IAAI+Z,EAAc,KACTzrB,EAAI,EAAGA,EAAIoqB,EAAS1Y,OAAOY,KAAK3T,SAASmC,SAAUd,EAAG,CAChDoqB,EAAS1Y,OAAOY,KAAK3T,SAASqB,GAErCX,gBAAkB,IACxBosB,EAAczrB,EAAI,GAIpB,IAAI0rB,EAAkB9C,EAAK/H,gBAAgB2B,OAAO,8BAClD4H,EAAS1Y,OAAOY,KAAK3T,SAASkjB,OAAO4J,EAAa,EAAG,CAAEE,aAAc,EAAStsB,cAAe,YAAaZ,MAAOitB,EAAiB/sB,SAAU,KAE5IiqB,EAAK5B,aACLpoB,KAAK4sB,UAAY,EAInB,IAAII,EAAmBtS,EAAGjG,OAAO,+BAE5B8W,GAAe,EAAArR,cAAc0Q,EAAe,EAAAqC,qBAAqBjtB,KAAKysB,YAC1EzsB,KAAKysB,SAASprB,KAAK,SAAU,QAC7BrB,KAAK2sB,aAAatrB,KAAK,OAAQ,QAC/B4qB,GAAmBjsB,KAAKmsB,QAAQ9qB,KAAK,SAAU,SAC/C4qB,GAAmBjsB,KAAKqsB,YAAYhrB,KAAK,OAAQ,SACjD2rB,EAAiB3rB,KAAK,SAAU,SAChCrB,KAAKktB,SAAWltB,KAAKysB,UAEbR,GAAmB,EAAA/R,cAAc0Q,EAAe,EAAAqC,qBAAqBjtB,KAAKmsB,YACjFZ,GAAevrB,KAAKysB,SAASprB,KAAK,SAAU,UAC5CkqB,GAAevrB,KAAK2sB,aAAatrB,KAAK,OAAQ,SAC/CrB,KAAKmsB,QAAQ9qB,KAAK,SAAU,QAC5BrB,KAAKqsB,YAAYhrB,KAAK,OAAQ,QAC9B2rB,EAAiB3rB,KAAK,SAAU,SAChCrB,KAAKktB,SAAWltB,KAAKmsB,SAEc,MAA3Ba,EAAiBnS,QAAkB,EAAAX,cAAc0Q,EAAe,EAAAqC,qBAAqBD,OAC5FzB,GAAevrB,KAAKysB,SAASprB,KAAK,SAAU,UAC5CkqB,GAAevrB,KAAK2sB,aAAatrB,KAAK,OAAQ,SAC/C4qB,GAAmBjsB,KAAKmsB,QAAQ9qB,KAAK,SAAU,SAC/C4qB,GAAmBjsB,KAAKqsB,YAAYhrB,KAAK,OAAQ,SACjD2rB,EAAiB3rB,KAAK,SAAU,QAChCrB,KAAKktB,SAAW,cAGhB1C,OAAQ,SAASJ,GACnB,GAAmB,MAAfpqB,KAAKqqB,QAAmC,MAAjBrqB,KAAKktB,SAAkB,CACjD,IAAI,EAAUltB,KAAKqqB,OAAOhpB,KAAK,gBAC3BmqB,EAAWxB,EAAKrB,oBAAoBsC,YAAYrJ,MAAK,SAAC/G,GAAW,OAAOA,EAAKnH,KAAKjT,gBAAkB,KACpG0sB,EAAUzS,EAAGjG,OAAO2V,GAAQ/oB,KAAK,MAErC,GAAIrB,KAAKktB,WAAaltB,KAAKmsB,QAC1B,GAAqC,GAAjCX,EAAS9X,KAAK3T,SAASmC,OAC1B8nB,EAAK/pB,SAAS+pB,EAAKvD,iBAAiB7mB,KAAM,EAASutB,OAE/C,CAGJ,IAFA,IAAIC,EAAW,GAENhsB,EAAI,EAAGA,EAAIoqB,EAAS9X,KAAK3T,SAASmC,SAAUd,EACpDgsB,GAAsB5B,EAAS9X,KAAK3T,SAASqB,GAAGX,cAE5CW,EAAIoqB,EAAS9X,KAAK3T,SAASmC,OAAS,IACvCkrB,GAAsB,KAIxBpD,EAAKjjB,mBAAmBijB,EAAKvD,iBAAiB7mB,KAAM,EAASutB,EAASC,QAG/DptB,KAAKktB,WAAaltB,KAAKysB,SACR,MAAnBjB,EAAS1Y,OACZkX,EAAKjjB,mBAAmBijB,EAAKvD,iBAAiB7mB,KAAM,OAAQutB,EAAS,GAGrEnD,EAAKjjB,mBAAmBijB,EAAKvD,iBAAiB7mB,KAAM4rB,EAAS1Y,OAAOY,KAAKjT,cAAe0sB,EAAS,GAGxE,YAAlBntB,KAAKktB,UACblD,EAAK/pB,SAAS+pB,EAAKvD,iBAAiB7mB,KAAM4rB,EAAS1Y,OAAOY,KAAKjT,cAAeia,EAAGjG,OAAO2V,GAAQ/oB,KAAK,OAGvGrB,KAAK0qB,iBACL1qB,KAAKsrB,iBAAgB,IACnBZ,eAAgB,WACC,MAAf1qB,KAAKqqB,QACRrqB,KAAKqqB,OAAOhpB,KAAK,SAAU,MAG5BrB,KAAKqqB,OAAS,KACdrqB,KAAKktB,SAAW,KAEhBltB,KAAKmsB,QAAU,KACfnsB,KAAKysB,SAAW,KAEhB/R,EAAGjG,OAAO,mBAAmB8E,UAE3B+R,gBAAiB,SAASlD,GAAT,WACnB,GAAsB,MAAlBpoB,KAAK4sB,UAAmB,CAC3B,IAAIS,EAAYrD,EAAKrB,oBAAoBsC,YAAYrJ,MAAK,SAAC/G,GAAW,OAAOA,EAAKnH,KAAKqZ,eAAiB,EAAKH,aAE7G,GAAiB,MAAbS,EAAmB,CAEtB,IADA,IAAIR,EAAc,KACTzrB,EAAI,EAAGA,EAAIisB,EAAUva,OAAOY,KAAK3T,SAASmC,SAAUd,EAAG,CACjDisB,EAAUva,OAAOY,KAAK3T,SAASqB,GAEtC2rB,eAAiB/sB,KAAK4sB,YAC5BC,EAAczrB,GAIG,MAAfyrB,IACHQ,EAAUva,OAAOY,KAAK3T,SAASkjB,OAAO4J,EAAa,GAC/CzE,GACH4B,EAAK5B,cAKRpoB,KAAK4sB,UAAY,SAOKlS,EAAG4S,OAC1B1P,GAAG,SAAS,SAAS9U,GAEjB,GAAgB,UADL4R,EAAGjG,OAAOzU,MAAMqB,KAAK,gBAChC,CAKJ,IAAIksB,EAAOvtB,KAAKwtB,wBAChB1D,EAASyD,EAAKE,KAAO3kB,EAAMgiB,YAAYC,MACvChB,EAASwD,EAAKG,IAAM5kB,EAAMgiB,YAAYE,MACtCxQ,EAAQ+S,EAAK/S,UAEboD,GAAG,QAAQ,SAAS9U,GAEhB,GAAgB,UADF4R,EAAGjG,OAAOzU,MAAMqB,KAAK,gBACnC,CAKJqZ,EAAGjG,OAAO,mBAAmB8E,SAE7B,IAAIoU,EAAUjT,EAAGjG,OAAOzU,MAGxB2tB,EAAQrkB,MAAM,UAAW,QAEzB,IAAI+C,EAASuhB,SAASC,iBAAiB/kB,EAAMgiB,YAAYC,MAAOjiB,EAAMgiB,YAAYE,OAElF2C,EAAQrkB,MAAM,UAAW,MAEzB,IAAK,IAAIlI,EAAI,EAAGA,EAAI6oB,EAAY/nB,SAAUd,EACzC6oB,EAAY7oB,GAAG+oB,OAAOnqB,KAAMqM,EAAQvD,GAWjC,GAPJ6kB,EACE/S,QAAQ,YAAY,GACpBtR,MAAM,OAASR,EAAMgiB,YAAYC,MAAQjB,EAAU,MACnDxgB,MAAM,MAAQR,EAAMgiB,YAAYE,MAAQjB,EAAU,MAClDzgB,MAAM,QAASkR,EAAQ,MAGjBmT,EAAQ/S,QAAQ,oBACpB,CACE,IAAI,EAAQ,EACZF,EAAGoT,UAAU,wCAA0CH,EAAQtsB,KAAK,MAAQ,MAAM0sB,MAAK,WAEzErT,EAAGjG,OADDzU,MAIX4a,QAAQ,YAAY,GACpBtR,MAAM,OAASR,EAAMgiB,YAAYC,MAAQjB,EAAU,MACnDxgB,MAAM,MAAQR,EAAMgiB,YAAYE,MAAQjB,GAN7B/pB,KAM0CwtB,wBAAwBlT,OAAS,GAAG,EAAS,MAClGhR,MAAM,QAASkR,EAAQ,MAE1B,YAGNoD,GAAG,OAAO,SAAS9U,GACrB,IAAI6kB,EAAUjT,EAAGjG,OAAOzU,MACtB4a,QAAQ,YAAY,GACpBtR,MAAM,OAAQ,MACdA,MAAM,MAAO,MACbA,MAAM,QAAS,MAGTqkB,EAAQ/S,QAAQ,qBAElBF,EAAGoT,UAAU,wCAA0CH,EAAQtsB,KAAK,MAAQ,MAAM0sB,MAAK,WACzErT,EAAGjG,OAAOzU,MAGnB4a,QAAQ,YAAY,GACpBtR,MAAM,OAAQ,MACdA,MAAM,MAAO,MACbA,MAAM,QAAS,SAI1B,IAAK,IAAIlI,EAAI,EAAGA,EAAI6oB,EAAY/nB,SAAUd,EACzC6oB,EAAY7oB,GAAGopB,OAAOxqB,KAAM8I,KAI/BklB,CAAmBtT,EAAGoT,UAAU,2DAGzB,YAAA9E,oBAAR,WACC,IAGIc,EAAgBC,EAChBkE,EACAC,EALA9E,EAAqBppB,KAMJ0a,EAAG4S,OACtB1P,GAAG,SAAS,SAAS9U,GACrB,IAAI8hB,EAAqB,EAAAC,SAAS/hB,EAAMgiB,YAAYC,MAAOjiB,EAAMgiB,YAAYE,OAG7EkD,EAAS9E,EAAmBT,oBAAoBU,cAAc3O,EAAGjG,OAAOzU,MAAMqB,KAAK,iBAiCnF4sB,EAAaC,EAAOC,SAEpBrE,EAASmE,EAAW1T,EAAIqQ,EAAcrQ,EACtCwP,EAASkE,EAAW5T,EAAIuQ,EAAcvQ,KAEtCuD,GAAG,QAAQ,SAAS9U,GAEpB4R,EAAGjG,OAAO,mBAAmB8E,SAE7B,IAAIqR,EAAgB,EAAAC,SAAS/hB,EAAMgiB,YAAYC,MAAOjiB,EAAMgiB,YAAYE,QAExEkD,EAAS9E,EAAmBT,oBAAoBU,cAAc3O,EAAGjG,OAAOzU,MAAMqB,KAAK,kBAE5E+sB,OAAOxD,EAAcrQ,EAAIuP,EAAQc,EAAcvQ,EAAI0P,GAAQ,MAEhEnM,GAAG,OAAO,SAAS9U,GAEA4R,EAAGjG,OAAO,QAAQpT,KAAK,WAAWgtB,MAAM,KAE7DH,EAAOE,OAAOH,EAAW1T,EAAG0T,EAAW5T,GAAG,KAoD5CiU,CAAe5T,EAAGoT,UAAU,mIAGtB,YAAApC,wBAAP,SAA+B9rB,GAC9B,IAAK,IAAIwB,EAAI,EAAGA,EAAIpB,KAAKkiB,eAAehgB,SAAUd,EAAG,CACpD,IAAIknB,EAAqBtoB,KAAKkiB,eAAe9gB,GAE7C,GAAIknB,EAAI1oB,OAASA,EAChB,OAAO0oB,IAKH,YAAAiG,oBAAP,SAA2B3uB,GAC1B,IAAK,IAAIwB,EAAI,EAAGA,EAAIpB,KAAK2L,YAAYzJ,SAAUd,EAAG,CACjD,IAAIotB,EAAoBxuB,KAAK2L,YAAYvK,GAEzC,GAAIotB,EAAG5uB,OAASA,EACf,OAAO4uB,IAKF,YAAAvuB,SAAR,SAAiBoG,EAAuBC,EAAiCC,GAAzE,WACCvG,KAAK4H,iBAAiBxB,oBAAoBC,EAAeC,EAAyBC,GAAwB2D,MAAK,SAACskB,GAI/G,IAHA,IAAIlG,EAAM,EAAKoD,wBAAwBnlB,GAEnCkoB,EAAQ,KACHrtB,EAAI,EAAGA,EAAIknB,EAAIoG,mBAAmBxsB,SAAUd,EACpD,GAAIknB,EAAIoG,mBAAmBttB,KAAOiF,EAAe,CAChDooB,EAAQrtB,EACR,MAIW,MAATqtB,GACHnG,EAAIoG,mBAAmBvuB,KAAKkG,GAG7B,EAAKsoB,wBAAwBH,MAC3BhkB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIL,YAAA1D,mBAAR,SAA2BV,EAAuBC,EAAiCU,EAAiCC,GAApH,WACCjH,KAAK4H,iBAAiBb,mBAAmBV,EAAeC,EAAyBU,EAAyBC,GAA2BiD,MAAK,SAACskB,GAC1I,EAAKG,wBAAwBH,MAC3BhkB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAApC,gBAAA,aAIA,YAAAumB,KAAA,WACC,OAAO5uB,KAAK2J,YAAYilB,QAGzB,YAAAC,iBAAA,SAAiBzkB,EAAiB0kB,GACjC,YADiC,IAAAA,OAAA,GAC1B9uB,KAAK2J,YAAYklB,iBAAiBzkB,IAG1C,YAAA2kB,cAAA,SAAc7iB,GAGb,IAFA,IAAI8iB,EAA4B,GAEvB5tB,EAAI,EAAGA,EAAIpB,KAAKkiB,eAAehgB,SAAUd,EAAG,CACpD,IAAIX,EAA+BT,KAAKkiB,eAAe9gB,GAEnDX,EAAcgiB,mBAAqBvW,EAAItM,MAC1CovB,EAAS7uB,KAAKM,GAIhB,OAAOuuB,GAGR,YAAAC,oBAAA,SAAoB/iB,GAGnB,IAFA,IAAIgjB,EAAkC,GAE7B9tB,EAAI,EAAGA,EAAIpB,KAAK2L,YAAYzJ,SAAUd,EAAG,CACjD,IAAI2R,EAA2B/S,KAAK2L,YAAYvK,GAE5C2R,EAAU0P,mBAAqBvW,EAAItM,MACtCsvB,EAAe/uB,KAAK4S,GAItB,OAAOmc,GAGD,YAAAtH,WAAP,SAAkBuH,GAAlB,WAGCnvB,KAAKkiB,eAAiB,GAEtBliB,KAAK8c,gBAAgB7Q,OAAO/B,MAAK,SAAA0C,GAChC,EAAKqV,gBAAgB0D,WAAW/Y,EAAS8Y,SAEzC,EAAK0J,kBAAkBxiB,EAAS/G,OAEhC,EAAKwpB,cAAgBziB,EAASyiB,cAE9B,EAAKA,cAAc3tB,SAAQ,SAAAwK,GACtB,EAAK2iB,iBAAiB3iB,EAAItM,QAC7B,EAAK4mB,iBAAmBta,EAAItM,SAI9B,IAAImjB,EAAM,EAAKC,yBAAyB,QACpCD,GACH,EAAKb,eAAee,OAAOF,EAAK,GAGjC,EAAKuM,eAAe1iB,EAASjB,aAE7B,EAAK4jB,eAAeJ,GAEjB,EAAKK,8BAENhlB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIN,YAAA2kB,kBAAP,SAAyBvpB,GAAzB,WAGC7F,KAAKyvB,iBAAiB5pB,GAGtBA,EAAMnE,SAAQ,SAAAJ,GACRA,EAAKgoB,YACHhoB,EAAKgJ,eACV,EAAK4X,eAAe/hB,KAAKmB,MAM5BtB,KAAKkiB,eAAetJ,MAAK,SAAC+J,EAAGC,GAC5B,OAAID,EAAE9iB,MAAMgjB,eAAeC,cAAgBF,EAAE/iB,MAAMgjB,eAAeC,eAAuB,EAChFH,EAAE9iB,MAAMgjB,eAAeC,cAAgBF,EAAE/iB,MAAMgjB,eAAeC,cAAsB,EACjF,KAIbjd,EAAMnE,SAAQ,SAAAJ,GACb,IAAKA,EAAKgoB,YACLhoB,EAAKgJ,eAAiBhJ,EAAKgJ,cAAcpI,OAAS,EAErD,IAAK,IAAId,EAAI,EAAGA,EAAI,EAAK8gB,eAAehgB,OAAQd,IAAK,CACpD,IAAIsuB,EAAU,EAAKxN,eAAe9gB,GAC9BE,EAAKgJ,gBAAkBolB,EAAQ9vB,MAClC,EAAKsiB,eAAee,OAAO7hB,EAAI,EAAG,EAAGE,QAUnC,YAAAmuB,iBAAR,SAAyB5pB,GAAzB,WACCA,EAAMnE,SAAQ,SAAAJ,GACTA,EAAKgoB,YACR,EAAKpH,eAAe/hB,KAAKmB,OAKrB,YAAAkuB,yBAAP,sBACCxvB,KAAK2mB,iBAAmB,GACxB3mB,KAAK4mB,WAAa,GAElB,IAAK,IAAIxlB,EAAI,EAAGA,EAAIpB,KAAKqvB,cAAcntB,SAAUd,EAAG,CACnD,IAAI8K,EAAoBlM,KAAKqvB,cAAcjuB,GAE3CpB,KAAK2mB,iBAAiBxmB,KAAK,CAAE+L,IAAKA,EAAKP,YAAa3L,KAAKivB,oBAAoB/iB,KAC7ElM,KAAK4mB,WAAWzmB,KAAK,CAAE+L,IAAKA,EAAKrG,MAAO7F,KAAK+uB,cAAc7iB,KAG5DlM,KAAKkiB,eAAexgB,SAAQ,SAAC4mB,GACzBA,EAAIC,QAAU,EAAKU,iBAAiBX,MAGxCtoB,KAAKmoB,kBAGC,YAAAwH,4BAAP,SAAmC5c,GAClC,OAAwE,IAAhE/S,KAAK+mB,8BAA8B/d,QAAQ+J,EAAUnT,OAGvD,YAAAgwB,4BAAP,SAAmCnvB,GAClC,OAA4E,IAApET,KAAKgnB,8BAA8Bhe,QAAQvI,EAAcb,OAG1D,YAAA2vB,eAAR,SAAuBJ,GAEtB,IAAIV,GAAS,EASb,GAPwB,MAApBU,EACHV,EAAQzuB,KAAK2L,YAAYkkB,WAAU,SAAAhO,GAAK,OAAAA,EAAEjiB,OAASuvB,EAAiBvvB,QAE5DI,KAAK2L,YAAYzJ,OAAS,IAClCusB,EAAQ,GAGLA,GAAS,EAAG,CACf,IAAM1b,EAAY/S,KAAK2L,YAAY8iB,GAEnCzuB,KAAK8vB,oBAAoB/c,GAEzB/S,KAAKooB,eAIC,YAAA2H,aAAR,SAAqBC,GACpB,IAAI3jB,EAAwB,KAO5B,OANArM,KAAK2L,YAAYjK,SAAQ,SAAAqR,GACpBid,IAAgBjd,EAAUnT,OAC7ByM,EAAS0G,MAIJ1G,GAGA,YAAAijB,eAAR,SAAuB5b,GAAvB,WACK/H,EAA+B,GACnC+H,EAAKhS,SAAQ,SAACgoB,EAAe+E,GAExB/E,EAAcrB,mBAAmBnmB,OAAS,GAC7CwnB,EAAcrB,mBAAmB3mB,SAAQ,SAAAuuB,GACxC,EAAKC,sBAAsBD,MAI7BtkB,EAAYxL,KAAKupB,MAIlB1pB,KAAK2L,YAAcA,EAEnB3L,KAAK2L,YAAYiN,MAAK,SAAC+J,EAAGC,GACzB,OAAID,EAAE9iB,MAAMgjB,eAAeC,cAAgBF,EAAE/iB,MAAMgjB,eAAeC,eAAuB,EAChFH,EAAE9iB,MAAMgjB,eAAeC,cAAgBF,EAAE/iB,MAAMgjB,eAAeC,cAAsB,EACjF,MAIN,YAAAoN,sBAAR,SAA8BrV,GAA9B,WACa,MAARA,IACHA,EAAKhb,MAAQG,KAAKmwB,kBAAkBtV,EAAKpa,eAEzCoa,EAAK9a,SAAS2B,SAAQ,SAAA6nB,GACrB,EAAK2G,sBAAsB3G,QAKtB,YAAA4G,kBAAR,SAA0BzoB,GACzB,IAAI7H,EAAgB,KAOpB,OANAG,KAAKkiB,eAAexgB,SAAQ,SAAS0uB,GAChCA,EAAIxwB,OAAS8H,IAChB7H,EAAQuwB,EAAIvwB,MAAMgjB,mBAIbhjB,GAGD,YAAA8nB,aAAP,SAAoB9M,EAAW2M,GAC1BxnB,KAAK6uB,iBAAiB7uB,KAAKymB,iBAAiBhE,mBAC/CziB,KAAKsmB,mBAAmB/W,KAAK9J,KAAK,CACjCiiB,YAAsC,OAAxB7M,EAAKnH,KAAK2c,UAAqBrwB,KAAKswB,kBAAoBtwB,KAAKuwB,kBAC3EznB,MAAO0e,EACPjE,KAAM1I,IAEP2M,EAAOgJ,iBACPhJ,EAAOiJ,oBAGPjJ,EAAOgJ,iBACPhJ,EAAOiJ,oBAIF,YAAAhJ,gBAAP,SAAuB5M,EAAW2M,GAEjC3M,EAAK6V,UAAUC,eAAe9V,GAE1BA,EAAK6V,UAAUE,WAAW/V,GAC7BA,EAAKgW,WAGLhW,EAAK6V,UAAUI,aAIV,YAAAC,iBAAP,SAAwBjoB,EAAYya,GACnCvjB,KAAK8vB,oBAAoBvM,GACzBvjB,KAAKooB,cAGC,YAAA4I,gBAAP,sBACChxB,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA1T,kCAAmC,CAC3E2T,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAG0B1P,KAAK0J,WAAWiG,QAASshB,uBAAuBziB,WAAU,SAAAkF,GAE7F,EAAK/H,YAAYxL,KAAKuT,GAEtB,EAAK/H,YAAYiN,MAAK,SAAC+J,EAAkBC,GACxC,IAAIsO,EAAQvO,EAAE9iB,MAAMgjB,eAAesO,cAC/BC,EAAQxO,EAAE/iB,MAAMgjB,eAAesO,cAEnC,OAAID,EAAQE,GACH,EAGLF,EAAQE,EACJ,EAGD,KAGR,EAAK5B,+BAIA,YAAAloB,oBAAP,SAA2B+pB,GAA3B,WACCrxB,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,+BAAiC,KAAOyN,EAAIxxB,MAAMgjB,eAAiB,IACjI7iB,KAAK0J,WAAWiG,QAAQ+D,KAAO2d,EAAIzxB,KACnCI,KAAK0J,WAAWiG,QAAQrO,KAAO,SAC/BtB,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,uBAEzC5jB,KAAK0J,WAAWiG,QAAS6hB,UAAUhjB,WAAU,SAAAkF,GACpE,EAAK+d,oBAAoB/d,OAIpB,YAAAge,kBAAP,SAAyBL,EAAoB1jB,GAA7C,WAEC3N,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA1T,kCAAmC,CAC3E2T,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAEV1P,KAAK0J,WAAWiG,QAAQ9F,MAAO,EAC/B7J,KAAK0J,WAAWiG,QAAQhC,SAAWA,EACnC3N,KAAK0J,WAAWiG,QAAQ+Z,cAAgB2H,EACxCrxB,KAAK0J,WAAWiG,QAAQshB,uBAAuBziB,WAAU,SAAAkF,GACxD,IAAIqP,EAAM,EAAK4O,yBAAyBje,EAAK9T,MAE7C,EAAK+L,YAAYoX,GAAKljB,MAAQ6T,EAAK7T,MACnC,EAAK8L,YAAYoX,GAAKjjB,YAAc4T,EAAK5T,YACzC,EAAK6L,YAAYoX,GAAK6O,oBAAsBle,EAAKke,oBACjD,EAAKjmB,YAAYoX,GAAK7X,SAAWwI,EAAKxI,SACtC,EAAKS,YAAYoX,GAAK8O,gBAAkBne,EAAKme,gBAC7C,EAAKlmB,YAAYoX,GAAK+O,QAAUpe,EAAKoe,QAErC,EAAKtC,2BAED,EAAK/I,iBAAiB7mB,OAAS8T,EAAK9T,OACvC,EAAKkwB,oBAAoB,EAAKnkB,YAAYoX,IAE1C,EAAKqF,kBAKR,YAAA0H,oBAAA,SAAoBpG,GACnB1pB,KAAKymB,iBAAmBiD,GAGzB,YAAAqI,mBAAA,SAAmBhf,GAElB,OAAOA,EAAUnT,OAASI,KAAKymB,iBAAiB7mB,MAG1C,YAAA6xB,oBAAP,SAA2B7xB,GAA3B,WACCI,KAAK4H,iBAAiBN,oBAAoB1H,GAAMsK,MAAK,SAAA0C,GAEpD,IAAImW,EAAM,EAAK4O,yBAAyB/xB,GACxC,EAAK+L,YAAYsX,OAAOF,EAAK,GAC7B,EAAKyM,2BAED,EAAK7jB,YAAYzJ,OAAS,EAC7B,EAAK4tB,oBAAoB,EAAKnkB,YAAY,IAG1C,EAAK8a,iBAAmB,KAGzB,EAAK2B,gBAEH5d,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIN,YAAA4K,oBAAP,SAA2B2c,EAA+B1I,GAA1D,WACCtpB,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAxT,+BAAgC,CACxEyT,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAEV1P,KAAK0J,WAAWiG,QAAQ1D,KAAKjM,KAAKqvB,cAAervB,KAAKkiB,eAAgB8P,EAAgB1I,GAEtFtpB,KAAK0J,WAAWiG,QAAQsiB,mBAAmBzjB,WAAU,SAAAkF,GAEpDA,EAAKgb,mBAAqB,EAAKlF,4BAA4B9V,GAE3D,EAAKkU,WAAW,EAAKnB,sBAKhB,YAAAjR,oBAAP,SAA2B6b,GAA3B,WACCrxB,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,+BAAiC,KAAOyN,EAAIxxB,MAAMgjB,eAAiB,IACjI7iB,KAAK0J,WAAWiG,QAAQ+D,KAAO2d,EAAIzxB,KACnCI,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,uBACjE5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,EAAA4wB,WAAWC,OAElBnyB,KAAK0J,WAAWiG,QAAS6hB,UAAUhjB,WAAU,SAAAkF,GACpE,EAAK0e,oBAAoB1e,OAIpB,YAAA0e,oBAAP,SAA2BxyB,EAAcyyB,GAAzC,gBAAyC,IAAAA,MAAA,MACxCryB,KAAK8c,gBAAgBtH,oBAAoB5V,GAAMsK,MAAK,SAAA0C,GAEnD,IAAImW,EAAM,EAAKC,yBAAyBpjB,GACxC,EAAKsiB,eAAee,OAAOF,EAAK,GAEhC,EAAK6E,WAAW,EAAKnB,qBAEnBjc,OAAM,SAACC,GACU,MAAf4nB,GACHA,EAAY5nB,GAEb,EAAKC,MAAMD,OAIN,YAAA6nB,oBAAP,SAA2B7xB,EAA8BkN,GAAzD,WAEC3N,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAvS,kCAAmC,CAC3EwS,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,+BAGVjP,EAAcH,WAAWsY,MAAK,SAAC+J,EAAGC,GACjC,OAAID,EAAE9iB,MAAMgjB,eAAiBD,EAAE/iB,MAAMgjB,gBAAwB,EACpDF,EAAE9iB,MAAMgjB,eAAiBD,EAAE/iB,MAAMgjB,eAAuB,EACrD,KAEb7iB,KAAK0J,WAAWiG,QAAQlP,cAAgBA,EACxCT,KAAK0J,WAAWiG,QAAQhC,SAAWA,EAEC3N,KAAK0J,WAAWiG,QAAS4iB,yBAAyB/jB,WAAU,SAAAkF,GAC/F,IAAM8e,EAAW,EAAKxP,yBAAyBtP,EAAK9T,OAElC,IAAd4yB,IACH,EAAKtQ,eAAesQ,GAAY9e,GAIjC,EAAK8b,2BAEL,EAAK7jB,YAAYjK,SAAQ,SAACgoB,GACzB,EAAKwG,sBAAsBxG,EAAcrB,mBAAmB,OAIhC,MAAzB,EAAK5B,kBACR,EAAKyJ,sBAAsB,EAAKzJ,iBAAiB4B,mBAAmB,IAGrE,EAAKD,iBAIC,YAAAuJ,yBAAR,SAAiC/xB,GAChC,IAAK,IAAIwB,EAAI,EAAGA,EAAIpB,KAAK2L,YAAYzJ,OAAQd,IAAK,CAEjD,GADUpB,KAAK2L,YAAYvK,GACnBxB,OAASA,EAChB,OAAOwB,IAKF,YAAA4hB,yBAAR,SAAiCpjB,GAChC,IAAK,IAAIwB,EAAI,EAAGA,EAAIpB,KAAKkiB,eAAehgB,OAAQd,IAAK,CAEpD,GADUpB,KAAKkiB,eAAe9gB,GACtBxB,OAASA,EAChB,OAAOwB,EAIT,OAAO,MAGD,YAAAutB,wBAAP,SAA+BjF,GAC9B1pB,KAAKkwB,sBAAsBxG,EAAcrB,mBAAmB,IAE5D,IAAK,IAAIjnB,EAAI,EAAGA,EAAIpB,KAAK2L,YAAYzJ,SAAUd,EAAG,CACjCpB,KAAK2L,YAAYvK,GAEnBxB,OAAS8pB,EAAc9pB,OACpCI,KAAK2L,YAAYvK,GAAKsoB,EAEtB1pB,KAAK8vB,oBAAoBpG,IAI3B1pB,KAAKwvB,2BAELxvB,KAAKooB,cAGC,YAAAlhB,oBAAP,SAA2BurB,EAAeC,EAASL,GAAnD,gBAAmD,IAAAA,MAAA,MAClD,IAAMrI,EAAOhqB,KAEbA,KAAK4H,iBAAiBV,oBAAoBlH,KAAKymB,iBAAiB7mB,KAAM6yB,EAAeC,GAASxoB,MAAK,SAAAwf,GAKlG,IAHA,IAAIpB,EAAM0B,EAAK0B,wBAAwBgH,GAEnCjE,EAAQ,KACHrtB,EAAI,EAAGA,EAAIknB,EAAIoG,mBAAmBxsB,SAAUd,EACpD,GAAIknB,EAAIoG,mBAAmBttB,KAAOsoB,EAAc9pB,KAAM,CACrD6uB,EAAQrtB,EACR,MAIW,MAATqtB,GACHnG,EAAIoG,mBAAmBzL,OAAOwL,EAAO,GAGtCzE,EAAK2E,wBAAwBjF,MAE3Blf,OAAM,SAACC,GACU,MAAf4nB,GACHA,EAAY5nB,GAGb,EAAKC,MAAMD,OAIN,YAAAkoB,SAAP,SAAgBpP,GACf,OAAOvjB,KAAKymB,mBAAqBlD,GAGlC,YAAA4E,eAAA,sBACOtoB,EAAQG,KAAK2R,OAAOmR,cAE1B9iB,KAAK6mB,yBAA2B,GAChC7mB,KAAK8mB,mBAAqB,GAE1B9mB,KAAK2mB,iBAAiBjlB,SAAQ,SAAC6hB,GAE9B,IAAMqP,EAAWrP,EAAK5X,YAAYgG,QAAO,SAACoB,GAGzC,OAAmB,IAFLA,EAAUlT,MAAMgjB,eAAeC,cAAc9Z,QAAQnJ,MAKhE+yB,EAAS1wB,OAAS,GACrB,EAAK2kB,yBAAyB1mB,KAAK,CAAE+L,IAAKqX,EAAKrX,IAAKP,YAAainB,OAInE5yB,KAAK4mB,WAAWllB,SAAQ,SAAC6hB,GAExB,IAAMqP,EAAWrP,EAAK1d,MAAM8L,QAAO,SAACrQ,GAGnC,OAAmB,IAFLA,EAAKzB,MAAMgjB,eAAeC,cAAc9Z,QAAQnJ,MAK3D+yB,EAAS1wB,OAAS,GACrB,EAAK4kB,mBAAmB3mB,KAAK,CAAE+L,IAAKqX,EAAKrX,IAAKrG,MAAO+sB,OAIvD3V,YAAW,WAAQ,EAAK4M,yBAA2B,MAGpD,YAAAgJ,uBAAA,SAAuBrrB,EAA2BC,EAAoCC,GAAtF,WACC1H,KAAK4H,iBAAiBL,sBAAsBC,EAAmBC,EAA4BC,GAAmBwC,MAAK,SAACskB,GACnH,EAAKG,wBAAwBH,MAC3BhkB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAqoB,yBAAA,SAAyBtrB,EAA2BE,GAApD,WACC1H,KAAK4H,iBAAiBD,yBAAyBH,EAAmBE,GAAmBwC,MAAK,SAACskB,GAC1F,EAAKG,wBAAwBH,MAC3BhkB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIN,YAAAC,MAAP,SAAaD,GACZzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC1EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAt0CxDjP,GAAkB,wR,iCAAlBA,EAAkB,oD,OAAA,M,ytGCpC/B,4BACC,4BAEA,6BAEA,4BAGC,4BAEC,4BAEC,4BACC,4BACC,gCAC0D,+D,wBAD1D,iBAED,iBACD,iBACA,mCACC,yCACC,8BACC,+BACC,uBACD,iBACA,8BACD,iBACA,8BACC,+BAuDD,iBACD,iBACA,0CACC,8BACC,4BACC,uBACD,iBACA,8BACD,iBACA,8BACC,+BAuCD,iBACD,iBACD,iBACD,iBAEA,8BACC,8BAEC,gCAWA,yBAqBD,iBACD,iBACD,iBACD,iBAED,kB,MAjKO,8FAAwD,oBAGhD,6CAAmB,kBACZ,sEAQX,4DAyDW,yCAAe,0CAQ1B,kEA+CD,2N,2rHD7GV,GAMa,EAAAA,sB,6HEpCb,KACA,MADA,IAEA,QAEA,S,GAEA,OAEA,M,+ECHM,6BAAqE,YAAW,kB,6BAAX,+C,mDAerE,4BACE,+BACE,6BAAsD,YACxD,iBACA,+BAA6B,2FAA7B,iBAEF,iB,8CAJ0D,wDAEjD,mDAAqB,kBAArB,CAAqB,2B,mDAG9B,4BACE,+BACE,6BAA4D,YAC9D,iBACA,kCAAgC,2FAAkG,iBACpI,iB,8CAHgE,wDAEpD,mDAAqB,kBAArB,CAAqB,iC,yBAU7B,gCAA6D,YAA4B,kB,uBAA/C,6BAAmB,4D,mDAH/D,gCACE,0HACA,wBACA,kCACF,iB,gCAJkD,4CAA6B,4CAGrE,wD,mDAEV,8BAA8D,+BAAmB,6GAAnB,iBAAyF,iB,gCAAtE,4D,mDACjF,8BAAgC,+BAAmB,6GAAnB,iBAAyF,iB,gCAAtE,4D,mDA6B/C,gCACE,iGACA,6BACF,iB,gCAHwC,wDD9DpD,iBAsBC,WAAoBqF,EAAuCkyB,EAA2BjW,EAA0ClV,EAA2C8B,GAAvJ,KAAA7I,WAAuC,KAAAkyB,OAA2B,KAAAjW,kBAA0C,KAAAlV,mBAA2C,KAAA8B,aAd3K,KAAA2lB,cAAqB,GACrB,KAAAlnB,QAAkB,KAElB,KAAA0B,MAAgB,EAEhB,KAAA8D,UAAoB,E,OAWpB,YAAAvF,SAAA,sBACCpI,KAAKixB,uBAAyB,IAAI,EAAA/rB,QAElClF,KAAK0pB,cAAgB,CACpB,KAAQ,GACR,MAAS1pB,KAAKa,SAASU,SACvB,YAAevB,KAAKa,SAASU,SAC7B,mBAAsB,GACtB,iBAAoB,IAGrBvB,KAAK8c,gBAAgB7D,mBAAmB/O,MAAK,SAAA8oB,GAG5C,GAAK,EAAKrlB,SAUT,EAAK0hB,cAAgB2D,MAVF,CACnB,EAAK3D,cAAgB,GAErB,IAAK,IAAIjuB,EAAI,EAAGA,EAAI4xB,EAAK9wB,SAAUd,EAC9B,EAAK2xB,KAAKlE,iBAAiBmE,EAAK5xB,GAAGxB,OACtC,EAAKyvB,cAAclvB,KAAK6yB,EAAK5xB,IAQ3B,EAAKyI,MAAsC,IAA9B,EAAKwlB,cAAcntB,QAI5B,EAAK2H,MAAQ,EAAK8D,YAC1B,EAAKslB,kBAAoB,EAAKC,6BAA6B,EAAKxJ,cAAcjH,oBAJ9E,EAAKiH,cAAcjH,iBAAmB,EAAK4M,cAAc,GAAGzvB,KAC5D,EAAKqzB,kBAAoB,EAAK5D,cAAc,GAAGxvB,MAAMgjB,mBAMpDrY,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAyoB,6BAAA,SAA6B9oB,GAC5B,IAAK,IAAIhJ,EAAI,EAAGA,EAAIpB,KAAKqvB,cAAcntB,SAAUd,EAChD,GAAIpB,KAAKqvB,cAAcjuB,GAAGxB,OAASwK,EAClC,OAAOpK,KAAKqvB,cAAcjuB,GAAGvB,MAAMgjB,eAKrC,OADA3Z,QAAQC,IAAI,+BAAiCiB,EAAU,KAChDA,GAGR,YAAA3B,eAAA,sBACCzI,KAAKmI,QAAU,KAEXnI,KAAK2N,SACR3N,KAAK0J,WAAWmD,OAIb7M,KAAK6J,MACRX,QAAQC,IAAInJ,KAAK0pB,eAEjB1pB,KAAK4H,iBAAiBP,oBAAoBvF,KAAKC,UAAU/B,KAAK0pB,gBAAgBxf,MAAK,SAAAwJ,GAClF,EAAKud,uBAAuBxrB,KAAKiO,GACjC,EAAKhK,WAAWmD,UACdrC,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIZzK,KAAK4H,iBAAiBT,oBAAoBrF,KAAKC,UAAU/B,KAAK0pB,gBAAgBxf,MAAK,SAAAwJ,GAClF,EAAKud,uBAAuBxrB,KAAKiO,GACjC,EAAKhK,WAAWmD,UACdrC,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKd,YAAAC,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAnGrC5O,GAAiC,iM,iCAAjCA,EAAiC,ooEChB9C,2BAEE,4BACE,6BAEE,8BAEE,4BACE,yBACE,4BACF,iBACF,iBAEF,4BACE,8BACE,4BACF,iBACA,+BAAO,2EAAP,iBAEF,iBACA,+BAOA,+BAOA,6BACE,gCACE,8BACF,iBACA,mCAKA,iCACA,iCACF,iBAEA,6BACE,6BAAO,8BAAmE,iBAC1E,gCAAO,0FAAP,iBACF,iBAEA,6BACE,6BAAO,8BAAwD,iBAC/D,gCAAO,+EAAP,iBACF,iBAEA,6BACE,6BAAO,8BAA+D,iBACtE,gCAAO,sFAAP,iBACF,iBAEA,6BACE,6BAAO,8BAAuD,iBAC9D,gCAAO,8EAAP,iBACF,iBAEA,8BACE,8BACE,8BACE,iCAA8C,wCAAS,EAAA6N,WAAA,UACrD,8BACF,iBACA,mCAIF,iBACF,iBACF,iBAEF,iBACF,iBACF,kB,MA9EW,oDAYI,4DAAgC,+BAGjB,0EAOA,gFAWd,sEAKF,uEACA,2CAKC,2EAA+C,uBAK/C,gEAAoC,uBAKpC,uEAA2C,uBAK3C,+DAAmC,uBAS9B,kD,+RD9DpB,GAKa,EAAA7N,qC,0HEhBb,KACA,MADA,IAEA,QAEA,S,GAGA,OACA,M,wFCLI,6BAAqE,YAAW,kB,6BAAX,+C,qBAIjE,6B,qBACA,6B,mDAoBA,4BACE,4BACE,6BAAsD,YACxD,iBACA,+BAAO,2FAAP,iBAEF,iB,0BAJ0D,wDAEjD,+CAA+B,yBAA/B,CAA+B,wC,mDAQxC,4BACE,0BACE,4BACE,6BAA4D,YAC9D,iBACA,+BAAO,2FAAP,iBAEF,iBACF,iB,0BALkE,wDAEvD,+CAA+B,iC,mDAO9C,4BACE,6BACE,4BACE,6BACE,uCAAgC,kHAAuF,iBACzH,iBACF,iBACF,iBACF,iB,gCAJuB,0CAAgB,mCAAhB,CAAgB,kD,yBAoF/B,gCAA6D,YAA4B,kB,uBAA/C,6BAAmB,4D,mDAF/D,gCAAiF,0HAC/E,wBACA,kCACF,iB,gCAHiF,yDAEvE,wD,mDAEV,8BAAqD,+BAAuC,6GAAvC,iBAAyF,iB,gCAAlD,4D,2CDlItG,aAmBC,WAAoBgF,EAAuCkyB,EAA2BjW,EAAyCpT,GAA3G,KAAA7I,WAAuC,KAAAkyB,OAA2B,KAAAjW,kBAAyC,KAAApT,aAX/H,KAAA2lB,cAAgC,GAChC,KAAAlnB,QAAkB,K,OAYlB,YAAAC,SAAA,WACCpI,KAAKiyB,mBAAqB,IAAI,EAAA/sB,QAE9BlF,KAAKS,cAAgB,CACpB,KAAQ,GACR,MAAST,KAAKa,SAASU,SACvB,YAAevB,KAAKa,SAASU,SAC7B,aAAgB,aAChB,QAAU,EACV,oBAAsB,EACtB,iBAAoB,GACpB,WAAc,KAIhB,YAAA0K,KAAA,SAAKojB,EAA+B5N,EAA0BuQ,EAA+B1I,GAE5FtpB,KAAKS,cAAc6J,cAAgB0nB,EAAiBA,EAAepyB,KAAO,GAC1EI,KAAKS,cAAc6oB,WAAaA,IAA0B,EAC1DtpB,KAAKS,cAAcoe,aAAemT,EAAenT,aAGjD7e,KAAKyhB,QAAUA,EAAQ9P,QAAO,SAAAmB,GAAU,OAAAA,EAAOwW,cAG/CtpB,KAAKqvB,cAAgB,GAErB,IAAK,IAAIjuB,EAAI,EAAGA,EAAIiuB,EAAcntB,SAAUd,EACvCpB,KAAK+yB,KAAKlE,iBAAiBQ,EAAcjuB,GAAGxB,OAC/CI,KAAKqvB,cAAclvB,KAAKkvB,EAAcjuB,IAIN,IAA9BpB,KAAKqvB,cAAcntB,SACtBlC,KAAKS,cAAcgiB,iBAAmBziB,KAAKqvB,cAAc,GAAGzvB,KAC5DI,KAAKizB,kBAAoBjzB,KAAKqvB,cAAc,GAAGxvB,MAAMgjB,iBAIvD,YAAAqQ,6BAAA,SAA6B9oB,GAC5B,IAAK,IAAIhJ,EAAI,EAAGA,EAAIpB,KAAKqvB,cAAcntB,SAAUd,EAChD,GAAIpB,KAAKqvB,cAAcjuB,GAAGxB,OAASwK,EAClC,OAAOpK,KAAKqvB,cAAcjuB,GAAGvB,MAAMgjB,eAKrC,OADA3Z,QAAQC,IAAI,+BAAiCiB,EAAU,KAChDA,GAGR,YAAA3B,eAAA,sBACCzI,KAAKmI,QAAU,KAEfnI,KAAK8c,gBAAgBzH,oBAAoBvT,KAAKC,UAAU/B,KAAKS,gBAAgByJ,MAAK,SAAAwJ,GACjF,EAAKue,mBAAmBxsB,KAAKiO,GAC7B,EAAKhK,WAAWmD,UACdrC,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAA0oB,aAAA,WACCnzB,KAAKS,cAAc2yB,QAAUpzB,KAAKS,cAAc2yB,QAGjD,YAAAC,yBAAA,WACCrzB,KAAKS,cAAcokB,oBAAsB7kB,KAAKS,cAAcokB,oBAG7D,YAAAyO,iBAAA,WACCtzB,KAAKS,cAAc6oB,YAActpB,KAAKS,cAAc6oB,YAGrD,YAAA5e,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA3FrC1O,GAA8B,yJ,iCAA9BA,EAA8B,gsE,2BCjB3C,+BAAqB,sFAA0B,EAAA0M,oBAE7C,4BACE,8BAEA,4BACE,yBACE,mCACA,mCACF,iBACF,iBAEA,4BACE,4BACE,6BACE,2BACE,gCACE,8BACF,iBACA,gCAAO,2EAAP,iBAEF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,gCAOF,iBACF,iBAEA,6BACE,6BACE,gCASF,iBACF,iBAEA,gCAUA,6BACE,6BACE,6BACE,gCACE,8BACF,iBACA,iCAAgD,mFAC9C,yBAmBC,iCACC,8BACF,iBACA,iCACE,8BACF,iBACA,iCACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBAeA,6BACE,8BACE,6BACE,8BACE,8BAAK,wCAAS,EAAA4qB,8BAEZ,uBACF,iBAEA,gCACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,gCACE,8BACF,iBACA,mCAIA,iCACF,iBACF,iBACF,iBAEA,6BACE,6BACE,8BACE,iCAA8C,wCAAS,EAAA3pB,WAAA,UACrD,8BACF,iBACA,iCACE,8BACF,iBACF,iBACF,iBACF,iBAEF,iBACF,iB,+BA9JS,oDAIS,+DACA,gEAWC,4DASa,0EAYA,gFAYX,mEAgBqC,oEAAkD,iGAmDtD,mGAmBpC,6DAIF,8DAWgB,oD,iUD7IhC,GAKa,EAAA3N,kC,6HEjBb,KACA,MADA,IAGA,QAGA,SACA,S,GAEA,O,wJCJE,4CAAiG,wHAAyH,iB,gCAA/I,oCAAqB,gCAArB,CAAqB,qC,wBAEhG,2C,6BAA0E,+C,wBAE1E,kD,6BAAgF,+C,wBAEhF,gD,6BAA4E,8CAA+B,qC,wBAE3G,uC,6BAAuE,8CAA+B,qC,wBAEtG,0C,6BAAwE,8CAA+B,mCAA/B,CAA+B,uCDHzG,iBAaI,WAAoB2N,EAA+B6pB,EAAuCC,GAA1F,WAAoB,KAAA9pB,aAA+B,KAAA6pB,oBAAuC,KAAAC,iCAP1F,KAAArrB,QAAkB,KAClB,KAAA7C,WAA4C,CAAC,MAAQ,EAAArC,yBAAyBqvB,oBAAqB,UAAY,GAAI,WAAa,IAIhI,KAAA3kB,UAAoB,EAGlB3N,KAAKyzB,uBAAyBD,EAA+BruB,gBAAgBqJ,WAAW,SAAAlJ,GAClF,EAAKA,WAAaA,K,OAI1B,YAAA8C,SAAA,WACIpI,KAAKuyB,yBAA2B,IAAI,EAAArtB,SAGxC,YAAAsD,YAAA,WACIxI,KAAKyzB,uBAAuBC,eAGhC,YAAAC,mBAAA,SAAmBnuB,GACfxF,KAAKsF,WAAaE,GAGtB,YAAAouB,sBAAA,SAAsBlgB,GAGlB1T,KAAKuyB,yBAAyB9sB,KAAMiO,IAGxC,YAAAmgB,OAAA,aAIA,YAAAC,MAAA,WACI9zB,KAAK0J,WAAWmD,QAGpB,YAAAnC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAzC/CzN,GAAiC,4H,iCAAjCA,EAAiC,sdChB9C,2BAEE,sCAEA,8CAEA,kDAEA,yDAEA,uDAEA,8CAEA,iDAEF,kB,MAZuB,kFAEI,6EAEO,4EAEF,0EAET,8EAEG,8E,2UDH1B,GAKa,EAAAA,qC,uHEjBb,WAMA,GALA,MACA,MAIA,QAIA,GAFA,MAEA,Q,GACA,O,0GCTI,4BAAqE,YAAW,kB,8BAAX,+C,yBAgD7D,4BACI,6BACI,6BACJ,iBACA,6BACI,8BACI,YACJ,iBACJ,iBACJ,kB,8BAHY,4E,yBAsDQ,4BAA8E,YAA6B,kB,uBAA7B,4D,mDAgBtF,gCAAwF,0FACpF,6BACJ,iB,iCAFgE,uC,mDA1HpF,+BAAkE,wFAC9D,4BACI,yBACI,4BACA,YACJ,iBACJ,iBACA,+BACI,4BACI,6BACI,4BAAO,8BAAoD,iBAC/D,iBACA,8BACI,+BAAoB,gCAAmB,mHAAnB,iBACpB,iBACJ,iBACJ,iBAEA,0CAAuC,kHAAoE,iBAC3G,yCAAsC,wHAAgF,iBAkBtH,6BACI,8BACI,6BAAO,8BAAiD,iBAC5D,iBACA,8BACI,wCAAgC,mHAAuF,iBAC3H,iBACJ,iBAEA,gCAYA,6BACI,8BACI,6BAAO,8BAA4D,iBACvE,iBACA,8BACI,iCAA4B,2HACxB,yBACC,iCAA2B,8BAAsD,iBAClF,iCAA0B,8BAAqD,iBAC/E,iCAA6B,8BAAwD,iBAOzF,iBACJ,iBACJ,iBAGA,6BACI,8BACI,6BAAO,8BAA8E,iBACzF,iBACA,8BAEI,wCAAoC,+HAA6H,iBACrK,iBACJ,iBAEA,6BACE,8BACE,6BAAO,8BAAwD,iBACjE,iBACA,8BACE,+BAAoB,gCAAmB,8GAAnB,iBAAyF,iBAC/G,iBACF,iBAEA,6BACI,8BACI,6BAAO,8BAA0F,iBACrG,iBACA,8BACI,8BACI,8BACI,6BACI,+BACJ,iBAEA,iCAA8G,oGAC1G,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACQ,8BACI,iCAA8C,yFAC1C,8BACJ,iBACA,mCAGJ,iBACJ,iBACR,iBACJ,iB,iCA5HY,wFAS2C,gEAK9B,mDAAqB,mCACtB,mDAAqB,yCAuBd,0CAAgB,mCAAhB,CAAgB,iDAIf,+FAiBY,wEAsBb,mDAAoB,+CAApB,CAAoB,2EASA,2DAYnB,sEAGA,kFAaJ,iD,yBA7HhC,4BACI,8BAEA,iCAiIJ,kB,6BAnIS,oDAEgB,yDDSzB,iBA4BI,WAAqB4K,EAA2C8B,EAA+B6pB,EAAuCnmB,EAC1H2mB,EAA8DP,EAC9DQ,EAAkDlX,GAFzC,KAAAlV,mBAA2C,KAAA8B,aAA+B,KAAA6pB,oBAAuC,KAAAnmB,eAC1H,KAAA2mB,4BAA8D,KAAAP,iCAC9D,KAAAQ,sBAAkD,KAAAlX,kBAvBrD,KAAAnP,UAAoB,EAEnB,KAAAsmB,oBAAoD,IAAI,EAAA/rB,aAYlE,KAAAC,QAAkB,KAClB,KAAA7C,WAA4C,CAAC,MAAQ,EAAArC,yBAAyBqvB,oBAAqB,UAAY,GAAI,WAAa,IAEhI,KAAA4B,gBAA8B,CAAC,MAAS,CACpC,CAAC,MAAQl0B,KAAKg0B,oBAAoBpQ,OAAO,6CAA8C,QAAS,EAAM,SAAU,K,OAXpH,sBACI,iBAAE,C,IADN,SACOnjB,GACAA,IACDT,KAAKm0B,kBAAoBryB,KAAKD,MAAMC,KAAKC,UAAUtB,M,gCAiBzD,YAAA2H,SAAA,WAEIpI,KAAK+zB,0BAA0BK,cAAcp0B,KAAKk0B,iBAClDl0B,KAAKwzB,+BAA+BjuB,cAAcvF,KAAKsF,YAEvDtF,KAAKq0B,0BAGT,YAAAA,uBAAA,sBAEEr0B,KAAK8c,gBAAgB7D,mBAAmB/O,MAAK,SAAA8oB,GAE3C,IAAK,IAAI5xB,EAAI,EAAGA,EAAI4xB,EAAK9wB,SAAUd,EAE7B4xB,EAAK5xB,GAAGxB,OAAS,EAAKu0B,kBAAkB1R,mBAE1C,EAAKwQ,kBAAoBD,EAAK5xB,GAAGvB,MAAMgjB,mBAI1CrY,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIjB,YAAA6pB,iBAAA,WACIt0B,KAAKwzB,+BAA+BjuB,cAAc,CAAC,MAAQ,EAAAtC,yBAAyBqxB,iBAAkB,UAAY,GAAI,WAAa,MAGvI,YAAAX,mBAAA,SAAmBnuB,GACfxF,KAAKsF,WAAaE,GAGtB,YAAAquB,OAAA,sBACI7zB,KAAK8c,gBAAgBvH,oBAAqBvV,KAAKm0B,mBAAoBjqB,MAAM,SAAAzJ,GAIrE,EAAKwzB,oBAAoBvlB,KAAKjO,GAE9B,EAAKqzB,WAELtpB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAQpB,YAAAqpB,MAAA,WAEI9zB,KAAK0J,WAAWmD,QAIpB,YAAA9D,QAAA,WAkBI,OAAO,GAGX,YAAA2B,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA5G/CxN,GAA2B,6U,iCAA3BA,EAA2B,4kECjBxC,8B,KAAwB,oE,gpBDYxB,GAKa,EAAAA,+B,0HElBb,KACA,MACA,MAFA,IAGA,QAGA,SACA,SAGA,GAFA,MAEA,Q,GACA,O,uFCVI,4BAAqE,YAAW,kB,6BAAX,+C,mDAiCjC,2BAAoG,uIAC1C,kB,mDAC1D,2BAAuG,6IAC3C,kB,yBANpE,yBACI,yBAAI,YAA6B,iBACjC,4BACI,6BAEA,6BAEJ,iBACJ,kB,uBAPQ,2DAEG,qEAEA,sE,mDAjCvC,+BAA8D,wFAC1D,4BACI,yBACI,4BAAyE,YAAsC,iBACvH,iBACA,+BAEI,0BACI,4BACI,4BACI,6BACJ,iBACJ,iBACA,8BAEI,8BACI,gCACI,6BACI,0BACI,0BACI,8BACJ,iBACA,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BACI,+BASJ,iBACJ,iBACJ,iBAkBJ,iBACJ,iBACA,8BACI,wBAEA,8BACI,4BAAgG,uGAC5F,8BACJ,iBACJ,iBACJ,iBAEA,8BACI,8BACI,8BACI,iCAA8C,wFAC1C,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,gCA5EqF,iFAyBrD,oEDlBpC,iBAqBI,WAAqB2K,EAA2C8B,EAA+B6pB,EAAuCnmB,EAAsC6U,EAChK8R,EAA8DP,EAAwE1W,GAD7H,KAAAlV,mBAA2C,KAAA8B,aAA+B,KAAA6pB,oBAAuC,KAAAnmB,eAAsC,KAAA6U,kBAChK,KAAA8R,4BAA8D,KAAAP,iCAAwE,KAAA1W,kBAblJ,KAAA3U,QAAkB,KAClB,KAAA+rB,gBAA8B,CAAC,MAAS,CACpC,CAAC,MAAQl0B,KAAKiiB,gBAAgB2B,OAAO,6CAA8C,QAAS,EAAM,SAAU,GAC5G,CAAC,MAAQ5jB,KAAKiiB,gBAAgB2B,OAAO,0CAA2C,QAAS,EAAM,SAAU,KAE7G,KAAAte,WAA4C,CAAC,MAAQ,EAAArC,yBAAyBqxB,iBAAkB,UAAYt0B,KAAK2I,UAAW,WAAa,I,OAWzI,YAAAP,SAAA,WACIpI,KAAKu0B,kBAAoB,IAAI,EAAArvB,QAC7BlF,KAAK+zB,0BAA0BK,cAAcp0B,KAAKk0B,kBAGtD,YAAA1rB,YAAA,WACExI,KAAKu0B,kBAAkBb,eAGzB,YAAAc,qBAAA,WACIx0B,KAAKwzB,+BAA+BjuB,cAAc,CAAC,MAAQ,EAAAtC,yBAAyBwxB,gBAAiB,UAAY,GAAI,WAAa,MAGtI,YAAAC,cAAA,SAAcrzB,EAAiBgO,GAC3BrP,KAAKwzB,+BAA+BjuB,cAAc,CAAC,MAAQ,EAAAtC,yBAAyByxB,cAAe,UAAYrzB,EAAM,WAAa,MAGtI,YAAAszB,oBAAA,SAAoBtzB,EAAiBgO,GAArC,WAEErP,KAAKuzB,kBAAoBvzB,KAAKoN,aAAamC,KAAM,EAAA+hB,sBAAuB,CAC1E9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAKuzB,kBAAkB5jB,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,+BAAiC,IAAMviB,EAAKxB,MAAMgjB,eAAiB,IACrI7iB,KAAKuzB,kBAAkB5jB,QAAQ+D,KAAO,CAAC,cAAiBrS,EAAM,cAAiBrB,KAAKS,eACpFT,KAAKuzB,kBAAkB5jB,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,uBACxE5jB,KAAKuzB,kBAAkB5jB,QAAQrO,KAAO,EAAA4wB,WAAWC,OAE3BnyB,KAAKuzB,kBAAkB5jB,QAAU6hB,UAAUhjB,WAAW,SAAAkF,GACxE,EAAKkC,oBAAqBlC,EAAKjT,cAAcb,KAAM8T,EAAKkhB,mBAI9D,YAAAhf,oBAAA,SAAoBlO,EAA2BrG,GAA/C,WAEMrB,KAAK8c,gBAAgBlH,oBAAqBlO,EAAmBrG,EAAKzB,MAAOsK,MAAM,SAAAwJ,GAC7E,EAAK6gB,kBAAkB9uB,KAAMiO,GAE1BA,GACD,EAAKjT,cAAcH,WAAW2iB,OAAO,EAAKxiB,cAAcH,WAAW0I,QAAQ3H,GAAO,MAGpFmJ,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAqpB,MAAA,WACI9zB,KAAKwzB,+BAA+BjuB,cAAc,CAAC,MAAQ,EAAAtC,yBAAyBqvB,oBAAqB,UAAYtyB,KAAK2I,UAAW,WAAa,MAGtJ,YAAA+B,MAAA,SAAOD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAzEzCzO,GAA8B,6U,iCAA9BA,EAA8B,49CClB3C,4BACI,8BAEA,gCAiFJ,kB,MAnFS,oDAEgB,sD,0jBDUzB,GAKa,EAAAA,kC,gIElBb,KAQA,MARA,IAUA,SAKA,GAFA,MAEA,QAEA,GADA,OACA,Q,yFCVgB,6BAAqE,YAAW,kB,6BAAX,+C,oCDarF,aAoBI,WACQ0N,EACIqqB,EACAP,EACAvR,EACAnF,GAJJ,KAAApT,aACI,KAAAqqB,4BACA,KAAAP,iCACA,KAAAvR,kBACA,KAAAnF,kBAjBZ,KAAA3U,QAAkB,KAClB,KAAA0sB,aAA0B,KAC1B,KAAAX,gBAA8B,CAAC,MAAS,CACpC,CAAC,MAAQl0B,KAAKiiB,gBAAgB2B,OAAO,6CAA8C,QAAS,EAAM,SAAU,GAC5G,CAAC,MAAQ5jB,KAAKiiB,gBAAgB2B,OAAO,0CAA2C,QAAS,EAAM,SAAU,GACzG,CAAC,MAAQ5jB,KAAKiiB,gBAAgB2B,OAAO,yCAA0C,QAAS,EAAM,SAAU,KAE5G,KAAAte,WAA4C,CAAC,MAAQ,EAAArC,yBAAyBwxB,gBAAiB,UAAY,GAAI,WAAa,I,OAc5H,YAAArsB,SAAA,WACIpI,KAAK80B,aAAa,aAClB90B,KAAK+zB,0BAA0BK,cAAcp0B,KAAKk0B,kBAGtD,YAAA7rB,gBAAA,WAEOrI,KAAK+0B,yBACJ/0B,KAAK+0B,wBAAwBnsB,WAKrC,YAAAJ,YAAA,aAGA,YAAAC,eAAA,sBAEIzI,KAAK8c,gBAAgBrH,iBAAkBzV,KAAKS,cAAcb,KAAMI,KAAK60B,cAAe3qB,MAAM,SAAAwJ,GACtF,EAAKjT,cAAcH,WAAWH,KAAKuT,GAEnC,EAAK8f,+BAA+BjuB,cAAc,CAAC,MAAQ,EAAAtC,yBAAyBqxB,iBAAkB,UAAY,GAAI,WAAa,QACnI9pB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAqqB,aAAA,SAAaxzB,GAELtB,KAAK60B,aADG,SAATvzB,EACqB,IAAI,EAAAuB,cAAc,GAAIvB,EAAMtB,KAAKiiB,gBAAgB1gB,SAAUvB,KAAKiiB,gBAAgB1gB,UAAU,GAAO,GAAO,GAAO,GAEtH,UAATD,EACgB,IAAI,EAAA0B,iBAAiB,GAAI1B,EAAMtB,KAAKiiB,gBAAgB1gB,SAAUvB,KAAKiiB,gBAAgB1gB,UAAU,GAAO,GAAO,GAAO,GAGlH,IAAI,EAAAiB,UAAU,GAAIlB,EAAMtB,KAAKiiB,gBAAgB1gB,SAAUvB,KAAKiiB,gBAAgB1gB,UAAU,GAAO,GAAO,GAAO,IAIvI,YAAAyzB,YAAA,WAEI,IAAIC,GAAuB,EAM3B,OAJGj1B,KAAK+0B,0BACJE,EAAcj1B,KAAK+0B,wBAAwBhsB,aAG5CksB,GAOP,YAAAvR,OAAA,WACI1jB,KAAKwzB,+BAA+BjuB,cAAc,CAAC,MAAQ,EAAAtC,yBAAyBqxB,iBAAkB,UAAY,GAAI,WAAa,MAGvI,YAAA5pB,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAnF/CxO,GAAoC,6N,iCAApCA,EAAoC,uE,OAAA,K,cAYlC,EAAAa,yBAAuB,G,8gCCrCtC,4BAII,+BAAwC,2CAAY,EAAA2L,oBAChD,4BACI,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,4BACI,6BACI,6BACI,gCAAmG,wCAAS,EAAAqsB,aAAa,gBACrH,8BACJ,iBACA,gCAAiG,wCAAS,EAAAA,aAAa,cACnH,8BACJ,iBACA,gCAA+F,wCAAS,EAAAA,aAAa,YACjH,8BACJ,iBACA,gCAA8F,wCAAS,EAAAA,aAAa,WAChH,8BACJ,iBACA,gCAAiG,wCAAS,EAAAA,aAAa,cACnH,8BACJ,iBACA,gCAA8F,wCAAS,EAAAA,aAAa,WAChH,8BACJ,iBACJ,iBACJ,iBACJ,iBAEA,gCAEI,0CAAoI,uEAA6B,iBAEjK,6BACI,8BAII,8BACI,iCAA8C,wCAAS,EAAApR,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAzDqB,oDAWkD,iGAGA,+FAGA,6FAGA,4FAGA,+FAGA,4FASlC,mDAA0B,wBAA1B,CAA0B,0CAA1B,CAA0B,4BAWe,2D,sqCDjC9E,GAKa,EAAAznB,wC,2HEzBb,SACA,Q,OAwBA,iBASE,aACE+D,KAAKk1B,UA7BA,SAACC,GACN,GAAGA,EAAEl0B,MAGD,OAFwC,IAA1Bk0B,EAAEl0B,MAAM+H,QAAQ,KAGnB,KAEA,CACHosB,uBAAwB,CACnBtnB,OAAO,K,OAuB1B,YAAAunB,SAAA,SAASF,GACP,OAAOn1B,KAAKk1B,UAAUC,I,iCARbx4B,I,iCAAAA,EAA+B,yFAJ/B,CACT,CAAE24B,QAAS,EAAAC,cAAeC,YAAa74B,EAAiC84B,OAAO,Q,EAHnF,GAMa,EAAA94B,mC,8HC/Bb,KAOA,MAPA,IAUA,SAEA,SAOA,GAJA,MAEA,OAEA,Q,kGCdgB,6BAAqE,YAAW,kB,6BAAX,+C,sBAOjE,4BAA6D,6BAAwE,iBAAE,6BAAgD,kB,sBACvL,4BAA2D,6BAAwE,iBAAE,6BAAmD,kB,sBACxL,4BAAyD,6BAAwE,iBAAE,6BAAiD,kB,sBACpL,4BAA2D,6BAAwE,iBAAE,6BAAmD,kB,sBACxL,4BAAwD,6BAAwE,iBAAE,6BAAgD,kB,sBAClL,4BAAwD,6BAAwE,iBAAE,6BAAgD,kB,mDAUlL,4CAAuE,uGAA0D,iB,gCAA1D,sCAAyB,kCDJpH,iBAqBC,WAAmB+M,EACVqqB,EACAP,EACAvR,EACAnF,GAJU,KAAApT,aACV,KAAAqqB,4BACA,KAAAP,iCACA,KAAAvR,kBACA,KAAAnF,kBAhBT,KAAA3U,QAAkB,KAClB,KAAA7C,WAA4C,CAAE,MAAS,EAAArC,yBAAyByxB,cAAe,UAAa10B,KAAK2I,UAAW,WAAc,IAC1I,KAAAurB,gBAA8B,CAC7B,MAAS,CACR,CAAE,MAASl0B,KAAKiiB,gBAAgB2B,OAAO,6CAA8C,QAAU,EAAM,SAAW,GAChH,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,0CAA2C,QAAU,EAAM,SAAW,GAC7G,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,uCAAwC,QAAU,EAAM,SAAW,K,OAa5G,YAAAxb,SAAA,WACCpI,KAAK+zB,0BAA0BK,cAAcp0B,KAAKk0B,kBAGnD,YAAA7rB,gBAAA,aAIA,YAAAG,YAAA,aAGA,YAAAC,eAAA,sBAECzI,KAAK8c,gBAAgBnH,oBAAoB3V,KAAKS,cAAcb,KAAMI,KAAK2I,WAAWuB,MAAK,SAAAwJ,GAEtF,IAAK,IAAItS,EAAI,EAAGA,EAAI,EAAKX,cAAcH,WAAW4B,OAAQd,IAAK,CAC9D,IAAIC,EAAO,EAAKZ,cAAcH,WAAWc,GACzC,GAAIC,EAAKzB,OAAS8T,EAAK9T,KAAM,CAC5B81B,OAAOC,OAAOt0B,EAAMqS,GACpB,OAIF,EAAK8f,+BAA+BjuB,cAAc,CAAE,MAAS,EAAAtC,yBAAyBqxB,iBAAkB,UAAa,GAAI,WAAc,QACrI9pB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAuqB,YAAA,WASC,OAAO,GAGR,YAAAtR,OAAA,WACC1jB,KAAKwzB,+BAA+BjuB,cAAc,CAAE,MAAS,EAAAtC,yBAAyBqxB,iBAAkB,UAAa,GAAI,WAAc,MAGxI,YAAAsB,KAAA,WACC51B,KAAKwzB,+BAA+BjuB,cAAc,CAAE,MAAS,EAAAtC,yBAAyBqxB,iBAAkB,UAAa,GAAI,WAAc,MAGxI,YAAA5pB,MAAA,SAAMD,GACJzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAzEtC7N,GAAkC,6N,iCAAlCA,EAAkC,qE,OAAA,K,cAcnC,EAAAE,yBAAuB,G,yoCC1CnC,4BAEI,+BAAwC,sFAA0B,EAAA2L,oBAC9D,4BACI,4BACI,8BAEA,4BACI,yBACI,4BAAqE,YACzE,iBAEA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACJ,iBAIA,gCAEI,yCAAmK,oEAA0B,iBAG7L,8CAEA,8BACI,8BAII,8BACI,iCAA8C,wCAAS,EAAAib,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAGJ,iB,MA7CqB,oDAIwE,+EAGnD,mEACA,iEACA,+DACA,iEACA,8DACA,8DAOL,mDAAyB,+CAAzB,CAAyB,uCAAzB,CAAyB,yBAGtB,+EAWsC,2D,26CDf9E,GAKa,EAAA9mB,sC,qHE5Bb,WACA,OASA,GAFA,MAEA,Q,GACA,OACA,O,wECAwB,4BAA6E,YAA6B,kB,uBAA7B,4DDMrG,iBA0CI,WAAqBgL,EAA2C8B,EAAgC7B,EAAgC2rB,GAA3G,KAAA5rB,mBAA2C,KAAA8B,aAAgC,KAAA7B,MAAgC,KAAA2rB,iCALtH,KAAAvrB,gBAAkB,IAAI,EAAAC,aAChC,KAAAC,QAAkB,KAClB,KAAA3C,MAAgB,OAChB,KAAAF,WAA4C,CAAC,MAAQ,EAAArC,yBAAyB4yB,iBAAkB,UAAY71B,KAAK2I,UAAW,WAAa,I,OAKzI,YAAAP,SAAA,aAIA,YAAAC,gBAAA,WACIrI,KAAKwF,MAAQ,OACbxF,KAAK6H,IAAIS,iBAGb,YAAAE,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAG,QAAA,WACI5I,KAAKwF,MAAQ,QAGjB,YAAAqD,gBAAA,SAAgBC,GACZ9I,KAAKwF,MAAQ,QAyBjB,YAAAswB,sBAAA,WACI91B,KAAKwzB,+BAA+BjuB,cAAc,CAAC,MAAQ,EAAAtC,yBAAyB4yB,iBAAkB,UAAY71B,KAAK2I,UAAW,WAAc,M,iCA5D3I9L,GAAyB,2K,iCAAzBA,EAAyB,sjBCnDtC,4BAAgD,sDAAsB,EAAAgM,gBAAA,MAElE,0BACI,4BACI,4BACI,4BACJ,iBACJ,iBACA,4BACI,4BACI,4BACI,2BACI,6BACJ,iBAEA,gCAAyD,wCAAS,EAAAitB,2BAC9D,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAvBwB,sCAYI,uE,2nBDUZ,CACR,EAAAzsB,QAAQ,eAAgB,CACpB,EAAA7D,MAAM,aACF,EAAA8D,MAAM,CAAE,QAAW,KAErB,EAAA9D,MAAM,OACJ,EAAA8D,MAAM,CAAE,QAAW,KAErB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,UACnC,EAAAW,WAAW,eAAgB,EAAAX,QAAQ,YAEzC,EAAAS,QAAQ,YACJ,CACA,EAAAE,WACI,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAV,QAAQ,QAAS,EAAAU,MAAM,CAAE,QAAW,OAGxC,EAAAC,WACI,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAV,QAAQ,MAAO,EAAAU,MAAM,CAAC,QAAW,a,EA1BjD,GAiCa,EAAAzM,6B,sHEnDb,WACA,OAWA,GAJA,MACA,MAGA,QACA,SAIA,GAHA,MAEA,OACA,Q,wFCZY,6BAAqE,YAAW,kB,6BAAX,+C,yBAuBrC,yBACI,6BAAsD,YAC1D,kB,uBAD0D,yD,yBAU1D,yBAA0D,YAAqB,kB,uBAArB,6C,mDAF9D,yBACI,yBAAI,YAAe,iBACnB,8BACA,4BACI,2BAAiD,uHAAyC,iBAC1F,2BAAoD,yHAA2C,iBACnG,iBACJ,iB,0BANQ,2CACA,6D,mDAUJ,yBACI,+BAAmB,2FAAnB,iBACJ,iB,8CADuB,+CAA+B,mCAA/B,CAA+B,uCD/BlG,iBAmDC,WAAmB6M,EAAgC7B,EAAgC2rB,EAC1EpmB,EAAsC6U,EAA8C8R,EACpFjX,GAFU,KAAApT,aAAgC,KAAA7B,MAAgC,KAAA2rB,iCAC1E,KAAApmB,eAAsC,KAAA6U,kBAA8C,KAAA8R,4BACpF,KAAAjX,kBAhBC,KAAA7U,gBAAkB,IAAI,EAAAC,aAChC,KAAAC,QAAkB,KAElB,KAAA3C,MAAgB,OAChB,KAAAuwB,sBAAuB,EACvB,KAAA7B,gBAA8B,CAC7B,MAAS,CACR,CAAE,MAASl0B,KAAKiiB,gBAAgB2B,OAAO,6CAA8C,QAAU,EAAM,SAAW,GAChH,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,0CAA2C,QAAU,EAAM,SAAW,GAC7G,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,uCAAwC,QAAU,EAAM,SAAW,GAC1G,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,4CAA6C,QAAU,EAAM,SAAW,K,OASjH,YAAAxb,SAAA,WACCpI,KAAK+zB,0BAA0BK,cAAcp0B,KAAKk0B,iBAClDl0B,KAAKg2B,WAAa,IAAI,EAAA51B,KAAK,GAAIJ,KAAKiiB,gBAAgB1gB,SAAUvB,KAAKiiB,gBAAgB1gB,WAGpF,YAAA8G,gBAAA,WACCrI,KAAKwF,MAAQ,OACbxF,KAAK6H,IAAIS,iBAGV,YAAAE,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAG,QAAA,WACC5I,KAAKwF,MAAQ,QAGd,YAAAqD,gBAAA,SAAgBC,GACf9I,KAAKwF,MAAQ,QAGd,YAAAuD,QAAA,WACC,GAAI/I,KAAKg2B,WAAWp2B,MAAQI,KAAKg2B,WAAWp2B,KAAKsC,OAAS,EAAG,CAG5D,IAA2C,IAAvClC,KAAKg2B,WAAWp2B,KAAKoJ,QAAQ,KAChC,OAAO,EAIR,IAAK,IAAI5H,EAAI,EAAGA,EAAIpB,KAAKg2B,WAAWn2B,MAAMoJ,aAAa/G,OAAQd,IAC9D,GAA8E,IAA1EpB,KAAKg2B,WAAWn2B,MAAMoJ,aAAa7H,GAAGH,MAAMg1B,QAAQ,MAAO,IAAI/zB,OAClE,OAAO,EAKT,OAAO,EAEH,OAAIlC,KAAKg2B,WAAWp2B,MAAQI,KAAKg2B,WAAWp2B,KAAKoJ,QAAQ,MACtD,GAMT,YAAAktB,cAAA,sBAECl2B,KAAK8c,gBAAgBhH,2BAA2B9V,KAAK2I,UAAUjG,SAAS9C,KAAMI,KAAKg2B,YAAY9rB,MAAK,SAAAwJ,GAEnG,EAAK/K,UAAUjG,SAAS3C,SAASI,KAAKuT,GAEtC,EAAKzL,gBAAgByG,KAAK,EAAK/F,WAE/B,EAAKwtB,kBAEL,EAAKJ,sBAAuB,KAE1BvrB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAA2rB,iBAAA,SAAiBJ,GAAjB,WAECh2B,KAAK8c,gBAAgB9G,8BAA8BhW,KAAK2I,UAAUjG,SAAS9C,KAAMo2B,EAAWp2B,MAAMsK,MAAK,SAAAwJ,IAExC,IAA1D,EAAK/K,UAAUjG,SAAS3C,SAASiJ,QAAQgtB,IAC5C,EAAKrtB,UAAUjG,SAAS3C,SAASkjB,OAAO,EAAKta,UAAUjG,SAAS3C,SAASiJ,QAAQgtB,GAAa,GAG/F,EAAK/tB,gBAAgByG,KAAK,EAAK/F,WAE/B,EAAKwtB,qBAEH3rB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAA4rB,iBAAA,SAAiBL,GAAjB,WACCh2B,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,+BAAiC,IAAMoS,EAAWn2B,MAAQ,IACxHG,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,uBACjE5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,EAAA4wB,WAAWC,OAElBnyB,KAAK0J,WAAWiG,QAAS6hB,UAAUhjB,WAAU,SAAAkF,GACpE,EAAK0iB,iBAAiBJ,OAIxB,YAAAM,eAAA,SAAeN,GAEd,IAAMxwB,EAAQ,CACb,MAAS,EAAAvC,yBAAyBqzB,eAClC,UAAat2B,KAAK2I,UAClB,WAAc7G,KAAKD,MAAMC,KAAKC,UAAUi0B,KAGzCh2B,KAAKwzB,+BAA+BjuB,cAAcC,IAGnD,YAAA2wB,gBAAA,WACCn2B,KAAKg2B,WAAWp2B,KAAO,GACvBI,KAAKg2B,WAAWn2B,MAAQG,KAAKiiB,gBAAgB1gB,SAC7CvB,KAAKg2B,WAAWl2B,YAAcE,KAAKiiB,gBAAgB1gB,UAGpD,YAAAg1B,iBAAA,WACCv2B,KAAKm2B,kBACLn2B,KAAK+1B,sBAAuB,GAG7B,YAAAD,sBAAA,WACC91B,KAAK+1B,sBAAuB,GAG7B,YAAAjC,MAAA,WACC9zB,KAAKwzB,+BAA+BjuB,cAAc,CAAE,MAAS,EAAAtC,yBAAyByxB,cAAe,UAAa10B,KAAK2I,UAAW,WAAc,MAGjJ,YAAA+B,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA5JrCvN,GAA0B,4S,iCAA1BA,EAA0B,sqC,2BCpDvC,4BAEI,+BAAwC,wFACpC,+BAEI,8BAEA,4BACI,yBACI,iCAA6D,YAAoC,iBACrG,iBACJ,iBACA,4BAAgD,sDAAsB,EAAA2L,gBAAA,MAClE,2BACI,6BACI,6BACI,6BACJ,iBACJ,iBACA,6BACI,+BACI,8BACI,gCACI,6BACI,0BACI,0BACI,8BACJ,iBACA,+BAGA,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BACI,+BAQA,0BACI,0BACI,gCAAmB,wEAAnB,iBACJ,iBACA,+BAGA,6BACI,iCAAsE,wCAAS,EAAAqtB,mBAC3E,8BACJ,iBAOJ,iBACJ,iBAYJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACI,wBAEA,6BACI,8BACI,iCAA8C,wCAAS,EAAApC,WACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,MA3FiB,oDAIgE,8EAG7C,qDACf,iDAe2B,wEASJ,qEAUuB,yDAA6B,uCAEhD,uEAI8C,uD,qxBD9BjF,CACX,EAAAzqB,QAAQ,eAAgB,CACvB,EAAA7D,MAAM,aACL,EAAA8D,MAAM,CAAE,QAAW,KAEpB,EAAA9D,MAAM,OACL,EAAA8D,MAAM,CAAE,QAAW,KAEpB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,UACnC,EAAAW,WAAW,eAAgB,EAAAX,QAAQ,YAEpC,EAAAS,QAAQ,YACP,CACC,EAAAE,WACC,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAV,QAAQ,QAAS,EAAAU,MAAM,CAAE,QAAW,OAGrC,EAAAC,WACC,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAV,QAAQ,MAAO,EAAAU,MAAM,CAAE,QAAW,a,EA1BvC,GAiCa,EAAApM,8B,wHEpDb,SACA,OAWA,GALA,MAIA,MACA,QAEA,S,GACA,O,wFCdI,6BAAqE,YAAW,kB,6BAAX,+CDgBzE,iBA0CC,WAAmBwM,EAAgCqqB,EAA8DP,EACxGvR,EAA8CnF,GADpC,KAAApT,aAAgC,KAAAqqB,4BAA8D,KAAAP,iCACxG,KAAAvR,kBAA8C,KAAAnF,kBAdvD,KAAA3U,QAAkB,KAClB,KAAA7C,WAA4C,CAAE,MAAS,EAAArC,yBAAyByxB,cAAe,UAAa10B,KAAK2I,UAAW,WAAc,IAC1I,KAAAurB,gBAA8B,CAC7B,MAAS,CACR,CAAE,MAASl0B,KAAKiiB,gBAAgB2B,OAAO,6CAA8C,QAAU,EAAM,SAAW,GAChH,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,0CAA2C,QAAU,EAAM,SAAW,GAC7G,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,uCAAwC,QAAU,EAAM,SAAW,GAC1G,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,4CAA6C,QAAU,EAAM,SAAW,GAC/G,CAAE,MAAS5jB,KAAKiiB,gBAAgB2B,OAAO,yCAA0C,QAAU,EAAM,SAAW,K,OAS9G,YAAAxb,SAAA,WACCpI,KAAK+zB,0BAA0BK,cAAcp0B,KAAKk0B,kBAGnD,YAAA7rB,gBAAA,aAIA,YAAAG,YAAA,aAGA,YAAAC,eAAA,sBAECzI,KAAK8c,gBAAgB/G,8BAA8B/V,KAAK2I,UAAUjG,SAAS9C,KAAMI,KAAKg2B,YAAY9rB,MAAK,SAAAwJ,GAEtG,IAAM+a,EAAQ,EAAK9lB,UAAUjG,SAAS3C,SAAS8vB,WAAU,SAAA2G,GAAK,OAAAA,EAAE52B,OAAS8T,EAAK9T,SAE/D,IAAX6uB,IACH,EAAK9lB,UAAUjG,SAAS3C,SAAS0uB,GAAS/a,GAG3C,EAAK8f,+BAA+BjuB,cAAc,CAAE,MAAS,EAAAtC,yBAAyB4yB,iBAAkB,UAAa,EAAKltB,UAAW,WAAc,UACjJ6B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAuqB,YAAA,WAQC,OAAO,GAGR,YAAAtR,OAAA,WACC1jB,KAAKwzB,+BAA+BjuB,cAAc,CAAE,MAAS,EAAAtC,yBAAyB4yB,iBAAkB,UAAa71B,KAAK2I,UAAW,WAAc,QAGpJ,YAAA+B,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAlErC1N,GAA4B,6N,iCAA5BA,EAA4B,yzB,2BCxCzC,4BACI,8BAEA,+BAAyC,yFAA8B,EAAA0L,oBAEnE,4BACI,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BACI,6BACI,6BACI,6BACI,6BACJ,iBACJ,iBACA,8BACI,+BACI,gCAAqC,wEAArC,iBACJ,iBACJ,iBACJ,iBAEA,0CAAiB,uEAA6D,iBAE9E,6BACI,wBAEA,8BACI,8BACI,iCAA8C,wCAAS,EAAAib,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAGJ,iB,+BAhDS,oDAqB0C,4CAAiB,6BAK/B,wDAUyC,oD,uNDhBjE,CACX,EAAAra,QAAQ,YACP,CACC,EAAAE,WACC,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAV,QAAQ,QAAS,EAAAU,MAAM,CAAE,QAAW,OAGrC,EAAAC,WACC,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAV,QAAQ,MAAO,EAAAU,MAAM,CAAE,QAAW,a,EAhBvC,GAuBa,EAAAvM,gC,4GExCb,aAKA,SACA,SACA,SAKA,aAoBC,WAAmBqsB,EAAmCqN,EAAYjI,EAAmBkI,EAA2B1C,EAAiD5mB,GAAjD,KAAA4mB,sBAAiD,KAAA5mB,eAChK,IAAMsc,EAAgB8E,EAEtBxuB,KAAKopB,mBAAqBA,EAC1BppB,KAAK0pB,cAAgBA,EACrB1pB,KAAKy2B,MAAQA,EAEbz2B,KAAK22B,YAAcjc,EAAG3H,UAAU2W,EAAcrB,mBAAmB,IACjEroB,KAAK02B,UAAYA,EAEjB12B,KAAK42B,OAASlc,EAAG6M,OAAOsP,SAAS,CAAC,IAAK,KAAKC,YAAW,SAACnU,EAAGC,GAAM,WAAnDlI,CAAwD1a,KAAK22B,aA4T7E,OAzTQ,YAAA1L,UAAP,WACC,OAAOjrB,KAAK42B,QAGN,YAAAG,QAAP,WACC,OAAO/2B,KAAK0pB,cAAc9pB,MAGpB,YAAAypB,cAAP,SAAqBqJ,GACpB,IAAIsE,EAAWh3B,KAAKirB,YAAYrJ,MAAK,SAAC/G,GAAW,OAAOA,EAAKnH,KAAKjT,gBAAkBiyB,KAEpF,OAAgB,MAAZsE,EAEK,KAGF,IAAI,EAAAC,iBAAiBj3B,KAAKopB,mBAAoBppB,KAAMA,KAAKopB,mBAAmBsC,wBAAwBgH,GAAUsE,EAAUh3B,KAAKg0B,oBAAqBh0B,KAAKoN,eAGxJ,YAAA8pB,sBAAP,SAA6BC,EAASC,GACrC,IAAIhd,EAAO+c,EAAGtc,OAAOC,UAEjBuc,EAAYF,EAAGxc,OAAO,KAAKC,QAAQ,sBAAsB,GAEzD0c,EAAUH,EAAGxc,OAAO,KAAKC,QAAQ,sBAAsB,GAKvD2c,EAAYnd,EAAKI,MACjBgd,EAAY,EAAAlL,mBAAmBtsB,KAAK0pB,cAAc7pB,MAAMgjB,eAJrC,IACL,GAKd2U,EAAYD,IACfA,EAAYC,GAIbF,EAAQ3c,OAAO,QAAQC,QAAQ,yBAAyB,GACtDvZ,KAAK,IAAK+Y,EAAKG,GACflZ,KAAK,IAAK+Y,EAAKC,GACf/Q,MAAM,cAAe,eACrBjI,KAAK,OAAQ,QACbA,KAAK,YAAa,IAClBwR,KAAK,KAGPykB,EAAQ3c,OAAO,QAAQC,QAAQ,0BAA0B,GACvDvZ,KAAK,YArBgB,IAsBrBA,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrBA,KAAK,OAAQ,QACbA,KAAK,IAAK+Y,EAAKG,EAxBC,IAyBhBlZ,KAAK,IAAK+Y,EAAKC,GACfxH,KAAK7S,KAAK0pB,cAAc7pB,MAAMgjB,gBAGhCyU,EAAQ3c,OAAO,QAAQC,QAAQ,yBAAyB,GACtDvZ,KAAK,KAAM+Y,EAAKG,GAChBlZ,KAAK,KAAM+Y,EAAKC,EAhCK,IAiCrBhZ,KAAK,KAAM+Y,EAAKG,EAAIgd,GACpBl2B,KAAK,KAAM+Y,EAAKC,EAlCK,IAmCrBhZ,KAAK,SAAU,QACfA,KAAK,eAAgB,IAEvB,IAAIo2B,EAAcH,EAAQzc,OAAOC,UAiBjC,OAhBAwc,EAAQj2B,KAAK,YAAa,gBAAkBo2B,EAAYnd,OAAS,KAGjE+c,EAAU1c,OAAO,QAAQC,QAAQ,0BAA0B,GACzDvZ,KAAK,YAAaq2B,IAClBr2B,KAAK,cAAe,QACpBA,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrBA,KAAK,OAAQ,QACbA,KAAK,IAAK+Y,EAAKG,GACflZ,KAAK,IAAK+Y,EAAKC,GACfxH,KAAKukB,GAGPC,EAAUh2B,KAAK,YAAa,gBAAuC,IAArBo2B,EAAYnd,OAAe,KAElEgd,GAGR,YAAAK,sBAAA,SAAsBjF,GACrB,IAAIpK,EAAqBtoB,KAAKopB,mBAAmBsC,wBAAwBgH,GAE3C,MAA1BpK,EAAIoG,qBACPpG,EAAIoG,mBAAqB1uB,KAAKopB,mBAAmBI,4BAA4BlB,IAM9E,IAHE,IAAImB,EAAyBnB,EAAIoG,mBAE/BD,EAAQ,KACHrtB,EAAI,EAAGA,EAAIqoB,EAAavnB,SAAUd,EACtCqoB,EAAaroB,KAAOpB,KAAK+2B,YAC5BtI,EAAQrtB,GAQV,OAJa,MAATqtB,GACHhF,EAAaxG,OAAOwL,EAAO,GAGrBhF,GAGD,YAAAZ,OAAP,sBACKmB,EAAOhqB,KACP43B,EAAgB53B,KAAK42B,OAAOjN,cAEhCjP,EAAGjG,OAAO,sCAAsC8E,SAC5CvZ,KAAK02B,WACRhc,EAAGjG,OAAO,qCAAqC8E,SAGhD,IAAI4d,EAAKn3B,KAAKy2B,MAAMoB,OAAO,IAAK,gBAAgBjd,QAAQ,eAAe,GAAMvZ,KAAK,YAAarB,KAAK0pB,cAAc9pB,MAAMyB,KAAK,eAAgBrB,KAAK02B,WAClJS,EAAG91B,KAAK,cAAe,cAEvB,IAAIy2B,EAAQX,EAAGxc,OAAO,KAAKC,QAAQ,oBAAoB,GAAMvZ,KAAK,YAAarB,KAAK0pB,cAAc9pB,MAGlGk4B,EAAMnd,OAAO,KAAKC,QAAQ,cAAc,GACtCvZ,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACvBA,KAAK,eAAgB,KACrBysB,UAAU,QACVpa,KAAK1T,KAAK42B,OAAOmB,SACjBC,KAAK,QAEL32B,KAAK,KAAK,SAAC42B,EAAQ72B,GACnB,MAAO,IAAM62B,EAAEC,OAAO3d,EAAI,IAAO0d,EAAEC,OAAQ,EACxC,KAAQD,EAAEC,OAAO7d,EAAI4d,EAAE5rB,OAAOgO,GAAK,EACnC,IAAM4d,EAAE5rB,OAAOkO,EACf,IAAO0d,EAAE5rB,OAAQ,KAItB,IAAI8rB,EAAUL,EAAMnd,OAAO,KAAKC,QAAQ,gBAAgB,GACxDud,EAAQrK,UAAU,QAChBpa,KAAKkkB,GACLI,KAAK,QACLrmB,QAAO,SAASsmB,GAAU,MAAgC,cAAzBA,EAAEvkB,KAAKjT,iBACxCma,QAAQ,uBAAuB,GAC/BvZ,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE1d,EAAKqO,EAAiBwC,SAAW,KACzD/pB,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE5d,EAAIuO,EAAiByC,SAAW,KACxDhqB,KAAK,QAAQ,SAAC42B,GAAW,SAAKvB,UAA8C,MAAjCuB,EAAEvkB,KAAKkW,uBAAiC,EAAAhO,4BAA8B,EAAAF,0BAA6B,EAAAG,6BAC9Ixa,KAAK,QAASunB,EAAiBwP,YAC/B/2B,KAAK,SAAUunB,EAAiB4D,YAChCnrB,KAAK,UAAU,SAAC42B,GAAW,SAAKvB,UAA8C,MAAjCuB,EAAEvkB,KAAKkW,uBAAiC,KAAO,OAAU,QACtGvoB,KAAK,KAAM,GACXA,KAAK,gBAAgB,SAAC42B,GAAW,OAAAA,EAAEvkB,KAAKjT,iBACxCY,KAAK,kBAAkB,SAAC42B,GACxB,OAAiC,MAAjCA,EAAEvkB,KAAKkW,0BAITuO,EAAQrK,UAAU,QAChBpa,KAAKkkB,GACLI,KAAK,QACLrmB,QAAO,SAASsmB,GAAU,MAAgC,cAAzBA,EAAEvkB,KAAKjT,eAAkE,MAAjCw3B,EAAEvkB,KAAKkW,0BAChFhP,QAAQ,uBAAuB,GAC/BvZ,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE1d,EAAI,EAAA+R,mBAAmBtC,EAAKZ,mBAAmBmF,oBAAoB0J,EAAEvkB,KAAKkW,wBAAwB/pB,MAAMgjB,eAAgB,GAAK,KACrJxhB,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE5d,EAAIuO,EAAiByC,SAAW,MACxDhqB,KAAK,YAAa,OAClBA,KAAK,cAAe,QACpBA,KAAK,OAAQ,SACbwR,MAAK,SAAColB,GAAW,OAAAjO,EAAKZ,mBAAmBmF,oBAAoB0J,EAAEvkB,KAAKkW,wBAAwB/pB,MAAMgjB,kBAClGxhB,KAAK,UAAU,SAAC42B,GAAW,SAAKvB,UAA8C,MAAjCuB,EAAEvkB,KAAKkW,uBAAiC,KAAO,OAAU,QACtGvoB,KAAK,gBAAgB,SAAC42B,GAAW,OAAAA,EAAEvkB,KAAKjT,iBACxCY,KAAK,kBAAkB,SAAC42B,GAAW,OAAiC,MAAjCA,EAAEvkB,KAAKkW,0BAG5CkO,EAAMnd,OAAO,KAAKC,QAAQ,SAAS,GACjCkT,UAAU,QACVpa,KAAKkkB,GACLI,KAAK,QACLrmB,QAAO,SAASsmB,GAAU,MAAgC,cAAzBA,EAAEvkB,KAAKjT,iBACxCma,QAAQ,qBAAqB,GAC7BvZ,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE1d,EAAKqO,EAAiBwC,SAAW,KACzD/pB,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE5d,EAAKuO,EAAiByC,SAAW,KACzDhqB,KAAK,QAAQ,SAAC42B,GAAW,OAAiC,MAAjCA,EAAEvkB,KAAKkW,uBAAiC,EAAAjO,oBAAsB,EAAAF,qBACvFpa,KAAK,QAASunB,EAAiBwC,UAC/B/pB,KAAK,SAAUunB,EAAiByC,UAChChqB,KAAK,KAAM,GACXA,KAAK,UAAU,SAAC42B,GAAW,SAAKvB,UAA8C,MAAjCuB,EAAEvkB,KAAKkW,uBAAiC,KAAO,OAAU,QACtGvoB,KAAK,gBAAgB,SAAC42B,GAAW,OAAAA,EAAEvkB,KAAKjT,iBACxCY,KAAK,kBAAkB,SAAC42B,GAAW,OAAiC,MAAjCA,EAAEvkB,KAAKkW,0BAC1CmE,MAAK,SAASkK,GACc,aAAxBA,EAAEvkB,KAAKjT,gBACNw3B,EAAEvkB,KAAKyX,gBACV8M,EAAEvkB,KAAKwX,aAAe,CAAE3Q,EAAG0d,EAAE1d,EAAIqO,EAAiBwC,SAAW,EAAG/Q,EAAG4d,EAAE5d,EAAgC,EAA5BuO,EAAiByC,SAAc7Q,MAAmC,EAA5BoO,EAAiBwC,SAAe,IAAK9Q,OAAoC,EAA5BsO,EAAiByC,UAG7K4M,EAAEvkB,KAAKwX,aAAe,CAAE3Q,EAAG0d,EAAE1d,EAAIqO,EAAiBwC,SAAW,EAAG/Q,EAAG4d,EAAE5d,EAAIuO,EAAiByC,SAAW,EAAG7Q,MAAOoO,EAAiBwC,SAAU9Q,OAAQsO,EAAiByC,cAMvK,IAoFIiM,EApFEe,EAAuB,EAAvBA,EAAiC,GACnCC,EAASR,EAAMnd,OAAO,KAAKC,QAAQ,yBAAyB,GAChE0d,EAAOxK,UAAU,QAAQpa,KAAK1T,KAAK42B,OAAOmB,SAASC,KAAK,QACtDpd,QAAQ,4BAA4B,GACpCvZ,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAEC,OAAO3d,EAAI8d,EAAmB,KACtDh3B,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAEC,OAAO7d,EAAIuO,EAAiByC,SAAW,EAAIgN,EAAoB,KACvFh3B,KAAK,QAASg3B,GACdh3B,KAAK,SAAUg3B,GACfh3B,KAAK,QAAQ,SAAC42B,GAAW,SAAKvB,UAAqD,MAAxCuB,EAAEC,OAAOxkB,KAAKkW,uBAAiC,EAAAhO,4BAA8B,EAAAF,0BAA6B,EAAAG,6BACvJyc,EAAOxK,UAAU,QAAQpa,KAAK1T,KAAK42B,OAAOmB,SAASC,KAAK,QACtDpd,QAAQ,4BAA4B,GACpCvZ,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,KAAK,SAAC42B,GAAW,WAAOA,EAAEC,OAAO3d,EAAI8d,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAOJ,EAAEC,OAAO7d,EAAIuO,EAAiByC,SAAW,EAAIgN,EAAoB,EAA0B,EAApBA,EAAyB,GACtM,IAAOJ,EAAEC,OAAQ,EAAI,KAAOD,EAAEC,OAAO7d,EAAIuO,EAAiByC,SAAW,EAAIgN,EAAoB,EAAKA,EAAoB,GACtH,KAAOJ,EAAEC,OAAO3d,EAAI8d,EAAmB,EAAKA,EAAmB,GAAM,KAAOJ,EAAEC,OAAO7d,EAAIuO,EAAiByC,SAAW,EAAIgN,EAAoB,EAAIA,EAAoB,MAIzKP,EAAMnd,OAAO,KAAKC,QAAQ,0BAA0B,GAClDkT,UAAU,QACVpa,KAAKkkB,GACLI,KAAK,QACLrmB,QAAO,SAASsmB,GAAU,MAAgC,cAAzBA,EAAEvkB,KAAKjT,iBACxCma,QAAQ,+BAA+B,GACvCvZ,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE1d,EAAKqO,EAAiBwC,SAAW,KACzD/pB,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE5d,EAAKuO,EAAiByC,SAAW,KACzDhqB,KAAK,QAASunB,EAAiBwC,UAC/B/pB,KAAK,SAAUunB,EAAiByC,UAChChqB,KAAK,OAAQ,SAGfy2B,EAAMnd,OAAO,KAAKC,QAAQ,wBAAwB,GAChDkT,UAAU,QACVpa,KAAKkkB,GACLI,KAAK,QACLrmB,QAAO,SAASsmB,GAAU,MAAgC,cAAzBA,EAAEvkB,KAAKjT,iBACxCma,QAAQ,6BAA6B,GACrCvZ,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE1d,EAAKqO,EAAiBwC,SAAW,KACzD/pB,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE5d,EAAKuO,EAAiByC,SAAW,KACzDhqB,KAAK,QAASunB,EAAiBwC,UAC/B/pB,KAAK,SAAUunB,EAAiByC,UAChChqB,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,eAAgB,KACrBA,KAAK,mBAAoB,OACzBA,KAAK,gBAAgB,SAAC42B,GAAW,OAAAA,EAAEvkB,KAAKjT,iBAG1Cq3B,EAAMnd,OAAO,KAAKC,QAAQ,mBAAmB,GAC3CvZ,KAAK,cAAe,cACpBA,KAAK,YAAa,GAClBA,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrBysB,UAAU,iBACVpa,KAAKkkB,GACLI,KAAK,iBACLpd,QAAQ,sBAAsB,GAC9BvZ,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE1d,EAAKqO,EAAiBwC,SAAW,EAAK,KAC9D/pB,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE5d,EAAKuO,EAAiByC,SAAW,EAAK,KAC9DhqB,KAAK,QAASunB,EAAiBwC,SAAW,GAAK,GAC/C/pB,KAAK,SAAUunB,EAAiByC,SAAW,GAK3ChqB,KAAK,UAAU,SAAC42B,GAAW,SAAKvB,UAA8C,MAAjCuB,EAAEvkB,KAAKkW,uBAAiC,KAAO,OAAU,QACtGvoB,KAAK,gBAAgB,SAAC42B,GAAW,OAAAA,EAAEvkB,KAAKjT,iBACxCY,KAAK,kBAAkB,SAAC42B,GAAW,OAAiC,MAAjCA,EAAEvkB,KAAKkW,0BAC1CjP,OAAO,WACPtZ,KAAK,QAAS,gCACdA,KAAK,cAAe,SACpBA,KAAK,aAAc,QACnBiI,MAAM,iBAAkB,UACxBA,MAAM,UAAW,cACjBA,MAAM,QAASsf,EAAiBwC,SAAW,GAAK,EAAI,MACpD9hB,MAAM,SAAUsf,EAAiByC,SAAW,EAAI,MAChDkN,MAAK,SAACN,GAAW,OAAAA,EAAEvkB,KAAK7T,SAOtBG,KAAK02B,WACRoB,EAAMnd,OAAO,KAAKC,QAAQ,6BAA6B,GACrDkT,UAAU,QACVpa,KAAKkkB,GACLI,KAAK,QACLrmB,QAAO,SAASsmB,GAChB,MAAiC,cAAzBA,EAAEvkB,KAAKjT,eAAkF,MAAjCw3B,EAAEvkB,KAAKkW,0BAEvEhP,QAAQ,+BAA+B,GACvCvZ,KAAK,gBAAgB,SAAC42B,GAAW,OAAAA,EAAEvkB,KAAKjT,iBACxCY,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE1d,EAAKqO,EAAiBwC,SAAW,EAAK,MAC9D/pB,KAAK,KAAK,SAAC42B,GAAW,OAAAA,EAAE5d,EAAI,KAC5B/Q,MAAM,cAAe,eACrBA,MAAM,SAAU,WAChBuJ,KAAK,KACL+K,GAAG,SAAS,SAAS9U,EAAO+R,GAAQmP,EAAKX,cAAcxO,EAAKnH,KAAKjT,eAAe+3B,kCAElFlB,EAAUt3B,KAAKk3B,sBAAsBC,EAAI,uBAGzCG,EAAUt3B,KAAKk3B,sBAAsBC,EAAI,qBAIxBG,EAAQzc,OAAOC,UAAUR,QArV9B,EAAA8Q,SAAmB,IACnB,EAAAC,SAAmB,GAEnB,EAAA+M,WAAqB,IACrB,EAAA5L,WAAqB,GAoVpC,EA1VA,GAAa,EAAA5D,oB,mHCZb,KACA,MACA,MAEA,MAEA,MANA,IAOA,S,GAIA,O,2GCVE,4BAAqE,YAAW,kB,6BAAX,+C,mDAGnE,0BACE,wCAAiB,gHAAiC,4FAAuC,iBAC3F,iB,iCADmB,8D,mDAEnB,0BACE,sCAAe,gHAAiC,4FAAuC,iBACzF,iB,iCADiB,8D,mDAEjB,0BACE,8CAAuB,gHAAiC,4FAAuC,iBACjG,iB,iCADyB,8D,mDAEzB,0BACE,0CAAmB,gHAAiC,4FAAuC,iBAC7F,iB,iCADqB,8D,yBAXvB,0BACE,8BAGA,8BAGA,8BAGA,8BAGF,kB,6BAZO,oDAGA,yDAGA,iEAGA,8DDAT,iBAWI,WAAqBpf,EAA2BE,EAAgC0D,EACpE6U,EAA8CwW,GADrC,KAAAjvB,UAA2B,KAAAE,aAAgC,KAAA0D,eACpE,KAAA6U,kBAA8C,KAAAwW,SAJ1D,KAAAtwB,QAAkB,KAClB,KAAA3C,MAAgB,M,OAMhB,YAAA4C,SAAA,aAGA,YAAAswB,cAAA,SAAe5vB,GACI,SAAVA,EACD9I,KAAK24B,aAEW,SAAV7vB,EACN9I,KAAK44B,aAEW,WAAV9vB,GACN9I,KAAK64B,gBAIb,YAAAF,WAAA,WACwB,aAAf34B,KAAKwF,QACNxF,KAAKwF,MAAQ,QAIrB,YAAAozB,WAAA,WACwB,QAAf54B,KAAKwF,MAEAxF,KAAKoS,cAAc0mB,WAIrB94B,KAAK+4B,eAHL/4B,KAAKwF,MAAQ,WAMI,aAAfxF,KAAKwF,MACXxF,KAAK+4B,eAEgB,qBAAf/4B,KAAKwF,MAE6B,MAAnCxF,KAAKoS,cAAcwK,aACpB5c,KAAKwF,MAAQ,eAGbxF,KAAK+4B,eAGY,iBAAf/4B,KAAKwF,OACXxF,KAAK+4B,gBAIb,YAAAA,aAAA,sBACI/4B,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQ+I,gBAAiBvS,KAAKoS,eAAgBlI,MAAM,SAAAiN,GAErB,MAA3BA,EAAOkF,kBACR,EAAK7W,MAAQ,mBACb,EAAK4M,cAAgB+E,GAEQ,MAAvBA,EAAOyF,cACb,EAAKpX,MAAQ,eACb,EAAK4M,cAAgB+E,IAGrB,EAAKzN,WAAWmD,OAEhB,EAAKnD,WAAa,EAAK0D,aAAamC,KAAM,EAAA+hB,sBAAuB,CAC7D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB,EAAKhG,WAAWiG,QAAQxH,QAAU,EAAK8Z,gBAAgB2B,OAAQ,oDAC/D,EAAKla,WAAWiG,QAAQ4hB,WAAa,EAAKtP,gBAAgB2B,OAAQ,2CAClE,EAAKla,WAAWiG,QAAQqpB,WAAa,EAAK/W,gBAAgB2B,OAAQ,sBAEzC,EAAKla,WAAWiG,QAAU6hB,UAAUhjB,WAAW,SAAAkF,GACpE,EAAK+kB,OAAOQ,SAAS,CAAC,oCAG9BzuB,OAAM,SAAEoC,GACR,EAAKlC,MAAOkC,OAKpB,YAAAisB,aAAA,sBACI74B,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQ8I,aAActS,KAAKoS,eAAgBlI,MAAM,SAAA0C,GAClD,EAAKlD,WAAWmD,UAChBrC,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAxG/CvO,GAAuB,oL,iCAAvBA,EAAuB,0QClBpC,4BACE,8BAEA,8BAcF,kB,MAhBO,oDAEA,6E,oJDUP,GAKa,EAAAA,2B,oHElBb,WAEA,Q,GAEA,OACA,O,iFCDQ,yBAA4C,YAAoC,kB,uBAApC,iE,yBAD9C,yBACE,6BACF,kB,6BADM,0D,yFAIR,0BACE,4BACE,8BAAgC,uGAAyB,qGAAzD,iBACF,iBACA,4BACE,0BAA8E,gG,uBAA+F,iBAC7K,0BAA8C,uG,uBAA6F,iBAC7I,iBACF,iB,gCANW,oDAAwB,wBAAxB,CAAwB,oBAAxB,CAAwB,yBAAxB,CAAwB,2BAG5B,6EAAmC,4EACyC,iG,yBAU3E,yBAAsD,YAAkB,kB,uBAAlB,6C,yBAH1D,2BACE,yBACE,6BACA,6BACF,iBACF,kB,8BAFQ,mE,mDANV,4BACE,2BAAG,0FAAoB,sBAA+D,sBAA2E,6BAAyD,YAC1N,iBACA,+BAMF,iB,iCAR4N,sEAEpN,4C,yBAOR,4BACE,6BACA,YACF,kB,8BADE,uE,mDAbJ,0BACE,+BAUA,+BAIA,4BACE,2BAAsC,6F,uBAAoF,iBAC5H,iBACF,iB,gCAjBwB,qEAUA,8EAKyC,iGD1BrE,iBAoBI,WAAqBsN,GAArB,WAAqB,KAAAA,UATX,KAAA0vB,QAA6B,IAAI,EAAAhxB,aAUvClI,KAAKqiB,WAAa,EAAAC,WAAW/gB,QAAO,SAAEghB,GAClC,EAAK/Y,QAAQoJ,wBAAyB,EAAKumB,YAAa,EAAK1c,QAAQnb,KAAM,EAAKmb,QAAQ3J,OAAQ,EAAKV,cAAcW,WAAY7I,MAAM,SAAAsY,GACjID,EAAS9c,KAAM+c,S,OAK3B,YAAApa,SAAA,WACIpI,KAAKm5B,YAAc,KACnBn5B,KAAKiT,SAAW,KAChBjT,KAAKo5B,YAAa,GAGtB,YAAA9V,kBAAA,SAAmBjU,GACfrP,KAAKiT,SAAW5D,EAAEkU,KAAKtN,GACvBjW,KAAKo5B,WAAgC,MAAjBp5B,KAAKiT,UAG7B,YAAAomB,cAAA,sBACSr5B,KAAKo5B,aACNp5B,KAAKk5B,QAAQxqB,KAAM,MAEnB1O,KAAKwJ,QAAQwJ,uBAAwBhT,KAAKiT,SAAUjT,KAAKyc,QAAQ5c,OAAQqK,MAAM,SAAA0C,GAC3E,EAAK6P,QAAQH,UAAW,EACxB,EAAKG,QAAQpL,OAAS,CAClBqL,KAAM,UACNvJ,UAAWvG,EAASuG,UACpBC,KAAMxG,EAASwG,KACfvT,MAAO+M,EAAS/M,UAEpB2K,OAAO,SAAA6E,GACP,EAAK6pB,QAAQxqB,KAAMW,EAAE3E,YAKjC,YAAA4uB,qBAAA,WACI,IAAIC,EAAgBv5B,KAAKyc,QAAQ5c,MACjBG,KAAKyc,QAAQnb,KAE7BtB,KAAKyc,QAAQH,UAAW,EAExBtc,KAAKyc,QAAQpL,OAAS,CAClBqL,KAAM,mBACN7c,MAAO05B,IAIf,YAAAC,WAAA,sBACwBx5B,KAAKyc,QAAQ5c,MACjBG,KAAKyc,QAAQnb,KAE7B,GAAKtB,KAAKyc,QAAQH,SAAW,CACzB,IAAIjL,EAASrR,KAAKyc,QAAQpL,OAEN,oBAAfA,EAAOqL,MACR1c,KAAKyc,QAAQH,UAAW,EACxBtc,KAAKyc,QAAQpL,OAAS,MAED,WAAfA,EAAOqL,OACb1c,KAAKk5B,QAAQxqB,KAAM,MAEnB1O,KAAKwJ,QAAQ0J,uBAAwB7B,EAAO8B,UAAW9B,EAAO+B,MAAOlJ,MAAM,SAAA0C,GACvE,EAAK6P,QAAQH,UAAW,EACxB,EAAKG,QAAQpL,OAAS,KAEtB,EAAK8nB,YAAc,KACnB,EAAKC,WAAmC,MAApB,EAAKD,eACzB3uB,OAAO,SAAA6E,GACP,EAAK6pB,QAAQxqB,KAAMW,EAAE3E,a,iCApF5BpO,GAAwB,mC,iCAAxBA,EAAwB,o9BCbrC,4BACE,kCACE,4BACE,6BAGF,iBACA,4BAAoC,YAAyC,iBAC7E,+BASA,8BAmBF,iBACF,kB,MAlCU,+DAI8B,qFAC/B,wDASA,yD,iPDVT,GAMa,EAAAA,4B,gHEbb,WAEA,QACA,S,GAEA,OACA,O,6ICFI,0BACE,4BACE,8BAAgC,qGAAuB,qGAAvD,iBACF,iBACA,4BACE,0BAA8E,gG,uBAA2F,iBACzK,0BAAsC,+F,uBAAoF,iBAC1H,0BAA8C,8F,uBAAkF,iBAClI,iBACF,iB,gCAPW,oDAAwB,sBAAxB,CAAwB,oBAAxB,CAAwB,yBAAxB,CAAwB,2BAG5B,6EAAmC,wEACyB,+FACO,+F,sBAIxE,4BACE,6BACF,kB,yBACA,4BACE,6BACA,YACF,kB,8BADE,uE,yBAEF,4BACE,6BACA,YACF,kB,8BADE,gE,mDAVJ,0BACE,+BAGA,+BAIA,+BAIA,4BACE,2BAAsC,6F,uBAAoF,iBAC5H,iBACF,iB,gCAdwB,oEAGA,qEAIA,oEAKyC,iGDnBrE,iBAoBI,WAAqBkN,GAArB,WAAqB,KAAAA,UATX,KAAA0vB,QAA6B,IAAI,EAAAhxB,aAUvClI,KAAKqiB,WAAa,EAAAC,WAAW/gB,QAAO,SAAEghB,GAClC,EAAK/Y,QAAQ6J,mBAAoB,EAAKoJ,QAAQnJ,cAAe,EAAKmmB,UAAW,MAAOvvB,MAAM,SAAAsY,GACtFD,EAAS9c,KAAM+c,S,OAK3B,YAAApa,SAAA,WACIpI,KAAKy5B,UAAY,KACjBz5B,KAAK05B,OAAS,KACd15B,KAAKo5B,YAAa,GAGtB,YAAA9V,kBAAA,SAAmBjU,GACfrP,KAAK05B,OAASrqB,EAAEkU,KAAKtiB,MACrBjB,KAAKo5B,WAA8B,MAAfp5B,KAAK05B,QAG7B,YAAAL,cAAA,sBACSr5B,KAAKo5B,aACNp5B,KAAKk5B,QAAQxqB,KAAM,MAEnB1O,KAAKwJ,QAAQgK,kBAAmBxT,KAAK05B,OAAQ15B,KAAKyc,QAAQ5c,OAAQqK,MAAM,SAAA0C,GACpE,EAAK6P,QAAQH,UAAW,EACxB,EAAKG,QAAQpL,OAAS,CAClBqL,KAAM,UACNvJ,UAAWvG,EAASuG,UACpBtT,MAAO+M,EAAS/M,UAEpB2K,OAAO,SAAA6E,GACP,EAAK6pB,QAAQxqB,KAAMW,EAAE3E,YAKjC,YAAAivB,aAAA,sBACI35B,KAAKk5B,QAAQxqB,KAAM,MAEnB1O,KAAKwJ,QAAQoK,WAAY5T,KAAKyc,QAAQ5c,MAAO,OAAQG,KAAKyc,QAAQmd,YAAY1vB,MAAM,SAAAhK,GAChF,EAAKuc,QAAQH,UAAW,EACxB,EAAKG,QAAQpL,OAAS,CAClBqL,KAAM,SACNxc,KAAMA,MAEVsK,OAAO,SAAA6E,GACP,EAAK6pB,QAAQxqB,KAAMW,EAAE3E,WAI7B,YAAAmvB,YAAA,WACI75B,KAAKyc,QAAQH,UAAW,EAExBtc,KAAKyc,QAAQpL,OAAS,CAClBqL,KAAM,WAId,YAAA8c,WAAA,sBAEI,GAAKx5B,KAAKyc,QAAQH,SAAW,CAEzB,IAAIjL,EAASrR,KAAKyc,QAAQpL,OAEN,UAAfA,EAAOqL,MACR1c,KAAKyc,QAAQH,UAAW,EACxBtc,KAAKyc,QAAQpL,OAAS,MAED,WAAfA,EAAOqL,MACb1c,KAAKk5B,QAAQxqB,KAAM,MAEnB1O,KAAKwJ,QAAQmK,kBAAmBtC,EAAO8B,WAAYjJ,MAAM,SAAA0C,GACrD,EAAK6P,QAAQH,UAAW,EACxB,EAAKG,QAAQpL,OAAS,QACtB7G,OAAO,SAAA6E,GACP,EAAK6pB,QAAQxqB,KAAMW,EAAE3E,WAGJ,UAAf2G,EAAOqL,OACb1c,KAAKk5B,QAAQxqB,KAAM,MAEnB1O,KAAKwJ,QAAQuK,WAAW/T,KAAKyc,QAAQmd,WAAYvoB,EAAOnR,KAAKN,MAAOsK,MAAM,SAAA0C,GACtE,EAAK6P,QAAQH,UAAW,EACxB,EAAKG,QAAQpL,OAAS,QACtB7G,OAAO,SAAA6E,GACP,EAAK6pB,QAAQxqB,KAAMW,EAAE3E,a,iCAnG5BlO,GAAoB,mC,iCAApBA,EAAoB,y1BCdjC,4BACE,kCACE,4BAAsB,YAA0B,iBAChD,4BAAoC,YAAiB,iBACrD,gCAUA,8BAgBF,iBACF,kB,MA7B0B,6DACc,oDAC/B,wDAUA,yD,uODNT,GAMa,EAAAA,wB,qHEdb,KAEA,MACA,MACA,MAEA,MANA,IAOA,S,GAGA,O,2GCTE,4BAAqE,YAAW,kB,6BAAX,+C,mDAGnE,0BACE,wCAAiB,gHAAiC,4FAAuC,iBAC3F,iB,iCADmB,8D,mDAEnB,0BACE,sCAAe,gHAAiC,4FAAuC,iBACzF,iB,iCADiB,8D,mDAEjB,0BACE,8CAAuB,gHAAiC,4FAAuC,iBACjG,iB,iCADyB,8D,mDAEzB,0BACE,0CAAmB,gHAAiC,4FAAuC,iBAC7F,iB,iCADqB,8D,yBAXvB,0BACE,8BAGA,8BAGA,8BAGA,8BAGF,kB,6BAZO,oDAGA,yDAGA,iEAGA,8DDDT,iBAWE,WAAqBgN,EAA2BE,EAAgC0D,EACtE6U,EAA8CwW,GADnC,KAAAjvB,UAA2B,KAAAE,aAAgC,KAAA0D,eACtE,KAAA6U,kBAA8C,KAAAwW,SAJtD,KAAAtwB,QAAkB,KAClB,KAAA3C,MAAgB,M,OAMhB,YAAA4C,SAAA,aAGA,YAAAswB,cAAA,SAAe5vB,GACI,SAAVA,EACD9I,KAAK24B,aAEW,SAAV7vB,EACN9I,KAAK44B,aAEW,WAAV9vB,GACN9I,KAAK64B,gBAIb,YAAAF,WAAA,WACwB,aAAf34B,KAAKwF,QACNxF,KAAKwF,MAAQ,QAIrB,YAAAozB,WAAA,WACwB,QAAf54B,KAAKwF,MACAxF,KAAKoS,cAAc0mB,WAIrB94B,KAAK+4B,eAHL/4B,KAAKwF,MAAQ,WAMI,aAAfxF,KAAKwF,MACXxF,KAAK+4B,eAEgB,qBAAf/4B,KAAKwF,MAE6B,MAAnCxF,KAAKoS,cAAcwK,aACpB5c,KAAKwF,MAAQ,eAGbxF,KAAK+4B,eAGY,iBAAf/4B,KAAKwF,OACXxF,KAAK+4B,gBAIb,YAAAA,aAAA,sBACI/4B,KAAKwJ,QAAQ2I,kBAAmBnS,KAAKoS,eAAgBlI,MAAM,SAAAiN,GAEvB,MAA3BA,EAAOkF,kBACR,EAAK7W,MAAQ,mBACb,EAAK4M,cAAgB+E,GAEQ,MAAvBA,EAAOyF,cACb,EAAKpX,MAAQ,eACb,EAAK4M,cAAgB+E,IAGvB,EAAKzN,WAAWmD,OAEhB,EAAKnD,WAAa,EAAK0D,aAAamC,KAAM,EAAA+hB,sBAAuB,CAC3D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB,EAAKhG,WAAWiG,QAAQxH,QAAU,EAAK8Z,gBAAgB2B,OAAQ,oDAC/D,EAAKla,WAAWiG,QAAQ4hB,WAAa,EAAKtP,gBAAgB2B,OAAQ,2CAEzC,EAAKla,WAAWiG,QAAU6hB,UAAUhjB,WAAW,SAAAkF,GACpE,EAAK+kB,OAAOQ,SAAS,CAAC,oCAI9BzuB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAouB,aAAA,sBACI74B,KAAKwJ,QAAQ8I,aAActS,KAAKoS,eAAgBlI,MAAM,SAAA0C,GAClD,EAAKlD,WAAWmD,UAChBrC,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAnG/ChO,GAAyB,oL,iCAAzBA,EAAyB,4QCjBtC,4BACE,8BAEA,8BAcF,kB,MAhBO,oDAEA,6E,oJDSP,GAKa,EAAAA,6B,6GEjBb,KAGA,MAHA,IAOA,S,GACA,M,kJCkBK,0BAAoI,2FAAuB,kBAAgB,iCAAkB,iB,gCAA3G,0E,mDAClF,0BAAkI,2FAAuB,gBAAc,+BAAgB,iB,gCAArG,wE,qBAIlF,iC,KAAgD,+B,qBAChD,iC,KAA8C,mCDpBnD,iBAeI,WAAqBu3B,EAAkD5mB,EAAsC5D,GAAxF,KAAAwqB,sBAAkD,KAAA5mB,eAAsC,KAAA5D,UAPhH,KAAAmG,QAAkB,cAQX3P,KAAKikB,QAAUza,EAAQya,UACvBjkB,KAAKkkB,aAAelkB,KAAKikB,SAAWza,EAAQ0a,eAClDlkB,KAAKmkB,cAAgBnkB,KAAKikB,SAAWjkB,KAAKkkB,cAAgB1a,EAAQ4a,gBAElEpkB,KAAKkkB,aAAelkB,KAAK85B,cAAc,eAAiB95B,KAAK85B,cAAc,U,OAGzE,YAAA1xB,SAAA,aAGH,YAAA0xB,cAAA,SAAcnqB,GACb3P,KAAK2P,QAAUA,EAEA,gBAAZA,EACF3P,KAAK+5B,UAAY/5B,KAAKg0B,oBAAoBpQ,OAAO,qBAE9B,cAAZjU,EACP3P,KAAK+5B,UAAY/5B,KAAKg0B,oBAAoBpQ,OAAO,mBAE9B,WAAZjU,IACP3P,KAAK+5B,UAAY/5B,KAAKg0B,oBAAoBpQ,OAAO,qBAKzC,YAAAlZ,MAAP,SAAcD,GACNzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC3EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCArClE7M,GAAiB,sH,iCAAjBA,EAAiB,yfClB9B,4BACI,4BACA,6BAEA,4BAWI,4BACI,uBACT,4BAEC,4BACC,yBACC,YACD,iBACD,iBAEA,2BACC,6BACA,6BACD,iBAEA,6BACC,wCACA,wCACD,iBAEQ,iBACA,wBACJ,iBACR,iBAtCA,kB,MAqBM,yDAK4C,mDACA,mDAI/B,8DACA,8D,2MDpBnB,GAMa,EAAAA,qB,iHElBb,KAEA,MAFA,IAIA,SAGA,SAIA,GAHA,MAGA,QACA,SAEA,GADA,OACA,Q,gKCbA,0BACE,0BACE,4BAEI,uBACA,4BAEI,8BACI,8BAA8D,iGAAkC,WAAhG,iBACA,6BACI,4BACJ,iBACA,0BACI,6BACJ,iBACJ,iBAEA,+BACI,+BAA8D,iGAAkC,eAAhG,iBACA,8BACI,8BACJ,iBACA,2BACI,8BACJ,iBACJ,iBAEA,8BACI,iCAA8C,yFAC1C,8BACJ,iBACJ,iBACJ,iBACA,yBACL,iBACD,iBACF,iB,gCA5BuC,wCAAc,yBAC/B,4EASiB,wCAAe,wBAChC,4E,yBA4BE,gCAAoF,YAAuC,kB,uBAApE,uCAA6B,4D,mDANhG,6BACI,+BACI,6BACJ,iBACA,6BACI,gCAAsE,6GAClE,kCACJ,iBACJ,iBACA,wBACJ,iB,iCAL8E,0DAC1D,0D,yBAUR,gCAAuD,YAAc,kB,uBAAlC,wCAAoB,6C,mDALnE,6BACI,+BAA+C,6BAA4C,iBAC3F,6BACI,gCAAkD,iGAC9C,wBACA,kCACJ,iBACJ,iBACA,wBACJ,iB,iCAN0D,8CAEtC,gD,qBAOZ,6B,qBACA,6B,yBAII,gCAA8E,YAAkB,kB,uBAA9C,4CAA4B,6C,qBAclF,6B,qBACA,6B,wBAGA,6B,8BACI,qC,wBACJ,6B,8BACI,qC,mDApDxB,0BACI,0BACI,mCACI,+BAWA,+BAUA,6BACI,+BACI,oCACA,oCACJ,iBACA,8BACI,iCAA0D,0GACtD,mCACJ,iBACJ,iBACA,yBACJ,iBACA,8BACI,gCAAmD,8BAAwC,iBAC3F,8BACI,gCAA4C,qGAA5C,iBACJ,iBACA,yBACJ,iBACA,8BACI,gCACI,qCACA,qCACJ,iBACA,8BACI,kCAEA,kCAEJ,iBACA,yBACJ,iBAEA,8BACI,yBACA,8BACI,iCAA8C,yFAC1C,8BACJ,iBACA,iCAAwE,0FACpE,8BACJ,iBACJ,iBACA,yBACJ,iBACJ,iBACJ,iBACJ,iB,mDApEiB,iDAWuB,4CAYV,uDACA,2DAGgD,wDAC9C,0DAQgC,mDAMlC,uDACA,2DAGH,uDAEA,2DAYuC,mDDpFlE,iBA8DC,WAAoB4L,EACX7D,EACAyH,EACA4mB,EACArqB,EACAqwB,GALW,KAAAxwB,UACX,KAAA7D,eACA,KAAAyH,eACA,KAAA4mB,sBACA,KAAArqB,cACA,KAAAqwB,aA3DT,KAAAC,kBAA4B,EAQ5B,KAAAC,iBAA0B,CACzB,CAAE,SAAY,EAAA/1B,eAAeg2B,eAAgB,MAASn6B,KAAKg0B,oBAAoBpQ,OAAO,6CACtF,CAAE,SAAY,EAAAzf,eAAei2B,SAAU,MAASp6B,KAAKg0B,oBAAoBpQ,OAAO,uCAChF,CAAE,SAAY,EAAAzf,eAAek2B,YAAa,MAASr6B,KAAKg0B,oBAAoBpQ,OAAO,2CAMpF,KAAAhkB,KAAe,KAKf,KAAAmB,UAAoB,KAkBpB,KAAAu5B,YAAsB,EAYtB,KAAAC,WAAqB,E,OAUrB,YAAAnyB,SAAA,sBACCpI,KAAKg6B,WAAWQ,mBAAmB,EAAG,KAAKtwB,MAAK,SAAAuwB,GAE/C,EAAKC,gBAAkBD,EAAiBE,UAEJ,IAAhC,EAAKD,gBAAgBx4B,SACxB,EAAKo4B,YAAa,EAClB,EAAKL,kBAAmB,GAGzB,EAAKM,WAAY,KAEf/vB,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZzK,KAAKwJ,QAAQS,oBAAmB,GAAOC,MAAK,SAAArE,GAI3C,IAFA,IAAMsE,EAAa,GAEV/I,EAAI,EAAGA,EAAIyE,EAAM3D,SAAUd,EAAG,CACtC,IAAME,EAAOuE,EAAMzE,GACbgJ,EAAU9I,EAAK8I,QACfC,EAAiC,MAAtB/I,EAAKgJ,cAAwBhJ,EAAKgJ,cAAgBhJ,EAAK1B,MAEpE,EAAK+J,YAAYklB,iBAAiBzkB,IAAY,EAAKT,YAAYY,kBAAkBH,EAASC,KAC7FF,EAAWhK,KAAK0F,EAAMzE,IAIxB,EAAKyE,MAAQsE,KACXK,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZ,IAAImwB,EAAS10B,IAAM,2BACC,cAAhBlG,KAAK66B,SACRD,EAAS10B,IAAM,0CAKhB,IAAIghB,EAA+B,CAClC4T,WAAY,EACZC,mBAAmB,EACnBC,IAAKJ,GAGN56B,KAAKi7B,SAAW,IAAI,EAAAC,aAAahU,GAEjClnB,KAAKi7B,SAASE,gBAAkB,SAACC,EAAeC,GAC/CA,EAAK1gB,OAAO,OAAQ,EAAK/a,MAEH,MAAlB,EAAKmB,WACRs6B,EAAK1gB,OAAO,YAAa,EAAK5Z,WAE3B,EAAKu6B,gBACRD,EAAK1gB,OAAO,WAAY,EAAK2gB,iBAG/Bt7B,KAAKi7B,SAASM,mBAAqB,SAACH,GACnC,EAAKz1B,aAAae,SAEnB1G,KAAKi7B,SAASO,eAAiB,SAACjY,EAAW3W,EAAeqN,EAAazT,GACtE,EAAKi1B,QAAQte,cAAclc,MAAQ,GACnC,EAAK0E,aAAamB,YAEnB9G,KAAKi7B,SAASS,cAAgB,SAACnY,EAAW3W,EAAkBqN,EAAgBzT,GAC3E,IAAM4L,EAAgBtQ,KAAKD,MAAM+K,GAEjCwF,EAAckoB,WAAa,EAAKA,WAGhC,IADA,IAAIqB,EAAiC,KAC5Bv6B,EAAI,EAAGA,EAAI,EAAKs5B,gBAAgBx4B,SAAUd,EAAG,CACrD,IAAIw6B,EAAsB,EAAKlB,gBAAgBt5B,GAE3Cw6B,EAAIjxB,MAAQ,EAAK2O,mBACpBqiB,EAAiBC,GAInBxpB,EAAckH,iBAAmB,EAAKA,iBACtClH,EAAcupB,eAAiBA,EAEX,cAAhB,EAAKd,OACR,EAAKnxB,WAAa,EAAK0D,aAAamC,KAAK,EAAArT,wBAAyB,CAAEuT,UAAU,IAG9E,EAAK/F,WAAa,EAAK0D,aAAamC,KAAK,EAAA9S,0BAA2B,CAAEgT,UAAU,EAAMC,qBAAqB,IAG5G,EAAKhG,WAAWiG,QAAQyC,cAAgBA,GAEzCpS,KAAKi7B,SAASY,YAAc,SAACtY,EAAW3W,EAAkBqN,EAAgBzT,GACzE,IAAMkE,EAAQ5I,KAAKD,MAAM+K,GAEzB,EAAKlC,MAAM,CAAEA,MAAOA,MAItB,YAAAoxB,QAAA,WAE4B,MAAvB97B,KAAKi7B,SAASc,OAAiB/7B,KAAKi7B,SAASc,MAAM75B,OAAS,EAC/DlC,KAAKi7B,SAASe,YAGdh8B,KAAK0K,MAAM,CACVvC,QAASnI,KAAKg0B,oBAAoBpQ,OAAO,mBACzClZ,MAAO,MAKV,YAAAuxB,gBAAA,SAAgBnzB,EAAOxH,GAErBtB,KAAKs6B,WADO,aAATh5B,GAQL,YAAA2a,OAAA,WACCjc,KAAKi6B,kBAAmB,GAGzB,YAAA9d,OAAA,WACCnc,KAAKi6B,kBAAmB,GAIlB,YAAAvvB,MAAP,SAAaD,GACZzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC1EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCArMxDxM,GAAqB,wO,iCAArBA,EAAqB,qD,OAAA,K,q7ECvBlC,gCAsCA,iC,MAtCK,mFAsCA,4F,wqBDrBL,GAMa,EAAAA,yB,sHExBb,KACA,MACA,MAKA,OAPA,IAQA,SAEA,S,GACA,M,gGCEQ,4BAAqE,YAAW,kB,6BAAX,+C,sBAY7D,4BACI,6BACI,6BACI,2BAA0B,6BAA+D,iBAC7F,iBACJ,iBACJ,kB,sBAcoB,2BAA4B,6BAA6C,kB,qBAGvE,6B,qBACA,6B,mDAYF,gCAAyC,+JACrC,6BACJ,kB,mDAtBR,4BACI,4BACE,2BACE,YACA,gCACA,2BACE,kBACA,oCACA,oCACA,kBACF,iBACF,iBACF,iBACA,6BACI,iCAAsB,iHAClB,8BACJ,iBACA,iCAAsB,6GAClB,8BACJ,iBACA,mCAGJ,iBACJ,iB,0BAtBS,8EACD,qDACM,+CAGM,4DACA,6DAYJ,6C,yBA5B5B,4BACI,+BACI,4BACI,yBACI,4BAAwB,6BAA2C,iBACvE,iBACJ,iBACA,4BACI,+BAyBJ,iBACJ,iBACJ,kB,uCA3BgB,gD,mDA8BR,0BACI,gCAAsB,8HAClB,6BACJ,iBACJ,kB,yBA5DhB,4BACI,4BACI,4BACI,6BACI,6BACI,yBAAI,YAAa,iBACrB,iBACJ,iBACJ,iBAEA,+BAQA,8BAoCA,6BACI,8BACI,gCAKJ,iBACJ,iBACJ,iBACJ,kB,uBA3DwB,4CAKX,gEAQD,8DAsCS,6CD1D7B,iBAcC,WAAmBuL,EAAkC4D,EAAsCqrB,EAAwBxW,GAAhG,KAAAzY,UAAkC,KAAA4D,eAAsC,KAAAqrB,SAAwB,KAAAxW,kBARnH,KAAA9Z,QAAkB,K,OAUlB,YAAAC,SAAA,sBAECpI,KAAKwJ,QAAQuP,sBAAsB7O,MAAK,SAAA0C,GACvC,EAAKomB,KAAOpmB,EAASomB,QAEnBxoB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAAyxB,SAAA,SAAShwB,GACRlM,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAhR,sBAAuB,CAC/DiR,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQ1D,KAAKC,GAC7BlM,KAAK0J,WAAWiG,QAAQ7F,OAAQ,EAChC9J,KAAK0J,WAAWiG,QAAQ5F,mBAAmByE,WAAU,SAACwJ,GACrD,IAAMqZ,EAAM,CACXxxB,MAAOmY,EAAKpN,aAAaiY,eACzBlY,IAAKqN,EAAKrN,IACVwxB,WAAYnkB,EAAKmkB,WACjBC,eAAgBpkB,EAAKokB,eACrBrwB,SAAUiM,EAAKjM,SACfswB,MAAOrkB,EAAKskB,MACZC,KAAMvkB,EAAKskB,MACXtwB,WAAYgM,EAAKhM,YAGlBE,EAAIswB,MAAMr8B,KAAKkxB,OAIjB,YAAAoL,OAAA,SAAO78B,GACNI,KAAKy4B,OAAOQ,SAAS,CAAC,8BAA+Br5B,KAGtD,YAAA88B,OAAA,SAAOC,GAAP,WACC38B,KAAKwJ,QAAQ8O,cAAcqkB,EAAKhyB,KAAKT,MAAK,SAAA8N,GAEzC,EAAKtO,WAAa,EAAK0D,aAAamC,KAAK,EAAAhR,sBAAuB,CAC/DiR,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB,EAAKhG,WAAWiG,QAAQ9F,MAAO,EAC/B,EAAKH,WAAWiG,QAAQ/F,UAAYoO,EAAKqkB,MACzC,EAAK3yB,WAAWiG,QAAQ3F,OAASgO,EACjC,EAAKtO,WAAWiG,QAAQ7F,OAAQ,EAEhC,EAAKJ,WAAWiG,QAAQ5F,mBAAmByE,WAAU,SAAAouB,GACpDD,EAAK98B,MAAQ+8B,EAAIhyB,aAAaiY,qBAE7BrY,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAoyB,SAAA,SAAS3wB,EAAsB8L,GAA/B,WACChY,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,+BAAiC,KAAO5L,EAAKnY,MAAQ,IACnHG,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,uBACjE5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,SAE/BtB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAC3C,EAAKlK,QAAQ2O,iBAAiBH,EAAKrN,KAAKT,MAAK,SAAA0C,GAC5CV,EAAIswB,MAAQtwB,EAAIswB,MAAM7qB,QAAO,SAAC1Q,EAAOwtB,EAAOqO,GAC3C,OAAO77B,EAAM0J,MAAQqN,EAAKrN,UAGzBH,OAAM,SAACC,GACT,EAAKC,MAAMD,UAKd,YAAAC,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA9FrCtM,GAA0B,wJ,iCAA1BA,EAA0B,4kDClBvC,4BACI,4BACA,6BAGA,4BAEI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,8BAEA,+BAiEJ,iBACJ,kB,MApEa,oDAEY,gD,qJDFzB,GAKa,EAAAA,8B,sHElBb,KACA,MADA,IAEA,Q,+BAGA,aAcI,WAAoBuL,GAAA,KAAAA,a,OAEpB,YAAAtB,SAAA,WACIpI,KAAK+8B,SAAW,IAAI,EAAA73B,SAGxB,YAAA83B,QAAA,WACIh9B,KAAK0J,WAAWmD,OAChB7M,KAAK+8B,SAASt3B,KAAMzF,KAAK66B,S,iCAjBpBp8B,GAA0B,oC,iCAA1BA,EAA0B,4sBCVvC,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,6BACI,+BACI,4BACI,4BACI,4BACI,4BACJ,iBAEA,gCAAsD,+DAClD,yBACA,gCACI,6BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACI,6BACI,8BACI,iCAAsB,wCAAS,EAAAiL,WAAA,UAE3B,4BACI,8BACJ,iBACJ,iBACA,iCAAsB,wCAAS,EAAAszB,aAE3B,4BACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MAhC0E,iDAqBR,wE,uPD/BlE,GAKa,EAAAv+B,8B,iHEVb,KAEA,MAKA,OACA,MARA,IASA,SAEA,S,oFCkFW,sB,qBACA,sB,qBACA,sB,qBACA,sB,yBAEA,4BACC,yBAAI,sBAAO,wBAAG,YAAsF,iBAAK,YAAiD,iBAC1J,yBAAI,YAA8B,iBACnC,kB,uCAFe,kHAA2F,qFACrG,kE,yBAEL,4BACC,yBAAI,sBAAO,wBAAG,YAAsF,iBAAK,YAAkD,iBAC3J,yBAAI,YAA8B,iBACnC,kB,uCAFe,kHAA2F,sFACrG,kE,yBAEL,4BACC,yBAAI,8BAAe,wBAAG,YAAoB,iBAA1C,iBACA,yBAAI,YAA8B,iBACnC,kB,uCAFuB,gDAClB,kE,yBAEL,4BACC,yBAAI,mBAAI,wBAAG,YAAwB,iBAAK,8BAAc,wBAAG,YAAyB,iBAAK,iBACvF,yBAAI,YAA8B,iBACnC,kB,uCAFY,oDAA8C,qDACrD,kE,yBAEL,4BACC,yBAAI,sBAAO,wBAAG,YAAwB,iBAAK,qBAAK,wBAAG,YAAyB,iBAAK,iBACjF,yBAAI,YAA8B,iBACnC,kB,uCAFe,oDAAqC,qDAC/C,kE,mHAIL,4BAA2Q,YAAyB,kB,uCAA/N,wIAAsM,sD,mDAC3Q,gCAAiH,kIAAiC,eACjJ,6BAED,iB,0CAHsB,wD,mDAItB,gCAAiH,kIAAiC,eACjJ,6BAED,iB,0CAHsB,wD,mDAItB,gCAAgH,kIAAiC,cAChJ,6BAED,iB,0CAHsB,uD,2KA3CzB,6BACC,6BACC,6BACC,sBACA,4BAA6E,YAAiB,iBAC/F,iBACA,6BACC,6BACA,6BACA,6BACA,8BAEA,+BAIA,+BAIA,+BAIA,gCAIA,gCAID,iBACA,8BACC,+BACA,mCAIA,mCAIA,mCAID,iBACD,iBAEA,8BACC,8BACC,8BACC,gCAA4C,8BAAmE,iBAC/G,mCAAwF,sGAAsD,iBAC/I,iBACD,iBACA,8BACC,8BACC,gCAA+C,8BAAkE,iBACjH,mCAA2F,qGAAmF,iBAC/K,iBACD,iBACA,8BACC,iCAAsB,uHACrB,8BACD,iBACD,iBACD,iBACD,iB,yDArEwD,yIAGU,wJACc,gDAG1E,kHACA,kHACA,sGACA,yGAEC,kHAIA,kHAIA,4GAIA,sGAIA,yGAMA,iEACoE,iEAIA,iEAID,iEAU/D,6EACG,4EAA8E,2CAKjF,gFACG,+EAAiF,0CAAoC,0C,mDAnEvI,4BACU,4BAER,6BAEC,4BAEC,iCA4EA,6BACC,gCAAoE,kIACnE,6BACD,iBACA,gCAAoE,iIACnE,6BACD,iBACA,iCAAoE,+HACnE,8BACD,iBACD,iBACD,iBAED,iBAED,iBACK,iB,8DA5FG,iDA6EI,qEAGA,qEAGA,sE,6FAlHb,4BAAsE,mHACzD,4BACX,yBAAI,6BAAQ,YAAiB,iBAAS,iBACvC,iBACA,4BACE,YACF,iBACA,4BACC,4BACE,6BAAQ,aAAsB,iBAChC,iBACD,iBASA,6BACC,uBACD,iBACD,iBACA,gC,8CAxBsB,kEAER,gDAGX,0DAGG,uJACM,qDAeR,wDDlER,iBAuBI,WAAqB+K,EAAuC4D,EAAsC4mB,GAA7E,KAAAxqB,UAAuC,KAAA4D,eAAsC,KAAA4mB,sBAdrG,KAAAiJ,WAAavH,OAAOwH,KAIpB,KAAAC,SAA4B,GAI5B,KAAAC,QAAiB,GAIjB,KAAAC,eAAyB,MAGlBr9B,KAAKo9B,QAAU,CACX,CAAE1gB,KAAMsX,EAAoBpQ,OAAQ,uBAAyB0Z,KAAM,YAAaC,UAAU,GAC1F,CAAE7gB,KAAMsX,EAAoBpQ,OAAQ,6BAA+B0Z,KAAM,aAAcC,UAAU,EAAO/iB,MAAO,KAC/G,CAAEkC,KAAMsX,EAAoBpQ,OAAQ,yBAA2B0Z,KAAM,iBAAkBC,UAAU,IAGrGv9B,KAAKw9B,U,OAGT,YAAAA,QAAA,sBAEQx9B,KAAKwJ,QAAQkI,eAAe,OAAOxH,MAAM,SAAAizB,GAEjD,EAAKA,SAAWA,KAEJ3yB,OAAM,SAAEoC,GACR,EAAKlC,MAAOkC,OAMxB,YAAA6wB,SAAA,SAAUC,GAAV,WAII19B,KAAKwJ,QAAQ0H,cAAewsB,EAASA,SAAS,GAAG/yB,KAAMT,MAAK,SAAA8H,GAEjE,EAAKA,QAAUA,KACNxH,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAkzB,UAAA,SAAUC,GAAV,WAE0B,MAAjBA,GACD59B,KAAKwJ,QAAQsI,QAAS8rB,EAAcjzB,KAAMT,MAAM,SAAA2zB,GAC5CD,EAAgBC,EAGhB,EAAKL,aACLhzB,OAAM,SAAEoC,GACR,EAAKlC,MAAOkC,OAmB3B,YAAA0E,4BAAA,SAA4BD,GAA5B,WAICrR,KAAKwJ,QAAQ8H,4BAA4BD,GAAQnH,MAAM,SAAA0C,OAEnDpC,OAAM,SAAEC,GACX,EAAKC,MAAOD,OAIX,YAAAqzB,aAAA,SAAaF,GAAb,WAE0B,MAAjBA,GACD59B,KAAKwJ,QAAQyI,kBAAmB2rB,EAAcjzB,IAAK3K,KAAKgS,SAAU9H,MAAM,SAAA8H,GACpE,EAAKA,QAAUA,KACfxH,OAAM,SAAEoC,GACR,EAAKlC,MAAOkC,OAKxB,YAAAmxB,YAAA,SAAYH,GAAZ,WAC0B,MAAjBA,GACD59B,KAAKwJ,QAAQuI,iBAAkB6rB,EAAcjzB,IAAK3K,KAAKgS,SAAU9H,MAAM,SAAA8H,GACnE,EAAKA,QAAUA,KAIfxH,OAAM,SAAEoC,GACR,EAAKlC,MAAOkC,OAKjB,YAAAlC,MAAP,SAAcD,GACWzK,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC/DE,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,IAGzE,YAAAuzB,eAAA,SAAevP,EAAeoP,GAC1B,OAAOA,EAAQlzB,KAGnB,YAAAszB,OAAA,SAAOn1B,EAAY6B,GAEd7B,EAAMuD,OAAO6xB,cAAcC,UAAUC,SAAS,QAAWt1B,EAAMuD,OAAO8xB,UAAUC,SAAS,SACzFp+B,KAAKq+B,WAAa1zB,EACpB3K,KAAKq+B,SAAW,MAGhBr+B,KAAKq+B,SAAW1zB,EAChB3K,KAAKy9B,SAAS,CAACC,SAAS,CAAC,CAAC/yB,IAAIA,SAKjC,YAAAgH,OAAA,SAAO2sB,GAAP,WAEIt+B,KAAKwJ,QAAQkI,eAAe4sB,GAAUp0B,MAAM,SAAAizB,GAC7C,EAAKA,SAAWA,KACJ3yB,OAAM,SAAEoC,GACR,EAAKlC,MAAOkC,MAG1B5M,KAAKq9B,eAAiBiB,GAGvB,YAAAC,gBAAA,SAAgBltB,EAAwB4I,GACvC5I,EAAOmtB,eAAiBvkB,EAExBja,KAAKsR,4BAA4BD,IAGlC,YAAAotB,yBAAA,SAAyBptB,GAWvB,OATOA,EAAOqtB,WAAWC,SAAS,0BAA4BttB,EAAOqtB,WAAWC,SAAS,yBASlFttB,GAGN,YAAAutB,iBAAA,SAAkBvtB,GAEpBrR,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAvR,2BAA4B,CAC5DwR,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAE/B1P,KAAK0J,WAAWiG,QAAQkvB,UAAYxtB,G,iCA9KzB5V,GAAqB,+H,iCAArBA,EAAqB,g/ICJlC,4BACC,4BACC,4BAEC,0BAAmB,wCAAS,EAAAkW,OAAO,UAClC,4BACD,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,cAClC,4BACD,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,eAClC,4BACD,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,eAClC,6BACD,iBAED,iBAEA,uBAED,iBACD,iBAEA,6BACC,6BAEA,gCACC,6BACC,6BACC,6BAAqC,8BAA6D,iBAClG,6BAAqC,8BAAkE,iBACvG,6BAAqC,8BAAwD,iBAE7F,qBACD,iBACD,iBACM,6BACL,0CA8HK,iBACP,iBACA,iBACD,kB,MAnK8C,2FAGI,+FAGC,gGAGA,gGAyBrB,mDAAoB,mC,0vEDzClD,GAOa,EAAAlW,yB,sHEpBb,KACA,MADA,I,+GCSY,2DAA2K,iGAAqB,iB,gCAArB,iC,mDAC3K,0DAA+J,iGAAqB,iB,gCAArB,iC,mDAC/J,6CAA+F,iGAAqB,iB,gCAArB,iCDH3G,iBAuBI,WAAoBiO,GAAA,KAAAA,a,OAVpB,sBACI,wBAAS,C,IADb,SACe2H,GACXrR,KAAKqR,OAASA,G,gCAUlB,YAAAjJ,SAAA,aAGA,YAAAsb,OAAA,WAC0B,MAAjB1jB,KAAK8+B,UACN9+B,KAAK8+B,SAASC,UAGI,MAAjB/+B,KAAKg/B,UACNh/B,KAAKg/B,SAASD,UAGI,MAAjB/+B,KAAKi/B,UACNj/B,KAAKi/B,SAASF,UAGlB/+B,KAAK0J,WAAWmD,QAGpB,YAAAmwB,QAAA,WACIh9B,KAAK0J,WAAWmD,Q,iCAxCX7O,GAA0B,oC,iCAA1BA,EAA0B,4D,OAAA,M,6pBCbvC,4BAOI,4BACI,4BACI,2DACA,0DACA,4CACJ,iBACJ,iBAEA,oBACA,4BACI,4BACI,4BACI,gCAAsB,wCAAS,EAAA0lB,YAC3B,4BAAO,6BACP,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAlBwD,6JACD,kJACd,gG,oBDHzC,GAKa,EAAA1lB,8B,wHEbb,KACA,MADA,IAEA,QAEA,OAOA,SAIA,GAFA,OAEA,QAGA,GAFA,MAEA,Q,yFCjBI,6BAAqE,YAAW,kB,6BAAX,+C,sBACrE,6BAAsE,6BAAuE,kB,sBAGzI,yBACI,6BACJ,kB,sBAsCwE,2BAA8E,iCAAkB,kB,mDAL5G,yBACI,4BACI,yBAAI,YAAc,iBAClB,+BAA4E,2FAAuB,8EAAnG,iBACA,6BACI,6BACJ,iBACJ,iBACJ,iB,8DANY,6CACoC,uDAAmC,kBAAnC,CAAmC,uCAEpE,0E,sBAUf,2BAAuD,sCAAuB,kB,mDAlB1F,yBACI,yBACI,+BACI,8BASJ,iBACJ,iBAEA,4BACI,+BAAkE,+FAAkC,wGAApG,iBACA,6BACI,6BACJ,iBACJ,iBACA,4BACI,2BAA6B,a,oBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAxBgB,4DAagC,mDAAyB,uBAE1D,iDAIsB,yF,yBAvBzC,4BACI,+BA4BJ,kB,8BA5BQ,gG,yBAuCQ,gCAA2G,YAA+B,kB,uBAAtD,6BAAuB,4D,mDANvH,yBACI,yBAGI,gCAA4H,2FACxH,2BACA,kCACJ,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,oBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,yDAfgB,yEAA4B,wDAA+C,mBAEvE,gGAK4B,mDAAyB,uBAGpC,yF,yBAfzC,4BACI,gCAoBJ,kB,8BApBQ,gG,mDAwBJ,yBACI,yBAEI,+BAAiE,2FAA8B,8EAA/F,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,4BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZgD,kDAAwB,mBAIxB,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,+BAgBJ,kB,8BAhBQ,gG,mDAoBJ,yBACI,yBAEI,+BAAkH,kI,mBAAlH,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZgD,kDAAwB,mDAIxB,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,gCAgBJ,kB,8BAhBQ,gG,mDAqBJ,yBACI,yBAEI,4BACI,+BAAyE,2FAAzE,iBACA,6BACJ,iBAEA,4BACI,+BAA4E,2FAA5E,iBACA,6BACJ,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,0BACI,4BAA6B,a,oBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAnBoH,+DAAoB,kDAAxG,qCAAqC,WAArC,CAAqC,mBAKkD,gEAAqB,mDAA5G,qCAAsC,WAAtC,CAAsC,mBAMtB,mDAAyB,uBAGpC,0F,yBApBzC,4BAEI,gCAyBJ,kB,8BAzBQ,gG,mDA6BJ,yBACI,yBAEI,+BAAmE,2FAA8B,8EAAjG,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,4BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZkD,kDAAwB,mBAI1B,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,+BAgBJ,kB,8BAhBQ,gG,mDAoBJ,yBACI,yBAEI,+BAAmE,2FAA8B,8EAAjG,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,4BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZkD,kDAAwB,mBAI1B,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,+BAgBJ,kB,8BAhBQ,gG,yBA/JpB,0BACQ,+BACI,+BACI,yBACI,4BAAwB,6BAAiF,iBACzG,4BAAwB,6BAAqF,iBAC7G,4BAAwB,6BAAmF,iBAC3G,6BAA4C,8BAAmF,iBACnI,iBACJ,iBAEA,iCAiCA,iCAwBA,iCAoBA,iCAoBA,iCA8BA,iCAoBA,iCAkBR,iBACJ,kB,8BAtKmB,gEAiCA,8DAwBA,mEAoBA,8DAoBA,iEA8BA,+DAoBA,kE,mDAgCR,gCAAsD,+HAAwC,6BAAuE,kB,mDACrK,iDAA0H,iJAAwQ,iB,+DAAzT,0DAAgD,+CAAhD,CAAgD,uBAAhD,CAAgD,+CAAhD,CAAgD,gCAAhD,CAAgD,yB,mDAH7H,yBACE,4BACE,kCACA,gDACF,iBACA,4BACE,+BAA0C,+FAAkC,wGAA5E,iBACF,iBACA,4BACE,2BAA6B,Y,mBAA2C,iBAC1E,iBACA,6BACE,4BAA4C,6GAA6B,iBAC3E,iBACF,iB,yDAZY,yDACc,0DAGH,kEAAuB,oCAGb,wF,yBAlBxC,0BACG,+BACE,+BACE,4BAAuB,6BAAiF,iBACxG,4BAAuB,6BAAqF,iBAC5G,4BAAuB,6BAAmF,iBAC1G,4BAAwB,8BAAmF,iBAC7G,iBACA,gCACE,gCAeD,iBACJ,iBACF,kB,8BAjBW,wF,mDApM/B,0BAEI,6BACI,6BACI,4BAEI,4BAEI,+BAmLA,+BA4BJ,iBAEA,4BACI,2BAAgC,kGAC5B,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,gCAzNyB,kEAmLA,mE,mDAkDrB,gCAAwC,2FACpC,6BACJ,iB,iDAFmG,mCDzO3H,iBAiDI,WAAqBwL,EAAkCC,EAA6B5I,EACzE6I,EAA+B6c,GADrB,KAAA/c,UAAkC,KAAAC,WAA6B,KAAA5I,WACzE,KAAA6I,aAA+B,KAAA6c,oBA1B1C,KAAApe,QAAkB,KAElB,KAAAyB,UAAoB,EAeX,KAAAiG,gBAA0B,EAInC,KAAAqvB,iBAA2B,EAE3B,KAAAC,kBAA4B,E,OAK5B,YAAA/2B,SAAA,WAEIpI,KAAK8P,yBAA2B,IAAI,EAAA5K,SAGxC,YAAA8K,OAAA,WAC+B,aAAxBhQ,KAAK2I,UAAU/I,MAAgG,IAAzEI,KAAK4P,kBAAkBtP,WAAWN,KAAK2I,UAAU/I,MAAM6B,OAAOS,SACvGlC,KAAKk/B,gBAAkB,IAI3B,YAAAniB,eAAA,SAAeqiB,EAAYt2B,GACzBs2B,EAAWn+B,MAAQ6H,GAGrB,YAAAu2B,aAAA,SAAcv2B,EAAYs2B,GAOtB,IAAIE,EAAct/B,KAAK4P,kBAAkBtP,WAAWN,KAAK2I,UAAU/I,MAAM6B,OAIzEzB,KAAKu/B,UAAWD,IAKpB,YAAAC,UAAA,SAAWC,GAGPx/B,KAAKm/B,kBAAmB,EAGxBK,EAAO5mB,MAAM,SAAU+J,EAAGC,GAEtB,OAAoB,MAAfD,EAAE5hB,WAAqC,KAAhB4hB,EAAE5hB,UACnB,EAEc,MAAf6hB,EAAE7hB,WAAqC,KAAhB6hB,EAAE7hB,WACvB,EAGK,IAAIa,KAAM+gB,EAAE5hB,WACb,IAAIa,KAAMghB,EAAE7hB,cAIhC,IAAM,IAAIK,EAAI,EAAGA,EAAIo+B,EAAOt9B,OAAQd,IAAM,CACtC,IAAIq+B,EAAOD,EAAOp+B,EAAI,GAClBs+B,EAAUF,EAAOp+B,GAEhBs+B,EAAQ3+B,UACT0+B,EAAKz+B,QAAU,UAAM2+B,iBAAkB,IAAI/9B,KAAM,IAAIA,KAAM89B,EAAQ3+B,WAAYI,UAxBtE,QA2BTs+B,EAAKz+B,QAAU,EAAAtB,QAGd+/B,EAAK1+B,YAAc2+B,EAAQ3+B,YAC5Bf,KAAKm/B,kBAAmB,GAI3BK,EAAOt9B,OAAS,IACjBs9B,EAAOA,EAAOt9B,OAAS,GAAGlB,QAAU,EAAAtB,UAI5C,YAAAkgC,gBAAA,WACI,IAAIJ,EAA0Bx/B,KAAK4P,kBAAkBtP,WAAWN,KAAK2I,UAAU/I,MAAM6B,OAEjFE,EAAqB,IAAI,EAAAS,cAI7B,GAHAT,EAAIZ,UAAY,KAChBY,EAAIX,QAAU,KAEe,UAAxBhB,KAAK2I,UAAUrH,KAEhBK,EAAIV,MAAQjB,KAAKa,SAASU,cAEzB,GAA6B,aAAxBvB,KAAK2I,UAAUrH,KAEhBk+B,EAAOt9B,OAAS,GACa,GAAzBlC,KAAKk/B,iBAAiD,MAAxBl/B,KAAKk/B,gBACpCv9B,EAAIV,MAAQu+B,EAAOx/B,KAAKk/B,iBAAiBj+B,MAGzCU,EAAIV,MAAQu+B,EAAO,GAAGv+B,OAI1BU,EAAIV,MAAQ,CAAE,KAAQjB,KAAKS,cAAcoe,aAAc,YAAe,IAE7B,iBAApC7e,KAAKS,cAAcoe,aACpBld,EAAIV,MAAMK,KAAO,eAEyB,YAApCtB,KAAKS,cAAcoe,aACzBld,EAAIV,MAAMK,KAAO,UAEyB,UAApCtB,KAAKS,cAAcoe,aACzBld,EAAIV,MAAMK,KAAO,QAEyB,eAApCtB,KAAKS,cAAcoe,aACzBld,EAAIV,MAAMK,KAAO,aAEyB,SAApCtB,KAAKS,cAAcoe,aACzBld,EAAIV,MAAMK,KAAO,OAEyB,cAApCtB,KAAKS,cAAcoe,eACzBld,EAAIV,MAAMK,KAAO,mBAIxB,GAA6B,SAAxBtB,KAAK2I,UAAUrH,KAAkB,CACvC,IAAIu+B,EAAQ7/B,KAAKuQ,qCAAsCvQ,KAAK2I,UAAU/I,MAEjEigC,EAAM39B,OAAS,IAChBP,EAAIV,MAAQ4+B,EAAM,GAAGjgC,MAI7B4/B,EAAOr/B,KAAMwB,GAEgB,aAAxB3B,KAAK2I,UAAU/I,OAChBI,KAAKk/B,gBAAkBM,EAAOt9B,OAAS,GAG3ClC,KAAKu/B,UAAWC,GAEhBx/B,KAAKumB,kBAAkBje,iBAG3B,YAAAw3B,aAAA,SAAcrR,GACVzuB,KAAKk/B,gBAAkBzQ,GAG3B,YAAAsR,eAAA,SAAgBp3B,GACZ,IAAIq3B,EAA4B,GAOhC,OALAhgC,KAAK4P,kBAAkBtP,WAAWqI,EAAU/I,MAAM6B,OAAOC,SAAS,SAAA09B,GAC9DA,EAAWn+B,MAAMgI,aAAavH,SAAS,SAAAu+B,GACnCD,EAAS7/B,KAAM8/B,SAGhBD,GAGX,YAAAE,oBAAA,SAAqBC,GACjB,IAAIC,EAAS,KASb,OAPAD,EAAOl3B,aAAavH,SAAS,SAAA2+B,GACF,kBAAlBA,EAAOF,SACRC,EAASC,EAAOp/B,UAKjBm/B,GAGX,YAAAE,iBAAA,SAAkB3+B,EAAoBs+B,GAClCt+B,EAAIV,MAAQ,IAAIW,KAAMq+B,GAAM9+B,UAAUiI,YAG1C,YAAAmH,qCAAA,SAAsCC,GAClC,IAAM,IAAIpP,EAAI,EAAGA,EAAIpB,KAAKS,cAAcH,WAAW4B,OAAQd,IAAM,CAC7D,IAAIC,EAAYrB,KAAKS,cAAcH,WAAWc,GAE9C,GAAmB,SAAdC,EAAKC,MAAmBD,EAAKzB,OAAS4Q,EAAoB,CAG3D,IAAIC,GADJpP,EAAsBA,GACFqB,SAAS3C,SAG7B,GAAK0Q,EAASvO,OAAS,EACnB,MAAmB,WAAdb,EAAKzB,KACC,UAAM8Q,eAAeD,GAGrBA,GAMvB,OAAO,MAGX,YAAA8I,OAAA,SAAQgnB,GAIJ,IAFA,IAAIN,EAAMjgC,KAAK4P,kBAAkBtP,WAAWN,KAAK2I,UAAU/I,MAEjDwB,EAAI,EAAGA,EAAI6+B,EAAIx+B,OAAOS,OAAQd,IAAM,CAC/B6+B,EAAIx+B,OAAOL,GAEZL,YAAcw/B,EAAQx/B,WAC5Bk/B,EAAIx+B,OAAOwhB,OAAQ7hB,EAAG,GAI9BpB,KAAKu/B,UAAWU,EAAIx+B,SAGxB,YAAAD,iBAAA,SAAkBH,GAAlB,WACQG,GAAmB,EAQvB,OANAxB,KAAKS,cAAcH,WAAWoB,SAAS,SAAAiH,GAC9B,EAAKA,UAAU/I,OAASyB,EAAKzB,OAC9B4B,EAAmBH,EAAKG,qBAIzBA,GAGX,YAAAkL,SAAA,WAEI1M,KAAK8P,yBAAyBrK,KAAMzF,KAAK4P,mBAEzC5P,KAAK0J,WAAWmD,QAGpB,YAAAC,SAAA,WACI9M,KAAK0J,WAAWmD,QAGpB,YAAAnC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAnQ/CnN,GAA4B,gM,iCAA5BA,EAA4B,iF,m+FC5CzC,4BACI,8BACA,8BAEA,4BACI,6BAGJ,iBAEA,+BAEI,+BACI,4BAGI,4BACI,gCAkOJ,iBAEJ,iBAEA,6BAEI,6BACI,6BAII,mCAGJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,MAvQS,oDACA,uDAGG,gDAYa,wDA6OO,kD,ykCDpOhB,CACR,CACI,EAAA+L,QAAS,YAAa,CAClB,EAAAE,WAAY,YAAa,CACrB,EAAAD,MAAO,CACHk3B,QAAS,IAEb,EAAA53B,QAAS,YAEb,EAAAW,WAAY,YAAa,CACrB,EAAAD,MAAO,CACHk3B,QAAS,IAEb,EAAA53B,QAAS,mB,EAlB7B,GAuBa,EAAAtL,gC,kFE5Cb,+BAgCA,OA1BQ,EAAAoT,eAAP,SAAuBosB,GAGjB,IAFA,IAAI2D,EAAW,GAELr/B,EAAI,EAAGA,EAAI07B,EAAI56B,SAAUd,EACV,mBAAhB07B,EAAI17B,GAAGxB,MACU,uBAAhBk9B,EAAI17B,GAAGxB,MAEb6gC,EAAStgC,KAAK28B,EAAI17B,IAItB,OAAOq/B,GAQN,EAAAd,iBAAP,SAAwBe,GACjB,IAAMxf,EAAMwf,EAAQvf,aACdwf,EAAQD,EAAQpf,cAAgB,EAEtC,OAAOof,EAAQrf,iBAAmB,KAAQsf,EAAQ,GAAK,IAAM,IAAOA,EAAQ,KAAQzf,EAAM,GAAK,IAAM,IAAOA,GAGpH,EAhCA,G,0HCCA,W,iECDA,4BACE,+BAA4H,0FAA0B,iBACxJ,kBDCA,iBAWE,WAAY0f,GAJH,KAAAC,SAAU,EAET,KAAAjiB,YAAc,IAAI,EAAA1W,aAG1BlI,KAAK4gC,MAAQA,E,OAGf,YAAAE,MAAA,SAAMvjB,GAEJ,OADAvd,KAAK6gC,SAAU,EACR7gC,KAAK4gC,MAAMzjB,eAGpB,YAAA4jB,SAAA,SAASxjB,GACPvd,KAAK4gC,MAAMzjB,cAAc5D,UAG3B,YAAAuiB,QAAA,WACE97B,KAAK4e,YAAYlQ,Q,iCArBR/Q,GAAiB,oC,iCAAjBA,EAAiB,sXCP9B,8B,KAAK,gC,wCDGL,GAIa,EAAAA,qB,0HEPb,S,OAEA,2B,OAKI,YAAAqjC,UAAA,SAAUC,EAActvB,GACpB,OAAKsvB,GAAUtvB,EAIRsvB,EAAMtvB,QAAO,SAAA4R,GAAQ,OAA+B,IAA/B5R,EAAO3I,QAAQua,EAAK3jB,SAHrCqhC,G,iCAHNxjC,I,qEAAAA,EAA8B,U,EAJ3C,GAIa,EAAAA,kC,8HCNb,KACA,MADA,IAEA,QAEA,QAGA,SAIA,GAFA,OAEA,Q,iFCTM,yBAAI,YAAkC,kB,kBAAlC,gE,yBAGN,6BAAqE,YAAW,kB,6BAAX,+C,sBACrE,6BAAsE,6BAAuE,kB,mDA6B/F,6BACE,YAEA,+BAGE,4IAA2C,sKAH7C,iBAYF,iB,wHAdE,qDAGE,mEACA,6DAA8D,iCAA9D,CAA8D,oBAA9D,CAA8D,wDAA9D,CAA8D,0BAA9D,CAA8D,0BAA9D,CAA8D,uBAA9D,CAA8D,wB,yBAiBlE,2BAAuF,Y,mBAAsC,kB,uCAAtC,wF,mDAzB7F,yBACI,yBAEE,gCAiBF,iBACA,4BACE,+BAA+D,+FAA6B,+EAA5F,iBACF,iBACA,4BACE,6BACF,iBACA,4BACE,2BAAkC,6GAAwB,iBAC5D,iBACJ,iB,yDA3B6D,yDAmBf,kEAAuB,oCAG5D,yE,mDArCzB,4BACI,4BACI,+BACI,+BACI,yBACI,4BAAwB,6BAAiF,iBACzG,4BAAwB,6BAAqF,iBAC7G,4BAAwB,8BAAmF,iBAC3G,6BAA4C,8BAAmF,iBACnI,iBACJ,iBACA,6BACI,+BA+BJ,iBACJ,iBACJ,iBAEA,6BACE,4BAAgC,kGAA4B,8BAAoE,iBAClI,iBACJ,iB,gCAtCoB,6DDnBhD,iBAkBI,WAAqB+L,EAAiCE,GAAjC,KAAAF,UAAiC,KAAAE,aAZtD,KAAAvB,QAAkB,KAOlB,KAAA4K,UAA+B,KAE/B,KAAAosB,kBAA4B,E,OAK5B,YAAA/2B,SAAA,WAEIpI,KAAK8hB,gBAAkB,IAAI,EAAA5c,SAI/B,YAAA+G,KAAA,SAAM8G,GACF/S,KAAK+S,UAAYA,GAGrB,YAAA6sB,gBAAA,WAII,IAFA,IAAIne,EAAU,GAEJrgB,EAAI,EAAGA,EAAIpB,KAAK+S,UAAUlN,MAAM3D,OAAQd,IAAM,CAGpDqgB,EAFczhB,KAAK+S,UAAUlN,MAAMzE,GAEnBxB,MAAQ,GAG5B,IAAMshC,EAAQ,CACVngC,UAAW,KACXC,QAAS,KACTygB,QAASA,GAGbzhB,KAAK+S,UAAUwO,QAAQphB,KAAM+gC,IAGjC,YAAA3nB,OAAA,SAAQ2nB,GAEJ,IAAM,IAAI9/B,EAAI,EAAGA,EAAIpB,KAAK+S,UAAUwO,QAAQrf,OAAQd,IAAM,CAC3CpB,KAAK+S,UAAUwO,QAAQngB,GAExBL,YAAcmgC,EAAMngC,WAC1Bf,KAAK+S,UAAUwO,QAAQ0B,OAAQ7hB,EAAG,GAI1CpB,KAAKu/B,aAGT,YAAA1Z,uBAAA,SAAwBllB,EAAcW,EAAW4/B,EAAYzS,GAA7D,WAEQ/mB,EAAoBpG,EAAK1B,KAEzBg6B,EAAa,KACbvzB,EAAgB,KAEpB,GAAKooB,EAAQ,EAAI,CACb,IAAI0S,EAAQnhC,KAAK+S,UAAUlN,MAAM4oB,EAAQ,GACnC,EAASyS,EAAMzf,QAAQ0f,EAAMvhC,MAEV,MAApB,EAAO6Y,WAAyD,MAApC,EAAOA,UAAUsN,WAAWnmB,OACzDyG,EAAgBrG,KAAK+S,UAAUnT,KAC/Bg6B,EAAa,EAAOnhB,UAAUsN,WAAWnmB,MAIjD,OAAO,EAAA0iB,WAAW/gB,QAAO,SAAEghB,GACvB,EAAK/Y,QAAQoJ,wBAAyBsuB,EAAMzf,QAAQngB,EAAK1B,MAAMiT,KAAMnL,EAAmBkyB,EAAYvzB,EAAe1F,GAAOuJ,MAAM,SAAAsY,GAC5HD,EAAS9c,KAAM+c,UAK3B,YAAAc,kBAAA,SAAmBjU,EAAmB/N,EAAW4/B,EAAYvgC,GAKzD,IALJ,WAGQmU,EAAc,GAER1T,EAAI,EAAGA,EAAIpB,KAAK+S,UAAUlN,MAAM3D,OAAQd,IAAM,CACpD,IAAIs+B,EAAU1/B,KAAK+S,UAAUlN,MAAMzE,GAInC,GAFA0T,EAAY3U,KAAMu/B,EAAQ9/B,MAErB8/B,EAAQ9/B,OAAS0B,EAAK1B,KACvB,MAIRI,KAAKwJ,QAAQoL,oBAAqBvF,EAAEkU,KAAK6d,IAAK9/B,EAAK1B,KAAMkV,GAAa,EAAMnU,GAAOuJ,MAAM,SAAAm3B,GAErFH,EAAMzf,QAAQngB,EAAK1B,MAAM6Y,UAAY4oB,EAAU5oB,UAC/CyoB,EAAMzf,QAAQngB,EAAK1B,MAAMiT,KAAOwuB,EAAU5oB,UAAUsN,WAAWnb,aAAaiY,eAAiB,MAAQwe,EAAU5oB,UAAUsN,WAAWnmB,KAEpI,IAAM,IAAIwB,EAAI,EAAGA,EAAI,EAAK2R,UAAUlN,MAAM3D,OAAQd,IAAM,CAIpD,IAHA,IAAIs+B,EAAU,EAAK3sB,UAAUlN,MAAMzE,GAC/BkgC,EAAWD,EAEK,MAAZC,GAAoBA,EAAS7oB,UAAUsN,WAAWzkB,MAAQo+B,EAAQ9/B,MAElE0hC,EADCA,EAAS7f,QAAQvf,OAAS,EAChBo/B,EAAS7f,QAAQ,GAGjB,KAIF,MAAZ6f,IACDJ,EAAMzf,QAAQie,EAAQ9/B,MAAM6Y,UAAY6oB,EAAS7oB,UACjDyoB,EAAMzf,QAAQie,EAAQ9/B,MAAMiT,KAAOyuB,EAAS7oB,UAAUsN,WAAWnb,aAAaiY,eAAkB,MAAQye,EAAS7oB,UAAUsN,WAAWnmB,UAI9I4K,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAiC,SAAA,WAEI1M,KAAK8hB,gBAAgBrc,KAAMzF,KAAK+S,WAEhC/S,KAAK0J,WAAWmD,QAGpB,YAAAC,SAAA,WACI9M,KAAK0J,WAAWmD,QAGpB,YAAAwyB,aAAA,SAAcv2B,GACV9I,KAAKu/B,aAGT,YAAAA,UAAA,WAGIv/B,KAAKm/B,kBAAmB,EAGxBn/B,KAAK+S,UAAUwO,QAAQ3I,MAAM,SAAU+J,EAAGC,GAEtC,OAAoB,MAAfD,EAAE5hB,WAAqC,KAAhB4hB,EAAE5hB,UACnB,EAEc,MAAf6hB,EAAE7hB,WAAqC,KAAhB6hB,EAAE7hB,WACvB,EAGK,IAAIa,KAAM+gB,EAAE5hB,WACb,IAAIa,KAAMghB,EAAE7hB,cAKhC,IAAM,IAAIK,EAAI,EAAGA,EAAIpB,KAAK+S,UAAUwO,QAAQrf,OAAQd,IAAM,CACtD,IAAIq+B,EAAOz/B,KAAK+S,UAAUwO,QAAQngB,EAAI,GAClCs+B,EAAU1/B,KAAK+S,UAAUwO,QAAQngB,GAErCq+B,EAAKz+B,QAAUhB,KAAK2/B,iBAAkB,IAAI/9B,KAAM,IAAIA,KAAM89B,EAAQ3+B,WAAYI,UAxBjE,QA0BRs+B,EAAK1+B,YAAc2+B,EAAQ3+B,YAC5Bf,KAAKm/B,kBAAmB,GAI3Bn/B,KAAK+S,UAAUwO,QAAQrf,OAAS,IACjClC,KAAK+S,UAAUwO,QAAQvhB,KAAK+S,UAAUwO,QAAQrf,OAAS,GAAGlB,QAAU,EAAAtB,UAI5E,YAAAigC,iBAAA,SAAkBe,GACd,IAAMxf,EAAMwf,EAAQvf,aAEpB,OAAOuf,EAAQrf,iBAAmB,KAAQqf,EAAQpf,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,GAI5G,YAAAxW,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAzL/C1M,GAAkC,2E,iCAAlCA,EAAkC,g6D,GAAA,MClB/C,4BACI,oEAIA,8BACA,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BACI,gCACI,6BACI,6BACI,6BACI,8BACI,gCAmDJ,iBACJ,iBACJ,iBAEJ,iBAEA,6BAEI,8BACI,8BAII,iCAAsB,wCAAS,EAAA2O,cAC3B,8BACJ,iBACJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBACJ,kB,4BAxFS,oDACA,uDAc0C,uDAgEsD,wE,uPDvEzG,GAKa,EAAA3O,sC,sHElBb,KACA,MAIA,MALA,IAOA,S,4JCSK,0BAA+H,2FAAuB,aAAW,qBAAM,iB,gCAArF,qE,mDAClF,0BAAgI,2FAAuB,aAAW,qBAAM,iB,gCAArF,qE,qBAInF,uC,qBACA,+BDXL,iBAeI,WAAqBi2B,EAAkD5mB,EAAsC5D,GAAxF,KAAAwqB,sBAAkD,KAAA5mB,eAAsC,KAAA5D,UAPhH,KAAAmG,QAAkB,SAQX3P,KAAKikB,QAAUza,EAAQya,UACvBjkB,KAAKkkB,aAAelkB,KAAKikB,SAAWza,EAAQ0a,eAClDlkB,KAAKmkB,cAAgBnkB,KAAKikB,SAAWjkB,KAAKkkB,cAAgB1a,EAAQ4a,gBAElEpkB,KAAKkkB,aAAelkB,KAAK85B,cAAc,UAAY95B,KAAK85B,cAAc,U,OAGpE,YAAA1xB,SAAA,aAGH,YAAA0xB,cAAA,SAAcnqB,GACb3P,KAAK2P,QAAUA,EAEA,WAAZA,EACF3P,KAAK+5B,UAAY/5B,KAAKg0B,oBAAoBpQ,OAAO,6BAE9B,WAAZjU,IACP3P,KAAK+5B,UAAY/5B,KAAKg0B,oBAAoBpQ,OAAO,gCAKzC,YAAAlZ,MAAP,SAAcD,GACNzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC3EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAlClE5M,GAA0B,sH,iCAA1BA,EAA0B,qcCjBvC,4BACI,4BACA,6BAEA,4BAEI,4BACL,4BAEC,4BACC,yBACC,YACD,iBACD,iBAEA,0BACC,6BACA,6BACD,iBAEA,6BACC,iDACA,yCACD,iBAEQ,iBACJ,iBACJ,iBACJ,kB,MAjBM,yDAK4C,mDACA,oDAItB,yDACR,2D,0ODXpB,GAMa,EAAAA,8B,+GEjBb,KAEA,MACA,MAHA,IAMA,QACA,SAIA,GADA,OACA,QACA,SAEA,S,GACA,M,2ICTQ,6BAAqE,YAAW,kB,6BAAX,+C,yBAGjE,4BACI,yBAEI,YACJ,iBACJ,kB,6BAFQ,kE,yBAIZ,4BAEI,4BACI,yBACI,6BACA,YACJ,iBAEA,yBACI,6BACA,YACJ,iBACJ,iBACJ,kB,6BARY,kEAKA,+D,yBAUA,yBAA6B,YAAW,kB,uBAAX,6C,yBAJzC,4BACI,6BACI,6BACA,yBACI,8BACJ,iBACJ,iBACJ,kB,6BAHgB,iD,uHAkBJ,8BAA6C,4FACzC,sBACA,6BACJ,iB,gCAFO,8E,mDAKH,gCAA6D,iGACzD,6BACJ,kB,qBAEI,6B,qBACA,6B,sBAWA,4BAA8D,6BAAkD,kB,mDAG5G,6BACI,2BAAY,mIACtC,sB,uBAC0B,iBAC5B,iB,0CAH0E,6DACvB,kF,qBAKlD,sB,qBACA,sB,mDAQ+B,+BAAkE,4GAA6B,kIAA/F,iB,2CAA0C,4BAAuB,oB,mDACjE,0BACI,+BAAyC,kHAAmC,4HAA5E,iBAAqK,+BAAuC,gHAAiC,4HAAxE,iBACzK,iB,2CADW,mDAAiC,yBAAoI,iDAA+B,wB,mDAE/M,+BAA6E,6GAA8B,0IAA3G,iB,gEAAqD,4BAAuB,mBAAvB,CAAuB,oBAAvB,CAAuB,2BAAvB,CAAuB,4BAAvB,CAAuB,uBAAvB,CAAuB,wB,yBATpF,0BAII,6BACI,iCACA,+BAGA,iCAEJ,iBACJ,kB,uCAR4B,sDACb,qDACF,oDAGE,qD,mDAtBnB,4BAEI,+BAKxB,2BAAG,6GAAkG,YAAoB,iBACzH,2BAAG,6GACF,6BACA,6BACoB,iBAEG,+BAaJ,iB,+CAxBmF,sDAKF,oDAEjG,oFACA,qFAGyB,uD,mDAmBT,4BAA8D,2BAAiC,6H,uBAAqE,iBAAI,iB,MAAhD,gF,yBACxH,4BAAmE,YAA4B,kB,qDAA5B,+C,mDAHvE,4BACI,4BAAgE,2BAA4B,6GAAyB,iBAAI,iBACzH,8BACA,8BACJ,iB,iCAFQ,iDACA,0D,kGAvCpB,6BACI,+BACI,4BACI,yBACI,4BAA2C,6BAAkD,iBAC7F,8BACA,8BA2BJ,iBACJ,iBACA,4BACI,8B,wBAKJ,iBACJ,iBACJ,kB,6BAtCoB,iDACA,yDA8BJ,iJDxF5B,iBAiCC,WAAmB2L,EAAkC+3B,EAAmCC,EAC/Ep0B,EAAsC6U,EAA8CtY,GAD1E,KAAAH,UAAkC,KAAA+3B,WAAmC,KAAAC,QAC/E,KAAAp0B,eAAsC,KAAA6U,kBAA8C,KAAAtY,cA5B7F,KAAAxB,QAAkB,KAClB,KAAA6P,KAA0B,KAC1B,KAAAypB,EAAY,EACZ,KAAA/B,QAAkB,GAClB,KAAA/tB,OAAgE,GAChE,KAAA+rB,SAAqB,GACrB,KAAAgE,KAAY,CACXC,MAAO,EACPlrB,WAAY,EACZD,SAAU,IACVgM,QAAS,IAEV,KAAA5J,KAAO,CAAEjQ,UAAW,OAAQi5B,MAAO,OACnC,KAAAC,aAAuB,EACvB,KAAAC,cAAwB,EACxB,KAAAC,YAAsB,EAOf,KAAAC,kBAAoB,GAQ1BhiC,KAAKgiC,kBAAoB/f,EAAgB2B,OAAO,qB,OAGjD,YAAAxb,SAAA,sBACOuC,EAAM3K,KAAKwhC,MAAMS,SAASC,SAASj8B,IAAI,OAC7CjG,KAAK6hC,YAAgE,QAAjD7hC,KAAKwhC,MAAMS,SAASC,SAASj8B,IAAI,aAErDjG,KAAKwJ,QAAQiO,qBAAqB9M,GAAKT,MAAK,SAAAq2B,GAC3C,EAAKvoB,KAAOuoB,EACZ,EAAKvoB,KAAK1X,WAAWoB,SAAQ,SAAAiH,GAC5BA,EAAUw5B,aAAc,KAEzB,IAAM/3B,EAAU,EAAK4N,KAAK5N,QACpBC,EAAsC,MAA3B,EAAK2N,KAAK1N,cAAwB,EAAK0N,KAAK1N,cAAgB,EAAK0N,KAAK3N,SAEvF,EAAK03B,WAAa,EAAKp4B,YAAY+Y,kBAAkBtY,EAASC,GAE9D,EAAK+3B,aAAa,MAGnB,IAAIC,EAAU,SAAWC,OAAOC,SAASC,UAAYF,OAAOC,SAASE,KAAO,IAAMH,OAAOC,SAASE,KAAO,IAAMv8B,IAE/GlG,KAAK0iC,SAAW,EAAAC,UAAUN,EAAU,uBAAyB13B,GAC7D3K,KAAK0iC,SAASl0B,WAAU,SAAArG,GACvB,EAAKy6B,qBAAqBz6B,EAAQwH,aAIpC,YAAAnH,YAAA,WACCxI,KAAK0iC,SAAS57B,YAIf,YAAAs7B,aAAA,SAAa3rB,GAAb,WAECzW,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQkK,KAAK1T,KAAKgY,KAAKrN,IAAK8L,EAAYzW,KAAK0hC,KAAKlrB,SAAUxW,KAAK2R,OAAQ3R,KAAK4Y,MAAM1O,MAAK,SAAAw3B,GAC7F,EAAKA,KAAOA,KACVl3B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAUb,YAAAo4B,OAAA,SAAOl6B,GACF3I,KAAK4Y,KAAKjQ,YAAcA,EAAU+T,KACrC1c,KAAK4Y,KAAKgpB,MAA6B,QAApB5hC,KAAK4Y,KAAKgpB,MAAkB,OAAS,MAGxD5hC,KAAK4Y,KAAO,CAAEjQ,UAAWA,EAAU+T,KAAMklB,MAAO,OAGjD5hC,KAAKoiC,aAAa,IAGnB,YAAAU,aAAA,WACC9iC,KAAKgY,KAAK1X,WAAWoB,SAAQ,SAAAL,GAC5BA,EAAK0hC,OAAS,QAGf/iC,KAAK2R,OAAS,GACd3R,KAAK09B,SAAW,GAEhB19B,KAAKoiC,aAAa,IAGnB,YAAAY,aAAA,SAAar6B,GACZA,EAAUw5B,aAAex5B,EAAUw5B,aAGpC,YAAAc,UAAA,SAAUt6B,GAAV,WACC,OAAO,EAAA2Z,WAAW/gB,QAAO,SAACghB,GACzB,EAAKpa,QAAU,KAGf,EAAKqB,QAAQ/H,OAAO,EAAKuW,KAAKrN,IAAKhC,EAAUo6B,OAAQp6B,EAAU+T,KAAM/T,EAAUu6B,KAAM,EAAKvxB,QAAQzH,MAAK,SAAAgd,GACtGA,EAAQic,QAAQ,CAAEtjC,MAAO,IAAM,EAAKoiB,gBAAgB2B,OAAO,uBAAyB,IAAK3iB,MAAO,OAEhGshB,EAAS9c,KAAKyhB,MACZ1c,OAAM,SAACC,GACT,EAAKC,MAAMD,UAKd,YAAAm4B,qBAAA,SAAqB13B,GAEpBlL,KAAK8hC,aAAgB52B,EAASw0B,QAAUx0B,EAASk4B,MAEjDpjC,KAAKuhC,SAASr2B,SAASA,IAGxB,YAAAsZ,iBAAA,SAAiB7b,GAOhB,GANAA,EAAUw5B,aAAc,EAGxBniC,KAAK2R,OAAS3R,KAAK2R,OAAOA,QAAO,SAAA0xB,GAAK,OAAAA,EAAE16B,YAAcA,EAAUu6B,QAChEljC,KAAK09B,SAAW19B,KAAK09B,SAAS/rB,QAAO,SAAA2xB,GAAK,OAAAA,IAAM36B,EAAUu6B,QAEnC,MAAnBv6B,EAAU1H,QAA4C,KAA1B0H,EAAU1H,MAAMyF,OAAwC,KAAxBiC,EAAU1H,MAAMsiC,KAAa,CAE5F,IAAI1jC,EAAQ,IAAM8I,EAAU9I,MAAQ,QAEP,MAAzB8I,EAAU1H,MAAMyF,QACnB7G,GAAS8I,EAAU1H,MAAMyF,OAGG,MAAzBiC,EAAU1H,MAAMyF,OAAwC,MAAvBiC,EAAU1H,MAAMsiC,MACpD1jC,GAAS,OAGiB,MAAvB8I,EAAU1H,MAAMsiC,MACnB1jC,GAAS8I,EAAU1H,MAAMsiC,KAG1B1jC,GAAS,IAETG,KAAK2R,OAAOxR,KAAK,CAAEwI,UAAWA,EAAUu6B,KAAMjiC,MAAO0H,EAAU1H,MAAOpB,MAAOA,IAC7EG,KAAK09B,SAASv9B,KAAKwI,EAAUu6B,MAG9BljC,KAAKoiC,aAAa,IAGnB,YAAAoB,kBAAA,SAAkB76B,GAOjB,GANAA,EAAUw5B,aAAc,EAGxBniC,KAAK2R,OAAS3R,KAAK2R,OAAOA,QAAO,SAAA0xB,GAAK,OAAAA,EAAE16B,YAAcA,EAAUu6B,QAChEljC,KAAK09B,SAAW19B,KAAK09B,SAAS/rB,QAAO,SAAA2xB,GAAK,OAAAA,IAAM36B,EAAUu6B,QAEnC,MAAnBv6B,EAAU1H,OAAqC,KAApB0H,EAAU1H,MAAc,CACtD,IAAMpB,EAAQ,IAAM8I,EAAU9I,MAAhB,QAAuC8I,EAAU1H,MAAQ,IAEvEjB,KAAK2R,OAAOxR,KAAK,CAAEwI,UAAWA,EAAUu6B,KAAMjiC,MAAO0H,EAAU1H,MAAOpB,MAAOA,IAC7EG,KAAK09B,SAASv9B,KAAKwI,EAAUu6B,MAG9BljC,KAAKoiC,aAAa,IAGnB,YAAAqB,iBAAA,SAAiBp0B,EAAmB1G,GAcnC,GAbAA,EAAU1H,MAAQoO,EAAEkU,KACpB5a,EAAUw5B,aAAc,EAGxBniC,KAAK2R,OAAS3R,KAAK2R,OAAOA,QAAO,SAAA0xB,GAAK,OAAAA,EAAE16B,YAAcA,EAAUu6B,QAChEljC,KAAK09B,SAAW19B,KAAK09B,SAAS/rB,QAAO,SAAA2xB,GAAK,OAAAA,IAAM36B,EAAUu6B,QAE1DljC,KAAKgY,KAAK1X,WAAWoB,SAAQ,SAAAL,GACxBA,EAAK6hC,OAASv6B,EAAUu6B,OAC3B7hC,EAAK0hC,OAAS,OAIa,MAAzBp6B,EAAU1H,MAAMA,OAA2C,KAA1B0H,EAAU1H,MAAMA,MAAc,CAClE,IAAMpB,EAAQ,IAAM8I,EAAU9I,MAAhB,QAAuC8I,EAAU1H,MAAMpB,MAAQ,IAE7EG,KAAK2R,OAAOxR,KAAK,CAAEwI,UAAWA,EAAUu6B,KAAMjiC,MAAOoO,EAAEkU,KAAKtiB,MAAOpB,MAAOA,IAC1EG,KAAK09B,SAASv9B,KAAKwI,EAAUu6B,MAC7Bv6B,EAAUo6B,OAAS1zB,EAAEkU,KAAK1jB,WAG1B8I,EAAUo6B,OAAS,GAGpB/iC,KAAKoiC,aAAa,IAGnB,YAAAsB,aAAA,SAAa/6B,GACZ,MAA0B,SAAnBA,EAAUrH,OAAoD,IAAhCqH,EAAUg7B,WAAWzhC,SAA2D,IAA3ClC,KAAK09B,SAAS10B,QAAQL,EAAUu6B,OAAgBljC,KAAK09B,SAAS/rB,QAAO,SAAA1Q,GAAS,OAAA0H,EAAUg7B,WAAWvF,SAASn9B,MAAQiB,OAAS,IAGxM,YAAAw6B,OAAA,SAAOhpB,GAAP,WACKkwB,EAAY5jC,KAAKoN,aAAamC,KAAK,EAAA/R,yBAA0B,CAAEiS,UAAU,EAAMC,qBAAqB,IACxGk0B,EAAUj0B,QAAQ4V,oBAAoB7R,EAAK9T,KAAMI,KAAKgY,KAAK3N,SAAUrK,KAAKgY,KAAKtK,QAAS1N,KAAKgY,KAAK6M,oBAClG+e,EAAUj0B,QAAQ4U,gBAAgBvkB,KAAKgY,KAAKrN,KAC5Ci5B,EAAUj0B,QAAQ8U,sBAAqB,WAEtC,EAAK2d,aAAa,EAAKV,KAAKjrB,gBAI9B,YAAAotB,OAAA,SAAOnwB,GACN,IAAM/I,EAAM+I,EAAK9T,KAEN,MAAP+K,GAAeA,EAAIzI,OAAS,GAC/BogC,OAAOwB,KAAK59B,IAAM,8BAAgCyE,EAAK,WAKzD,YAAAo5B,UAAA,sBACC/jC,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQ6O,kBAAkBrY,KAAKgY,KAAKrN,KAAKxE,YAC5C+D,MAAK,SAAA8N,GACL,EAAKA,KAAOA,EACZ,EAAKA,KAAK1X,WAAWoB,SAAQ,SAAAiH,GAC5BA,EAAUw5B,aAAc,KAIzB,EAAKC,aAAa,MAChB53B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAId,YAAAu5B,eAAA,sBACKJ,EAAY5jC,KAAKoN,aAAamC,KAAK,EAAA/R,yBAA0B,CAAEiS,UAAU,EAAMC,qBAAqB,IAExGk0B,EAAUj0B,QAAQiV,eAAe5kB,KAAKgY,KAAK3N,SAAUrK,KAAKgY,KAAKtK,QAAS1N,KAAKgY,KAAK6M,oBAClF+e,EAAUj0B,QAAQ4U,gBAAgBvkB,KAAKgY,KAAKrN,KAC5Ci5B,EAAUj0B,QAAQ8U,sBAAqB,WAEtC,EAAK2d,aAAa,EAAKV,KAAKjrB,gBAI9B,YAAAwtB,SAAA,sBACCjkC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA9Q,2BAA4B,CACpE+Q,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQotB,SAASvuB,WAAU,SAAAqsB,GAC5B,aAAVA,EACHyH,OAAOC,SAAS2B,KAAOh+B,IAAM,qCAAuC,EAAK8R,KAAKrN,IAAM,WAAaw5B,mBAAmBriC,KAAKC,UAAU,EAAK4P,SAEtH,SAAVkpB,IACRyH,OAAOC,SAAS2B,KAAOh+B,IAAM,uCAAyC,EAAK8R,KAAKrN,IAAM,WAAaw5B,mBAAmBriC,KAAKC,UAAU,EAAK4P,cAM7I,YAAAjH,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAnRrCrM,GAAmB,0O,iCAAnBA,EAAmB,4zGCxBhC,4BACI,4BACA,6BAGA,4BACI,8BAEA,4BACI,8BAMJ,iBACA,8BAgBA,8BAQA,4BACI,6BACI,6CAAiD,8CAAc,EAAAgkC,aAAA,MAAsB,iBAErF,6BAEI,+BAAwB,wCAAS,EAAAU,kBAC7B,+BACI,uBACA,uBACJ,iBACA,8BACJ,iBAEA,iCAMI,mCAGA,iCAAsB,wCAAS,EAAAmB,cAC3B,qCACA,qCACJ,iBACR,iBACJ,iBACJ,iBACA,6BACI,kCA4CJ,iBAKA,6BACI,6BACI,6CAAiD,8CAAc,EAAA7B,aAAA,MAAsB,iBACzF,iBACJ,iBACJ,iBAEJ,kB,MAzHa,oDAGI,2CAOJ,2CAgBA,sDAsBa,oDAMM,qEAIM,wDACA,sDAMrB,6C,2RDpDjB,GAKa,EAAAhkC,uB,+HExBb,KACA,MACA,MAFA,IAIA,SAIA,SAGA,S,GACA,OACA,M,yGCZI,4BAAqE,YAAW,kB,6BAAX,+C,mDAEpE,4BACG,4BACI,kCACI,4BACI,gCAAiD,4F,uBAE7C,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,+BAP6H,kDAA2B,4D,mDA0B5H,gCAAmD,yIAC/C,6BACJ,kB,mDACA,gCAAgD,0IAC5C,6BACJ,kB,mDACA,gCAAmD,gJAC/C,6BACJ,kB,mDAdZ,yBACI,4BACI,6BACI,gCAAsB,6GAClB,6BACJ,iBACA,kCAGA,kCAGA,kCAGJ,iBACJ,iBACA,4BAA4C,YAAqB,iBACjE,6BAA4C,aAAyB,iBACzE,iB,+CAboB,yDAGA,gDAGA,yDAK4B,8CACA,mD,yBA5B5D,6BACI,+BACI,4BACI,yBACI,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAAkD,iBAClG,iBACJ,iBACA,6BACI,gCAoBJ,iBACJ,iBACJ,kB,6BAtBgB,yD,yBA8CoB,8BAAqD,YAA0B,kB,uCAA1B,kE,yBATrE,yBACI,4BACI,6BACI,sBACA,2BACI,8BAA+B,YAAmB,iBAClD,8BAA+B,YAAe,iBAC9C,8BAA+B,aAAa,iBAC5C,+BAA+B,aAAe,iBAC9C,iCACJ,iBACJ,iBACJ,iBACJ,kB,uBAR+C,0DACA,sDACA,oDACA,sDACzB,iD,mDAO9B,6BACI,6CAAqB,uGAAoC,iBAC7D,kB,kGA7BhB,6BACI,6BACI,4BACI,6BACI,+BACI,4BACI,4BACI,4BAAoC,6BAA2C,iBACnF,iBACJ,iBACA,4BACI,gC,wBAcJ,iBACJ,iBACA,gCAGJ,iBACJ,iBACJ,iBACJ,kB,6BAtB4B,iJAgBP,6DD/DzB,iBA4BC,WAAmBoL,EAAkCivB,EAAwBrrB,EAAqCzD,EAAkCsY,GAAjI,KAAAzY,UAAkC,KAAAivB,SAAwB,KAAArrB,eAAqC,KAAAzD,cAAkC,KAAAsY,kBAtBpJ,KAAA9Z,QAAkB,KAClB,KAAA6P,KAAmB,KACnB,KAAA0pB,KAAY,CACXlrB,SAAU,GACVC,WAAY,EACZkrB,MAAO,EACPnf,QAAS,IAkBTxiB,KAAKikB,QAAUta,EAAYsa,UAC3BjkB,KAAKokC,MAAQz6B,EAAYy6B,Q,OAG1B,YAAAh8B,SAAA,sBACCpI,KAAKwJ,QAAQ8N,qBAAqBtX,KAAK2K,IAAK,aAAaT,MAAK,SAAA8N,GAC7D,EAAKA,KAAOA,EAEZ,EAAKoqB,aAAa,MAGnB,IAAIC,EAAU,SAAWC,OAAOC,SAASC,UAAYF,OAAOC,SAASE,KAAO,IAAMH,OAAOC,SAASE,KAAO,IAAMv8B,IAE/GlG,KAAK0iC,SAAW,EAAAC,UAAUN,EAAU,qBACpCriC,KAAK0iC,SAASl0B,WAAU,SAAArG,GACF,uBAAjBA,EAAQ7G,MACX,EAAK8gC,aAAa,EAAKV,KAAKjrB,gBAK/B,YAAAjO,YAAA,WACCxI,KAAK0iC,SAAS57B,YAOf,YAAAu9B,0BAAA,SAA0B9D,GAA1B,WACCvgC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,+BAAiC,KAAO2c,EAAQ7yB,QAAU,IACxH1N,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,uBAEjE5jB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAC3C,EAAKlK,QAAQ4O,wBAAwBmoB,EAAQ51B,KAAKT,MAAK,SAAA0C,GACtD,EAAK03B,gBAEH95B,OAAM,SAACC,GACT,EAAKC,MAAMD,UAKd,YAAA65B,WAAA,sBAECtkC,KAAKwJ,QAAQ8N,qBAAqBtX,KAAK2K,IAAK,aAAaT,MAAK,SAAA8N,GAC7D,EAAKA,KAAOA,KACVxN,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAs5B,UAAA,sBACC/jC,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQ0O,0BAA0BlY,KAAKgY,KAAKrN,KAAKT,MAAK,SAACwJ,GAE3D,EAAK0uB,aAAa,EAAKV,KAAKjrB,eAE1BjM,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA23B,aAAA,SAAa3rB,GAAb,WACkB,MAAbzW,KAAKgY,OAERhY,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQwP,yBAAyBhZ,KAAKgY,KAAKrN,IAAK3K,KAAK0hC,KAAKlrB,SAAUC,EAAY,cAAc,GAAMvM,MAAK,SAAA0C,GAE7G,EAAK80B,KAAO90B,KAEVpC,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZzK,KAAKskC,eAIP,YAAAC,eAAA,WACCvkC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAhR,sBAAuB,CAC/DiR,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQ/F,UAAW,EACnC5J,KAAK0J,WAAWiG,QAAQ3F,OAAShK,KAAKgY,KACtChY,KAAK0J,WAAWiG,QAAQ7F,OAAQ,GAIjC,YAAA2yB,OAAA,SAAO8D,GACNvgC,KAAKy4B,OAAOQ,SAAS,CAAC,yBAA0BsH,EAAQ51B,KAAK,KAG9D,YAAA65B,mBAAA,SAAmBjE,GAAnB,WAECvgC,KAAKwJ,QAAQsP,iBAAiBynB,EAAQ51B,KAAKT,MAAK,WAE/C,EAAKk4B,aAAa,EAAKV,KAAKjrB,eAE1BjM,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAg6B,oBAAA,SAAoBlE,GACnB+B,OAAOC,SAAS2B,KAAOh+B,IAAM,uCAAyCq6B,EAAQ51B,KAG/E,YAAAD,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA/IrCnM,GAAmC,2L,iCAAnCA,EAAmC,44DCtBhD,0BACI,8BAEC,8BAaD,4BACI,+BAiCJ,iBAGA,+BAkCJ,kB,MAtFS,oDAEC,yDAcG,2CAoCQ,+C,4MDpCrB,GAKa,EAAAA,uC,sHEtBb,KACA,MACA,MAFA,IAOA,SACA,S,GAEA,OACA,M,uFCVI,4BAAqE,YAAW,kB,6BAAX,+C,mDAErE,4BAEI,4BACI,+BACI,4BACI,+BAA+D,6BAAoD,iBAAS,+BAA+C,mGAA/C,iBAE5H,gCAAiD,4FAC7C,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,mDAR2L,iDAE9D,mD,mDA0BjG,gCAAyC,+HACrC,6BACJ,kB,mDARZ,yBACI,4BACI,6BACI,gCAAsB,6GAClB,6BACJ,iBACA,kCAGJ,iBACJ,iBACA,4BAA4C,YAAqB,iBACjE,4BAA4C,YAAyB,iBACzE,iB,+CAPoB,iDAK4B,8CACA,mD,yBAvB5D,6BACI,+BACI,4BACI,yBACI,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAAoD,iBACpG,iBACJ,iBACA,6BAEI,gCAcJ,iBACJ,iBACJ,kB,6BAhBgB,yDDjBxB,iBAiBC,WAAmBkL,EAAkCivB,EAAwBrrB,EAAsC6U,GAAhG,KAAAzY,UAAkC,KAAAivB,SAAwB,KAAArrB,eAAsC,KAAA6U,kBAXnH,KAAA9Z,QAAkB,KAClB,KAAA6P,KAAmB,KACnB,KAAAtK,QAAkB,G,OAalB,YAAAtF,SAAA,sBACCpI,KAAKwJ,QAAQ8N,qBAAqBtX,KAAK2K,IAAK,eAAeT,MAAK,SAAA8N,GAC/D,EAAKA,KAAOA,MAKd,YAAA+rB,UAAA,sBACC/jC,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQyO,wBAAwBjY,KAAKgY,KAAKrN,IAAK3K,KAAK0N,SAASxD,MAAK,SAAAq2B,GACtE,EAAKvoB,KAAKgoB,SAAS7/B,KAAKogC,MAEtB/1B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA85B,eAAA,WACCvkC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAhR,sBAAuB,CAC/DiR,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQ/F,UAAW,EACnC5J,KAAK0J,WAAWiG,QAAQ3F,OAAShK,KAAKgY,KACtChY,KAAK0J,WAAWiG,QAAQ7F,OAAQ,GAIjC,YAAA2yB,OAAA,SAAO8D,GACNvgC,KAAKy4B,OAAOQ,SAAS,CAAC,yBAA0BsH,EAAQ51B,KAAK,KAG9D,YAAAkyB,SAAA,SAAS0D,GAAT,WACCvgC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,+BAAiC,KAAO2c,EAAQ7yB,QAAU,IACxH1N,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,uBAEjE5jB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAC3C,EAAKlK,QAAQ4O,wBAAwBmoB,EAAQ51B,KAAKT,MAAK,SAAA0C,GACtD,EAAKoL,KAAKgoB,SAAW,EAAKhoB,KAAKgoB,SAASruB,QAAO,SAAC1Q,EAAOwtB,EAAOqO,GAC7D,OAAO77B,EAAM0J,MAAQ41B,EAAQ51B,UAG5BH,OAAM,SAACC,GACT,EAAKC,MAAMD,UAMd,YAAAC,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAzErCpM,GAA0B,wJ,iCAA1BA,EAA0B,qyCClBvC,0BACI,8BAEA,+BAeA,4BACI,+BA4BJ,iBACJ,kB,MA/CS,oDAEA,yDAgBI,6C,+MDNb,GAKa,EAAAA,8B,mHElBb,KACA,MACA,MAIA,OANA,IAOA,S,2GCGgB,4BACI,4BACI,yBAAI,YAAoC,iBAC5C,iBACJ,kB,6BAFY,wE,mDAGZ,4BACI,4BACI,yBACI,wBAAI,2BAAY,mGAAiC,6BAA4C,iBAAI,iBACrG,iBACJ,iBACJ,kB,uFAGI,0BAAoH,2FAAuB,UAAQ,6BAAwD,iB,gCAAjI,kE,wBAK1E,kD,6BAAiE,gC,wBACjE,wC,6BAAuD,gCDrB3E,iBAgBC,WAAoBmL,EAAkC4D,EAAsCo0B,GAAxE,KAAAh4B,UAAkC,KAAA4D,eAAsC,KAAAo0B,QAR5F,KAAA7xB,QAAkB,GAClB,KAAAqI,KAAmB,K,OAUnB,YAAA5P,SAAA,sBACOuC,EAAM3K,KAAKwhC,MAAMS,SAASC,SAASj8B,IAAI,OAElC,MAAP0E,IACH3K,KAAK2P,QAAU,OAGhB3P,KAAKwJ,QAAQ8O,cAAc3N,GAAKT,MAAK,SAAA8N,GACpC,EAAKA,KAAOA,EAERA,EAAKukB,OACR,EAAK5sB,QAAU,WAKlB,YAAA40B,eAAA,SAAez7B,GACdA,EAAM0nB,iBAENxwB,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAAhR,sBAAuB,CAC/DiR,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQ/F,UAAW,EACnC5J,KAAK0J,WAAWiG,QAAQ3F,OAAShK,KAAKgY,KACtChY,KAAK0J,WAAWiG,QAAQ7F,OAAQ,GAGjC,YAAAgwB,cAAA,SAAcnqB,GACb3P,KAAK2P,QAAUA,G,iCA3CJnR,GAAuB,qH,iCAAvBA,EAAuB,qkBCfpC,4BACI,4BACA,6BAEA,4BAGI,4BACI,4BAEI,8BAKA,8BAQA,0BACI,4BACA,2BAA0F,wCAAS,EAAAs7B,cAAc,UAAQ,6BAAsD,iBACnL,iBAEA,6BACI,yDACA,+CACJ,iBAEJ,iBACJ,iBACJ,iBACJ,kB,MA1BqB,2CAKA,2CASE,wDAC6C,gFAIjB,8DACV,gE,qPDrBzC,GAMa,EAAAt7B,2B,kHEfb,KACA,MACA,MAFA,IAKA,QAMA,GAHA,OAGA,QAEA,GADA,MACA,Q,mHCRQ,6BAAqE,YAAW,kB,6BAAX,+C,qBA8CzB,6B,qBACA,6B,mDAGR,gCAAiE,uJAC7D,6BACJ,kB,mDACA,gCAA6D,wJACvE,6BACF,kB,yBAdI,4BAEI,6BACI,2BACI,gCACI,oCACA,oCACJ,iBACJ,iBACA,kCAGA,kCAGJ,iBACJ,kB,uCAbW,uEAEe,+FACA,6FAGV,mEAGA,gE,yBAhCpB,yBACI,4BACI,6BACI,sBACA,2BACI,8BACI,YACJ,iBACA,8BACI,YACJ,iBACA,8BACI,aACJ,iBACJ,iBAEA,oCAEJ,iBACJ,iBACA,+BAiBJ,kB,2CA/BoB,wDAGA,0DAGA,kEAIQ,kDAIpB,+D,mDAqBhB,6BACI,6CAAqC,gHAA8C,iBACvF,kB,sBAUG,4BACE,6BACF,kB,sBACA,4BACG,6BACF,kB,sBACA,4BACE,6BACF,kB,sBACA,4BACE,6BACF,kB,mDACD,4BACE,gCAAsB,wGACpB,6BACF,iBACF,kB,qBACA,uB,qBAyBF,uB,yBAnBF,yBACE,4BACE,6BACG,sBACA,2BAAyC,YAAgB,iBAC5D,iBACF,iBACA,4BACE,2BAAwC,YAAwB,iBAClE,iBACA,4BACG,4BAAwC,aAAuB,iBACjE,iBACA,6BACE,4BAAwC,aAAkB,iBAC5D,iBACA,6BACE,4BAAwC,aAAsB,iBAChE,iBACD,+BAMD,kB,2CArB+C,+CAIJ,yDAGC,sDAGA,iDAGA,qDAEvC,+D,mDAUR,6BACG,6CAAuC,kHAAgD,iBAC1F,kB,gLDtHrB,aAsCC,WAAmBgL,EAAkC4D,EAAsCqrB,EAClFxW,EAAsCtY,EAAiC+6B,GAD7D,KAAAl7B,UAAkC,KAAA4D,eAAsC,KAAAqrB,SAClF,KAAAxW,kBAAuE,KAAAyiB,YAjChF,KAAAv8B,QAAkB,KAElB,KAAAw8B,eAAiC,CAChChD,MAAO,EACPlrB,WAAY,EACZD,SAAU,GACVgM,QAAS,IAGV,KAAAoiB,iBAAmC,CAClCjD,MAAO,EACPlrB,WAAY,EACZD,SAAU,GACVgM,QAAS,IAYV,KAAAqiB,kBAA4B,EAC5B,KAAAC,oBAA8B,EAI9B,KAAAC,eAAyB,EAIxB/kC,KAAKikB,QAAUta,EAAYsa,UAC3BjkB,KAAKkkB,aAAelkB,KAAKikB,SAAWta,EAAYua,eAChDlkB,KAAKmkB,cAAgBnkB,KAAKikB,SAAWjkB,KAAKkkB,cAAgBva,EAAYya,gB,OAGvE,YAAAhc,SAAA,sBAECpI,KAAKglC,uBAAuB,GAE5BhlC,KAAKilC,YAAc,EAAAC,SAAS,KAAM12B,WAAU,WAC3C,EAAKq2B,oBACL,EAAKC,sBAED,EAAKC,eACJ,EAAKF,mBAAqB,IAC7B,EAAKG,uBAAuB,EAAKL,eAAeluB,YAEhD,EAAKouB,kBAAoB,GAEtB,EAAKC,qBAAuB,IAC/B,EAAKK,yBAAyB,EAAKP,iBAAiBnuB,YAEpD,EAAKquB,oBAAsB,IAIxB,EAAKD,mBAAqB,IAC7B,EAAKG,uBAAuB,EAAKL,eAAeluB,YAEhD,EAAKouB,kBAAoB,OAO7B,YAAAr8B,YAAA,WACCxI,KAAKilC,YAAYvR,eAGlB,YAAA0R,gBAAA,SAAgBC,GACf,MAAmB,aAAfA,EAAIprB,OACAja,KAAKiiB,gBAAgB2B,OAAO,0BAEZ,YAAfyhB,EAAIprB,QAAuC,QAAforB,EAAIprB,OACjCja,KAAKiiB,gBAAgB2B,OAAO,yBAEZ,WAAfyhB,EAAIprB,OACLja,KAAKiiB,gBAAgB2B,OAAO,wBAEZ,YAAfyhB,EAAIprB,OACLja,KAAKiiB,gBAAgB2B,OAAO,yBAEZ,aAAfyhB,EAAIprB,OACLja,KAAKiiB,gBAAgB2B,OAAO,0BAEZ,YAAfyhB,EAAIprB,OACLja,KAAKiiB,gBAAgB2B,OAAO,yBAG5B5jB,KAAKiiB,gBAAgB2B,OAAO,0BAIrC,YAAA0hB,iBAAA,SAAiB5D,GAAjB,WAECA,EAAKlf,QAAQ9gB,SAAQ,SAAA2jC,GAEpB,IAAIE,EAAa,CAChB,MAAS,CACR,CAAE,MAAS,cAAe,OAAU,YAEpC,CACC,MAAS,UACT,OAAwB,QAAdF,EAAIG,MAAkB,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,QAG7F,CACC,MAAS,aACT,OAAwB,aAAdH,EAAIG,OAAsC,uBAAdH,EAAIG,MAAiC,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,aAGxI,CACC,MAAS,kBACT,OAAwB,WAAdH,EAAIG,OAAoC,mBAAdH,EAAIG,OAA4C,kBAAdH,EAAIG,MAA4B,EAAKC,aAAaJ,GAAO,OAKlIA,EAAMA,GACFE,WAAaA,MAMnB,YAAAG,mBAAA,SAAmBC,EAAkBC,GACpC,IAAIhE,EAAQ,CAAC,MAAO,WAAY,qBAAsB,SAAU,iBAAkB,iBAE9EiE,EAASjE,EAAM54B,QAAQ28B,GAE3B,OADgB/D,EAAM54B,QAAQ48B,GACdC,EACR,WAGA,IAIT,YAAAJ,aAAA,SAAaJ,GACZ,MAAmB,WAAfA,EAAIprB,QAAsC,YAAforB,EAAIprB,OAC3B,UAEgB,aAAforB,EAAIprB,OACL,QAGD,IAIR,YAAA6rB,sBAAA,WACC9lC,KAAKmlC,yBAAyB,GAE9BnlC,KAAK+kC,eAAgB,GAItB,YAAAtI,OAAA,SAAO78B,GACNI,KAAKy4B,OAAOQ,SAAS,CAAC,iCAAkCr5B,KAGzD,YAAAolC,uBAAA,SAAuBvuB,GAAvB,WAECzW,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQ+M,iBAAiBvW,KAAK2kC,eAAenuB,SAAUC,EAAY,cAAc,GAAOvM,MAAK,SAAA0C,GAEjG,EAAK+3B,eAAiB/3B,EACtB,EAAK04B,iBAAiB,EAAKX,mBAEzBn6B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA06B,yBAAA,SAAyB1uB,GAAzB,WAECzW,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQoN,0BAA0B5W,KAAK4kC,iBAAiBpuB,SAAUC,EAAY,cAAc,GAAOvM,MAAK,SAAA0C,GAE5G,EAAKg4B,iBAAmBh4B,EACxB,EAAK04B,iBAAiB,EAAKV,qBAEzBp6B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAAs7B,qBAAA,SAAqBjvB,EAAmBuuB,GAAxC,WACCrlC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,uCAC9D5jB,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,kCAEjE5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,EAAA4wB,WAAWC,OAE1CnyB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAE3C,EAAKgxB,UAAUpyB,aAAa+yB,EAAIjzB,eAAelI,MAAK,SAAA0C,GACnD,EAAKlD,WAAWmD,OAEhB,IAAK,IAAIzL,EAAI,EAAGA,EAAI,EAAKujC,eAAeniB,QAAQtgB,SAAUd,EAAG,CAG5D,GAFgB,EAAKujC,eAAeniB,QAAQphB,GAE9B4kC,QAAUX,EAAIW,MAAO,CAClC,EAAKrB,eAAeniB,QAAQS,OAAO7hB,EAAG,GACtC,OAIF,EAAK0kC,2BAEHt7B,OAAM,SAACC,GACT,EAAKC,MAAMD,UAMb,YAAAw7B,sBAAA,SAAsBnvB,EAAmBuuB,GAAzC,WACErlC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC9D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGvB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,6CAC9D5jB,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,wCAEjE5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,EAAA4wB,WAAWC,OAE1CnyB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAE1C,EAAKlK,QAAQyN,oBAAoBH,GAAW5M,MAAK,SAAA0C,GAE/C,EAAKlD,WAAWmD,OAEhB,IAAK,IAAIzL,EAAI,EAAGA,EAAI,EAAKujC,eAAeniB,QAAQtgB,SAAUd,EAAG,CAG3D,GAFgB,EAAKujC,eAAeniB,QAAQphB,GAE9B4kC,QAAUX,EAAIW,MAAO,CACjC,EAAKrB,eAAeniB,QAAQS,OAAO7hB,EAAG,GACtC,OAIJ,EAAK0kC,2BAEJt7B,OAAM,SAACC,GACR,EAAKC,MAAMD,UAOlB,YAAAC,MAAA,SAAMD,GACJzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA7QtC/L,GAAsB,4N,iCAAtBA,EAAsB,6qFCpBnC,4BACI,4BACA,6BAEA,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBACA,4BACI,4BACI,4BACI,6BACI,+BACI,6BACI,6BACI,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BAEI,gC,wBAuCJ,iBACJ,iBACA,gCAGJ,iBAEA,6BACC,+BACE,6BACE,0BACE,6BACE,8BACF,iBACA,+BAGA,+BAGC,+BAGA,+BAGD,+BAKA,+BAEF,iBACF,iBACA,6BAEA,gC,wBA0BA,iBACF,iBAEA,gCAGD,iBACJ,iBAEJ,iBACJ,iBACJ,iBACJ,kB,MAvIa,oDAqBuB,2LAyCP,sEAYE,wEAGA,wEAGC,wEAGA,wEAGD,wEAKA,wEAMJ,kMA6BD,0E,skBDpH1B,GAKa,EAAAA,0B,wGEpBb,KACA,MACA,MAFA,IAKA,SAEA,SACA,SAIA,GAHA,OAGA,QAEA,GADA,MACA,Q,0GCTQ,4BAAqE,YAAW,kB,6BAAX,+C,mDA6C3D,6BACE,8BACE,6BACF,iBACA,gCAAsB,gIACpB,6BACF,iBACF,kB,mDAEA,6BACE,8BACE,6BACF,iBACA,gCAAsB,gIACpB,6BACF,iBACF,kB,qBAIM,6B,sBACA,2BACE,6BACF,kB,mDALN,6BACI,gCAAsB,gIACpB,oCACA,gCAGF,iBACJ,iB,iCALgB,8EACJ,2E,mDAMZ,6BACE,gCAAsB,8HAClB,2BACE,6BACF,iBACF,iBACJ,kB,yBAvEN,4BAKI,4BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACE,6BACA,aACF,iBACA,+BACE,8BACA,aACF,iBACJ,iBAEJ,iBACJ,iBACA,8BACI,2BAEI,0BAAI,yBAAG,aACL,8BACA,aACA,8BACF,iBAAI,iBACJ,0BAAI,aAAwC,8BAA6D,iBAE7G,iBACJ,iBACA,8BACE,gCASA,gCASA,gCASA,gCAaF,iBACJ,kB,6BApE4B,mDAIV,0DAIA,8DASC,kEAEL,6DAGE,kFAKL,wGASA,oGASA,sHASA,+D,sBAqBK,4BACI,yBAQC,4BACI,6BACJ,iBACA,4BACK,6BACL,iBACA,4BACG,6BACF,iBACD,uBAGD,iBACJ,kB,sBACA,4BACE,yBAQE,4BACE,6BACF,iBACA,4BACE,6BACF,iBACA,4BACE,6BACF,iBACA,uBAGF,iBACF,kB,mDAiBQ,4BACI,gCAAsB,6HAClB,6BACJ,iBACJ,kB,yBAlBJ,yBAKI,4BACE,wBAAG,YAA8C,iBACnD,iBACA,4BACE,wBAAG,YAAyB,iBAC9B,iBACA,4BACE,wBAAG,YAAc,iBACnB,iBACA,+BAKJ,kB,4CAbS,+EAGA,wDAGA,6CAEoB,+D,kGAfjC,4BACI,+B,uBAoBJ,kB,8BApBQ,gJ,yBA+BH,wBAA+C,YAAyB,kB,uCAAzB,yD,yBAC/C,wBAAwF,YAAa,kB,uCAAb,6C,mDAK3F,4BACC,gCAAsB,6HACjB,6BACL,iBACD,kB,yBAlBD,yBAIC,4BACE,wBAAG,YAAY,iBACjB,iBACA,4BACG,6BACA,6BACF,iBACA,4BACE,wBAAG,YAAwC,iBAC7C,iBACD,+BAKD,kB,4CAdM,2CAGC,oEACA,uGAGA,yEAEmB,+D,yBAf3B,4BACC,+B,uBAoBD,kB,8BApBK,gJ,mDAuBL,6BACI,6CAAqB,uGAAoC,iBAC7D,kB,yBArGZ,6BAEI,4BAEI,+BACI,iCAuBA,iCAwBA,iCAuBA,iCAsBJ,iBACA,6BACI,+BAGJ,iBACJ,iBACJ,kB,8BAnGmB,mEAuBA,uEAwBA,mEAuBA,uEAwBF,6D,yBApGrB,6BACI,+BAyGJ,kB,6BAzGsC,2CD3ElD,iBAkCC,WAAmB8K,EAAkC4D,EAC5CqrB,EAAwB+I,EACxBvf,EAAsCtY,EAAiC+6B,GAF7D,KAAAl7B,UAAkC,KAAA4D,eAC5C,KAAAqrB,SAAwB,KAAA+I,QACxB,KAAAvf,kBAAuE,KAAAyiB,YA9BhF,KAAAv8B,QAAkB,KAElB,KAAA+9B,aAAuB,EACvB,KAAApvB,UAAoB,GAEpB,KAAA4qB,KAAY,CACXC,MAAO,EACPlrB,WAAY,EACZD,SAAU,GACVgM,QAAS,IAGV,KAAA2jB,YAAsB,EAWtB,KAAAC,WAAqB,EACrB,KAAAC,yBAAmC,EAOlCrmC,KAAKikB,QAAUta,EAAYsa,UAC3BjkB,KAAKkkB,aAAelkB,KAAKikB,SAAWta,EAAYua,eAChDlkB,KAAKmkB,cAAgBnkB,KAAKikB,SAAWjkB,KAAKkkB,cAAgBva,EAAYya,gB,OAGvE,YAAAhc,SAAA,sBAECpI,KAAK8W,UAAY9W,KAAKwhC,MAAMS,SAASn8B,OAAY,IAEjD9F,KAAKoiC,aAAa,GAElB,IAAIC,EAAU,SAAWC,OAAOC,SAASC,UAAYF,OAAOC,SAASE,KAAO,IAAMH,OAAOC,SAASE,KAAO,IAAMv8B,IAE/GlG,KAAK0iC,SAAW,EAAAC,UAAUN,EAAU,qBACpCriC,KAAK0iC,SAASl0B,WAAU,SAAArG,GACF,sBAAjBA,EAAQ7G,MACX,EAAK8gC,aAAa,EAAKV,KAAKjrB,gBAK/B,YAAAjO,YAAA,aAGA,YAAA89B,mBAAA,SAAmBC,GAClB,OAAOA,EAAKtQ,QAAQ,KAAM,OAG3B,YAAAuQ,wBAAA,SAAwBnV,GACvB,OAAOvvB,KAAKC,UAAUsvB,IAGvB,YAAAoV,kBAAA,SAAkBhqB,GACjB,IAAK,IAAIrb,EAAI,EAAGA,EAAIpB,KAAK0hC,KAAKlf,QAAQtgB,SAAUd,EAAG,CAC/BpB,KAAK0hC,KAAKlf,QAAQphB,GAEpB6U,KAAOwG,EAAQxG,IAC/BjW,KAAK0hC,KAAKlf,QAAQS,OAAO7hB,EAAG,KAK/B,YAAAslC,uBAAA,SAAuBC,GAEtB,MAAiB,iDAAbA,EACI3mC,KAAKiiB,gBAAgB2B,OAAO,gDAGnB,yDAAb+iB,EACI3mC,KAAKiiB,gBAAgB2B,OAAO,qDAGnB,sDAAb+iB,EACI3mC,KAAKiiB,gBAAgB2B,OAAO,sDAGnB,sDAAb+iB,EACI3mC,KAAKiiB,gBAAgB2B,OAAO,sDAGnB,gDAAb+iB,EACI3mC,KAAKiiB,gBAAgB2B,OAAO,+CAItB,mEAAb+iB,GACgB,kEAAbA,GACa,mEAAbA,GACa,iEAAbA,EAEI3mC,KAAKiiB,gBAAgB2B,OAAO,6CAQtB,oDAAb+iB,GACgB,sDAAbA,GACa,0DAAbA,EAEI3mC,KAAKiiB,gBAAgB2B,OAAO,wDAG7B+iB,GAIR,YAAAjK,OAAA,SAAOjgB,GAAP,WAGCzc,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA3Q,0BAA2B,CACnE4Q,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQ8M,QAAUA,EAClCzc,KAAK0J,WAAWiG,QAAQ01B,IAAMrlC,KAAKqlC,IACnCrlC,KAAK0J,WAAWiG,QAAQi3B,iBAAiBp4B,WAAU,SAAAkF,GAC9B,aAAhBA,EAAKrC,QACR,EAAKo1B,kBAAkB/yB,EAAKA,UAK/B,YAAA0uB,aAAA,SAAa3rB,GAAb,WAECzW,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQqN,gBAAgB7W,KAAK8W,UAAW9W,KAAK0hC,KAAKlrB,SAAUC,GAAY,GAAMvM,MAAK,SAAA0C,GAIvF,GAFA,EAAKy4B,IAAMz4B,EAEY,mBAAnB,EAAKy4B,IAAIG,MACZ,EAAK9D,KAAO,EAAK2D,IAAIwB,kBAEjB,GAAuB,uBAAnB,EAAKxB,IAAIG,MAAgC,CACjD,EAAK9D,KAAO,EAAK2D,IAAIyB,SAErB,IAAK,IAAI1lC,EAAI,EAAGA,EAAI,EAAKsgC,KAAKlf,QAAQtgB,SAAUd,EAAG,CAG7B,yBAFP,EAAKsgC,KAAKlf,QAAQphB,GAEpBE,OACX,EAAK+kC,yBAA0B,QAIhC77B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAAs8B,oBAAA,aAIA,YAAAjB,sBAAA,aAIA,YAAAkB,UAAA,sBACChnC,KAAKkmC,aAAelmC,KAAKkmC,YAEzBlmC,KAAKqlC,IAAIwB,aAAarkB,QAAQ9gB,SAAQ,SAAAulC,GACrCA,EAAIvJ,SAAW,EAAKwI,gBAItB,YAAAgB,oBAAA,SAAoBpwB,GAApB,WACC9W,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA1Q,uBAAwB,CAChE2Q,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGtB1P,KAAK0J,WAAWiG,QAAQ01B,IAAMrlC,KAAKqlC,IAEnCrlC,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAC3C,EAAK+kB,OAAOQ,SAAS,CAAC,iCAIxB,YAAAgN,sBAAA,SAAsBnvB,GAAtB,WACiC,GAA5B9W,KAAK0hC,KAAKlf,QAAQtgB,OACrBlC,KAAKwJ,QAAQyN,oBAAoBH,GAAW5M,MAAK,SAAA0C,GAChD,EAAK6rB,OAAOQ,SAAS,CAAC,gCACpBzuB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIZzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGC,uBAAnB1P,KAAKqlC,IAAIG,OACZxlC,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,iDAC9D5jB,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,8CAGjE5jB,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,6CAC9D5jB,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,yCAGlE5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,EAAA4wB,WAAWC,OAE1CnyB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAE3C,EAAKlK,QAAQyN,oBAAoBH,GAAW5M,MAAK,SAAA0C,GAEhD,EAAK6rB,OAAOQ,SAAS,CAAC,gCAEpBzuB,OAAM,SAACC,GACT,EAAKC,MAAMD,WAOf,YAAAs7B,qBAAA,SAAqBjvB,GAArB,WACC9W,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKiiB,gBAAgB2B,OAAO,uCAC9D5jB,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKiiB,gBAAgB2B,OAAO,kCAEjE5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,EAAA4wB,WAAWC,OAE1CnyB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,SAAAkF,GAE3C,EAAKgxB,UAAUpyB,aAAa,EAAK+yB,IAAIjzB,eAAelI,MAAK,SAAA0C,GAExD,EAAK6rB,OAAOQ,SAAS,CAAC,gCACpBzuB,OAAM,SAACC,GACT,EAAKC,MAAMD,UAMd,YAAAC,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCArQrC9L,GAAY,kQ,iCAAZA,EAAY,i6FCvBzB,4BACI,4BACA,6BAEA,4BACI,8BAEI,4BACI,yBACI,4BACJ,iBACJ,iBACA,gCAgFA,8BA2GR,iBACJ,kB,MAnMa,oDAOI,0CAgFA,sE,qgBD1EjB,GAKa,EAAAA,gB,qHEvBb,KACA,MADA,IAEA,QAOA,GAFA,OAEA,Q,GACA,M,mHCTI,6BAAqE,YAAW,kB,6BAAX,+C,mDAY7D,0BACI,+CAAuB,4IAAiG,iBAC5H,iB,gCAD4F,iDAAmB,c,mDAG7G,yDAAmF,6IAAkG,iB,iCAAjC,kCAAmB,c,mDACvK,uDAA+E,6IAAkG,iB,iCAAjC,kCAAmB,c,mDACnK,uDAA+E,6IAAkG,iB,iCAAjC,kCAAmB,c,yBAHrK,0BACE,2DACA,yDACA,yDACF,kB,6BAHmC,8EACF,4EACA,6EDP7C,iBAmBI,WAAqB6K,EAAkCC,EAA6B5I,EAAsC6I,GAArG,KAAAF,UAAkC,KAAAC,WAA6B,KAAA5I,WAAsC,KAAA6I,aAb1H,KAAAvB,QAAkB,KASlB,KAAAyB,UAAoB,EACpB,KAAAC,MAAgB,EAId7J,KAAK4mC,iBAAmB,IAAI,EAAA1hC,Q,OAG9B,YAAAkD,SAAA,aAIA,YAAA++B,0BAAA,SAA0B1qB,GACxBzc,KAAK4mC,iBAAiBnhC,KAAK,CAAC4L,OAAO,WAAYqC,KAAM+I,KAGvD,YAAA3P,SAAA,WACI9M,KAAK0J,WAAWmD,QAGpB,YAAAnC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA/B/C7L,GAAyB,uJ,iCAAzBA,EAAyB,shBCjBtC,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BAEI,+BAEI,8BAGA,8BAMA,6BAEI,6BACI,6BACI,iCAAsB,wCAAS,EAAAkO,cAC3B,8BACJ,iBACJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,MAnCS,oDAYQ,qFAGA,2F,iRDJjB,GAKa,EAAAlO,6B,wHEjBb,WAQA,GAPA,MACA,MAIA,OAEA,QAIA,GADA,OACA,Q,GACA,M,uECZI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAb4B,mDAGR,uEAGA,wEDdxB,iBAeI,WAAqB4K,EAAkCC,EAC3C5I,EAAsC6I,EAAgC0D,GAD7D,KAAA5D,UAAkC,KAAAC,WAC3C,KAAA5I,WAAsC,KAAA6I,aAAgC,KAAA0D,eAVlF,KAAAjF,QAAkB,KAGD,KAAAs+B,kBAAoB,IAAI,EAAAv+B,aAEzC,KAAA0B,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAzB,SAAA,aAIA,YAAAg/B,gBAAA,sBACQxD,EAAY5jC,KAAKoN,aAAamC,KAAM,EAAA/R,yBAA0B,CAC9DiS,UAAU,EACVC,qBAAqB,IAGzBk0B,EAAUj0B,QAAQwV,yBAAyBnlB,KAAKyc,QAASzc,KAAKqlC,IAAIvuB,UAAW9W,KAAKqlC,IAAIjzB,cAAcrR,WAAW,GAC/G6iC,EAAUj0B,QAAQ4U,gBAAiB,MACnCqf,EAAUj0B,QAAQ8U,sBAAqB,WAErC,EAAKgiB,kBAAkB/3B,KAAK,EAAK+N,SACjC,EAAK/S,WAAWmD,WAKtB,YAAA65B,uBAAA,SAAuBC,GAEnB,MAAgB,iDAAbA,EACQ3mC,KAAKa,SAAS+iB,OAAQ,gDAGjB,yDAAb+iB,EACQ3mC,KAAKa,SAAS+iB,OAAQ,qDAGjB,sDAAb+iB,EACM3mC,KAAKa,SAAS+iB,OAAQ,sDAGf,sDAAb+iB,EACM3mC,KAAKa,SAAS+iB,OAAQ,sDAGf,gDAAb+iB,EACM3mC,KAAKa,SAAS+iB,OAAQ,+CAId,mEAAb+iB,GACgB,kEAAbA,GACa,mEAAbA,GACa,iEAAbA,EAEE3mC,KAAKa,SAAS+iB,OAAQ,6CAOhB,oDAAb+iB,GACgB,sDAAbA,GACa,0DAAbA,EAEI3mC,KAAKa,SAAS+iB,OAAQ,wDAGxB+iB,GAGX,YAAAj6B,SAAA,aAIA,YAAAI,SAAA,WACE9M,KAAK0J,WAAWmD,QAGlB,YAAAnC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAxF/CxL,GAA4B,6L,iCAA5BA,EAA4B,w5CCpBzC,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,4BACI,4BACI,4BACI,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,aAAkD,iBAEjF,0BAAI,8BAAQ,8BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6B,iBAIhE,iBACJ,iBACA,8BACI,8BACI,iCAA0C,wCAAS,EAAAmoC,qBAC/C,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MApES,oDAWA,qDAqC8C,wFAGA,kE,4DDrCvD,GAKa,EAAAnoC,gC,iIEpBb,WAKA,GAJA,MACA,MAGA,OAQA,GALA,OAEA,OAGA,Q,GACA,M,wFCbI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAb4B,mDAGR,uEAGA,wE,yBAwCF,yBACJ,yBAAI,YAA4B,iBAClC,kB,uBADM,iE,yBAFD,6BACC,8BAGP,kB,6BAHW,0DDrD1B,iBAsBI,WAAqBuK,EAAkCC,EAC3C5I,EAAsC6I,EAAgC0D,GAD7D,KAAA5D,UAAkC,KAAAC,WAC3C,KAAA5I,WAAsC,KAAA6I,aAAgC,KAAA0D,eAjBlF,KAAAjF,QAAkB,KAGD,KAAAs+B,kBAAoB,IAAI,EAAAv+B,aASzC,KAAA0B,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAzB,SAAA,WAMIpI,KAAKyc,QAAQ3J,OAAS,KACtB9S,KAAKqnC,YAAc,IAIvB,YAAAC,UAAA,SAAUC,GACR,OAAOzlC,KAAKC,UAAUwlC,IAGxB,YAAAC,iCAAA,SAAiCD,GAC/B,OAAOA,EAASjmC,MAGlB,YAAAukB,uBAAA,SAAwBxb,EAAkBk9B,GAA1C,WAGQlhC,EAAgBrG,KAAKqlC,IAAIjzB,cAAcW,UAE3C,OAAO,EAAAuP,WAAW/gB,QAAO,SAAEghB,GACvB,EAAK/Y,QAAQoJ,wBAAyB,EAAKy0B,YAAah9B,EAJ3C,KAIiEhE,EAAe,EAAKg/B,IAAItkC,WAAYmJ,MAAM,SAAAsY,GACpHD,EAAS9c,KAAM+c,UAK3B,YAAAc,kBAAA,SAAmBjU,EAAmBk4B,GAAtC,WAEIvnC,KAAKwJ,QAAQoL,oBAAqBvF,EAAEkU,KAAK6d,IAAKmG,EAASl9B,SAAU,IAAI,EAAOrK,KAAKqlC,IAAItkC,WAAYmJ,MAAM,SAAAm3B,GAEnGkG,EAASz0B,OAASuuB,EAAU5oB,UAC5B,EAAK4uB,YAAchG,EAAU5oB,UAAUsN,WAAWnb,aAAaiY,kBAE/DrY,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAg9B,SAAA,sBACMC,EAAM,CACRpiB,WAAY,SACZqiB,oBAAqB3nC,KAAKyc,QAAQxG,IAGpCjW,KAAKwJ,QAAQ0N,wBAAyBwwB,GAAMx9B,MAAM,SAAA0C,GAEhD,EAAK65B,kBAAkB/3B,KAAK,EAAK+N,SAEjC,EAAK/S,WAAWmD,UAEdrC,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAm9B,gBAAA,sBACMF,EAAM,CACRC,oBAAqB3nC,KAAKyc,QAAQxG,GAClCqP,WAAY,UACZ1lB,KAAMI,KAAKyc,QAAQ3J,OAAOiT,WAAWnmB,KACrCyK,SAAUrK,KAAKyc,QAAQ3J,OAAOiT,WAAWzkB,KACzCzB,MAAOG,KAAKyc,QAAQ5c,OAGtBG,KAAKwJ,QAAQ0N,wBAAyBwwB,GAAMx9B,MAAM,SAAA0C,GAEhD,EAAK65B,kBAAkB/3B,KAAK,EAAK+N,SAEjC,EAAK/S,WAAWmD,UAEdrC,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAqC,SAAA,WACE9M,KAAK0J,WAAWmD,QAGlB,YAAAnC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA1G/C3L,GAAqC,6L,iCAArCA,EAAqC,+pECrBlD,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,4BACI,4BACI,yBAAI,6BAAQ,4BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6C,iBAE5E,0BAAI,8BAAQ,6BAAsD,iBAAS,iBAC3E,2BACE,8BACF,iBAEA,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBACE,8BACF,iBACJ,iBACA,8BACC,8BACE,8BACC,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACD,iBACA,8BACE,gCAKF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAAoD,iBACzE,iBACF,iBACA,8BACE,+BAA4C,aAAiB,iBAC/D,iBACF,iBACA,8BACG,8BACE,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACF,iBACA,8BACE,gCAEC,oEAAyB,wCAGJ,EAAAwkB,kBAAA,gBALtB,iBAUF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACF,iBACA,8BACE,iCAA0D,wCAAS,EAAAskB,qBACjE,8BACF,iBACA,iCAAsB,wCAAS,EAAAH,cAC7B,8BACF,iBACF,iBACF,iBACF,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MA3HS,oDAWA,qDAoC0C,kFAoBzB,gEAcuC,oDAY1C,qDAAyB,oBAAzB,CAAyB,mEAAzB,CAAyB,0BAAzB,CAAyB,uBAAzB,CAAyB,uBAiBJ,iE,8ID/F5C,GAKa,EAAA3oC,yC,+HErBb,WAKA,GAHA,MACA,MAEA,OASA,GANA,OACA,OAIA,MACA,Q,yFCbI,4BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,4BACI,4BAEI,qBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,wBACJ,kB,6BAb4B,mDAGR,uEAGA,wE,mDAgBZ,6BACI,6BACI,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,YAA6C,iBAE5E,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,4BACE,8BACF,iBAEA,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBAAG,8BAA+D,iBACtE,iBACA,8BACC,8BACG,8BACE,6BACE,+BAAmB,8BAAoE,iBACzF,iBACF,iBACA,8BACE,+BAA4C,aAA0B,iBACxE,iBACF,iBACD,8BACE,8BACE,6BACE,+BAAmB,8BAA2D,iBAChF,iBACF,iBACA,8BACE,+BAA4C,aAAiB,iBAC/D,iBACF,iBACA,8BACG,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,gCAEC,uGAAyB,uHAF1B,iBAUF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,iCAAkD,kGAChD,8BACF,iBACA,iCAAsB,2FACpB,8BACF,iBACF,iBACF,iBACF,iBACJ,iB,gCAlEuC,kFAkBe,8DAUD,oDAY1C,qDAAyB,oBAAzB,CAAyB,gDAAzB,CAAyB,0BAAzB,CAAyB,uBAAzB,CAAyB,uBAiBJ,wDDzF5C,iBAkBI,WAAqB0K,EAAkCC,EAC3C5I,EAAsC6I,EAAgC0D,GAD7D,KAAA5D,UAAkC,KAAAC,WAC3C,KAAA5I,WAAsC,KAAA6I,aAAgC,KAAA0D,eAblF,KAAAjF,QAAkB,KAGD,KAAAs+B,kBAAoB,IAAI,EAAAv+B,aAEzC,KAAAwxB,OAAiB,KAGjB,KAAA9vB,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAzB,SAAA,WAEIpI,KAAKyc,QAAQ3J,OAAS,KACtB9S,KAAKqnC,YAAc,IAIvB,YAAAG,iCAAA,SAAiCD,GAC/B,OAAOA,EAASjmC,MAGlB,YAAAukB,uBAAA,SAAwB0hB,GAAxB,WACI,OAAO,EAAAjlB,WAAW/gB,QAAO,SAAEghB,GACvB,EAAK9Y,SAAS4J,mBAAoBk0B,EAASj0B,cAAe,EAAK+zB,YAAa,MAAOn9B,MAAM,SAAAsY,GACrFD,EAAS9c,KAAM+c,UAK3B,YAAAc,kBAAA,SAAmBjU,GACfrP,KAAK05B,OAASrqB,EAAEkU,KAAKtiB,OAGzB,YAAAwmC,SAAA,sBACMC,EAAM,CACRpiB,WAAY,SACZqiB,oBAAqB3nC,KAAKyc,QAAQxG,IAGpCjW,KAAKwJ,QAAQ0N,wBAAyBwwB,GAAMx9B,MAAM,SAAA0C,GAEhD,EAAK65B,kBAAkB/3B,KAAK,EAAK+N,SAEjC,EAAK/S,WAAWmD,UAEdrC,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAm9B,gBAAA,sBACMF,EAAM,CACRC,oBAAqB3nC,KAAKyc,QAAQxG,GAClCqP,WAAY,UACZ7R,aAAczT,KAAK05B,OACnB75B,MAAOG,KAAKyc,QAAQ5c,OAGtBG,KAAKwJ,QAAQ0N,wBAAyBwwB,GAAMx9B,MAAM,SAAA0C,GAEhD,EAAK65B,kBAAkB/3B,KAAK,EAAK+N,SAEjC,EAAK/S,WAAWmD,UAEdrC,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAqC,SAAA,WACE9M,KAAK0J,WAAWmD,QAGlB,YAAAnC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAjF/C1L,GAAmC,6L,iCAAnCA,EAAmC,kpECrBhD,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,gCAsEJ,iBACJ,iBAEJ,kB,MArHS,oDAWA,qDAiCQ,gD,oID7BjB,GAKa,EAAAA,uC,+HErBb,WAKA,GAHA,MACA,MAEA,OAQA,GALA,OACA,OAIA,Q,GACA,M,uECbI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAb4B,mDAGR,uEAGA,wEDbxB,iBAsBI,WAAqByK,EAAkCC,EAC3C5I,EAAsC6I,EAAgC0D,GAD7D,KAAA5D,UAAkC,KAAAC,WAC3C,KAAA5I,WAAsC,KAAA6I,aAAgC,KAAA0D,eAjBlF,KAAAjF,QAAkB,KAGD,KAAAs+B,kBAAoB,IAAI,EAAAv+B,aASzC,KAAA0B,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAzB,SAAA,WAMIpI,KAAKyc,QAAQ3J,OAAS,KACtB9S,KAAKqnC,YAAc,IAIvB,YAAAC,UAAA,SAAUC,GACR,OAAOzlC,KAAKC,UAAUwlC,IAGxB,YAAAC,iCAAA,SAAiCD,GAC/B,OAAOA,EAASjmC,MAGlB,YAAAukB,uBAAA,SAAwBxb,EAAkBk9B,GAA1C,WAGQlhC,EAAgBrG,KAAKqlC,IAAIjzB,cAAcW,UAE3C,OAAO,EAAAuP,WAAW/gB,QAAO,SAAEghB,GACvB,EAAK/Y,QAAQoJ,wBAAyB,EAAKy0B,YAAah9B,EAJ3C,KAIiEhE,EAAe,EAAKg/B,IAAItkC,WAAYmJ,MAAM,SAAAsY,GACpHD,EAAS9c,KAAM+c,UAK3B,YAAAc,kBAAA,SAAmBjU,EAAmBk4B,GAAtC,WAEIvnC,KAAKwJ,QAAQoL,oBAAqBvF,EAAEkU,KAAK6d,IAAKmG,EAASl9B,SAAU,IAAI,EAAOrK,KAAKqlC,IAAItkC,WAAYmJ,MAAM,SAAAm3B,GAEnGkG,EAASz0B,OAASuuB,EAAU5oB,UAC5B,EAAK4uB,YAAchG,EAAU5oB,UAAUsN,WAAWnb,aAAaiY,kBAE/DrY,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAg9B,SAAA,sBACMC,EAAM,CACRpiB,WAAY,SACZqiB,oBAAqB3nC,KAAKyc,QAAQxG,IAGpCjW,KAAKwJ,QAAQ0N,wBAAyBwwB,GAAMx9B,MAAM,SAAA0C,GAEhD,EAAK65B,kBAAkB/3B,KAAK,EAAK+N,SAEjC,EAAK/S,WAAWmD,UAEdrC,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAA67B,mBAAA,SAAmBC,GAEjB,OAAOA,EAAKtQ,QAAQ,KAAM,OAG5B,YAAA2R,gBAAA,sBACMF,EAAM,CACRC,oBAAqB3nC,KAAKyc,QAAQxG,GAClCqP,WAAY,UACZ1lB,KAAMI,KAAKyc,QAAQ3J,OAAOiT,WAAWnmB,KACrCyK,SAAUrK,KAAKyc,QAAQ3J,OAAOiT,WAAWzkB,KACzCzB,MAAOG,KAAKyc,QAAQ5c,OAGtBG,KAAKwJ,QAAQ0N,wBAAyBwwB,GAAMx9B,MAAM,SAAA0C,GAEhD,EAAK65B,kBAAkB/3B,KAAK,EAAK+N,SAEjC,EAAK/S,WAAWmD,UAEdrC,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAqC,SAAA,WACE9M,KAAK0J,WAAWmD,QAGlB,YAAAnC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA/G/CzL,GAAmC,6L,iCAAnCA,EAAmC,g/CCrBhD,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,4BACI,4BACI,yBAAI,6BAAQ,4BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6C,iBAE5E,0BAAI,8BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,8BAA6D,iBAE5F,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBAAG,8BAA+D,iBACtE,iBACA,8BACC,8BACE,8BACC,6BACE,+BAAmB,8BAA+E,iBACpG,iBACD,iBACA,8BACG,+BAA4C,aAA4C,iBAC1F,iBACH,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,+BAA4C,aAA6B,iBAC3E,iBACF,iBACD,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAjFS,oDAWA,qDAoC0C,kFAgBe,kFAUD,kE,4DD1DjE,GAKa,EAAAA,uC,kHErBb,KACA,MADA,IAEA,QACA,SAEA,SAEA,GADA,MACA,Q,GAEA,O,4FCHE,2BAA2B,YAAgB,kB,6BAAhB,oD,qBAOrB,6B,qBACA,6B,wBAGA,6B,8BACgB,qC,wBAChB,6B,8BACgB,qC,mDAVtB,+BACE,4BACE,8BACE,mCACA,mCACF,iBACA,6BACE,iCAEA,iCAEF,iBACF,iBAEA,6BACE,8BACE,iCAAsB,6EAAS0K,WAAA,UAE7B,4BAAM,aAAc,iBACtB,iBACA,iCAAsB,0FAGpB,4BAAM,aAAc,iBACtB,iBACF,iBACF,iBACF,iB,gCAxBgB,iFACA,6EAGH,iFAEA,6EASC,iDAGN,kGAEM,kDDpBhB,iBAmCE,WAAoBA,EAAgCuY,EAA8Ctc,GAA9E,KAAA+D,aAAgC,KAAAuY,kBAA8C,KAAAtc,eA7BzF,KAAAkiC,MAAgB7nC,KAAKiiB,gBAAgB2B,OAAO,uBAE5C,KAAAzb,QAAkBnI,KAAKiiB,gBAAgB2B,OAAO,yBAI9C,KAAA2N,WAAqBvxB,KAAKiiB,gBAAgB2B,OAAO,wBAEjD,KAAAoV,WAAqBh5B,KAAKiiB,gBAAgB2B,OAAO,uBAEjD,KAAAtiB,KAAmB,EAAA4wB,WAAW4V,Q,OAqBvC,YAAA1/B,SAAA,sBACEpI,KAAKwxB,UAAY,IAAI,EAAAtsB,QAErB,IAAIgiB,EAA+B,CACjC4T,WAAY,EACZC,mBAAmB,EACnBC,IAAK90B,IAAM,iBAGblG,KAAKi7B,SAAW,IAAI,EAAAC,aAAchU,GAClClnB,KAAKi7B,SAASE,gBAAkB,SAAEC,EAAeC,GAC7CA,EAAK1gB,OAAQ,OAAQ7Y,KAAKC,UAAU,EAAKsjC,IAAIjzB,iBAEjDpS,KAAKi7B,SAASM,mBAAqB,SAAEH,GACjC,EAAKz1B,aAAae,SAEtB1G,KAAKi7B,SAASO,eAAiB,SAAEjY,EAAW3W,EAAeqN,EAAazT,GACpE,EAAKi1B,QAAQte,cAAclc,MAAQ,GACnC,EAAK0E,aAAamB,YAEtB9G,KAAKi7B,SAASS,cAAgB,SAAEnY,EAAW3W,EAAkBqN,EAAgBzT,GAC3E,EAAKgrB,UAAU/rB,KAAM,EAAKiO,MAC1B,EAAKhK,WAAWmD,QAElB7M,KAAKi7B,SAASY,YAAc,SAAEtY,EAAW3W,EAAkBqN,EAAgBzT,GACzE,EAAKkE,MAAO5I,KAAKD,MAAO+K,MAI5B,YAAAxD,SAAA,SAASsK,GAEP,OAAO5R,KAAKC,UAAU2R,IAGxB,YAAAspB,QAAA,WAC8B,MAAvBh9B,KAAKi7B,SAASc,OAAiB/7B,KAAKi7B,SAASc,MAAM75B,OAAS,EAC/DlC,KAAKi7B,SAASe,YAGdh8B,KAAK0K,MAAO,CAAEvC,QAASnI,KAAKiiB,gBAAgB2B,OAAQ,mBAAqBlZ,MAAO,MAI7E,YAAAA,MAAP,SAAcD,GACZzK,KAAK+nC,aAAe,EAAAh7B,aAAaC,oBAAoBvC,I,iCA5E5C5L,GAAsB,mH,iCAAtBA,EAAsB,uD,OAAA,K,+yCClBnC,4BAEE,4BACE,yBAAI,YAAS,iBACf,iBAEA,+BAEA,2BAAM,YAAW,iBAEjB,gCA4BF,kB,MAnCQ,4CAGA,mDAEA,8CAEA,4C,8JDGR,GAKa,EAAAA,0B,+GElBb,SACA,O,GAEA,OACA,O,2GCWS,6BACE,6BACE,yBAAI,YAAqB,iBAC3B,iBAEA,6BACE,4BACC,4BACC,4BAAO,6BAA6C,iBACpD,2BAA+B,aAAY,iBAC3C,gCAAkC,8BAAiD,iBAAQ,4BAAM,aAAmB,iBACrH,iBACA,8BACE,gCACE,2BACA,4BAAM,8BAAsC,iBAC9C,iBAEA,gCACE,gCAAwE,qHAAxE,iBACA,4BAAM,8BAA0C,iBAClD,iBACF,iBACD,iBACF,iBACF,iB,+CAvBQ,qDAO6B,0CACkE,iDAIlB,kDAAAoX,GAAA,eAA4B,uDAKY,kDAAAA,GAAA,cAA2B,uD,mDAOxJ,6BACG,6CAA0C,sHAAmD,iBAC/F,kB,uHA/BR,4BACI,4BACE,6BACC,gC,uBA0BA,+BAGD,iBACF,iBACJ,kB,6BA/BY,2LA0BA,wE,mDAqBJ,6BACE,6BACE,yBAAI,YAAqB,iBAC3B,iBAEA,6BACE,4BACC,4BACC,4BAAO,6BAA6C,iBACpD,2BAA+B,aAAY,iBAC3C,gCAAkC,8BAAiD,iBAAQ,+BAAiC,aAAmB,iBAC/I,gCAAkC,8BAAmD,iBAAQ,4BAAM,aAAsB,iBAC1H,iBACA,8BAEC,gCACE,gCAAoE,6HAApE,iBACA,4BAAM,8BAAsC,iBAC9C,iBACA,gCACE,2BACA,4BAAM,8BAA0C,iBAClD,iBACD,iBACD,iBACF,iBACF,iB,+CAxBQ,qDAO6B,0CAC6F,iDACzB,oDAKU,kDAAAA,GAAA,eAA4B,uDAI1C,kDAAAA,GAAA,cAA2B,uD,mDAOhI,6BACE,6CAAyC,qHAAkD,iBAC7F,kB,sHA9BF,6BACE,gC,uBA2BA,+BAGF,kB,6BA9BO,uLA2BA,uE,sBAIP,6BACE,2BAAyC,6BAA4D,iBACvG,kBDzFR,iBAgCC,WAAoB+xB,GAAA,KAAAA,cArBpB,KAAAC,gBAAkC,CACjCtG,MAAO,EACPlrB,WAAY,EACZD,SAAU,GACVgM,QAAS,IAGV,KAAA0lB,eAAiC,CAChCvG,MAAO,EACPlrB,WAAY,EACZD,SAAU,GACVgM,QAAS,IAGV,KAAAuiB,eAAyB,EAEzB,KAAAF,kBAA4B,EAC5B,KAAAC,oBAA8B,E,OAS9B,YAAA18B,SAAA,WACCpI,KAAKmoC,4BAA4B,IAuClC,YAAAC,MAAA,SAAMC,GACL,OAAW,MAAPA,EACIA,EAAIlX,cAGJ,IAIT,YAAAgX,4BAAA,SAA4B1xB,GAA5B,WACCzW,KAAKgoC,YAAYruB,WAAWlD,EAAYzW,KAAKioC,gBAAgBzxB,SAAU,cAActM,MAAK,SAAAw3B,GACzF,EAAKuG,gBAAkBvG,MAIzB,YAAA4G,2BAAA,SAA2B7xB,GAA3B,WAECzW,KAAKgoC,YAAYruB,WAAWlD,EAAYzW,KAAKkoC,eAAe1xB,SAAU,YAAYtM,MAAK,SAAAw3B,GACtF,EAAKwG,eAAiBxG,MAIxB,YAAA6G,eAAA,SAAeC,GAAf,WAGCxoC,KAAKgoC,YAAYluB,aAAa0uB,EAAKvyB,IAAI/L,MAAK,WAE3C,IAAMukB,EAAQ,EAAKwZ,gBAAgBzlB,QAAQqN,WAAU,SAAA2G,GAAK,OAAAA,EAAEvgB,KAAOuyB,EAAKvyB,OAEzD,IAAXwY,GACH,EAAKwZ,gBAAgBzlB,QAAQS,OAAOwL,EAAO,GAG5C,EAAKyZ,eAAe1lB,QAAQriB,KAAKqoC,OAKnC,YAAAC,uBAAA,SAAuBD,GAAvB,WACCxoC,KAAK+kC,eAAgB,EAErB/kC,KAAKgoC,YAAYhuB,cAAcwuB,EAAKvyB,GAAI,cAAc/L,MAAK,WAE1D,IAAMukB,EAAQ,EAAKyZ,eAAe1lB,QAAQqN,WAAU,SAAA2G,GAAK,OAAAA,EAAEvgB,KAAOuyB,EAAKvyB,OAExD,IAAXwY,GACH,EAAKyZ,eAAe1lB,QAAQS,OAAOwL,EAAO,GAG3C,EAAKyZ,eAAe1lB,QAAQS,OAAOwL,EAAO,GAC1C,EAAKwZ,gBAAgBzlB,QAAQriB,KAAKqoC,OAIpC,YAAAE,wBAAA,WACC1oC,KAAK+kC,eAAgB,EAErB/kC,KAAKsoC,2BAA2B,I,iCA/HrBppC,GAAmB,qC,iCAAnBA,EAAmB,kGAHpB,CAAC,EAAAhF,YAAS,mhDCVtB,4BACE,4BAEA,4BAEE,yBAEA,yBACE,4BACF,iBACA,oBAEF,8BAqCA,4BACA,2BACI,6BACF,iBACA,gCAAgE,wCAAS,EAAAwuC,6BACvE,6BACF,iBACA,iBACA,qBAEA,6BACE,6BACE,gCAgCA,gCAGF,iBACF,iBAGH,iBACD,kB,MAzFmB,uEAiDkB,uFAgCA,2F,oqCDvFrC,GAOa,EAAAxpC,uB,iIEbb,KAEA,MACA,MAIA,MAPA,IAQA,SACA,SAIA,GADA,OACA,Q,oICQY,4BACE,4BACE,2BAA8F,YAAgC,iBAChI,iBACA,4BACE,gCAAsB,4GACpB,6BACF,iBACA,gCAAsB,4GACpB,6BACF,iBACA,gCAAsB,8GACpB,8BACF,iBACF,iBACF,iB,0BAbO,oFAA2F,qE,yEDR9G,aAoBC,WAAmBsK,EAA+C3I,EAAuC43B,EAAwBrrB,GAA9G,KAAA5D,UAA+C,KAAA3I,WAAuC,KAAA43B,SAAwB,KAAArrB,eAdjI,KAAAjF,QAAkB,KAElB,KAAAu5B,KAA0C,CACzC/G,UAAW,GACXgH,MAAO,EACPlrB,WAAY,EACZD,SAAU,I,OAUX,YAAApO,SAAA,WACCpI,KAAKoiC,aAAa,IAGnB,YAAAA,aAAA,SAAa3rB,GAAb,WACCzW,KAAKwJ,QAAQ0P,QAAQzC,EAAYzW,KAAK0hC,KAAKlrB,UAAUtM,MAAK,SAAAw3B,GACzD,EAAKA,KAAOA,KACVl3B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAlJ,OAAA,sBACCvB,KAAKwJ,QAAQK,KAAK,MAAMK,MAAK,SAAA0C,GAE5B,IAAIlD,EAAa,EAAK0D,aAAamC,KAAK,EAAAnQ,oCAAqC,CAC5EoQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBhG,EAAWiG,QAAQ1D,KAAK,KAAMW,EAASomB,MACvCtpB,EAAWiG,QAAQg5B,UAAUn6B,WAAU,WACtC,EAAK4zB,aAAa,EAAKV,KAAKjrB,mBAK/B,YAAAimB,OAAA,SAAOvlB,GAAP,WAECnX,KAAKwJ,QAAQK,KAAKsN,EAAOxM,KAAKT,MAAK,SAAA0C,GAElC,IAAIlD,EAAa,EAAK0D,aAAamC,KAAK,EAAAnQ,oCAAqC,CAC5EoQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBhG,EAAWiG,QAAQ1D,KAAKW,EAASuK,OAAQvK,EAASomB,MAClDtpB,EAAWiG,QAAQg5B,UAAUn6B,WAAU,WACtC,EAAK4zB,aAAa,EAAKV,KAAKjrB,mBAK/B,YAAAsqB,SAAA,SAAS5pB,GAAT,WAECnX,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB1P,KAAK0J,WAAWiG,QAAQxH,QAAUnI,KAAKa,SAAS+iB,OAAO,+BAAiC,KAAOzM,EAAOtX,MAAMgjB,eAAiB,IAC7H7iB,KAAK0J,WAAWiG,QAAQ4hB,WAAavxB,KAAKa,SAAS+iB,OAAO,uBAC1D5jB,KAAK0J,WAAWiG,QAAQrO,KAAO,EAAA4wB,WAAWC,OAE1CnyB,KAAK0J,WAAWiG,QAAQ6hB,UAAUhjB,WAAU,WAC3C,EAAKhF,QAAQ+P,OAAOpC,EAAOxM,KAAKT,MAAK,WACpC,EAAKk4B,aAAa,EAAKV,KAAKjrB,eAC1BjM,OAAM,SAACC,GACT,EAAKC,MAAMD,UAKd,YAAAgyB,OAAA,SAAOtlB,GACNnX,KAAKy4B,OAAOQ,SAAS,CAAC,oCAAqC9hB,EAAOxM,OAGnE,YAAAD,MAAA,SAAMD,GACJzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCArFtCtL,GAAqC,qK,iCAArCA,EAAqC,+7BCpBlD,4BACE,4BACA,6BAEA,4BAEE,4BACE,yBACE,4BACF,iBACF,iBAEA,4BACE,4BACE,8BACE,6BACE,0BACE,4BAAwB,6BAAwD,iBAClF,iBACF,iBACA,6BACE,+B,wBAgBF,iBACF,iBACA,8CAAqB,8CAAc,EAAAijC,aAAA,MAAsB,iBAEzD,8BACE,8BACE,iCAAsB,wCAAS,EAAA7gC,YAC7B,8BACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MA9BgB,qJ,uMDNhB,GAKa,EAAApC,yC,+HEpBb,KACA,MADA,IAEA,QAIA,GADA,MACA,Q,GAGA,O,mGCRE,6BAAqE,YAAW,kB,6BAAX,+C,mDAWjE,4BACE,4BACE,4BAAQ,6BAAyD,YACjE,iBACF,iBACA,6BACE,+BAAO,2FAAP,iBACF,iBACF,iB,0BANqE,wDAI1D,+CAA+B,yBAA/B,CAA+B,wC,yBAWlC,gCAA6D,YAAa,kB,uBAAhC,6BAAmB,6C,yBAa7D,gCAA4E,YAAmB,kB,uBAA5C,6BAAyB,6C,mDARpF,4BACE,4BACE,4BAAO,6BAA4D,iBACrE,iBACA,6BACE,8BACE,gCAAoB,4GAClB,wBACA,kCACF,iBACF,iBACF,iBACF,iB,gCAN0B,0DAA8B,+BAExC,2D,yBAcR,gCAAiE,YAAgB,kB,uBAArC,4BAAqB,6C,mDARzE,4BACE,4BACE,4BAAO,6BAAyD,iBAClE,iBACA,6BACE,8BACE,gCAAoB,yGAA2B,6FAC7C,wBACA,kCACF,iBACF,iBACF,iBACF,iB,gCAN0B,uDAA2B,+BAErC,uD,yBAmCJ,4BACE,+BAA2C,6BAA6C,YAAyB,iBACnH,kB,uCAD0F,0D,yBAKtF,gCAAuD,YAA6B,kB,uBAAjD,6BAAoB,4D,mDAH3D,4BACE,gCAAoB,yHAA0C,oKAC5D,wBACA,kCACF,iBACF,iB,+DAJsB,6DAA0C,mCAEpD,gD,mDAGZ,4BACE,gCAAoB,gHAClB,wBACA,gCAA0B,6BAAwD,iBAClF,gCAA8B,6BAAgE,iBAC9F,gCAAoB,6BAAsD,iBAC5E,iBACF,iB,0CANsB,oDAAiC,2B,yBAUnD,gCAA+D,YAAc,kB,uBAAjC,2BAAmB,4C,mDAHnE,4BACE,gCAAoB,0HAClB,wBACA,kCACF,iBACF,iB,+DAJsB,8DAA2C,2BAErD,wD,mDAWR,2BAAyD,2I,uBACvD,yBACA,+BAAgD,6BAAyD,iBAC3G,iB,KAHiG,kF,mDARrG,4BACP,0BACE,2BAA0B,2J,uBACxB,yBACA,+BAAgD,6BAA6C,iBAC/F,iBACF,iBACA,0BACW,6BAIF,iBACX,iB,0CAX0E,iFAM1D,qD,sBA2BW,4BAAoC,6BAAsD,kB,qBAIxF,6B,mDAYH,gCAAuD,iKAAyB,GAAGypC,MAAMtoC,WAAW,EAAnB,yBAA1B,CAAuE,qKAA0C,GAAGsoC,MAAMtoC,WAAW,EAAnB,UACtK,gCAA0B,6BAAyD,iBACnF,gCAAyB,6BAA4D,iBACvF,iB,2FAHsD,iFAAuE,kCACnH,0CACA,2C,yBAHb,4BACE,kCAIF,kB,uCAJ4B,qD,sBAK5B,4BACE,+BAA2B,6BAAwC,iBACrE,kB,yBAII,gCACE,YACF,kB,uBAFQ,gCACN,qD,2FAHJ,gCAAyG,gKAAyB,GAAGsoC,MAAMtoC,WAAW,EAAnB,qBAA1B,CAAmE,uLAAiF,GAAGsoC,MAAMtoC,WAAW,EAAnB,oBAA2C,GAAGsoC,MAAMtoC,WAAW,EAAnB,uBACxS,gCAAyB,6BAA0C,iBACnE,kCAGF,iB,0FALyG,6EAAmE,yCAClK,4CAC4B,qD,sBAItC,+BAA6H,6BAAwC,kB,qBAmBjK,6B,qBACA,6B,yBAaA,gCACE,YACF,kB,uBAF2G,6BACzG,qD,mDAHJ,gCAA2E,+LAAyB,GAAGsoC,MAAMtoC,WAAW,EAAnB,yBACnG,gCAAyB,6BAA0C,iBACnE,kCAGF,iB,yHAL2E,gFAAyE,yCAC1I,4CACA,iH,yBAMhB,gCAA+D,YAAc,kB,uBAAjC,2BAAmB,4C,mDAFzD,gCAAsF,+LAAyB,GAAGsoC,MAAMtoC,WAAW,EAAnB,yBACtH,gCAAyB,6BAA0C,iBACnE,kCACF,iB,yHAH8F,gFAAyE,yCAC7J,4CACA,wD,yBAjCX,+BACG,4BACE,yBACE,uBAEA,4BACE,4BAAO,6BAAkD,iBAC3D,iBACA,uBAGA,4BACE,4BACE,qCACA,qCACF,iBACF,iBACF,iBACF,iBACA,6BACE,0BACE,qBACA,0BAAI,gCAA2B,aAAc,iBAAQ,iBACrD,6BAA4C,gCAA2B,8BAAwC,iBAAQ,iBACvH,0BACE,mCAMA,mCAIF,iBACF,iBACF,iBACF,kB,sGAzBoB,+FACA,6FAQiB,4CAGrB,8FAMA,8F,yBAhClB,0BACC,kCAuCA,kB,uCAvCO,gD,yBAjDZ,yBACE,2BACE,+BACE,4BACE,yBACE,4BACE,4BAAO,6BAAqD,iBAC9D,iBACA,4BACG,4BAAO,8BAA0C,iBACnD,iBACA,6BACE,kCACF,iBACA,6BACE,6BACE,qCACF,iBACF,iBACH,iBACF,iBACA,6BACE,0BACE,0BAAI,gCAA2B,aAAc,iBAAQ,iBACrD,0BACE,gCAA2B,aAAkB,iBAC/C,iBACA,+BAMA,+BAGA,0BACE,mCAMA,kCACF,iBACF,iBACF,iBACF,iBACA,gCAyCF,iBACF,kB,uEA9EoB,qDAIK,8FAOgB,4CAEF,gDAEzB,oDAMA,oDAIM,qHAMD,sHAKV,yN,yBAzDd,4BACE,yBAAI,yBAAU,iBACf,+BACE,4BACE,yBACE,oBACF,iBACF,iBACA,4BACE,+BA2FF,iBACF,iBACD,kB,uCA7FS,wD,yBA/CX,yBACE,8BAGA,8BAMA,8BAQA,8BAMA,8BAcA,8BAuGF,kB,4CA7IuD,wEAChC,6DAGC,6DAMA,6DAQA,uFAMA,6DAcN,8D,mDAlE5B,4BAEE,4BACE,4BAAO,6BAAwD,iBACjE,iBACA,6BACE,6BACE,+BACE,4BACE,yBACE,4BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACF,iBACF,iBACA,6BACE,+BA8IA,0BACE,6BACE,4BAAsB,2FAAqB,iBAC7C,iBACF,iBACF,iBACF,iBAEF,iBACJ,iBAGA,iB,gCA1Jc,qDDhEpB,iBAoCC,WAAoBkJ,EAA+CsT,EAA0Cjc,EAAuC6I,GAAhI,KAAAF,UAA+C,KAAAsT,kBAA0C,KAAAjc,WAAuC,KAAA6I,aA9BpJ,KAAAvB,QAAkB,KAIlB,KAAAgP,OAAgC,CAC/B3L,aAAc,KACdq9B,OAAQ,KACR91B,UAAW,KACXlT,MAAOG,KAAKa,SAASU,SACrB6Q,cAAe,IAGhB,KAAAid,cAA+B,GAE/B,KAAAyZ,KAAoB,KACpB,KAAAC,QAAwD,KAExD,KAAAljC,MAAyB,GAEzB,KAAAmjC,UAAwB,GAExB,KAAAC,cAAuB,G,OAWvB,YAAA7gC,SAAA,WACCpI,KAAK2oC,UAAY,IAAI,EAAAzjC,SAGtB,YAAA+G,KAAA,SAAKkL,EAA+BkY,GAApC,WAIC,GAFArvB,KAAKqvB,cAAgBA,EAEP,MAAVlY,EAAgB,CACnBnX,KAAKmX,OAASA,EAEd,IAAI+xB,EAASlpC,KAAKqvB,cAAcQ,WAAU,SAAA3jB,GAAO,OAAAA,EAAItM,OAAS,EAAKuX,OAAO3L,iBAE1D,IAAZ09B,IACHlpC,KAAK8oC,KAAO9oC,KAAKqvB,cAAc6Z,IAGhC,IAAIC,EAASnpC,KAAK8oC,KAAKM,QAAQvZ,WAAU,SAAAgZ,GAAU,OAAAA,EAAOl+B,MAAQ,EAAKwM,OAAO0xB,WAE9D,IAAZM,IACHnpC,KAAK+oC,QAAU/oC,KAAK8oC,KAAKM,QAAQD,IAGd,MAAhBnpC,KAAK+oC,SAAyC,wBAAtB/oC,KAAK+oC,QAAQznC,MAMxCtB,KAAKwJ,QAAQ6P,eAAerZ,KAAKmX,OAAO0xB,OAAQ7oC,KAAKmX,OAAOpE,WAAW7I,MAAK,SAAAm/B,GACtE,EAAKxjC,MAAQwjC,EAASxjC,MACtB,EAAKojC,cAAgBI,EAASJ,iBAC7Bz+B,OAAM,SAACC,GACR,EAAKC,MAAMD,MAKlBzK,KAAKgpC,UAAY,GACjB,IAAK,IAAI5nC,EAAI,EAAGA,EAAIpB,KAAKmX,OAAO/E,cAAck3B,OAAOpnC,SAAUd,EAAG,CACjE,IAAIwnC,EAAQ5oC,KAAKmX,OAAO/E,cAAck3B,OAAOloC,GAEzCmoC,EAAqB,CAAEX,MAAOA,EAAOY,SAAUpoC,EAAGqoC,mBAAmB,GAEjD,MAApBb,EAAMtoC,YAAsBo1B,OAAOwH,KAAK0L,EAAMtoC,YAAY4B,OAAS,IACtEqnC,EAASG,eAAgB,GAG1B1pC,KAAKgpC,UAAU7oC,KAAKopC,MAKvB,YAAAI,uBAAA,sBACKlb,EAAQzuB,KAAKqvB,cAAcQ,WAAU,SAAA3jB,GAAO,OAAAA,EAAItM,OAAS,EAAKuX,OAAO3L,iBAE1D,IAAXijB,EACHzuB,KAAK8oC,KAAO9oC,KAAKqvB,cAAcZ,IAG/BzuB,KAAK8oC,KAAO,KACZ9oC,KAAK+oC,QAAU,OAIjB,YAAAa,uBAAA,sBACKnb,EAAQzuB,KAAK8oC,KAAKM,QAAQvZ,WAAU,SAAAgZ,GAAU,OAAAA,EAAOl+B,MAAQ,EAAKwM,OAAO0xB,UAU7E,GAPC7oC,KAAK+oC,SADS,IAAXta,EACYzuB,KAAK8oC,KAAKM,QAAQ3a,GAGlB,KAII,MAAhBzuB,KAAK+oC,SAAyC,wBAAtB/oC,KAAK+oC,QAAQznC,MAaxC,GAPAtB,KAAKwJ,QAAQ6P,eAAerZ,KAAKmX,OAAO0xB,OAAQ7oC,KAAKmX,OAAOpE,WAAW7I,MAAK,SAAAm/B,GACvE,EAAKxjC,MAAQwjC,EAASxjC,MACtB,EAAKojC,cAAgBI,EAASJ,iBAC7Bz+B,OAAM,SAACC,GACR,EAAKC,MAAMD,MAG2B,MAAvCzK,KAAKmX,OAAO/E,cAAsB,OAAW,CAChD,IAAIy3B,EAAM,CACTvoC,KAAM,KACNb,cAAe,KACfmoC,MAAO,GAER5oC,KAAKmX,OAAO/E,cAAsB,OAAI,CAACy3B,GACvC7pC,KAAKgpC,UAAU7oC,KAAK,CAAEyoC,MAAOiB,EAAKL,SAAU,EAAGC,mBAAmB,UAKnEzpC,KAAK6F,MAAQ,IAIf,YAAAikC,SAAA,WACC,IAAID,EAAM,CACTvoC,KAAM,KACNb,cAAe,KACfmoC,MAAO5oC,KAAKmX,OAAO/E,cAAck3B,OAAOpnC,QAErC6nC,EAAM/pC,KAAKmX,OAAO/E,cAAsB,OAAEjS,KAAK0pC,GACnD7pC,KAAKgpC,UAAU7oC,KAAK,CAAEyoC,MAAOiB,EAAKL,SAAUO,EAAM,EAAGN,mBAAmB,KAGzE,YAAAO,YAAA,SAAYR,EAAkBS,GAC7B,GAAIT,EAAWxpC,KAAKmX,OAAO/E,cAAsB,OAAElQ,OAAQ,CAC1D,IAAIgoC,EAAclqC,KAAKmqC,iBACnBD,IAAgBD,EAAgB,GACnCjqC,KAAKgpC,UAAU/lB,OAAOinB,EAAa,GAGpClqC,KAAKgpC,UAAU/lB,OAAOgnB,EAAe,GAGrC,IADA,IAAIG,EAAc,EACThpC,EAAI,EAAGA,EAAIpB,KAAKgpC,UAAU9mC,SAAUd,EAAG,CAC/C,IAAImoC,EAAqBvpC,KAAKgpC,UAAU5nC,GAExCmoC,EAASC,SAAWY,EAEfb,EAASE,oBACbW,GAA4B,GAI9BpqC,KAAKmX,OAAO/E,cAAsB,OAAE6Q,OAAOumB,EAAU,KAIvD,YAAAW,eAAA,WACC,IAAK,IAAI/oC,EAAI,EAAGA,EAAIpB,KAAKgpC,UAAU9mC,SAAUd,EAAG,CAG/C,GAFepB,KAAKgpC,UAAU5nC,GAEjBqoC,kBACZ,OAAOroC,EAIT,OAAQ,GAGT,YAAAipC,oBAAA,SAAoBd,GACnB,IAAIW,EAAclqC,KAAKmqC,kBAEH,GAAhBD,IACHlqC,KAAKgpC,UAAU/lB,OAAOinB,EAAa,GAE/BA,GAAeX,EAASC,SAAW,IAKxCxpC,KAAKsqC,sBAAsBf,EAASX,MAAMnoC,cAAe8oC,EAASC,UAAU,IAG7E,YAAAe,eAAA,SAAelpC,EAA6BmpC,GAC3C,IAAK,IAAIppC,EAAI,EAAGA,EAAIC,EAAKopC,WAAWvoC,SAAUd,EAAG,CAChD,IAAIspC,EAAYrpC,EAAKopC,WAAWrpC,GAEhC,GAAIspC,EAAUF,UAAYA,EACzB,OAAOE,EAAUxjB,UAKpB,YAAAyjB,oBAAA,SAAoBtpC,EAAWupC,EAAkBrB,GAChD,GAAgB,MAAZqB,GAAiC,KAAbA,GAQxB,IAAK,IAAIhqB,EAAI,EAAGA,EAAI2oB,EAASsB,QAAQC,MAAM5oC,OAAQ0e,IAClD,GAAI2oB,EAASsB,QAAQC,MAAMlqB,GAAGlE,OAASrb,EAAKqb,KAAM,CACjD,IAAIquB,EAAmBxB,EAASsB,QAAQC,MAAMlqB,GAE9C,GAAyB,MAArBmqB,EAAYlL,MAAe,CAC9Bx+B,EAAKw+B,MAAQ,GAEb,IAAK,IAAIz+B,EAAI,EAAGA,EAAI2pC,EAAYlL,MAAM39B,SAAUd,EAAG,CAClD,IAAIlB,EAAO6qC,EAAYlL,MAAMz+B,GAE7BC,EAAKw+B,MAAM3/B,EAAKN,MAAQ,MAI1B,aArBiB,MAAdyB,EAAKw+B,QACRx+B,EAAKw+B,MAAQ,KAyBhB,YAAAyK,sBAAA,SAAsB5iC,EAA2BuiC,EAAuBe,GAAxE,WACC,QADuE,IAAAA,OAAA,GAC7C,KAAtBtjC,GAAiD,MAArBA,EAA2B,CAC1D,IAAI6hC,EAAqBvpC,KAAKgpC,UAAUiB,GAYxC,OAVAV,EAASG,eAAgB,EACzBH,EAASsB,QAAU,KACnBtB,EAASX,MAAMtoC,WAAa,SAIR,IAFhB4pC,EAAclqC,KAAKmqC,mBAEED,IAAgBD,EAAgB,GACxDjqC,KAAKgpC,UAAU/lB,OAAOinB,EAAa,IAMrC,IAIKA,EAJDW,EAAU7qC,KAAKgpC,UAAUiB,GAAeY,QAC7B,MAAXA,GAAmBA,EAAQnjC,oBAAsBA,IAKhC,IAFhBwiC,EAAclqC,KAAKmqC,mBAEED,IAAgBD,EAAgB,IACxDjqC,KAAKgpC,UAAU/lB,OAAOinB,EAAa,GAE/BA,EAAcD,IACjBA,GAAgC,IAIlCjqC,KAAKgpC,UAAU/lB,OAAOgnB,EAAgB,EAAG,EAAG,CAAER,mBAAmB,EAAMoB,QAASA,KAGhF7qC,KAAKwJ,QAAQ2P,iBAAiBzR,EAAmB1H,KAAKmX,OAAO0xB,QAAQ3+B,MAAK,SAAC4gC,GAC1E,IAAIZ,EAAc,EAAKC,iBACnBZ,EAAqB,EAAKP,UAAUiB,GACpCrB,EAAQW,EAASX,MAgBrB,GAdIoC,IACHpC,EAAMtoC,WAAa,IAGpBipC,EAASsB,QAAU,CAAEnjC,kBAAmBA,EAAmBojC,MAAOA,IAE9C,GAAhBZ,IAAsBA,IAAgBD,EAAgB,GAAKa,EAAM5oC,OAAS,KAC7E,EAAK8mC,UAAU/lB,OAAOinB,EAAa,GAE/BA,EAAcD,IACjBA,GAAgC,IAI9Ba,EAAM5oC,OAAS,EAAG,CACrBqnC,EAASG,eAAgB,EAEzB,IAAK,IAAItoC,EAAI,EAAGA,EAAI0pC,EAAM5oC,SAAUd,EAAG,CACtC,IAAIC,EAAOypC,EAAM1pC,GAEjB,IAAI4pC,GAAiD,MAA/BpC,EAAMtoC,WAAWe,EAAKqb,SAC3CksB,EAAMtoC,WAAWe,EAAKqb,MAAQ,CAC7BA,KAAMrb,EAAKqb,KACXtD,WAAY,KACZ6xB,gBAAgB,GAGC,MAAd5pC,EAAKw+B,OAAiBx+B,EAAKw+B,MAAM39B,OAAS,GAAG,CAChD0mC,EAAMtoC,WAAWe,EAAKqb,MAAMmjB,MAAQ,GAEpC,IAAK,IAAIjf,EAAI,EAAGA,EAAIvf,EAAKw+B,MAAM39B,SAAU0e,EAAG,CAC3C,IAAI1gB,EAAOmB,EAAKw+B,MAAMjf,GAEtBgoB,EAAMtoC,WAAWe,EAAKqb,MAAMmjB,MAAM3/B,EAAKN,MAAQ,OAUnD,EAAKopC,UAAU/lB,OAAOgnB,EAAgB,EAAG,EAAG,CAAER,mBAAmB,EAAMoB,QAAS,CAAEnjC,kBAAmBA,EAAmBojC,MAAOA,UAG/HvB,EAASG,eAAgB,KAExBl/B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKd,YAAAygC,mBAAA,SAAmB7pC,GAGjB,IAAK,IAAM4L,KAFX5L,EAAK+X,WAAa,KAEA/X,EAAKw+B,MAChBx+B,EAAKw+B,MAAMsL,eAAel+B,KAC5B5L,EAAKw+B,MAAM5yB,GAAO,OAKzB,YAAAP,SAAA,sBACC1M,KAAKwJ,QAAQ0E,MAAMlO,KAAKmX,QAAQjN,MAAK,SAAAw9B,GAEpC,EAAKiB,UAAUljC,KAAKiiC,GACpB,EAAKh+B,WAAWmD,UACdrC,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAiZ,OAAA,sBAEwB,MAAnB1jB,KAAKmX,OAAOxM,IACf3K,KAAKwJ,QAAQgQ,OAAOxZ,KAAKmX,OAAOxM,KAAKT,MAAK,WACzC,EAAKR,WAAWmD,UACdrC,OAAM,SAACC,GACT,EAAKC,MAAMD,MAKZzK,KAAK0J,WAAWmD,QAIlB,YAAAnC,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA7WrCrL,GAAmC,0K,iCAAnCA,EAAmC,qE,OAAA,K,0mIC/BhD,4BACE,8BAEA,4BACE,yBACE,4BACF,iBACF,iBAEA,+BAAwC,sFAA0B,EAAAsN,cAEhE,+BACE,8BASA,4BACE,6BACE,6BAAO,6BAA+D,iBACxE,iBACA,8BACE,+BACE,iCAAoB,4EAAiC,4BAA+B,EAAAi9B,4BAClF,yBACA,mCACF,iBACF,iBACF,iBACF,iBACA,gCAcA,gCAcA,iCAwLA,6BACE,wBACA,8BACE,8BACE,gCAAmF,wCAAS,EAAAjmB,Y,wBAA5F,iBACA,2B,wBACF,iBACF,iBACF,iBAEF,iBACF,iBAEF,iB,+BAlQO,oDAWuB,mEAeE,6DAAiC,+BAE3C,uDAKX,iDAcA,6DAcmB,4FA4LG,2EACA,2EAAqC,uB,sTDjOtE,GAKa,EAAAtkB,uC,0HE/Bb,KACA,MADA,IAGA,SAOA,GAJA,MAGA,OACA,Q,4HCJI,4BAAqE,YAAW,kB,6BAAX,+C,qBA0D/C,6B,qBACA,6B,qBACA,6B,yBAVJ,yBACE,2BACE,6BAA0E,YAC5E,iBACA,yBACE,YACF,iBACA,4BACE,oCACA,oCACA,oCACF,iBACF,kB,iCAV8E,iDAG1E,6DAGU,yDACA,6DACA,oD,yBA/B1B,4BACE,4BAEI,yBACI,6BACJ,iBACA,+BACI,4BACE,yBACE,yBACE,6BACF,iBACA,yBACE,8BACF,iBACA,6BACE,8BACF,iBACF,iBACF,iBACA,6BACE,gCAaF,iBACJ,iBAEJ,iBACF,kB,8BAjBgB,uE,yBAwCI,8BACE,YACF,kB,uCADE,kE,wBAIJ,mC,uCAA0G,oC,yBAM1G,2BACE,gCACE,6BACF,iBACF,kB,uCAJoC,kE,yBAnB1C,yBACE,2BACE,6BACE,sBACA,2BACE,8BAA+B,YAAiB,iBAChD,8BAA+B,YAAmB,iBAClD,8BAA+B,aAAyB,iBACxD,iCAGF,iBAEA,2CAEF,iBACF,iBACA,6BACE,8BACE,8BAKD,iBACF,iBACH,kB,4CArBuC,wDACA,0DACA,kEACzB,sGAKQ,sGAMb,0D,mDAWb,6BACE,6CAAqB,uGAAoC,iBAC3D,kB,4HA/GZ,4BAEE,4BACE,4BACE,yBAAI,YAA+B,iBACrC,iBACF,iBAEA,4BACE,4BACE,4BACE,8BAAuC,kBAAG,iBAC1C,uBACA,+BAAuC,aAAsB,iBAC/D,iBACA,8BACE,oCACE,8BACE,iCAAiD,wF,wBAC/C,8BACF,iBACF,iBACF,iBACF,iBACF,iBAEA,iCAyCA,6BACE,8BACE,6BACE,8BACE,gCACE,6BACE,6BACE,4BAAoC,8BAA2C,iBACjF,iBACF,iBACA,6BAEE,gC,wBA4BF,iBACF,iBACA,gCAGF,iBACF,iBACF,iBACF,iBACF,iBACF,iB,oDAjHU,kEASqC,yDAKsE,kDAA2B,0DAQ3H,0FAqDD,oJA8BH,+DDxGvB,iBAmBC,WAAoBoK,EAA+C3I,EAAuC2gC,GAAtF,KAAAh4B,UAA+C,KAAA3I,WAAuC,KAAA2gC,QAb1G,KAAAr5B,QAAkB,KAElB,KAAAgP,OAAgC,KAEhC,KAAAuqB,KAAuC,CACtClrB,SAAU,GACVC,WAAY,EACZkrB,MAAO,EACPhH,UAAW,I,OAOZ,YAAAvyB,SAAA,sBACOuC,EAAM3K,KAAKwhC,MAAMS,SAASC,SAASj8B,IAAI,OAE7CjG,KAAKwJ,QAAQvD,IAAI0E,GAAKT,MAAK,SAAAiN,GAC1B,EAAKA,OAASA,EACd,EAAKirB,aAAa,MAGnB,IAAIC,EAAU,SAAWC,OAAOC,SAASC,UAAYF,OAAOC,SAASE,KAAO,IAAMH,OAAOC,SAASE,KAAO,IAAMv8B,IAE/GlG,KAAK0iC,SAAW,EAAAC,UAAUN,EAAU,qBACpCriC,KAAK0iC,SAASl0B,WAAU,SAAArG,GACF,2BAAjBA,EAAQ7G,MACX,EAAK8gC,aAAa,EAAKV,KAAKjrB,gBAK/B,YAAAjO,YAAA,WAEsB,MAAjBxI,KAAK0iC,UACR1iC,KAAK0iC,SAAS57B,YAIhB,YAAAskC,MAAA,sBACCprC,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQiQ,IAAIzZ,KAAKmX,OAAOxM,KAAKT,MAAK,WAEtC,EAAKk4B,aAAa,EAAKV,KAAKjrB,eAE1BjM,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA23B,aAAA,SAAa3rB,GAAb,WACoB,MAAfzW,KAAKmX,SAERnX,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQkQ,QAAQ1Z,KAAKmX,OAAOxM,IAAK8L,EAAYzW,KAAK0hC,KAAKlrB,UAAUtM,MAAK,SAAA0C,GAE1E,EAAK04B,iBAAiB14B,GACtB,EAAK80B,KAAO90B,KAEVpC,OAAM,SAACC,GACT,EAAKC,MAAMD,QAKd,YAAA26B,gBAAA,SAAgBC,GACf,MAAmB,aAAfA,EAAIprB,OACAja,KAAKa,SAAS+iB,OAAO,0BAEL,YAAfyhB,EAAIprB,QAAuC,QAAforB,EAAIprB,OACjCja,KAAKa,SAAS+iB,OAAO,yBAEL,WAAfyhB,EAAIprB,OACLja,KAAKa,SAAS+iB,OAAO,wBAEL,YAAfyhB,EAAIprB,OACLja,KAAKa,SAAS+iB,OAAO,yBAEL,aAAfyhB,EAAIprB,OACLja,KAAKa,SAAS+iB,OAAO,0BAEL,YAAfyhB,EAAIprB,OACLja,KAAKa,SAAS+iB,OAAO,yBAGrB5jB,KAAKa,SAAS+iB,OAAO,0BAI9B,YAAA0hB,iBAAA,SAAiB5D,GAAjB,WAECA,EAAK/G,UAAUj5B,SAAQ,SAAC2jC,GAEvBA,EAAIE,WAAa,CAChB,MAAS,CACR,CACC,MAAS,SACT,OAAwB,QAAdF,EAAIG,MAAkB,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,QAG7F,CACC,MAAS,aACT,OAAwB,eAAdH,EAAIG,OAAwC,sBAAdH,EAAIG,MAAgC,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,sBAEzI,CACC,MAAS,kBACT,OAAwB,WAAdH,EAAIG,OAAoC,mBAAdH,EAAIG,OAA4C,kBAAdH,EAAIG,MAA4B,EAAKC,aAAaJ,GAAO,UAOpI,YAAAK,mBAAA,SAAmBC,EAAkBC,GACpC,IAAIhE,EAAQ,CAAC,aAAc,oBAAqB,SAAU,iBAAkB,iBAExEiE,EAASjE,EAAM54B,QAAQ28B,GAG3B,OAFgB/D,EAAM54B,QAAQ48B,GAEdC,EACR,WAGA,IAIT,YAAAJ,aAAA,SAAaJ,GACZ,MAAmB,WAAfA,EAAIprB,QAAsC,YAAforB,EAAIprB,OAC3B,UAEgB,aAAforB,EAAIprB,QAAwC,YAAforB,EAAIprB,OAClC,QAGD,IAIR,YAAAvP,MAAA,SAAMD,GACLzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAhJrCpL,GAA8B,uI,iCAA9BA,EAA8B,mgECnB3C,4BACE,4BACA,6BAEA,4BAEE,8BAEA,4BACE,gCAsHF,iBACF,iBACF,kB,MA3HS,oDAGE,qD,wTDKX,GAKa,EAAAA,kC,gHEnBb,KACA,MAGA,MAJA,IAKA,S,GAEA,O,iGCFQ,4BAAqE,YAAW,kB,6BAAX,+C,yBAOjE,4BAKI,4BACI,6BAEI,sBACA,2BACI,8BACE,6BACA,YACF,iBACA,8BACE,6BACA,aACF,iBACJ,iBAEJ,iBACJ,iBACA,8BACI,2BAEI,0BAAI,yBAAG,aACL,8BACA,aACA,8BACF,iBAAI,iBACJ,0BAAI,aAAwC,8BAA6D,iBAE7G,iBACJ,iBACJ,kB,6BAtBkB,0DAIA,8DASC,kEAEL,6DAGE,mF,yBA0BI,yBACI,4BACE,wBAAG,YAAY,iBACjB,iBACA,4BACE,wBAAG,YAAe,iBACpB,iBACA,4BACE,wBAAG,YAAc,iBACnB,iBACJ,kB,uBARS,2CAGA,8CAGA,8C,mDAMb,6BACI,6CAAqB,uGAAoC,iBAC7D,kB,kGApCZ,6BAEI,4BAEI,+BACI,4BACI,yBACC,4BACI,6BAA2C,gBAAM,6BACrD,iBACA,4BACK,8BACJ,iBACD,6BACG,8BACF,iBACF,iBACJ,iBAEA,6BACI,gC,wBAWJ,iBACJ,iBACA,8BACI,gCAGJ,iBACJ,iBACJ,kB,8BAnBoB,iJAcH,6D,yBAnCrB,6BACI,gCAwCJ,kB,6BAxCsC,2CDtClD,iBAqBE,WAAmBmK,EAAkCg4B,EAAuB73B,EAAiC+6B,GAA1F,KAAAl7B,UAAkC,KAAAg4B,QAAwD,KAAAkD,YAf7G,KAAAv8B,QAAkB,KAElB,KAAA2O,UAAoB,GAEpB,KAAA4qB,KAAY,CACVC,MAAO,EACPlrB,WAAY,EACZD,SAAU,GACVgM,QAAS,IAQTxiB,KAAKikB,QAAUta,EAAYsa,UAC3BjkB,KAAKkkB,aAAelkB,KAAKikB,SAAWta,EAAYua,eAChDlkB,KAAKmkB,cAAgBnkB,KAAKikB,SAAWjkB,KAAKkkB,cAAgBva,EAAYya,gB,OAGxE,YAAAhc,SAAA,WAEEpI,KAAK8W,UAAY9W,KAAKwhC,MAAMS,SAASn8B,OAAY,IAEjD9F,KAAKoiC,aAAa,IAIpB,YAAA55B,YAAA,aAGA,YAAA89B,mBAAA,SAAmBC,GACjB,OAAOA,EAAKtQ,QAAQ,KAAM,OAG5B,YAAAuQ,wBAAA,SAAwBnV,GACtB,OAAOvvB,KAAKC,UAAUsvB,IAGxB,YAAA+Q,aAAA,SAAa3rB,GAAb,WAEEzW,KAAKmI,QAAU,KAEfnI,KAAKwJ,QAAQwN,iBAAiBhX,KAAK8W,UAAW9W,KAAK0hC,KAAKlrB,SAAUC,GAAYvM,MAAK,SAAA0C,GAEjF,EAAKy4B,IAAMz4B,EAEX,EAAK80B,KAAO,EAAK2D,IAAIgG,gBAEpB7gC,OAAM,SAACC,GACR,EAAKC,MAAMD,OAKf,YAAAC,MAAA,SAAMD,GACFzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA1DzCnL,GAAoB,mJ,iCAApBA,EAAoB,slDCfjC,4BACI,4BACA,6BAEA,4BACI,8BAEI,4BACI,yBACI,4BACJ,iBACJ,iBACA,+BAmCA,8BA0CR,iBACJ,kB,MArFa,oDAOI,0CAmCA,sE,qgBDrCjB,GAKa,EAAAA,wB,oHEfb,SACA,SAMA,GAJA,MAIA,QAOA,S,GAEA,O,kHCDkB,yBAEE,2BAAG,kFAAc,SAA+B,6BAA+C,iBACjG,kB,mDAEE,2BAAmB,0HAAgD,YAAiD,iB,0CAAjD,sF,yBACnE,2BACE,wBAAG,YAAiD,iBACtD,kB,uCADK,8E,6DAHP,4BACE,6BACA,+BAGF,kB,kBALuD,iDAClD,uCACG,uC,yBAyCN,gCAA4E,YAAkC,kB,uBAA3D,6BAAyB,4D,yBAc5E,gCAA4D,YAA6B,kB,uBAAjD,6BAAoB,4D,mDAc5D,6BAEE,6BAA+B,sHAC7B,6BACE,2BAA+E,+GAA2D,iBAC1I,4BAA8E,YAA0E,iBAC1J,iBACF,iBACF,iB,0BAHoF,6G,qBA6B1F,sB,mDAOI,6BACE,+BAAoH,0HAApH,iBACA,+BAAkC,YAAmB,iBACvD,iB,0BAFgE,0CAAsB,sBAClD,6C,mDAc1B,6BACE,+BAAiD,6IAAjD,iBAKA,YACA,2BAA+D,yIAAqC,iBACtG,iB,0CAPyB,gDAKvB,6D,yBAPJ,0BACE,+BASF,kB,uBAToD,+C,yBAJxD,6BACE,4BAAO,YAA8B,iBACrC,6BACE,+BAWF,iBACF,kB,uCAdS,mDAEA,wD,yBAJX,0BACE,+BAgBF,kB,4CAhBO,2E,yBANX,0BACE,yBACE,6BACF,iBACA,6BACE,+BAmBF,iBACF,kB,8BApBS,6D,mDAjBX,0BAEE,6BACE,yBACE,6BACF,iBACA,+BAIF,iBAEA,8BA2BA,gCAAgC,uGAAkC,kCAAmB,iBACvF,iB,gCAlC0B,oDAMnB,iEDrHrB,iBAyFC,WAAoB8N,EAAsCk+B,EAA+B9hC,GAArE,KAAA4D,eAAsC,KAAAk+B,aAA+B,KAAA9hC,UA7EzF,KAAAkK,KAA4B,CAC3B7N,MAAO,GACP8F,YAAa,GACb4/B,QAAS,CAAEjqC,KAAM,eAAgB6c,SAAU,KAG5C,KAAAkS,UAAoB,KACpB,KAAAtd,UAAoB,KAKpB,KAAAqO,QAAkB,KAKlB,KAAAoqB,YAAc,GAed,KAAAC,QAAkB,EAElB,KAAAC,aAAyB,GAEzB,KAAAC,mBAA0C,GAE1C,KAAAnP,MAAsB,GAKtB,KAAAoP,WAAoB,CACnB,CACClvB,KAAM,YACN7c,MAAO,YACPoW,GAAI,eACJ41B,OAAQ,uCACR7Q,IAAK,4BACL0C,UAAU,IAWZ,KAAAoO,oBAAqB,EAIrB,KAAAC,oBAA8B,E,OAe9B,YAAA3jC,SAAA,sBACCpI,KAAKwJ,QAAQgO,2BAA2BtN,MAAK,SAAAsyB,GAC5C,EAAKA,MAAQA,EAEb,EAAKwP,4BAA4BxP,OAInC,YAAAh0B,YAAA,WACCxI,KAAKud,IAAIhE,UAGV,YAAAlR,gBAAA,sBAEO4jC,EAAQjsC,KAAK4rC,WAAW,GAE9B5rC,KAAKud,IAAM,IAAI,EAAAC,IAAI,CAClBC,UAAW,MACXnU,MAAO,CACN,QAAW,EACX,KAAQ2iC,EAAMvvB,KACd,SAAY,CACX,wBAAwB,GAEzB,QAAW,CACV,OAAU,CACT,KAAQ,SACR,IAAOuvB,EAAMjR,IACb,SAAY,MAGd,OAAUiR,EAAMJ,OAChB,OAAUvJ,OAAOC,SAAS2J,SAAW,KAAO5J,OAAOC,SAAS4J,KAAOjmC,IAAM,kCACzE,OAAU,CACT,CACC,GAAM+lC,EAAMh2B,GACZ,KAAQ,SACR,OAAU,YAKbyH,KAAM,EACN0uB,oBAAoB,EACpBzuB,OAAQ,EAAE,UAAW,aAGtB3d,KAAKud,IAAIK,GAAG,QAAQ,WACnB,EAAKC,cAKP,YAAAmuB,4BAAA,SAA4BxP,GAA5B,WACCA,EAAM96B,SAAQ,SAAAsW,GACb,IAAIq0B,EAAW,CAAE1hC,IAAKqN,EAAKrN,IAAKC,aAAcoN,EAAKpN,aAAaiY,eAAgBypB,cAAe,IAC/F,EAAKX,mBAAmBxrC,KAAKksC,GAC7Br0B,EAAKgoB,SAASt+B,SAAQ,SAAA6+B,GACrB,IAAIgM,EAAmB,CAAE5hC,IAAK41B,EAAQ51B,IAAKC,aAAc21B,EAAQ7yB,QAAS+9B,QAAQ,EAAOe,SAAS,GAClGH,EAASC,cAAcnsC,KAAKosC,UAK/B,YAAA/nB,iBAAA,WACCxkB,KAAK41B,KAAK,OAGX,YAAA/X,QAAA,sBAEC7d,KAAKud,IAAIK,GAAG,cAAc,WACzB,EAAKI,YACL,EAAKwf,aAGNx9B,KAAKge,YAGLhe,KAAKw9B,UAGLx9B,KAAKud,IAAIgB,WAAW,IAAI,EAAAC,kBAAkB,CAAE,gBAAkB,KAC9Dxe,KAAKud,IAAIgB,WAAW,IAAI,EAAAkuB,mBAAmB,CAAEC,SAAS,IAAS,gBAE/D1sC,KAAKud,IAAIK,GAAG,WAAY,mBAAmB,SAAC9U,GAC3C,EAAK6jC,oBAAoB7jC,MAG1B9I,KAAKud,IAAIK,GAAG,WAAY,oBAAoB,SAAC9U,GAC5C,EAAK6jC,oBAAoB7jC,OAI3B,YAAAkV,UAAA,sBAEOka,EAAS,WAEfl4B,KAAKud,IAAIuC,UAAUoY,EAAQ,CAC1B52B,KAAM,UACNoS,KAAM,CACL,KAAQ,oBACR,SAAY,MAKd1T,KAAKud,IAAIwC,SAAS,CACjB,GAAMmY,EAAS,UACf,KAAQ,SACR,OAAUA,EACV,MAAS,CACR,gBAAiB,GACjB,eAAgB,UAChB,sBAAuB,EACvB,sBAAuB,WAExBvmB,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,MAK7D3R,KAAKud,IAAIwC,SAAS,CACjB,GAAMmY,EAAS,WACf,KAAQ,OACR,OAAUA,EACV,OAAU,GACV,MAAS,CACR,aAAc,UACd,eAAgB,GAChB,qBAAsB,SAEvBvmB,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,MAMlE3R,KAAKud,IAAIwC,SAAS,CACjB,GAAMmY,EAAS,SACf,OAAUA,EACV,KAAQ,SACR,MAAS,CACR,aAAc,QACd,kBAAmB,OACnB,kBAAmB,GAEpB,OAAU,CACT,aAAc,CAAC,MAAO,iBAAkB,CAAC,MAAO,iBAChD,YAAa,CAAC,mBACd,cAAe,CAAC,EAAG,IACnB,cAAe,MACf,YAAa,MAIfl4B,KAAK2rC,mBAAmBjqC,SAAQ,SAAAkrC,GAC/BA,EAAYN,cAAc5qC,SAAQ,SAAAmrC,GAC7BA,EAAOL,SACV,EAAKM,eAAeD,EAAOliC,YAO/B,YAAA6yB,QAAA,sBACqB,MAAhBx9B,KAAK0/B,QACR1/B,KAAKsrC,WAAW92B,MAAMxU,KAAKqwB,UAAWrwB,KAAK+S,UAAW/S,KAAKohB,SAASlX,MAAK,SAAAwJ,GAClE,EAAK6J,IAAIoC,UAAU,YAAaK,QAAQtM,EAAK63B,SAEnD,EAAKvrB,QAAQtM,MAGd1T,KAAKsrC,WAAW72B,OAAOzU,KAAK0/B,QAAQ3Z,WAAWnmB,KAAMI,KAAK0/B,QAAQ3Z,WAAWzkB,KAAMtB,KAAKqwB,UAAWrwB,KAAK+S,UAAW/S,KAAKohB,SAASlX,MAAK,SAAAwJ,GAC/H,EAAK6J,IAAIoC,UAAU,YAAaK,QAAQtM,EAAK63B,SAGnD,EAAKvrB,QAAQtM,MAGf1T,KAAK+S,UAAY,KACjB/S,KAAKqwB,UAAY,MAGlB,YAAA0c,mBAAA,SAAmBd,GAGlBjsC,KAAK4rC,WAAWlqC,SAAQ,SAAAsrC,GACvBA,EAAUtP,UAAW,KAGtBuO,EAAMvO,UAAW,EAEjB19B,KAAKud,IAAI0vB,SAAS,CACjB,QAAW,EACX,KAAQhB,EAAMvvB,KACd,SAAY,CACX,wBAAwB,GAEzB,QAAW,CACV,OAAU,CACT,KAAQ,SACR,IAAOuvB,EAAMjR,IACb,SAAY,MAGd,OAAUiR,EAAMJ,OAChB,OAAUvJ,OAAOC,SAAS2J,SAAW,KAAO5J,OAAOC,SAAS4J,KAAOjmC,IAAM,kCACzE,OAAU,CACT,CACC,GAAM+lC,EAAMh2B,GACZ,KAAQ,SACR,OAAU,cAgDd,YAAAi3B,qBAAA,WACCltC,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA/P,2BAA4B,CACpEgQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,wBAEV1P,KAAK0J,WAAWiG,QAAQg8B,mBAAqB3rC,KAAK2rC,mBAErB3rC,KAAK0J,WAAWiG,QAASjD,SAAS8B,WAAU,SAAA2+B,QAW1E,YAAAC,oBAAA,SAAoBn3B,KAQpB,YAAAo3B,yBAAA,aAQA,YAAAC,kBAAA,SAAkBxkC,EAAkBykC,GACf,MAAhBvtC,KAAK0/B,SACR1/B,KAAKotC,oBAAoBG,EAAKxnB,WAAWnmB,OAI3C,YAAA4tC,qBAAA,WACCxtC,KAAKqtC,4BAqBN,YAAAI,cAAA,SAAc5yB,EAAiB/R,GAA/B,WACc,MAATA,GACHA,EAAM2nB,kBAGPzwB,KAAK+rC,oBAAqB,EAG1B/rC,KAAK0tC,MAAQzwB,YAAW,WACvB,IAAK,EAAK8uB,oBACY,MAAjBlxB,EAAKzM,SAAkB,CAC1B,IAAMiS,EAAS,UAAKxF,GAEpB,EAAK0C,IAAIgD,UAAUF,MAPR,MAaf,YAAA5L,OAAA,SAAOoG,EAAiB/R,GAEV,MAATA,GACHA,EAAM2nB,kBAGPzwB,KAAK+rC,oBAAqB,EAC1B4B,aAAa3tC,KAAK0tC,OAElB1tC,KAAK4tC,UAAU/yB,IAGhB,YAAA8xB,oBAAA,SAAoB7jC,GACnB,GAAsB,MAAlBA,EAAMqV,UAAoBrV,EAAMqV,SAASjc,OAAS,EAAG,CACxD,IAAM,EAAU4G,EAAMqV,SAAS,GAEzBsQ,EAAQzuB,KAAK0T,KAAK63B,QAAQptB,SAAS0R,WAAU,SAAAhV,GAAU,OAAOA,EAAKkL,WAAWnmB,OAAS,EAAQmmB,WAAWnmB,SAEjG,IAAX6uB,GACHzuB,KAAK4tC,UAAU5tC,KAAK0T,KAAK63B,QAAQptB,SAASsQ,MAK7C,YAAAmf,UAAA,SAAU/yB,GAAV,WACC7a,KAAKsrC,WAAW72B,OAAOoG,EAAKkL,WAAWnmB,KAAMib,EAAKkL,WAAWzkB,KAAM,KAAMtB,KAAK+S,UAAW/S,KAAKohB,SAASlX,MAAK,SAAAwJ,GAC3G,EAAKgsB,QAAU7kB,EAEf,EAAKgzB,cAAchzB,GAEb,EAAK0C,IAAIoC,UAAU,YAAaK,QAAQtM,EAAK63B,SAEnD,EAAKvrB,QAAQtM,MAGd1T,KAAK+S,UAAY,KACjB/S,KAAKqwB,UAAY,MAGlB,YAAAwd,cAAA,SAAchzB,GAEkB,GAA3B7a,KAAKwrC,YAAYtpC,QAAelC,KAAKwrC,YAAYxrC,KAAKwrC,YAAYtpC,OAAS,GAAG6jB,WAAWnmB,OAASib,EAAKkL,WAAWnmB,MACrHI,KAAKwrC,YAAYrrC,KAAK0a,IAIxB,YAAA+a,KAAA,SAAK/a,GAAL,WAEa,MAARA,EACH7a,KAAKsrC,WAAW72B,OAAOoG,EAAKkL,WAAWnmB,KAAMib,EAAKkL,WAAWzkB,KAAM,KAAMtB,KAAK+S,UAAW/S,KAAKohB,SAASlX,MAAK,SAAAwJ,GAC3G,IAAI1K,EAAU,EAAKwiC,YAAY3b,WAAU,SAAAzuB,GAAK,OAAAA,EAAE2kB,WAAWnmB,OAASib,EAAKkL,WAAWnmB,QAEpF,EAAK8/B,QAAU7kB,EACf,EAAK2wB,YAAYvoB,OAAOja,EAAU,GAE5B,EAAKuU,IAAIoC,UAAU,YAAaK,QAAQtM,EAAK63B,SAEnD,EAAKvrB,QAAQtM,MAGN1T,KAAKwrC,YAAYtpC,OAAS,GAClClC,KAAKsrC,WAAW92B,MAAM,KAAM,KAAMxU,KAAKohB,SAASlX,MAAK,SAAAwJ,GAC9C,EAAK6J,IAAIoC,UAAU,YAAaK,QAAQtM,EAAK63B,SAEnD,EAAKvrB,QAAQtM,GAEb,EAAKgsB,QAAU,KACf,EAAK8L,YAAc,MAIrBxrC,KAAK+S,UAAY,KACjB/S,KAAKqwB,UAAY,MAGlB,YAAAyd,OAAA,SAAOjzB,GACN7a,KAAK0/B,QAAU7kB,GAGhB,YAAAkzB,SAAA,SAASC,GAAT,WACChuC,KAAK0T,KAAK63B,QAAQptB,SAAW,GAE7B6vB,EAAMtsC,SAAQ,SAAAmZ,GACb,EAAKnH,KAAK63B,QAAQptB,SAAShe,KAAK0a,OAIlC,YAAAmF,QAAA,SAAQtM,GACP1T,KAAK0T,KAAOA,EAEZ1T,KAAK+S,UAAYW,EAAKX,UACtB/S,KAAKqwB,UAAY3c,EAAK2c,WAIvB,YAAA4d,6BAAA,SAA6BC,GAC5B,IAAIC,GAAa,EAWjB,OAVAnuC,KAAK2rC,mBAAmBjqC,SAAQ,SAAAkrC,GAC3BA,EAAYjiC,MAAQujC,GACvBtB,EAAYN,cAAc5qC,SAAQ,SAAAmrC,GAC7BA,EAAOL,UACV2B,GAAa,SAMVA,GAGR,YAAAC,wBAAA,WACC,IAAID,GAAa,EASjB,OARAnuC,KAAK2rC,mBAAmBjqC,SAAQ,SAAAkrC,GAC/BA,EAAYN,cAAc5qC,SAAQ,SAAAmrC,GAC7BA,EAAOL,UACV2B,GAAa,SAKTA,GAGR,YAAAE,mBAAA,SAAmBxB,GACdA,EAAOpB,SACVzrC,KAAKud,IAAImC,YAAYmtB,EAAOliC,IAAM,WAClC3K,KAAKud,IAAImC,YAAYmtB,EAAOliC,IAAM,YAClC3K,KAAKud,IAAImC,YAAYmtB,EAAOliC,IAAM,UAClC3K,KAAKud,IAAIgC,aAAastB,EAAOliC,KAE7BkiC,EAAOpB,QAAS,GAGjBoB,EAAOL,SAAU,GAGlB,YAAA8B,mBAAA,SAAmBpW,GAAnB,WAECl4B,KAAK2rC,mBAAmBjqC,SAAQ,SAAAkrC,GAC/BA,EAAYN,cAAc5qC,SAAQ,SAAAmrC,GAC7BA,EAAOliC,MAAQutB,IAOd2U,EAAOpB,QACV,EAAKluB,IAAImC,YAAYwY,EAAS,WAC9B,EAAK3a,IAAImC,YAAYwY,EAAS,YAC9B,EAAK3a,IAAImC,YAAYwY,EAAS,UAC9B,EAAK3a,IAAIgC,aAAa2Y,GAEtB2U,EAAOpB,QAAS,IAGhB,EAAKqB,eAAe5U,GAEpB2U,EAAOpB,QAAS,WAOrB,YAAAqB,eAAA,SAAe5U,GACd,IAIIgU,EAAW5J,OAAOC,SAAS2J,SAC3BC,EAAO7J,OAAOC,SAAS4J,KAE3BnsC,KAAKud,IAAIuC,UAAUoY,EAAQ,CAC1B52B,KAAM,SACNitC,MAAO,CAACrC,EAAW,KAAOC,EAAOjmC,IAAM,8CAAgDi+B,mBAAmBriC,KAAKC,UAAU,CAAE4I,IAAKutB,QAIjIl4B,KAAKud,IAAIwC,SAAS,CACjB,GAAMmY,EAAS,UACf,KAAQ,SACR,OAAUA,EACV,eAAgB,UAChB,MAAS,CACR,gBAAiB,GACjB,eAAgB,UAChB,sBAAuB,EACvB,sBAAuB,WAExBvmB,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,KAzB3C,mBA8BlB3R,KAAKud,IAAIwC,SAAS,CACjB,GAAMmY,EAAS,WACf,KAAQ,OACR,OAAUA,EACV,eAAgB,UAChB,OAAU,GACV,MAAS,CACR,aAAc,UACd,eAAgB,GAChB,qBAAsB,SAEvBvmB,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,KA1ChD,mBAgDlB3R,KAAKud,IAAIwC,SAAS,CACjB,GAAMmY,EAAS,SACf,OAAUA,EACV,eAAgB,UAChB,KAAQ,SACR,MAAS,CACR,aAAc,QACd,kBAAmB,OACnB,kBAAmB,GAEpB,OAAU,CACT,aAAc,CAAC,OACd,CAAC,MAAO,gBAAkBsW,UAAUr6B,SAAS2O,eAC7C,CAAC,WAAY,CAAC,SAAU,CAAC,MAAO,gBAAkB0rB,UAAUr6B,SAAS2O,gBAAiB,CAAC,SAAU,CAAC,MAAO,kBACzG,CAAC,SAAU,CAAC,MAAO,kBAEpB,YAAa,CAAC,mBACd,cAAe,CAAC,EAAG,IACnB,cAAe,MACf,YAAa,KAnEG,oB,iCAtlBPvjB,GAAwB,iH,iCAAxBA,EAAwB,ssECzBrC,4BACE,4BACA,6BAGA,4BAEE,4BACE,4BACE,4BACE,4BAEE,4BACE,4BACE,4BACE,8BAIA,8BAMF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,6BACE,8BACF,iBACA,gCAAwC,gEAAqB,4BAAW,EAAAilB,sBAAxE,iBACF,iBACF,iBACF,iBAgBA,6BACE,6BACE,6BACE,6BACE,8BACF,iBACA,iCAA4D,kEAAuB,4BAAW,EAAAgZ,aAC5F,yBACA,mCACF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,6BACE,8BACF,iBACA,iCAA0D,kEAAuB,4BAAW,EAAAA,aAC1F,yBACA,mCACF,iBACF,iBACF,iBACF,iBAEF,iBACF,iBAEA,6BACE,6BACE,8BACM,8BAEE,gCAsBN,iBACF,iBACF,iBACF,iBACF,iBAEA,8BACE,6BAEE,kCACE,8BAA0B,mEAAmC,IAAnC,CAAwC,sDAAoC,KAEpG,8BACA,+BA0CF,iBACF,iBAEA,yBACF,iBACF,iBACF,iBACF,iBACF,kB,MAhKsB,qDAIA,qDAgBoC,iDAyBoB,mDAElD,0DAYgD,mDAEhD,oDAcH,+DAkCW,0DACjB,2D,opCDzGnB,GAKa,EAAAj+B,4B,sHEzBb,KACA,MADA,IAEA,Q,+DCcoC,0BACI,+BAAkD,mFAAlD,iBAA0H,YAI9H,kB,uBAJ2B,iDAAmG,6D,yBAJtI,6BACI,yBAAI,YAA8B,iBAClC,4BACI,8BAMJ,iBACJ,kB,uCATQ,mDAEK,wD,yBAJjB,0BACI,+BAWJ,kB,2CAXS,oEDNjC,iBAeI,WAAoBmK,GAAA,KAAAA,a,OAEpB,YAAAtB,SAAA,WACIpI,KAAK0M,SAAW,IAAI,EAAAxH,SAGxB,YAAAupC,sBAAA,SAAsBP,GACxB,IAAIQ,GAAa,EAOjB,OANA1uC,KAAK2rC,mBAAmBjqC,SAAQ,SAAAkrC,GAC5BA,EAAYjiC,MAAQujC,GAAStB,EAAYN,cAAcpqC,OAAS,IAClEwsC,GAAa,MAIRA,GAGL,YAAA1R,QAAA,WACIh9B,KAAK0M,SAASjH,KAAMzF,KAAK2rC,oBACzB3rC,KAAK0J,WAAWmD,Q,iCA7BXrN,GAA0B,oC,iCAA1BA,EAA0B,mqBCZvC,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,6BACI,+BACI,4BACI,4BACI,4BACI,8BAaJ,iBACJ,iBACJ,iBAEA,6BACI,6BACI,6BACI,gCAAsB,wCAAS,EAAAkK,WAAA,UAE3B,4BACI,8BACJ,iBACJ,iBACA,iCAAsB,wCAAS,EAAAszB,aAC3B,4BACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MApC6B,8D,0gCDL7B,GAKa,EAAAx9B,8B,4GEZb,aAMA,SACA,SACA,SAKA,SAGA,aAeC,WAAY4pB,EAAmCulB,EAAoCluC,EAA8Bu2B,EACzG/U,EAA6C7U,GAA7C,KAAA6U,kBAA6C,KAAA7U,eACpDpN,KAAKopB,mBAAqBA,EAC1BppB,KAAK2uC,iBAAmBA,EACxB3uC,KAAKS,cAAgBA,EACrBT,KAAKg3B,SAAWA,EAmelB,OAheC,YAAAD,QAAA,WACC,OAAO/2B,KAAKS,cAAcb,MAG3B,YAAAwuB,OAAA,SAAO7T,EAAWF,EAAWu0B,GAC5B,IAAIx0B,EAAOpa,KAAK6uC,UAGhBn0B,EAAGjG,OAAO,oEAAsEzU,KAAK+2B,UAAY,MAC/Fnc,QAAQ,WAAYg0B,GACpBvtC,KAAK,IAAKkZ,GACVlZ,KAAK,IAAKgZ,GAEZK,EAAGjG,OAAO,sEAAwEzU,KAAK+2B,UAAY,MACjGnc,QAAQ,WAAYg0B,GACpBvtC,KAAK,IAAKkZ,GACVlZ,KAAK,IAAKgZ,EAAI,EAAAuO,iBAAiByC,SAAW,EAAI,GAEhD3Q,EAAGjG,OAAO,qEAAuEzU,KAAK+2B,UAAY,MAChGnc,QAAQ,WAAYg0B,GACpBvtC,KAAK,IAAKkZ,EAAI,GACdlZ,KAAK,IAAKgZ,EAAI,GAEhBK,EAAGjG,OAAO,8EAAgFzU,KAAK+2B,UAAY,MACzGnc,QAAQ,WAAYg0B,GACpBvtC,KAAK,IAAKkZ,EAAIH,EAAKI,MAAQ,IAC3BnZ,KAAK,IAAKgZ,EAAI,IAKhB,IAAIy0B,EAAmBp0B,EAAGjG,OAAO,2EAA6EzU,KAAK+2B,UAAY,MAAMlc,OACrI,GAAmB,MAAfi0B,EAAqB,CACxB,IAAMC,EAAUx0B,EAAIH,EAAKI,MAAQ,GAC3Bw0B,EAAU30B,EAAID,EAAKE,OAAS,GAC9B20B,EAAcH,EAAYh0B,UAC9BJ,EAAGjG,OAAO,2EAA6EzU,KAAK+2B,UAAY,MACtGnc,QAAQ,WAAYg0B,GACpBvtC,KAAK,YAAa,cAAgB0tC,EAASE,EAAY10B,GAAK,KAAOy0B,EAASC,EAAY50B,GAAK,KAGhG,IAAI60B,EAAqBx0B,EAAGjG,OAAO,6EAA+EzU,KAAK+2B,UAAY,MAAMlc,OACzI,GAAqB,MAAjBq0B,EAAuB,CACpBH,EAAUx0B,EAAIH,EAAKI,MAAQ,GAC3Bw0B,EAAU30B,EAAID,EAAKE,OAAS,GADlC,IAEI60B,EAAgBD,EAAcp0B,UAClCJ,EAAGjG,OAAO,6EAA+EzU,KAAK+2B,UAAY,MACxGnc,QAAQ,WAAYg0B,GACpBvtC,KAAK,YAAa,cAAgB0tC,EAASI,EAAc50B,GAAK,KAAOy0B,EAASG,EAAc90B,GAAK,OAIrG,YAAA8T,OAAA,WACC,IAAI1Z,EAASiG,EAAGjG,OAAO,oEAAsEzU,KAAK+2B,UAAY,MAE9G,MAAO,CAAExc,EAAGiB,SAAS/G,EAAOpT,KAAK,MAAOgZ,EAAGmB,SAAS/G,EAAOpT,KAAK,QAGjE,YAAAwtC,QAAA,WACC,IAAIp6B,EAASiG,EAAGjG,OAAO,oEAAsEzU,KAAK+2B,UAAY,MAE9G,MAAO,CAAExc,EAAGiB,SAAS/G,EAAOpT,KAAK,MAAOgZ,EAAGmB,SAAS/G,EAAOpT,KAAK,MAAQ,EAAGmZ,MAAOgB,SAAS/G,EAAOpT,KAAK,UAAWiZ,OAAQkB,SAAS/G,EAAOpT,KAAK,WAAa,IAG7J,YAAA+tC,YAAA,WACC,OAAOpvC,KAAKg3B,UAGb,YAAAwB,6BAAA,sBACKxO,EAAOhqB,KACPqvC,EAAe30B,EAAGjG,OAAO,mBAE7B,GAA2B,MAAvB46B,EAAax0B,OAAgB,CAEhC,IAEIy0B,EAFS50B,EAAGjG,OAAO,QAEOkG,OAAO,KAAKC,QAAQ,kBAAkB,GAEhE8T,EAAqB1uB,KAAK2uC,iBAAiBhX,sBAAsB33B,KAAK+2B,WAEtE3c,EAAOpa,KAAK6uC,UACZt0B,EAAIH,EAAKG,EAAIH,EAAKI,MAAQ,EAC1BH,EAAID,EAAKC,EAAID,EAAKE,OAAS,EAAI,EAQ7Bi1B,EAAavvC,KAAKopB,mBAAmBja,SAAS,wCAC9CqgC,EAA2BxvC,KAAKopB,mBAAmBja,SAAS,yCAC5DsgC,EAAqBzvC,KAAKopB,mBAAmBja,SAAS,0CAGxD,EAAQ,EAAAmd,mBAAmBijB,EANT,IASlBG,EAAc,EAAApjB,mBAAmBkjB,EAdpB,GAoBjB,GALA,EAAQE,EAAc,EAAQA,EAAc,EAKxChhB,EAAmBxsB,OAAS,EAE9BwsB,EAAmBhtB,SAAQ,SAACiuC,GAC3B,IAAIC,EAAmB,EAAKxmB,mBAAmBmF,oBAAoBohB,GAE/DE,EAAwBD,EAAiB/vC,MAAMgjB,eACvB,MAAxB,EAAKmU,SAASlkB,QAAkB,EAAKkkB,SAASlkB,OAAOY,KAAKkW,yBAA2BgmB,EAAiBhwC,OACzGiwC,EAAwBA,EAAwB,KAAO,EAAKzmB,mBAAmBja,SAAS,+BAAiC,KAG1H,IAAIqoB,EAAY,EAAAlL,mBAAmBujB,EA9BrB,GAgCVrY,EAAY,IACf,EAAQA,UAKZ,CACE,IAAIsY,EAAmB,EAAAxjB,mBAAmBmjB,EAvC3B,GAwCf,EAAQK,EAAmB,EAAQA,EAAmB,EAGxD,GA1CqB,GA4CrB,IAAIC,EAA0BrhB,EAAmBxsB,OAAS,EAAI,EAAI,EAqClE,GAlCAotC,EAAiB30B,OAAO,QACtBC,QAAQ,uCAAuC,GAC/CvZ,KAAK,IAAKkZ,GACVlZ,KAAK,IAAKgZ,GACVhZ,KAAK,KAAM,GACXA,KAAK,QAAS,GACdA,KAAK,SAvDQ,IAuDYqtB,EAAmBxsB,OAAS6tC,IACrD1uC,KAAK,OAAQ,SACbA,KAAK,eAAgB,IACrBA,KAAK,SAvDa,WA0DpBiuC,EAAiB30B,OAAO,QACtBC,QAAQ,kCAAkC,GAC1CvZ,KAAK,IAAKkZ,EAAIy1B,GACd3uC,KAAK,IAAKgZ,EAAI,GAAe,GAC7BhZ,KAAK,YA3De,IA4DpBA,KAAK,cA7DY,cA8DjBA,KAAK,cAAe,QACpBwR,KAAK08B,GAEPl1B,GAtEe,GAyEfi1B,EAAiB30B,OAAO,QACtBC,QAAQ,oCAAoC,GAC5CvZ,KAAK,KAAMkZ,GACXlZ,KAAK,KAAMgZ,GACXhZ,KAAK,KAAMkZ,EAAI,GACflZ,KAAK,KAAMgZ,GACXhZ,KAAK,SA5Ea,WA6ElBA,KAAK,eAAgB,IAGpBqtB,EAAmBxsB,OAAS,EAE9B,I,eAASd,GACR,IAAIuuC,EAAuBjhB,EAAmBttB,GAC1CwuC,EAAmB,EAAKxmB,mBAAmBmF,oBAAoBohB,GAE/DE,EAAwBD,EAAiB/vC,MAAMgjB,eACvB,MAAxB,EAAKmU,SAASlkB,QAAkB,EAAKkkB,SAASlkB,OAAOY,KAAKkW,yBAA2BgmB,EAAiBhwC,OACzGiwC,EAAwBA,EAAwB,KAAO,EAAKzmB,mBAAmBja,SAAS,+BAAiC,KAI1HmgC,EAAiB30B,OAAO,QACtBC,QAAQ,iCAAiC,GACzCvZ,KAAK,gBAAiBsuC,GACtBtuC,KAAK,IAAKkZ,EAAIy1B,GACd3uC,KAAK,IAAKgZ,EAAI,GAAe,GAC7BhZ,KAAK,YAnGQ,GAoGbA,KAAK,cAhGU,cAiGfwR,KAAKg9B,GACLvmC,MAAM,SAAU,WAChBsU,GAAG,SAAS,SAAS9U,EAAO+R,GAAQmP,EAAKimB,yBAAyBL,MAEpEv1B,GA1Ga,GA6GTjZ,EAAIstB,EAAmBxsB,QAC1BotC,EAAiB30B,OAAO,QACtBC,QAAQ,oCAAoC,GAC5CvZ,KAAK,gBAAiBsuC,GACtBtuC,KAAK,KAAMkZ,EAAI,GACflZ,KAAK,KAAMgZ,GACXhZ,KAAK,KAAMkZ,EAAI,EAAQ,GACvBlZ,KAAK,KAAMgZ,GACXhZ,KAAK,SAjHW,WAkHhBA,KAAK,eAAgB,K,OAjChBD,EAAI,EAAGA,EAAIstB,EAAmBxsB,SAAUd,E,EAAxCA,QAuCTkuC,EAAiB30B,OAAO,QACtBC,QAAQ,iCAAiC,GACzCvZ,KAAK,IAAKkZ,EAAIy1B,GACd3uC,KAAK,IAAKgZ,EAAI,GAAe,GAC7BhZ,KAAK,YA/HS,GAgIdA,KAAK,cA5HW,cA6HhBwR,KAAK48B,GAEPp1B,GApIc,GAuIdi1B,EAAiB30B,OAAO,QACtBC,QAAQ,oCAAoC,GAC5CvZ,KAAK,KAAMkZ,EAAI,GACflZ,KAAK,KAAMgZ,GACXhZ,KAAK,KAAMkZ,EAAI,EAAQ,GACvBlZ,KAAK,KAAMgZ,GACXhZ,KAAK,SAzIa,WA0IlBA,KAAK,eAAgB,IAKxBiuC,EAAiB30B,OAAO,QACtBC,QAAQ,kCAAkC,GAC1CvZ,KAAK,IAAKkZ,EAAIy1B,GACd3uC,KAAK,IAAKgZ,EAAI,GAAe,GAC7BhZ,KAAK,YAjJe,IAkJpBA,KAAK,cAnJY,cAoJjBA,KAAK,cAAe,QACpBwR,KAAK,WAEPwH,GA5Je,GA+Jfi1B,EAAiB30B,OAAO,QACtBC,QAAQ,oCAAoC,GAC5CvZ,KAAK,KAAMkZ,GACXlZ,KAAK,KAAMgZ,GACXhZ,KAAK,KAAMkZ,EAAI,GACflZ,KAAK,KAAMgZ,GACXhZ,KAAK,SAlKa,WAmKlBA,KAAK,eAAgB,IAEvBiuC,EAAiB30B,OAAO,QACtBC,QAAQ,iCAAiC,GACzCvZ,KAAK,cAAe,qBACpBA,KAAK,IAAKkZ,EAAIy1B,GACd3uC,KAAK,IAAKgZ,EAAI,GAAe,GAC7BhZ,KAAK,YA5KU,GA6KfA,KAAK,cAzKY,cA0KjBwR,KAAK28B,GACLlmC,MAAM,SAAU,WAChBsU,GAAG,SAAS,SAAU9U,EAAO+R,GAAQmP,EAAKkmB,4BAE5ClwC,KAAKopB,mBAAmBN,2BAGxBumB,EAAa91B,UAIf,YAAA22B,uBAAA,sBAEKhiB,EAASluB,KAAKopB,mBAAmBT,oBAAoBU,cAAcrpB,KAAKS,cAAcb,MAStFyxB,GAPkBnD,EAAOC,SAOnBnuB,KAAKopB,mBAAmBsC,wBAAwBwC,EAAO6I,YAEjE/2B,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAK,EAAA+hB,sBAAuB,CAC/D9hB,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGtB,IAAIvH,EAAUnI,KAAKiiB,gBAAgB2B,OAAO,yCAC1Czb,EAAUA,EAAQ8tB,QAAQ,UAAW5E,EAAIxxB,MAAMgjB,gBAE/C7iB,KAAK0J,WAAWiG,QAAQxH,QAAUA,EAClCnI,KAAK0J,WAAWiG,QAAQ+D,KAAO2d,EAAIzxB,KAEXI,KAAK0J,WAAWiG,QAAS6hB,UAAUhjB,WAAU,SAAAkF,GACpE,IAAIsjB,EAAW9I,EAAOkhB,cAClBt8B,EAAS,KAEZA,EADsB,MAAnBkkB,EAASlkB,QAIuC,MAA/CkkB,EAASlkB,OAAOY,KAAKkW,uBAHhB,OAOCoN,EAASlkB,OAAOY,KAAKjT,cAIhC,EAAK2oB,mBAAmBliB,oBAAoB4L,EAAQob,EAAO6I,WAAW,SAACtsB,GAAevB,QAAQC,IAAIsB,UAQpG,YAAAwlC,yBAAA,SAAyBL,GACxBl1B,EAAGjG,OAAO,mBAAmB8E,SAC7BmB,EAAGjG,OAAO,8BAA8B8E,SAExC,IAAIyQ,EAAOhqB,KACPmwC,EAASnwC,KAAK6uC,UACd9zB,EAAML,EAAGjG,OAAO,QAGhB27B,EAAoB11B,EAAGjG,OAAO,sCACF,MAA5B27B,EAAkBv1B,SACrBu1B,EAAkB72B,SAClBvZ,KAAKopB,mBAAmBN,uBAIzB,IAAIunB,EAAmB31B,EAAGjG,OAAO,mCAAmCoG,OAAeC,UAG/Ew1B,EAA0B,IAAI,EAAA1nB,iBAAiB5oB,KAAKopB,mBAAoBrO,EAAK60B,GAAkB,EAAO5vC,KAAKiiB,gBAAiBjiB,KAAKoN,cACrIkjC,EAAMznB,SACN,IAAI0nB,EAAa71B,EAAGjG,OAAO,sCAIvB2F,EADkBM,EAAGjG,OAAO,sCAAsCoG,OAChDC,UAClB01B,EAAsBH,EAAgB71B,MAAQ,IAAM61B,EAAgB91B,EAAIH,EAAKG,GACjFg2B,EAAWlvC,KAAK,YAAa,aAAemvC,EAAc,OAE1D91B,EAAGjG,OAAO,6BAA6B8E,SACvCmB,EAAGjG,OAAO,+BAA+B8E,SACzC,IAAIk3B,EAAmF,MAA5DH,EAAMjnB,cAAcrpB,KAAK+2B,WAAWqY,cAAct8B,OAC7E,GAAI88B,EAAiBntB,mBAAqBziB,KAAKS,cAAcgiB,kBAA4C,MAAxBziB,KAAKg3B,SAASlkB,QAAkB29B,EAAsB,CAEtI,IAAMn2B,EAAS,GACTG,EAAW,GACXi2B,EAAqB,EAEvBxC,EAAQxzB,EAAGjG,OAAO,gEAAkEzU,KAAK2uC,iBAAiB5X,UAAY,MACxHpc,OAAO,KACPC,QAAQ,4BAA4B,GACpCvZ,KAAK,eAAgBrB,KAAK+2B,WAExB4Z,EAAe3wC,KAAKopB,mBAAmBja,SAAS,6BAC9CqL,EAAQ,EAAA8R,mBAAmBqkB,EAAcl2B,GAAiC,EAArBi2B,EAE3DxC,EAAMvzB,OAAO,QACXC,QAAQ,6BAA6B,GACrCvZ,KAAK,IAAK8uC,EAAO51B,EAAI41B,EAAO31B,MAAQ,GAAKA,GACzCnZ,KAAK,IAAK8uC,EAAO91B,EAAI81B,EAAO71B,OAAS,EAAIA,EAAS,GAClDjZ,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,QAASmZ,GACdnZ,KAAK,SAAUiZ,GACfjZ,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,SAAU,WACfA,KAAK,eAAgB,GAEvB6sC,EAAMvzB,OAAO,QACXC,QAAQ,6BAA6B,GACrCvZ,KAAK,IAAK8uC,EAAO51B,EAAI41B,EAAO31B,MAAQ,GAAKA,EAAQk2B,GACjDrvC,KAAK,IAAK8uC,EAAO91B,EAAI81B,EAAO71B,OAAS,EAAIG,EAAW,EAAI,GACxDpZ,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,YAAaoZ,EAAW,MAC7BpZ,KAAK,cAAeoZ,EAAW,MAC/B5H,KAAK89B,GACL/yB,GAAG,SAAS,SAAS9U,EAAO+R,GAAQmP,EAAK4mB,wBAAwBhB,WAE/D,GAAIA,EAAiBntB,mBAAqBziB,KAAKS,cAAcgiB,kBAA6C,MAAxBziB,KAAKg3B,SAASlkB,QAAkB9S,KAAKg3B,SAASlkB,OAAOY,KAAKkW,yBAA2BgmB,EAAiBhwC,KAAO,CAE7L0a,EAAS,GACTG,EAAW,GACXi2B,EAAqB,EAEvBxC,EAAQxzB,EAAGjG,OAAO,gEAAkEzU,KAAK2uC,iBAAiB5X,UAAY,MACxHpc,OAAO,KACPC,QAAQ,8BAA8B,GACtCvZ,KAAK,eAAgBrB,KAAK+2B,WAExB4Z,EAAe3wC,KAAKopB,mBAAmBja,SAAS,+BAC9CqL,EAAQ,EAAA8R,mBAAmBqkB,EAAcl2B,GAAiC,EAArBi2B,EAE3DxC,EAAMvzB,OAAO,QACXC,QAAQ,+BAA+B,GACvCvZ,KAAK,IAAK8uC,EAAO51B,EAAI41B,EAAO31B,MAAQ,GAAKA,GACzCnZ,KAAK,IAAK8uC,EAAO91B,EAAI81B,EAAO71B,OAAS,EAAIA,EAAS,GAClDjZ,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,QAASmZ,GACdnZ,KAAK,SAAUiZ,GACfjZ,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,SAAU,WACfA,KAAK,eAAgB,GAEvB6sC,EAAMvzB,OAAO,QACXC,QAAQ,+BAA+B,GACvCvZ,KAAK,IAAK8uC,EAAO51B,EAAI41B,EAAO31B,MAAQ,GAAKA,EAAQk2B,GACjDrvC,KAAK,IAAK8uC,EAAO91B,EAAI81B,EAAO71B,OAAS,EAAIG,EAAW,EAAI,GACxDpZ,KAAK,OAAQ,WACbA,KAAK,SAAU,WACfA,KAAK,YAAaoZ,EAAW,MAC7BpZ,KAAK,cAAeoZ,EAAW,MAC/B5H,KAAK89B,GACL/yB,GAAG,SAAS,SAAS9U,EAAO+R,GAAQmP,EAAK6mB,+BAI5C,IAAIC,EAAep2B,EAAGjG,OAAO,qEAAuEzU,KAAK+2B,UAAY,MACjHga,EAAmB,CAAEx2B,EAAGiB,SAASs1B,EAAazvC,KAAK,MAAOgZ,EAAGmB,SAASs1B,EAAazvC,KAAK,MAAQ,EAAGmZ,MAAOgB,SAASs1B,EAAazvC,KAAK,UAAWiZ,OAAQkB,SAASs1B,EAAazvC,KAAK,WAAa,GACpM0vC,EAAiBx2B,EAAIw2B,EAAiBx2B,EAAIi2B,EAC1C91B,EAAGjG,OAAO,8BAA8B8E,SACxC,IAAIy3B,EAAat2B,EAAGjG,OAAO,QAAQkG,OAAO,KAAKC,QAAQ,6BAA6B,GACpFo2B,EAAWr2B,OAAO,QAChBC,QAAQ,2BAA2B,GACnCvZ,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACvBA,KAAK,mBAAoB,OACzBA,KAAK,eAAgB,KACrBA,KACE,IACA,KAAO8uC,EAAO51B,EAAI41B,EAAO31B,OAAS,KAAO21B,EAAO91B,EAAI81B,EAAO71B,OAAS,GACpE,MAASy2B,EAAkB,GAAKZ,EAAO51B,EAAI41B,EAAO31B,QAAU,EAAI21B,EAAO51B,EAAI41B,EAAO31B,OAClF,KAAOu2B,EAAiB12B,EAAI02B,EAAiBz2B,OAAS,GACtD,IAAMy2B,EAAiBx2B,GAI3B,IAAM8d,EAAuB,GAAvBA,EAAkC,EACpCC,EAAS0Y,EAAWr2B,OAAO,KAAKC,QAAQ,mCAAmC,GAC/E0d,EAAO3d,OAAO,QACZC,QAAQ,sCAAsC,GAC9CvZ,KAAK,IAAK8uC,EAAO51B,EAAI41B,EAAO31B,MAAQ6d,EAAmB,GACvDh3B,KAAK,IAAK8uC,EAAO91B,EAAI81B,EAAO71B,OAAS,EAAI+d,EAAoB,GAC7Dh3B,KAAK,QAASg3B,GACdh3B,KAAK,SAAUg3B,GACfh3B,KAAK,OAAQ,EAAAwa,2BACfyc,EAAO3d,OAAO,QACZC,QAAQ,sCAAsC,GAC9CvZ,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,IACL,KAAO8uC,EAAO51B,EAAI41B,EAAO31B,MAAQ6d,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAO8X,EAAO91B,EAAI81B,EAAO71B,OAAS,EAAI+d,EAAoB,EAA0B,EAApBA,EAAyB,GAC/K,KAAO8X,EAAO51B,EAAI41B,EAAO31B,MAAQ6d,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAO8X,EAAO91B,EAAI81B,EAAO71B,OAAS,GAC1H,KAAO61B,EAAO51B,EAAI41B,EAAO31B,MAAQ6d,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAO8X,EAAO91B,EAAI81B,EAAO71B,OAAS,EAAI+d,EAAoB,EAAIA,EAAoB,IAI9Kr4B,KAAKopB,mBAAmBN,uBAGzB,YAAA8nB,wBAAA,SAAwB79B,GACvB/S,KAAKopB,mBAAmByJ,uBAAuB7yB,KAAK2uC,iBAAiB5X,UAAWhkB,EAAUnT,KAAMI,KAAK+2B,YAGtG,YAAA8Z,0BAAA,WACC7wC,KAAKopB,mBAAmB0J,yBAAyB9yB,KAAK2uC,iBAAiB5X,UAAW/2B,KAAK+2B,YAGzF,EAvfA,GAAa,EAAAE,oB,6HChBb,KACA,MADA,IAEA,QAGA,S,GAGA,O,uECJI,6BAAqE,YAAW,kB,8BAAX,+C,yBAgB/D,gCACE,YACF,kB,uBAFqD,wCACnD,qE,mDANJ,gCAAkC,4GAChC,gCAA6D,kBAAG,6BACgB,kBAAE,iBAElF,wBACA,kCAGF,iB,iCAP0B,kEAIhB,4D,mDAlBhB,4BAEE,8BAEA,4BACE,yBACE,4BACF,iBACF,iBACA,+BAEE,4BAEE,iCAUF,iBAEA,4BACE,+BAAsB,6EAASvtB,WAAA,UAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,iGACpB,4BACE,8BACF,iBACF,iBACF,iBACF,iBACF,iB,gCApCO,oDAWO,yDDJhB,iBA+BI,WAAqB9B,EAA2C8B,GAA3C,KAAA9B,mBAA2C,KAAA8B,aAT3D,KAAAunC,QAAkB,EAEvB,KAAA9oC,QAAkB,K,OAUlB,YAAAC,SAAA,WACIpI,KAAKkxC,aAAe,IAAI,EAAAhsC,SAG5B,YAAAu4B,SAAA,SAASx8B,GAAT,WACCjB,KAAKmxC,kBAAkBzvC,SAAQ,SAAA0vC,GAC3BA,EAAKxxC,OAASqB,IAChB,EAAKowC,sBAAwBD,OAKhC,YAAA3oC,eAAA,sBACIzI,KAAKmI,QAAU,KAEf,IAAI2K,EAAU9S,KAAW,OAAI,OAASA,KAAK8S,OAAOY,KAAKjT,cACvDT,KAAK4H,iBAAiBxB,oBAAqBpG,KAAK0pB,cAAc9pB,KAAMkT,EAAQ9S,KAAKqxC,sBAAsBzxC,MAAOsK,MAAM,SAAAwJ,GAChH,EAAKw9B,aAAazrC,KAAMiO,GACxB,EAAKhK,WAAWmD,UAChBrC,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAC,MAAA,SAAOD,GACCzK,KAAKmI,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAvD/C3O,GAAiC,4E,iCAAjCA,EAAiC,iyBChB9C,6BAEE,+BAuCF,kB,MAvCO,qD,2LDSP,GAKa,EAAAA,qC,gIEhBb,KAEA,MACA,MAOA,OAVA,IAcA,S,mICSQ,yD,6BAGE,oCAAqB,gCAArB,CAAqB,gCAArB,CAAqB,8BAArB,CAAqB,oBAArB,CAAqB,yB,mDA2BrB,gCAAyB,4FACvB,6BACF,kB,mDACA,gCAA0B,8FACxB,6BACF,kB,mDACA,gCAA0B,0FACxB,6BACF,kBDxCV,iBAoCI,WAAqB28B,EAAwBzW,EAAoD5U,EAAsC0P,GAAlH,KAAA2b,SAAwB,KAAAzW,uBAAoD,KAAA5U,eAAsC,KAAA0P,kBAzBvI,KAAAzP,aAAkC,KAElC,KAAAC,cAAmC,KAEnC,KAAA7M,cAA+B,KAE/B,KAAAkN,UAAoB,EAWpB,KAAAyT,QAAkB,KAKlB,KAAA1T,QAAgB,KAKZ1N,KAAK0N,QAAU,IAAI9L,KAEnB,IAAMsf,EAAMlhB,KAAK0N,QAAQyT,aACzBnhB,KAAKohB,QAAUphB,KAAK0N,QAAQ2T,iBAAmB,KAAQrhB,KAAK0N,QAAQ4T,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,E,OAG9H,YAAA9Y,SAAA,WAEIpI,KAAKsN,cAAgBtN,KAAKqR,OAAOigC,cACjCtxC,KAAKS,cAAgBT,KAAKqR,OAAO5Q,cAE5BT,KAAK8J,UACN9J,KAAKqN,aAAerN,KAAKsN,eAG7BtN,KAAKy9B,SAAUz9B,KAAKqR,SAGxB,YAAAvH,MAAA,WACI,MAAoC,iEAA3B9J,KAAKqR,OAAOqtB,YAGzB,YAAAla,iBAAA,WACIxkB,KAAK0N,QAAU,IAAI9L,KAAMA,KAAKC,MAAO7B,KAAKohB,WAG9C,YAAAhQ,YAAA,sBACQC,EAASvP,KAAKD,MAAOC,KAAKC,UAAW/B,KAAKqR,SAC9CA,EAAOigC,cAAgBtxC,KAAKmjB,gBAAgBlS,eAEhB,MAAvBjR,KAAK8O,iBACNuC,EAAOigC,cAAcljC,SAAWpO,KAAK8O,eAAesP,WAAWhQ,UAGnEpO,KAAKgiB,qBAAqB5Q,YAAaC,GAASnH,MAAM,SAAA0C,GAClD,EAAKmyB,aACLv0B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAgzB,SAAA,SAAUpsB,GAAV,WAoBmC,iEAA3BrR,KAAKqR,OAAOqtB,YAGZ1+B,KAAK8c,gBAAgBnF,qBAAsB3X,KAAKsN,cAAchN,WAAWV,KAAMI,KAAKS,cAAcb,MAAOsK,MAAM,SAAAuO,GAC3G,EAAKpL,aAAeoL,KAEpBjO,OAAM,SAAEC,GACRvB,QAAQC,IAAK,QAASsB,GACtB,EAAKC,MAAOD,OAOxB,YAAA8mC,cADA,WAEI,QAAMvxC,KAAK2N,UAWf,YAAA6jC,gBAAA,SAAiBC,GACRA,IAAmBzxC,KAAK2N,UACzB3N,KAAK0xC,oBAIb,YAAAC,UAAA,WACI3xC,KAAKuR,cAGF,YAAAwtB,QAAP,WACI/+B,KAAKyR,gBAGT,YAAAF,WAAA,sBACIvR,KAAKgiB,qBAAqBzQ,WAAYvR,KAAKqR,OAAO1G,KAAMT,MAAM,SAAA0C,GAC1D,EAAKe,UAAW,EACY,MAAvB,EAAKmB,gBACN,EAAKA,eAAe4P,eAAe,MAEvClU,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAgH,aAAA,sBACIzR,KAAKgiB,qBAAqBvQ,aAAczR,KAAKqR,OAAO1G,KAAMT,MAAM,SAAA0C,GAC5D,EAAKe,UAAW,EACY,MAAvB,EAAKmB,gBACN,EAAKA,eAAe4P,eAAe,MAEvClU,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAinC,iBAAA,WACIE,EAAEC,KAAM,CACJ7W,IAAK90B,IAAM,8BACX4rC,OAAQ,OACRp+B,KAAM,CAAElC,SAAUxR,KAAKqR,OAAO1G,KAC9BonC,QAAS,SAAUpvB,KAGnBqvB,OAAO,KAyCR,YAAAtnC,MAAP,SAAcD,GACNzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC3EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA/MlE/O,GAAoC,yJ,iCAApCA,EAAoC,yE,OAAA,M,kQAApC,qBAAe,sB,4jCC5B5B,4BAEI,4BACI,2BAAiC,YAAsB,iBAC5D,iBAEC,4BACE,0BACE,8BAA4B,+BAAgB,iBAC5C,8BAA4B,YAA6B,iBAC3D,iBAEA,2BACE,6BACA,+BAAmB,gEAAqB,4BAAW,EAAA8oB,sBAAnD,iBACF,iBAQE,6DAeA,2BACI,+BACI,6BAA0E,mBAC9E,iBACA,mCAA0G,gFAAsC,iBACpJ,iBAEA,2BACI,+BACI,8BAAyE,mBAC7E,iBACA,mCAA0G,+EAAqC,iBACnJ,iBAEA,8BACE,mCAGA,mCAGA,mCAGF,iBACJ,iBACJ,kB,MA7DyC,yDAML,gEAKT,iDAWjB,mDAiBY,mDAAqB,qCAOrB,mDAAqB,oCAIzB,+CAGA,gDAGA,kD,8jBDtClB,GAOa,EAAA9oB,wC,yHE5Bb,KAGA,MACA,MAIA,OACA,OATA,IAYA,S,0GCqCU,gCAAyB,4FACvB,6BACF,kB,mDACA,gCAA0B,8FACxB,6BACF,kB,mDACA,gCAA0B,0FACxB,6BACF,kB,0FDvCV,aAiBI,WAAqB+8B,EAAwBzW,EAAoD5U,GAA5E,KAAAqrB,SAAwB,KAAAzW,uBAAoD,KAAA5U,eALjG,KAAAO,UAAoB,E,OASpB,YAAAvF,SAAA,WACIpI,KAAKiyC,SAAWvc,OAAOC,OAAQ,GAAI31B,KAAKqR,SAG5C,YAAAD,YAAA,sBACIpR,KAAKgiB,qBAAqB5Q,YAAapR,KAAKqR,QAASnH,MAAM,SAAA0C,GACvD,EAAKqlC,SAAWvc,OAAOC,OAAQ,GAAI,EAAKtkB,QAExC,EAAKI,kBACLjH,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAMpB,YAAA8mC,cADA,WAEI,QAAMvxC,KAAK2N,UAWf,YAAA6jC,gBAAA,SAAiBC,GACRA,IAAmBzxC,KAAK2N,UACzB3N,KAAK0xC,oBAIb,YAAAC,UAAA,WACI3xC,KAAKuR,cAGF,YAAAwtB,QAAP,WACI/+B,KAAKyR,gBAGT,YAAAF,WAAA,sBACIvR,KAAKgiB,qBAAqBzQ,WAAYvR,KAAKqR,OAAO1G,KAAMT,MAAM,SAAA0C,GAC1D,EAAKe,UAAW,KAChBnD,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAgH,aAAA,sBACIzR,KAAKgiB,qBAAqBvQ,aAAczR,KAAKqR,OAAO1G,KAAMT,MAAM,SAAA0C,GAC5D,EAAKe,UAAW,EAEhB,EAAK0D,OAAS,EAAK4gC,YACnBznC,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAinC,iBAAA,WACIE,EAAEC,KAAM,CACJ7W,IAAK90B,IAAM,8BACX4rC,OAAQ,OACRp+B,KAAM,CAAElC,SAAUxR,KAAKqR,OAAO1G,KAC9BonC,QAAS,SAAUpvB,KAGnBqvB,OAAO,KAIf,YAAAvU,SAAA,SAAUpsB,GACNrR,KAAKqR,OAASA,GAGX,YAAA3G,MAAP,SAAcD,GACNzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC3EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCA9FlE9O,GAA6B,kH,iCAA7BA,EAA6B,gF,+CAA7B,qBAAe,sB,gkCCxB5B,4BACI,2BAAiC,YAAsB,iBACvD,4BAEI,8BAA4B,2BAAY,iBACxC,8BAAwC,uEAAxC,iBAEA,8BAA4B,gCAAiB,iBAC7C,8BAAwC,6EAAxC,iBAEA,+BAA4B,6BAAa,iBACzC,+BAAwC,wEAAxC,iBAEA,+BAA4B,kCAAkB,iBAC9C,+BAAwC,8EAAxC,iBAEA,+BAA4B,iCAAiB,iBAC7C,+BAAwC,iFAAxC,iBAEA,+BACI,6BAAkD,mBACtD,iBACA,gCAAkN,8EAC9M,gCACI,6BACJ,iBACA,gCACI,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBAEA,2BACI,+BACI,8BAA0E,mBAC9E,iBACA,mCAAoF,gFAA6D,iBACrJ,iBAEA,2BACI,+BACI,8BAAyE,mBAC7E,iBACA,mCAAoF,+EAA4D,iBACpJ,iBAEA,8BACE,mCAGA,mCAGA,mCAGF,iBAEJ,iBACJ,kB,MA5DqC,yDAIW,wDAA4B,uBAG5B,8DAAkC,uBAGlC,yDAA6B,uBAG7B,+DAAmC,uBAGnC,kEAAsC,uBAKlD,6KAAqL,kCAArL,CAAqL,uBAgBzH,kEAAqC,uBAOrC,gEAAoC,uBAIlH,+CAGA,gDAGA,kD,yMDrClB,GAMa,EAAAA,iC,glBEtBb,mBAAa,EAAAu2C,gBAUb,mBAAa,EAAAC,iBASb,+B,+CAEA,OAF2C,OAE3C,EAFA,CAA2CA,GAA9B,EAAAC,wBAIb,+B,+CAEA,OAF2C,OAE3C,EAFA,CAA2CD,GAA9B,EAAAE,wBAIb,+B,+CAQA,OARoC,OAQpC,EARA,CAAoCF,GAAvB,EAAAG,iBAUb,+B,+CAMA,OANuC,OAMvC,EANA,CAAuCH,GAA1B,EAAAI,oBAQb,mBAAa,EAAAC,mBAKb,mBAAa,EAAAC,YAKb,+B,+CAIA,OAJqC,OAIrC,EAJA,CAAqCN,GAAxB,EAAAO,mB,oHCzDb,KAEA,MACA,MAOA,OAVA,IAcA,S,mHCgCU,gCAAyB,4FACvB,6BACF,kB,mDACA,gCAA0B,8FACxB,6BACF,kB,mDACA,gCAA0B,0FACxB,6BACF,kB,0FDjCV,aA0BI,WAAqBja,EAAwBzW,EAAoD5U,EAAsC0P,GAAlH,KAAA2b,SAAwB,KAAAzW,uBAAoD,KAAA5U,eAAsC,KAAA0P,kBAfvI,KAAAnR,YAAmC,GACnC,KAAAgC,UAAoB,EAOpB,KAAAyT,QAAkB,KAKlB,KAAA1T,QAAgB,KAGZ1N,KAAK0N,QAAU,IAAI9L,KAEnB,IAAMsf,EAAMlhB,KAAK0N,QAAQyT,aACzBnhB,KAAKohB,QAAUphB,KAAK0N,QAAQ2T,iBAAmB,KAAQrhB,KAAK0N,QAAQ4T,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,E,OAG9H,YAAA9Y,SAAA,WAEIpI,KAAK2L,YAAc3L,KAAKqR,OAAOgB,KAE/BrS,KAAKy9B,SAAUz9B,KAAKqR,SAGxB,YAAAD,YAAA,sBACQC,EAASvP,KAAKD,MAAOC,KAAKC,UAAW/B,KAAKqR,SAE9CrR,KAAKgiB,qBAAqB5Q,YAAaC,GAASnH,MAAM,SAAA0C,GAClD,EAAKmyB,aACLv0B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAA+Z,iBAAA,WACIxkB,KAAK0N,QAAU,IAAI9L,KAAMA,KAAKC,MAAO7B,KAAKohB,WAG9C,YAAAqc,SAAA,SAAUpsB,KAMV,YAAAkgC,cADA,WAEI,QAAMvxC,KAAK2N,UAWf,YAAA6jC,gBAAA,SAAiBC,GACRA,IAAmBzxC,KAAK2N,UACzB3N,KAAK0xC,oBAIb,YAAAC,UAAA,WACI3xC,KAAKuR,cAGF,YAAAwtB,QAAP,WACI/+B,KAAKyR,gBAGT,YAAAF,WAAA,sBACIvR,KAAKgiB,qBAAqBzQ,WAAYvR,KAAKqR,OAAO1G,KAAMT,MAAM,SAAA0C,GAC1D,EAAKe,UAAW,KAChBnD,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAgH,aAAA,sBACIzR,KAAKgiB,qBAAqBvQ,aAAczR,KAAKqR,OAAO1G,KAAMT,MAAM,SAAA0C,GAC5D,EAAKe,UAAW,KAChBnD,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAinC,iBAAA,WACIE,EAAEC,KAAM,CACJ7W,IAAK90B,IAAM,8BACX4rC,OAAQ,OACRp+B,KAAM,CAAElC,SAAUxR,KAAKqR,OAAO1G,KAC9BonC,QAAS,SAAUpvB,KAGnBqvB,OAAO,KAyCR,YAAAtnC,MAAP,SAAcD,GACNzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC3EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCAnJlE7O,GAAwB,yJ,iCAAxBA,EAAwB,kE,+CAAxB,qBAAe,sB,ipCC5B5B,4BACI,2BAAiC,YAAsB,iBAEvD,4BACI,0BACE,4BACA,8BAAmB,gEAAqB,4BAAW,EAAA4oB,sBAAnD,iBACF,iBAEA,4CAKA,0BACI,+BACI,6BAAkD,mBACtD,iBACA,gCAAwO,8EACpO,iCACI,8BACJ,iBACA,iCACI,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBAEA,2BACI,+BACI,8BAA0E,mBAC9E,iBACA,mCAA0G,gFAAsC,iBACpJ,iBAEA,2BACI,+BACI,8BAAyE,mBAC7E,iBACA,mCAA0G,+EAAqC,iBACnJ,iBAEA,8BACE,mCAGA,mCAGA,mCAGF,iBACJ,iBACJ,kB,MAxDqC,yDAKR,iDAInB,yDAAgC,qBAQtB,mDAAqB,gJAArB,CAAqB,mCAiBnB,oDAAqB,qCAOrB,mDAAqB,oCAIzB,+CAGA,gDAGA,kD,gOD/BlB,GAOa,EAAA5oB,4B,+GE5Bb,KACA,MADA,IAKA,S,GAEA,OACA,M,uFCkBgC,gCAAuD,YAAc,kB,uBAAlC,6BAAoB,6C,yBAWvD,gCAAuE,YAAmB,kB,uBAA5C,6BAAyB,6C,mDAPnF,4BACI,+BACI,6BACJ,iBACA,4BACI,gCAA6C,sGACzC,wBACA,iCACJ,iBACJ,iBACJ,iB,iCALqD,mDAEjC,sD,mDApBxB,kCACI,4BACI,8BACI,4BACJ,iBACA,4BACI,+BAAkD,gGAAkB,8FAEhE,wBACA,iCACJ,iBACJ,iBACJ,iBACA,8BAWA,6BACI,+BACI,8BACJ,iBACA,6BACI,iCAAsD,kGAClD,yBACA,iCACI,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACA,6BACI,8BACI,iCAAwE,2FACpE,8BACJ,iBACJ,iBACJ,iBACJ,iB,mDAzC8D,8CAGtC,+CAIQ,2DAgBkC,gDAaR,mDD/C1E,iBAwCI,WAAqB4N,EAA4B4D,EAAsCzD,GAAlE,KAAAH,UAA4B,KAAA4D,eAAsC,KAAAzD,cAxBvF,KAAA/J,KAAe,KAKf,KAAA+L,YAAiD,GAKjD,KAAAoH,UAAoB,KAKpB,KAAA8nB,OAAiB,K,OAWjB,YAAAzyB,SAAA,sBACIpI,KAAKwJ,QAAQS,oBAAoB,GAAOC,MAAM,SAAArE,GAK1C,IADA,IAAIsE,EAAa,GACR/I,EAAI,EAAGA,EAAIyE,EAAM3D,SAAUd,EAE9B,EAAKuI,YAAYklB,iBAAiBhpB,EAAMzE,GAAGgJ,UAE7CD,EAAWhK,KAAK0F,EAAMzE,IAG1B,EAAKyE,MAAQsE,KAEbK,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAA8B,SAAA,SAAU3M,GAAV,WAEiB,MAARA,GAAgBA,EAAKsC,OAAS,EAC/BlC,KAAKwJ,QAAQgD,sBAAuB5M,GAAM,GAAQsK,MAAM,SAAAyB,GACpD,EAAKA,YAAcA,EACnB,EAAKoH,UAAY,QACjBvI,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIhBzK,KAAK2L,YAAc,GACnB3L,KAAK+S,UAAY,OAKzB,YAAAkxB,SAAA,WAEwB,aAAfjkC,KAAK66B,OACNyH,OAAOC,SAAS2B,KAAOh+B,IAAM,oCAAsClG,KAAKJ,KAAO,kBAAoBI,KAAK+S,UAEnF,SAAf/S,KAAK66B,SACXyH,OAAOC,SAAS2B,KAAOh+B,IAAM,kCAAoClG,KAAKJ,KAAO,kBAAoBI,KAAK+S,YAIvG,YAAArI,MAAP,SAAcD,GACNzK,KAAK0J,WAAa1J,KAAKoN,aAAamC,KAAM,EAAAwS,oBAAqB,CAAEtS,UAAU,IAC3EzP,KAAK0J,WAAWiG,QAAQxH,QAAU,EAAA4E,aAAaC,oBAAoBvC,I,iCArFlEvM,GAAmB,4G,iCAAnBA,EAAmB,82BChB5B,6BAeY,iC,MAAqB,8C,8RDLrC,GAMa,EAAAA,uB,6GElBb,S,OAIA,2B,OAKE,YAAA8iC,UAAA,SAAUC,EAAwBtvB,GACjC,IAAKsvB,IAAUtvB,EACR,OAAOsvB,EAGd,IAAI0R,EAAiC,GAKlC,OAJA3yC,KAAK4yC,2BAA2BjhC,EAAQghC,GAIjC1R,EAAMtvB,QAAO,SAAA4R,GAAQ,OAA8C,IAA9CovB,EAAsB3pC,QAAQua,EAAK3jB,UAGnE,YAAAgzC,2BAAA,SAA2BjhC,EAAyBghC,GAApD,WACChhC,EAAOjQ,SAAQ,SAAA2hC,GACd,EAAKnT,sBAAsBmT,EAAGsP,OAIhC,YAAAziB,sBAAA,SAAsBrV,EAAqB83B,GAA3C,WACCA,EAAsBxyC,KAAK0a,EAAKpa,eAEhCoa,EAAK9a,SAAS2B,SAAQ,SAAA6nB,GACrB,EAAK2G,sBAAsB3G,EAAOopB,O,iCAxBzBj2C,I,kDAAAA,EAAiB,U,EAJ9B,GAIa,EAAAA,qB,+GCRb,S,OAEA,2B,OAKI,YAAAskC,UAAA,SAAUrgC,GACN,OAAKA,EAIE,IAAIiB,KAAKjB,GAAMQ,UAHXR,G,iCAHNxG,I,oDAAAA,EAAmB,U,EAJhC,GAIa,EAAAA,uB,iHCNb,SACA,OACA,QAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,S,eAEM04C,EAAiB,CACnB,CACIC,KAAM,GACNC,UAAW,EAAAv3C,mBACXw3C,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,cACNC,UAAW,EAAAv3C,mBACXw3C,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,OACNC,UAAW,EAAAn1C,kBACXo1C,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,kBACNC,UAAW,EAAAl1C,2BACXm1C,YAAa,CAAC,EAAAG,mBAElB,CACIL,KAAM,eACNC,UAAW,EAAA50C,2BACX60C,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,iBACNC,UAAW,EAAAr0C,uBACXs0C,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,WACNC,UAAW,EAAAp0C,aACXq0C,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,8BACNC,UAAW,EAAA30C,oBACX40C,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,wBACNC,UAAW,EAAAv0C,wBACXw0C,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,iBACNC,UAAW,EAAAx1C,6BACXy1C,YAAa,CAAC,EAAAG,mBAElB,CACIL,KAAM,QACNC,UAAW,EAAA7zC,oBACX8zC,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,0BACNC,UAAW,EAAA5zC,sCACX6zC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,8BACNC,UAAW,EAAA1zC,+BACX2zC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,mBACNC,UAAW,EAAAxzC,yBACXyzC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,oBACNC,UAAW,EAAAzzC,qBACX0zC,YAAa,CAAC,EAAAE,mBAItB,2B,uCAOa73C,I,6DAAAA,IAAqB,UAJnB,CACP,CAAEi6B,QAAS,EAAA8d,iBAAkBC,SAAU,EAAAC,uBAC1C,SAJQ,CAAC,EAAA/4C,aAAag5C,SAAUV,IACvB,EAAAt4C,gB,EAFd,GAOa,EAAAc,yB,gEAAAA,EAAqB,mCALpB,EAAAd","file":"1.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedInputComponent } from './component/form-fields/localized-input/localized-input.component';\nimport { LocalizedTextComponent } from './component/form-fields/localized-text/localized-text.component';\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { CreateHierarchyTypeModalComponent } from './component/hierarchy/modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './component/hierarchy/modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './component/hierarchy/modals/create-geoobjtype-modal.component';\nimport { ManageAttributesModalComponent } from './component/hierarchy/geoobjecttype-management/manage-attributes-modal.component';\nimport { DefineAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component';\nimport { EditAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component';\nimport { ShapefileModalComponent } from './component/importer/modals/shapefile-modal.component';\nimport { AttributesPageComponent } from './component/importer/modals/attributes-page.component';\nimport { LocationPageComponent } from './component/importer/modals/location-page.component';\nimport { LocationProblemPageComponent } from './component/importer/modals/location-problem-page.component';\nimport { LocationProblemComponent } from './component/importer/modals/location-problem.component';\nimport { TermProblemPageComponent } from './component/importer/modals/term-problem-page.component';\nimport { TermProblemComponent } from './component/importer/modals/term-problem.component';\nimport { SpreadsheetModalComponent } from './component/importer/modals/spreadsheet-modal.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { TermOptionWidgetComponent } from './component/hierarchy/geoobjecttype-management/term-option-widget.component';\nimport { AttributeInputComponent } from './component/hierarchy/geoobjecttype-management/attribute-input.component';\nimport { EditTermOptionInputComponent } from './component/hierarchy/geoobjecttype-management/edit-term-option-input.component';\nimport { ManageTermOptionsComponent } from './component/hierarchy/geoobjecttype-management/manage-term-options.component';\nimport { GeoObjectTypeInputComponent } from './component/hierarchy/geoobjecttype-management/geoobjecttype-input.component';\nimport { ManageGeoObjectTypeModalComponent } from './component/hierarchy/modals/manage-geoobjecttype-modal.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { PublishModalComponent } from './component/master-list/publish-modal.component';\nimport { ExportFormatModalComponent } from './component/master-list/export-format-modal.component';\nimport { RequestTableComponent } from './component/crtable/request-table.component';\nimport { CreateUpdateGeoObjectDetailComponent } from './component/crtable/action-detail/create-update-geo-object/detail.component';\nimport { AddRemoveChildDetailComponent } from './component/crtable/action-detail/add-remove-child/detail.component';\nimport { SetParentDetailComponent } from './component/crtable/action-detail/set-parent/set-parent-detail.component';\nimport { GeoObjectSharedAttributeEditorComponent } from './component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component';\nimport { ManageVersionsModalComponent } from './component/geoobject-shared-attribute-editor/manage-versions-modal.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { GeoObjectEditorComponent } from './component/geoobject-editor/geoobject-editor.component';\nimport { GeoObjectEditorMapComponent } from './component/geoobject-editor-map/geoobject-editor-map.component';\nimport { SimpleEditControl } from './component/geoobject-editor-map/simple-edit-control/simple-edit-control.component';\nimport { CascadingGeoSelector } from './component/cascading-geo-selector/cascading-geo-selector';\nimport { ManageParentVersionsModalComponent } from './component/cascading-geo-selector/manage-parent-versions-modal.component';\nimport { ActionDetailModalComponent } from './component/crtable/action-detail/action-detail-modal.component';\nimport { DataImporterComponent } from './component/importer/dataimporter.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { PublishedMasterListHistoryComponent } from './component/master-list/published-master-list-history.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { JobConflictModalComponent } from './component/scheduled-jobs/conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './component/scheduled-jobs/conflict-widgets/reupload-modal.component';\nimport { ParentReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component';\nimport { TermReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component';\nimport { RowValidationProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component';\nimport { StepIndicatorComponent } from './component/scheduled-jobs/step-indicator.component';\nimport { ImportProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/import-problem-widget.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigModalComponent } from './component/synchronization-config/synchronization-config-modal.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\n\nimport { LocationManagerComponent } from './component/location-manager/location-manager.component';\nimport { ContextLayerModalComponent } from './component/location-manager/context-layer-modal.component';\n\nimport { GeoObjectAttributeCodeValidator } from './factory/form-validation.factory';\n\nimport { GeoObjectTypePipe } from './pipe/geoobjecttype.pipe';\nimport { GeoObjectAttributeExcludesPipe } from './pipe/geoobject-attribute-excludes.pipe';\nimport { ToEpochDateTimePipe } from './pipe/to-epoch-date-time.pipe';\nimport { RegistryService } from './service/registry.service';\nimport { TaskService } from './service/task.service';\nimport { HierarchyService } from './service/hierarchy.service';\nimport { SynchronizationConfigService } from './service/synchronization-config.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\nimport { ChangeRequestService } from './service/change-request.service';\nimport { IOService } from './service/io.service';\nimport { MapService } from './service/map.service';\nimport { GeoObjectTypeManagementService } from './service/geoobjecttype-management.service'\n\nimport { RegistryRoutingModule } from './registry-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\n\nimport '../rxjs-extensions';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\t//        ModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tTabsModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule,\n\t\tSharedModule,\n\t\tRegistryRoutingModule,\n    AccordionModule.forRoot()\n\t],\n\tdeclarations: [\n\t\tHierarchyComponent,\n\t\tRequestTableComponent,\n\t\tCreateUpdateGeoObjectDetailComponent,\n\t\tAddRemoveChildDetailComponent,\n\t\tSetParentDetailComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tShapefileModalComponent,\n\t\tAttributesPageComponent,\n\t\tLocationPageComponent,\n\t\tLocationProblemPageComponent,\n\t\tLocationProblemComponent,\n\t\tTermProblemPageComponent,\n\t\tTermProblemComponent,\n\t\tSpreadsheetModalComponent,\n\t\tGeoObjectTypePipe,\n\t\tGeoObjectAttributeCodeValidator,\n\t\tEditAttributeModalContentComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tLocalizedInputComponent,\n\t\tLocalizedTextComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tGeoObjectAttributeExcludesPipe,\n\t\tToEpochDateTimePipe,\n\t\tGeoObjectEditorMapComponent,\n\t\tSimpleEditControl,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tCascadingGeoSelector,\n\t\tManageParentVersionsModalComponent,\n\t\tActionDetailModalComponent,\n\t\tHierarchyComponent,\n\t\tDataImporterComponent,\n\t\tDataExportComponent,\n\t\t// Master List screens\n\t\tMasterListManagerComponent,\n\t\tMasterListComponent,\n\t\tMasterListHistoryComponent,\n\t\tPublishedMasterListHistoryComponent,\n\t\tPublishModalComponent,\n\t\tMasterListViewComponent,\n\t\t// Scheduled jobs\n\t\tExportFormatModalComponent,\n\t\tScheduledJobsComponent,\n\t\tJobComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tParentReferenceProblemWidgetComponent,\n\t\tTermReferenceProblemWidgetComponent,\n\t\tRowValidationProblemWidgetComponent,\n\t\tStepIndicatorComponent,\n\t\tImportProblemWidgetComponent,\n\t\tTaskViewerComponent,\n\t\t// Synchronization Config\n\t\tSynchronizationConfigManagerComponent,\n\t\tSynchronizationConfigModalComponent,\n\t\tSynchronizationConfigComponent,\n\t\tSyncDetailsComponent,\n\t\t// Location manager\n\t\tLocationManagerComponent,\n\t\tContextLayerModalComponent\n\t],\n\tproviders: [\n\t\tMapService,\n\t\tHierarchyService,\n\t\tLocalizationManagerService,\n\t\tChangeRequestService,\n\t\tIOService,\n\t\tGeoObjectTypeManagementService,\n\t\tRegistryService,\n\t\tTaskService,\n\t\tDatePipe,\n\t\tToEpochDateTimePipe,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigService\n\t],\n\tentryComponents: [\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tEditAttributeModalContentComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tShapefileModalComponent,\n\t\tSpreadsheetModalComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tManageParentVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tPublishModalComponent,\n\t\tExportFormatModalComponent,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tActionDetailModalComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigModalComponent,\n\t\tContextLayerModalComponent\n\t]\n})\nexport class RegistryModule { }\n","import { ChangeRequestService } from './change-request.service';\nimport { GeoObjectTypeManagementService } from './geoobjecttype-management.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tGeoObjectTypeManagementService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService\n];\n\nexport * from './change-request.service';\nexport * from './geoobjecttype-management.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';","import { LocalizedValue } from '@shared/model/core';\nimport { LocalizationService } from '@shared/service';\nimport { ImportConfiguration } from './io';\n\nexport const PRESENT: string = '5000-12-31'\n\nexport class TreeEntity {\n\tid: string;\n\tname: string;\n\thasChildren: boolean;\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\n\tconstructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n\t\tthis.code = code;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t}\n\tchildren: Term[] = [];\n\n\taddChild(term: Term) {\n\t\tthis.children.push(term);\n\t}\n}\n\nexport class GeoObject {\n\ttype: string;\n\tgeometry: any;\n\tproperties: {\n\t\tuid: string,\n\t\tcode: string,\n\t\tdisplayLabel: LocalizedValue,\n\t\ttype: string,\n\t\tstatus: string[],\n\t\tsequence: string\n\t\tcreateDate: string,\n\t\tlastUpdateDate: string,\n\t};\n}\n\nexport class GeoObjectType {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tgeometryType?: string;\n\tisLeaf: boolean;\n\tisGeometryEditable: boolean;\n\torganizationCode: string;\n\tattributes: Array<Attribute | AttributeTerm | AttributeDecimal> = [];\n\trelatedHierarchies?: string[];\n\tsuperTypeCode?: string;\n\tisAbstract?: boolean;\t\n\tcanDrag?: boolean;\n}\n\nexport class Task {\n\tid: string;\n\ttemplateKey: string;\n\tmsg: string;\n\ttitle: string;\n\tstatus: string;\n\tcreateDate: number;\n\tcompletedDate: number;\n}\n\n// export class Attribute {\n\n//   name: string;\n//   type: string;\n//   label: string;\n//   description: string;\n//   isDefault: boolean;\n// }\n\n// export class AttributeTerm extends Attribute {\n//     descendants: Attribute[];\n//     rootTerm: string;\n// }\n\nexport class GeoObjectOverTime {\n\n\tgeoObjectType: GeoObjectType;\n\n\tattributes: any;\n\n\tpublic constructor(geoObjectType: GeoObjectType, attributes: any) {\n\t\tthis.geoObjectType = geoObjectType;\n\t\tthis.attributes = attributes;\n\t}\n\n\tpublic getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n\t\tlet retVot = { startDate: date, endDate: null, value: null };\n\n\t\tconst time = date.getTime();\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.code === attrCode) {\n\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\tretVot.value = lService.create();\n\t\t\t\t}\n\n\t\t\t\tif (attr.isChangeOverTime) {\n\t\t\t\t\tlet values = this.attributes[attr.code].values;\n\n\t\t\t\t\tvalues.forEach(vot => {\n\n\t\t\t\t\t\tconst startDate = Date.parse(vot.startDate);\n\t\t\t\t\t\tconst endDate = Date.parse(vot.endDate);\n\n\t\t\t\t\t\tif (time >= startDate && time <= endDate) {\n\n\t\t\t\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\t\t\t\tretVot.value = JSON.parse(JSON.stringify(vot.value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (attr.type === 'term' && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n\t\t\t\t\t\t\t\tretVot.value = vot.value[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tretVot.value = vot.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tretVot.value = this.attributes[attr.code];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn retVot;\n\t}\n}\n\nexport class ValueOverTime {\n\tstartDate: string;\n\tendDate: string;\n\tvalue: any;\n\tremovable?: boolean;\n}\n\nexport class Attribute {\n\tcode: string;\n\ttype: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tisDefault: boolean;\n\trequired: boolean;\n\tunique: boolean;\n\tisChangeOverTime?: boolean;\n\tprecision?: number;\n\tscale?: number;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n\t\tthis.code = code;\n\t\tthis.type = type;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t\tthis.isDefault = isDefault;\n\t\tthis.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n\t\tthis.unique = unique;\n\t\tthis.isChangeOverTime = isChangeOverTime;\n\t}\n\n}\n\nexport class AttributeTerm extends Attribute {\n\t//descendants: Attribute[];\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n\n\trootTerm: Term = new Term(null, null, null);\n\n\ttermOptions: Term[] = [];\n\n\tsetRootTerm(term: Term) {\n\t\tthis.rootTerm = term;\n\t}\n}\n\nexport class AttributeDecimal extends Attribute {\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\n\t\tthis.precision = 32;\n\t\tthis.scale = 8;\n\t}\n}\n\nexport enum GeoObjectTypeModalStates {\n\t\"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n\t\"editAttribute\" = \"EDIT-ATTRIBUTE\",\n\t\"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n\t\"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n\t\"editTermOption\" = \"EDIT-TERM-OPTION\",\n\t\"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport class TreeNode {\n\tgeoObject: GeoObject;\n\thierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n\tchildren: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n\tparents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n\tstate: string;\n\tattribute: any;\n\ttermOption: any;\n}\n\nexport class PaginationPage {\n\tpageNumber: number;\n\tcount: number;\n\tpageSize: number;\n\tresults: any[];\n}\n\nexport class AbstractScheduledJob {\n\tjobId: string;\n\thistoryId: string;\n\tstage: string;\n\tstatus: string;\n\tauthor: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tworkProgress: number;\n\tworkTotal: number;\n\tstartDate: string;\n\tendDate: string;\n}\n\nexport class ScheduledJob extends AbstractScheduledJob {\n\timportedRecords: number;\n\tconfiguration: ImportConfiguration;\n\timportErrors: PaginationPage;\n\texportErrors: PaginationPage;\n\tproblems: PaginationPage;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n\tstepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n\texception: ServerException;\n\tobject: ImportErrorObject;\n\tobjectType: string;\n\tid: string;\n\tresolution: string;\n\tselected?: boolean;\n}\n\nexport class ServerException {\n\tattributes: ServerExceptionAttribute[];\n\ttype: string;\n\tmessage: string;\n}\n\nexport class ServerExceptionAttribute {\n\tvalue: string;\n\tkey: string;\n}\n\nexport class ImportErrorObject {\n\tgeoObject: GeoObjectOverTime;\n\tparents: HierarchyOverTime[];\n\tisNew: boolean;\n}\n\nexport class StepConfig {\n\tsteps: Step[];\n}\n\nexport class Step {\n\tlabel: string;\n\tcomplete?: boolean;\n\tenabled?: boolean;\n\tstatus?: string;\n}\n\nexport class MasterList {\n\toid: string;\n\ttypeCode: string;\n\tdisplayLabel: LocalizedValue;\n\tcode: string;\n\trepresentativityDate: Date;\n\tpublishingStartDate?: Date;\n\tpublishDate: Date;\n\tlistAbstract: string;\n\tprocess: string;\n\tprogress: string;\n\taccessConstraints: string;\n\tuseConstraints: string;\n\tacknowledgements: string;\n\tdisclaimer: string;\n\tcontactName: string;\n\torganization: string;\n\ttelephoneNumber: string;\n\temail: string;\n\thierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n\tleaf: boolean;\n\tfrequency: string;\n\tisMaster: boolean;\n\tvisibility: string;\n\twrite?: boolean;\n\tread?: boolean;\n\tversions?: MasterListVersion[]\n}\n\nexport class MasterListVersion {\n\tdisplayLabel: string;\n\toid: string;\n\ttypeCode: string;\n\torgCode: string;\n\tmasterlist: string;\n\tforDate: string;\n\tcreateDate: string;\n\tpublishDate: string;\n\tattributes: any[];\n\tisGeometryEditable: boolean;\n\tlocales?: string[];\n\tshapefile?: boolean;\n\tisAbstract?: boolean;\n\tsuperTypeCode?: string;\n}\n\nexport class HierarchyOverTime {\n\tcode: string;\n\tlabel: string;\n\ttypes: {\n\t\tcode: string;\n\t\tlabel: string;\n\t}[];\n\tentries: {\n\t\tstartDate: string;\n\t\tendDate: string;\n\t\tparents: { [k: string]: { text: string; geoObject: GeoObject } };\n\t}[];\n}\n\nexport enum ImportStrategy {\n\t\"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n\t\"NEW_ONLY\" = \"NEW_ONLY\",\n\t\"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport class MasterListByOrg {\n\toid: string;\n\tlabel: string;\n\twrite: boolean;\n\tlists: {\n\t\tlabel: string,\n\t\toid: string,\n\t\tcreateDate: string,\n\t\tlastUpdateDate: string,\n\t\tisMaster: boolean,\n\t\twrite: boolean,\n\t\tread: boolean,\n\t\tvisibility: string\n\t}[];\n}\n\nexport class SynchronizationConfig {\n\toid?: string;\n\ttype?: string;\n\tsystemLabel?: string;\n\torganization: string;\n\tsystem: string;\n\thierarchy: string;\n\tlabel: LocalizedValue;\n\tconfiguration: any;\n}\n\nexport class OrgSyncInfo {\n\tlabel: string;\n\tcode: string;\n\thierarchies: { label: string, code: string }[];\n\tsystems: { label: string, oid: string, type: string }[];\n};\n\nexport class ExportScheduledJob extends AbstractScheduledJob {\n\tstepConfig?: StepConfig;\n}\n\nexport class ContextLayer {\n\toid: string;\n\tdisplayLabel: string;\n\tactive: boolean;\n\tenabled: boolean;\n}\n\nexport class ContextLayerGroup {\n\toid: string;\n\tdisplayLabel: string;\n\tcontextLayers: ContextLayer[];\n}\n","import { GeoObjectType } from './registry';\n\nexport class ImportSheet {\n\tname: string;\n\tattributes: {\n\t\tboolean: string[];\n\t\tdate: string[];\n\t\tnumeric: string[];\n\t\ttext: string[];\n\t}\n}\n\nexport class Location {\n\tlabel: string;\n\tcode: string;\n\ttarget: string;\n\tmatchStrategy: string;\r\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: string;\n}\n\nexport class TermProblem {\n\tlabel: string;\n\tparentCode: string;\n\tmdAttributeId: string;\n\tattributeCode: string;\n\tattributeLabel: string;\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class LocationProblem {\n\tlabel: string;\n\ttype: string;\n\ttypeLabel: string;\n\tparent: string;\n\tcontext: { label: string, type: string }[];\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class Exclusion {\n\tcode: string;\n\tvalue: string;\n}\n\nexport class Synonym {\n\tlabel: string;\n\tsynonymId: string;\n\tvOid?: string;\n}\n\nexport class ImportConfiguration {\n\ttype: GeoObjectType;\n\tsheet: ImportSheet;\n\tdirectory: string;\n\tfilename: string;\n\thierarchy: string;\n\tpostalCode: boolean;\n\thasPostalCode: boolean;\n\tlocations: Location[];\n\tformatType: string;\n\tobjectType: string;\n\tlocationProblems: LocationProblem[];\n\ttermProblems: TermProblem[];\n\texclusions: Exclusion[];\n\thierarchies: { code: string, label: string }[];\n\tstartDate: string;\n\tendDate: string;\n\tisExternal: string;\n\texternalSystemId: string;\n\texternalIdAttributeTarget: string;\n}\n\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { ManageGeoObjectTypeModalState } from '@registry/model/registry';\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n\tmodalState: ManageGeoObjectTypeModalState;\r\n\tprivate modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n\tmodalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n\tconstructor() { }\r\n\r\n\tpublic getModalState(): ManageGeoObjectTypeModalState {\r\n\t\treturn this.modalState;\r\n\t}\r\n\r\n\tpublic setModalState(state: ManageGeoObjectTypeModalState): void {\r\n\t\tthis.modalState = state;\r\n\r\n\t\tthis.modalStateChangedSource.next(this.modalState);\r\n\t}\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { HierarchyType } from '@registry/model/hierarchy';\nimport { TreeEntity } from '@registry/model/registry';\nimport { EventService } from '@shared/service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetHierarchyTypes(types: any): Promise<HierarchyType[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('types', JSON.stringify(types));\n\n\t\treturn this.http\n\t\t\t.get<HierarchyType[]>(acp + '/cgr/hierarchytype/get-all', { params: params })\n\t\t\t.toPromise();\n\t}\n\n\taddChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<HierarchyType>(acp + '/cgr/hierarchytype/add', JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tinsertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<HierarchyType>(acp + '/hierarchy/insertBetweenTypes', JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremoveFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<HierarchyType>(acp + '/cgr/hierarchytype/remove', JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tcreateHierarchyType(htJSON: string): Promise<HierarchyType> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<HierarchyType>(acp + '/cgr/hierarchytype/create', JSON.stringify({ 'htJSON': htJSON }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tupdateHierarchyType(htJSON: string): Promise<HierarchyType> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<HierarchyType>(acp + '/cgr/hierarchytype/update', JSON.stringify({ 'htJSON': htJSON }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tdeleteHierarchyType(code: string): Promise<TreeEntity> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<TreeEntity>(acp + '/cgr/hierarchytype/delete', { 'code': code }, { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise()\n\t}\n\n\tsetInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<HierarchyType>(acp + '/hierarchy/setInherited', JSON.stringify({ 'hierarchyTypeCode': hierarchyTypeCode, 'inheritedHierarchyTypeCode': inheritedHierarchyTypeCode, 'geoObjectTypeCode': geoObjectTypeCode }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremoveInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<HierarchyType>(acp + '/hierarchy/removeInherited', JSON.stringify({ 'hierarchyTypeCode': hierarchyTypeCode, 'geoObjectTypeCode': geoObjectTypeCode }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n}\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n\ttrigger,\n\tstate,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\n\nimport { GeoObjectType, Attribute } from '@registry/model/registry';\nimport { HierarchyService } from '@registry/service';\nimport { ErrorHandler } from '@shared/component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component({\n\tselector: 'attribute-input',\n\ttemplateUrl: './attribute-input.component.html',\n\tstyleUrls: ['./attribute-input.css'],\n\tanimations: [\n\t\ttrigger('toggleInputs', [\n\t\t\tstate('none, void',\n\t\t\t\tstyle({ 'opacity': 0 })\n\t\t\t),\n\t\t\tstate('show',\n\t\t\t\tstyle({ 'opacity': 1 })\n\t\t\t),\n\t\t\ttransition('none => show', animate('300ms'))\n\t\t\t//   transition('show => none', animate('100ms'))\n\t\t])\n\t]\n})\nexport class AttributeInputComponent implements OnInit {\n\n\t@Input() disableCodeField: boolean = false;\n\t@Input() excludeDescription: boolean = false;\n\t@Input() isDecimal: boolean = false;\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\t@Output() attributeChange = new EventEmitter<Attribute>();\n\tmessage: string = null;\n\n\tstate: string = 'none';\n\n\tconstructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) {\n\t}\n\n\tngOnInit(): void {\n\n\t}\n\n\tngAfterViewInit() {\n\t\tthis.state = 'show';\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tngOnChanges() {\n\n\t}\n\n\tngOnDestroy() {\n\n\t}\n\n\thandleOnSubmit(): void {\n\n\t}\n\n\ttoggleIsUnique(): void {\n\t\tthis.attribute.unique = !this.attribute.unique;\n\t}\n\n\tanimate(): void {\n\t\tthis.state = \"none\";\n\t}\n\n\tonAnimationDone(event: AnimationEvent): void {\n\t\tthis.state = \"show\";\n\t}\n\n\tisValid(): boolean {\n\t\tif (this.attribute.code) {\n\n\t\t\t// if code has a space\n\t\t\tif (this.attribute.code.indexOf(\" \") !== -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.attribute.label.localeValues[0].value.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal) {\n\t\t\t\tconsole.log(this.attribute);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListByOrg } from '@registry/model/registry';\nimport { RegistryService, IOService } from '@registry/service';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n@Component({\n\tselector: 'publish-modal',\n\ttemplateUrl: './publish-modal.component.html',\n\tstyleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\tmessage: string = null;\n\tmaster: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonMasterListChange: Subject<MasterList>;\n\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n\treadonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\tedit: boolean = false;\n\n\tisNew: boolean = false;\n\n\tconstructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n\tngOnInit(): void {\n\n\t\tthis.onMasterListChange = new Subject();\n\n\t\tif (this.master == null || !this.readonly) {\n\t\t\tthis.iService.listGeoObjectTypes(true).then(types => {\n\n\t\t\t\tvar myOrgTypes = [];\n\t\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\t\tconst orgCode = types[i].orgCode;\n\t\t\t\t\tconst typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n\t\t\t\t\tif (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n\t\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.types = myOrgTypes;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.master = {\n\t\t\t\toid: null,\n\t\t\t\ttypeCode: '',\n\t\t\t\tdisplayLabel: this.lService.create(),\n\t\t\t\tcode: '',\n\t\t\t\trepresentativityDate: null,\n\t\t\t\tpublishingStartDate: null,\n\t\t\t\tpublishDate: null,\n\t\t\t\tlistAbstract: '',\n\t\t\t\tprocess: '',\n\t\t\t\tprogress: '',\n\t\t\t\taccessConstraints: '',\n\t\t\t\tuseConstraints: '',\n\t\t\t\tacknowledgements: '',\n\t\t\t\tdisclaimer: '',\n\t\t\t\tcontactName: '',\n\t\t\t\torganization: '',\n\t\t\t\ttelephoneNumber: '',\n\t\t\t\temail: '',\n\t\t\t\thierarchies: [],\n\t\t\t\tsubtypeHierarchies: [],\n\t\t\t\tleaf: false,\n\t\t\t\tfrequency: 'ANNUAL',\n\t\t\t\tisMaster: null,\n\t\t\t\tvisibility: null\n\t\t\t};\n\t\t}\n\t}\n\n\tinit(org: MasterListByOrg): void {\n\t\tthis.master.organization = org.oid;\n\t}\n\n\tgetIsDisabled(event): boolean {\n\t\tlet elClasses = event.target.classList;\n\t\tfor (let i = 0; i < elClasses.length; i++) {\n\t\t\tlet c = elClasses[i];\n\t\t\tif (c === 'disabled') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tonChange(): void {\n\n\t\tif (this.master.typeCode != null && this.master.typeCode.length > 0) {\n\t\t\tthis.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n\t\t\t\tthis.master.hierarchies = hierarchies;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.iService.getHierarchiesForSubtypes(this.master.typeCode, false).then(hierarchies => {\n\t\t\t\tthis.master.subtypeHierarchies = hierarchies;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.master.hierarchies = [];\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.createMasterList(this.master).then(response => {\n\n\t\t\tthis.onMasterListChange.next(response);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCancel(): void {\n\t\tthis.bsModalRef.hide()\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n        <h1 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h1>\n        <h1 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h1>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> ({{localeValue.locale}})\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange($event)\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.publishingStartDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishingStartDate\" name=\"publishingStartDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div *ngIf=\"master.subtypeHierarchies.length > 0\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> <localize key=\"masterlist.subtypeHierarchies\"></localize> </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let hierarchy of master.subtypeHierarchies\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\" [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '@shared/model/core';\n\n@Component( {\n    selector: 'localized-input',\n    templateUrl: './localized-input.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedInputComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedValue } from '@shared/model/core';\nimport { LocalizationService } from '@shared/service';\n\nimport { ManageVersionsModalComponent } from './manage-versions-modal.component';\n\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, PRESENT } from '@registry/model/registry';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component({\n\tselector: 'geoobject-shared-attribute-editor',\n\ttemplateUrl: './geoobject-shared-attribute-editor.component.html',\n\tstyleUrls: ['./geoobject-shared-attribute-editor.css'],\n\tproviders: [DatePipe]\n})\n\n/**\n * This component is shared between:\n * - crtable (create-update-geo-object action detail)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget\n * \n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit, OnChanges {\n\n\tprivate bsModalRef: BsModalRef;\n\n    /*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n\t@Input() preGeoObject: GeoObjectOverTime = null;\n\n\t/*\n * The state of the GeoObject being modified\n */\n\t@Input() postGeoObject: GeoObjectOverTime = null;\n\n\n\tcalculatedPreObject: any = {};\n\n\tcalculatedPostObject: any = {};\n\n\t@Input() geoObjectType: GeoObjectType;\n\n\t@Input() attributeExcludes: string[] = [];\n\n\t@Input() forDate: Date = new Date();\n\n\t@Input() readOnly: boolean = false;\n\n\t@Input() isNew: boolean = false;\n\n\t@Input() isEditingGeometries = false;\n\n\t@Input() isGeometryInlined = false;\n\n\t@ViewChild(\"geometryEditor\") geometryEditor;\n\n\t@Output() valid = new EventEmitter<boolean>();\n\n\tmodifiedTermOption: Term = null;\n\tcurrentTermOption: Term = null;\n\tisValid: boolean = true;\n\n\tgeoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n\t@ViewChild(\"attributeForm\") attributeForm;\n\n\tconstructor(private modalService: BsModalService, private lService: LocalizationService) {\n\n\t}\n\n\tngOnInit(): void {\n\n\t\tif (this.attributeExcludes != null) {\n\t\t\tthis.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n\t\t\tif (!this.isGeometryInlined) {\n\t\t\t\tthis.geoObjectAttributeExcludes.push(\"geometry\");\n\t\t\t}\n\t\t}\n\n\t\tlet geomAttr = null;\n\t\tfor (var i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tif (this.geoObjectType.attributes[i].code === 'geometry') {\n\t\t\t\tgeomAttr = this.geoObjectType.attributes[i];\n\t\t\t}\n\t\t}\n\t\tif (geomAttr == null) {\n\t\t\tlet geometry: Attribute = new Attribute(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n\t\t\tthis.geoObjectType.attributes.push(geometry);\n\t\t}\n\t}\n\n\tngAfterViewInit() {\n\t\tthis.attributeForm.statusChanges.subscribe(result => {\n\t\t\tthis.isValid = (result === \"VALID\" || result === \"DISABLED\");\n\n\t\t\tthis.valid.emit(this.isValid);\n\t\t});\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (changes['preGeoObject'] || changes['preGeoObject']) {\n\n\t\t\tthis.preGeoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(this.preGeoObject)).attributes); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\n\t\t\tif (this.postGeoObject == null) {\n\t\t\t\tthis.postGeoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(this.preGeoObject)).attributes); // Object.assign is a shallow copy. We want a deep copy.\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.postGeoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(this.postGeoObject)).attributes); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\t\t\t}\n\n\t\t\tthis.calculate();\n\t\t}\n\t\telse if (changes['forDate']) {\n\t\t\tthis.calculate();\n\t\t}\n\t}\n\n\tcalculate(): void {\n\t\tthis.calculatedPreObject = this.calculateCurrent(this.preGeoObject);\n\t\tthis.calculatedPostObject = this.calculateCurrent(this.postGeoObject);\n\n\t\tif (this.geometryEditor != null) {\n\t\t\tthis.geometryEditor.reload();\n\t\t}\n\t}\n\n\tcalculateCurrent(goot: GeoObjectOverTime): any {\n\t\tconst object = {};\n\n\t\tconst time = this.forDate.getTime();\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\t\t\tobject[attr.code] = null;\n\n\t\t\tif (attr.type === 'local') {\n\t\t\t\tobject[attr.code] = this.lService.create();\n\t\t\t}\n\n\t\t\tif (attr.isChangeOverTime) {\n\t\t\t\tlet values = goot.attributes[attr.code].values;\n\n\t\t\t\tvalues.forEach(vot => {\n\n\t\t\t\t\tconst startDate = Date.parse(vot.startDate);\n\t\t\t\t\tconst endDate = Date.parse(vot.endDate);\n\n\t\t\t\t\tif (time >= startDate && time <= endDate) {\n\n\t\t\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\t\t\tobject[attr.code] = {\n\t\t\t\t\t\t\t\tstartDate: this.formatDate(vot.startDate),\n\t\t\t\t\t\t\t\tendDate: this.formatDate(vot.endDate),\n\t\t\t\t\t\t\t\tvalue: JSON.parse(JSON.stringify(vot.value))\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (attr.type === 'term' && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n\t\t\t\t\t\t\tobject[attr.code] = {\n\t\t\t\t\t\t\t\tstartDate: this.formatDate(vot.startDate),\n\t\t\t\t\t\t\t\tendDate: this.formatDate(vot.endDate),\n\t\t\t\t\t\t\t\tvalue: vot.value[0]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tobject[attr.code] = {\n\t\t\t\t\t\t\t\tstartDate: this.formatDate(vot.startDate),\n\t\t\t\t\t\t\t\tendDate: this.formatDate(vot.endDate),\n\t\t\t\t\t\t\t\tvalue: vot.value\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tobject[attr.code] = goot.attributes[attr.code];\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.isChangeOverTime && object[attr.code] == null) {\n\t\t\t\tobject[attr.code] = {\n\t\t\t\t\tstartDate: null,\n\t\t\t\t\tendDate: null,\n\t\t\t\t\tvalue: \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn object;\n\t}\n\n\tformatDate(date: string): string {\n\t\tif (date === PRESENT) {\n\t\t\treturn this.lService.localize(\"changeovertime\", \"present\");\n\t\t}\n\n\t\treturn date;\n\t}\n\n\thandleChangeCode(e: any): void {\n\t\tthis.postGeoObject.attributes.code = this.calculatedPostObject['code'];\n\t\t//        \n\t\t//        console.log(this.calculatedPostObject['code'])\n\t\t//        console.log(e)\n\t}\n\n\tonManageAttributeVersions(attribute: Attribute): void {\n\t\tthis.bsModalRef = this.modalService.show(ManageVersionsModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\t// TODO: sending the properties like this is wrong\n\t\tthis.bsModalRef.content.geoObjectOverTime = this.postGeoObject;\n\t\tthis.bsModalRef.content.geoObjectType = this.geoObjectType;\n\t\tthis.bsModalRef.content.isNewGeoObject = this.isNew;\n\t\tthis.bsModalRef.content.attribute = attribute;\n\t\tthis.bsModalRef.content.onAttributeVersionChange.subscribe(versionObj => {\n\t\t\tthis.calculate();\n\t\t});\n\t\tthis.bsModalRef.content.tfInit();\n\t}\n\n\tonManageGeometryVersions(): void {\n\t\tlet geometry = null;\n\t\tfor (var i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tif (this.geoObjectType.attributes[i].code === 'geometry') {\n\t\t\t\tgeometry = this.geoObjectType.attributes[i];\n\t\t\t}\n\t\t}\n\n\t\tthis.onManageAttributeVersions(geometry);\n\t}\n\n\tisDifferentText(attribute: Attribute): boolean {\n\t\tif (this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value.trim() !== this.calculatedPreObject[attribute.code].value);\n\t}\n\n\tisDifferentValue(attribute: Attribute): boolean {\n\t\tif (this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value !== this.calculatedPreObject[attribute.code].value);\n\t}\n\n\tonSelectPropertyOption(event: any, option: any): void {\n\t\tthis.currentTermOption = JSON.parse(JSON.stringify(this.modifiedTermOption));\n\t}\n\n\tgetGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n\t\t\tlet attr: any = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.type === \"term\" && attr.code === termAttributeCode) {\n\n\t\t\t\tattr = <AttributeTerm>attr;\n\t\t\t\tlet attrOpts = attr.rootTerm.children;\n\n\t\t\t\tif (attr.code === \"status\") {\n\t\t\t\t\treturn Utils.removeStatuses(attrOpts);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn attrOpts;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisStatusChanged(post, pre) {\n\n\t\tif (pre != null && post == null) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (pre == null || post == null || pre.length == 0 || post.length == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar preCompare = pre;\n\t\tif (Array.isArray(pre)) {\n\t\t\tpreCompare = pre[0];\n\t\t}\n\n\t\tvar postCompare = post;\n\t\tif (Array.isArray(post)) {\n\t\t\tpostCompare = post[0];\n\t\t}\n\n\t\treturn preCompare !== postCompare;\n\t}\n\n\tgetTypeDefinition(key: string): string {\n\t\t// let attrs = this.geoObjectType.attributes;\n\n\n\t\t// attrs.attributes.forEach(attr => {\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.code === key) {\n\t\t\t\treturn attr.type;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getIsValid(): boolean {\n\t\treturn this.isValid;\n\t}\n\n\tpublic getGeoObject(): any {\n\t\treturn this.postGeoObject;\n\n\t\t//        // The front-end uses the 'yyyy-mm-dd' date format. Our backend expects dates in epoch format.\n\t\t//        var submitGO = JSON.parse( JSON.stringify( this.postGeoObject ) );\n\t\t//        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n\t\t//            var attr = this.geoObjectType.attributes[i];\n\t\t//\n\t\t//            if ( attr.type === \"date\" && this.postGeoObject.properties[attr.code] != null ) {\n\t\t//                var parts = this.postGeoObject.properties[attr.code].split( '-' );\n\t\t//                var date = new Date( parts[0], parts[1] - 1, parts[2] );\n\t\t//\n\t\t//                submitGO.properties[attr.code] = date.getTime();\n\t\t//            }\n\t\t//        }\n\t\t//\n\t\t//        return submitGO;\n\t}\n}\n","<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <!-- <div class=\"col-md-12\"> -->\n            <div *ngIf=\"preGeoObject\">\n                <div *ngIf=\"!this.isEditingGeometries\" class=\"row\"> \n                    <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    <div class=\"col-md-12\">\n                        <span class=\"text\"></span>\n                            <div class=\"panel\" style=\"box-shadow: none;\">\n                                <div class=\"panel-body\">\n                                    <ul class=\"list-group\">\n                                        <li class=\"list-group-item\" style=\"text-align:left; border: 1px solid #ddd;\" *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes\">\n                                            <h5 *ngIf=\"attr.code !== 'geometry'\">\n\n                                              <span *ngIf=\"attr.code === 'code'\">\n                                                <localize key=\"geoobject.code.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code === 'displayLabel'\">\n                                                <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\">\n                                                {{attr.label.localizedValue}}\n                                              </span>\n                                              \n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>\n                                            </h5>\n                                            \n                                            <h5 *ngIf=\"attr.code === 'geometry'\">\n                                              <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>                                              \n                                            </h5>\n                                            \n\n                                            <div *ngIf=\"attr.code === 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"calculatedPostObject[attr.code]\" (change)=\"handleChangeCode($event)\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew\" required> \n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'character' && attr.code !== 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [ngModel]=\"calculatedPostObject[attr.code].value\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n\n                                              <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentText(attr)\">\n                                                <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                              </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'local'\">\n                                              <ul class=\"list-group\" *ngIf=\"calculatedPostObject[attr.code].value != null\">\n                                                <li class=\"list-group-item\" *ngFor=\"let localeValue of calculatedPostObject[attr.code].value.localeValues; let i = index\">\n                                                  <h5>{{localeValue.locale}}</h5>\n                                                  <input disabled [required]=\"localeValue.locale === 'defaultLocale'\" type=\"text\" [ngModel]=\"localeValue.value\" [name]=\"'mod-' + attr.code + '-' + localeValue.locale\"> \n\n                                                  <p class=\"warning-text\" *ngIf=\"!isNew && calculatedPreObject[attr.code].value != null && localeValue.value != null && localeValue.value.trim() !== calculatedPreObject[attr.code].value.localeValues[i].value\">\n                                                    <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value.localeValues[i].value}}\n                                                  </p>\n                                                </li>\n                                              </ul>                                            \n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'date'\">\n                                                <input type=\"date\" [ngModel]=\"calculatedPostObject[attr.code].value | date:'yyyy-MM-dd'\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n                                                    \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value | date}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'boolean'\">\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"calculatedPostObject[attr.code].value\" disabled [value]=\"true\" id=\"mod-{{attr.code}}-true\" name=\"mod-{{attr.code}}-true\">\n                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                </label>\n\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"!calculatedPostObject[attr.code].value\" disabled [value]=\"false\" id=\"mod-{{attr.code}}-false\" name=\"mod-{{attr.code}}-false\">\n                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                </label>\n                                                \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'float'\">\n                                                <input disabled type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\"\n                                                    id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'integer'\">\n                                                <input type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\" disabled id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'term'\">\n                                                <select id=\"mod-{{attr.code}}\" name=\"mod-term-{{attr.code}}\" class=\"select-area\" style=\"float:none;\" disabled [(ngModel)]=\"calculatedPostObject[attr.code].value\">\n                                                    <option value=\"\" ></option>\n                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attr.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                </select>\n\n                                                <!-- \n                                                <p class=\"warning-text\" *ngIf=\"calculatedPreObject[attr.code].value && calculatedPostObject[attr.code].value !== calculatedPreObject[attr.code].value\">\n                                                -->\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isStatusChanged(calculatedPostObject[attr.code].value, calculatedPreObject[attr.code].value)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'geometry' && this.isGeometryInlined\">\n                                              <geoobject-editor-map #geometryEditor\n                                                [geometryType]=\"this.geoObjectType.geometryType\"\n                                                [readOnly]=\"true\"\n                                                [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                                                [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                                                [bboxCode]=\"this.preGeoObject.attributes.code\"\n                                                [bboxType]=\"this.geoObjectType.code\"\n                                                (onClickEdit)=\"this.onManageGeometryVersions()\"\n                                                [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                                              </geoobject-editor-map>\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.isChangeOverTime\" class=\"button-holder\" style=\"text-align:left;\" >\n                                              <button type=\"submit\" style=\"\" (click)=\"onManageAttributeVersions(attr)\" class=\"btn btn-primary\" role=\"button\">\n                                                <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                                              </button>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                    </div>\n                 </div>\n                 <div *ngIf=\"this.isEditingGeometries && !this.isGeometryInlined\">\n                   <!-- <div class=\"label-holder\">\n                     <label>\n                      <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                     </label>\n                   </div> -->\n                   <div class=\"\">\n                     <geoobject-editor-map #geometryEditor \n                       [geometryType]=\"this.geoObjectType.geometryType\"\n                       [readOnly]=\"true\"\n                       [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                       [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                       [bboxCode]=\"this.preGeoObject.attributes.code\"\n                       [bboxType]=\"this.geoObjectType.code\"\n                       (onClickEdit)=\"this.onManageGeometryVersions()\"\n                       [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                     </geoobject-editor-map>\n                   </div>\n                 </div>\n           </div>\n        <!-- </div> -->\n    </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '@shared/model/core';\n\n@Component( {\n    selector: 'localized-text',\n    templateUrl: './localized-text.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedTextComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n    </span>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\n\nimport { ChangeRequest, AbstractAction } from '@registry/model/crtable';\nimport { EventService } from '@shared/service';\nimport { GeoObject } from '@registry/model/registry';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\t  getAllActions( requestId: string ): Promise<AbstractAction[]> {\n        let params: HttpParams = new HttpParams();\n\n        if ( requestId != null ) {\n            params = params.set( 'requestId', requestId );\n\t\t}\n\t\t\n        this.eventService.start();\n\n        return this.http\n            .get<AbstractAction[]>( acp + '/changerequest/getAllActions', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\n//    fetchData( cb: any, requestId: string ): Promise<HttpResponse> {\n//        let params: HttpParams = new HttpParams();\n//\n//        if ( requestId != null ) {\n//            params = params.set( 'requestId', requestId );\n//        }\n//\n//        this.eventService.start();\n//\n//        return this.http\n//            .get( acp + '/changerequest/getAllActions', { params: params } )\n//            .finally(() => {\n//                this.eventService.complete();\n//            } )\n//            .toPromise()\n//            .then( response => {\n//                cb( response.json() );\n//\n//                return response;\n//            } )\n//    }\n\n    applyAction( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyAction', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\tapplyActionStatusProperties( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyActionStatusProperties', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\t\n    lockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/lockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/unlockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    getAllRequests(filter: string): Promise<ChangeRequest[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tparams = params.set('filter', filter );\n\n        return this.http.get<ChangeRequest[]>( acp + '/changerequest/get-all-requests', { params: params } )\n            .toPromise();\n    }\n\n    getRequestDetails( requestId: string ): Promise<ChangeRequest> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'requestId', requestId );\n\n        this.eventService.start();\n\n        return this.http.get<ChangeRequest>( acp + '/changerequest/get-request-details', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n\tconfirmChangeRequest( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/confirm-change-request', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n    execute( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/execute-actions', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    rejectAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/reject-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    approveAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/approve-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    submitChangeRequest( actions: string ): Promise<GeoObject> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'actions', actions )\n\n        this.eventService.start();\n\n        return this.http.post<GeoObject>( acp + '/cgr/submitChangeRequest', {actions: actions}, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from '@registry/model/io';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n\timportSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<ImportConfiguration>(acp + '/etl/import', JSON.stringify({ json: configuration }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcancelImport(configuration: ImportConfiguration): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/etl/cancel-import', JSON.stringify({ configuration: configuration }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\timportShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<ImportConfiguration>(acp + '/etl/import', JSON.stringify({ json: configuration }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tlistGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('includeAbstractTypes', includeAbstractTypes.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ label: string, code: string, orgCode: string }[]>(acp + '/cgr/geoobjecttype/list-types', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean): Promise<Location[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('hierarchyCode', hierarchyCode);\r\n\t\tparams = params.set('includeInheritedTypes', includeInheritedTypes.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Location[]>(acp + '/cgr/geoobjecttype/get-ancestors', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('includeTypes', includeTypes.toString());\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + '/cgr/geoobjecttype/get-hierarchies', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('includeTypes', includeTypes.toString());\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + '/cgr/geoobjecttype/get-subtype-hierarchies', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\ttext: text,\r\n\t\t\ttype: type,\r\n\t\t} as any;\r\n\r\n\t\tif (parent != null && hierarchy != null) {\r\n\t\t\tparams.parent = parent;\r\n\t\t\tparams.hierarchy = parent;\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/cgr/geoobject/suggestions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Synonym>(acp + '/geo-synonym/createGeoEntitySynonym', JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/geo-synonym/deleteGeoEntitySynonym', JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tgetTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('mdAttributeId', mdAttributeId);\r\n\t\tparams = params.set('text', text);\r\n\t\tparams = params.set('limit', limit);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ text: string, data: any }[]>(acp + '/uploader/getClassifierSuggestions', { params: params })\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tcreateTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Synonym>(acp + '/uploader/createClassifierSynonym', data, { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteTermSynonym(synonymId: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet data = JSON.stringify({ synonymId: synonymId });\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/uploader/deleteClassifierSynonym', data, { headers: headers })\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tcreateTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Term>(acp + '/cgr/geoobjecttype/addterm', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tremoveTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termCode': termCode }), { headers: headers })\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\r\n\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '@shared/service';\n\nimport { AllLocaleInfo } from '@registry/model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\nimport { LocationInformation } from '@registry/model/location-manager';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) {\r\n\t\t(mapboxgl as any).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNWE5bWkwazYwNGFtb3loOGxsbjR1In0.ZNEwT-pBnGookEb-BF_jQQ';\r\n\t}\r\n\r\n\troots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tif (typeCode != null) {\r\n\t\t\tparams = params.set('typeCode', typeCode);\r\n\t\t}\r\n\r\n\t\tif (hierarchyCode != null) {\r\n\t\t\tparams = params.set('hierarchyCode', hierarchyCode);\r\n\t\t}\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<LocationInformation>(acp + '/registrylocation/roots', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tselect(code: string, typeCode: string, childTypeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\tif (childTypeCode != null) {\r\n\t\t\tparams = params.set('childTypeCode', childTypeCode);\r\n\t\t}\r\n\r\n\t\tif (hierarchyCode != null) {\r\n\t\t\tparams = params.set('hierarchyCode', hierarchyCode);\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<LocationInformation>(acp + '/registrylocation/select', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n}","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport {\n\tGeoObject, GeoObjectType, Attribute, Term, MasterList, MasterListVersion, ParentTreeNode,\r\n\tChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage, MasterListByOrg\n} from '@registry/model/registry';\r\n\r\nimport { HierarchyType } from '@registry/model/hierarchy';\r\nimport { Progress } from '@shared/model/progress';\r\n\r\nimport { Organization } from '@shared/model/core';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n\tinit(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: string[] }> {\r\n\t\treturn this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: string[] }>(acp + '/cgr/init')\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\t// param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n\tgetGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\r\n\t\tif (types != null) {\r\n\t\t\tparams = params.set('types', JSON.stringify(types));\r\n\t\t}\r\n\r\n\t\tif (hierarchies != null) {\r\n\t\t\tparams = params.set('hierarchies', JSON.stringify(hierarchies));\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObjectType[]>(acp + '/cgr/geoobjecttype/get-all', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetParentGeoObjects(childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('childId', childId)\r\n\t\tparams = params.set('childTypeCode', childTypeCode)\r\n\t\tparams = params.set('parentTypes', JSON.stringify(parentTypes))\r\n\t\tparams = params.set('recursive', JSON.stringify(recursive));\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ParentTreeNode>(acp + '/cgr/geoobject/get-parent-geoobjects', { params: params })\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tgetChildGeoObjects(parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('parentId', parentId)\r\n\t\tparams = params.set('parentTypeCode', parentTypeCode)\r\n\t\tparams = params.set('childrenTypes', JSON.stringify(childrenTypes))\r\n\t\tparams = params.set('recursive', JSON.stringify(recursive));\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ChildTreeNode>(acp + '/cgr/geoobject/getchildren', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tnewGeoObjectInstance(typeCode: string): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/cgr/geoobject/newGeoObjectInstance', JSON.stringify({ 'typeCode': typeCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObjectType>(acp + '/cgr/geoobjecttype/create', JSON.stringify({ 'gtJSON': gtJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObjectType>(acp + '/cgr/geoobjecttype/update', JSON.stringify({ \"gtJSON\": gtJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteGeoObjectType(code: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/cgr/geoobjecttype/delete', JSON.stringify({ code: code }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\taddAttributeType(geoObjTypeId: string, attribute: Attribute): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/addattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateAttributeType(geoObjTypeId: string, attribute: Attribute): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/updateattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<boolean>(acp + '/cgr/geoobjecttype/deleteattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeName': attributeName }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\taddAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Term>(acp + '/cgr/geoobjecttype/addterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termJSON': term }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Term>(acp + '/cgr/geoobjecttype/updateterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termJSON': termJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termCode': termCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObject(id: string, typeCode: string): Promise<GeoObject> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('id', id)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObject>(acp + '/cgr/geoobject/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<number[]>(acp + '/cgr/geoobject/get-bounds', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\t\tparams = params.set('date', date);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<number[]>(acp + '/cgr/geoobject-time/get-bounds', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObject>(acp + '/cgr/geoobject/get-code', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetHierarchiesForGeoObject(code: string, typeCode: string): Promise<HierarchyOverTime[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<HierarchyOverTime[]>(acp + '/cgr/geoobject/get-hierarchies-over-time', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tgetGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string, date: string): Promise<GeoObject> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\ttext: text,\r\n\t\t\ttype: type,\r\n\t\t} as any;\r\n\r\n\t\tif (parent != null && hierarchy != null) {\r\n\t\t\tparams.parent = parent;\r\n\t\t\tparams.hierarchy = hierarchy;\r\n\t\t}\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams.date = date;\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObject>(acp + '/cgr/geoobject/suggestions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\ttext: text,\r\n\t\t\ttype: type,\r\n\t\t} as any;\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObject>(acp + '/cgr/geoobject/suggestions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/etl/get-active', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/etl/get-completed', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set(\"historyId\", historyId);\r\n\t\tparams = params.set(\"pageSize\", pageSize.toString());\r\n\t\tparams = params.set(\"pageNumber\", pageNumber.toString())\r\n\t\tparams = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ScheduledJob>(acp + '/etl/get-import-details', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set(\"historyId\", historyId);\r\n\t\tparams = params.set(\"pageSize\", pageSize.toString());\r\n\t\tparams = params.set(\"pageNumber\", pageNumber.toString())\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ScheduledJob>(acp + '/etl/get-export-details', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tresolveScheduledJob(historyId: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/etl/import-resolve', JSON.stringify({ historyId: historyId }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tsubmitValidationResolve(config: any): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/etl/validation-resolve', JSON.stringify({ config: config }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tsubmitErrorResolve(config: any): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/etl/error-resolve', JSON.stringify({ config: config }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>(acp + '/master-list/list-all', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListHistory(oid: string, versionType: string): Promise<MasterList> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\t\tparams = params.set('versionType', versionType);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList>(acp + '/master-list/versions', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetAllMasterListVersions(): Promise<MasterList[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList[]>(acp + '/master-list/list-all-versions', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListVersion(oid: string): Promise<MasterListVersion> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterListVersion>(acp + '/master-list/version', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetLocales(): Promise<string[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<string[]>(acp + '/localization/get-locales', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\t// let params: HttpParams = new HttpParams();\r\n\t\t// params = params.set( 'geoObjectCode', geoObjectCode );\r\n\t\t// params = params.set( 'geoObjectTypeCode', geoObjectTypeCode );\r\n\t\t// params = params.set( 'attributeName', attributeName );\r\n\r\n\t\t// return this.http\r\n\t\t//     .get<ValueOverTime[]>( acp + '/cgr/geoobject/getAttributeVersions', { params: params } )\r\n\t\t//     .toPromise();\r\n\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', geoObjectCode);\r\n\t\tparams = params.set('typeCode', geoObjectTypeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObjectOverTime>(acp + '/cgr/geoobject-time/get-code', { params: params })\r\n\t\t\t.toPromise();\r\n\r\n\t}\r\n\r\n\tnewGeoObjectOverTime(typeCode: string): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/cgr/geoobject-time/newGeoObjectInstance', JSON.stringify({ 'typeCode': typeCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// getAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string ): any[] {\r\n\t//     let test =[\r\n\t//         {\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":{\"localeValues\":[\r\n\t//             {\"locale\":\"defaultLocale\",\"value\":\"Anlong Veaeng\"}]}}\r\n\t//     ]\r\n\r\n\t//     // let test = [{\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":\"test\"}];\r\n\r\n\t//     return test;\r\n\t// }\r\n\r\n\r\n\tsetAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\tgeoObjectCode: geoObjectCode,\r\n\t\t\tgeoObjectTypeCode: geoObjectTypeCode,\r\n\t\t\tattributeName: attributeName,\r\n\t\t\tcollection: collection\r\n\r\n\t\t} as any;\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Response>(acp + '/cgr/geoobject/setAttributeVersions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateMasterList(list: MasterList): Promise<MasterList> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/master-list/create', JSON.stringify({ list: list }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateMasterListVersion(oid: string, forDate: string): Promise<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterListVersion>(acp + '/master-list/create-version', JSON.stringify({ oid: oid, forDate: forDate }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tpublishMasterListVersions(oid: string): Promise<{ job: string }> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<{ job: string }>(acp + '/master-list/publish-versions', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteMasterList(oid: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/master-list/remove', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tdeleteMasterListVersion(oid: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/master-list/remove-version', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tpublishMasterList(oid: string): Observable<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\treturn this.http.post<MasterListVersion>(acp + '/master-list/publish', JSON.stringify({ oid: oid }), { headers: headers });\r\n\t}\r\n\r\n\tgetMasterList(oid: string): Promise<MasterList> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList>(acp + '/master-list/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n\tapplyGeoObjectEdit(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = { parentTreeNode: parentTreeNode, geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n\t\tif (notes != null) {\r\n\t\t\tparams['notes'] = notes;\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/geoobject-editor/apply', JSON.stringify(params), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdata(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid,\r\n\t\t\tsort: sort\r\n\t\t} as any;\r\n\r\n\t\tif (pageNumber != null) {\r\n\t\t\tparams.pageNumber = pageNumber;\r\n\t\t}\r\n\r\n\t\tif (pageSize != null) {\r\n\t\t\tparams.pageSize = pageSize;\r\n\t\t}\r\n\r\n\t\tif (filter.length > 0) {\r\n\t\t\tparams.filter = filter;\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/master-list/data', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tvalues(oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[]): Promise<{ label: string, value: string }[]> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid,\r\n\t\t\tattributeName: attributeName,\r\n\t\t\tvalueAttribute: valueAttribute\r\n\t\t} as any;\r\n\r\n\t\tif (filter.length > 0) {\r\n\t\t\tparams.filter = filter;\r\n\t\t}\r\n\r\n\t\tif (value != null && value.length > 0) {\r\n\t\t\tparams.value = value;\r\n\t\t}\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<{ label: string, value: string }[]>(acp + '/master-list/values', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tpublishShapefile(oid: string): Promise<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid\r\n\t\t} as any;\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterListVersion>(acp + '/master-list/generate-shapefile', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tprogress(oid: string): Promise<Progress> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Progress>(acp + '/master-list/progress', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListsByOrg(): Promise<{ orgs: MasterListByOrg[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + '/master-list/list-org', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/master-list/get-publish-jobs', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n\tgetOrganizations(): Promise<Organization[]> {\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Organization[]>(acp + '/cgr/organizations/get-all')\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service';\n\nimport { PageResult } from '@shared/model/core'\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from '@registry/model/registry'\nimport { CustomAttributeConfig } from '@registry/model/sync'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<SynchronizationConfig>>(acp + '/synchronization-config/get-all', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tget(oid: string): Promise<SynchronizationConfig> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<SynchronizationConfig>(acp + '/synchronization-config/get', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\t\n\tgetCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<CustomAttributeConfig[]> {\n\n    let params: HttpParams = new HttpParams();\n    params = params.set('externalId', externalId);\n    params = params.set('geoObjectTypeCode', geoObjectTypeCode);\n\n    this.eventService.start();\n\n    return this.http\n      .get<CustomAttributeConfig[]>(acp + '/synchronization-config/get-custom-attr', { params: params })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\t\n\tgetConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n\n    let params: HttpParams = new HttpParams();\n    params = params.set('externalSystemId', externalSystemId);\n    params = params.set('hierarchyTypeCode', hierarchyTypeCode);\n\n    this.eventService.start();\n\n    return this.http\n      .get<CustomAttributeConfig[]>(acp + '/synchronization-config/get-config-for-es', { params: params })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n\tapply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<SynchronizationConfig>(acp + '/synchronization-config/apply', JSON.stringify({ config: config }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tedit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tlet params = {};\n\n\t\tif (oid != null) {\n\t\t\tparams = { oid: oid };\n\t\t}\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(acp + '/synchronization-config/edit', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tunlock(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/unlock', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\trun(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/run', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tgetJobs(oid:string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n//\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<ExportScheduledJob>>(acp + '/synchronization-config/get-jobs', { params: params })\n//\t\t\t.pipe(finalize(() => {\n//\t\t\t\tthis.eventService.complete();\n//\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { PaginationPage } from '@registry/model/registry';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n\tgetMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PaginationPage> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('orderBy', 'createDate');\r\n\t\tparams = params.set('pageNum', pageNum.toString());\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('whereStatus', whereStatus);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/tasks/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcompleteTask(taskId: string): Promise<Response> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/tasks/complete', JSON.stringify({ 'id': taskId }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tsetTaskStatus(taskId: string, status: string): Promise<Response> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/tasks/setTaskStatus', JSON.stringify({ 'id': taskId, 'status': status }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n}\r\n","import * as d3 from 'd3';\n\nexport function calculateTextWidth(text: string, fontSize: number): number {\n\tlet svg = d3.select(\"#svg\");\n\n\tlet textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n\tlet textEl = textCalcGroup.append(\"text\")\n\t\t.attr(\"x\", -5000)\n\t\t.attr(\"y\", -5000)\n\t\t.attr(\"font-size\", fontSize)\n\t\t.text(text);\n\n\tlet bbox = textEl.node().getBBox();\n\n\td3.select(\".g-text-calc\").remove();\n\n\treturn bbox.width;\n}\n\nexport function svgPoint(x: number, y: number) {\n\tlet svg: any = d3.select(\"#svg\").node();\n\tvar pt = svg.createSVGPoint();\n\n\tpt.x = x;\n\tpt.y = y;\n\n\treturn pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n\treturn point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n\treturn isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2)\n\t\t|| isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n\treturn isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2)\n\t\t&& isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n\treturn { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","import { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { SvgHierarchyType } from './svg-hierarchy-type';\n\nexport const DEFAULT_NODE_FILL = '#e6e6e6';\nexport const DEFAULT_NODE_BANNER_COLOR = '#A29BAB';\nexport const INHERITED_NODE_FILL = '#d4d4d4';\nexport const INHERITED_NODE_BANNER_COLOR = '#a0a0a0';\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n\tactive: boolean;\n\tlabel: string;\n}\n\nexport interface DropTarget {\n\tdropSelector: string;\n\tonDrag(dragEl: Element, dropEl: Element, event: any): void;\n\tonDrop(dragEl: Element, event: any): void;\n\t[others: string]: any;\n}\n\nexport interface SvgController {\n\tfindGeoObjectTypeByCode(gotCode: string): GeoObjectType;\n\tcalculateRelatedHierarchies(got: GeoObjectType): string[];\n\tfindHierarchyByCode(code: string): HierarchyType;\n\tlocalize(key: string): string;\n\tcalculateSvgViewBox(): void;\n\thandleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): void;\n\thandleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): void;\n\tprimarySvgHierarchy: SvgHierarchyType;\n\tremoveFromHierarchy(parentGotCode, gotCode, errCallback);\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n      \n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.hierarchy\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"configuration.hierarchy\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of configuration.hierarchies\" value={{hierarchy.code}}>{{hierarchy.label}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy, true ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild, SimpleChanges, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from '@registry/service';\n\nimport { Map, LngLatBounds, NavigationControl } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport * as mapboxgl from 'mapbox-gl';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor-map[geometryType]',\n    templateUrl: './geoobject-editor-map.component.html',\n    styleUrls: ['./geoobject-editor-map.component.css']\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. We will invoke this event with GeoJSON when the user makes an edit to the geometry.\n     */\n    @Output() geometryChange = new EventEmitter<any>();\n\n    /*\n     * Optional. If specified, we will diff based on this GeoJSON geometry.\n     */\n    @Input() preGeometry: any;\n\n    /*\n     * Optional. If we are read-only, this will be displayed as a layer. If we are not, it will be editable.\n     */\n    @Input() postGeometry: any;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    /*\n     * Optional. If specified, we will display an edit button on the map, and when it is clicked we will emit this event.\n     */\n    @Output() onClickEdit = new EventEmitter<void>();\n\n    @ViewChild( \"simpleEditControl\" ) simpleEditControl;\n\n    @ViewChild( \"mapDiv\" ) mapDiv;\n\n    map: Map;\n\n    editingControl: any;\n\n    constructor( private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            //this.registryService.getGeoObjectOverTime( \"22\", \"Province\" )\n            //.then( geoObject => {\n\n            ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\n\n            this.mapDiv.nativeElement.id = Math.floor( Math.random() * ( 899999 ) ) + 100000;\n\n            this.map = new Map( {\n                container: this.mapDiv.nativeElement.id,\n                style: 'mapbox://styles/mapbox/satellite-v9',\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            } );\n\n            this.map.on( 'load', () => {\n                this.initMap();\n            } );\n\n            this.map.on( 'draw.create', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.delete', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.update', () => {\n                this.onValidChange();\n            } );\n\n            //} ).catch(( err: HttpErrorResponse ) => {\n            //    this.error( err );\n            //} );\n        }, 10 );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['preGeometry'] || changes['postGeometry'] ) {\n            this.reload();\n        }\n    }\n\n    public reload(): void {\n        if ( this.map != null ) {\n            this.removeLayers();\n            this.addLayers();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    getIsValid(): boolean {\n        if ( !this.readOnly ) {\n            let isValid: boolean = false;\n\n            if ( this.editingControl != null ) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if ( featureCollection.features.length > 0 ) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    private onValidChange(): void {\n        this.geometryChange.emit( this.saveDraw() );\n    }\n\n    initMap(): void {\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            this.onValidChange();\n        } );\n\n\n        this.addLayers();\n\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.zoomToBbox();\n        }\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        if ( !this.readOnly ) {\n            this.enableEditing();\n        }\n        else {\n            this.addEditButton();\n        }\n\n        this.onValidChange();\n    }\n\n    addEditButton(): void {\n        this.simpleEditControl.editEmitter.subscribe( versionObj => {\n            this.onClickEdit.emit();\n        } );\n\n        this.map.addControl( this.simpleEditControl );\n    }\n\n    enableEditing(): void {\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: false,\n                    polygon: true,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: true,\n                    line_string: false,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: true,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        this.map.addControl( this.editingControl );\n\n        if ( this.postGeometry != null ) {\n            this.editingControl.add( this.postGeometry );\n        }\n    }\n\n    removeSource( prefix: string ): void {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.map.removeLayer( sourceName + \"-polygon\" );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.map.removeLayer( sourceName + \"-point\" );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\" ) {\n            this.map.removeLayer( sourceName + \"-line\" );\n        }\n\n        this.map.removeSource( sourceName );\n    }\n\n    removeLayers(): void {\n        if ( this.map.getSource( \"pre-geoobject\" ) ) {\n            this.removeSource( \"pre\" );\n        }\n        if ( this.map.getSource( \"post-geoobject\" ) ) {\n            this.removeSource( \"post\" );\n        }\n    }\n\n    addLayers(): void {\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.renderGeometryAsLayer( this.preGeometry, \"pre\", \"#EFA22E\" )\n        }\n        if ( this.readOnly && this.postGeometry != null && this.postGeometry !== \"\") {\n            this.renderGeometryAsLayer( this.postGeometry, \"post\", \"#3368EF\" );\n        }\n    }\n\n    renderGeometryAsLayer( geometry: any, prefix: string, color: string ) {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        this.map.addSource( sourceName, {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            // Polygon Layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-polygon\",\n                \"type\": \"fill\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7,\n                },\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            // Point layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-point\",\n                \"type\": \"circle\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": '#FFFFFF'\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.map.addLayer( {\n                \"id\": sourceName + \"-line\",\n                \"source\": sourceName,\n                \"type\": \"line\",\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            } );\n        }\n\n        ( <any>this.map.getSource( sourceName ) ).setData( geometry );\n    }\n\n    zoomToBbox(): void {\n        if ( this.bboxCode != null && this.bboxType != null ) {\n            if ( this.bboxDate == null ) {\n                this.registryService.getGeoObjectBounds( this.bboxCode, this.bboxType ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n            else {\n                this.registryService.getGeoObjectBoundsAtDate( this.bboxCode, this.bboxType, this.bboxDate ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n        }\n    }\n\n    saveDraw(): any {\n        if ( this.editingControl != null ) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if ( featureCollection.features.length > 0 ) {\n\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if ( this.geometryType === \"MULTIPOLYGON\" ) {\n                    let polygons = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPolygon' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                polygons.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            polygons.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: 'MultiPolygon'\n                    };\n                }\n                else if ( this.geometryType === \"MULTIPOINT\" ) {\n                    let points = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPoint' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                points.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            points.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: 'MultiPoint'\n                    };\n                }\n                else if ( this.geometryType === \"MULTILINE\" ) {\n                    let lines = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiLineString' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                lines.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            lines.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: 'MultiLineString'\n                    };\n                }\n                else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n\n            return this.postGeometry;\n        }\n\n        return this.postGeometry;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n        console.log( \"ERROR\", err );\n    }\n\n\n}\n","<div #mapDiv class=\"map-view-port text-left\" style=\"height:400px;\"></div>\n\n<simple-edit-control #simpleEditControl></simple-edit-control>","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { HierarchyOverTime } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { ManageParentVersionsModalComponent } from './manage-parent-versions-modal.component';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\n@Component( {\n\n    selector: 'cascading-geo-selector',\n    templateUrl: './cascading-geo-selector.html',\n} )\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n\n    @ViewChild( \"mainForm\" ) mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    constructor( private modalService: BsModalService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach( hierarchy => {\n            const object = {};\n            object['label'] = hierarchy.label;\n            object['code'] = hierarchy.code;\n\n            this.isValid = this.isValid && ( this.hierarchies.length > 0 );\n\n            hierarchy.entries.forEach( pot => {\n                const startDate = Date.parse( pot.startDate );\n                const endDate = Date.parse( pot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n                    let parents = [];\n\n                    hierarchy.types.forEach( type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if ( pot.parents[type.code] != null ) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push( parent );\n                    } );\n\n                    object['parents'] = parents;\n                }\n            } );\n\n            this.cHierarchies.push( object );\n\n        } );\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions( code: string ): void {\n\n        const hierarchy = this.hierarchies.find( h => h.code === code );\n\n        this.bsModalRef = this.modalService.show( ManageParentVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.init( hierarchy );\n        this.bsModalRef.content.onVersionChange.subscribe( hierarchy => {\n            this.calculate();\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\nimport { RegistryService, ChangeRequestService } from '@registry/service';\nimport { GeoObjectType, GeoObjectOverTime } from '@registry/model/registry';\n\n@Component({\n\tselector: 'submit-change-request',\n\ttemplateUrl: './submit-change-request.component.html',\n\tstyleUrls: []\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n\tgeoObjectType: GeoObjectType;\n\n\tgeoObjectTypes: GeoObjectType[] = [];\n\n\ttypeaheadLoading: boolean;\n\n\ttypeaheadNoResults: boolean;\n\n\tgeoObjectId: string = \"\";\n\n\treason: string = \"\";\n\n\tdataSource: Observable<any>;\n\n\t@ViewChild(\"attributeEditor\") attributeEditor;\n\n\t@ViewChild(\"geometryEditor\") geometryEditor;\n\n\t/*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n\tpreGeoObject: GeoObjectOverTime = null;\n\n\t/*\n\t * The state of the GeoObject after our Change Request has been approved \n\t */\n\tpostGeoObject: GeoObjectOverTime = null;\n\n\tisValid: boolean = false;\n\n\tgeoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n\tconstructor(private modalService: BsModalService, private registryService: RegistryService,\n\t\tprivate changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService) {\n\n\t\tthis.dataSource = Observable.create((observer: any) => {\n\t\t\tthis.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n\t\t\t\tobserver.next(results);\n\t\t\t});\n\t\t});\n\t}\n\n\tngOnInit(): void {\n\t\tthis.registryService.getGeoObjectTypes([], null).then(types => {\n\n\t\t\tvar myOrgTypes = [];\n\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\tconst type = types[i];\n\t\t\t\tconst orgCode = type.organizationCode;\n\t\t\t\tconst typeCode = type.superTypeCode != null && type.superTypeCode != '' ? type.superTypeCode : type.code;\n\t\t\t\t\n\t\t\t\tif (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.geoObjectTypes = myOrgTypes;\n\n\t\t\tthis.geoObjectTypes.sort((a, b) => {\n\t\t\t\tif (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n\t\t\t\telse if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n\t\t\t\telse return 0;\n\t\t\t});\n\n\t\t\tlet pos = this.getGeoObjectTypePosition(\"ROOT\");\n\t\t\tif (pos) {\n\t\t\t\tthis.geoObjectTypes.splice(pos, 1);\n\t\t\t}\n\n\t\t\t// this.currentGeoObjectType = this.geoObjectTypes[1];\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\n\n\tprivate onValidChange(newValid: boolean) {\n\t\tif (this.preGeoObject == null) {\n\t\t\tthis.isValid = false;\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n\t\t\tthis.isValid = false;\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n\t\t\tthis.isValid = false;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isValid = true;\n\t}\n\n\tprivate getGeoObjectTypePosition(code: string): number {\n\t\tfor (let i = 0; i < this.geoObjectTypes.length; i++) {\n\t\t\tlet obj = this.geoObjectTypes[i];\n\t\t\tif (obj.code === code) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tchangeTypeaheadLoading(e: boolean): void {\n\t\tthis.typeaheadLoading = e;\n\t}\n\n\ttypeaheadOnSelect(e: TypeaheadMatch): void {\n\t\tthis.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n\t\t\tthis.preGeoObject = geoObject;\n\t\t\tthis.postGeoObject = JSON.parse(JSON.stringify(this.preGeoObject)); // Object.assign is a shallow copy. We want a deep copy.\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tsubmit(): void {\n\n\t\tlet goSubmit: GeoObjectOverTime = this.attributeEditor.getGeoObject();\n\n\t\tif (this.geometryEditor != null) {\n\t\t\t//\t\t\tlet goGeometries: GeoObjectOverTime = this.geometryEditor.saveDraw();\n\t\t\t//            goSubmit.geometry = goGeometries.geometry;\n\t\t}\n\n\t\tlet actions = [{\n\t\t\t\"actionType\": \"geoobject/update\", // TODO: account for create\n\t\t\t\"apiVersion\": \"1.0-SNAPSHOT\", // TODO: make dynamic\n\t\t\t\"createActionDate\": new Date().getTime(),\n\t\t\t\"geoObject\": goSubmit,\n\t\t\t\"contributorNotes\": this.reason\n\t\t}]\n\n\t\tthis.changeRequestService.submitChangeRequest(JSON.stringify(actions))\n\t\t\t.then(geoObject => {\n\t\t\t\tthis.cancel();\n\n\t\t\t\tthis.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true });\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"change.request.success.message\");\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\tthis.isValid = false;\n\t}\n\n\tcancel(): void {\n\t\tthis.isValid = false;\n\t\tthis.preGeoObject = null;\n\t\tthis.postGeoObject = null;\n\t\tthis.geoObjectId = null;\n\t\tthis.geoObjectType = null;\n\t\tthis.reason = null;\n\t}\n\n\tpublic error(err: any): void {\n\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n}","<!-- <div class=\"new-admin-design-main\" style=\"height: 100vh;\">\n    <cgr-header></cgr-header> -->\n<loading-bar></loading-bar>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <div style=\"min-height:50vh;\">\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobjecttype.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\"\n                            [(ngModel)]=\"geoObjectType\" required>\n                            <!-- <option> <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize> </option> -->\n                            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}\n                            </option>\n                        </select>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\" style=\"overflow: visible;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobject.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <input type=\"text\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\"\n                            [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\"\n                            typeaheadOptionField=\"name\" class=\"form-control\" autocomplete=\"off\" required>\n\n                    </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"preGeoObject\">\n                <geoobject-shared-attribute-editor #attributeEditor (valid)=\"this.onValidChange($event)\"\n                    [geoObjectType]=\"this.geoObjectType\" [preGeoObject]=\"this.preGeoObject\"\n                    [(postGeoObject)]=\"this.postGeoObject\" [isGeometryInlined]=\"true\">\n                </geoobject-shared-attribute-editor>\n            </div>\n\n            <div class=\"row-holder\" style=\"z-index: 0;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"change.request.reason.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" name=\"reason-input\" required></textarea>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!attributeForm.valid\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { RegistryService } from '@registry/service';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError } from '@registry/model/registry';\n\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\n\n@Component( {\n    selector: 'geoobject-editor',\n    templateUrl: './geoobject-editor.component.html',\n    styleUrls: ['./geoobject-editor.component.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n    \n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n//    /*\n//     * GeoObject Geometry Editor\n//     */\n//    @ViewChild( \"geometryEditor\" ) geometryEditor;\n//\n//    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild( \"parentSelector\" ) parentSelector;\n\n    areParentsValid: boolean = true;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n    \n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor( private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService, \n        authService: AuthService ) {\n        \n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate( votArray, startDate ): any {\n      for (let i: number = 0; i < votArray.length; ++i)\n      {\n        if (votArray[i].startDate === startDate)\n        {\n          return votArray[i];\n        }\n      }\n      \n      return null;\n    }\n\n    setMasterListId( id: string ) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    setOnSuccessCallback( func: Function ) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew( typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        } );\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError( importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean ) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n        \n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0)\n        {\n          this.hierarchies = importError.object.parents;\n          this.areParentsValid = true;\n        }\n        else\n        {\n          this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.hierarchies = retJson.hierarchies;\n          } );\n          this.areParentsValid = false;\n        }\n        \n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        \n        this.submitFunction = () => {\n          let config = {\n            historyId : historyId,\n            importErrorId: importError.id,\n            resolution: 'APPLY_GEO_OBJECT',\n            parentTreeNode: this.hierarchies,\n            geoObject: this.goSubmit,\n            isNew: importError.object.isNew\n          }\n        \n          this.registryService.submitErrorResolve( config )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting( code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject( code, typeCode );\n        this.fetchGeoObjectType( typeCode );\n        this.fetchHierarchies( code, typeCode );\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject( code: string, typeCode: string ) {\n        this.registryService.getGeoObjectOverTime( code, typeCode ).then( geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( geoObject ) ).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n            //this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n            \n            this.goSubmit = this.goPropertiesPost;\n\n//            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then( locales => {\n            this.localizeService.setLocales( locales );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchGeoObjectType( code: string ) {\n        this.registryService.getGeoObjectTypes( [code], null )\n            .then( geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n                \n                if (this.goPropertiesPre != null)\n                {\n                  this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null)\n                {\n                  this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if ( !this.geoObjectType.isGeometryEditable ) {\n//                    this.areGeometriesValid = true;\n                }\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( err );\n                //                this.error( err );\n            } );\n    }\n\n    private fetchHierarchies( code: string, typeTypeCode: string ) {\n        this.registryService.getHierarchiesForGeoObject( code, typeTypeCode )\n            .then(( hierarchies: any ) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    getTypeAheadObservable( text, typeCode ) {\n        return Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( text, typeCode ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, ptn: ParentTreeNode ): void {\n        this.registryService.getGeoObjectByCode( e.item.code, ptn.geoObject.properties.type )\n            .then( geoObject => {\n\n                ptn.geoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    private onValidChange() {\n        if ( this.attributeEditor != null ) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n//        if ( this.geometryEditor != null ) {\n//            this.areGeometriesValid = this.geometryEditor.getIsValid();\n//        }\n        if ( this.parentSelector != null ) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n        \n//        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage( nextPage: number, force: boolean = false ): void {\n        if ( nextPage === this.tabIndex && !force ) {\n            return;\n        }\n\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n        \n        if (nextPage === 2)\n        {\n          this.isEditingGeometries = true;\n        }\n        else\n        {\n          this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if ( this.attributeEditor != null ) {\n          this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if ( this.parentSelector != null ) {\n          this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n          this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n          this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    public cancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n      if ( this.isValid ) {\n        this.bsModalRef.hide();\n    \n        this.persistModelChanges();\n        \n        if (this.submitFunction == null)\n        {\n          this.registryService.applyGeoObjectEdit( this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n        else\n        {\n          this.submitFunction();\n        }\n      }\n    }\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n            \n                <div *ngIf=\"!areParentsValid\" class=\"alert alert-danger\" role=\"alert\">\n                  <localize key=\"geoobject.editor.modal.parents.must.be.assigned.message\"></localize>                \n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '@shared/service';\n\nimport { Step, StepConfig } from '@registry/model/registry';\n\n\n@Component( { \n    selector: 'step-indicator',\n    templateUrl: './step-indicator.component.html',\n    styleUrls: ['./step-indicator.css']\n} )\nexport class StepIndicatorComponent {\n\n    @Input('steps')\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n\n    constructor( private localizeService: LocalizationService ) {\n\n        this._stepConfig = {\"steps\": []};\n    }\n\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n       \n    }\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, OnInit, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from 'rxjs';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\nimport * as d3 from 'd3';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal'\n\nimport { HierarchyType, HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\nimport { Organization } from '@shared/model/core';\nimport { RegistryService, HierarchyService } from '@registry/service';\n\nimport { SvgHierarchyType } from './d3/svg-hierarchy-type';\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection, isBboxPartiallyWithin } from './d3/svg-util';\nimport { SvgHierarchyNode } from './d3/svg-hierarchy-node';\nimport { SvgController, Instance, DropTarget } from './d3/svg-controller';\n\nconst TREE_SCALE_FACTOR_X: number = 1.8;\nconst TREE_SCALE_FACTOR_Y: number = 1.8;\n\n@Component({\n\n\tselector: 'hierarchies',\n\ttemplateUrl: './hierarchy.component.html',\n\tstyleUrls: ['./hierarchy.css']\n})\nexport class HierarchyComponent implements OnInit, SvgController {\n\n\tuserOrganization: string = null;\n\n\tprimarySvgHierarchy: SvgHierarchyType;\n\tcurrentHierarchy: HierarchyType = null;\n\n\tinstance: Instance = new Instance();\n\thierarchies: HierarchyType[];\n\torganizations: Organization[];\n\tgeoObjectTypes: GeoObjectType[] = [];\n\n\thierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n\ttypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n\tfilter: string = '';\n\tfilteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n\tfilteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\t@ViewChild('searchInput', { static: true }) searchInput: ElementRef;\n\n\thierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n\tgeoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n\t_opened: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n    /*\n     * Template for tree node menu\n     */\n\t@ViewChild('nodeMenu') public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n\t@ViewChild('leafMenu') public leafMenuComponent: ContextMenuComponent;\n\n    /* \n     * Currently clicked on id for delete confirmation modal \n     */\n\tcurrent: any;\n\n\tprivate root: any;\n\n\thierarchyService: HierarchyService;\n\n\tlocalizeService: LocalizationService;\n\n\toptions = {\n\t\t//\t\t  allowDrag: (any) => node.isLeaf,\n\t\t//\t\t  allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n\t\t// return true / false based on element, to.parent, to.index. e.g.\n\t\t//\t\t\t    return parent.hasChildren;\n\t\t//\t\t\t  },\n\t\tdisplayField: \"label\",\n\t\tactionMapping: {\n\t\t\tmouse: {\n\t\t\t\tclick: (tree: any, node: any, $event: any) => {\n\t\t\t\t\tthis.treeNodeOnClick(node, $event);\n\t\t\t\t},\n\t\t\t\tcontextMenu: (tree: any, node: any, $event: any) => {\n\t\t\t\t\tthis.handleOnMenu(node, $event);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmouse: {\n\t\t\t//\t            drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n\t\t\t//\t              console.log('drag', from, to); // from === {name: 'first'}\n\t\t\t//\t              // Add a node to `to.parent` at `to.index` based on the data in `from`\n\t\t\t//\t              // Then call tree.update()\n\t\t\t//\t            }\n\t\t}\n\t};\n\n\n\n\tconstructor(hierarchyService: HierarchyService, private modalService: BsModalService,\n\t\tprivate contextMenuService: ContextMenuService, private changeDetectorRef: ChangeDetectorRef,\n\t\tlocalizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n\n\t\t// this.admin = authService.isAdmin();\n\t\t// this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\t// this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\t\tthis.hierarchyService = hierarchyService;\n\t\tthis.localizeService = localizeService;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.refreshAll(null);\n\n\t\tfromEvent(this.searchInput.nativeElement, 'keyup').pipe(\n\n\t\t\t// get value\n\t\t\tfilter(Boolean),\n\t\t\tdebounceTime(500),\n\t\t\tdistinctUntilChanged(),\n\t\t\ttap(() => {\n\t\t\t\tthis.onFilterChange();\n\t\t\t})\n\t\t\t// subscription for response\n\t\t).subscribe();\n\t}\n\n\tlocalize(key: string): string {\n\t\treturn this.localizeService.decode(key);\n\t}\n\n\tprivate renderTree(): void {\n\t\tif (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length == 0) {\n\t\t\td3.select(\"#svg\").remove();\n\t\t\tthis.geoObjectTypes.forEach((got: GeoObjectType) => {\n        got.canDrag = true;\n      });\n\t\t\treturn;\n\t\t}\n\n\t\td3.select(\".g-context-menu\").remove();\n\t\td3.select(\".hierarchy-inherit-button\").remove();\n\t\td3.select(\".g-hierarchy-got-connector\").remove();\n\n\t\tlet overflowDiv: any = d3.select(\"#overflow-div\").node();\n\t\tlet scrollLeft = overflowDiv.scrollLeft;\n\t\tlet scrollRight = overflowDiv.scrollRight;\n\n\t\tlet svg = d3.select(\"#svg\");\n\n\t\tif (svg.node() == null) {\n\t\t\tsvg = d3.select(\"#svgHolder\").append(\"svg\");\n\t\t\tsvg.attr(\"id\", \"svg\");\n\t\t}\n\n\t\tthis.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService);\n\t\tthis.primarySvgHierarchy.render();\n\n\t\tthis.calculateSvgViewBox();\n\n\t\tlet overflowDiv2: any = d3.select(\"#overflow-div\").node();\n\t\toverflowDiv2.scrollLeft = scrollLeft;\n\t\toverflowDiv2.scrollRight = scrollRight;\n\n\t\tthis.registerSvgHandlers();\n\t\t\n\t\tthis.geoObjectTypes.forEach((got: GeoObjectType) => {\n      got.canDrag = this.calculateCanDrag(got);\n    });\n\t}\n\n\tcalculateSvgViewBox(): void {\n\t\tlet svg: any = d3.select(\"#svg\");\n\t\tlet svgNode: any = svg.node();\n\n\t\tlet { x, y, width, height } = svgNode.getBBox();\n\n\t\tconst xPadding = 30;\n\t\tconst yPadding = 40;\n\t\tsvg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n\t\twidth = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n\t\theight = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n\t\td3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n\t\t//d3.select(\"#svgHolder\").style(\"height\", height + \"px\"); \n\t}\n\t\n\tcalculateCanDrag(got: GeoObjectType): boolean {\n\t  let hierarchyComponent = this;\n\t\n\t  if (this.primarySvgHierarchy != null)\n\t  {\n\t    if (this.primarySvgHierarchy.getNodeByCode(got.code) != null)\n      {\n        return false;\n      }\n      \n      if (got.isAbstract)\n      {\n        let isChildOnGraph = false;\n      \n        this.geoObjectTypes.forEach((child: GeoObjectType) => {\n          if (child.superTypeCode === got.code)\n          {\n            if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null)\n            {\n              isChildOnGraph = true;\n            }\n          }\n        });\n        \n        if (isChildOnGraph)\n        {\n          return false;\n        }\n      }\n      else if (got.superTypeCode != null)\n      {\n        if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null)\n        {\n          return false;\n        }\n      }\n\t  }\n\t  else\n\t  {\n\t    return false;\n\t  }\n\t  \n\t  return true;\n\t}\n\n\tcalculateRelatedHierarchies(got: GeoObjectType): string[] {\n\t\tlet relatedHiers = [];\n\n\t\tfor (let i = 0; i < this.hierarchies.length; ++i) {\n\t\t\tlet hierarchyType = this.hierarchies[i];\n\n\t\t\tif (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n\t\t\t\tlet d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n\t\t\t\tlet found = d3Hierarchy.find((node) => {\n\t\t\t\t\treturn node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n\t\t\t\t});\n\n\t\t\t\tif (found) {\n\t\t\t\t\trelatedHiers.push(hierarchyType.code);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn relatedHiers;\n\t}\n\t\n\tprivate registerDragHandlers(): any {\n\t\tlet that = this;\n\n\t\tlet dropTargets: DropTarget[] = [];\n\n\t\t// Empty Hierarchy Drop Zone\n\t\tdropTargets.push({\n\t\t\tdropSelector: \".drop-box-container\", onDrag: function(dragEl: Element, dropEl: Element) {\n\t\t\t\tif (this.dropEl != null) {\n\t\t\t\t\tthis.dropEl.style(\"border-color\", null);\n\t\t\t\t\tthis.dropEl = null;\n\t\t\t\t}\n\n\t\t\t\tif (dropEl != null) {\n\t\t\t\t\tlet emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n\t\t\t\t\tif (emptyHierarchyDropZone != null) {\n\t\t\t\t\t\tthis.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, onDrop: function(dragEl: Element) {\n\t\t\t\tif (this.dropEl != null) {\n\t\t\t\t\tthis.dropEl.style(\"border-color\", null);\n\t\t\t\t\tthat.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n\t\t\t\t\tthis.dropEl = null;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// SVG GeoObjectType Drop Zone\n\t\tdropTargets.push({\n\t\t\tdropSelector: \".svg-got-body-rect\", onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n\t\t\t\tthis.clearDropZones();\n\n\t\t\t\tlet lastDropEl = this.dropEl;\n\n\t\t\t\t// translate page to SVG co-ordinate\n\t\t\t\tlet svg: any = d3.select(\"#svg\").node();\n\n\t\t\t\tif (svg == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n\t\t\t\t// Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n\t\t\t\t// we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones. \n\t\t\t\tthat.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n\t\t\t\t\tif (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n\t\t\t\t\t\tthis.dropEl = d3.select('.g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\"' + node.data.geoObjectType + '\"]');\n\t\t\t\t\t\tnode.data.activeDropZones = true;\n\n\t\t\t\t\t\tif (node.parent == null) {\n\t\t\t\t\t\t\tnode.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnode.data.activeDropZones = false;\n\n\t\t\t\t\t\tif (node.parent == null) {\n\t\t\t\t\t\t\tnode.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") != this.dropEl.attr(\"data-gotCode\"))) {\n\t\t\t\t\tthis.clearGhostNodes(true);\n\t\t\t\t}\n\n\t\t\t\tif (this.dropEl != null) {\n\t\t\t\t  let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n\t\t\t\t\tconst gotCode = this.dropEl.attr(\"data-gotCode\");\n\t\t\t\t\tlet dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\t\t\t\t\tlet isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n\t\t\t\t\tthis.dropEl.attr(\"stroke\", \"blue\");\n\n\t\t\t\t\tconst dropElX = parseInt(this.dropEl.attr(\"x\"));\n\t\t\t\t\tconst dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n\t\t\t\t\t// Add drop zones\n\t\t\t\t\tconst childW: number = SvgHierarchyType.gotRectW;\n\t\t\t\t\tconst childH: number = SvgHierarchyType.gotRectH;\n\n\t\t\t\t\tlet dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n\t\t\t\t\t// Render Child Drop Zone\n\t\t\t\t\tlet dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length == 0);\n\t\t\t\t\tlet isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n\t\t\t\t\tif (isChildDZActive)\n\t\t\t\t\t{\n  \t\t\t\t\tthis.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n  \t\t\t\t\t\t.attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n  \t\t\t\t\t\t.attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n  \t\t\t\t\t\t.attr(\"width\", childW)\n  \t\t\t\t\t\t.attr(\"height\", childH)\n  \t\t\t\t\t\t.attr(\"fill\", \"white\")\n  \n  \t\t\t\t\tthis.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n  \t\t\t\t\t\t.attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n  \t\t\t\t\t\t.attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n  \t\t\t\t\t\t.attr(\"width\", childW)\n  \t\t\t\t\t\t.attr(\"height\", childH)\n  \t\t\t\t\t\t.attr(\"fill\", \"none\")\n  \t\t\t\t\t\t.attr(\"stroke\", \"black\")\n  \t\t\t\t\t\t.attr(\"stroke-width\", \"1\")\n  \t\t\t\t\t\t.attr(\"stroke-dasharray\", \"5,5\");\n  \n  \t\t\t\t\tlet addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n  \t\t\t\t\tthis.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n  \t\t\t\t\t\t.attr(\"font-family\", \"sans-serif\")\n  \t\t\t\t\t\t.attr(\"font-size\", 10)\n  \t\t\t\t\t\t.attr(\"fill\", \"black\")\n  \t\t\t\t\t\t.attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n  \t\t\t\t\t\t.attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n  \t\t\t\t\t\t.text(addChildLabel);\n\t\t\t\t  }\n\n\t\t\t\t\t// Render Parent Drop Zone\n          if (!isDragGroup) // Don't render it if we're a group\n          {\n  \t\t\t\t\tthis.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n  \t\t\t\t\t\t.attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n  \t\t\t\t\t\t.attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n  \t\t\t\t\t\t.attr(\"width\", childW)\n  \t\t\t\t\t\t.attr(\"height\", childH)\n  \t\t\t\t\t\t.attr(\"fill\", \"white\")\n  \n  \t\t\t\t\tthis.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n  \t\t\t\t\t\t.attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n  \t\t\t\t\t\t.attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n  \t\t\t\t\t\t.attr(\"width\", childW)\n  \t\t\t\t\t\t.attr(\"height\", childH)\n  \t\t\t\t\t\t.attr(\"fill\", \"none\")\n  \t\t\t\t\t\t.attr(\"stroke\", \"black\")\n  \t\t\t\t\t\t.attr(\"stroke-width\", \"1\")\n  \t\t\t\t\t\t.attr(\"stroke-dasharray\", \"5,5\");\n  \t\t\t\t\t\t\n  \t\t\t\t  d3.select(\".svg-got-parent-dz-text\").remove();\n            let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n            this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 10)\n              .attr(\"fill\", \"black\")\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n              .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n              .text(addParentLabel);\n\t\t\t\t  }\n\n\t\t\t\t\t// Render Sibling Drop Zone\n\t\t\t\t\tif (this.ghostCode != gotCode) {\n\n\n\t\t\t\t\t\tif (this.ghostCode != null) {\n\t\t\t\t\t\t\tthis.clearGhostNodes(dropNode.parent == null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (dropNode.parent != null) {\n\t\t\t\t\t\t\tlet parentIndex = null;\n\t\t\t\t\t\t\tfor (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n\t\t\t\t\t\t\t\tlet hn: any = dropNode.parent.data.children[i];\n\n\t\t\t\t\t\t\t\tif (hn.geoObjectType === gotCode) {\n\t\t\t\t\t\t\t\t\tparentIndex = i + 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tlet addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n\t\t\t\t\t\t\tdropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n\t\t\t\t\t\t\tthat.renderTree();\n\t\t\t\t\t\t\tthis.ghostCode = gotCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n\t\t\t\t\tif (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n\t\t\t\t\t\tthis.parentDz.attr(\"stroke\", \"blue\");\n\t\t\t\t\t\tthis.parentDzText.attr(\"fill\", \"blue\");\n\t\t\t\t\t\tisChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n\t\t\t\t\t\tisChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n\t\t\t\t\t\tsiblingGhostBody.attr(\"stroke\", \"black\");\n\t\t\t\t\t\tthis.activeDz = this.parentDz;\n\t\t\t\t\t}\n\t\t\t\t\telse if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n\t\t\t\t\t\t!isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n\t\t\t\t\t\t!isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n\t\t\t\t\t\tthis.childDz.attr(\"stroke\", \"blue\");\n\t\t\t\t\t\tthis.childDzText.attr(\"fill\", \"blue\");\n\t\t\t\t\t\tsiblingGhostBody.attr(\"stroke\", \"black\");\n\t\t\t\t\t\tthis.activeDz = this.childDz;\n\t\t\t\t\t}\n\t\t\t\t\telse if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n\t\t\t\t\t\t!isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n\t\t\t\t\t\t!isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n\t\t\t\t\t\tisChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n\t\t\t\t\t\tisChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n\t\t\t\t\t\tsiblingGhostBody.attr(\"stroke\", \"blue\");\n\t\t\t\t\t\tthis.activeDz = \"sibling\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, onDrop: function(dragEl: Element) {\n\t\t\t\tif (this.dropEl != null && this.activeDz != null) {\n\t\t\t\t\tlet dropGot = this.dropEl.attr(\"data-gotCode\");\n\t\t\t\t\tlet dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n\t\t\t\t\tlet dragGot = d3.select(dragEl).attr(\"id\");\n\n\t\t\t\t\tif (this.activeDz === this.childDz) {\n\t\t\t\t\t\tif (dropNode.data.children.length == 0) {\n\t\t\t\t\t\t\tthat.addChild(that.currentHierarchy.code, dropGot, dragGot);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tlet youngest = \"\";\n\n\t\t\t\t\t\t\tfor (let i = 0; i < dropNode.data.children.length; ++i) {\n\t\t\t\t\t\t\t\tyoungest = youngest + dropNode.data.children[i].geoObjectType;\n\n\t\t\t\t\t\t\t\tif (i < dropNode.data.children.length - 1) {\n\t\t\t\t\t\t\t\t\tyoungest = youngest + \",\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthat.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.activeDz === this.parentDz) {\n\t\t\t\t\t\tif (dropNode.parent == null) {\n\t\t\t\t\t\t\tthat.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthat.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (this.activeDz === \"sibling\") {\n\t\t\t\t\t\tthat.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.clearDropZones();\n\t\t\t\tthis.clearGhostNodes(true);\n\t\t\t}, clearDropZones: function() {\n\t\t\t\tif (this.dropEl != null) {\n\t\t\t\t\tthis.dropEl.attr(\"stroke\", null);\n\t\t\t\t}\n\n\t\t\t\tthis.dropEl = null;\n\t\t\t\tthis.activeDz = null;\n\n\t\t\t\tthis.childDz = null;\n\t\t\t\tthis.parentDz = null;\n\n\t\t\t\td3.select(\".svg-dropZone-g\").remove();\n\n\t\t\t}, clearGhostNodes: function(renderTree: boolean) {\n\t\t\t\tif (this.ghostCode != null) {\n\t\t\t\t\tlet ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n\t\t\t\t\tif (ghostNode != null) {\n\t\t\t\t\t\tlet parentIndex = null;\n\t\t\t\t\t\tfor (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n\t\t\t\t\t\t\tlet hn: any = ghostNode.parent.data.children[i];\n\n\t\t\t\t\t\t\tif (hn.ghostingCode === this.ghostCode) {\n\t\t\t\t\t\t\t\tparentIndex = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (parentIndex != null) {\n\t\t\t\t\t\t\tghostNode.parent.data.children.splice(parentIndex, 1);\n\t\t\t\t\t\t\tif (renderTree) {\n\t\t\t\t\t\t\t\tthat.renderTree();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.ghostCode = null;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// GeoObjectTypes and Hierarchies\n\t\tlet deltaX: number, deltaY: number, width: number;\n\t\tlet sidebarDragHandler = d3.drag()\n\t\t\t.on(\"start\", function(event: any) {\n\t\t\t  let canDrag = d3.select(this).attr(\"data-candrag\");\n        if (canDrag === \"false\")\n        {\n          return;\n        }\n\t\t\t\n\t\t\t\tlet rect = this.getBoundingClientRect();\n\t\t\t\tdeltaX = rect.left - event.sourceEvent.pageX;\n\t\t\t\tdeltaY = rect.top - event.sourceEvent.pageY;\n\t\t\t\twidth = rect.width;\n\t\t\t})\n\t\t\t.on(\"drag\", function(event: any) {\n        let canDrag = d3.select(this).attr(\"data-candrag\");\n        if (canDrag === \"false\")\n        {\n          return;\n        }\n\n\t\t\t\td3.select(\".g-context-menu\").remove();\n\t\t\t\t\n\t\t\t\tlet selThis = d3.select(this);\n\n\t\t\t\t// Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n\t\t\t\tselThis.style(\"display\", \"none\");\n\n\t\t\t\tlet target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n\t\t\t\tselThis.style(\"display\", null);\n\n\t\t\t\tfor (let i = 0; i < dropTargets.length; ++i) {\n\t\t\t\t\tdropTargets[i].onDrag(this, target, event);\n\t\t\t\t}\n\n\t\t\t\t// Move the GeoObjectType with the pointer when they move their mouse\n\t\t\t\tselThis\n\t\t\t\t\t.classed(\"dragging\", true)\n\t\t\t\t\t.style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n\t\t\t\t\t.style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n\t\t\t\t\t.style(\"width\", width + \"px\");\n\t\t\t\t\t\n\t\t\t  // If they are moving a GOT group then we have to move the children as well \n        if (selThis.classed(\"got-group-parent\"))\n        {\n          let index = 1;\n          d3.selectAll('.got-group-child[data-superTypeCode=\"' + selThis.attr(\"id\") + '\"]').each(function() {\n            let li: any = this;\n            let child = d3.select(li);\n            \n            child\n              .classed(\"dragging\", true)\n              .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n              .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2)*index) + \"px\")\n              .style(\"width\", width + \"px\");\n              \n            index++;\n          });\n        }\n\t\t\t}).on(\"end\", function(event: any) {\n\t\t\t\tlet selThis = d3.select(this)\n\t\t\t\t\t.classed(\"dragging\", false)\n\t\t\t\t\t.style(\"left\", null)\n\t\t\t\t\t.style(\"top\", null)\n\t\t\t\t\t.style(\"width\", null);\n\n        // If they are moving a GOT group then we have to reset the children as well \n        if (selThis.classed(\"got-group-parent\"))\n        {\n          d3.selectAll('.got-group-child[data-superTypeCode=\"' + selThis.attr(\"id\") + '\"]').each(function() {\n            let child = d3.select(this);\n            \n            child\n              .classed(\"dragging\", false)\n              .style(\"left\", null)\n              .style(\"top\", null)\n              .style(\"width\", null);\n          });\n        }\n\n\t\t\t\tfor (let i = 0; i < dropTargets.length; ++i) {\n\t\t\t\t\tdropTargets[i].onDrop(this, event);\n\t\t\t\t}\n\t\t\t});\n\n\t\tsidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n\t}\n\n\tprivate registerSvgHandlers(): void {\n\t\tlet hierarchyComponent = this;\n\n\t\t// SVG Drag Handler\n\t\tlet deltaX: number, deltaY: number, width: number;\n\t\tlet startPoint: any;\n\t\tlet svgGot: SvgHierarchyNode;\n\t\tlet svgDragHandler = d3.drag()\n\t\t\t.on(\"start\", function(event: any) {\n\t\t\t\tlet svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\t\t\t\t// let select = d3.select(this);\n\n\t\t\t\tsvgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n\n\n\t\t\t\t// d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n\t\t\t\t// \tif (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n\t\t\t\t// \t\treturn -1\n\t\t\t\t// \t}\n\t\t\t\t// \telse {\n\t\t\t\t// \t\treturn 1\n\t\t\t\t// \t}\n\t\t\t\t// });\n\n\t\t\t\t// \td3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n\t\t\t\t// \tif (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n\t\t\t\t// \t\treturn -1\n\t\t\t\t// \t}\n\t\t\t\t// \telse {\n\t\t\t\t// \t\treturn 1\n\t\t\t\t// \t}\n\t\t\t\t// });\n\n\t\t\t\t// d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n\t\t\t\t// \tif (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n\t\t\t\t// \t\tconsole.log(\"no --> \",a.data.geoObjectType)\n\t\t\t\t// \t\treturn -1\n\t\t\t\t// \t}\n\t\t\t\t// \telse {\n\t\t\t\t// \t\tconsole.log(\"yes --> \",a.data.geoObjectType)\n\t\t\t\t// \t\treturn 1\n\t\t\t\t// \t}\n\t\t\t\t// });\n\n\t\t\t\tstartPoint = svgGot.getPos();\n\n\t\t\t\tdeltaX = startPoint.x - svgMousePoint.x;\n\t\t\t\tdeltaY = startPoint.y - svgMousePoint.y;\n\t\t\t})\n\t\t\t.on(\"drag\", function(event: any) {\n\n\t\t\t\td3.select(\".g-context-menu\").remove();\n\n\t\t\t\tlet svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n\t\t\t\tsvgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n\t\t\t\tsvgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n\n\t\t\t}).on(\"end\", function(event: any) {\n\n\t\t\t\tlet bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n\n\t\t\t\tsvgGot.setPos(startPoint.x, startPoint.y, false);\n\n\t\t\t\t// if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n\t\t\t\t// \tif (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n\t\t\t\t// \t\tlet obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n\t\t\t\t// \t\thierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n\t\t\t\t// \t\t\tanimated: true,\n\t\t\t\t// \t\t\tbackdrop: true,\n\t\t\t\t// \t\t\tignoreBackdropClick: true,\n\t\t\t\t// \t\t});\n\n\t\t\t\t// \t\tlet message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n\t\t\t\t// \t\tmessage = message.replace(\"{label}\", obj.label.localizedValue);\n\n\t\t\t\t// \t\thierarchyComponent.bsModalRef.content.message = message;\n\t\t\t\t// \t\thierarchyComponent.bsModalRef.content.data = obj.code;\n\n\t\t\t\t// \t\t(<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\t\t// \t\t\tlet treeNode = svgGot.getTreeNode();\n\t\t\t\t// \t\t\tlet parent = null;\n\t\t\t\t// \t\t\tif (treeNode.parent == null) {\n\t\t\t\t// \t\t\t\tparent = \"ROOT\";\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t\telse {\n\t\t\t\t// \t\t\t\tif (treeNode.parent.data.inheritedHierarchyCode != null) {\n\t\t\t\t// \t\t\t\t\tparent = \"ROOT\";\n\t\t\t\t// \t\t\t\t}\n\t\t\t\t// \t\t\t\telse {\n\t\t\t\t// \t\t\t\t\tparent = treeNode.parent.data.geoObjectType;\n\t\t\t\t// \t\t\t\t}\n\t\t\t\t// \t\t\t}\n\n\t\t\t\t// \t\t\thierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n\t\t\t\t// \t\t});\n\n\t\t\t\t// \t\t(<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n\t\t\t\t// \t\t\tsvgGot.setPos(startPoint.x, startPoint.y, false);\n\t\t\t\t// \t\t});\n\t\t\t\t// \t}\n\t\t\t\t// \telse {\n\t\t\t\t// \t\tsvgGot.setPos(startPoint.x, startPoint.y, false);\n\t\t\t\t// \t}\n\n\t\t\t\t// }\n\t\t\t\t// else {\n\t\t\t\t// \tsvgGot.setPos(startPoint.x, startPoint.y, false);\n\t\t\t\t// }\n\n\t\t\t});\n\n\t\tsvgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n\t}\n\n\tpublic findGeoObjectTypeByCode(code: string): GeoObjectType {\n\t\tfor (let i = 0; i < this.geoObjectTypes.length; ++i) {\n\t\t\tlet got: GeoObjectType = this.geoObjectTypes[i];\n\n\t\t\tif (got.code === code) {\n\t\t\t\treturn got;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic findHierarchyByCode(code: string): HierarchyType {\n\t\tfor (let i = 0; i < this.hierarchies.length; ++i) {\n\t\t\tlet ht: HierarchyType = this.hierarchies[i];\n\n\t\t\tif (ht.code === code) {\n\t\t\t\treturn ht;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n\t\tthis.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n\t\t\tlet got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n\t\t\tlet index = null;\n\t\t\tfor (let i = 0; i < got.relatedHierarchies.length; ++i) {\n\t\t\t\tif (got.relatedHierarchies[i] === hierarchyCode) {\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (index == null) {\n\t\t\t\tgot.relatedHierarchies.push(hierarchyCode);\n\t\t\t}\n\n\t\t\tthis.refreshPrimaryHierarchy(ht);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tprivate insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n\t\tthis.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n\t\t\tthis.refreshPrimaryHierarchy(ht);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tisRA(): boolean {\n\t\treturn this.authService.isRA();\n\t}\n\n\tisOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n\t\treturn this.authService.isOrganizationRA(orgCode);\n\t}\n\n\tgetTypesByOrg(org: Organization): GeoObjectType[] {\n\t\tlet orgTypes: GeoObjectType[] = [];\n\n\t\tfor (let i = 0; i < this.geoObjectTypes.length; ++i) {\n\t\t\tlet geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n\t\t\tif (geoObjectType.organizationCode === org.code) {\n\t\t\t\torgTypes.push(geoObjectType);\n\t\t\t}\n\t\t}\n\n\t\treturn orgTypes;\n\t}\n\n\tgetHierarchiesByOrg(org: Organization): HierarchyType[] {\n\t\tlet orgHierarchies: HierarchyType[] = [];\n\n\t\tfor (let i = 0; i < this.hierarchies.length; ++i) {\n\t\t\tlet hierarchy: HierarchyType = this.hierarchies[i];\n\n\t\t\tif (hierarchy.organizationCode === org.code) {\n\t\t\t\torgHierarchies.push(hierarchy);\n\t\t\t}\n\t\t}\n\n\t\treturn orgHierarchies;\n\t}\n\n\tpublic refreshAll(desiredHierarchy: HierarchyType) {\n\t\t\n\t\t// Clear the types to then refresh\n\t\tthis.geoObjectTypes = [];\n\t\t\n\t\tthis.registryService.init().then(response => {\n\t\t\tthis.localizeService.setLocales(response.locales);\n\n\t\t\tthis.setGeoObjectTypes(response.types);\n\n\t\t\tthis.organizations = response.organizations;\n\n\t\t\tthis.organizations.forEach(org => {\n\t\t\t\tif (this.isOrganizationRA(org.code)) {\n\t\t\t\t\tthis.userOrganization = org.code;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tlet pos = this.getGeoObjectTypePosition(\"ROOT\");\n\t\t\tif (pos) {\n\t\t\t\tthis.geoObjectTypes.splice(pos, 1);\n\t\t\t}\n\n\t\t\tthis.setHierarchies(response.hierarchies);\n\n\t\t\tthis.setNodesOnInit(desiredHierarchy);\n\n      this.updateViewDatastructures();\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic setGeoObjectTypes(types: GeoObjectType[]): void {\n\n\t\t// Set group parent types\n\t\tthis.setAbstractTypes(types);\n\n\t\t// Set GeoObjectTypes that aren't part of a group.\n\t\ttypes.forEach(type => {\n\t\t\tif (!type.isAbstract) {\n\t\t\t\tif ( !type.superTypeCode ) {\n\t\t\t\t\tthis.geoObjectTypes.push(type);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Sort aphabetically because all other types to add will be children in a group.\n\t\tthis.geoObjectTypes.sort((a, b) => {\n\t\t\tif (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n\t\t\telse if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n\t\t\telse return 0;\n\t\t});\n\t\t\n\t\t// Add group children\n\t\ttypes.forEach(type => {\n\t\t\tif (!type.isAbstract) {\n\t\t\t\tif (type.superTypeCode && type.superTypeCode.length > 0) {\n\n\t\t\t\t\tfor (let i = 0; i < this.geoObjectTypes.length; i++) {\n\t\t\t\t\t\tlet setType = this.geoObjectTypes[i];\n\t\t\t\t\t\tif (type.superTypeCode === setType.code) {\n\t\t\t\t\t\t\tthis.geoObjectTypes.splice(i + 1, 0, type);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\tprivate setAbstractTypes(types: GeoObjectType[]): void {\n\t\ttypes.forEach(type => {\n\t\t\tif (type.isAbstract) {\n\t\t\t\tthis.geoObjectTypes.push(type);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic updateViewDatastructures(): void {\n\t\tthis.hierarchiesByOrg = [];\n\t\tthis.typesByOrg = [];\n\n\t\tfor (let i = 0; i < this.organizations.length; ++i) {\n\t\t\tlet org: Organization = this.organizations[i];\n\n\t\t\tthis.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n\t\t\tthis.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n\t\t}\n\t\t\n\t\tthis.geoObjectTypes.forEach((got: GeoObjectType) => {\n      got.canDrag = this.calculateCanDrag(got);\n    });\n\t\t\n\t\tthis.onFilterChange();\n\t}\n\n\tpublic excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n\t\treturn (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n\t}\n\n\tpublic excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n\t\treturn (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n\t}\n\n\tprivate setNodesOnInit(desiredHierarchy: HierarchyType): void {\n\n\t\tlet index = -1;\n\n\t\tif (desiredHierarchy != null) {\n\t\t\tindex = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n\t\t}\n\t\telse if (this.hierarchies.length > 0) {\n\t\t\tindex = 0;\n\t\t}\n\n\t\tif (index > -1) {\n\t\t\tconst hierarchy = this.hierarchies[index];\n\n\t\t\tthis.setCurrentHierarchy(hierarchy);\n\n\t\t\tthis.renderTree();\n\t\t}\n\t}\n\n\tprivate getHierarchy(hierarchyId: string): HierarchyType {\n\t\tlet target: HierarchyType = null;\n\t\tthis.hierarchies.forEach(hierarchy => {\n\t\t\tif (hierarchyId === hierarchy.code) {\n\t\t\t\ttarget = hierarchy;\n\t\t\t}\n\t\t});\n\n\t\treturn target;\n\t}\n\n\tprivate setHierarchies(data: HierarchyType[]): void {\n\t\tlet hierarchies: HierarchyType[] = [];\n\t\tdata.forEach((hierarchyType, index) => {\n\n\t\t\tif (hierarchyType.rootGeoObjectTypes.length > 0) {\n\t\t\t\thierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n\t\t\t\t\tthis.processHierarchyNodes(rootGeoObjectType);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\thierarchies.push(hierarchyType);\n\n\t\t});\n\n\t\tthis.hierarchies = hierarchies\n\n\t\tthis.hierarchies.sort((a, b) => {\n\t\t\tif (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n\t\t\telse if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n\t\t\telse return 0;\n\t\t});\n\t}\n\n\tprivate processHierarchyNodes(node: HierarchyNode) {\n\t\tif (node != null) {\n\t\t\tnode.label = this.getHierarchyLabel(node.geoObjectType);\n\n\t\t\tnode.children.forEach(child => {\n\t\t\t\tthis.processHierarchyNodes(child);\n\t\t\t})\n\t\t}\n\t}\n\n\tprivate getHierarchyLabel(geoObjectTypeCode: string): string {\n\t\tlet label: string = null;\n\t\tthis.geoObjectTypes.forEach(function(gOT) {\n\t\t\tif (gOT.code === geoObjectTypeCode) {\n\t\t\t\tlabel = gOT.label.localizedValue;\n\t\t\t}\n\t\t});\n\n\t\treturn label;\n\t}\n\n\tpublic handleOnMenu(node: any, $event: any): void {\n\t\tif (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n\t\t\tthis.contextMenuService.show.next({\n\t\t\t\tcontextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n\t\t\t\tevent: $event,\n\t\t\t\titem: node,\n\t\t\t});\n\t\t\t$event.preventDefault();\n\t\t\t$event.stopPropagation();\n\t\t}\n\t\telse {\n\t\t\t$event.preventDefault();\n\t\t\t$event.stopPropagation();\n\t\t}\n\t}\n\n\tpublic treeNodeOnClick(node: any, $event: any): void {\n\n\t\tnode.treeModel.setFocusedNode(node);\n\n\t\tif (node.treeModel.isExpanded(node)) {\n\t\t\tnode.collapse();\n\t\t}\n\t\telse {\n\t\t\tnode.treeModel.expandAll();\n\t\t}\n\t}\n\n\tpublic hierarchyOnClick(event: any, item: HierarchyType) {\n\t\tthis.setCurrentHierarchy(item);\n\t\tthis.renderTree();\n\t}\n\n\tpublic createHierarchy(): void {\n\t\tthis.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\n\t\t(<CreateHierarchyTypeModalComponent>this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n\n\t\t\tthis.hierarchies.push(data);\n\n\t\t\tthis.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n\t\t\t\tvar nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\t\t\t\tvar nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n\t\t\t\tif (nameA < nameB) {\n\t\t\t\t\treturn -1; //nameA comes first\n\t\t\t\t}\n\n\t\t\t\tif (nameA > nameB) {\n\t\t\t\t\treturn 1; // nameB comes first\n\t\t\t\t}\n\n\t\t\t\treturn 0;  // names must be equal\n\t\t\t});\n\n\t\t\tthis.updateViewDatastructures();\n\t\t});\n\t}\n\n\tpublic deleteHierarchyType(obj: HierarchyType): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.data = obj.code;\n\t\tthis.bsModalRef.content.type = \"DANGER\";\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.removeHierarchyType(data);\n\t\t});\n\t}\n\n\tpublic editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n\n\t\tthis.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.edit = true;\n\t\tthis.bsModalRef.content.readOnly = readOnly;\n\t\tthis.bsModalRef.content.hierarchyType = obj;\n\t\tthis.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n\t\t\tlet pos = this.getHierarchyTypePosition(data.code);\n\n\t\t\tthis.hierarchies[pos].label = data.label;\n\t\t\tthis.hierarchies[pos].description = data.description;\n\t\t\tthis.hierarchies[pos].abstractDescription = data.abstractDescription;\n\t\t\tthis.hierarchies[pos].progress = data.progress;\n\t\t\tthis.hierarchies[pos].acknowledgement = data.acknowledgement;\n\t\t\tthis.hierarchies[pos].contact = data.contact;\n\n\t\t\tthis.updateViewDatastructures();\n\n\t\t\tif (this.currentHierarchy.code === data.code) {\n\t\t\t\tthis.setCurrentHierarchy(this.hierarchies[pos]);\n\n\t\t\t\tthis.renderTree();\n\t\t\t}\n\t\t});\n\t}\n\n\tsetCurrentHierarchy(hierarchyType: HierarchyType): void {\n\t\tthis.currentHierarchy = hierarchyType;\n\t}\n\n\tisPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n\t\t// return hierarchy.isPrimary;\n\t\treturn hierarchy.code === this.currentHierarchy.code;\n\t}\n\n\tpublic removeHierarchyType(code: string): void {\n\t\tthis.hierarchyService.deleteHierarchyType(code).then(response => {\n\n\t\t\tlet pos = this.getHierarchyTypePosition(code);\n\t\t\tthis.hierarchies.splice(pos, 1);\n\t\t\tthis.updateViewDatastructures();\n\n\t\t\tif (this.hierarchies.length > 0) {\n\t\t\t\tthis.setCurrentHierarchy(this.hierarchies[0]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.currentHierarchy = null;\n\t\t\t}\n\n\t\t\tthis.renderTree();\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean): void {\n\t\tthis.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.init(this.organizations, this.geoObjectTypes, groupSuperType, isAbstract);\n\n\t\tthis.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n\n\t\t\tdata.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n\t\t\tthis.refreshAll(this.currentHierarchy)\n\n\t\t});\n\t}\n\n\tpublic deleteGeoObjectType(obj: GeoObjectType): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.data = obj.code;\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.removeGeoObjectType(data);\n\t\t});\n\t}\n\n\tpublic removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n\t\tthis.registryService.deleteGeoObjectType(code).then(response => {\n\n\t\t\tlet pos = this.getGeoObjectTypePosition(code);\n\t\t\tthis.geoObjectTypes.splice(pos, 1);\n\n\t\t\tthis.refreshAll(this.currentHierarchy);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tif (errCallback != null) {\n\t\t\t\terrCallback(err);\n\t\t\t}\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'manage-geoobjecttype-modal'\n\t\t});\n\n\t\tgeoObjectType.attributes.sort((a, b) => {\n\t\t\tif (a.label.localizedValue < b.label.localizedValue) return -1;\n\t\t\telse if (a.label.localizedValue > b.label.localizedValue) return 1;\n\t\t\telse return 0;\n\t\t});\n\t\tthis.bsModalRef.content.geoObjectType = geoObjectType;\n\t\tthis.bsModalRef.content.readOnly = readOnly;\n\n\t\t(<ManageGeoObjectTypeModalComponent>this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n\t\t\tconst position = this.getGeoObjectTypePosition(data.code);\n\n\t\t\tif (position !== -1) {\n\t\t\t\tthis.geoObjectTypes[position] = data;\n\t\t\t}\n\n\t\t\t// Update all of the hierarchies for the new geo object type\n\t\t\tthis.updateViewDatastructures();\n\n\t\t\tthis.hierarchies.forEach((hierarchyType: HierarchyType) => {\n\t\t\t\tthis.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\t\t\t});\n\n\t\t\t// Update the current hierarchy view\n\t\t\tif (this.currentHierarchy != null) {\n\t\t\t\tthis.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n\t\t\t}\n\n\t\t\tthis.renderTree();\n\t\t});\n\t}\n\n\tprivate getHierarchyTypePosition(code: string): number {\n\t\tfor (let i = 0; i < this.hierarchies.length; i++) {\n\t\t\tlet obj = this.hierarchies[i];\n\t\t\tif (obj.code === code) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getGeoObjectTypePosition(code: string): number {\n\t\tfor (let i = 0; i < this.geoObjectTypes.length; i++) {\n\t\t\tlet obj = this.geoObjectTypes[i];\n\t\t\tif (obj.code === code) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n\t\tthis.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n\t\tfor (let i = 0; i < this.hierarchies.length; ++i) {\n\t\t\tlet hierarchy = this.hierarchies[i];\n\n\t\t\tif (hierarchy.code === hierarchyType.code) {\n\t\t\t\tthis.hierarchies[i] = hierarchyType;\n\n\t\t\t\tthis.setCurrentHierarchy(hierarchyType);\n\t\t\t}\n\t\t}\n\n\t\tthis.updateViewDatastructures();\n\n\t\tthis.renderTree();\n\t}\n\n\tpublic removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n\t\tconst that = this;\n\n\t\tthis.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n\n\t\t\tlet got = that.findGeoObjectTypeByCode(gotCode);\n\n\t\t\tlet index = null;\n\t\t\tfor (let i = 0; i < got.relatedHierarchies.length; ++i) {\n\t\t\t\tif (got.relatedHierarchies[i] === hierarchyType.code) {\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (index != null) {\n\t\t\t\tgot.relatedHierarchies.splice(index, 1);\n\t\t\t}\n\n\t\t\tthat.refreshPrimaryHierarchy(hierarchyType);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tif (errCallback != null) {\n\t\t\t\terrCallback(err);\n\t\t\t}\n\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic isActive(item: HierarchyType) {\n\t\treturn this.currentHierarchy === item;\n\t};\n\n\tonFilterChange(): void {\n\t\tconst label = this.filter.toLowerCase();\n\n\t\tthis.filteredHierarchiesByOrg = [];\n\t\tthis.filteredTypesByOrg = [];\n\n\t\tthis.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n\n\t\t\tconst filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n\t\t\t\tconst index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n\t\t\t\treturn (index !== -1);\n\t\t\t});\n\n\t\t\tif (filtered.length > 0) {\n\t\t\t\tthis.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n\t\t\t}\n\t\t});\n\n\t\tthis.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n\n\t\t\tconst filtered = item.types.filter((type: GeoObjectType) => {\n\t\t\t\tconst index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n\t\t\t\treturn (index !== -1);\n\t\t\t});\n\n\t\t\tif (filtered.length > 0) {\n\t\t\t\tthis.filteredTypesByOrg.push({ org: item.org, types: filtered });\n\t\t\t}\n\t\t});\n\n\t\tsetTimeout(() => { this.registerDragHandlers(); }, 500);\n\t}\n\n\thandleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n\t\tthis.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n\t\t\tthis.refreshPrimaryHierarchy(ht);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\thandleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n\t\tthis.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n\t\t\tthis.refreshPrimaryHierarchy(ht);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span class=\"\" style=\"color:white;\">\n\t\t\t\t\t\t\t\t<i style=\"color:white;margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"typeByOrg.types.length > 0\">\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<i style=\"color:#6BA542;\" class=\"fa fa-plus\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <i style=\"color:#6BA542;\" class=\"fa fa-plus\"></i>\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(type.organizationCode)\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(type.organizationCode)\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"color:white;\" class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div *ngIf=\"hierarchyByOrg.hierarchies.length > 0\">\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<i style=\"color:#369c00;\" class=\"fa fa-plus\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': hierarchy.code === currentHierarchy.code, 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && isOrganizationRA(currentHierarchy.organizationCode, true) && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\"\n\t\t\t\t\t\tid=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '@shared/component';\nimport { HierarchyType } from '@registry/model/hierarchy';\nimport { RegistryService, HierarchyService } from '@registry/service';\n\nimport { LocalizationService, AuthService } from '@shared/service';\n\n\n@Component({\n\tselector: 'create-hierarchy-type-modal',\n\ttemplateUrl: './create-hierarchy-type-modal.component.html',\n\tstyleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n\thierarchyType: HierarchyType;\n\torganizations: any = [];\n\tmessage: string = null;\n\n\tedit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n\treadOnly: boolean = false;\n\n\torganizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onHierarchytTypeCreate: Subject<HierarchyType>;\n\n\tconstructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onHierarchytTypeCreate = new Subject();\n\n\t\tthis.hierarchyType = {\n\t\t\t\"code\": \"\",\n\t\t\t\"label\": this.lService.create(),\n\t\t\t\"description\": this.lService.create(),\n\t\t\t\"rootGeoObjectTypes\": [],\n\t\t\t\"organizationCode\": \"\"\n\t\t};\n\n\t\tthis.registryService.getOrganizations().then(orgs => {\n\n\t\t\t// Filter out organizations they're not RA's of, unless we're readOnly.\n\t\t\tif (!this.readOnly) {\n\t\t\t\tthis.organizations = [];\n\n\t\t\t\tfor (var i = 0; i < orgs.length; ++i) {\n\t\t\t\t\tif (this.auth.isOrganizationRA(orgs[i].code)) {\n\t\t\t\t\t\tthis.organizations.push(orgs[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.organizations = orgs;\n\t\t\t}\n\n\t\t\tif (!this.edit && this.organizations.length === 1) {\n\t\t\t\tthis.hierarchyType.organizationCode = this.organizations[0].code;\n\t\t\t\tthis.organizationLabel = this.organizations[0].label.localizedValue;\n\t\t\t}\n\t\t\telse if (this.edit || this.readOnly) {\n\t\t\t\tthis.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n\t\t\t}\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tgetOrganizationLabelFromCode(orgCode: string) {\n\t\tfor (var i = 0; i < this.organizations.length; ++i) {\n\t\t\tif (this.organizations[i].code === orgCode) {\n\t\t\t\treturn this.organizations[i].label.localizedValue;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(\"Did not find org with code [\" + orgCode + \"]\");\n\t\treturn orgCode;\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tif (this.readOnly) {\n\t\t\tthis.bsModalRef.hide();\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.edit) {\n\t\t\tconsole.log(this.hierarchyType);\t\t\t\n\t\t\t\n\t\t\tthis.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n\t\t\t\tthis.onHierarchytTypeCreate.next(data);\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n\t\t\t\tthis.onHierarchytTypeCreate.next(data);\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize key=\"hierarchy.management.create.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.description.localeValues\">\n        <label for=\"descriptionInput\">\n          <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n        </label>\n        <textarea [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" class=\"form-control\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.abstractDescription\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.abstractDescription\" name=\"abstractDescription\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '@shared/component';\nimport { GeoObjectType } from '@registry/model/registry';\n\nimport { RegistryService } from '@registry/service';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { Organization } from '@shared/model/core';\nimport { HierarchyType } from '@registry/model/hierarchy';\n\n@Component({\n\tselector: 'create-geoobjtype-modal',\n\ttemplateUrl: './create-geoobjtype-modal.component.html',\n\tstyleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n\tgeoObjectType: GeoObjectType;\n\torganizations: Organization[] = [];\n\tmessage: string = null;\n\tparents: GeoObjectType[];\n\thierarchyType:HierarchyType;\n\torganizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n\tpublic onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n\tconstructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onGeoObjTypeCreate = new Subject();\n\n\t\tthis.geoObjectType = {\n\t\t\t\"code\": \"\",\n\t\t\t\"label\": this.lService.create(),\n\t\t\t\"description\": this.lService.create(),\n\t\t\t\"geometryType\": \"MULTIPOINT\",\n\t\t\t\"isLeaf\": false,\n\t\t\t\"isGeometryEditable\": true,\n\t\t\t\"organizationCode\": \"\",\n\t\t\t\"attributes\": [],\n\t\t};\n\t}\n\n\tinit(organizations: Organization[], parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n\t\t\n\t\tthis.geoObjectType.superTypeCode = groupSuperType ? groupSuperType.code : \"\";\n\t\tthis.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\t\tthis.geoObjectType.geometryType = groupSuperType.geometryType;\n\t\t\n\t\t// Filter out parents that are not abstract\n\t\tthis.parents = parents.filter(parent => parent.isAbstract);\n\n\t\t// Filter out organizations they're not RA's of\n\t\tthis.organizations = [];\n\n\t\tfor (var i = 0; i < organizations.length; ++i) {\n\t\t\tif (this.auth.isOrganizationRA(organizations[i].code)) {\n\t\t\t\tthis.organizations.push(organizations[i]);\n\t\t\t}\n\t\t}\n\n\t\tif (this.organizations.length === 1) {\n\t\t\tthis.geoObjectType.organizationCode = this.organizations[0].code;\n\t\t\tthis.organizationLabel = this.organizations[0].label.localizedValue;\n\t\t}\n\t}\n\n\tgetOrganizationLabelFromCode(orgCode: string) {\n\t\tfor (var i = 0; i < this.organizations.length; ++i) {\n\t\t\tif (this.organizations[i].code === orgCode) {\n\t\t\t\treturn this.organizations[i].label.localizedValue;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(\"Did not find org with code [\" + orgCode + \"]\");\n\t\treturn orgCode;\n\t}\n\n\thandleOnSubmit(): void {\n\t\tthis.message = null;\n\n\t\tthis.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n\t\t\tthis.onGeoObjTypeCreate.next(data);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\ttoggleIsLeaf(): void {\n\t\tthis.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n\t}\n\n\ttoggleIsGeometryEditable(): void {\n\t\tthis.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n\t}\n\n\ttoggleIsAbstract(): void {\n\t\tthis.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.description.localeValues\">\n          <div>\n            <label>\n              <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n            </label>\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n              class=\"form-control\">\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [attr.disabled]=\"geoObjectType.superTypeCode == null || geoObjectType.superTypeCode == ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <select *ngIf=\"organizations.length > 1\" class=\"select-area\" name=\"organization\" [(ngModel)]=\"geoObjectType.organizationCode\" required>\n            <option></option>\n            <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n          </select>\n          <span *ngIf=\"organizations.length == 1\" class=\"text\"><input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport {  GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, GeoObjectType } from '@registry/model/registry';\n\nimport { HierarchyService, GeoObjectTypeManagementService } from '@registry/service';\n\n\n@Component( {\n    selector: 'manage-geoobjecttype-modal',\n    templateUrl: './manage-geoobjecttype-modal.component.html',\n    styleUrls: ['./manage-geoobjecttype-modal.css']\n} )\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor( public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n      this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe( modalState => {\n            this.modalState = modalState;\n      });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy(){\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the \n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next( data );\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form >\n     \n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n  \n  <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\"></manage-attributes-modal>\n  \n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" ></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" ></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n \n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\" ></edit-term-option-input>\n \n</form>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\n\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService, HierarchyService } from '@registry/service';\n\n@Component( {\n    selector: 'geoobjecttype-input',\n    templateUrl: './geoobjecttype-input.component.html',\n    styleUrls: ['./geoobjecttype-input.css']\n} )\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange:  EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n    \n    organizationLabel: string;\n    \n    @Input('setGeoObjectType') \n    set in(geoObjectType: GeoObjectType){\n        if(geoObjectType){\n          this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        //   this.geoObjectType = geoObjectType;\n        }\n    }\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizationService: LocalizationService, private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n        \n        this.fetchOrganizationLabel();\n    }\n\n    fetchOrganizationLabel(): void {\n        \n      this.registryService.getOrganizations().then(orgs => {\n      \n        for (var i = 0; i < orgs.length; ++i)\n        {\n          if (orgs[i].code === this.editGeoObjectType.organizationCode)\n          {\n            this.organizationLabel = orgs[i].label.localizedValue;\n          }\n        }\n        \n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType( this.editGeoObjectType ).then( geoObjectType => {\n\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n        \n        // return false;\n\n        return true;\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n<!--             <div class=\"row\"> -->\n<!--                 <div class=\"col-md-12\" style=\"margin-bottom: 15px;\"> -->\n<!--                     <div class=\"form-group\"> -->\n<!--                         <div class=\"check-block\"> -->\n<!--                             Disabled click ((click)=\"toggleIsAbstract()\") because this is initiated through a button push -->\n<!--                             <div [ngClass]=\"{'chk-checked' : geoObjectType.isAbstract}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\"> -->\n<!--                                 <span></span> -->\n<!--                             </div> -->\n\n<!--                             <label class=\"checkbox-label\"> <localize key=\"attribute.isAbstract.label\"></localize> -->\n<!--                             </label> -->\n<!--                         </div> -->\n<!--                     </div> -->\n<!--                 </div> -->\n<!--             </div> -->\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group list-group-flush\">\n                                <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li>\n                            </ul>\n\n                            <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\">\n                                <localize key=\"modal.button.manageAttributes\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService, HierarchyService } from '@registry/service';\n\n@Component( {\n    selector: 'manage-attributes-modal',\n    templateUrl: './manage-attributes-modal.component.html',\n    styleUrls: ['./manage-attributes-modal.css']\n} )\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy(){\n      this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    editAttribute(attr: Attribute, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":attr, \"termOption\":\"\"})\n    }\n\n    removeAttributeType(attr: Attribute, e: any): void {\n\n      this.confirmBsModalRef = this.modalService.show( ConfirmModalComponent, {\n\t\t  animated: true,\n\t\t  backdrop: true,\n\t\t  ignoreBackdropClick: true,\n\t  } );\n\t  this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + attr.label.localizedValue + ']';\n      this.confirmBsModalRef.content.data = {'attributeType': attr, 'geoObjectType': this.geoObjectType};\n      this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n\t  ( <ConfirmModalComponent>this.confirmBsModalRef.content ).onConfirm.subscribe( data => {\n          this.deleteAttributeType( data.geoObjectType.code, data.attributeType );\n\t  } );\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: Attribute): void {\n\n          this.registryService.deleteAttributeType( geoObjectTypeCode, attr.code ).then( data => {\n            this.onDeleteAttribute.next( data );\n\n            if(data){\n              this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            title=\"<localize key='modal.button.edit'></localize>\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            title=\"<localize key='modal.button.remove'></localize>\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler } from '@shared/component';\nimport { StepConfig } from '@shared/model/modal';\n\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { GeoObjectType, Attribute, AttributeTerm, AttributeDecimal, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\n \n\n@Component( {\n    selector: 'define-attribute-modal-content',\n    templateUrl: './define-attribute-modal-content.component.html',\n    styleUrls: ['./define-attribute-modal-content.css']\n} )\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    message: string = null;\n    newAttribute: Attribute = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.create.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n\n    constructor( \n\t    public bsModalRef: BsModalRef, \n        private modalStepIndicatorService: ModalStepIndicatorService, \n        private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizeService: LocalizationService,\n        private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n        if(this.attributeInputComponent){\n            this.attributeInputComponent.animate();\n        }\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.addAttributeType( this.geoObjectType.code, this.newAttribute ).then( data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    setAttribute(type:string): void {\n        if(type === 'term'){\n            this.newAttribute = new AttributeTerm(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else if(type === 'float') {\n            this.newAttribute = new AttributeDecimal(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else{\n            this.newAttribute = new Attribute(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        \n        let isAttrValid: boolean = false;\n        \n        if(this.attributeInputComponent){\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n        \n        if(isAttrValid){\n            return true;\n        }\n\n        return false;\n    }\n    \n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from '@angular/forms';\n\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator() : ValidatorFn {\n  return (c: AbstractControl) => {\n    if(c.value){\n        let isValid = c.value.indexOf(\" \") === -1;\n        \n        if(isValid) {\n            return null;\n        } else {\n            return {\n                geoObjectAttributeCode: {\n                     valid: false\n                }\n            };\n        }\n    }\n\n  }\n}\n\n\n@Directive({\n  selector: '[geoObjectAttributeCode][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n  ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n  validator: ValidatorFn;\n  \n  constructor() {\n    this.validator = validateGeoObjectAttributeCodeValidator();\n  }\n  \n  validate(c: FormControl) {\n    return this.validator(c);\n  }\n  \n}","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport {\n\ttrigger,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\n\nimport { ErrorHandler } from '@shared/component';\nimport { StepConfig } from '@shared/model/modal';\n\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\n\nimport { AttributeInputComponent } from '../geoobjecttype-management/attribute-input.component';\n\n\n\n@Component({\n\tselector: 'edit-attribute-modal-content',\n\ttemplateUrl: './edit-attribute-modal-content.component.html',\n\tstyleUrls: ['./edit-attribute-modal-content.css']\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\tmessage: string = null;\n\tmodalState: ManageGeoObjectTypeModalState = { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" };\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": true }\n\t\t]\n\t};\n\n\t@ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n\tconstructor(public bsModalRef: BsModalRef,\n\t\tprivate modalStepIndicatorService: ModalStepIndicatorService,\n\t\tprivate geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate localizeService: LocalizationService,\n\t\tprivate registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\thandleOnSubmit(): void {\n\n\t\tthis.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n\n\t\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n\t\t\t\tlet attr = this.geoObjectType.attributes[i];\n\t\t\t\tif (attr.code === data.code) {\n\t\t\t\t\tObject.assign(attr, data);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tisFormValid(): boolean {\n\n\t\t// let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n\t\t// if(isAttrValid){\n\t\t//     return true;\n\t\t// }\n\n\t\t// return false;\n\t\treturn true\n\t}\n\n\tcancel(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\tback(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { GeoObjectType, AttributeTerm, GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, Term} from '@registry/model/registry';\nimport { HierarchyService } from '@registry/service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '@registry/service/geoobjecttype-management.service'\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component( {\n    selector: 'term-option-widget',\n    templateUrl: './term-option-widget.component.html',\n    styleUrls: ['./term-option-widget.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms')),\n              transition('show => none', animate('100ms'))\n        ]),\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    state: string = 'none';\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy(){\n    \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n            \n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n            \n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\": \"\"})\n\n    }    \n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n\ttrigger,\n\tstate,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\nimport { GeoObjectType, AttributeTerm, Term, GeoObjectTypeModalStates } from '@registry/model/registry';\n\n@Component({\n\tselector: 'manage-term-options',\n\ttemplateUrl: './manage-term-options.component.html',\n\tstyleUrls: ['./manage-term-options.css'],\n\tanimations: [\n\t\ttrigger('toggleInputs', [\n\t\t\tstate('none, void',\n\t\t\t\tstyle({ 'opacity': 0 })\n\t\t\t),\n\t\t\tstate('show',\n\t\t\t\tstyle({ 'opacity': 1 })\n\t\t\t),\n\t\t\ttransition('none => show', animate('300ms')),\n\t\t\ttransition('show => none', animate('100ms'))\n\t\t]),\n\t\ttrigger('openClose',\n\t\t\t[\n\t\t\t\ttransition(\n\t\t\t\t\t':enter', [\n\t\t\t\t\tstyle({ 'opacity': 0 }),\n\t\t\t\t\tanimate('500ms', style({ 'opacity': 1 }))\n\t\t\t\t]\n\t\t\t\t),\n\t\t\t\ttransition(\n\t\t\t\t\t':leave', [\n\t\t\t\t\tstyle({ 'opacity': 1 }),\n\t\t\t\t\tanimate('0ms', style({ 'opacity': 0 })),\n\n\t\t\t\t]\n\t\t\t\t)]\n\t\t)\n\t]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: AttributeTerm;\n\t@Output() attributeChange = new EventEmitter<AttributeTerm>();\n\tmessage: string = null;\n\ttermOption: Term;\n\tstate: string = 'none';\n\tenableTermOptionForm = false;\n\tmodalStepConfig: StepConfig = {\r\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\": true, \"enabled\": true }\n\t\t]\r\n\t};\n\n\tconstructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n\t\tprivate registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t\tthis.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n\t}\n\n\tngAfterViewInit() {\n\t\tthis.state = 'show';\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tngOnDestroy() {\n\n\t}\n\n\thandleOnSubmit(): void {\n\n\t}\n\n\tanimate(): void {\n\t\tthis.state = \"none\";\n\t}\n\n\tonAnimationDone(event: AnimationEvent): void {\n\t\tthis.state = \"show\";\n\t}\n\n\tisValid(): boolean {\n\t\tif (this.termOption.code && this.termOption.code.length > 0) {\n\n\t\t\t// If code has a space\n\t\t\tif (this.termOption.code.indexOf(\" \") !== -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If label is only spaces\n\t\t\tfor (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n\t\t\t\tif (this.termOption.label.localeValues[i].value.replace(/\\s/g, '').length === 0) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\treturn true;\n\t\t}\n\t\telse if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn false\n\t}\n\n\taddTermOption(): void {\n\n\t\tthis.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n\n\t\t\tthis.attribute.rootTerm.children.push(data);\n\n\t\t\tthis.attributeChange.emit(this.attribute);\n\n\t\t\tthis.clearTermOption();\n\n\t\t\tthis.enableTermOptionForm = false;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tdeleteTermOption(termOption: Term): void {\n\n\t\tthis.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n\n\t\t\tif (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n\t\t\t\tthis.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n\t\t\t}\n\n\t\t\tthis.attributeChange.emit(this.attribute);\n\n\t\t\tthis.clearTermOption();\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tremoveTermOption(termOption: Term): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + termOption.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.deleteTermOption(termOption);\n\t\t});\n\t}\n\n\teditTermOption(termOption: Term): void {\n\n\t\tconst state = {\n\t\t\t\"state\": GeoObjectTypeModalStates.editTermOption,\n\t\t\t\"attribute\": this.attribute,\n\t\t\t\"termOption\": JSON.parse(JSON.stringify(termOption))\n\t\t};\n\n\t\tthis.geoObjectTypeManagementService.setModalState(state);\n\t}\n\n\tclearTermOption(): void {\n\t\tthis.termOption.code = \"\";\n\t\tthis.termOption.label = this.localizeService.create();\n\t\tthis.termOption.description = this.localizeService.create();\n\t}\n\n\tcancelTermOption(): void {\n\t\tthis.clearTermOption();\n\t\tthis.enableTermOptionForm = false;\n\t}\n\n\topenAddTermOptionForm(): void {\n\t\tthis.enableTermOptionForm = true;\n\t}\n\n\tclose(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option, $event)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option, $event)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport {\n\ttrigger,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from '@shared/model/modal';\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { GeoObjectType, AttributeTerm, Term, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\n\n@Component({\n\tselector: 'edit-term-option-input',\n\ttemplateUrl: './edit-term-option-input.component.html',\n\tstyleUrls: [],\n\tanimations: [\n\t\ttrigger('openClose',\n\t\t\t[\n\t\t\t\ttransition(\n\t\t\t\t\t':enter', [\n\t\t\t\t\tstyle({ 'opacity': 0 }),\n\t\t\t\t\tanimate('500ms', style({ 'opacity': 1 }))\n\t\t\t\t]\n\t\t\t\t),\n\t\t\t\ttransition(\n\t\t\t\t\t':leave', [\n\t\t\t\t\tstyle({ 'opacity': 1 }),\n\t\t\t\t\tanimate('0ms', style({ 'opacity': 0 })),\n\n\t\t\t\t]\n\t\t\t\t)]\n\t\t)\n\t]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: AttributeTerm;\n\t@Input() termOption: Term;\n\n\tmessage: string = null;\n\tmodalState: ManageGeoObjectTypeModalState = { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" };\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), \"active\": true, \"enabled\": true }\n\n\t\t]\n\t};\n\n\tconstructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate localizeService: LocalizationService, private registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\thandleOnSubmit(): void {\n\n\t\tthis.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n\t\t\t// Update the term definition on the attribute\n\t\t\tconst index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.attribute.rootTerm.children[index] = data;\n\t\t\t}\n\n\t\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageTermOption, \"attribute\": this.attribute, \"termOption\": null })\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tisFormValid(): boolean {\n\t\t// let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n\t\t// if(isAttrValid){\n\t\t//     return true;\n\t\t// }\n\n\t\t// return false;\n\t\treturn true\n\t}\n\n\tcancel(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageTermOption, \"attribute\": this.attribute, \"termOption\": null })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import * as d3 from 'd3';\n\nimport { HierarchyType } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\n\nimport { SvgHierarchyNode } from './svg-hierarchy-node';\nimport { calculateTextWidth } from './svg-util';\nimport { SvgController, INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL } from './svg-controller';\n\nimport { LocalizationService } from '@shared/service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\n\nexport class SvgHierarchyType {\n\n\tpublic static gotRectW: number = 150;\n\tpublic static gotRectH: number = 25;\n\n\tpublic static gotHeaderW: number = 150;\n\tpublic static gotHeaderH: number = 14;\n\n\thierarchyComponent: SvgController;\n\n\thierarchyType: HierarchyType;\n\n\tsvgEl: any;\n\n\td3Hierarchy: any;\n\n\td3Tree: any;\n\n\tisPrimary: boolean;\n\n\tpublic constructor(hierarchyComponent: SvgController, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService) {\n\t\tconst hierarchyType = ht;\n\n\t\tthis.hierarchyComponent = hierarchyComponent;\n\t\tthis.hierarchyType = hierarchyType;\n\t\tthis.svgEl = svgEl;\n\n\t\tthis.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n\t\tthis.isPrimary = isPrimary;\n\n\t\tthis.d3Tree = d3.tree().nodeSize([300, 80]).separation((a, b) => 0.8)(this.d3Hierarchy);\n\t}\n\t\n\tpublic getD3Tree() {\n\t\treturn this.d3Tree;\n\t}\n\n\tpublic getCode(): string {\n\t\treturn this.hierarchyType.code\n\t}\n\n\tpublic getNodeByCode(gotCode: string): SvgHierarchyNode {\n\t\tlet treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\t\t\n\t\tif (treeNode == null)\n\t\t{\n\t\t  return null;\n\t\t}\n\t\t\n\t\treturn new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService);\n\t}\n\n\tpublic renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n\t\tlet bbox = hg.node().getBBox();\n\n\t\tlet colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n\t\tlet headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n\t\tconst headerFontSize = 10;\n\t\tconst iconWidth = 20;\n\n\t\tlet lineWidth = bbox.width;\n\t\tlet textWidth = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize) + iconWidth;\n\n\t\tif (textWidth > lineWidth) {\n\t\t\tlineWidth = textWidth;\n\t\t}\n\n\t\t// Hierarchy icon (font awesome)\n\t\theaderg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n\t\t\t.attr(\"x\", bbox.x)\n\t\t\t.attr(\"y\", bbox.y)\n\t\t\t.style(\"font-family\", \"FontAwesome\")\n\t\t\t.attr(\"fill\", \"grey\")\n\t\t\t.attr(\"font-size\", 12)\n\t\t\t.text('\\uf0e8');\n\n\t\t// Hierarchy display label\n\t\theaderg.append(\"text\").classed(\"hierarchy-header-label\", true)\n\t\t\t.attr(\"font-size\", headerFontSize)\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\n\t\t\t.attr(\"stroke-width\", 3)\n\t\t\t.attr(\"fill\", \"grey\")\n\t\t\t.attr(\"x\", bbox.x + iconWidth)\n\t\t\t.attr(\"y\", bbox.y)\n\t\t\t.text(this.hierarchyType.label.localizedValue);\n\n\t\t// Line underneath the header\n\t\theaderg.append(\"line\").classed(\"hierarchy-header-line\", true)\n\t\t\t.attr(\"x1\", bbox.x)\n\t\t\t.attr(\"y1\", bbox.y + headerFontSize)\n\t\t\t.attr(\"x2\", bbox.x + lineWidth)\n\t\t\t.attr(\"y2\", bbox.y + headerFontSize)\n\t\t\t.attr(\"stroke\", \"grey\")\n\t\t\t.attr(\"stroke-width\", .5);\n\n\t\tlet headerGBbox = headerg.node().getBBox();\n\t\theaderg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n\t\t// Col header label\n\t\tcolHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n\t\t\t.attr(\"font-size\", headerFontSize + 2)\n\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\n\t\t\t.attr(\"stroke-width\", 3)\n\t\t\t.attr(\"fill\", \"grey\")\n\t\t\t.attr(\"x\", bbox.x)\n\t\t\t.attr(\"y\", bbox.y)\n\t\t\t.text(colHeaderLabel);\n\n\n\t\tcolHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n\t\treturn headerg;\n\t}\n\n\tgetRelatedHierarchies(gotCode: string): string[] {\n\t\tlet got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n\t\tif (got.relatedHierarchies == null) {\n\t\t\tgot.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n\t\t}\n\n    let relatedHiers: string[] = got.relatedHierarchies;\n\n\t\tlet index = null;\n\t\tfor (let i = 0; i < relatedHiers.length; ++i) {\n\t\t\tif (relatedHiers[i] === this.getCode()) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\n\t\tif (index != null) {\n\t\t\trelatedHiers.splice(index, 1);\n\t\t}\n\n\t\treturn relatedHiers;\n\t}\n\n\tpublic render() {\n\t\tlet that = this;\n\t\tlet descends: any = this.d3Tree.descendants();\n\n\t\td3.select('.g-hierarchy[data-primary=\"false\"]').remove();\n\t\tif (this.isPrimary) {\n\t\t\td3.select('.g-hierarchy[data-primary=\"true\"]').remove();\n\t\t}\n\n\t\tlet hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n\t\thg.attr(\"font-family\", \"sans-serif\");\n\n\t\tlet gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n\t\t// Edge\n\t\tgtree.append(\"g\").classed(\"g-got-edge\", true)\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"stroke\", \"#555\")\n\t\t\t.attr(\"stroke-opacity\", 0.4)\n\t\t\t.attr(\"stroke-width\", 1.5)\n\t\t\t.selectAll(\"path\")\n\t\t\t.data(this.d3Tree.links())\n\t\t\t.join(\"path\")\n\t\t\t//.attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n\t\t\t.attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n\t\t\t\treturn \"M\" + d.source.x + \",\" + (d.source.y)\n\t\t\t\t\t+ \"V\" + ((d.source.y + d.target.y) / 2)\n\t\t\t\t\t+ \"H\" + d.target.x\n\t\t\t\t\t+ \"V\" + (d.target.y);\n\t\t\t});\n\n\t\t// Header on square which denotes which hierarchy it's a part of\n\t\tlet gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n\t\tgHeader.selectAll(\"rect\")\n\t\t\t.data(descends)\n\t\t\t.join(\"rect\")\n\t\t\t.filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n\t\t\t.classed(\"svg-got-header-rect\", true)\n\t\t\t.attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n\t\t\t.attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH + 2)\n\t\t\t.attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n\t\t\t.attr(\"width\", SvgHierarchyType.gotHeaderW)\n\t\t\t.attr(\"height\", SvgHierarchyType.gotHeaderH)\n\t\t\t.attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n\t\t\t.attr(\"rx\", 3)\n\t\t\t.attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n\t\t\t.attr(\"data-inherited\", (d: any) =>\n\t\t\t\td.data.inheritedHierarchyCode != null\n\t\t\t);\n\n\t\t// Write the name of the hierarchy on the header if its inherited\n\t\tgHeader.selectAll(\"text\")\n\t\t\t.data(descends)\n\t\t\t.join(\"text\")\n\t\t\t.filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\" && d.data.inheritedHierarchyCode != null; })\n\t\t\t.classed(\"svg-got-header-rect\", true)\n\t\t\t.attr(\"x\", (d: any) => d.x - calculateTextWidth(that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue, 7) / 2)\n\t\t\t.attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH + 10)\n\t\t\t.attr(\"font-size\", \"8px\")\n\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t.attr(\"fill\", \"white\")\n\t\t\t.text((d: any) => that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue)\n\t\t\t.attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n\t\t\t.attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n\t\t\t.attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null);\n\n\t\t// GeoObjectType Body Square\n\t\tgtree.append(\"g\").classed(\"g-got\", true)\n\t\t\t.selectAll(\"rect\")\n\t\t\t.data(descends)\n\t\t\t.join(\"rect\")\n\t\t\t.filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n\t\t\t.classed(\"svg-got-body-rect\", true)\n\t\t\t.attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n\t\t\t.attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n\t\t\t.attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n\t\t\t.attr(\"width\", SvgHierarchyType.gotRectW)\n\t\t\t.attr(\"height\", SvgHierarchyType.gotRectH)\n\t\t\t.attr(\"rx\", 3)\n\t\t\t.attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n\t\t\t.attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n\t\t\t.attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n\t\t\t.each(function(d: any) {\n\t\t\t\tif (d.data.geoObjectType != \"GhostNode\") {\n\t\t\t\t\tif (d.data.activeDropZones) {\n\t\t\t\t\t\td.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\td.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Arrows on Edges\n\t\tconst arrowRectD = { height: 7, width: 10 };\n\t\tlet gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n\t\tgArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n\t\t\t.classed(\"got-connector-arrow-rect\", true)\n\t\t\t.attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n\t\t\t.attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n\t\t\t.attr(\"width\", arrowRectD.width)\n\t\t\t.attr(\"height\", arrowRectD.height)\n\t\t\t.attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n\t\tgArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n\t\t\t.classed(\"got-connector-arrow-path\", true)\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"stroke\", \"white\")\n\t\t\t.attr(\"stroke-width\", 1.5)\n\t\t\t.attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3))\n\t\t\t\t+ \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3))\n\t\t\t\t+ \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n\t\t\t);\n\n\t\t// Ghost Drop Zone (Sibling) Backer\n\t\tgtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n\t\t\t.selectAll(\"rect\")\n\t\t\t.data(descends)\n\t\t\t.join(\"rect\")\n\t\t\t.filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n\t\t\t.classed(\"svg-sibling-ghost-backer-dz\", true)\n\t\t\t.attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n\t\t\t.attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n\t\t\t.attr(\"width\", SvgHierarchyType.gotRectW)\n\t\t\t.attr(\"height\", SvgHierarchyType.gotRectH)\n\t\t\t.attr(\"fill\", \"white\")\n\n\t\t// Ghost Drop Zone (Sibling) Body Rectangle\n\t\tgtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n\t\t\t.selectAll(\"rect\")\n\t\t\t.data(descends)\n\t\t\t.join(\"rect\")\n\t\t\t.filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n\t\t\t.classed(\"svg-sibling-ghost-body-dz\", true)\n\t\t\t.attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n\t\t\t.attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n\t\t\t.attr(\"width\", SvgHierarchyType.gotRectW)\n\t\t\t.attr(\"height\", SvgHierarchyType.gotRectH)\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"stroke\", \"#6BA542\")\n\t\t\t.attr(\"stroke-width\", \"1\")\n\t\t\t.attr(\"stroke-dasharray\", \"5,5\")\n\t\t\t.attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n\n\t\t// GeoObjectType label\n\t\tgtree.append(\"g\").classed(\"g-got-codelabel\", true)\n\t\t\t.attr(\"font-family\", \"sans-serif\")\n\t\t\t.attr(\"font-size\", 8)\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\n\t\t\t.attr(\"stroke-width\", 3)\n\t\t\t.selectAll(\"foreignObject\")\n\t\t\t.data(descends)\n\t\t\t.join(\"foreignObject\")\n\t\t\t.classed(\"svg-got-label-text\", true)\n\t\t\t.attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n\t\t\t.attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n\t\t\t.attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n\t\t\t.attr(\"height\", SvgHierarchyType.gotRectH - 4)\n\t\t\t// .filter(function(d: any) {\n\t\t\t// \treturn calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n\t\t\t// })\n\t\t\t// .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n\t\t\t.attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n\t\t\t.attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n\t\t\t.attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n\t\t\t.append(\"xhtml:p\")\n\t\t\t.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t.attr(\"text-align\", \"left\")\n\t\t\t.style(\"vertical-align\", \"middle\")\n\t\t\t.style(\"display\", \"table-cell\")\n\t\t\t.style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n\t\t\t.style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n\t\t\t.html((d: any) => d.data.label)\n\t\t\t//.filter(function(d: any) {\n\t\t\t//\treturn calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n\t\t\t//})\n\t\t\t//.style(\"font-size\", \"8px\");\n\n\t\tlet headerg;\n\t\tif (this.isPrimary) {\n\t\t\tgtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n\t\t\t\t.selectAll(\"text\")\n\t\t\t\t.data(descends)\n\t\t\t\t.join(\"text\")\n\t\t\t\t.filter(function(d: any) {\n\t\t\t\t\treturn (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n\t\t\t\t})\n\t\t\t\t.classed(\"svg-got-relatedhiers-button\", true)\n\t\t\t\t.attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n\t\t\t\t.attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - 20)\n\t\t\t\t.attr(\"y\", (d: any) => d.y + 5)\n\t\t\t\t.style(\"font-family\", \"FontAwesome\")\n\t\t\t\t.style(\"cursor\", \"pointer\")\n\t\t\t\t.text('\\uf0c1')\n\t\t\t\t.on('click', function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n\t\t\theaderg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n\t\t}\n\t\telse {\n\t\t\theaderg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n\t\t}\n\n\n\t\tlet paddingTop = (headerg.node().getBBox().height + 20);\n\t\t//gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n\t}\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a (click)=\"toggle()\"> <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span *ngIf=\"show\">\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-page',\n    templateUrl: './data-page.component.html',\n    styleUrls: ['./data-page.css']\n} )\nexport class DataPageComponent implements OnInit {\n\n\tcontent: string = \"SPREADSHEET\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SPREADSHEET\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n\t\t}\n\t\telse if(content === \"SHAPEFILE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"shapefile.title\");\n\t\t}\n\t\telse if(content === \"EXPORT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"io.export.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">Import spreadsheet</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">Import shapefile</a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from '@shared/service';\nimport { ExternalSystem } from '@shared/model/core';\n\nimport { SpreadsheetModalComponent } from './modals/spreadsheet-modal.component';\nimport { ShapefileModalComponent } from './modals/shapefile-modal.component';\nimport { IOService } from '@registry/service';\nimport { ImportStrategy } from '@registry/model/registry';\n\ndeclare var acp: string;\n\n@Component({\n\n\tselector: 'dataimporter',\n\ttemplateUrl: './dataimporter.component.html',\n\tstyleUrls: ['./dataimporter.css']\n})\nexport class DataImporterComponent implements OnInit {\n\n\tshowImportConfig: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n\timportStrategy: ImportStrategy;\n\timportStrategies: any[] = [\n\t\t{ \"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n\t\t{ \"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n\t\t{ \"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n\t]\n\n    /*\n     * Currently selected code\n     */\n\tcode: string = null;\n\n    /*\n     * Currently start date\n     */\n\tstartDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n\tuploader: FileUploader;\n\n\t@ViewChild('myFile')\n\tfileRef: ElementRef;\n\n\t@Input()\n\tformat: string; // Can be SHAPEFILE or EXCEL\n\n\tisExternal: boolean = false;\n\n\t/*\n\t * List of available external systems (filtered based on user's org)\n\t */\n\texternalSystems: ExternalSystem[];\n\n\t/*\n\t * currently selected external system.\n\t */\n\texternalSystemId: string;\n\n\tisLoading: boolean = true;\n\n\tconstructor(private service: IOService,\n\t\tprivate eventService: EventService,\n\t\tprivate modalService: BsModalService,\n\t\tprivate localizationService: LocalizationService,\n\t\tprivate authService: AuthService,\n\t\tprivate sysService: ExternalSystemService\n\t) { }\n\n\tngOnInit(): void {\n\t\tthis.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n\n\t\t\tthis.externalSystems = paginatedSystems.resultSet;\n\n\t\t\tif (this.externalSystems.length === 0) {\n\t\t\t\tthis.isExternal = false;\n\t\t\t\tthis.showImportConfig = true; // Show the upload widget if there are no external systems registered\n\t\t\t}\n\n\t\t\tthis.isLoading = false;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.service.listGeoObjectTypes(false).then(types => {\n\n\t\t\tconst myOrgTypes = [];\n\n\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\tconst type = types[i];\n\t\t\t\tconst orgCode = type.orgCode;\n\t\t\t\tconst typeCode = type.superTypeCode != null ? type.superTypeCode : type.code;\n\n\t\t\t\tif (this.authService.isOrganizationRA(orgCode) || this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.types = myOrgTypes;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tvar getUrl = acp + '/excel/get-configuration';\n\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\tgetUrl = acp + '/shapefile/get-shapefile-configuration';\n\n\t\t\t//this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n\t\t}\n\n\t\tlet options: FileUploaderOptions = {\n\t\t\tqueueLimit: 1,\n\t\t\tremoveAfterUpload: true,\n\t\t\turl: getUrl\n\t\t};\n\n\t\tthis.uploader = new FileUploader(options);\n\n\t\tthis.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n\t\t\tform.append('type', this.code);\n\n\t\t\tif (this.startDate != null) {\n\t\t\t\tform.append('startDate', this.startDate);\n\t\t\t}\n\t\t\tif (this.importStrategy) {\n\t\t\t\tform.append('strategy', this.importStrategy)\n\t\t\t}\n\t\t};\n\t\tthis.uploader.onBeforeUploadItem = (fileItem: any) => {\n\t\t\tthis.eventService.start();\n\t\t};\n\t\tthis.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n\t\t\tthis.fileRef.nativeElement.value = \"\";\n\t\t\tthis.eventService.complete();\n\t\t};\n\t\tthis.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst configuration = JSON.parse(response);\n\n\t\t\tconfiguration.isExternal = this.isExternal;\n\n\t\t\tlet externalSystem: ExternalSystem = null;\n\t\t\tfor (let i = 0; i < this.externalSystems.length; ++i) {\n\t\t\t\tlet sys: ExternalSystem = this.externalSystems[i];\n\n\t\t\t\tif (sys.oid === this.externalSystemId) {\n\t\t\t\t\texternalSystem = sys;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconfiguration.externalSystemId = this.externalSystemId;\n\t\t\tconfiguration.externalSystem = externalSystem;\n\n\t\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\t\tthis.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.configuration = configuration;\n\t\t};\n\t\tthis.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst error = JSON.parse(response)\n\n\t\t\tthis.error({ error: error });\n\t\t}\n\t}\n\n\tonClick(): void {\n\n\t\tif (this.uploader.queue != null && this.uploader.queue.length > 0) {\n\t\t\tthis.uploader.uploadAll();\n\t\t}\n\t\telse {\n\t\t\tthis.error({\n\t\t\t\tmessage: this.localizationService.decode('io.missing.file'),\n\t\t\t\terror: {},\n\t\t\t});\n\t\t}\n\t}\n\n\tsetImportSource(event, type): void {\n\t\tif (type === \"EXTERNAL\") {\n\t\t\tthis.isExternal = true;\n\t\t}\n\t\telse {\n\t\t\tthis.isExternal = false;\n\t\t}\n\t}\n\n\tonNext(): void {\n\t\tthis.showImportConfig = true;\n\t}\n\n\tonBack(): void {\n\t\tthis.showImportConfig = false;\n\t}\n\n\n\tpublic error(err: any): void {\n\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"types\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                    <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n                    <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\">\n                        <localize key=\"io.back\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListByOrg } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n@Component({\n\tselector: 'master-list-manager',\n\ttemplateUrl: './master-list-manager.component.html',\n\tstyleUrls: ['./master-list-manager.css']\n})\nexport class MasterListManagerComponent implements OnInit {\n\tmessage: string = null;\n\torgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private localizeService: LocalizationService) { }\n\n\tngOnInit(): void {\n\n\t\tthis.service.getMasterListsByOrg().then(response => {\n\t\t\tthis.orgs = response.orgs;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonCreate(org: MasterListByOrg): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.init(org);\n\t\tthis.bsModalRef.content.isNew = true;\n\t\tthis.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n\t\t\tconst obj = {\n\t\t\t\tlabel: list.displayLabel.localizedValue,\n\t\t\t\toid: list.oid,\n\t\t\t\tcreateDate: list.createDate,\n\t\t\t\tlastUpdateDate: list.lastUpdateDate,\n\t\t\t\tisMaster: list.isMaster,\n\t\t\t\twrite: list.admin,\n\t\t\t\tread: list.admin,\n\t\t\t\tvisibility: list.visibility\n\t\t\t};\n\n\t\t\torg.lists.push(obj);\n\t\t});\n\t}\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-view/', code])\n\t}\n\n\tonEdit(pair: { label: string, oid: string }): void {\n\t\tthis.service.getMasterList(pair.oid).then(list => {\n\n\t\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tthis.bsModalRef.content.edit = true;\n\t\t\tthis.bsModalRef.content.readonly = !list.write;\n\t\t\tthis.bsModalRef.content.master = list;\n\t\t\tthis.bsModalRef.content.isNew = false;\n\n\t\t\tthis.bsModalRef.content.onMasterListChange.subscribe(ret => {\n\t\t\t\tpair.label = ret.displayLabel.localizedValue;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + list.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = \"danger\";\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterList(list.oid).then(response => {\n\t\t\t\torg.lists = org.lists.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== list.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                    <span>\n                                      (\n                                      <localize *ngIf=\"list.visibility === 'PUBLIC'\" key=\"masterlist.public\"></localize>\n                                      <localize *ngIf=\"list.visibility === 'PRIVATE'\" key=\"masterlist.private\"></localize>\n                                      )\n                                    </span>                                    \n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\n\n@Component( {\n    selector: 'export-format-modal',\n    templateUrl: './export-format-modal.component.html',\n    styleUrls: []\n} )\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next( this.format );\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"export-modal.title\"></localize>\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ChangeRequest, AbstractAction, AddChildAction, SetParentAction, CreateGeoObjectAction, RemoveChildAction, UpdateGeoObjectAction } from '@registry/model/crtable';\n\nimport { ChangeRequestService } from '@registry/service';\nimport { LocalizationService } from '@shared/service';\nimport { ActionDetailModalComponent } from './action-detail/action-detail-modal.component'\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\n@Component( {\n\n    selector: 'request-table',\n    templateUrl: './request-table.component.html',\n    styleUrls: ['./request-table.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class RequestTableComponent {\n\n\tobjectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n\trequests: ChangeRequest[] = [];\n\n\tactions: AbstractAction[] | SetParentAction[] | AddChildAction[] | CreateGeoObjectAction[] | RemoveChildAction[] | UpdateGeoObjectAction[];\n\n\tcolumns: any[] = [];\n\t\n\ttoggleId: string;\n\n\tfilterCriteria: string = 'ALL';\n\n    constructor( private service: ChangeRequestService, private modalService: BsModalService, private localizationService: LocalizationService ) {\n        this.columns = [\n            { name: localizationService.decode( 'change.request.user' ), prop: 'createdBy', sortable: false },\n            { name: localizationService.decode( 'change.request.createDate' ), prop: 'createDate', sortable: false, width: 195 },\n            { name: localizationService.decode( 'change.request.status' ), prop: 'approvalStatus', sortable: false }\n        ];\n\n        this.refresh();\n    }\n\n    refresh(): void {\n\n            this.service.getAllRequests(\"ALL\").then( requests => {\n\n\t\t\t\tthis.requests = requests;\n\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } )\n\n    }\n\n\n    onSelect( selected: any ): void {\n\n\t\t// this.request = selected.selected;\n\n        this.service.getAllActions( selected.selected[0].oid ).then(actions => {\n\t\t\t\n\t\t\tthis.actions = actions;\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.execute( changeRequest.oid ).then( request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n\t}\n\t\n\t// onConfirmChangeRequest(request: any): void {\n\n    //     if ( request != null ) {\n    //         this.service.confirmChangeRequest( request.oid ).then( request => {\n    //             this.request = request;\n\n    //             // TODO: Determine if there is a way to update an individual record\n    //             this.refresh();\n    //         } ).catch(( response: HttpErrorResponse ) => {\n    //             this.error( response );\n    //         } );\n    //     }\n\t// }\n\t\n\tapplyActionStatusProperties(action: any ): void {\n\t\t// var action = JSON.parse(JSON.stringify(this.action));\n\t\t// action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n\t\tthis.service.applyActionStatusProperties(action).then( response => {\n\t\t\t// this.crtable.refresh()\n\t\t} ).catch(( err: HttpErrorResponse ) => {\n\t\t\tthis.error( err );\n\t\t} );\n\t}\n\n    onApproveAll(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.approveAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    onRejectAll(changeRequest: ChangeRequest): void {\n        if ( changeRequest != null ) {\n            this.service.rejectAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n\n                // TODO: Determine if there is a way to update an individual record\n                // this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\t\n\trequestTrackBy(index: number, request: ChangeRequest) {\n    \treturn request.oid;\n\t}\n\t\n\ttoggle(event: any, oid: string): void {\n\n\t\tif(!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")){\n\t\t\tif(this.toggleId === oid){\n\t\t\t\tthis.toggleId = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggleId = oid;\n\t\t\t\tthis.onSelect({selected:[{oid:oid}]});\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(criteria: string): void {\n\n\t\t   this.service.getAllRequests(criteria).then( requests => {\n\t\t\t\tthis.requests = requests;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n\t\t\t} )\n\t\t\t\n\t\tthis.filterCriteria = criteria;\n\t}\n\n\tsetActionStatus(action: AbstractAction, status:string): void {\n\t\taction.approvalStatus = status;\n\n\t\tthis.applyActionStatusProperties(action);\n\t}\n\n\tgetActiveDetailComponent(action: AbstractAction) : any {\n      // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n      if (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\n      {\n        // return this.cuDetail;\n      }\n    //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n    //   {\n    //     return this.arDetail;\n\t//   }\n\t\n\t  return action;\n\t}\n\t\n    showActionDetail( action: any ) {\n\n\t\tthis.bsModalRef = this.modalService.show( ActionDetailModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\t\tthis.bsModalRef.content.curAction = action;\n      \n    //   var detail = this.getActiveDetailComponent();\n    //   if (detail != null)\n    //   {\n        // action.onSelect(action);\n    //   }\n    }\n\n}\n","<!-- <div class=\"row text-center\">\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"change.request.title\"></localize>\n        </h2>\n    </div>\n</div> -->\n\n<!-- <div class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            <localize key=\"change.request.table.title\"></localize>\n        </h3>\n    </div>\n</div> -->\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\t\t<div class=\"form-group button-row\">\n\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" >\n\t\t\t\t<localize key=\"change.request.all.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.pending.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.accepted.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;\" >\n\t\t\t\t<localize key=\"change.request.rejected.filter.link\"></localize>\n\t\t\t</a>\n\n\t\t</div>\n\n\t\t<hr style=\"border-top:solid 3px #6BA542\" />\n\n\t</div>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\n\t<table class=\"table\">\n\t\t<thead>\n\t\t\t<tr style=\"height: 50px;color: grey;\">\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n\t\t\t\t<!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n        <tbody>\n\t\t\t<ng-template ngFor let-req [ngForOf]=\"requests\" [ngForTrackBy]=\"requestTrackBy\">\n\t\t\t\t<tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n                \t<td class=\"col-md-4\">\n\t\t\t\t\t\t<h5><strong>{{req.createdBy}}</strong></h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n\t\t\t\t\t\t {{req.createDate}}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\">\n\t\t\t\t\t\t<h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n\t\t\t\t\t\t\t <strong>{{req.approvalStatus}}</strong>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!-- <td class=\"col-md-3\">\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onConfirmChangeRequest(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t</button>\t\n\t\t\t\t\t</td> -->\n\t\t\t\t\t<td class=\"col-md-1\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\">\n            \t\t<td colspan=\"5\" >\n\n\t\t\t\t\t\t<div class=\"row\" style=\"margin:0;\">\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\n\t\t\t\t\t\t\t\t<div *ngFor=\"let action of actions\" class=\"action-card\" [ngClass]=\"{'status-pending-container':action.approvalStatus === 'PENDING', 'status-accepted-container':action.approvalStatus === 'ACCEPTED', 'status-rejected-container':action.approvalStatus === 'REJECTED'}\" style=\"margin-bottom:10px; background-color:white;\"> \n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"margin:0; padding-top:5px; padding-bottom:5px;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-3\" style=\"border-right:2px grey solid; height:50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-circle\" style=\"float:left; line-height: 50px;\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"vertical-center\" style=\"margin:0; float:left; padding-left:20px;\">{{req.createdBy}}</h4>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" style=\"height: 50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"fa fa-refresh vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"fa fa-plus vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"fa fa-link vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"fa fa-chain-broken vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Update <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ]</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Create <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ] </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.SetParentAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set parents of <b>{{action.childCode}}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set <b>{{action.childTypeCode}}</b> as a child of <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Remove <b>{{action.childTypeCode}}</b> from <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-4\" style=\"height: 50px;text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t\t<h4 *ngIf=\"req.approvalStatus !== 'PENDING'\" class=\"vertical-center\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" style=\"margin: 0;\">{{action.approvalStatus}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'ACCEPTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'ACCEPTED')\" class=\"btn btn-primary vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.accept.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'ACCEPTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'REJECTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'REJECTED')\" class=\"btn btn-danger vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.reject.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'REJECTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'PENDING'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'PENDING')\" class=\"btn btn-warning vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.pending.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'PENDING'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"height: 150px;border-top: 1px grey solid;margin:0;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.contributorNotes\" readonly=\"true\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.maintainerNotes\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-2\" style=\"height:100%;\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" (click)=\"showActionDetail(action)\" class=\"btn btn-default vertical-center\" style=\"width:100%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.action.details.label\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> <!-- END action-card -->\n\n\t\t\t\t\t\t\t\t<!-- <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\">Change Request Notes</label>\n\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" value=\"\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t</div>\t -->\n\n\t\t\t\t\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onApproveAll(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll(req)\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\t\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.changes.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</td>\n        \t\t</tr>\n\t\t\t</ng-template>\n        </tbody>\n\t</table>\n\t</div>\t \n</div>\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component( {\n    selector: 'action-detail-modal',\n    templateUrl: './action-detail-modal.component.html',\n    styleUrls: []\n} )\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    @ViewChild( \"cuDetail\" ) cuDetail: ActionDetailComponent;\n    @ViewChild( \"arDetail\" ) arDetail: ActionDetailComponent;\n    @ViewChild( \"spDetail\" ) spDetail: ActionDetailComponent;\n\n    @Input()\n    set curAction( action: any ) {\n        this.action = action;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if ( this.cuDetail != null ) {\n            this.cuDetail.endEdit();\n        }\n\n        if ( this.arDetail != null ) {\n            this.arDetail.endEdit();\n        }\n\n        if ( this.spDetail != null ) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit, Input, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\n\nimport { GeoObjectType, Attribute, ValueOverTime, GeoObjectOverTime, AttributeTerm, PRESENT } from '@registry/model/registry';\n\nimport { RegistryService, IOService } from '@registry/service';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component( {\n    selector: 'manage-versions-modal',\n    templateUrl: './manage-versions-modal.component.html',\n    styleUrls: ['./manage-versions-modal.css'],\n    host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger( 'fadeInOut', [\n                transition( 'void => *', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] ),\n                transition( '* => void', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] )\n            ] )\n        ]]\n} )\nexport class ManageVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    readonly: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onAttributeVersionChange: Subject<GeoObjectOverTime>;\n\n    @Input() attribute: Attribute;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObjectOverTime: GeoObjectOverTime;\n\n    goGeometries: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    newVersion: ValueOverTime;\n\n    editingGeometry: number = -1;\n\n    hasDuplicateDate: boolean = false;\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService,\n        public bsModalRef: BsModalRef, public changeDetectorRef: ChangeDetectorRef ) { }\n\n    ngOnInit(): void {\n\n        this.onAttributeVersionChange = new Subject();        \n    }\n\n    tfInit(): void {\n      if ( this.attribute.code === 'geometry' && this.geoObjectOverTime.attributes[this.attribute.code].values.length === 1 ) {\n        this.editingGeometry = 0;\n      }\n    }\n    \n    geometryChange(vAttribute, event): void {\n      vAttribute.value = event;\n    }\n\n    onDateChange( event: any, vAttribute: ValueOverTime ): any {\n\n        //        console.log( event.currentTarget.value );\n        //\n        //        let dt = new Date( event.currentTarget.value );\n        //let dt = new Date(event);\n\n        let vAttributes = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        //        vAttribute.startDate = Utils.formatDateString( dt );\n\n        this.snapDates( vAttributes );\n\n        //        this.changeDetectorRef.detectChanges();\n    }\n\n    snapDates( votArr: ValueOverTime[] ): void {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data by start date \n        votArr.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n        for ( let i = 1; i < votArr.length; i++ ) {\n            let prev = votArr[i - 1];\n            let current = votArr[i];\n\n            if ( current.startDate ) {\n                prev.endDate = Utils.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n            }\n            else {\n                prev.endDate = PRESENT;\n            }\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( votArr.length > 0 ) {\n            votArr[votArr.length - 1].endDate = PRESENT;\n        }\n    }\n\n    onAddNewVersion(): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null;  // Utils.formatDateString(new Date());\n        vot.endDate = null;  // Utils.formatDateString(new Date());\n\n        if ( this.attribute.type === \"local\" ) {\n            //   vot.value = {\"localizedValue\":null,\"localeValues\":[{\"locale\":\"defaultLocale\",\"value\":null},{\"locale\":\"km_KH\",\"value\":null}]};\n            vot.value = this.lService.create();\n        }\n        else if ( this.attribute.type === 'geometry' ) {\n\n            if ( votArr.length > 0 ) {\n                if ( this.editingGeometry != -1 && this.editingGeometry != null ) {\n                    vot.value = votArr[this.editingGeometry].value;\n                }\n                else {\n                    vot.value = votArr[0].value;\n                }\n            }\n            else {\n                vot.value = { \"type\": this.geoObjectType.geometryType, \"coordinates\": [] };\n\n                if ( this.geoObjectType.geometryType === \"MULTIPOLYGON\" ) {\n                    vot.value.type = \"MultiPolygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POLYGON\" ) {\n                    vot.value.type = \"Polygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POINT\" ) {\n                    vot.value.type = \"Point\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTIPOINT\" ) {\n                    vot.value.type = \"MultiPoint\";\n                }\n                else if ( this.geoObjectType.geometryType === \"LINE\" ) {\n                    vot.value.type = \"Line\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTILINE\" ) {\n                    vot.value.type = \"MultiLine\";\n                }\n            }\n        }\n        else if ( this.attribute.type === 'term' ) {\n            var terms = this.getGeoObjectTypeTermAttributeOptions( this.attribute.code );\n\n            if ( terms.length > 0 ) {\n                vot.value = terms[0].code;\n            }\n        }\n\n        votArr.push( vot );\n\n        if ( this.attribute.code === 'geometry' ) {\n            this.editingGeometry = votArr.length - 1;\n        }\n\n        this.snapDates( votArr );\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    editGeometry( index: number ) {\n        this.editingGeometry = index;\n    }\n\n    getVersionData( attribute: Attribute ) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach( vAttribute => {\n            vAttribute.value.localeValues.forEach( val => {\n                versions.push( val );\n            } )\n        } )\n        return versions;\n    }\n\n    getDefaultLocaleVal( locale: any ): string {\n        let defVal = null;\n\n        locale.localeValues.forEach( locVal => {\n            if ( locVal.locale === 'defaultLocale' ) {\n                defVal = locVal.value;\n            }\n\n        } )\n\n        return defVal;\n    }\n\n    setDateAttribute( vot: ValueOverTime, val: string ): void {\n        vot.value = new Date( val ).getTime().toString()\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if ( attrOpts.length > 0 ) {\n                    if ( attr.code === \"status\" ) {\n                        return Utils.removeStatuses(attrOpts);\n                    }\n                    else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    remove( version: any ): void {\n\n        let val = this.geoObjectOverTime.attributes[this.attribute.code];\n\n        for ( let i = 0; i < val.values.length; i++ ) {\n            let vals = val.values[i];\n\n            if ( vals.startDate === version.startDate ) {\n                val.values.splice( i, 1 );\n            }\n        }\n\n        this.snapDates( val.values );\n    }\n\n    isChangeOverTime( attr: Attribute ): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach( attribute => {\n            if ( this.attribute.code === attr.code ) {\n                isChangeOverTime = attr.isChangeOverTime\n            }\n        } )\n\n        return isChangeOverTime;\n    }\n\n    onSubmit(): void {\n\n        this.onAttributeVersionChange.next( this.geoObjectOverTime );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #versionsform=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\">\n\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"width: 100%;border: none;\">\n                    <div *ngIf=\"geoObjectOverTime\" >\n\n                        <div class=\"panel\" style=\"box-shadow: none;\">\n                            <div class=\"panel-body\">\n                                <ul class=\"list-group\">\n                                    <!-- <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> -->\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        \n                                        <div *ngIf=\"attribute.type !== 'geometry'\">\n                                                <table class=\"table table-striped\"> \n                                                    <thead style=\"font-size: 14px;\"> \n                                                        <tr> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                            <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                            <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                                        </tr> \n                                                    </thead> \n\n                                                    <tbody *ngIf=\"attribute.type === 'local'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\" >\n                                                            <td >\n                                                                <table style=\"width: 100%;\">\n                                                                    <tr *ngFor=\"let loc of vAttribute.value.localeValues; let idx = index;\" > \n                                                                        <td style=\"vertical-align: bottom; width: 35%;padding: 0; padding-top:5px;\">\n                                                                            <h5>{{loc.locale}}</h5>\n                                                                            <input type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"loc.value = $event\" [required]=\"loc.locale === 'defaultLocale'\">\n                                                                            <div class=\"form-input-validation-error-message-wrapper\">\n                                                                                <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">Value is required.</p>\n                                                                            </div>\n                                                                        </td> \n                                                                    </tr>\n                                                                </table>\n                                                            </td>\n\n                                                            <td style=\"width: 35%;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate_' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                                <div class=\"form-input-validation-error-message-wrapper\">\n                                                                    <p *ngIf=\"!vAttribute.startDate\" class=\"error-message\">Start date is required.</p>\n                                                                </div>\n                                                            </td> \n                                                            <td style=\"width: 20%;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle; width: 10%;padding: 5px; text-align: center;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n\n                                                    <!-- TODO: This isn't getting the options on load -->\n                                                    <tbody *ngIf=\"attribute.type === 'term'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                <!-- <h5>{{loc.locale}}</h5> -->\n                                                                <!-- <input type=\"text\" class=\"form-control\" id=\"loc-val-{{i}}\" name=\"loc-val-{{i}}\" [(ngModel)]=\"version.value\" (ngModelChange)=\"version.value = $event\"> -->\n                                                                <select id=\"mod-{{attribute.code}}\" [name]=\"'mod-term-' + i + '-' + attribute.code\" class=\"select-area\" style=\"float:none;\" [(ngModel)]=\"vAttribute.value\">\n                                                                    <option value=\"\" ></option>\n                                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attribute.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                                </select>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'character'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'date'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"date\" class=\"form-control\" [name]=\"'char-val-' + i\" [ngModel]=\"vAttribute.value | date:'yyyy-MM-dd'\" (ngModelChange)=\"setDateAttribute(vAttribute, $event)\" required> \n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'boolean'\">\n\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === true\" [value]=\"true\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\">\n                                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                                </label>\n\n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === false\"  [value]=\"false\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\">\n                                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                                </label>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n\n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'float'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'integer'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n                                            </table>\n                                        </div> \n\n                                        <div *ngIf=\"attribute.type === 'geometry'\">\n                                           <table class=\"table table-striped\">\n                                             <thead style=\"font-size: 14px;\">\n                                               <th style=\"width:60%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                               <th style=\"width:20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                               <th style=\"width:10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                               <th style=\"width: 10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                             </thead>\n                                             <tbody style=\"text-align: center;\">\n                                               <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\">\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <button *ngIf=\"this.editingGeometry != i\" class=\"btn\" (click)=\"editGeometry(i)\" role=\"button\"><localize key=\"changeovertime.manageVersions.geometry.edit\"></localize></button>\n                                                   <geoobject-editor-map *ngIf=\"this.editingGeometry === i\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" (geometryChange)=\"this.geometryChange(vAttribute, $event);\" [readOnly]=\"!geoObjectType.isGeometryEditable\" [postGeometry]=\"vAttribute.value\" [bboxCode]=\"this.geoObjectOverTime.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"vAttribute.startDate\"></geoobject-editor-map>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <input type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                 </td>\n                                               </tr>\n                                              </tbody>\n                                          </table>\n                                        </div>\n\n                                    </li>\n\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\">\n                                            <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                                        </i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none;width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button> -->\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!versionsform.valid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n\t      var newArray = [];\n\t      \n\t      for ( var i = 0; i < arr.length; ++i ) {\n\t        if (! (arr[i].code === \"CGR:Status-New\"\n\t             || arr[i].code === \"CGR:Status-Pending\"))\n\t        {\n\t          newArray.push(arr[i]);\n\t        }\n\t      }\n\t      \n\t      return newArray;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n    \n}","\nimport { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-edit-control',\n  templateUrl: './simple-edit-control.component.html',\n})\nexport class SimpleEditControl {\n  elRef: ElementRef\n  \n  @Input() visible = false;\n  \n  @Output() editEmitter = new EventEmitter<void>();\n  \n  constructor(elRef: ElementRef) {\n    this.elRef = elRef;\n  }\n\n  onAdd(map): any {\n    this.visible = true;\n    return this.elRef.nativeElement;\n  }\n  \n  onRemove(map): void {\n    this.elRef.nativeElement.remove();\n  }\n  \n  onClick(): void {\n    this.editEmitter.emit();\n  }\n}\n","<div *ngIf=\"this.visible\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button class=\"fa fa-pencil-square-o\" style=\"color: black; font-size: 18px;\" title=\"location.management.editing | localize\" (click)=\"this.onClick();\"></button>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'geoObjectAttributeExcludesFilter',\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n       \n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { HierarchyOverTime, PRESENT } from '@registry/model/registry';\n\nimport { RegistryService } from '@registry/service';\n\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n    selector: 'manage-parent-versions-modal',\n    templateUrl: './manage-parent-versions-modal.component.html',\n    styleUrls: []\n} )\nexport class ManageParentVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onVersionChange: Subject<HierarchyOverTime>;\n\n    hierarchy: HierarchyOverTime = null;\n\n    hasDuplicateDate: boolean = false;\n\n\n    constructor( private service: RegistryService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onVersionChange = new Subject();\n\n    }\n\n    init( hierarchy: HierarchyOverTime ): void {\n        this.hierarchy = hierarchy;\n    }\n\n    onAddNewVersion(): void {\n\n        let parents = {};\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parents[current.code] = {};\n        }\n\n        const entry = {\n            startDate: null,\n            endDate: null,\n            parents: parents\n        }\n\n        this.hierarchy.entries.push( entry );\n    }\n\n    remove( entry: any ): void {\n\n        for ( let i = 0; i < this.hierarchy.entries.length; i++ ) {\n            let vals = this.hierarchy.entries[i];\n\n            if ( vals.startDate === entry.startDate ) {\n                this.hierarchy.entries.splice( i, 1 );\n            }\n        }\n\n        this.snapDates();\n    }\n\n    getTypeAheadObservable( date: string, type: any, entry: any, index: number ): Observable<any> {\n\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let hierarchyCode = null;\n\n        if ( index > 0 ) {\n            let pType = this.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if ( parent.geoObject != null && parent.geoObject.properties.code != null ) {\n                hierarchyCode = this.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n            }\n        }\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( entry.parents[type.code].text, geoObjectTypeCode, parentCode, hierarchyCode, date ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, type: any, entry: any, date: string ): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        let parentTypes = [];\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parentTypes.push( current.code );\n\n            if ( current.code === type.code ) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects( e.item.uid, type.code, parentTypes, true, date ).then( ancestors => {\n\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + ' : ' + ancestors.geoObject.properties.code;\n\n            for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n                let current = this.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while ( ancestor != null && ancestor.geoObject.properties.type != current.code ) {\n                    if ( ancestor.parents.length > 0 ) {\n                        ancestor = ancestor.parents[0];\n                    }\n                    else {\n                        ancestor = null;\n                    }\n                }\n\n                if ( ancestor != null ) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue  + ' : ' + ancestor.geoObject.properties.code;\n                }\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSubmit(): void {\n\n        this.onVersionChange.next( this.hierarchy );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    onDateChange( event: any ): any {\n        this.snapDates();\n    }\n\n    snapDates() {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data\n        this.hierarchy.entries.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n\n        for ( let i = 1; i < this.hierarchy.entries.length; i++ ) {\n            let prev = this.hierarchy.entries[i - 1];\n            let current = this.hierarchy.entries[i];\n\n            prev.endDate = this.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( this.hierarchy.entries.length > 0 ) {\n            this.hierarchy.entries[this.hierarchy.entries.length - 1].endDate = PRESENT;\n        }\n    }\n\n    formatDateString( dateObj: Date ): string {\n        const day = dateObj.getUTCDate();\n\n        return dateObj.getUTCFullYear() + \"-\" + ( dateObj.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n      <h5>{{model.name }} : {{ model.code }}</h5>\n    </ng-template>\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"holder\" style=\"width: 100%; border: none;\">\n                    <div class=\"panel\" style=\"box-shadow: none;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\" *ngIf=\"hierarchy != null\">\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                    <table class=\"table table-striped\">\n                                        <thead style=\"font-size: 14px;\">\n                                            <tr>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let entry of hierarchy.entries; let i = index;\">\n                                                <td>\n                                                \n                                                  <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let type of hierarchy.types; let j = index\">\n                                                    {{type.label}}\n                                                    \n                                                    <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                                      name=\"{{type.code}}-{{i}}\"\n                                                      [disabled]=\"entry.startDate == null || entry.startDate === ''\"\n                                                      [(ngModel)]=\"entry.parents[type.code].text\" \n                                                      [typeaheadAsync]=\"true\"\n                                                      [typeahead]=\"getTypeAheadObservable(entry.startDate, type, entry, j)\"\n                                                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, type, entry, entry.startDate)\" \n                                                      [typeaheadOptionsLimit]=\"7\"\n                                                      [typeaheadItemTemplate]=\"customItemTemplate\" \n                                                      [typeaheadMinLength]=\"0\"\n                                                      [typeaheadWaitMs]=\"300\"\n                                                      required>\n                                                  </div>\n                                                \n                                                </td>\n                                                <td style=\"vertical-align: bottom;\">\n                                                  <input style=\"width: 100%;\" type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"entry.startDate\" (blur)=\"snapDates()\" required />\n                                                </td> \n                                                <td style=\"vertical-align: bottom;\">\n                                                  <p *ngIf=\"entry.startDate != null && entry.startDate !== ''\" style=\"font-size: 14px;\"> {{entry.endDate | date:'MM-dd-yyyy'}} </p>\n                                                </td>\n                                                <td style=\"vertical-align: middle; width: 10%; padding: 5px; text-align: center;\">\n                                                  <i class=\"fa fa-times delete-btn\" (click)=\"remove(entry)\"></i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </li>\n\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                  <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"><localize key=\"changeovertime.manageVersions.newVersion\"></localize></i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none; width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\" >\n                            <localize key=\"io.cancel\"></localize>\n                        </button> -->\n                        <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid || hasDuplicateDate\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService, AuthService } from '@shared/service';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'change-request-page',\n    templateUrl: './change-request-page.component.html',\n    styleUrls: ['./change-request-page.css']\n} )\nexport class ChangeRequestPageComponent implements OnInit {\n\n\tcontent: string = \"SUBMIT\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"MANAGE\") : this.renderContent(\"SUBMIT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SUBMIT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.page.title\");\n\t\t}\n\t\telse if(content === \"MANAGE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.table.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'MANAGE'}\" (click)=\"renderContent('MANAGE')\">Manage</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isContributor\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SUBMIT'}\" (click)=\"renderContent('SUBMIT')\">Submit</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<submit-change-request *ngIf=\"content === 'SUBMIT'\"></submit-change-request>\n\t\t\t\t\t<request-table *ngIf=\"content === 'MANAGE'\"></request-table>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { MasterListVersion } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { ExportFormatModalComponent } from './export-format-modal.component';\nimport { GeoObjectEditorComponent } from '../geoobject-editor/geoobject-editor.component';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService, AuthService, ProgressService } from '@shared/service';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'master-list',\n\ttemplateUrl: './master-list.component.html',\n\tstyleUrls: []\n})\nexport class MasterListComponent implements OnInit, OnDestroy {\n\tmessage: string = null;\n\tlist: MasterListVersion = null;\n\tp: number = 1;\n\tcurrent: string = '';\n\tfilter: { attribute: string, value: string, label: string }[] = [];\n\tselected: string[] = [];\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 100,\n\t\tresults: []\n\t};\n\tsort = { attribute: 'code', order: 'ASC' };\n\tisPublished: boolean = true;\n\tisRefreshing: boolean = false;\n\tisWritable: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpublic searchPlaceholder = \"\";\n\n\tnotifier: WebSocketSubject<{ type: string, content: any }>;\n\n\n\tconstructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, private authService: AuthService) {\n\n\t\tthis.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\t\tthis.isPublished = (this.route.snapshot.paramMap.get('published') == \"true\");\n\n\t\tthis.service.getMasterListVersion(oid).then(version => {\n\t\t\tthis.list = version;\n\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\tattribute.isCollapsed = true;\n\t\t\t});\n\t\t\tconst orgCode = this.list.orgCode;\n\t\t\tconst typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n\t\t\tthis.isWritable = this.authService.isGeoObjectTypeRC(orgCode, typeCode);\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/progress/' + oid);\n\t\tthis.notifier.subscribe(message => {\n\t\t\tthis.handleProgressChange(message.content)\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.notifier.complete();\n\t}\n\n\n\tonPageChange(pageNumber: number): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.data(this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\t//    onSearch(): void {\n\t//        this.filter = this.current;\n\t//\n\t//        this.onPageChange( 1 );\n\t//    }\n\n\tonSort(attribute: { name: string, label: string }): void {\n\t\tif (this.sort.attribute === attribute.name) {\n\t\t\tthis.sort.order = (this.sort.order === 'ASC' ? 'DESC' : 'ASC');\n\t\t}\n\t\telse {\n\t\t\tthis.sort = { attribute: attribute.name, order: 'ASC' };\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tattr.search = null;\n\t\t});\n\n\t\tthis.filter = [];\n\t\tthis.selected = [];\n\n\t\tthis.onPageChange(1);\n\t}\n\n\ttoggleFilter(attribute: any): void {\n\t\tattribute.isCollapsed = !attribute.isCollapsed;\n\t}\n\n\tgetValues(attribute: any): void {\n\t\treturn Observable.create((observer: any) => {\n\t\t\tthis.message = null;\n\n\t\t\t// Get the valid values\n\t\t\tthis.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.filter).then(options => {\n\t\t\t\toptions.unshift({ label: '[' + this.localizeService.decode(\"masterlist.nofilter\") + ']', value: null });\n\n\t\t\t\tobserver.next(options);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\thandleProgressChange(progress: any): void {\n\n\t\tthis.isRefreshing = (progress.current < progress.total);\n\n\t\tthis.pService.progress(progress);\n\t}\n\n\thandleDateChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && (attribute.value.start !== '' || attribute.value.end !== '')) {\n\n\t\t\tlet label = '[' + attribute.label + '] : [';\n\n\t\t\tif (attribute.value.start != null) {\n\t\t\t\tlabel += attribute.value.start;\n\t\t\t}\n\n\t\t\tif (attribute.value.start != null && attribute.value.end != null) {\n\t\t\t\tlabel += ' - ';\n\t\t\t}\n\n\t\t\tif (attribute.value.end != null) {\n\t\t\t\tlabel += attribute.value.end;\n\t\t\t}\n\n\t\t\tlabel += ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleInputChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && attribute.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleListChange(e: TypeaheadMatch, attribute: any): void {\n\t\tattribute.value = e.item;\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tif (attr.base === attribute.base) {\n\t\t\t\tattr.search = '';\n\t\t\t}\n\t\t});\n\n\t\tif (attribute.value.value != null && attribute.value.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value.label + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t\tattribute.search = e.item.label;\n\t\t}\n\t\telse {\n\t\t\tattribute.search = '';\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tisFilterable(attribute: any): boolean {\n\t\treturn attribute.type !== 'none' && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n\t}\n\n\tonEdit(data): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\teditModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonGoto(data): void {\n\t\tconst oid = data.code;\n\n\t\tif (oid != null && oid.length > 0) {\n\t\t\twindow.open(acp + \"/nav/management#/locations/\" + oid, '_blank');\n\t\t}\n\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.publishMasterList(this.list.oid).toPromise()\n\t\t\t.then(list => {\n\t\t\t\tthis.list = list;\n\t\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\t\tattribute.isCollapsed = true;\n\t\t\t\t});\n\n\t\t\t\t// Refresh the resultSet\n\t\t\t\tthis.onPageChange(1);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t}\n\n\tonNewGeoObject(): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t//editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n\t\teditModal.content.configureAsNew(this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonExport(): void {\n\t\tthis.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.onFormat.subscribe(format => {\n\t\t\tif (format == 'SHAPEFILE') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-shapefile?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t\telse if (format == 'EXCEL') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-spreadsheet?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <!-- <progress-bar></progress-bar> -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.publishDate\"></localize>\n                    : {{list.publishDate}}\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : {{list.forDate}}\n                </h4>\n            </div>\n        </div>\n\n\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            \n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true, 'fa-spin':isRefreshing}\" style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n\n                        <button *ngIf=\"isWritable && !list.isAbstract\" type=\"submit\" (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                        </button>\n                        <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th *ngIf=\"isWritable\" style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.edit.column\"></localize></th>\n                            <th *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\" [title]=\"'button.filter.helptext' | localize\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\" [typeaheadAsync]=\"true\" [typeahead]=\"getValues(attribute)\" (typeaheadOnSelect)=\"handleListChange($event, attribute)\" [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td style=\"width: 3%; text-align: center;\" class=\"label-column\"><a class=\"fa fa-map-marker\" (click)=\"onGoto(result)\"></a></td>\n                            <td *ngIf=\"isWritable\" style=\"width: 3%\" class=\"label-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(result)\" [title]=\"'button.edit.helptext' | localize\"></a></td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { MasterList, MasterListVersion } from '@registry/model/registry';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { RegistryService } from '@registry/service';\nimport { AuthService, LocalizationService } from '@shared/service';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'published-master-list-history',\n\ttemplateUrl: './published-master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit, OnDestroy {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tpage: any = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresults: []\n\t};\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tnotifier: WebSocketSubject<{ type: string, content: any }>;\n\n\tisAdmin: boolean;\n\tisSRA: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService, private localizeService: LocalizationService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isSRA = authService.isSRA();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'PUBLISH_JOB_CHANGE') {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.notifier.complete();\n\t}\n\n\t//isGeoObjectTypeRM(type: string): boolean {\n\t//\treturn this.authService.isGeoObjectTypeRM(type);\n\t//}\n\n\tonDeleteMasterListVersion(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.updateList();\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tupdateList(): void {\n\t\t// update the list of versions. \n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tif (this.list != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.updateList();\n\t\t}\n\t}\n\n\tonViewMetadata(): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, true])\n\t}\n\n\tonPublishShapefile(version: MasterListVersion): void {\n\n\t\tthis.service.publishShapefile(version.oid).then(() => {\n\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDownloadShapefile(version: MasterListVersion): void {\n\t\twindow.location.href = acp + '/master-list/download-shapefile?oid=' + version.oid;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n     <div *ngIf=\"list && ((list.write))\" style=\"margin-bottom: 10px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" \n                    [title]=\"'masterList.publish.help.text' | localize\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.publishDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version )\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.publishDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <div class=\"row\" *ngIf=\"!isSRA\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span>\n                                            <span style=\"display: block;\"> {{job.author}} </span>\n                                            <span style=\"display: block;\"> {{job.type}} </span>\n                                            <span style=\"display: block;\"> {{job.status}} </span>\n                                            <span *ngIf=\"job.exception\" style=\"display: block;\"> {{job.exception.message}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '@registry/model/registry';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { RegistryService } from '@registry/service';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n@Component({\n\tselector: 'master-list-history',\n\ttemplateUrl: './master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tforDate: string = '';\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, private localizeService: LocalizationService) {\n\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n\t\t\tthis.list.versions.push(version);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonViewMetadata(): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, false])\n\t}\n\n\tonDelete(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.list.versions = this.list.versions.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== version.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && list.write\" style=\"margin-bottom: 10px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\" style=\"margin-left: 10px;\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> <input id=\"forDate\" type=\"date\" name=\"forDate\" [(ngModel)]=\"forDate\" required>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.generatedDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.publishDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MasterList } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { PublishModalComponent } from './publish-modal.component';\n\n@Component({\n\n\tselector: 'master-list-view',\n\ttemplateUrl: './master-list-view.component.html',\n\tstyleUrls: ['./master-list-view.component.css']\n})\nexport class MasterListViewComponent implements OnInit {\n\n\tcontent: string = \"\";\n\tlist: MasterList = null;\n\n\t/*\n\t * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) {\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tif (oid != null) {\n\t\t\tthis.content = \"PUB\";\n\t\t}\n\n\t\tthis.service.getMasterList(oid).then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tif (list.read) {\n\t\t\t\tthis.content = \"EXP\";\n\t\t\t}\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\t}\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a *ngIf=\"list && list.read\" style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\"><localize key=\"lists.exploratory.link.label\"></localize></a>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\"><localize key=\"lists.published.link.label\"></localize></a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { interval } from 'rxjs';\n\n\nimport { RegistryService, IOService  } from '@registry/service';\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from '@registry/model/registry';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\n\n@Component({\n\tselector: 'scheduled-jobs',\n\ttemplateUrl: './scheduled-jobs.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class ScheduledJobsComponent implements OnInit {\n\tmessage: string = null;\n\n\tactiveJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tcompleteJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tactiveTimeCounter: number = 0;\n\tcompleteTimeCounter: number = 0;\n\n\tpollingData: any;\n\n\tisViewAllOpen: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.onActiveJobsPageChange(1);\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.activeTimeCounter++\n\t\t\tthis.completeTimeCounter++\n\n\t\t\tif (this.isViewAllOpen) {\n\t\t\t\tif (this.activeTimeCounter >= 4) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t\tif (this.completeTimeCounter >= 7) {\n\t\t\t\t\tthis.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.completeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.activeTimeCounter >= 2) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tformatJobStatus(job: ScheduledJobOverview) {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PaginationPage): void {\n\n\t\tpage.results.forEach(job => {\n\n\t\t\tlet stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{ \"label\": \"File Import\", \"status\": \"COMPLETE\" },\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Staging\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Validation\",\n\t\t\t\t\t\t\"status\": job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Import\",\n\t\t\t\t\t\t\"status\": job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\n\t\t\tjob = job as ScheduledJobOverview;\n\t\t\tjob.stepConfig = stepConfig;\n\t\t});\n\n\t}\n\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\tonViewAllCompleteJobs(): void {\n\t\tthis.onCompleteJobsPageChange(1);\n\n\t\tthis.isViewAllOpen = true;\n\t}\n\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-history/', code])\n\t}\n\n\tonActiveJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.activeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.activeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCompleteJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.completeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.completeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\n\tonCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\t\t\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(job.configuration).then(response => {\n\t\t\t\tthis.bsModalRef.hide()\n\n\t\t\t\tfor (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n\t\t\t\t\tlet activeJob = this.activeJobsPage.results[i];\n\n\t\t\t\t\tif (activeJob.jobId === job.jobId) {\n\t\t\t\t\t\tthis.activeJobsPage.results.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.onViewAllCompleteJobs();\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n  onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n\n    this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n    this.bsModalRef.content.type = ModalTypes.danger;\n\n    this.bsModalRef.content.onConfirm.subscribe(data => {\n\n      this.service.resolveScheduledJob(historyId).then(response => {\n\n        this.bsModalRef.hide()\n\n        for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n          let activeJob = this.activeJobsPage.results[i];\n\n          if (activeJob.jobId === job.jobId) {\n            this.activeJobsPage.results.splice(i, 1);\n            break;\n          }\n        }\n\n        this.onViewAllCompleteJobs();\n\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n\n    });\n  }\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{job.createDate}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.createDate}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.lastUpdateDate}}</p>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from './conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './conflict-widgets/reupload-modal.component';\nimport { RegistryService, IOService } from '@registry/service';\nimport { ScheduledJob } from '@registry/model/registry';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'job',\n\ttemplateUrl: './job.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class JobComponent implements OnInit {\n\tmessage: string = null;\n\tjob: ScheduledJob;\n\tallSelected: boolean = false;\n\thistoryId: string = \"\";\n\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\ttimeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tisPolling: boolean = false;\n\thasRowValidationProblem: boolean = false;\n\n\tnotifier: WebSocketSubject<{ type: string, message: string }>;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService,\n\t\tprivate router: Router, private route: ActivatedRoute,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.historyId = this.route.snapshot.params[\"oid\"];\n\n\t\tthis.onPageChange(1);\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'IMPORT_JOB_CHANGE') {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\tformatAffectedRows(rows: string) {\n\t\treturn rows.replace(/,/g, \", \");\n\t}\n\n\tformatValidationResolve(obj: any) {\n\t\treturn JSON.stringify(obj);\n\t}\n\n\tonProblemResolved(problem: any): void {\n\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\tlet pageConflict = this.page.results[i];\n\n\t\t\tif (pageConflict.id === problem.id) {\n\t\t\t\tthis.page.results.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetFriendlyProblemType(probType: string): string {\n\n\t\tif (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.DataNotFoundException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n\t\t}\n\n\t\tif (\n\t\t\tprobType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n\t\t}\n\n\t\t// if(probType === \"net.geoprism.registry.io.TermValueException\"){\n\t\t//   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n\t\t// }\n\n\t\tif (\n\t\t\tprobType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n\t\t}\n\n\t\treturn probType;\n\t}\n\n\n\tonEdit(problem: any): void {\n\t\t// this.router.navigate( ['/registry/master-list-history/', code] )\n\n\t\tthis.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.problem = problem;\n\t\tthis.bsModalRef.content.job = this.job;\n\t\tthis.bsModalRef.content.onConflictAction.subscribe(data => {\n\t\t\tif (data.action === 'RESOLVED') {\n\t\t\t\tthis.onProblemResolved(data.data);\n\t\t\t}\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n\n\t\t\tthis.job = response;\n\n\t\t\tif (this.job.stage === 'IMPORT_RESOLVE') {\n\t\t\t\tthis.page = this.job.importErrors;\n\t\t\t}\n\t\t\telse if (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.page = this.job.problems;\n\n\t\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\t\tlet problem = this.page.results[i];\n\n\t\t\t\t\tif (problem.type === 'RowValidationProblem') {\n\t\t\t\t\t\tthis.hasRowValidationProblem = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonViewAllActiveJobs(): void {\n\n\t}\n\n\tonViewAllCompleteJobs(): void {\n\n\t}\n\n\ttoggleAll(): void {\n\t\tthis.allSelected = !this.allSelected;\n\n\t\tthis.job.importErrors.results.forEach(row => {\n\t\t\trow.selected = this.allSelected;\n\t\t})\n\t}\n\n\tonReuploadAndResume(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.job = this.job;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t});\n\t}\n\n\tonResolveScheduledJob(historyId: string): void {\n\t\tif (this.page.results.length == 0) {\n\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs']);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\n\t\t\tif (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\n\t\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\t}\n\n\tonCancelScheduledJob(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(this.job.configuration).then(response => {\n\t\t\t\t//this.bsModalRef.hide()\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ScheduledJobOverview } from '@registry/model/registry';\n\nimport { RegistryService, IOService } from '@registry/service';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'job-conflict-modal',\n    templateUrl: './job-conflict-modal.component.html',\n    styleUrls: []\n} )\nexport class JobConflictModalComponent implements OnInit {\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n    \n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) {\n      this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n      \n    }\n    \n    onProblemResolvedListener(problem: any): void {\n      this.onConflictAction.next({action:\"RESOLVED\", data: problem});\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GeoObjectType, MasterList, ScheduledJob, ImportError } from '@registry/model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService, IOService } from '@registry/service';\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'import-problem-widget',\n    templateUrl: './import-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ImportProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        } );\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId( null );\n        editModal.content.setOnSuccessCallback(() => {\n\n          this.onProblemResolved.emit(this.problem);\n          this.bsModalRef.hide()\n            \n        } );\n    }\n\n    getFriendlyProblemType(probType: string): string {\n\n        if(probType === \"net.geoprism.registry.io.ParentCodeException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.PostalCodeLocationException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.AmbiguousParentException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.multi.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.InvalidGeometryException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.invalid.geom.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.DataNotFoundException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.datanotfound\" );\n        }\n        \n        if(\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.permission\" );\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if(\n          probType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.duplicate.data.lookup\" );\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '@registry/model/registry';\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport { RegistryService, IOService } from '@registry/service';\nimport Utils from '../../../utility/Utils'\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'parent-reference-problem-widget',\n    templateUrl: './parent-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '@registry/model/registry';\nimport { RegistryService, IOService } from '@registry/service';\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport Utils from '../../../utility/Utils'\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n    selector: 'term-reference-problem-widget',\n    templateUrl: './term-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( conflict: any ): Observable<any> {\n        return Observable.create(( observer: any ) => {\n            this.iService.getTermSuggestions( conflict.mdAttributeId, this.searchLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n    \n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        classifierId: this.termId,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '@registry/model/registry';\nimport { RegistryService, IOService } from '@registry/service';\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport Utils from '../../../utility/Utils'\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'row-validation-problem-widget',\n    templateUrl: './row-validation-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class RowValidationProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    formatAffectedRows(rows: string)\n    {\n      return rows.replace(/,/g, \", \");\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <span *ngIf=\"errorMessage\">{{errorMessage}}</span>\n\n  <span>{{message}}</span>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\nimport { TaskService } from '@registry/service';\nimport { GeoObjectType, PaginationPage } from '@registry/model/registry';\n\n@Component({\n\tselector: 'task-viewer',\n\ttemplateUrl: './task-viewer.component.html',\n\tstyleUrls: ['./task-viewer.component.css'],\n\tproviders: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\n\tinProgressTasks: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tcompletedTasks: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tisViewAllOpen: boolean = false;\n\n\tactiveTimeCounter: number = 0;\n\tcompleteTimeCounter: number = 0;\n\n\tpollingData: any;\n\n\tconstructor(private taskService: TaskService) {\n\t\t//const day = this.forDate.getUTCDate();\n\t\t//this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onInProgressTasksPageChange(1);\n\n\t\t////\n\t\t//\n\t\t// We don't need polling on this page. It's better to save bandwidth for low resource environments.\n\t\t//\n\t\t////\n\n\t\t// this.pollingData = Observable.interval(1000).subscribe(() => {\n\t\t//   this.activeTimeCounter++\n\t\t//   this.completeTimeCounter++\n\n\t\t//   if (this.isViewAllOpen)\n\t\t//   {\n\t\t//     if (this.activeTimeCounter >= 4)\n\t\t//     {\n\t\t//       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n\n\t\t//       this.activeTimeCounter = 0;\n\t\t//     }\n\t\t//     if (this.completeTimeCounter >= 7)\n\t\t//     {\n\t\t//       this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n\n\t\t//       this.completeTimeCounter = 0;\n\t\t//     }\n\t\t//   }\n\t\t//   else\n\t\t//   {\n\t\t//     if (this.activeTimeCounter >= 2)\n\t\t//     {\n\t\t//       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n\n\t\t//       this.activeTimeCounter = 0;\n\t\t//     }\n\t\t//   }\n\t\t// });\n\t}\n\n\tupper(str: string): string {\n\t\tif (str != null) {\n\t\t\treturn str.toUpperCase();\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tonInProgressTasksPageChange(pageNumber: any): void {\n\t\tthis.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, 'UNRESOLVED').then(page => {\n\t\t\tthis.inProgressTasks = page;\n\t\t});\n\t}\n\n\tonCompletedTasksPageChange(pageNumber: any): void {\n\n\t\tthis.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, 'RESOLVED').then(page => {\n\t\t\tthis.completedTasks = page;\n\t\t});\n\t}\n\n\tonCompleteTask(task: any): void {\n\t\t// this.isViewAllOpen = true;\n\n\t\tthis.taskService.completeTask(task.id).then(() => {\n\n\t\t\tconst index = this.inProgressTasks.results.findIndex(t => t.id === task.id);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.inProgressTasks.results.splice(index, 1);\n\t\t\t}\n\n\t\t\tthis.completedTasks.results.push(task);\n\t\t\t// this.onCompletedTasksPageChange(1);\n\t\t});\n\t}\n\n\tonMoveTaskToInProgress(task: any): void {\n\t\tthis.isViewAllOpen = true;\n\n\t\tthis.taskService.setTaskStatus(task.id, 'UNRESOLVED').then(() => {\n\n\t\t\tconst index = this.completedTasks.results.findIndex(t => t.id === task.id);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.completedTasks.results.splice(index, 1);\n\t\t\t}\n\n\t\t\tthis.completedTasks.results.splice(index, 1);\n\t\t\tthis.inProgressTasks.results.push(task);\n\t\t});\n\t}\n\n\tonViewAllCompletedTasks(): void {\n\t\tthis.isViewAllOpen = true;\n\n\t\tthis.onCompletedTasksPageChange(1);\n\t}\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span>{{task.createDate}}</span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span style=\"margin-right:30px;\">{{task.createDate}}</span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label><span>{{task.completedDate}}</span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { PageResult } from '@shared/model/core'\nimport { LocalizationService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { SynchronizationConfigModalComponent } from './synchronization-config-modal.component';\n\n@Component({\n\tselector: 'synchronization-config-manager',\n\ttemplateUrl: './synchronization-config-manager.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\tmessage: string = null;\n\n\tpage: PageResult<SynchronizationConfig> = {\n\t\tresultSet: [],\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 20\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.onPageChange(1);\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.service.getPage(pageNumber, this.page.pageSize).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcreate(): void {\n\t\tthis.service.edit(null).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(null, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonEdit(config: SynchronizationConfig): void {\n\n\t\tthis.service.edit(config.oid).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(response.config, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonRemove(config: SynchronizationConfig): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + ' [' + config.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(() => {\n\t\t\tthis.service.remove(config.oid).then(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tonView(config: SynchronizationConfig): void {\n\t\tthis.router.navigate(['/registry/synchronization-config/', config.oid])\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from '@registry/model/registry';\nimport { SynchronizationConfigService, RegistryService } from '@registry/service';\nimport { CustomAttributeConfig } from '@registry/model/sync';\n\nexport interface LevelRow {\n\tisAttributeEditor: boolean;\n\n\tlevel?: any;\n\tlevelNum?: number;\n\thasAttributes?: boolean;\n\n\tattrCfg?: GOTAttributeConfig;\n}\nexport interface GOTAttributeConfig {\n\tgeoObjectTypeCode?: string;\n\tattrs: CustomAttributeConfig[];\n}\n\n@Component({\n\tselector: 'synchronization-config-modal',\n\ttemplateUrl: './synchronization-config-modal.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit {\n\tmessage: string = null;\n\n\t@ViewChild('form') form;\n\n\tconfig: SynchronizationConfig = {\n\t\torganization: null,\n\t\tsystem: null,\n\t\thierarchy: null,\n\t\tlabel: this.lService.create(),\n\t\tconfiguration: {}\n\t};\n\n\torganizations: OrgSyncInfo[] = [];\n\n\tcOrg: OrgSyncInfo = null;\n\tcSystem: { label: string, oid: string, type: string } = null;\n\n\ttypes: GeoObjectType[] = [];\n\n\tlevelRows: LevelRow[] = [];\n\t\n\torgUnitGroups: any[] = [];\n\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonSuccess: Subject<SynchronizationConfig>;\n\n\n\tconstructor(private service: SynchronizationConfigService, private registryService: RegistryService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tinit(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n\n\t\tthis.organizations = organizations;\n\n\t\tif (config != null) {\n\t\t\tthis.config = config;\n\n\t\t\tlet oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\t\tif (oIndex !== -1) {\n\t\t\t\tthis.cOrg = this.organizations[oIndex];\n\t\t\t}\n\n\t\t\tlet sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\t\tif (sIndex !== -1) {\n\t\t\t\tthis.cSystem = this.cOrg.systems[sIndex];\n\t\t\t}\n\n\t\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t\t// Get the types\t\n\t\t\t\t//this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t\t//\tthis.types = types;\n\t\t\t\t//});\n\t\t\t\t\n\t\t\t\tthis.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n          this.types = esConfig.types;\n          this.orgUnitGroups = esConfig.orgUnitGroups;\n        }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n        });\n\n\t\t\t}\n\n\t\t\tthis.levelRows = [];\n\t\t\tfor (var i = 0; i < this.config.configuration.levels.length; ++i) {\n\t\t\t\tvar level = this.config.configuration.levels[i];\n\n\t\t\t\tvar levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n\t\t\t\tif (level.attributes != null && Object.keys(level.attributes).length > 0) {\n\t\t\t\t\tlevelRow.hasAttributes = true;\n\t\t\t\t}\n\n\t\t\t\tthis.levelRows.push(levelRow);\n\t\t\t}\n\t\t}\n\t}\n\n\tonOrganizationSelected(): void {\n\t\tlet index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cOrg = this.organizations[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cOrg = null;\n\t\t\tthis.cSystem = null;\n\t\t}\n\t}\n\n\tonChangeExternalSystem(): void {\n\t\tlet index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cSystem = this.cOrg.systems[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cSystem = null;\n\t\t}\n\n\n\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t// Get the types\t\n\t\t\t//this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t//\tthis.types = types;\n\t\t\t//});\n\t\t\t\n\t\t\tthis.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n        this.types = esConfig.types;\n        this.orgUnitGroups = esConfig.orgUnitGroups;\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n\n\t\t\tif (this.config.configuration['levels'] == null) {\n\t\t\t\tvar lvl = {\n\t\t\t\t\ttype: null,\n\t\t\t\t\tgeoObjectType: null,\n\t\t\t\t\tlevel: 0\n\t\t\t\t};\n\t\t\t\tthis.config.configuration['levels'] = [lvl];\n\t\t\t\tthis.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tthis.types = [];\n\t\t}\n\t}\n\n\taddLevel(): void {\n\t\tvar lvl = {\n\t\t\ttype: null,\n\t\t\tgeoObjectType: null,\n\t\t\tlevel: this.config.configuration.levels.length\n\t\t};\n\t\tvar len = this.config.configuration['levels'].push(lvl);\n\t\tthis.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n\t}\n\n\tremoveLevel(levelNum: number, levelRowIndex: number): void {\n\t\tif (levelNum < this.config.configuration['levels'].length) {\n\t\t\tvar editorIndex = this.getEditorIndex();\n\t\t\tif (editorIndex === levelRowIndex + 1) {\n\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\t\t\t}\n\n\t\t\tthis.levelRows.splice(levelRowIndex, 1);\n\n\t\t\tvar newLevelNum = 0;\n\t\t\tfor (var i = 0; i < this.levelRows.length; ++i) {\n\t\t\t\tvar levelRow: LevelRow = this.levelRows[i];\n\n\t\t\t\tlevelRow.levelNum = newLevelNum;\n\n\t\t\t\tif (!levelRow.isAttributeEditor) {\n\t\t\t\t\tnewLevelNum = newLevelNum + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.config.configuration['levels'].splice(levelNum, 1);\n\t\t}\n\t}\n\n\tgetEditorIndex(): number {\n\t\tfor (var i = 0; i < this.levelRows.length; ++i) {\n\t\t\tvar levelRow = this.levelRows[i];\n\n\t\t\tif (levelRow.isAttributeEditor) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tconfigureAttributes(levelRow: any): void {\n\t\tvar editorIndex = this.getEditorIndex();\n\n\t\tif (editorIndex != -1) {\n\t\t\tthis.levelRows.splice(editorIndex, 1);\n\n\t\t\tif (editorIndex == levelRow.levelNum + 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n\t}\n\n\tgetTermOptions(attr: CustomAttributeConfig, dhis2Id: string) {\n\t\tfor (var i = 0; i < attr.dhis2Attrs.length; ++i) {\n\t\t\tvar dhis2Attr = attr.dhis2Attrs[i];\n\n\t\t\tif (dhis2Attr.dhis2Id === dhis2Id) {\n\t\t\t\treturn dhis2Attr.options;\n\t\t\t}\n\t\t}\n\t}\n\n\tonChangeAttrMapping(attr: any, newValue: string, levelRow: LevelRow) {\n\t\tif (newValue == null || newValue === \"\") {\n\t\t\tif (attr.terms != null) {\n\t\t\t\tattr.terms = {};\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var j = 0; j < levelRow.attrCfg.attrs.length; j++) {\n\t\t\tif (levelRow.attrCfg.attrs[j].name === attr.name) {\n\t\t\t\tvar attrCfgAttr: any = levelRow.attrCfg.attrs[j];\n\n\t\t\t\tif (attrCfgAttr.terms != null) {\n\t\t\t\t\tattr.terms = {};\n\n\t\t\t\t\tfor (var i = 0; i < attrCfgAttr.terms.length; ++i) {\n\t\t\t\t\t\tvar term = attrCfgAttr.terms[i];\n\n\t\t\t\t\t\tattr.terms[term.code] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tonSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n\t\tif (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n\t\t\tvar levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n\t\t\tlevelRow.hasAttributes = false;\n\t\t\tlevelRow.attrCfg = null;\n\t\t\tlevelRow.level.attributes = {};\n\n\t\t\tvar editorIndex = this.getEditorIndex();\n\n\t\t\tif (editorIndex != -1 && editorIndex === levelRowIndex + 1) {\n\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar attrCfg = this.levelRows[levelRowIndex].attrCfg;\n\t\tif (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n\t\t\t// Resume an editing session on attributes that we fetched previously\n\n\t\t\tvar editorIndex = this.getEditorIndex();\n\n\t\t\tif (editorIndex != -1 && editorIndex !== levelRowIndex + 1) {\n\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\n\t\t\t\tif (editorIndex < levelRowIndex) {\n\t\t\t\t\tlevelRowIndex = levelRowIndex - 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n\t\t}\n\t\telse {\n\t\t\tthis.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((attrs: CustomAttributeConfig[]) => {\n\t\t\t\tvar editorIndex = this.getEditorIndex();\n\t\t\t\tvar levelRow: LevelRow = this.levelRows[levelRowIndex];\n\t\t\t\tvar level = levelRow.level;\n\n\t\t\t\tif (isDifferentGot) {\n\t\t\t\t\tlevel.attributes = {};\n\t\t\t\t}\n\n\t\t\t\tlevelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, attrs: attrs };\n\n\t\t\t\tif (editorIndex != -1 && (editorIndex === levelRowIndex + 1 || attrs.length > 0)) {\n\t\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\n\t\t\t\t\tif (editorIndex < levelRowIndex) {\n\t\t\t\t\t\tlevelRowIndex = levelRowIndex - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (attrs.length > 0) {\n\t\t\t\t\tlevelRow.hasAttributes = true;\n\n\t\t\t\t\tfor (var i = 0; i < attrs.length; ++i) {\n\t\t\t\t\t\tvar attr = attrs[i];\n\n\t\t\t\t\t\tif (isDifferentGot || level.attributes[attr.name] == null) {\n\t\t\t\t\t\t\tlevel.attributes[attr.name] = {\n\t\t\t\t\t\t\t\tname: attr.name,\n\t\t\t\t\t\t\t\texternalId: null,\n\t\t\t\t\t\t\t\tisOrgUnitGroup: false\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (attr.terms != null && attr.terms.length > 0) {\n\t\t\t\t\t\t\t\tlevel.attributes[attr.name].terms = {};\n\n\t\t\t\t\t\t\t\tfor (var j = 0; j < attr.terms.length; ++j) {\n\t\t\t\t\t\t\t\t\tvar term = attr.terms[j];\n\n\t\t\t\t\t\t\t\t\tlevel.attributes[attr.name].terms[term.code] = null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//else if (level.attributes[attr.name] != null)\n\t\t\t\t\t\t//{\n\t\t\t\t\t\t//  level.attributes[attr.name].isOrgUnitGroup = level.attributes[attr.name].isOrgUnitGroup || attr.isOrgUnitGroup || false;\n\t\t\t\t\t\t//}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: { geoObjectTypeCode: geoObjectTypeCode, attrs: attrs } });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlevelRow.hasAttributes = false;\n\t\t\t\t}\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tonChangeTargetType(attr: any): void {\n\t  attr.externalId = null;\n\t  \n\t  for (const key in attr.terms) {\n      if (attr.terms.hasOwnProperty(key)) {\n        attr.terms[key] = null;\n      }\n    }\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.apply(this.config).then(cfg => {\n\n\t\t\tthis.onSuccess.next(cfg);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcancel(): void {\n\n\t\tif (this.config.oid != null) {\n\t\t\tthis.service.unlock(this.config.oid).then(() => {\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef.hide();\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> ({{localeValue.locale}})\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.hierarchy\" name=\"hierarchy\" [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"config.hierarchy != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"row-holder\" *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.units\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n              <thead>\n                <tr>\n                  <th style=\"width:3%\">\n                    <localize key=\"settings.external.synchronization.level.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                  </th>\n                  <th style=\"width:17%\">\n                    <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                  </th>\n                  <th style=\"width:25%; text-align: center;\">\n                    <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                  <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                      <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                      <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                    </select>\n                  </td>\n                  <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                      <option></option>\n                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n\t\t\t\t\t\t\t\t\t  <div>\n\t\t\t\t\t\t\t\t\t    <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n\t\t\t\t\t\t\t\t\t      <icon class=\"fa fa-trash-o ico-remove\"></icon>\n\t\t\t\t\t\t\t\t\t      <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n\t\t\t\t\t\t\t\t\t    </a> \n\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t  <div>\n                      <a *ngIf=\"levelRow.hasAttributes\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                        <icon class=\"fa fa-edit\"></icon>\n                        <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.configureAttributes\"></localize></label>\n                      </a> \n                    </div>\n\t\t\t\t\t\t\t\t\t</td>\n                  <td colspan=\"4\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                    <h4>Attributes</h4>\n\t                  <table class=\"table\">\n\t                    <thead>\n\t                      <tr>\n\t                        <th></th>\n\t                      </tr>\n\t                    </thead>\n\t                    <tbody>\n\t                      <tr *ngFor=\"let attr of levelRow.attrCfg.attrs\">\n\t                        <td class=\"row-holder\">\n\t                          <table class=\"row\" style=\"width:80%; margin-left:80px; margin-top:15px; margin-bottom: 10px;\">\n\t                            <thead>\n\t                              <tr>\n\t                                <th style=\"width:25%\">\n\t                                  <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n\t                                </th>\n\t                                <th style=\"width:25%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:25%\">\n                                    <label *ngIf=\"attr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:25%\">\n                                    <label>\n                                      <localize *ngIf=\"!levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n\t                              </tr>\n\t                            </thead>\n\t                            <tbody>\n\t                              <tr>\n\t                                <td><label style=\"color:#999;\">{{attr.label}}</label></td>\n\t                                <td>\n\t                                  <label style=\"color:#999;\">{{attr.typeLabel}}</label>\n\t                                </td>\n\t                                <td *ngIf=\"attr.type === 'term'\" style=\"margin-right:20px;\">\n\t                                  <select style=\"width:95%\" *ngIf=\"attr.type === 'term'\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" (change)=\"onChangeTargetType(levelRows[i-1].level.attributes[attr.name])\" [name]=\"'isOrgUnitGroup' + i + attr.name\">\n                                      <option [ngValue]=\"false\"><localize key=\"sync.attr.targetTypeOptionSet\"></localize></option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n\t                                </td>\n\t                                <td *ngIf=\"attr.type !== 'term'\" style=\"float:right; margin-right:20px;\">\n\t                                  <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n\t                                </td>\n\t                                <td>\n\t                                  <select *ngIf=\"attr.dhis2Attrs.length > 0 && !levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].externalId\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeAttrMapping(levelRows[i-1].level.attributes[attr.name], levelRows[i-1].level.attributes[attr.name].externalId, levelRow)\">\n\t                                    <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                    <option [value]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of attr.dhis2Attrs\">\n\t                                      {{dhis2Attr.name}}\n\t                                    </option>\n\t                                  </select>\n\t                                  <label *ngIf=\"attr.dhis2Attrs.length == 0 && !levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n\t                                </td>\n\t                              </tr>\n\t                            </tbody>\n\t                          </table>\n\t                          <div *ngIf=\"(levelRows[i-1].level.attributes[attr.name].externalId != null && levelRows[i-1].level.attributes[attr.name].externalId.length > 0) || levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\">\n\t\t                          <table *ngFor=\"let term of attr.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n\t                              <thead>\n\t                                <tr>\n\t                                  <th style=\"width:25%\">\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <!-- To -->\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label>\n\t                                      <localize *ngIf=\"!levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n\t                                      <localize *ngIf=\"levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n\t                                    </label>\n\t                                  </th>\n\t                                </tr>\n\t                              </thead>\n\t                              <tbody>\n\t                                <tr>\n\t                                  <td></td>\n\t                                  <td><label style=\"color:#999;\">{{term.label}}</label></td>\n\t                                  <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n\t                                  <td>\n\t                                    <select *ngIf=\"!levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                      <option *ngFor=\"let option of getTermOptions(attr, levelRows[i-1].level.attributes[attr.name].externalId)\" [value]=\"option.code\">\n\t                                        {{option.name}}\n\t                                      </option>\n\t                                    </select>\n\t                                    <select *ngIf=\"levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t\t\t\t\t\t\t                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t\t\t\t\t\t\t\t\t                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n\t\t\t\t\t\t\t\t\t                    </select>\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n                            </div>\n\t                        </td>\n\t                      </tr>\n\t                    </tbody>\n\t                  </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          \n          </div>\n      </div>\n\n\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from '@shared/model/core'\nimport { LocalizationService } from '@shared/service';\n\nimport { SynchronizationConfig, ExportScheduledJob } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { ErrorHandler } from '@shared/component/error-handler/error-handler';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'synchronization-config',\n\ttemplateUrl: './synchronization-config.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\tmessage: string = null;\n\n\tconfig: SynchronizationConfig = null;\n\n\tpage: PageResult<ExportScheduledJob> = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresultSet: []\n\t};\n\n\tnotifier: WebSocketSubject<{ type: string, content: any }>;\n\n\tconstructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tthis.service.get(oid).then(config => {\n\t\t\tthis.config = config;\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'DATA_EXPORT_JOB_CHANGE') {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\n\t\tif (this.notifier != null) {\n\t\t\tthis.notifier.complete();\n\t\t}\n\t}\n\n\tonRun(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.run(this.config.oid).then(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tif (this.config != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n\n\t\t\t\tthis.formatStepConfig(response);\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tformatJobStatus(job: ExportScheduledJob): string {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PageResult<ExportScheduledJob>): void {\n\n\t\tpage.resultSet.forEach((job: ExportScheduledJob) => {\n\n\t\t\tjob.stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Queued\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Connecting\",\n\t\t\t\t\t\t\"status\": job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Export\",\n\t\t\t\t\t\t\"status\": job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ExportScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label> \n              <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i> \n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <form #myForm=\"ngForm\">\n                <div class=\"form-group text-right\" style=\"margin: 0;\">\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n                <h4>\n                    <localize key=\"synchronization.config.units\"></localize>\n                </h4>\n                <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>\n                          <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th>\n                          <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                        </th>\n                        <th style=\"text-align: right;\">\n                          <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\" >\n                        <td style=\"vertical-align: middle;\">\n                          <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                        </td>\n                        <td style=\"\">\n                          {{level.geoObjectType}}\n                        </td>\n                        <td style=\"text-align: right;\">\n                          <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                          <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                          <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                        </td>\n                      </tr>\n                    </tbody>\n                </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\" style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\" [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\" [routerLink]=\"'/registry/sync/details/' + job.historyId\" routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                           </div>\n                         </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { AuthService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { RegistryService, IOService } from '@registry/service';\nimport { ScheduledJob } from '@registry/model/registry';\n\n@Component({\n  selector: 'job',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.css']\n})\nexport class SyncDetailsComponent implements OnInit {\n  message: string = null;\n  job: ScheduledJob;\n  historyId: string = \"\";\n\n  page: any = {\n    count: 0,\n    pageNumber: 1,\n    pageSize: 10,\n    results: []\n  };\n\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n\n  constructor(public service: RegistryService, private route: ActivatedRoute, authService: AuthService, public ioService: IOService) {\n    this.isAdmin = authService.isAdmin();\n    this.isMaintainer = this.isAdmin || authService.isMaintainer();\n    this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n  }\n\n  ngOnInit(): void {\n\n    this.historyId = this.route.snapshot.params[\"oid\"];\n\n    this.onPageChange(1);\n\n  }\n\n  ngOnDestroy() {\n  }\n\n  formatAffectedRows(rows: string) {\n    return rows.replace(/,/g, \", \");\n  }\n\n  formatValidationResolve(obj: any) {\n    return JSON.stringify(obj);\n  }\n\n  onPageChange(pageNumber: any): void {\n\n    this.message = null;\n\n    this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n\n      this.job = response;\n      \n      this.page = this.job.exportErrors;\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { Map, LngLatBoundsLike, NavigationControl, MapboxEvent, AttributionControl } from 'mapbox-gl';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { AllGeoJSON } from '@turf/helpers'\nimport bbox from '@turf/bbox';\n\nimport { Subject } from 'rxjs';\n\nimport { GeoObject, MasterList, ContextLayer, ContextLayerGroup } from '@registry/model/registry';\nimport { LocationInformation } from '@registry/model/location-manager';\n\nimport { ContextLayerModalComponent } from './context-layer-modal.component';\n\nimport { MapService, RegistryService } from '@registry/service';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'location-manager',\n\ttemplateUrl: './location-manager.component.html',\n\tstyleUrls: ['./location-manager.css']\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n\tbsModalRef: BsModalRef;\n\n    /* \n     * Root nodes of the tree\n     */\n\tdata: LocationInformation = {\n\t\ttypes: [],\n\t\thierarchies: [],\n\t\tgeojson: { type: 'MultiPolygon', features: [] },\n\t};\n\n\tchildType: string = null;\n\thierarchy: string = null;\n\n    /*\n     * Date of data for explorer\n     */\n\tdateStr: string = null;\n\n    /* \n     * Breadcrumb of previous children clicked on\n     */\n\tbreadcrumbs = [] as GeoObject[];\n\n    /* \n     * Root nodes of the tree\n     */\n\tcurrent: GeoObject;\n\n    /* \n     * mapbox-gl map\n     */\n\tmap: Map;\n\n    /* \n     * Flag denoting the draw control is active\n     */\n\tactive: boolean = false;\n\n\tvectorLayers: string[] = [];\n\n\tcontextLayerGroups: ContextLayerGroup[] = [];\n\n\tlists: MasterList[] = [];\n\n    /* \n     * List of base layers\n     */\n\tbaseLayers: any[] = [\n\t\t{\n\t\t\tname: 'Satellite',\n\t\t\tlabel: 'Satellite',\n\t\t\tid: 'satellite-v9',\n\t\t\tsprite: 'mapbox://sprites/mapbox/satellite-v9',\n\t\t\turl: 'mapbox://mapbox.satellite',\n\t\t\tselected: true\n\t\t},\n\t\t// {\n\t\t// \tname: 'Streets',\n\t\t// \tlabel: 'Streets',\n\t\t// \tid: 'streets-v9',\n\t\t// \tsprite: 'mapbox://sprites/mapbox/basic-v9',\n\t\t// \turl: 'mapbox://mapbox.basic-v9'\n\t\t// }\n\t];\n\n\tbaselayerIconHover = false;\n\n\thoverFeatureId: string;\n\n\tpreventSingleClick: boolean = false;\n\n\t/* \n     * Timer for determining double click vs single click\n     */\n\ttimer: any;\n\n\t/* \n     * debounced subject for map extent change events\n     */\n\tsubject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n\tconstructor(private modalService: BsModalService, private mapService: MapService, public service: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getAllMasterListVersions().then(lists => {\n\t\t\tthis.lists = lists;\n\n\t\t\tthis.convertListsToContextLayers(lists);\n\t\t});\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.map.remove();\n\t}\n\n\tngAfterViewInit() {\n\n\t\tconst layer = this.baseLayers[0];\n\n\t\tthis.map = new Map({\n\t\t\tcontainer: 'map',\n\t\t\tstyle: {\n\t\t\t\t\"version\": 8,\n\t\t\t\t\"name\": layer.name,\n\t\t\t\t\"metadata\": {\n\t\t\t\t\t\"mapbox:autocomposite\": true\n\t\t\t\t},\n\t\t\t\t\"sources\": {\n\t\t\t\t\t\"mapbox\": {\n\t\t\t\t\t\t\"type\": \"raster\",\n\t\t\t\t\t\t\"url\": layer.url,\n\t\t\t\t\t\t\"tileSize\": 256\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"sprite\": layer.sprite,\n\t\t\t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t\t\t\t\"layers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": layer.id,\n\t\t\t\t\t\t\"type\": 'raster',\n\t\t\t\t\t\t\"source\": 'mapbox',\n\t\t\t\t\t\t// \"source-layer\": \"mapbox_satellite_full\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tzoom: 2,\n\t\t\tattributionControl: false,\n\t\t\tcenter: [-78.880453, 42.897852]\n\t\t});\n\n\t\tthis.map.on('load', () => {\n\t\t\tthis.initMap();\n\t\t});\n\n\t}\n\n\tconvertListsToContextLayers(lists: MasterList[]): void {\n\t\tlists.forEach(list => {\n\t\t\tlet thisList = { oid: list.oid, displayLabel: list.displayLabel.localizedValue, contextLayers: [] };\n\t\t\tthis.contextLayerGroups.push(thisList);\n\t\t\tlist.versions.forEach(version => {\n\t\t\t\tlet thisContextLayer = { oid: version.oid, displayLabel: version.forDate, active: false, enabled: false };\n\t\t\t\tthisList.contextLayers.push(thisContextLayer);\n\t\t\t});\n\t\t});\n\t}\n\n\thandleDateChange(): void {\n\t\tthis.back(null);\n\t}\n\n\tinitMap(): void {\n\n\t\tthis.map.on('style.load', () => {\n\t\t\tthis.addLayers();\n\t\t\tthis.refresh();\n\t\t});\n\n\t\tthis.addLayers();\n\n\n\t\tthis.refresh();\n\n\t\t// Add zoom and rotation controls to the map.\n\t\tthis.map.addControl(new NavigationControl({ 'visualizePitch': true }));\n\t\tthis.map.addControl(new AttributionControl({ compact: true }), 'bottom-right');\n\n\t\tthis.map.on('dblclick', 'children-points', (event: any) => {\n\t\t\tthis.handleMapClickEvent(event);\n\t\t});\n\n\t\tthis.map.on('dblclick', 'children-polygon', (event: any) => {\n\t\t\tthis.handleMapClickEvent(event);\n\t\t});\n\t}\n\n\taddLayers(): void {\n\n\t\tconst source = 'children';\n\n\t\tthis.map.addSource(source, {\n\t\t\ttype: 'geojson',\n\t\t\tdata: {\n\t\t\t\t\"type\": \"FeatureCollection\",\n\t\t\t\t\"features\": []\n\t\t\t}\n\t\t});\n\n\t\t// Point layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": source,\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 10,\n\t\t\t\t\"circle-color\": '#a6611a',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n\t\t\t]\n\t\t});\n\n\t\t// Polygon layer\n\t\tthis.map.addLayer({\n\t\t\t'id': source + '-polygon',\n\t\t\t'type': 'fill',\n\t\t\t'source': source,\n\t\t\t'layout': {},\n\t\t\t'paint': {\n\t\t\t\t'fill-color': '#a6611a',\n\t\t\t\t'fill-opacity': 0.8,\n\t\t\t\t'fill-outline-color': 'black'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n\t\t\t]\n\t\t});\n\n\n\t\t// Label layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-label\",\n\t\t\t\"source\": source,\n\t\t\t\"type\": \"symbol\",\n\t\t\t\"paint\": {\n\t\t\t\t\"text-color\": \"black\",\n\t\t\t\t\"text-halo-color\": \"#fff\",\n\t\t\t\t\"text-halo-width\": 2\n\t\t\t},\n\t\t\t\"layout\": {\n\t\t\t\t\"text-field\": ['get', 'localizedValue', ['get', 'displayLabel']],\n\t\t\t\t\"text-font\": [\"NotoSansRegular\"],\n\t\t\t\t\"text-offset\": [0, 0.6],\n\t\t\t\t\"text-anchor\": \"top\",\n\t\t\t\t\"text-size\": 12,\n\t\t\t}\n\t\t});\n\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\tthis.addVectorLayer(cLayer.oid);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t}\n\n\trefresh(): void {\n\t\tif (this.current == null) {\n\t\t\tthis.mapService.roots(this.childType, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.mapService.select(this.current.properties.code, this.current.properties.type, this.childType, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t}\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\thandleBasemapStyle(layer: any): void {\n\t\t// this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n\t\tthis.baseLayers.forEach(baseLayer => {\n\t\t\tbaseLayer.selected = false;\n\t\t});\n\n\t\tlayer.selected = true;\n\n\t\tthis.map.setStyle({\n\t\t\t\"version\": 8,\n\t\t\t\"name\": layer.name,\n\t\t\t\"metadata\": {\n\t\t\t\t\"mapbox:autocomposite\": true\n\t\t\t},\n\t\t\t\"sources\": {\n\t\t\t\t\"mapbox\": {\n\t\t\t\t\t\"type\": \"raster\",\n\t\t\t\t\t\"url\": layer.url,\n\t\t\t\t\t\"tileSize\": 256\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"sprite\": layer.sprite,\n\t\t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t\t\t\"layers\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": layer.id,\n\t\t\t\t\t\"type\": 'raster',\n\t\t\t\t\t\"source\": 'mapbox',\n\t\t\t\t\t// \"source-layer\": \"mapbox_satellite_full\"\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\t// handleStyle(layer: any): void {\n\n\t// \tthis.baseLayers.forEach(baseLayer => {\n\t// \t\tbaseLayer.selected = false;\n\t// \t});\n\n\t// \tlayer.selected = true;\n\n\t// \tthis.map.setStyle({\n\t// \t\t\"version\": 8,\n\t// \t\t\"name\": layer.name,\n\t// \t\t\"metadata\": {\n\t// \t\t\t\"mapbox:autocomposite\": true\n\t// \t\t},\n\t// \t\t\"sources\": {\n\t// \t\t\t\"mapbox\": {\n\t// \t\t\t\t\"type\": \"raster\",\n\t// \t\t\t\t\"url\": layer.url,\n\t// \t\t\t\t\"tileSize\": 256\n\t// \t\t\t}\n\t// \t\t},\n\t// \t\t\"sprite\": layer.sprite,\n\t// \t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t// \t\t\"layers\": [\n\t// \t\t\t{\n\t// \t\t\t\t\"id\": \"background\",\n\t// \t\t\t\t\"type\": \"background\",\n\t// \t\t\t\t\"paint\": {\n\t// \t\t\t\t\t\"background-color\": \"rgb(4,7,14)\"\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t\t{\n\t// \t\t\t\t\"id\": layer.id,\n\t// \t\t\t\t\"type\": \"raster\",\n\t// \t\t\t\t\"source\": \"mapbox\",\n\t// \t\t\t\t\"source-layer\": \"mapbox_satellite_full\"\n\t// \t\t\t}\n\t// \t\t]\n\t// \t});\n\t// }\n\n\taddContextLayerModal(): void {\n\t\tthis.bsModalRef = this.modalService.show(ContextLayerModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'context-layer-modal'\n\t\t});\n\t\tthis.bsModalRef.content.contextLayerGroups = this.contextLayerGroups;\n\n\t\t(<ContextLayerModalComponent>this.bsModalRef.content).onSubmit.subscribe(cLayerGroups => {\n\n\t\t\t// cLayerGroups.forEach(cLayerGroup => {\n\t\t\t// \tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t// \t\tthis.toggleContextLayer(cLayer.oid)\n\t\t\t// \t});\n\t\t\t// })\n\n\t\t});\n\t}\n\n\thighlightMapFeature(id: string): void {\n\n\t\t//\t\tthis.map.setFilter('hover-points', ['all',\n\t\t//\t\t\t['==', 'oid', id]\n\t\t//\t\t])\n\n\t}\n\n\tclearHighlightMapFeature(): void {\n\n\t\t//\t\tthis.map.setFilter('hover-points', ['all',\n\t\t//\t\t\t['==', 'oid', \"NONE\"]\n\t\t//\t\t])\n\n\t}\n\n\tonListEntityHover(event: GeoObject, site: GeoObject): void {\n\t\tif (this.current == null) {\n\t\t\tthis.highlightMapFeature(site.properties.code);\n\t\t}\n\t}\n\n\tonListEntityHoverOff(): void {\n\t\tthis.clearHighlightMapFeature();\n\t}\n\n\t//\thighlightListItem(id: string): void {\n\t//\t\tthis.nodes.forEach(node => {\n\t//\t\t\tif (node.properties.code === id) {\n\t//\t\t\t\tthis.hoverFeatureId = id;\n\t//\t\t\t}\n\t//\t\t})\n\t//\t}\n\t//\n\t//\tclearHighlightListItem(): void {\n\t//\t\tif (this.hoverFeatureId) {\n\t//\t\t\tthis.nodes.forEach(node => {\n\t//\t\t\t\tif (node.properties.code === this.hoverFeatureId) {\n\t//\t\t\t\t\tthis.hoverFeatureId = null;\n\t//\t\t\t\t}\n\t//\t\t\t})\n\t//\t\t}\n\t//\t}\n\n\tzoomToFeature(node: GeoObject, event: MouseEvent): void {\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tthis.preventSingleClick = false;\n\t\tconst delay = 200;\n\n\t\tthis.timer = setTimeout(() => {\n\t\t\tif (!this.preventSingleClick) {\n\t\t\t\tif (node.geometry != null) {\n\t\t\t\t\tconst bounds = bbox(node as AllGeoJSON) as LngLatBoundsLike;\n\n\t\t\t\t\tthis.map.fitBounds(bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}, delay);\n\t}\n\n\tselect(node: GeoObject, event: MouseEvent): void {\n\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tthis.preventSingleClick = true;\n\t\tclearTimeout(this.timer);\n\n\t\tthis.drillDown(node);\n\t}\n\n\thandleMapClickEvent(event: any): void {\n\t\tif (event.features != null && event.features.length > 0) {\n\t\t\tconst feature = event.features[0];\n\n\t\t\tconst index = this.data.geojson.features.findIndex(node => { return node.properties.code === feature.properties.code });\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.drillDown(this.data.geojson.features[index]);\n\t\t\t}\n\t\t}\n\t}\n\n\tdrillDown(node: GeoObject): void {\n\t\tthis.mapService.select(node.properties.code, node.properties.type, null, this.hierarchy, this.dateStr).then(data => {\n\t\t\tthis.current = node;\n\n\t\t\tthis.addBreadcrumb(node);\n\n\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\tthis.setData(data);\n\t\t});\n\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\taddBreadcrumb(node: GeoObject): void {\n\n\t\tif (this.breadcrumbs.length == 0 || this.breadcrumbs[this.breadcrumbs.length - 1].properties.code !== node.properties.code) {\n\t\t\tthis.breadcrumbs.push(node);\n\t\t}\n\t}\n\n\tback(node: GeoObject): void {\n\n\t\tif (node != null) {\n\t\t\tthis.mapService.select(node.properties.code, node.properties.type, null, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\tvar indexOf = this.breadcrumbs.findIndex(i => i.properties.code === node.properties.code);\n\n\t\t\t\tthis.current = node;\n\t\t\t\tthis.breadcrumbs.splice(indexOf + 1);\n\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t}\n\t\telse if (this.breadcrumbs.length > 0) {\n\t\t\tthis.mapService.roots(null, null, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\n\t\t\t\tthis.current = null;\n\t\t\t\tthis.breadcrumbs = [];\n\t\t\t});\n\t\t}\n\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\texpand(node: GeoObject) {\n\t\tthis.current = node;\n\t}\n\n\tsetNodes(nodes: GeoObject[]): void {\n\t\tthis.data.geojson.features = [];\n\n\t\tnodes.forEach(node => {\n\t\t\tthis.data.geojson.features.push(node);\n\t\t})\n\t}\n\n\tsetData(data: LocationInformation): void {\n\t\tthis.data = data;\n\n\t\tthis.hierarchy = data.hierarchy;\n\t\tthis.childType = data.childType;\n\t}\n\n\n\tgroupHasEnabledContextLayers(group: string): boolean {\n\t\tlet hasEnabled = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tif (cLayerGroup.oid === group) {\n\t\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\t\thasEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn hasEnabled;\n\t}\n\n\thasEnabledContextLayers(): boolean {\n\t\tlet hasEnabled = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\thasEnabled = true;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn hasEnabled;\n\t}\n\n\tremoveContextLayer(cLayer: ContextLayer): void {\n\t\tif (cLayer.active) {\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-points\");\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-polygon\");\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-label\");\n\t\t\tthis.map.removeSource(cLayer.oid);\n\n\t\t\tcLayer.active = false;\n\t\t}\n\n\t\tcLayer.enabled = false;\n\t}\n\n\ttoggleContextLayer(source: string): void {\n\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.oid === source) {\n\n\t\t\t\t\t// WARNING: the boolean component returns the value already switched (false --> true). \n\t\t\t\t\t// I'm reversing that value here so the logic below is more intuitive.\n\t\t\t\t\t// cLayer.active = !cLayer.active \n\t\t\t\t\t//\n\n\t\t\t\t\tif (cLayer.active) {\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-points\");\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-polygon\");\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-label\");\n\t\t\t\t\t\tthis.map.removeSource(source);\n\n\t\t\t\t\t\tcLayer.active = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.addVectorLayer(source);\n\n\t\t\t\t\t\tcLayer.active = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\taddVectorLayer(source: string): void {\n\t\tconst prevLayer = 'children-points';\n\n\t\t// console.log(navigator.language.toLowerCase());\n\n\t\tvar protocol = window.location.protocol;\n\t\tvar host = window.location.host;\n\n\t\tthis.map.addSource(source, {\n\t\t\ttype: 'vector',\n\t\t\ttiles: [protocol + '//' + host + acp + '/master-list/tile?x={x}&y={y}&z={z}&config=' + encodeURIComponent(JSON.stringify({ oid: source }))]\n\t\t});\n\n\t\t// Point layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 10,\n\t\t\t\t\"circle-color\": '#800000',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n\t\t\t]\n\t\t}, prevLayer);\n\n\t\t// Polygon layer\n\t\tthis.map.addLayer({\n\t\t\t'id': source + '-polygon',\n\t\t\t'type': 'fill',\n\t\t\t'source': source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t'layout': {},\n\t\t\t'paint': {\n\t\t\t\t'fill-color': '#80cdc1',\n\t\t\t\t'fill-opacity': 0.8,\n\t\t\t\t'fill-outline-color': 'black'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n\t\t\t]\n\t\t}, prevLayer);\n\n\n\t\t// Label layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-label\",\n\t\t\t\"source\": source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t\"type\": \"symbol\",\n\t\t\t\"paint\": {\n\t\t\t\t\"text-color\": \"black\",\n\t\t\t\t\"text-halo-color\": \"#fff\",\n\t\t\t\t\"text-halo-width\": 2\n\t\t\t},\n\t\t\t\"layout\": {\n\t\t\t\t\"text-field\": [\"case\",\n\t\t\t\t\t[\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n\t\t\t\t\t[\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n\t\t\t\t\t[\"string\", [\"get\", \"displayLabel\"]]\n\t\t\t\t],\n\t\t\t\t\"text-font\": [\"NotoSansRegular\"],\n\t\t\t\t\"text-offset\": [0, 0.6],\n\t\t\t\t\"text-anchor\": \"top\",\n\t\t\t\t\"text-size\": 12,\n\t\t\t}\n\t\t}, prevLayer);\n\n\t}\n}\n","<div class=\"\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div id=\"navigator-left-sidebar\" class=\"col-md-3 lw-inner-col\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n\n            <div class=\"row\">\n              <div class=\"col-md-12\" style=\"height: 56px; overflow: auto;\">\n                <ul class=\"breadcrumb\">\n                  <li *ngIf=\"current != null\">\n                    <!-- <i class=\"fa fa-angle-left breadcrumb-back-ico\" aria-hidden=\"true\"></i> -->\n                    <a (click)=\"back(null)\" style=\"color: #007276;\"><localize key=\"explorer.root.label\"></localize></a>\n                  </li>\n                  <li *ngFor=\"let entity of breadcrumbs; last as isLast\" [ngClass]=\"{'active':isLast}\">\n                    <a *ngIf=\"!isLast\" (click)=\"back(entity)\" style=\"color: #007276;\"> {{entity.properties.displayLabel.localizedValue}}</a>\n                    <span *ngIf=\"isLast\">\n                      <b>{{entity.properties.displayLabel.localizedValue}}</b>\n                    </span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.date.label\"></localize>\n                  </label>\n                  <input style=\"width: 100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n                </div>\n              </div>\n            </div>\n\n            <!-- Search bar -->\n            <!-- <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\"> -->\n                  <!-- \n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n -->\n                <!-- </div>\n              </div>\n            </div> -->\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.hierarchy.label\"></localize>\n                  </label>\n                  <select id=\"hierarchy\" name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" (change)=\"refresh()\"  required>\n                    <option></option>\n                    <option *ngFor=\"let hierarchy of data.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label.localizedValue}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.hierarchy.branch.label\"></localize>\n                  </label>\n                  <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"childType\" (change)=\"refresh()\" required>\n                    <option></option>\n                    <option *ngFor=\"let type of data.types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n                  <div class=\"list-group\">\n\n                    <div *ngFor=\"let node of data.geojson.features; let i = index\" class=\"list-group-item\">\n                      <!-- Single column card -->\n                      <div class=\"card card-default\" (click)=\"zoomToFeature(node, $event)\" >\n                        <div class=\"card-body\">\n                          <i class=\"fa fa-level-down clickable\" style=\"float: right;\" aria-hidden=\"true\" (click)=\"select(node, $event)\" title=\"Drill into location\"></i>\n                          <h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"Zoom to location\">{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n                        </div>\n                      </div>\n                    </div>\n\n                <!-- <tab heading=\"Context Layers\"> \n                  <div class=\"list-group\">\n                    <div *ngFor=\"let list of lists; let i = index\" class=\"list-group-item\">\n                      {{ list.displayLabel.localizedValue }}\n                      <div class=\"list-group\">\n                        <div *ngFor=\"let version of list.versions\" class=\"list-group-item\">\n                          <input type=\"checkbox\" (click)=\"toggleContextLayer(version.oid)\"> {{ version.forDate }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>              \n                </tab>  -->\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-md-9\" id=\"site-explorer-map\">\n        <div class=\"row\">\n          \n          <article class=\"base-layer-panel\">\n            <div class=\"layer-toggle\" (mouseenter)=\"baselayerIconHover = true\" (mouseleave)=\"baselayerIconHover = false\">\n              \n              <i class=\"fa fa-bars\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n              <div *ngIf=\"baselayerIconHover\">\n\n                <div style=\"margin-bottom: 10px;\">\n                  <h4>\n                    <localize key=\"explorer.base.layers.label\"></localize>\n                  </h4>\n                  <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                    <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleBasemapStyle(baseLayer)\"> \n                    <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                  </div>\n                </div>\n\n                <div *ngIf=\"hasEnabledContextLayers()\">\n                  <h4>\n                    <localize key=\"explorer.context.layers.label\"></localize>\n                  </h4>\n                  <div class=\"list-group\">\n                    <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                      <div *ngIf=\"groupHasEnabledContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border:none;\">\n                        <label>{{ cLayerGroup.displayLabel }}</label>\n                        <div class=\"list-group\">\n                          <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                            <div class=\"list-group-item\" style=\"border:none;\" *ngIf=\"cLayer.enabled\">\n                              <input type=\"checkbox\" [checked]=\"cLayer.active\" (click)=\"toggleContextLayer(cLayer.oid)\"> \n                         \n                              <!-- <boolean-field [(value)]=\"cLayer.active\" [label]=\"cLayer.displayLabel\" (change)=\"toggleContextLayer(cLayer.oid)\"></boolean-field> -->\n\n\n                              {{ cLayer.displayLabel }}\n                              <i class=\"fa fa-times delete-btn clickable\" aria-hidden=\"true\" (click)=\"removeContextLayer(cLayer)\"></i>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                  </div>\n                </div>\n\n                <button class=\"btn btn-primary\" (click)=\"addContextLayerModal()\" >+ Add Context Layer</button>\n              </div>\n\n            </div>\n          </article>\n\n          <div id=\"map\" class=\"map-view-port\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { MasterList, ContextLayer, ContextLayerGroup } from '@registry/model/registry';\n\n\n@Component( {\n    selector: 'context-layer-modal',\n    templateUrl: './context-layer-modal.component.html',\n    styleUrls: ['./location-manager.css']\n} )\nexport class ContextLayerModalComponent {\n\n    contextLayerGroups: ContextLayerGroup[];\n\n\n    /*\n     * Called on confirm\n     */\n    public onSubmit: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onSubmit = new Subject();\n    }\n\n    groupHasContextLayers(group:string): boolean {\n\t\tlet hasCLayers = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tif(cLayerGroup.oid === group && cLayerGroup.contextLayers.length > 0){\n\t\t\t\thasCLayers = true;\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn hasCLayers;\n\t}\n\n    confirm(): void {\n        this.onSubmit.next( this.contextLayerGroups );\n        this.bsModalRef.hide();\n    }\n\n}\n","<div class=\"modal-body\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"explorer.add.context.layers.modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"list-group\">\n                        <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                            <div *ngIf=\"groupHasContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n                                <h4>{{ cLayerGroup.displayLabel }}</h4>\n                                <div class=\"list-group\">\n                                    <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                                        <input type=\"checkbox\" [checked]=\"cLayer.enabled\" (change)=\"cLayer.enabled = !cLayer.enabled\" style=\"margin-left: 10px;\"> {{ cLayer.displayLabel }}\n                                        \n                                        <!-- <boolean-field [(value)]=\"cLayer.enabled\" [label]=\"cLayer.displayLabel\"></boolean-field> -->\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import * as d3 from 'd3';\nimport { svgPoint } from './svg-util';\n\nimport { GeoObjectType } from '@registry/model/registry';\nimport { HierarchyType } from '@registry/model/hierarchy';\n\nimport { SvgHierarchyType } from './svg-hierarchy-type';\nimport { calculateTextWidth } from './svg-util';\nimport { SvgController, RELATED_NODE_BANNER_COLOR } from './svg-controller';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\nexport class SvgHierarchyNode {\n\n\tprivate hierarchyComponent: SvgController;\n\n\tprivate svgHierarchyType: SvgHierarchyType;\n\n\tprivate geoObjectType: GeoObjectType;\n\n\tprivate treeNode: any;\n\n\t/*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tconstructor(hierarchyComponent: SvgController, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n\t\tpublic localizeService: LocalizationService, public modalService: BsModalService) {\n\t\tthis.hierarchyComponent = hierarchyComponent;\n\t\tthis.svgHierarchyType = svgHierarchyType;\n\t\tthis.geoObjectType = geoObjectType;\n\t\tthis.treeNode = treeNode;\n\t}\n\n\tgetCode(): string {\n\t\treturn this.geoObjectType.code;\n\t}\n\n\tsetPos(x: number, y: number, dragging: boolean) {\n\t\tlet bbox = this.getBbox();\n\n\t\t// Move the GeoObjectType with the pointer when they move their mouse\n\t\td3.select('.g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\"' + this.getCode() + '\"]')\n\t\t\t.classed(\"dragging\", dragging)\n\t\t\t.attr(\"x\", x)\n\t\t\t.attr(\"y\", y);\n\n\t\td3.select('.g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\"' + this.getCode() + '\"]')\n\t\t\t.classed(\"dragging\", dragging)\n\t\t\t.attr(\"x\", x)\n\t\t\t.attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n\t\td3.select('.g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\"' + this.getCode() + '\"]')\n\t\t\t.classed(\"dragging\", dragging)\n\t\t\t.attr(\"x\", x + 5)\n\t\t\t.attr(\"y\", y + 1);\n\n\t\td3.select('.g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\"' + this.getCode() + '\"]')\n\t\t\t.classed(\"dragging\", dragging)\n\t\t\t.attr(\"x\", x + bbox.width - 20)\n\t\t\t.attr(\"y\", y + 17);\n\n\n\t\t// Move inherit and uninherit buttons with the node they're moving\n\n\t\tlet inheritNode: any = d3.select('.g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\"' + this.getCode() + '\"]').node();\n\t\tif (inheritNode != null) {\n\t\t\tconst heritX = (x + bbox.width - 60);\n\t\t\tconst heritY = (y + bbox.height - 24);\n\t\t\tlet inheritBbox = inheritNode.getBBox();\n\t\t\td3.select('.g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\"' + this.getCode() + '\"]')\n\t\t\t\t.classed(\"dragging\", dragging)\n\t\t\t\t.attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n\t\t}\n\n\t\tlet uninheritNode: any = d3.select('.g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\"' + this.getCode() + '\"]').node();\n\t\tif (uninheritNode != null) {\n\t\t\tconst heritX = (x + bbox.width - 71);\n\t\t\tconst heritY = (y + bbox.height - 24);\n\t\t\tlet uninheritBbox = uninheritNode.getBBox();\n\t\t\td3.select('.g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\"' + this.getCode() + '\"]')\n\t\t\t\t.classed(\"dragging\", dragging)\n\t\t\t\t.attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n\t\t}\n\t}\n\n\tgetPos() {\n\t\tlet select = d3.select('.g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\"' + this.getCode() + '\"]');\n\n\t\treturn { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n\t}\n\n\tgetBbox() {\n\t\tlet select = d3.select('.g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\"' + this.getCode() + '\"]');\n\n\t\treturn { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n\t}\n\n\tgetTreeNode() {\n\t\treturn this.treeNode;\n\t}\n\n\trenderRelatedHierarchiesMenu() {\n\t\tlet that = this;\n\t\tlet existingMenu = d3.select(\".g-context-menu\");\n\n\t\tif (existingMenu.node() == null) {\n\t\t\t//let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n\t\t\tlet parent = d3.select('#svg');\n\n\t\t\tlet contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n\t\t\tlet relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n\t\t\tlet bbox = this.getBbox();\n\t\t\tlet x = bbox.x + bbox.width - 5;\n\t\t\tlet y = bbox.y + bbox.height / 2 - 8;\n\t\t\tconst height = 20;\n\t\t\tconst fontSize = 8;\n\t\t\tconst widthPadding = 10;\n\t\t\tconst borderColor = \"#aaaaaa\";\n\t\t\tconst dividerColor = \"#e4e4e4\";\n\t\t\tconst fontFamily = \"sans-serif\";\n\t\t\tconst titleFontSize = 10;\n\t\t\tconst titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n\t\t\tconst removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n\t\t\tconst noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n\n\t\t\t// Calculate the width of our title\n\t\t\tlet width = calculateTextWidth(titleLabel, titleFontSize);\n\t\t\t\n\t\t\t// Calculate with of remove text\n\t\t\tlet removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n\t\t\twidth = removeWidth > width ? removeWidth : width;\n\t\t\t\n\t\t\t// Calculate the width of our context menu, which is based on how long the text inside it will be.\n\t\t\t// We don't know how long text is until we render it. So we'll need to loop over all the text and\n\t\t\t// render and destroy all of it.\n\t\t\tif (relatedHierarchies.length > 0)\n\t\t\t{\n  \t\t\trelatedHierarchies.forEach((relatedHierarchyCode: string) => {\n  \t\t\t\tlet relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n  \n  \t\t\t\tlet relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n  \t\t\t\tif (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n  \t\t\t\t\trelatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n  \t\t\t\t}\n  \n  \t\t\t\tlet textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n  \n  \t\t\t\tif (textWidth > width) {\n  \t\t\t\t\twidth = textWidth;\n  \t\t\t\t}\n  \t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t  let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n\t\t\t  width = noHierLabelWidth > width ? noHierLabelWidth : width;\n\t\t\t}\n\n\t\t\twidth = width + widthPadding;\n\n\t\t\tlet heightAdditions: number = relatedHierarchies.length > 0 ? 3 : 4;\n\n\t\t\t// Background rectangle with border\n\t\t\tcontextMenuGroup.append(\"rect\")\n\t\t\t\t.classed(\"contextmenu-relatedhiers-background\", true)\n\t\t\t\t.attr(\"x\", x)\n\t\t\t\t.attr(\"y\", y)\n\t\t\t\t.attr(\"rx\", 5)\n\t\t\t\t.attr(\"width\", width)\n\t\t\t\t.attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n\t\t\t\t.attr(\"fill\", \"white\")\n\t\t\t\t.attr(\"stroke-width\", .5)\n\t\t\t\t.attr(\"stroke\", borderColor);\n\n\t\t\t// Related Hierarchies Title\n\t\t\tcontextMenuGroup.append(\"text\")\n\t\t\t\t.classed(\"contextmenu-relatedhiers-title\", true)\n\t\t\t\t.attr(\"x\", x + widthPadding / 2)\n\t\t\t\t.attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n\t\t\t\t.attr(\"font-size\", titleFontSize)\n\t\t\t\t.attr(\"font-family\", fontFamily)\n\t\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t\t.text(titleLabel);\n\n\t\t\ty = y + height;\n\n\t\t\t// Dividing line at the bottom\n\t\t\tcontextMenuGroup.append(\"line\")\n\t\t\t\t.classed(\"contextmenu-relatedhiers-divider\", true)\n\t\t\t\t.attr(\"x1\", x)\n\t\t\t\t.attr(\"y1\", y)\n\t\t\t\t.attr(\"x2\", x + width)\n\t\t\t\t.attr(\"y2\", y)\n\t\t\t\t.attr(\"stroke\", borderColor)\n\t\t\t\t.attr(\"stroke-width\", .5);\n\n\t\t\t\n\t\t\tif(relatedHierarchies.length > 0){\n\t\t\t\t// Loop over all related hierarchies and draw them as list items\n\t\t\t\tfor (let i = 0; i < relatedHierarchies.length; ++i) {\n\t\t\t\t\tlet relatedHierarchyCode = relatedHierarchies[i];\n\t\t\t\t\tlet relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n\t\t\t\t\tlet relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n\t\t\t\t\tif (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n\t\t\t\t\t\trelatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Text that says the hierarchy's display label\n\t\t\t\t\tcontextMenuGroup.append(\"text\")\n\t\t\t\t\t\t.classed(\"contextmenu-relatedhiers-text\", true)\n\t\t\t\t\t\t.attr(\"data-hierCode\", relatedHierarchyCode)\n\t\t\t\t\t\t.attr(\"x\", x + widthPadding / 2)\n\t\t\t\t\t\t.attr(\"y\", y + (height / 2) + (fontSize / 2))\n\t\t\t\t\t\t.attr(\"font-size\", fontSize)\n\t\t\t\t\t\t.attr(\"font-family\", fontFamily)\n\t\t\t\t\t\t.text(relatedHierarchyLabel)\n\t\t\t\t\t\t.style(\"cursor\", \"pointer\")\n\t\t\t\t\t\t.on('click', function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n\t\t\t\t\ty = y + height;\n\n\t\t\t\t\t// Dividing line at the bottom\n\t\t\t\t\tif (i < relatedHierarchies.length) {\n\t\t\t\t\t\tcontextMenuGroup.append(\"line\")\n\t\t\t\t\t\t\t.classed(\"contextmenu-relatedhiers-divider\", true)\n\t\t\t\t\t\t\t.attr(\"data-hierCode\", relatedHierarchyCode)\n\t\t\t\t\t\t\t.attr(\"x1\", x + 5)\n\t\t\t\t\t\t\t.attr(\"y1\", y)\n\t\t\t\t\t\t\t.attr(\"x2\", x + width - 5)\n\t\t\t\t\t\t\t.attr(\"y2\", y)\n\t\t\t\t\t\t\t.attr(\"stroke\", dividerColor)\n\t\t\t\t\t\t\t.attr(\"stroke-width\", .5);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\telse{\n\t\t\t\t// Text that says \"No related Hierarchies\"\n\t\t\t\tcontextMenuGroup.append(\"text\")\n\t\t\t\t\t.classed(\"contextmenu-relatedhiers-text\", true)\n\t\t\t\t\t.attr(\"x\", x + widthPadding / 2)\n\t\t\t\t\t.attr(\"y\", y + (height / 2) + (fontSize / 2))\n\t\t\t\t\t.attr(\"font-size\", fontSize)\n\t\t\t\t\t.attr(\"font-family\", fontFamily)\n\t\t\t\t\t.text(noRelatedHierLabel)\n\n\t\t\t\ty = y + height;\n\n\t\t\t\t\t// Dividing line at the bottom\n\t\t\t\tcontextMenuGroup.append(\"line\")\n\t\t\t\t\t.classed(\"contextmenu-relatedhiers-divider\", true)\n\t\t\t\t\t.attr(\"x1\", x + 5)\n\t\t\t\t\t.attr(\"y1\", y)\n\t\t\t\t\t.attr(\"x2\", x + width - 5)\n\t\t\t\t\t.attr(\"y2\", y)\n\t\t\t\t\t.attr(\"stroke\", dividerColor)\n\t\t\t\t\t.attr(\"stroke-width\", .5);\n\n\t\t\t}\n\n\t\t\t// Actions Title\n\t\t\tcontextMenuGroup.append(\"text\")\n\t\t\t\t.classed(\"contextmenu-relatedhiers-title\", true)\n\t\t\t\t.attr(\"x\", x + widthPadding / 2)\n\t\t\t\t.attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n\t\t\t\t.attr(\"font-size\", titleFontSize)\n\t\t\t\t.attr(\"font-family\", fontFamily)\n\t\t\t\t.attr(\"font-weight\", \"bold\")\n\t\t\t\t.text(\"Actions\");\n\n\t\t\ty = y + height;\n\n\t\t\t// Dividing line at the bottom\n\t\t\tcontextMenuGroup.append(\"line\")\n\t\t\t\t.classed(\"contextmenu-relatedhiers-divider\", true)\n\t\t\t\t.attr(\"x1\", x)\n\t\t\t\t.attr(\"y1\", y)\n\t\t\t\t.attr(\"x2\", x + width)\n\t\t\t\t.attr(\"y2\", y)\n\t\t\t\t.attr(\"stroke\", borderColor)\n\t\t\t\t.attr(\"stroke-width\", .5);\n\n\t\t\tcontextMenuGroup.append(\"text\")\n\t\t\t\t.classed(\"contextmenu-relatedhiers-text\", true)\n\t\t\t\t.attr(\"data-remove\", \"REPLACE---gotCode\")\n\t\t\t\t.attr(\"x\", x + widthPadding / 2)\n\t\t\t\t.attr(\"y\", y + (height / 2) + (fontSize / 2))\n\t\t\t\t.attr(\"font-size\", fontSize) \n\t\t\t\t.attr(\"font-family\", fontFamily)\n\t\t\t\t.text(removeFromHierarchyLabel)\n\t\t\t\t.style(\"cursor\", \"pointer\")\n\t\t\t\t.on('click', function (event, node) { that.removeGotFromHierarchy(); });\n\n\t\t\tthis.hierarchyComponent.calculateSvgViewBox();\n\t\t}\n\t\telse {\n\t\t\texistingMenu.remove();\n\t\t}\n\t}\n\n\tremoveGotFromHierarchy(){\n\t\t\n\t\tlet svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n\t\tlet startPoint: any = svgGot.getPos();\n\t\t// let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n\n\t\t// let deltaX: number = startPoint.x - svgMousePoint.x;\n\t\t// let deltaY: number = startPoint.y - svgMousePoint.y;\n\n\t\tlet obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tlet message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n\t\tmessage = message.replace(\"{label}\", obj.label.localizedValue);\n\n\t\tthis.bsModalRef.content.message = message;\n\t\tthis.bsModalRef.content.data = obj.code;\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tlet treeNode = svgGot.getTreeNode();\n\t\t\tlet parent = null;\n\t\t\tif (treeNode.parent == null) {\n\t\t\t\tparent = \"ROOT\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (treeNode.parent.data.inheritedHierarchyCode != null) {\n\t\t\t\t\tparent = \"ROOT\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tparent = treeNode.parent.data.geoObjectType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err) });\n\t\t});\n\n\t\t// (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n\t\t// \tsvgGot.setPos(startPoint.x, startPoint.y, false);\n\t\t// });\n\t}\n\n\trenderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n\t\td3.select(\".g-context-menu\").remove();\n\t\td3.select(\".g-hierarchy-got-connector\").remove();\n\n\t\tlet that = this;\n\t\tlet myBbox = this.getBbox();\n\t\tlet svg = d3.select(\"#svg\");\n\n\t\t// Remove any secondary hierarchy that may already be rendered\n\t\tlet existingSecondary = d3.select('.g-hierarchy[data-primary=\"false\"]');\n\t\tif (existingSecondary.node() != null) {\n\t\t\texistingSecondary.remove();\n\t\t\tthis.hierarchyComponent.calculateSvgViewBox();\n\t\t}\n\n\t\t// Get the bounding box for our primary hierarchy\n\t\tlet primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n\t\t// Render the secondary hierarchy\n\t\tlet svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService);\n\t\tsvgHt.render();\n\t\tlet gSecondary = d3.select('.g-hierarchy[data-primary=\"false\"]')\n\n\t\t// Translate the secondary hierarchy to the right of the primary hierarchy\n\t\tlet gHierarchy: any = d3.select('.g-hierarchy[data-primary=\"false\"]').node();\n\t\tlet bbox = gHierarchy.getBBox();\n\t\tlet paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n\t\tgSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n\t\td3.select(\".hierarchy-inherit-button\").remove();\n\t\td3.select(\".hierarchy-uninherit-button\").remove();\n\t\tlet relatedGotHasParents = svgHt.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\t\tif (relatedHierarchy.organizationCode === this.geoObjectType.organizationCode && this.treeNode.parent == null && relatedGotHasParents) {\n\t\t\t// Add an inherit button\n\t\t\tconst height = 15;\n\t\t\tconst fontSize = 10;\n\t\t\tconst buttonLabelPadding = 3;\n\n\t\t\tlet group = d3.select('.g-hierarchy[data-primary=true] .g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.getCode() + '\"]')\n\t\t\t\t.append(\"g\")\n\t\t\t\t.classed(\"hierarchy-inherit-button\", true)\n\t\t\t\t.attr(\"data-gotCode\", this.getCode());\n\n\t\t\tlet inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\t\t\tconst width = calculateTextWidth(inheritLabel, fontSize) + buttonLabelPadding * 2;\n\n\t\t\tgroup.append(\"rect\")\n\t\t\t\t.classed(\"hierarchy-inherit-bg-rect\", true)\n\t\t\t\t.attr(\"x\", myBbox.x + myBbox.width - 25 - width)\n\t\t\t\t.attr(\"y\", myBbox.y + myBbox.height / 2 - height / 2)\n\t\t\t\t.attr(\"rx\", 5)\n\t\t\t\t.attr(\"ry\", 5)\n\t\t\t\t.attr(\"width\", width)\n\t\t\t\t.attr(\"height\", height)\n\t\t\t\t.attr(\"fill\", \"#e0e0e0\")\n\t\t\t\t.attr(\"cursor\", \"pointer\")\n\t\t\t\t.attr(\"stroke\", \"#6BA542\")\n\t\t\t\t.attr(\"stroke-width\", 1);\n\n\t\t\tgroup.append(\"text\")\n\t\t\t\t.classed(\"hierarchy-inherit-bg-text\", true)\n\t\t\t\t.attr(\"x\", myBbox.x + myBbox.width - 25 - width + buttonLabelPadding)\n\t\t\t\t.attr(\"y\", myBbox.y + myBbox.height / 2 + fontSize / 2 - 2)\n\t\t\t\t.attr(\"fill\", \"#6BA542\")\n\t\t\t\t.attr(\"cursor\", \"pointer\")\n\t\t\t\t.attr(\"font-size\", fontSize + \"px\")\n\t\t\t\t.attr(\"line-height\", fontSize + \"px\")\n\t\t\t\t.text(inheritLabel)\n\t\t\t\t.on('click', function(event, node) { that.onClickInheritHierarchy(relatedHierarchy); });\n\t\t}\n\t\telse if (relatedHierarchy.organizationCode === this.geoObjectType.organizationCode && (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code)) {\n\t\t\t// Add an uninherit button\n\t\t\tconst height = 15;\n\t\t\tconst fontSize = 10;\n\t\t\tconst buttonLabelPadding = 3;\n\n\t\t\tlet group = d3.select('.g-hierarchy[data-primary=true] .g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.getCode() + '\"]')\n\t\t\t\t.append(\"g\")\n\t\t\t\t.classed(\"hierarchy-uninherit-button\", true)\n\t\t\t\t.attr(\"data-gotCode\", this.getCode());\n\n\t\t\tlet inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n\t\t\tconst width = calculateTextWidth(inheritLabel, fontSize) + buttonLabelPadding * 2;\n\n\t\t\tgroup.append(\"rect\")\n\t\t\t\t.classed(\"hierarchy-uninherit-bg-rect\", true)\n\t\t\t\t.attr(\"x\", myBbox.x + myBbox.width - 25 - width)\n\t\t\t\t.attr(\"y\", myBbox.y + myBbox.height / 2 - height / 2)\n\t\t\t\t.attr(\"rx\", 5)\n\t\t\t\t.attr(\"ry\", 5)\n\t\t\t\t.attr(\"width\", width)\n\t\t\t\t.attr(\"height\", height)\n\t\t\t\t.attr(\"fill\", \"#e0e0e0\")\n\t\t\t\t.attr(\"cursor\", \"pointer\")\n\t\t\t\t.attr(\"stroke\", \"#6BA542\")\n\t\t\t\t.attr(\"stroke-width\", 1);\n\n\t\t\tgroup.append(\"text\")\n\t\t\t\t.classed(\"hierarchy-uninherit-bg-text\", true)\n\t\t\t\t.attr(\"x\", myBbox.x + myBbox.width - 25 - width + buttonLabelPadding)\n\t\t\t\t.attr(\"y\", myBbox.y + myBbox.height / 2 + fontSize / 2 - 2)\n\t\t\t\t.attr(\"fill\", \"#6BA542\")\n\t\t\t\t.attr(\"cursor\", \"pointer\")\n\t\t\t\t.attr(\"font-size\", fontSize + \"px\")\n\t\t\t\t.attr(\"line-height\", fontSize + \"px\")\n\t\t\t\t.text(inheritLabel)\n\t\t\t\t.on('click', function(event, node) { that.onClickUninheritHierarchy(); });\n\t\t}\n\n\t\t// Draw dotted line between the shared node in the hierarchies\n\t\tlet secondaryGot = d3.select('.g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\"' + this.getCode() + '\"]');\n\t\tlet secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n\t\tsecondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n\t\td3.select(\".g-hierarchy-got-connector\").remove();\n\t\tlet gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n\t\tgConnector.append(\"path\")\n\t\t\t.classed(\"hierarchy-got-connector\", true)\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"stroke\", \"#555\")\n\t\t\t.attr(\"stroke-opacity\", 0.4)\n\t\t\t.attr(\"stroke-dasharray\", \"5,5\")\n\t\t\t.attr(\"stroke-width\", 1.5)\n\t\t\t.attr(\n\t\t\t\t  \"d\",\n\t\t\t\t  \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2)\n\t\t\t\t+ \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width)\n\t\t\t\t+ \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2)\n\t\t\t\t+ \"H\" + secondaryGotBbox.x\n\t\t\t);\n\n\t\t// Draw arrow for dotted line\n\t\tconst arrowRectD = { height: 10, width: 7 };\n\t\tlet gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n\t\tgArrow.append(\"rect\")\n\t\t\t.classed(\"hierarchy-got-connector-arrow-rect\", true)\n\t\t\t.attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n\t\t\t.attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n\t\t\t.attr(\"width\", arrowRectD.width)\n\t\t\t.attr(\"height\", arrowRectD.height)\n\t\t\t.attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n\t\tgArrow.append(\"path\")\n\t\t\t.classed(\"hierarchy-got-connector-arrow-path\", true)\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"stroke\", \"white\")\n\t\t\t.attr(\"stroke-width\", 1.5)\n\t\t\t.attr(\"d\", \n\t\t\t\t\"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3))\n\t\t\t\t+ \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2)\n\t\t\t\t+ \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n\t\t\t);\n\n\t\t// Recalculate the viewbox (should probably be the last thing that happens)\n\t\tthis.hierarchyComponent.calculateSvgViewBox();\n\t}\n\n\tonClickInheritHierarchy(hierarchy: HierarchyType) {\n\t\tthis.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n\t}\n\n\tonClickUninheritHierarchy() {\n\t\tthis.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n\t}\n\n}\n\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '@shared/component';\nimport { HierarchyType, HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\nimport { HierarchyService } from '@registry/service';\n\n\n@Component( {\n    selector: 'add-child-to-hierarchy-modal',\n    templateUrl: './add-child-to-hierarchy-modal.component.html',\n    styleUrls: []\n} )\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n\t /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n\n    public hierarchyType: HierarchyType;\n\n    public nodes: HierarchyNode[];\n\n    public allGeoObjectTypes: GeoObjectType[];\n\n    public selectedGeoObjectType: GeoObjectType;\n\n    private selectUndefinedOptionValue: any;\n\n\tprivate toRoot: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) {\n    }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n    \n    onSelect(value: string): void {\n    \tthis.allGeoObjectTypes.forEach(gObj => {\n    \t\tif(gObj.code === value){\n    \t\t\tthis.selectedGeoObjectType = gObj;\n    \t\t}\n    \t})\n    }\n    \n    handleOnSubmit(): void {\n        this.message = null;\n        \n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy( this.hierarchyType.code, parent, this.selectedGeoObjectType.code ).then( data => {\n            this.onNodeChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n        \n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { GeoObjectOverTime, GeoObjectType } from '@registry/model/registry';\nimport { AbstractAction } from '@registry/model/crtable';\n\nimport { RegistryService, ChangeRequestService } from '@registry/service';\n\nimport { ComponentCanDeactivate } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-create-geo-object',\n    templateUrl: './detail.component.html',\n    styleUrls: ['./crtable-detail-create-geo-object.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    readOnly: boolean = true;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if ( this.isNew() ) {\n            this.preGeoObject = this.postGeoObject;\n        }\n\n        this.onSelect( this.action );\n    }\n\n    isNew(): boolean {\n        return ( this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\" );\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n        }\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSelect( action: AbstractAction ) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n            this.registryService.getGeoObjectOverTime( this.postGeoObject.attributes.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( \"Error\", err );\n                this.error( err );\n            } );\n        }\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( true );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( false );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading\">\n        <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <div>\n        <label class=\"detail-label\">GeoObjectType : </label>\n        <label class=\"detail-value\">{{action.geoObjectType.code}}</label>\n      </div>\n    \n      <div>\n        <localize key=\"changeOverTime.forDate\"></localize>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n        <!-- \n\t  <label class=\"detail-label\">Label : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.displayLabel\">\n\t  \n\t  <label class=\"detail-label\">Code : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.code\">\n\t  -->\n\n        <geoobject-shared-attribute-editor \n          #attributeEditor\n          *ngIf=\"preGeoObject\"\n          [readOnly]=\"readOnly\"\n          [geoObjectType]=\"geoObjectType\"\n          [postGeoObject]=\"postGeoObject\"\n          [preGeoObject]=\"preGeoObject\"\n          [forDate]=\"forDate\"\n          [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n<!-- \n\t      <geoobject-editor-map #geometryEditor *ngIf=\"this.preGeoObject != null && this.postGeoObject != null && this.geoObjectType.isGeometryEditable\" [readOnly]=\"readOnly || !geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [isNew]=\"isNew()\"></geoobject-editor-map>\n -->\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n\nimport { AddChildAction } from '@registry/model/crtable';\nimport { ChangeRequestService } from '@registry/service';\nimport { ComponentCanDeactivate } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-add-remove-child',\n    templateUrl: './detail.component.html',\n    styleUrls: []\n} )\nexport class AddRemoveChildDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: AddChildAction;\n\n    original: AddChildAction;\n\n    readOnly: boolean = true;\n\n\n    private bsModalRef: BsModalRef;\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.original = Object.assign( {}, this.action );\n    }\n\n    applyAction() {\n        this.changeRequestService.applyAction( this.action ).then( response => {\n            this.original = Object.assign( {}, this.action );\n\n            this.unlockAction();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n\n            this.action = this.original;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n\n    onSelect( action: AddChildAction ) {\n        this.action = action;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    <div class=\"detail-content\">\n\n        <label class=\"detail-label\">Child UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childId\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Child TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childTypeCode\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentId\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Hierarchy Code : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.hierarchyTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">\n            <localize key=\"change.request.status\"></localize> :\n        </label>\n        <select style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=action.approvalStatus   [disabled]=\"readOnly\">\n            <option value=\"REJECTED\">\n                <localize key=\"change.request.status.rejected\"></localize>\n            </option>\n            <option value=\"ACCEPTED\">\n                <localize key=\"change.request.status.accepted\"></localize>\n            </option>\n            <option value=\"PENDING\">\n                <localize key=\"change.request.status.pending\"></localize>\n            </option>\n        </select>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n        \n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n        \n    </div>\n</div>","import { GeoObjectOverTime, HierarchyOverTime } from './registry';\n\nexport class ChangeRequest {\n  oid: string;\n  createdBy: string;\n  createDate: Date;\n  approvalStatus: string;\n  statusCode: string;\n  total: number;\n  pending: number;\n}\n\nexport class AbstractAction {\n  approvalStatus: string;\n  createActionDate: Date;\n  label: string;\n  oid: string;\n  actionType: string;\n  actionLabel: string;\n}\n\nexport class UpdateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class AddChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyTypeCode: string;\n  contributorNotes: string;\n  maintainerNotes: string;\n}\n\nexport class RemoveChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyCode: string;\n}\n\nexport class GovernanceStatus {\n  key: string;\n  label: string;\n}\n\nexport class PageEvent {\n  type:string;\n  data:any;\n}\n\nexport class SetParentAction extends AbstractAction {\n  childCode: string;\n  childTypeCode: string;\n  json: HierarchyOverTime[];\n}\n\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { HierarchyOverTime } from '@registry/model/registry';\nimport { AbstractAction } from '@registry/model/crtable';\n\nimport { RegistryService, ChangeRequestService } from '@registry/service';\n\nimport { ComponentCanDeactivate } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'set-parent-detail',\n    templateUrl: './set-parent-detail.component.html',\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class SetParentDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    hierarchies: HierarchyOverTime[] = [];\n    readOnly: boolean = true;\n\n    bsModalRef: BsModalRef;\n    \n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;    \n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.hierarchies = this.action.json;\n\n        this.onSelect( this.action );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }    \n\n    onSelect( action: AbstractAction ) {\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n        <div>\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n        </div>    \n    \n        <cascading-geo-selector #parentSelector \n          [hierarchies]=\"this.hierarchies\"\n          [forDate]=\"this.forDate\">\n        </cascading-geo-selector>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.status\"></localize> :\n            </label>\n            <select [disabled]=\"readOnly\" style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=\"action.approvalStatus\">\n                <option value=\"REJECTED\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </option>\n                <option value=\"ACCEPTED\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </option>\n                <option value=\"PENDING\">\n                    <localize key=\"change.request.status.pending\"></localize>\n                </option>\n            </select>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { IOService } from '@registry/service';\nimport { AuthService } from '@shared/service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-export',\n    templateUrl: './data-export.component.html',\n    styleUrls: []\n} )\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n\n    constructor( private service: IOService, private modalService: BsModalService, private authService: AuthService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( true ).then( types => {\n        \n            //this.types = types;\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isOrganizationRA(types[i].orgCode))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.types = myOrgTypes;\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onChange( code: string ): void {\n\n        if ( code != null && code.length > 0 ) {\n            this.service.getHierarchiesForType( code, false ).then( hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n\n    }\n\n    onExport(): void {\n\n        if ( this.format == 'SHAPEFILE' ) {\n            window.location.href = acp + '/shapefile/export-shapefile?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n        else if ( this.format == 'EXCEL' ) {\n            window.location.href = acp + '/excel/export-spreadsheet?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\n\n@Pipe({\n  name: 'geoobjecttype',\n  pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n  transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n\t  if (!items || !filter) {\n          return items;\n      }\n\t  \n\t  let unassignedGeoObjTypes:string[] = [];\n      this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n      \n      // filter items array, items which match and return true will be\n      // kept, false will be filtered out\n      return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n  }\n  \n  buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void{\n\t  filter.forEach(f => {\n\t\t  this.processHierarchyNodes(f, unassignedGeoObjTypes);\n\t  })\n  }\n  \n  processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]){\n\t  unassignedGeoObjTypes.push(node.geoObjectType)\n\t  \n\t  node.children.forEach(child => {\n\t\t  this.processHierarchyNodes(child, unassignedGeoObjTypes);\n\t  })\n  }\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'toEpochDateTime',\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n    transform(date: string): any {\n        if (!date ) {\n            return date;\n        }\n       \n        return new Date(date).getTime();\n    }\n}","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\nimport { LocationManagerComponent } from './component/location-manager/location-manager.component';\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'hierarchies',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'data',\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'change-requests',\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-lists',\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'scheduled-jobs',\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'job/:oid',\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'master-list/:oid/:published',\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'master-list-view/:oid',\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'change-request',\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'tasks',\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'synchronization-configs',\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'synchronization-config/:oid',\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'location-manager',\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'sync/details/:oid',\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class RegistryRoutingModule { }"],"sourceRoot":""}