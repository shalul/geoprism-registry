{"version":3,"sources":["webpack:///./src/app/registry/service/geometry.service.ts","webpack:///./src/app/registry/registry.module.ts","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/service/list-type.service.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/transition-event.service.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-editor.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/location-manager/layer-panel.component.ts","webpack:///./src/app/registry/component/location-manager/layer-panel.component.html","webpack:///./src/app/registry/model/list-type.ts","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-change-over-time-attribute-editor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.ts","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.html","webpack:///./src/app/registry/component/location-manager/feature-panel.component.ts","webpack:///./src/app/registry/component/location-manager/feature-panel.component.html","webpack:///./src/app/registry/component/location-manager/record-panel.component.ts","webpack:///./src/app/registry/component/location-manager/record-panel.component.html","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.ts","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.html","webpack:///./src/app/registry/component/historical-report/historical-report.component.ts","webpack:///./src/app/registry/component/historical-report/historical-report.component.html","webpack:///./src/app/registry/component/list-type/list-type-manager.component.ts","webpack:///./src/app/registry/component/list-type/list-type-manager.component.html","webpack:///./src/app/registry/component/list-type/lists-for-type.component.ts","webpack:///./src/app/registry/component/list-type/lists-for-type.component.html","webpack:///./src/app/registry/component/list-type/publish-modal.component.ts","webpack:///./src/app/registry/component/list-type/publish-modal.component.html","webpack:///./src/app/registry/component/list-type/list-type.component.ts","webpack:///./src/app/registry/component/list-type/list-type.component.html","webpack:///./src/app/registry/component/list-type/publish-version.component.ts","webpack:///./src/app/registry/component/list-type/publish-version.component.html","webpack:///./src/app/registry/component/list-type/list.component.ts","webpack:///./src/app/registry/component/list-type/list.component.html","webpack:///./src/app/registry/component/list-type/export-format-modal.component.ts","webpack:///./src/app/registry/component/list-type/export-format-modal.component.html","webpack:///./src/app/registry/component/curation/curation-job.component.ts","webpack:///./src/app/registry/component/curation/curation-job.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/HierarchyCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/StandardAttributeCRModel.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-model.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.ts","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.ts","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.ts","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.html"],"names":["layers","editingControl","simpleEditControl","geometryChange","EventEmitter","ngOnInit","window","onbeforeunload","destroy","initialize","map","geometryType","readOnly","this","addLayers","on","saveEdits","destroyMap","removeControl","remove","removeLayers","forEach","layer","isEditing","isRendering","editingLayer","startEditing","stopEditing","enableEditing","addEditingLayers","rerender","deleteAll","setPointCoordinates","lat","long","set","type","features","id","oid","properties","geometry","coordinates","changeMode","featureIds","isValid","getAll","length","geoJson","getDrawGeometry","editPropagator","value","reload","setEditing","setRendering","addLayer","newLayer","existingIndex","findIndex","findLayer","splice","push","sort","a","b","zindex","getLayers","getRenderedLayers","filter","setLayers","controls","point","line_string","polygon","trash","combine_features","uncombine_features","userProperties","styles","paint","getSource","addControl","add","removeSource","prefix","sourceName","getLayer","removeLayer","len","i","renderGeometryAsLayer","geojson","color","finalSourceName","addSource","data","source","layout","setData","featureCollection","polygons","feature","j","points","lines","createEmptyGeometryValue","zoomToLayersExtent","coords","LngLatBounds","coord","extend","center","getCenter","pt","LngLat","lng","flyTo","zoom","essential","polys","subpoly","fitBounds","padding","subline","GeometryService","Injectable","Output","RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","TransitionEventService","ListTypeService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","DndModule","DragDropModule","AccordionModule","forRoot","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","ImportTypesModalComponent","FhirExportSynchronizationConfigComponent","FhirImportSynchronizationConfigComponent","Dhis2SynchronizationConfigComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","StabilityPeriodComponent","ManageVersionsComponent","StandardAttributeEditorComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","TreeGeoSelector","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","LocationManagerComponent","LayerPanelComponent","FeaturePanelComponent","GeometryPanelComponent","TransitionEventTableComponent","TransitionEventModalComponent","HistoricalReportComponent","HistoricalEventModuleComponent","RecordPanelComponent","SelectTypeModalComponent","ListTypeManagerComponent","ListTypePublishModalComponent","ListsForTypeComponent","ListTypeComponent","ListComponent","PublishVersionComponent","CurationJobComponent","CurationProblemModalComponent","NgModule","imports","declarations","providers","entryComponents","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","services","http","eventService","listForType","typeCode","params","HttpParams","start","get","registry","contextPath","pipe","finalize","complete","toPromise","entries","versions","getVersion","apply","list","headers","HttpHeaders","post","JSON","stringify","createVersion","entry","metadata","applyVersion","removeVersion","pageNumber","pageSize","record","uid","values","attributeName","valueAttribute","publishList","getAllLists","getPublicVersions","append","getGeospatialVersions","startDate","endDate","getBounds","getCurationInfo","version","onlyUnresolved","curation","curationId","toString","getCurationPage","createCurationJob","listTypeVersionId","submitErrorResolve","config","setResolution","problem","resolution","problemId","SummaryKey","Document","Geometry","ValueOverTimeDiff","AbstractAction","actionType","ActionTypes","CREATEGEOOBJECTACTION","CreateGeoObjectAction","UPDATEATTRIBUTETACTION","attributeDiff","valuesOverTime","UpdateAttributeOverTimeAction","UpdateAttributeAction","ChangeRequestCurrentObject","UpdateChangeRequestCurrentObject","isNew","getActionsForAttribute","cr","hierarchyCode","actions","newActions","action","updateAttrAction","ChangeRequest","GovernanceStatus","PageEvent","implementDecisions","request","update","setActionStatus","actionOid","status","getAllRequests","rejectChangeRequest","delete","requestId","deleteFile","crOid","fileId","vfOid","getPage","attrConditions","getDetails","event","eventId","getHistoricalReport","ImportSheet","Location","Term","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","changeRequestEditor","lService","geomService","authService","dateService","registryService","postGeoObject","showAllInstances","tabIndex","attributeExcludes","isGeometryInlined","modifiedTermOption","currentTermOption","filterDate","forDate","datasetId","geoObjectAttributeExcludes","showStabilityPeriods","geometryAttributeType","getAttribute","AttributeType","LocalizedValue","parentAttributeType","changeRequest","createNewChangeRequest","ChangeRequestEditor","geoObjectType","hierarchies","shouldForceSetExist","changePage","got","current","orgCode","organizationCode","isSRA","isOrganizationRA","isGeoObjectTypeOrSuperRM","isGeoObjectTypeOrSuperRC","setFilterDate","date","refresh","manageVersions","manageVersion","getChangeRequestEditor","approvalStatus","createAction","geoObjectJson","parentJson","attributes","undefined","name","nextPage","hasChanges","hasErrors","attributeEditors","getEditors","filteredEditors","editor","indexOf","attribute","hierarchy","getEditorForAttribute","invalid","existsAttribute","GeoObjectType","existsEditor","prototype","hasOwnProperty","call","allValid","att","validate","getActions","trigger","transition","style","opacity","animate","state","left","Component","selector","templateUrl","styleUrls","animations","Input","attributeForm","ViewChild","ViewChildren","key","disabled","inlinelayout","valueChange","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","next","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","message","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","unique","onAnimationDone","label","localeValues","precision","scale","TREE_SCALE_FACTOR_X","TREE_SCALE_FACTOR_Y","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","modalService","contextMenuService","localizeService","userOrganization","currentHierarchy","instance","geoObjectTypes","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","nativeElement","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","subscribe","localize","decode","renderTree","rootGeoObjectTypes","d3","select","canDrag","overflowDiv","scrollLeft","scrollRight","svg","attr","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","calculateCanDrag","getBBox","x","y","width","height","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","superTypeCode","calculateRelatedHierarchies","relatedHiers","hierarchyType","descendants","find","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","addChild","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","isPointWithin","dropZoneBbox","activeDropZones","parent","gotRectW","gotRectH","clearGhostNodes","isDragGroup","classed","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","parseInt","dropElY","childW","childH","dzg","dropTargetHasChildren","children","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","text","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","insertBetweenTypes","ghostNode","drag","rect","getBoundingClientRect","top","selThis","target","document","elementFromPoint","selectAll","each","sidebarDragHandler","registerSvgHandlers","startPoint","svgGot","getPos","setPos","split","svgDragHandler","findHierarchyByCode","ht","findOrganizationByCode","organizations","org","parentGeoObjectTypeCode","childGeoObjectTypeCode","addChildToHierarchy","then","index","relatedHierarchies","refreshPrimaryHierarchy","catch","err","error","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","isRA","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","init","response","setLocales","locales","setGeoObjectTypes","types","pos","getGeoObjectTypePosition","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","localizedValue","toLowerCase","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","h","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","geoObjectTypeCode","gOT","show","childType","nodeMenuComponent","leafMenuComponent","item","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","bsModalRef","animated","backdrop","ignoreBackdropClick","content","onHierarchytTypeCreate","nameA","toUpperCase","nameB","deleteHierarchyType","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","edit","getHierarchyTypePosition","description","progress","acknowledgement","disclaimer","useConstraints","accessConstraints","contact","phoneNumber","email","isPrimaryHierarchy","createGeoObjectType","groupSuperType","onGeoObjTypeCreate","deleteGeoObjectType","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","onGeoObjectTypeSubmitted","position","removeFromHierarchy","parentGotCode","gotCode","isActive","filtered","setTimeout","handleInheritHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","setInheritedHierarchy","handleUninheritHierarchy","removeInheritedHierarchy","importTypes","onNodeChange","ErrorHandler","showErrorAsDialog","static","geoObject","localizationService","onChangeSubject","generateAttributeEditors","editors","attrs","slice","isChangeOverTime","ChangeRequestChangeOverTimeAttributeEditor","StandardAttributeCRModel","attributeEditor","_isValid","skipExists","findExistingValueOverTimeByOid","attributeCode","vot","onChange","existsAtDate","existEditors","valLen","isDelete","between","isNewGeoObject","submitFunction","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","masterListId","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","dateStr","isGeometryEditable","fetchGeoObjectType","fetchLocales","newGeoObjectOverTime","retJson","GeoObjectOverTime","configureFromImportError","importError","historyId","object","parents","importErrorId","parentTreeNode","configureAsExisting","fetchGeoObject","fetchHierarchies","getGeoObjectOverTime","parse","getLocales","getGeoObjectTypes","console","log","typeTypeCode","getHierarchiesForGeoObject","getTypeAheadObservable","Observable","create","observer","getGeoObjectSuggestionsTypeAhead","results","typeaheadOnSelect","ptn","getGeoObjectByCode","canSubmit","cancel","hide","submit","getHierarchyTypes","getHierarchyGroupedTypes","createHierarchyType","htJSON","updateHierarchyType","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","getHierarchiesForType","includeTypes","getHierarchiesForSubtypes","getGeoObjectSuggestions","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","parentTermCode","termJSON","removeTerm","termCode","getNewLocaleInfo","installLocale","language","country","variant","mapboxgl","accessToken","roots","search","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","doesGeoObjectExistAtRange","newGeoObjectInstance","gtJSON","updateGeoObjectType","addAttributeType","geoObjTypeId","attributeType","updateAttributeType","deleteAttributeType","addAttributeTermTypeOption","term","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","getGeoObject","getGeoObjectBounds","getGeoObjectBoundsAtDate","getScheduledJobs","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","getExportDetails","resolveScheduledJob","submitValidationResolve","geoObjectCode","setAttributeVersions","collection","applyGeoObjectEdit","notes","applyGeoObjectCreate","prop","val","Date","getTime","getDatasetBounds","getOrganizations","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","unlock","run","getJobs","getFhirExportImplementations","getFhirImportImplementations","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","bbox","fontSize","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","configurationChange","stateChange","onNext","emit","onCancel","service","locations","onBack","hasProblems","locationProblems","resolved","handleError","getMessageFromError","exclusions","exclusion","termProblems","changeRequestService","geoObjectId","reason","loading","dataSource","myOrgTypes","isGeoObjectTypeRC","handleDateChange","onValidChange","newValid","geometryEditor","getIsValid","changeTypeaheadLoading","_stepConfig","steps","GRAPH_LAYER","LayerEvent","route","router","draggable","effectAllowed","disable","handle","CONSTANT","includeGraphLayer","layerChange","baseLayerChange","reorder","zoomTo","baselayerIconHover","lists","form","currentStartDate","currentEndDate","baseLayers","sprite","url","selected","subscription","queryParams","handleParams","unsubscribe","changes","currentValue","versionNumber","open","unshift","toggleLayer","v","isSearchRequired","handleSearch","reverse","l","isEqual","navigate","relativeTo","queryParamsHandling","enabled","concat","onToggleLayer","active","ColorGen","hexString","toggleActive","prevLayer","onGotoBounds","onCreate","toggleBaseLayer","bl","moveLayerIncrementally","offset","moveLayer","oldLayers","drop","moveItemInArray","previousIndex","currentIndex","ListTypeByType","ListMetadata","ListType","ListTypeEntry","VersionMetadata","ListVersionMetadata","ListTypeVersion","ContextLayer","ContextList","LayerRecord","CurationProblem","CurationJob","queueLimit","removeAfterUpload","uploader","FileUploader","onBuildItemForm","fileItem","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","onErrorItem","onSelect","onClick","queue","uploadAll","auth","orgs","organizationLabel","getOrganizationLabelFromCode","organization","isLeaf","isPrivate","toggleIsLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","geoObjectTypeManagementService","GeoObjectTypeModalStates","termOption","modalStateSubscription","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","fetchOrganizationLabel","defineAttributeModal","defineAttribute","manageAttributes","editAttribute","removeAttributeType","in","newAttribute","setAttribute","attributeInputComponent","AttributeTermType","AttributeDecimalType","isFormValid","isAttrValid","validator","c","geoObjectAttributeCode","valid","provide","NG_VALIDATORS","useExisting","multi","Directive","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","replace","addTermOption","rootTerm","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","t","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","getCode","treeNode","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","hierarchyLabelW","hierarchyLabelH","headerFontSize","hierarchyLabelY","lineWidth","textWidth","html","d","headerGBbox","getRelatedHierarchies","nodeMouseover","element","nodeMousemove","nodeTooltipBbox","documentElement","scrollHeight","scrollWidth","nodeMouseleave","descends","insert","gtree","links","join","gHeader","gotHeaderW","MOUSE_HOVER_EVENT_ENTER","MOUSE_HOVER_EVENT_MOVE","MOUSE_HOVER_EVENT_EXIT","gotHeaderFontSize","substring","arrowRectD","gArrow","gotBodyFontSize","gotOptionsButtonFontSize","renderRelatedHierarchiesMenu","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","sysService","changeDetectorRef","currentDate","showImportConfig","importStrategies","strategy","ImportStrategy","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","copyBlank","getExternalSystems","paginatedSystems","externalSystems","resultSet","views","allHierarchyViews","allTypeViews","len0","view","len2","len9","view2","findType","findHier","filteredHierarchyViews","filteredTypeViews","getUrl","format","importStrategy","externalSystem","sys","onSelectHierarchy","onSelectType","checkDates","setImportSource","checkDateFieldValidity","startDateField","dateFields","dateFieldComponentsArray","toArray","field","inputName","setInvalid","location","today","todayString","getDateString","objectKeys","page","count","requests","columns","filterCriteria","ascending","hasBaseDropZoneOver","sortable","snapshot","paramMap","toggleId","uploadRequest","doc","documents","isSorting","onSort","getGOTLabel","displayLabel","setValid","onUpload","onDownloadFile","fileOid","href","onDeleteFile","fileOverBase","pageChange","onExecute","getFirstGeoObjectInActions","onReject","onDelete","deletedRequestId","onUpdate","applyActionStatusProperties","decisionMaker","getUsername","requestTrackBy","toggle","replaceState","parentElement","className","includes","criteria","getActiveDetailComponent","endsWith","formatDate","formatDateForDisplay","isRequestTooOld","firstAction","UPDATEGEOOBJECTACTION","onEditAttributes","canEdit","permissions","encapsulation","ViewEncapsulation","None","getEditAction","hierarchyEntry","generateEditors","editAction","validEditors","validateEditors","hasTimeConflict","checkRanges","hasExistConflict","checkExistRanges","includeUnmodified","diff","HierarchyCREditor","ValueOverTimeCREditor","valueOverTime","votDiff","createNewVersion","original","createEmptyHierarchyEntry","hierarchyOverTime","ValueOverTime","constructNewDiff","terms","getGeoObjectTypeTermAttributeOptions","ChangeType","ADD","changeRequestAttributeEditor","getGeoObjectTimeRangeStorage","getValueFromGeoObjectForDiff","conflictMessages","Set","validateDate","getDateFromDateString","end","validateUpdateReference","missingReference","getStartDate","setStartDate","newStartDate","oldStartDate","goRange","oldEndDate","getEndDate","oldValue","newEndDate","removeEmptyDiff","END_DATE","START_DATE","newValue","coordinate","Number","parseFloat","toFixed","areValuesEqual","VALUE","setLocalizedValue","diffs","val1","val2","localeValue","lv2","getValueAtLocale","locale","lv1","lv","getValue","updateAction","REMOVE","votc","requestService","elementRef","isValidChange","readonly","viewModels","isRootOfHierarchy","isInitialized","calculateViewModels","onAddNewVersion","previousValue","hasLocalizationChanged","viewModel","onDateChange","summaryKey","NEW","VersionDiffView","termAttributeCode","onApprove","ACCEPTED","REJECTED","onPending","PENDING","pType","loopI","goCode","ancestors","p","ancestor","setParentValue","toggleGeometryEditing","toggleGeometryView","mapRowHeight","getElementsByClassName","offsetHeight","getOrCreateLayer","toggleOldGeometryView","context","Layer","LayerColor","oldLayer","OLD","manualCoordinateChange","newCoordinateX","newCoordinateY","newX","newY","num","latValid","isFinite","Math","abs","longValid","isLongitude","ControlContainer","NgForm","host","viewProviders","isContributorOnly","isContributerOnly","urlSubscriber","highlightOid","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","interval","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","order","jobPos","onViewAllCompleteJobs","onView","onCancelScheduledJob","jobId","onResolveScheduledJob","allSelected","timeCounter","isPolling","hasRowValidationProblem","onPageChange","baseUrl","hostname","port","notifier","webSocket","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onEdit","onConflictAction","importErrors","problems","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onProblemResolvedListener","onEditGeoObject","editModal","onSubmit","iService","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","confirm","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onToggleCompletedTasks","rService","implementations","reset","fieldChange","levels","level","onSelectMasterList","addLevel","versionId","removeLevel","DEFAULT_MAPPING_STRATEGY","cOrg","levelRows","orgUnitGroups","levelRow","levelNum","isAttributeEditor","system","esConfig","clearMappingData","onChangeHierarchy","buildDefaultMappings","attributeMappingStrategy","isOrgUnitGroup","cgrAttrName","dhis2Id","dhis2AttrName","lvl","mappings","orgUnitGroupId","onSelectLevelType","attrCfg","editorIndex","getEditorIndex","mapping","attrConfigInfos","info","cgrAttr","deleteMapping","addNewMapping","levelRowIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Attrs","dhis2Attr","onChangeDHIS2Attr","isDifferentGot","infos","mapCgrAttr","attributeMappingStrategies","onChangeTargetType","onSuccess","onRemove","isImport","cSystem","oIndex","sIndex","systems","handleFieldChange","onOrganizationSelected","onChangeExternalSystem","implementation","onRun","onGenerateFile","encodeURIComponent","stepLabel","configService","configOid","exportErrors","listService","mapService","pageMode","longitude","latitude","MODE","SEARCH","VIEW","currentText","isEdit","mode","showPanel","preventSingleClick","ready","searchFeatures","searchEnabled","typeahead","handleParameterChange","isRC","isRM","handleFeatureSearch","mapConfig","container","sources","mapbox","tileSize","glyphs","protocol","attributionControl","bounds","logoPosition","Map","initMap","handleSelect","handleRecord","pageContext","setPanel","localeProperty","navigator","featureText","toLocaleLowerCase","queryRenderedFeatures","localizedName","self","timeout","resize","togglePanel","removeFeatureState","onModeChange","NavigationControl","visualizePitch","AttributionControl","compact","handleMapClickEvent","array","createUrlTree","go","onZoomTo","Array","isArray","llb","maxZoom","onPanelCancel","clearRecord","onPanelSubmit","applyInfo","isChangeRequest","backReference","SuccessModalComponent","class","changeRequestId","cLayer","handleBasemapStyle","baseLayer","setStyle","onToggleSearch","zoomToFeature","timer","setFeatureState","sourceLayer","hover","recordType","onLayerChange","onReorderLayers","otherLayer","promoteId","addVectorLayer","tiles","onFeatureSelect","geometryService","VERSIONS","ATTRIBUTES","HIERARCHY","GEOMETRY","featureChange","modeChange","panelCancel","panelSubmit","updateCode","preGeoObject","setEditMode","onCancelInternal","trim","onManageAttributeVersion","onManageHiearchyVersion","getElementById","scroll","behavior","onClose","tab","handleTab","dateCondition","beforeTypeCondition","filterTypesBasedOnMyOrg","myOrgs","getMyOrganizations","filterChange","onEventChange","deleteEvent","jsEvent","transitionEvent","DRAW_SCALE_MULTIPLIER","VIEWPORT_SCALE_FACTOR_X","VIEWPORT_SCALE_FACTOR_Y","GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR","GRAPH_GO_LABEL_COLOR","GRAPH_CIRCLE_FILL","GRAPH_LINE_COLOR","changeDetector","activeTransition","afterTypes","beforeTypes","isGeoObjectTypeRM","beforeTypeCode","afterTypeCode","eventDate","transitions","setActiveTransition","highlight","trans","sourceCode","targetCode","uuid","v4","sourceType","targetType","transitionType","impact","calculateDerivedAttributes","renderVisual","mouseEvent","transitionOid","validChange","isSource","property","addDay","result","pair","targetText","sourceText","clear","localizeTransitionImpact","localizeTransitionType","stats","sourceStats","targetStats","updown","typeUpdown","typePart","onChangeTypeUpdown","onDragStart","onDragEnd","onDragged","onDraggableCopied","onDraggableLinked","onDraggableMoved","onDragCanceled","onDragover","newIndex","root","appData","generateAppData","renderingData","generateRenderingData","depth","linkDataMappings","multipleParentLinks","link","d3Data","dx","dy","d3RenderingData","parentNode","childNode","grandChild","isChildOfOtherNode","typeaheadParent","exportToExcel","after","listByType","listId","onListTypeChange","arr","write","listType","typeLabel","subtypeHierarchies","listMetadata","originator","collectionDate","process","acknowledgements","contactName","telephoneNumber","geospatialMetadata","topicCategories","placeKeywords","updateFrequency","lineage","languages","scaleResolution","spatialRepresentation","referenceSystem","reportSpecification","distributionFormat","includeLatLong","getIsDisabled","elClasses","classList","onNewInterval","intervalJson","validOn","publishingStartDate","reduce","collapsed","toggleVersions","showAll","onGotoMap","visibility","master","pService","isRefreshing","isWritable","showInvalid","searchPlaceholder","setList","refreshProgress","handleProgressChange","_list","listAttrs","calculateListAttributes","onShowInvalidChange","getFilter","clearFilters","toggleFilter","isCollapsed","newFilter","getTypeaheadDataObservable","base","filt","total","f","s","handleInputChange","handleListChange","isFilterable","dependency","setListId","onPublish","historyOid","onNewGeoObject","onExport","onFormat","onWheel","onRunCuration","goUid","toggleResolution","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","hideRelatedHierarchy","existingSecondary","existingMenu","contextMenuGroup","hasActionsPermissions","titleLabel","actionsTitle","removeFromHierarchyLabel","noRelatedHierLabel","hideRelatedHierarchyLabel","uninheritLabel","inheritLabel","isSecondaryHierarchyRendered","numActions","removeWidth","hideRelatedWidth","uninheritWidth","existingSecondaryCode","secondaryHierarchy","relatedGotHasParents","inheritWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","onClickUninheritHierarchy","onClickInheritHierarchy","myBbox","primaryHierBbox","gSecondary","paddingLeft","secondaryGot","secondaryGotBbox","gConnector","toRoot","allGeoObjectTypes","gObj","selectedGeoObjectType","onDeleteAttribute","existRangeStale","immediateParent","invalidParent","parentDoesNotExist","exists","directParent","currentDirectParent","getLowestLevelFromHierarchyEntry","oldParents","newValueStrConcat","removeType","newParents","parentType","HierarchyOverTimeEntry","currentImmediateParent","findAction","component","populate","_value","convertValueForDisplay","calculateSummaryKey","convertDateForDisplay","convertOldValueForDisplay","attrOpts","hasTime","hasValue","UPDATE","TIME_CHANGE","VALUE_CHANGE","UNMODIFIED","DELETE","summaryKeyData","newKey","localizeSummaryKey","summaryKeyLocalized","conflictMessagesHasSeverity","severity","has","msg","hasError","size","hasWarning","day","getUTCDate","getUTCFullYear","getUTCMonth","applyAction","saveDraw","startEdit","endEdit","latestPeriodIsActive","periods","activeEntry","forDateEntry","infinityDayPadding","dataTimeSpan","_showHint","showHint","generate","timeline","timelines","period","setActiveTimelineEntry","forDateIndex","navigateRelative","amount","nextIndex","sharedAttributeEditor","generatePeriods","generateTimelines","calculateDataTimeSpan","endDay","startDay","displayStartDate","displayEndDate","span","currentTimeline","daysLeft","daysInPeriod","daysInFirstEntry","timelineEntry1","timelineEntry2","timelineEntry","boundaries","startIndex","boundary","isStart","isEnd","endIndex","dlen","calculateView","newVal","onValueChange","_mapHeight","mapDiv","floor","random","zoomToBbox","mapHeight","bboxCode","bboxType","bboxDate","elRef","editEmitter","visible","editSessionEnabled","save","onAdd","customEvent","onManageVersion","cHierarchies","parentMap","calculate","time","pot","getHierarchies","onManageVersions","mainForm","nodes","isExpandedField","idField","expanded","curAction","cuDetail","arDetail","spDetail","hasConflict","onCloneGeometry","hasDuplicateDate","originalGeoObjectOverTime","geoObjectOverTime","vAttributes","isVersionForHighlight","votArr","getVersionData","vAttribute","getDefaultLocaleVal","defVal","locVal","setDateAttribute","moment","localeData","longDateFormat","setInfinity","PRESENT","onCloneGeometryToNewVersion","geoObjectOverTimeInput","transform","items","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","Pipe","pure","routes","path","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild","callback"],"mappings":"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AAQ,CACvBC,QAAS,WAGd,GAA0B,SAAtB,EAAK/G,cAAiD,cAAtB,EAAKA,aAA8B,CAC1E,IAAIgG,EAEJ,GAFIA,EAASrF,EAAMqE,QAAQjD,YAEf,CACR,IAAI,EAAS,IAAI,EAAAkE,aACjBD,EAAOtF,SAAQ,SAAAmF,GACXA,EAAMnF,SAAQ,SAAAsG,GACVA,EAAQtG,SAAQ,SAAAwF,GACZ,EAAOC,OAAOD,YAK1B,EAAKnG,IAAI+G,UAAU,EAAQ,CACvBC,QAAS,W,iCAtkBxBE,I,oCAAAA,EAAe,QAAfA,EAAe,O,EAD5B,GACa,EAAAA,mB,+DAAAA,EAAe,E,KAD3B,EAAAC,c,uBAmBa1H,eAAc,E,KAAvB,EAAA2H,Y,0GC7BL,WACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,SACA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UAEA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,UAEA,OACA,cACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,U,8FAEA,4B,wCAgKaC,I,iCAAAA,I,sCAjDE,CACP,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,6BACA,GAAAC,uBACA,GAAAC,iBACH,SA7HQ,CACL,EAAAC,aACA,EAAAC,aACA,EAAAC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","file":"1.chunk.js","sourcesContent":["import { Injectable, Output, EventEmitter } from \"@angular/core\";\n\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { Map, LngLat, LngLatBounds } from \"mapbox-gl\";\n\nimport { Layer } from \"../component/geoobject-shared-attribute-editor/manage-versions-model\";\n\n/**\n * This is a generic service used for rendering layers from ValueOverTime objects\n */\n@Injectable()\nexport class GeometryService {\n\n    map: Map;\n\n    layers: Layer[] = [];\n\n    geometryType: String;\n\n    readOnly: boolean;\n\n    // @Output() layersChange: EventEmitter<VersionOverTimeLayer[]> = new EventEmitter();\n\n    editingControl: any = null;\n\n    simpleEditControl: any = null;\n\n    editingLayer: Layer;\n\n    @Output() geometryChange = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    ngOnInit() {\n        window.onbeforeunload = () => this.destroy();\n    }\n\n    initialize(map: Map, geometryType: String, readOnly: boolean) {\n        this.map = map;\n        this.geometryType = geometryType;\n        // this.editingControl = null;\n\n        this.addLayers();\n\n        this.map.on(\"draw.create\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.delete\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.update\", () => {\n            this.saveEdits();\n        });\n    }\n\n    destroy(destroyMap: boolean = true): void {\n        if (this.editingControl != null) {\n            this.map.removeControl(this.editingControl);\n            this.editingControl = null;\n        }\n\n        if (this.map != null && destroyMap) {\n            this.map.remove();\n            this.map = null;\n        } else if (this.map != null) {\n            this.removeLayers();\n        }\n\n        if (this.layers != null) {\n            this.layers.forEach(layer => {\n                layer.isEditing = false;\n                layer.isRendering = false;\n            });\n        }\n\n        this.editingLayer = null;\n        this.layers = [];\n    }\n\n    startEditing(layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        this.editingLayer = layer;\n        this.editingLayer.isEditing = true;\n\n        if (!this.readOnly) {\n            this.enableEditing();\n        }\n\n        this.addEditingLayers();\n    }\n\n    stopEditing(rerender: boolean = true) {\n        if (this.isEditing()) {\n            this.saveEdits(rerender);\n\n            this.editingLayer.isEditing = false;\n            this.editingLayer = null;\n\n            this.editingControl.deleteAll();\n            this.map.removeControl(this.editingControl);\n\n            this.editingControl = null;\n        }\n    }\n\n    isEditing(): boolean {\n        return this.editingLayer != null;\n    }\n\n    setPointCoordinates(lat: any, long: any) {\n        if (this.editingLayer != null) {\n            this.editingControl.set({\n                type: \"FeatureCollection\",\n                features: [{\n                    id: this.editingLayer.oid,\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: { type: \"Point\", coordinates: [long, lat] }\n                }]\n            });\n\n            this.editingControl.changeMode(\"simple_select\", { featureIds: this.editingLayer.oid });\n\n            this.saveEdits();\n\n            /*\n            this.editingLayer.value = {\n              type: 'FeatureCollection',\n              features: [{\n              id: this.editingLayer.oid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ long, lat ] }\n              }]\n            };\n            */\n\n            /*\n            this.editingLayer.value.coordinates = [ -97.4870830718814, 41.84836050415993 ];\n\n            this.editingControl.set(this.editingLayer.value);\n\n            this.removeLayers();\n            this.addLayers();\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.editingLayer.oid } );\n            */\n        }\n    }\n\n    isValid(): boolean {\n        if (!this.readOnly) {\n            let isValid: boolean = false;\n\n            if (this.editingControl != null) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if (featureCollection.features.length > 0) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    saveEdits(rerender: boolean = true): void {\n        if (this.editingLayer != null) {\n            let geoJson = this.getDrawGeometry();\n\n            this.editingLayer.editPropagator.value = geoJson;\n\n            if (rerender) {\n                this.removeLayers();\n                this.addLayers();\n            }\n        }\n    }\n\n    public reload(): void {\n        if (this.map != null) {\n            this.removeLayers();\n            this.addLayers();\n\n            if (this.editingControl != null) {\n                this.editingControl.deleteAll();\n            }\n\n            this.addEditingLayers();\n        }\n    }\n\n    setEditing(isEditing: boolean, layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        layer.isEditing = isEditing;\n\n        if (isEditing) {\n            this.startEditing(layer);\n        }\n    }\n\n    setRendering(isRendering: boolean, layer: Layer) {\n        layer.isRendering = isRendering;\n        this.addLayer(layer);\n    }\n\n    addLayer(newLayer: Layer) {\n        let existingIndex = this.layers.findIndex((findLayer: Layer) => { return findLayer.oid === newLayer.oid; });\n\n        if (existingIndex !== -1) {\n            this.layers.splice(existingIndex, 1);\n            this.layers.push(newLayer);\n        } else {\n            this.layers.push(newLayer);\n        }\n\n        if (newLayer.isEditing) {\n            this.startEditing(newLayer);\n        }\n\n        this.layers = this.layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.removeLayers();\n        this.addLayers();\n    }\n\n    getLayers(): Layer[] {\n        return this.layers;\n    }\n\n    getRenderedLayers(): Layer[] {\n        return this.layers.filter(layer => layer.isRendering);\n    }\n\n    setLayers(layers: Layer[]): void {\n        this.removeLayers();\n\n        this.layers = layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.addLayers();\n    }\n\n    enableEditing(): void {\n        if (this.editingControl == null) {\n            if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: false,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n                this.editingControl = new MapboxDraw({\n                    userProperties: true,\n                    controls: {\n                        point: true,\n                        line_string: false,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    },\n                    styles: [\n                        {\n                            id: \"highlight-active-points\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"true\"]],\n                            paint: {\n                                \"circle-radius\": 13,\n                                \"circle-color\": \"#33FFF9\",\n                                \"circle-stroke-width\": 4,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        },\n                        {\n                            id: \"points-are-blue\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"false\"]],\n                            paint: {\n                                \"circle-radius\": 10,\n                                \"circle-color\": \"#800000\",\n                                \"circle-stroke-width\": 2,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        }\n                    ]\n                });\n            } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: true,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            }\n\n            if (this.map.getSource(\"mapbox-gl-draw-cold\") == null) {\n                this.map.addControl(this.editingControl);\n            }\n        }\n    }\n\n    addEditingLayers(): void {\n        if (this.editingLayer != null && this.editingControl != null) {\n            let val = this.editingLayer.editPropagator.value;\n\n            if (val) {\n                this.editingControl.add(this.editingLayer.editPropagator.value);\n            }\n        }\n    }\n\n    removeSource(prefix: string): void {\n        if (!this.map) {\n            return;\n        }\n\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            if (this.map.getLayer(sourceName + \"-polygon\") != null) {\n                this.map.removeLayer(sourceName + \"-polygon\");\n            }\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            if (this.map.getLayer(sourceName + \"-point\") != null) {\n                this.map.removeLayer(sourceName + \"-point\");\n            }\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\") {\n            if (this.map.getLayer(sourceName + \"-line\") != null) {\n                this.map.removeLayer(sourceName + \"-line\");\n            }\n        }\n\n        if (this.map.getSource(sourceName) != null) {\n            this.map.removeSource(sourceName);\n        }\n    }\n\n    removeLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n                this.removeSource(layer.oid);\n            }\n        }\n    }\n\n    addLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n\n                if (layer.isRendering) {\n                    this.renderGeometryAsLayer(layer.editPropagator == null ? layer.geojson : layer.editPropagator.value, layer.oid, layer.color);\n                }\n            }\n        }\n    }\n\n    renderGeometryAsLayer(geometry: any, sourceName: string, color: string) {\n        let finalSourceName: string = sourceName + \"-geoobject\";\n\n        if (!this.map) {\n            return;\n        }\n        if (!geometry) {\n            return;\n        }\n\n        this.map.addSource(finalSourceName, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            // Polygon Layer\n            this.map.addLayer({\n                id: finalSourceName + \"-polygon\",\n                type: \"fill\",\n                source: finalSourceName,\n                paint: {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7\n                }\n            });\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            // Point layer\n            this.map.addLayer({\n                id: finalSourceName + \"-point\",\n                type: \"circle\",\n                source: finalSourceName,\n                paint: {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                }\n            });\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n            this.map.addLayer({\n                id: finalSourceName + \"-line\",\n                source: finalSourceName,\n                type: \"line\",\n                layout: {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                paint: {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            });\n        }\n\n        (<any> this.map.getSource(finalSourceName)).setData(geometry);\n    }\n\n    getDrawGeometry(): any {\n        if (this.editingControl != null) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if (featureCollection.features.length > 0) {\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if (this.geometryType === \"MULTIPOLYGON\") {\n                    let polygons = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPolygon\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                polygons.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            polygons.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: \"MultiPolygon\"\n                    };\n                } else if (this.geometryType === \"MULTIPOINT\") {\n                    let points = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPoint\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                points.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            points.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: \"MultiPoint\"\n                    };\n                } else if (this.geometryType === \"MULTILINE\") {\n                    let lines = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiLineString\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                lines.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            lines.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: \"MultiLineString\"\n                    };\n                } else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static createEmptyGeometryValue(geometryType: String): any {\n        let value = { type: geometryType, coordinates: [] };\n\n        if (geometryType === \"MULTIPOLYGON\") {\n            value.type = \"MultiPolygon\";\n        } else if (geometryType === \"POLYGON\") {\n            value.type = \"Polygon\";\n        } else if (geometryType === \"POINT\") {\n            value.type = \"Point\";\n        } else if (geometryType === \"MULTIPOINT\") {\n            value.type = \"MultiPoint\";\n        } else if (geometryType === \"LINE\") {\n            value.type = \"Line\";\n        } else if (geometryType === \"MULTILINE\") {\n            value.type = \"MultiLine\";\n        }\n\n        return value;\n    }\n\n    zoomToLayersExtent(): void {\n        this.layers.forEach(layer => {\n            if (layer.geojson != null) {\n                if (this.geometryType === \"MULTIPOINT\" || this.geometryType === \"POINT\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(coord => {\n                            bounds.extend(coord);\n                        });\n\n                        let center = bounds.getCenter();\n                        let pt = new LngLat(center.lng, center.lat);\n\n                        this.map.flyTo({\n                            center: pt,\n                            zoom: 9,\n                            essential: true\n                        });\n                    }\n                } else if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(polys => {\n                            polys.forEach(subpoly => {\n                                subpoly.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(lines => {\n                            lines.forEach(subline => {\n                                subline.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule, DatePipe } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\nimport { DndModule } from \"ngx-drag-drop\";\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\n\nimport { ImportTypesModalComponent } from './component/hierarchy/modals/import-types-modal.component';\nimport { LocalizedInputComponent } from \"./component/form-fields/localized-input/localized-input.component\";\nimport { LocalizedTextComponent } from \"./component/form-fields/localized-text/localized-text.component\";\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { CreateHierarchyTypeModalComponent } from \"./component/hierarchy/modals/create-hierarchy-type-modal.component\";\nimport { AddChildToHierarchyModalComponent } from \"./component/hierarchy/modals/add-child-to-hierarchy-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./component/hierarchy/modals/create-geoobjtype-modal.component\";\nimport { ManageAttributesModalComponent } from \"./component/hierarchy/geoobjecttype-management/manage-attributes-modal.component\";\nimport { DefineAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component\";\nimport { EditAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component\";\nimport { ShapefileModalComponent } from \"./component/importer/modals/shapefile-modal.component\";\nimport { AttributesPageComponent } from \"./component/importer/modals/attributes-page.component\";\nimport { LocationPageComponent } from \"./component/importer/modals/location-page.component\";\nimport { LocationProblemPageComponent } from \"./component/importer/modals/location-problem-page.component\";\nimport { LocationProblemComponent } from \"./component/importer/modals/location-problem.component\";\nimport { TermProblemPageComponent } from \"./component/importer/modals/term-problem-page.component\";\nimport { TermProblemComponent } from \"./component/importer/modals/term-problem.component\";\nimport { SpreadsheetModalComponent } from \"./component/importer/modals/spreadsheet-modal.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { TermOptionWidgetComponent } from \"./component/hierarchy/geoobjecttype-management/term-option-widget.component\";\nimport { AttributeInputComponent } from \"./component/hierarchy/geoobjecttype-management/attribute-input.component\";\nimport { EditTermOptionInputComponent } from \"./component/hierarchy/geoobjecttype-management/edit-term-option-input.component\";\nimport { ManageTermOptionsComponent } from \"./component/hierarchy/geoobjecttype-management/manage-term-options.component\";\nimport { GeoObjectTypeInputComponent } from \"./component/hierarchy/geoobjecttype-management/geoobjecttype-input.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./component/hierarchy/modals/manage-geoobjecttype-modal.component\";\nimport { RequestTableComponent } from \"./component/crtable/request-table.component\";\nimport { CreateUpdateGeoObjectDetailComponent } from \"./component/crtable/action-detail/create-update-geo-object/detail.component\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component\";\nimport { StabilityPeriodComponent } from \"./component/geoobject-shared-attribute-editor/stability-period.component\";\nimport { ManageVersionsComponent } from \"./component/geoobject-shared-attribute-editor/manage-versions.component\";\nimport { StandardAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/standard-attribute-editor.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { GeoObjectEditorComponent } from \"./component/geoobject-editor/geoobject-editor.component\";\nimport { GeoObjectEditorMapComponent } from \"./component/geoobject-editor-map/geoobject-editor-map.component\";\nimport { SimpleEditControl } from \"./component/geoobject-editor-map/simple-edit-control/simple-edit-control.component\";\nimport { CascadingGeoSelector } from \"./component/cascading-geo-selector/cascading-geo-selector\";\nimport { TreeGeoSelector } from \"./component/tree-geo-selector/tree-geo-selector\";\nimport { ActionDetailModalComponent } from \"./component/crtable/action-detail/action-detail-modal.component\";\nimport { DataImporterComponent } from \"./component/importer/dataimporter.component\";\nimport { DataExportComponent } from \"./component/data-export/data-export.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { JobConflictModalComponent } from \"./component/scheduled-jobs/conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./component/scheduled-jobs/conflict-widgets/reupload-modal.component\";\nimport { ParentReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component\";\nimport { TermReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component\";\nimport { RowValidationProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component\";\nimport { StepIndicatorComponent } from \"./component/scheduled-jobs/step-indicator.component\";\nimport { ImportProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/import-problem-widget.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { FhirExportSynchronizationConfigComponent } from './component/synchronization-config/fhir-export-synchronization-config.component';\nimport { Dhis2SynchronizationConfigComponent } from './component/synchronization-config/dhis2-synchronization-config.component';\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigModalComponent } from \"./component/synchronization-config/synchronization-config-modal.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\n\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { LayerPanelComponent } from \"./component/location-manager/layer-panel.component\";\nimport { FeaturePanelComponent } from \"./component/location-manager/feature-panel.component\";\nimport { GeometryPanelComponent } from \"./component/location-manager/geometry-panel.component\";\n\nimport { GeoObjectAttributeCodeValidator } from \"./factory/form-validation.factory\";\n\nimport { GeoObjectTypePipe } from \"./pipe/geoobjecttype.pipe\";\nimport { GeoObjectAttributeExcludesPipe } from \"./pipe/geoobject-attribute-excludes.pipe\";\nimport { ToEpochDateTimePipe } from \"./pipe/to-epoch-date-time.pipe\";\nimport { RegistryService } from \"./service/registry.service\";\nimport { TaskService } from \"./service/task.service\";\nimport { HierarchyService } from \"./service/hierarchy.service\";\nimport { SynchronizationConfigService } from \"./service/synchronization-config.service\";\nimport { LocalizationManagerService } from \"./service/localization-manager.service\";\nimport { ChangeRequestService } from \"./service/change-request.service\";\nimport { IOService } from \"./service/io.service\";\nimport { MapService } from \"./service/map.service\";\nimport { GeoObjectTypeManagementService } from \"./service/geoobjecttype-management.service\";\n\nimport { RegistryRoutingModule } from \"./registry-routing.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { AccordionModule } from \"ngx-bootstrap/accordion\";\n\nimport \"../rxjs-extensions\";\nimport { FhirImportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-import-synchronization-config.component\";\nimport { TransitionEventService } from \"./service/transition-event.service\";\nimport { TransitionEventTableComponent } from \"./component/transition-event/transition-event-table.component\";\nimport { TransitionEventModalComponent } from \"./component/transition-event/transition-event-modal.component\";\nimport { HistoricalReportComponent } from \"./component/historical-report/historical-report.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\n\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListTypePublishModalComponent } from \"./component/list-type/publish-modal.component\";\nimport { ListTypeService } from \"./service/list-type.service\";\nimport { ListsForTypeComponent } from \"./component/list-type/lists-for-type.component\";\nimport { ListTypeComponent } from \"./component/list-type/list-type.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { PublishVersionComponent } from \"./component/list-type/publish-version.component\";\nimport { ExportFormatModalComponent } from \"./component/list-type/export-format-modal.component\";\nimport { RecordPanelComponent } from \"./component/location-manager/record-panel.component\";\nimport { SelectTypeModalComponent } from \"./component/location-manager/select-type-modal.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\nimport { CurationProblemModalComponent } from \"./component/curation/curation-problem-modal.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        TabsModule,\n        CollapseModule,\n        NgxPaginationModule,\n        SharedModule,\n        RegistryRoutingModule,\n        DndModule,\n        DragDropModule,\n        AccordionModule.forRoot()\n    ],\n    declarations: [\n        HierarchyComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        ImportTypesModalComponent,\n        FhirExportSynchronizationConfigComponent,\n        FhirImportSynchronizationConfigComponent,\n        Dhis2SynchronizationConfigComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        StabilityPeriodComponent,\n        ManageVersionsComponent,\n        StandardAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        TreeGeoSelector,\n        ActionDetailModalComponent,\n        HierarchyComponent,\n        DataImporterComponent,\n        DataExportComponent,\n        // Scheduled jobs\n        ExportFormatModalComponent,\n        ScheduledJobsComponent,\n        JobComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        ParentReferenceProblemWidgetComponent,\n        TermReferenceProblemWidgetComponent,\n        RowValidationProblemWidgetComponent,\n        StepIndicatorComponent,\n        ImportProblemWidgetComponent,\n        TaskViewerComponent,\n        // Synchronization Config\n        SynchronizationConfigManagerComponent,\n        SynchronizationConfigModalComponent,\n        SynchronizationConfigComponent,\n        SyncDetailsComponent,\n        // Location manager\n        LocationManagerComponent,\n        LayerPanelComponent,\n        FeaturePanelComponent,\n        GeometryPanelComponent,\n        TransitionEventTableComponent,\n        TransitionEventModalComponent,\n        HistoricalReportComponent,\n        HistoricalEventModuleComponent,\n        RecordPanelComponent,\n        SelectTypeModalComponent,\n        // List type\n        ListTypeManagerComponent,\n        ListTypePublishModalComponent,\n        ListsForTypeComponent,\n        ListTypeComponent,\n        ListComponent,\n        PublishVersionComponent,\n        // Curation\n        CurationJobComponent,\n        CurationProblemModalComponent\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        LocalizationManagerService,\n        ChangeRequestService,\n        IOService,\n        GeoObjectTypeManagementService,\n        RegistryService,\n        TaskService,\n        DatePipe,\n        ToEpochDateTimePipe,\n        StepIndicatorComponent,\n        SynchronizationConfigService,\n        TransitionEventService,\n        ListTypeService\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        StepIndicatorComponent,\n        SynchronizationConfigModalComponent,\n        TransitionEventModalComponent,\n        ListTypePublishModalComponent,\n        PublishVersionComponent,\n        SelectTypeModalComponent,\n        CurationProblemModalComponent\n    ]\n})\nexport class RegistryModule { }\n","var map = {\n\t\"./af\": 397,\n\t\"./af.js\": 397,\n\t\"./ar\": 398,\n\t\"./ar-dz\": 399,\n\t\"./ar-dz.js\": 399,\n\t\"./ar-kw\": 400,\n\t\"./ar-kw.js\": 400,\n\t\"./ar-ly\": 401,\n\t\"./ar-ly.js\": 401,\n\t\"./ar-ma\": 402,\n\t\"./ar-ma.js\": 402,\n\t\"./ar-sa\": 403,\n\t\"./ar-sa.js\": 403,\n\t\"./ar-tn\": 404,\n\t\"./ar-tn.js\": 404,\n\t\"./ar.js\": 398,\n\t\"./az\": 405,\n\t\"./az.js\": 405,\n\t\"./be\": 406,\n\t\"./be.js\": 406,\n\t\"./bg\": 407,\n\t\"./bg.js\": 407,\n\t\"./bm\": 408,\n\t\"./bm.js\": 408,\n\t\"./bn\": 409,\n\t\"./bn-bd\": 410,\n\t\"./bn-bd.js\": 410,\n\t\"./bn.js\": 409,\n\t\"./bo\": 411,\n\t\"./bo.js\": 411,\n\t\"./br\": 412,\n\t\"./br.js\": 412,\n\t\"./bs\": 413,\n\t\"./bs.js\": 413,\n\t\"./ca\": 414,\n\t\"./ca.js\": 414,\n\t\"./cs\": 415,\n\t\"./cs.js\": 415,\n\t\"./cv\": 416,\n\t\"./cv.js\": 416,\n\t\"./cy\": 417,\n\t\"./cy.js\": 417,\n\t\"./da\": 418,\n\t\"./da.js\": 418,\n\t\"./de\": 419,\n\t\"./de-at\": 420,\n\t\"./de-at.js\": 420,\n\t\"./de-ch\": 421,\n\t\"./de-ch.js\": 421,\n\t\"./de.js\": 419,\n\t\"./dv\": 422,\n\t\"./dv.js\": 422,\n\t\"./el\": 423,\n\t\"./el.js\": 423,\n\t\"./en-au\": 424,\n\t\"./en-au.js\": 424,\n\t\"./en-ca\": 425,\n\t\"./en-ca.js\": 425,\n\t\"./en-gb\": 426,\n\t\"./en-gb.js\": 426,\n\t\"./en-ie\": 427,\n\t\"./en-ie.js\": 427,\n\t\"./en-il\": 428,\n\t\"./en-il.js\": 428,\n\t\"./en-in\": 429,\n\t\"./en-in.js\": 429,\n\t\"./en-nz\": 430,\n\t\"./en-nz.js\": 430,\n\t\"./en-sg\": 431,\n\t\"./en-sg.js\": 431,\n\t\"./eo\": 432,\n\t\"./eo.js\": 432,\n\t\"./es\": 433,\n\t\"./es-do\": 434,\n\t\"./es-do.js\": 434,\n\t\"./es-mx\": 435,\n\t\"./es-mx.js\": 435,\n\t\"./es-us\": 436,\n\t\"./es-us.js\": 436,\n\t\"./es.js\": 433,\n\t\"./et\": 437,\n\t\"./et.js\": 437,\n\t\"./eu\": 438,\n\t\"./eu.js\": 438,\n\t\"./fa\": 439,\n\t\"./fa.js\": 439,\n\t\"./fi\": 440,\n\t\"./fi.js\": 440,\n\t\"./fil\": 441,\n\t\"./fil.js\": 441,\n\t\"./fo\": 442,\n\t\"./fo.js\": 442,\n\t\"./fr\": 443,\n\t\"./fr-ca\": 444,\n\t\"./fr-ca.js\": 444,\n\t\"./fr-ch\": 445,\n\t\"./fr-ch.js\": 445,\n\t\"./fr.js\": 443,\n\t\"./fy\": 446,\n\t\"./fy.js\": 446,\n\t\"./ga\": 447,\n\t\"./ga.js\": 447,\n\t\"./gd\": 448,\n\t\"./gd.js\": 448,\n\t\"./gl\": 449,\n\t\"./gl.js\": 449,\n\t\"./gom-deva\": 450,\n\t\"./gom-deva.js\": 450,\n\t\"./gom-latn\": 451,\n\t\"./gom-latn.js\": 451,\n\t\"./gu\": 452,\n\t\"./gu.js\": 452,\n\t\"./he\": 453,\n\t\"./he.js\": 453,\n\t\"./hi\": 454,\n\t\"./hi.js\": 454,\n\t\"./hr\": 455,\n\t\"./hr.js\": 455,\n\t\"./hu\": 456,\n\t\"./hu.js\": 456,\n\t\"./hy-am\": 457,\n\t\"./hy-am.js\": 457,\n\t\"./id\": 458,\n\t\"./id.js\": 458,\n\t\"./is\": 459,\n\t\"./is.js\": 459,\n\t\"./it\": 460,\n\t\"./it-ch\": 461,\n\t\"./it-ch.js\": 461,\n\t\"./it.js\": 460,\n\t\"./ja\": 462,\n\t\"./ja.js\": 462,\n\t\"./jv\": 463,\n\t\"./jv.js\": 463,\n\t\"./ka\": 464,\n\t\"./ka.js\": 464,\n\t\"./kk\": 465,\n\t\"./kk.js\": 465,\n\t\"./km\": 466,\n\t\"./km.js\": 466,\n\t\"./kn\": 467,\n\t\"./kn.js\": 467,\n\t\"./ko\": 468,\n\t\"./ko.js\": 468,\n\t\"./ku\": 469,\n\t\"./ku.js\": 469,\n\t\"./ky\": 470,\n\t\"./ky.js\": 470,\n\t\"./lb\": 471,\n\t\"./lb.js\": 471,\n\t\"./lo\": 472,\n\t\"./lo.js\": 472,\n\t\"./lt\": 473,\n\t\"./lt.js\": 473,\n\t\"./lv\": 474,\n\t\"./lv.js\": 474,\n\t\"./me\": 475,\n\t\"./me.js\": 475,\n\t\"./mi\": 476,\n\t\"./mi.js\": 476,\n\t\"./mk\": 477,\n\t\"./mk.js\": 477,\n\t\"./ml\": 478,\n\t\"./ml.js\": 478,\n\t\"./mn\": 479,\n\t\"./mn.js\": 479,\n\t\"./mr\": 480,\n\t\"./mr.js\": 480,\n\t\"./ms\": 481,\n\t\"./ms-my\": 482,\n\t\"./ms-my.js\": 482,\n\t\"./ms.js\": 481,\n\t\"./mt\": 483,\n\t\"./mt.js\": 483,\n\t\"./my\": 484,\n\t\"./my.js\": 484,\n\t\"./nb\": 485,\n\t\"./nb.js\": 485,\n\t\"./ne\": 486,\n\t\"./ne.js\": 486,\n\t\"./nl\": 487,\n\t\"./nl-be\": 488,\n\t\"./nl-be.js\": 488,\n\t\"./nl.js\": 487,\n\t\"./nn\": 489,\n\t\"./nn.js\": 489,\n\t\"./oc-lnc\": 490,\n\t\"./oc-lnc.js\": 490,\n\t\"./pa-in\": 491,\n\t\"./pa-in.js\": 491,\n\t\"./pl\": 492,\n\t\"./pl.js\": 492,\n\t\"./pt\": 493,\n\t\"./pt-br\": 494,\n\t\"./pt-br.js\": 494,\n\t\"./pt.js\": 493,\n\t\"./ro\": 495,\n\t\"./ro.js\": 495,\n\t\"./ru\": 496,\n\t\"./ru.js\": 496,\n\t\"./sd\": 497,\n\t\"./sd.js\": 497,\n\t\"./se\": 498,\n\t\"./se.js\": 498,\n\t\"./si\": 499,\n\t\"./si.js\": 499,\n\t\"./sk\": 500,\n\t\"./sk.js\": 500,\n\t\"./sl\": 501,\n\t\"./sl.js\": 501,\n\t\"./sq\": 502,\n\t\"./sq.js\": 502,\n\t\"./sr\": 503,\n\t\"./sr-cyrl\": 504,\n\t\"./sr-cyrl.js\": 504,\n\t\"./sr.js\": 503,\n\t\"./ss\": 505,\n\t\"./ss.js\": 505,\n\t\"./sv\": 506,\n\t\"./sv.js\": 506,\n\t\"./sw\": 507,\n\t\"./sw.js\": 507,\n\t\"./ta\": 508,\n\t\"./ta.js\": 508,\n\t\"./te\": 509,\n\t\"./te.js\": 509,\n\t\"./tet\": 510,\n\t\"./tet.js\": 510,\n\t\"./tg\": 511,\n\t\"./tg.js\": 511,\n\t\"./th\": 512,\n\t\"./th.js\": 512,\n\t\"./tk\": 513,\n\t\"./tk.js\": 513,\n\t\"./tl-ph\": 514,\n\t\"./tl-ph.js\": 514,\n\t\"./tlh\": 515,\n\t\"./tlh.js\": 515,\n\t\"./tr\": 516,\n\t\"./tr.js\": 516,\n\t\"./tzl\": 517,\n\t\"./tzl.js\": 517,\n\t\"./tzm\": 518,\n\t\"./tzm-latn\": 519,\n\t\"./tzm-latn.js\": 519,\n\t\"./tzm.js\": 518,\n\t\"./ug-cn\": 520,\n\t\"./ug-cn.js\": 520,\n\t\"./uk\": 521,\n\t\"./uk.js\": 521,\n\t\"./ur\": 522,\n\t\"./ur.js\": 522,\n\t\"./uz\": 523,\n\t\"./uz-latn\": 524,\n\t\"./uz-latn.js\": 524,\n\t\"./uz.js\": 523,\n\t\"./vi\": 525,\n\t\"./vi.js\": 525,\n\t\"./x-pseudo\": 526,\n\t\"./x-pseudo.js\": 526,\n\t\"./yo\": 527,\n\t\"./yo.js\": 527,\n\t\"./zh-cn\": 528,\n\t\"./zh-cn.js\": 528,\n\t\"./zh-hk\": 529,\n\t\"./zh-hk.js\": 529,\n\t\"./zh-mo\": 530,\n\t\"./zh-mo.js\": 530,\n\t\"./zh-tw\": 531,\n\t\"./zh-tw.js\": 531\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 533;","import { ChangeRequestService } from './change-request.service';\nimport { GeoObjectTypeManagementService } from './geoobjecttype-management.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\nimport { GeometryService} from './geometry.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tGeoObjectTypeManagementService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService,\n\tGeometryService\n];\n\nexport * from './change-request.service';\nexport * from './geoobjecttype-management.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';\nexport * from './geometry.service';","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { ContextList, CurationJob, CurationProblem, LayerRecord, ListType, ListTypeByType, ListTypeEntry, ListTypeVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { Observable } from \"rxjs\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; import { PageResult } from \"@shared/model/core\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ListTypeService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    listForType(typeCode: string): Promise<ListTypeByType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeByType>(registry.contextPath + \"/list-type/list-for-type\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    entries(oid: string): Promise<ListType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListType>(registry.contextPath + \"/list-type/entries\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    versions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion[]>(registry.contextPath + \"/list-type/versions\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getVersion(oid: string): Promise<ListTypeVersion> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion>(registry.contextPath + \"/list-type/version\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n\n    apply(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/apply\", JSON.stringify({ list: list }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createVersion(entry: ListTypeEntry, metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/create-version\", JSON.stringify({ oid: entry.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    applyVersion(metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/apply-version\", JSON.stringify({ oid: metadata.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n\n    removeVersion(list: ListTypeVersion): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove-version\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    data(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            sort: sort\n        } as any;\n\n        if (pageNumber != null) {\n            params.pageNumber = pageNumber;\n        }\n\n        if (pageSize != null) {\n            params.pageSize = pageSize;\n        }\n\n        if (filter.length > 0) {\n            params.filter = filter;\n        }\n\n        return this.http\n            .post<any>(registry.contextPath + \"/list-type/data\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    record(oid: string, uid: string): Promise<LayerRecord> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            uid: uid\n        };\n\n        this.eventService.start();\n\n\n        return this.http\n            .post<LayerRecord>(registry.contextPath + \"/list-type/record\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n\n    values(oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[]): Promise<{ label: string, value: string }[]> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            attributeName: attributeName,\n            valueAttribute: valueAttribute\n        } as any;\n\n        if (filter.length > 0) {\n            params.filter = filter;\n        }\n\n        if (value != null && value.length > 0) {\n            params.value = value;\n        }\n\n        return this.http\n            .post<{ label: string, value: string }[]>(registry.contextPath + \"/list-type/values\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    publishList(oid: string): Observable<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http.post<string>(registry.contextPath + \"/list-type/publish\", JSON.stringify({ oid: oid }), { headers: headers });\n    }\n\n    getAllLists(): Promise<{ label: string, oid: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<{ label: string, oid: string }[]>(registry.contextPath + \"/list-type/list-all\", { params: params })\n            .toPromise();\n    }\n\n    getPublicVersions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        return this.http\n            .get<ListTypeVersion[]>(registry.contextPath + \"/list-type/get-public-versions\", { params: params })\n            .toPromise();\n    }\n\n    getGeospatialVersions(startDate: string, endDate: string): Promise<ContextList[]> {\n        let params: HttpParams = new HttpParams();\n\n        if (startDate != null && startDate.length > 0) {\n            params = params.append(\"startDate\", startDate);\n        }\n\n        if (endDate != null && endDate.length > 0) {\n            params = params.append(\"endDate\", endDate);\n        }\n\n        return this.http\n            .get<ContextList[]>(registry.contextPath + \"/list-type/get-geospatial-versions\", { params: params })\n            .toPromise();\n    }\n\n    getBounds(oid: string, uid?: string): Promise<number[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        if (uid != null) {\n            params = params.append(\"uid\", uid);\n        }\n\n        return this.http\n            .get<number[]>(registry.contextPath + \"/list-type/bounds\", { params: params })\n            .toPromise();\n    }\n\n    getCurationInfo(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<CurationJob> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n\n        return this.http.get<CurationJob>(registry.contextPath + \"/curation/details\", { params: params })\n            .toPromise();\n    }\n\n\n    getCurationPage(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<PageResult<any>> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n\n        return this.http.get<PageResult<any>>(registry.contextPath + \"/curation/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createCurationJob(version: ListTypeVersion): Promise<CurationJob> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<CurationJob>(registry.contextPath + \"/curation/curate\", JSON.stringify({ listTypeVersionId: version.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    submitErrorResolve(config: any): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/problem-resolve\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setResolution(problem: CurationProblem, resolution: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params: any = { problemId: problem.id };\n\n        if (resolution != null) {\n            params.resolution = resolution;\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/set-resolution\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable padded-blocks */\nimport { GeoObjectOverTime, HierarchyOverTime, GeoObjectType, AttributeType } from \"./registry\";\nimport { ActionTypes } from \"./constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\nexport enum SummaryKey {\n    NEW = \"NEW\",\n    UNMODIFIED = \"UNMODIFIED\",\n    DELETE = \"DELETE\",\n    UPDATE = \"UPDATE\",\n    TIME_CHANGE = \"TIME_CHANGE\",\n    VALUE_CHANGE = \"VALUE_CHANGE\",\n}\n\nexport class Document {\n    fileName: string;\n    oid: string;\n}\n\nexport class Geometry {\n    type: string;\n    coordinates: number[][] | number[];\n}\n\nexport class ValueOverTimeDiff {\n    oid: string;\n    action: string; // Can be one of DELETE, UPDATE, CREATE\n    oldValue: any;\n    newValue: any;\n    newStartDate: string;\n    newEndDate: string;\n    oldStartDate: string;\n    oldEndDate: string;\n    parents?: any;\n    oldParents?: any;\n}\n\n// export class AbstractAction {\n//    approvalStatus: string;\n//    createActionDate: Date;\n//    label: string;\n//    oid: string;\n//    actionType: string;\n//    actionLabel: string;\n//    decisionMaker?: string;\n//    documents: Document[];\n// }\n\nexport class AbstractAction {\n    oid: string;\n    actionType: ActionTypes;\n    actionLabel: string;\n    createActionDate: string;\n    contributorNotes?: string;\n    maintainerNotes?: string;\n    additionalNotes?: string;\n    approvalStatus: string;\n    statusLabel: string;\n    createdBy: string;\n    documents: any[];\n    permissions: string[];\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n    geoObjectJson: GeoObjectOverTime;\n    parentJson: HierarchyOverTime[];\n\n    constructor() {\n        super();\n        this.actionType = ActionTypes.CREATEGEOOBJECTACTION;\n    }\n}\n\nexport class UpdateAttributeOverTimeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { \"valuesOverTime\": ValueOverTimeDiff[], hierarchyCode?: string };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = { valuesOverTime: [] };\n    }\n}\n\nexport class UpdateAttributeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { oldValue?: any, newValue?: any };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = {};\n    }\n}\n\nexport class ChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n}\n\nexport class UpdateChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n    geoObject: GeoObjectOverTime;\n}\n\nexport class ChangeRequest {\n    oid: string;\n    createdBy: string;\n    createDate: Date;\n    approvalStatus: string;\n    total: number;\n    pending: number;\n    documents: Document[];\n    actions: AbstractAction[];\n    current?: ChangeRequestCurrentObject & UpdateChangeRequestCurrentObject;\n    type: string; // Can be one of [\"CreateGeoObject\", \"UpdateGeoObject\"]\n    statusLabel?: string;\n    phoneNumber?: string;\n    email?: string;\n    permissions?: string[];\n    isNew?: boolean;\n\n    constructor() {\n        this.isNew = true;\n    }\n\n    public static getActionsForAttribute(cr: ChangeRequest, attributeName: string, hierarchyCode: string): AbstractAction[] {\n        if (cr.type === \"CreateGeoObject\") {\n            return cr.actions;\n        } else {\n            let newActions = [];\n\n            for (let i = 0; i < cr.actions.length; ++i) {\n                let action = cr.actions[i];\n\n                if (action.actionType === \"UpdateAttributeAction\") {\n                    let updateAttrAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === attributeName &&\n                      (attributeName !== \"_PARENT_\" || updateAttrAction.attributeDiff.hierarchyCode === hierarchyCode)) {\n                        newActions.push(cr.actions[i]);\n                    }\n                }\n            }\n\n            return newActions;\n        }\n    }\n}\n\n// export class UpdateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class CreateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class AddChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyTypeCode: string;\n//    contributorNotes: string;\n//    maintainerNotes: string;\n//    createdBy: string;\n// }\n\n// export class RemoveChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyCode: string;\n// }\n\n// export class SetParentAction extends AbstractAction {\n//    childCode: string;\n//    childTypeCode: string;\n//    json: HierarchyOverTime[];\n// }\n\nexport class GovernanceStatus {\n    key: string;\n    label: string;\n}\n\nexport class PageEvent {\n    type: string;\n    data: any;\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { ImportConfiguration } from \"@registry/model/io\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    implementDecisions(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/implement-decisions\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    update(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/update\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setActionStatus(actionOid: String, status: String): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/changerequest/set-action-status\", JSON.stringify({ actionOid: actionOid, status: status }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAllRequests(pageSize: number, pageNumber: number, filter: string, sort: any[], oid:string): Promise<PageResult<ChangeRequest>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"filter\", filter);\n        params = params.set(\"sort\", JSON.stringify(sort));\n\n        if (oid != null) {\n            params = params.set(\"oid\", oid);\n        }\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<ChangeRequest>>(registry.contextPath + \"/changerequest/get-all-requests\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    rejectChangeRequest(request: ChangeRequest): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<void>(registry.contextPath + \"/changerequest/reject\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(requestId: string): Promise<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<string>(registry.contextPath + \"/changerequest/delete\", JSON.stringify({ requestId: requestId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteFile(crOid: string, fileId: string): Promise<ImportConfiguration> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ImportConfiguration>(registry.contextPath + \"/changerequest/delete-file-cr\", JSON.stringify({ crOid: crOid, vfOid: fileId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { HistoricalRow, TransitionEvent } from \"@registry/model/transition-event\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class TransitionEventService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageSize: number, pageNumber: number, attrConditions: any): Promise<PageResult<TransitionEvent>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"attrConditions\", JSON.stringify(attrConditions));\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<TransitionEvent>>(registry.contextPath + \"/transition-event/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getDetails(oid: string): Promise<TransitionEvent> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<TransitionEvent>(registry.contextPath + \"/transition-event/get-details\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/apply\", JSON.stringify({ event: event }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/delete\", JSON.stringify({ eventId: event.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getHistoricalReport(typeCode: string, startDate: string, endDate: string, pageSize: number, pageNumber: number): Promise<PageResult<HistoricalRow>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode.toString());\n        params = params.set(\"startDate\", startDate.toString());\n        params = params.set(\"endDate\", endDate.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<HistoricalRow>>(registry.contextPath + \"/transition-event/historical-report\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType } from \"./registry\";\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\n    matchStrategy: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    formatType: string;\n    objectType: string;\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n    isExternal: string;\n    externalSystemId: string;\n    externalSystem?: any;\n    revealGeometryColumn?: any;\n    onValidChange: any;\n    externalIdAttributeTarget: string;\n}\n\n","import { Component, OnInit, ViewChild, Input, ViewChildren, QueryList } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, Term, HierarchyOverTime } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, CreateGeoObjectAction, ChangeRequest } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\n\n@Component({\n    selector: \"geoobject-shared-attribute-editor\",\n    templateUrl: \"./geoobject-shared-attribute-editor.component.html\",\n    styleUrls: [\"./geoobject-shared-attribute-editor.css\"],\n    providers: [DatePipe],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"slide\", [\n                state(\"left\", style({ left: 0 })),\n                state(\"right\", style({ left: \"100%\" })),\n                transition(\"* => *\", animate(200))\n            ])\n        ]]\n})\n\n/**\n * IMPORTANT\n * This component is shared between:\n * - crtable (request-table.component.ts)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget (feature-panel.component.ts)\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    // The changed state of the GeoObject in the GeoRegistry\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    showAllInstances: boolean = false;\n\n    tabIndex: number = 0;\n\n    // The current state of the GeoObject in the GeoRegistry\n    //    @Input() action: Action = null;\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isGeometryInlined = false;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n\n    @Input() filterDate: string = null;\n\n    // used in context of a list where reference back to the list forDate is needed\n    @Input() forDate: string = null;\n    @Input() datasetId: string = null;\n\n    // TODO : This was copy / pasted into manage-versions.component::onDateChange and ChangeRequestEditor::generateAttributeEditors\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"invalid\", \"exists\"];\n\n    @ViewChild(\"attributeForm\") attributeForm;\n\n    @ViewChildren(ManageVersionsComponent) manageVersions: QueryList<any>;\n\n    public parentAttributeType: AttributeType;\n\n    public geometryAttributeType: AttributeType;\n\n    showStabilityPeriods = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private geomService: GeometryService, private authService: AuthService, private dateService: DateService, private registryService: RegistryService) {\n\n    }\n\n    ngOnInit(): void {\n        if (this.attributeExcludes != null) {\n            this.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n            if (!this.isGeometryInlined) {\n                this.geoObjectAttributeExcludes.push(\"geometry\");\n            }\n        }\n\n        this.geometryAttributeType = this.getAttribute(\"geometry\");\n        if (this.geometryAttributeType == null) {\n            this.geometryAttributeType = new AttributeType(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n        }\n\n        this.parentAttributeType = new AttributeType(\"_PARENT_\", \"_PARENT_\", new LocalizedValue(\"Parents\", null), new LocalizedValue(\"Parents\", null), true, false, false, true);\n\n        if (this.changeRequest == null) {\n            this.changeRequest = this.createNewChangeRequest();\n        } else {\n            if (!this.changeRequest.actions) {\n                this.changeRequest.actions = [];\n            }\n\n            if (this.changeRequest.actions.length === 0 && this.isNew) {\n                this.changeRequest.actions = this.createNewChangeRequest().actions;\n            }\n        }\n\n        this.changeRequestEditor = new ChangeRequestEditor(this.changeRequest, this.postGeoObject, this.geoObjectType, this.hierarchies, this.geometryAttributeType, this.parentAttributeType, this.lService, this.dateService, this.registryService);\n\n        if (this.shouldForceSetExist()) {\n            this.changePage(3);\n        }\n\n        if (this.isNew) {\n            this.filterDate = null;\n        }\n\n        let got = this.changeRequest.current ? this.changeRequest.current.geoObjectType : this.postGeoObject.geoObjectType;\n        let orgCode = got.organizationCode;\n\n        // Don't show the stability bar on the Change Requests page.\n        // Change Requests don't have oid when the page is loaded for non-change request use cases.\n        if (!this.changeRequest.oid) {\n            this.showStabilityPeriods = (this.authService.isSRA() || this.authService.isOrganizationRA(orgCode) || this.authService.isGeoObjectTypeOrSuperRM(got) || this.authService.isGeoObjectTypeOrSuperRC(got));\n        }\n\n        this.showAllInstances = (this.changeRequestEditor.changeRequest.isNew || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\");\n    }\n\n    setFilterDate(date: string, refresh: boolean = true) {\n        this.filterDate = date;\n\n        if (this.manageVersions != null) {\n            this.manageVersions.forEach(manageVersion => manageVersion.setFilterDate(this.filterDate, refresh));\n        }\n    }\n\n    getChangeRequestEditor(): ChangeRequestEditor {\n        return this.changeRequestEditor;\n    }\n\n    createNewChangeRequest(): ChangeRequest {\n        let cr = new ChangeRequest();\n        cr.approvalStatus = \"PENDING\";\n        cr.actions = [];\n\n        if (this.isNew) {\n            cr.type = \"CreateGeoObject\";\n\n            let createAction: CreateGeoObjectAction = new CreateGeoObjectAction();\n            createAction.geoObjectJson = this.postGeoObject;\n            createAction.parentJson = this.hierarchies;\n            cr.actions[0] = createAction;\n        } else {\n            cr.type = \"UpdateGeoObject\";\n        }\n\n        return cr;\n    }\n\n    shouldForceSetExist() {\n        if (!this.readOnly) {\n            if (this.isNew) {\n                const action: CreateGeoObjectAction = this.changeRequestEditor.changeRequest.actions[0] as CreateGeoObjectAction;\n\n                let values = action.geoObjectJson.attributes[\"exists\"].values;\n\n                if (values && values.length > 0) {\n                    let value = values[0];\n\n                    return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                }\n            } else {\n                let isNew = this.changeRequestEditor.changeRequest.isNew;\n\n                if (isNew && !this.readOnly && this.postGeoObject.attributes[\"exists\"]) {\n                    let values = this.postGeoObject.attributes[\"exists\"].values;\n\n                    if (values && values.length > 0) {\n                        let value = values[0];\n\n                        return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                    }\n                }\n\n                return isNew && !this.readOnly;\n            }\n        }\n\n        return !this.readOnly;\n    }\n\n    getAttribute(name: string): AttributeType {\n        if (name === \"_PARENT_\") {\n            return this.parentAttributeType;\n        } else if (name === \"geometry\") {\n            return this.geometryAttributeType;\n        }\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            if (this.geoObjectType.attributes[i].code === name) {\n                return this.geoObjectType.attributes[i];\n            }\n        }\n\n        return null;\n    }\n\n    changePage(nextPage: number): void {\n        if (this.shouldForceSetExist() && nextPage !== 3) {\n            return;\n        }\n\n        this.geomService.destroy(false);\n\n        this.tabIndex = nextPage;\n    }\n\n    hasChanges(tabIndex: number) {\n        let len = this.changeRequest.actions.length;\n\n        if (len > 0) {\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.changeRequest.actions[i];\n\n                if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                    return false;\n                } else if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeOverTimeAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === \"_PARENT_\" && tabIndex === 1) {\n                        return true;\n                    } else if (updateAttrAction.attributeName === \"geometry\" && tabIndex === 2) {\n                        return true;\n                    } else if ((updateAttrAction.attributeName === \"invalid\" || updateAttrAction.attributeName === \"exists\") && tabIndex === 3) {\n                        return true;\n                    } else if (tabIndex === 0 && updateAttrAction.attributeName !== \"_PARENT_\" && updateAttrAction.attributeName !== \"geometry\" && updateAttrAction.attributeName !== \"exists\" && updateAttrAction.attributeName !== \"invalid\") {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    hasErrors(tabIndex: number) {\n        let attributeEditors = this.changeRequestEditor.getEditors();\n\n        if (tabIndex === 0) {\n            let filter = [\"invalid\", \"exists\", \"_PARENT_\", \"geometry\"];\n            let filteredEditors = attributeEditors.filter(editor => filter.indexOf(editor.attribute.code) === -1);\n\n            for (let i = 0; i < filteredEditors.length; ++i) {\n                let editor = filteredEditors[i];\n\n                if (!editor.isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 1) {\n            for (let i = 0; i < this.hierarchies.length; ++i) {\n                let hierarchy = this.hierarchies[i];\n\n                if (!this.changeRequestEditor.getEditorForAttribute(this.parentAttributeType, hierarchy).isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 2) {\n            return !this.changeRequestEditor.getEditorForAttribute(this.geometryAttributeType).isValid();\n        } else if (tabIndex === 3) {\n            let invalid = this.getAttribute(\"invalid\");\n\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existsEditor = this.changeRequestEditor.getEditorForAttribute(existsAttribute);\n\n            return (Object.prototype.hasOwnProperty.call(invalid, \"isValid\") && !invalid.isValid) ||\n                !existsEditor.isValid();\n        }\n\n        return false;\n    }\n\n    public isValid(): boolean {\n        let allValid: boolean = true;\n\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.isValid != null && !att.isValid) {\n                allValid = false;\n            }\n        });\n\n        if (this.parentAttributeType.isValid != null && !this.parentAttributeType.isValid) {\n            allValid = false;\n        }\n\n        if (this.geometryAttributeType.isValid != null && !this.geometryAttributeType.isValid) {\n            allValid = false;\n        }\n\n        return allValid && this.changeRequestEditor.validate();\n    }\n\n    public getActions(): AbstractAction[] {\n        return this.changeRequestEditor.changeRequest.actions;\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <stability-period *ngIf=\"showStabilityPeriods\" [showHint]=\"!readOnly\" [changeRequestEditor]=\"changeRequestEditor\" [sharedAttributeEditor]=\"this\" [forDate]=\"forDate\" [context]=\"datasetId == null ? 'EXPLORER' : 'LIST'\" [filterDate]=\"filterDate\" [latestPeriodIsActive]=\"filterDate == null && changeRequestEditor.changeRequest.isNew\"></stability-period>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <boolean-field *ngIf=\"changeRequestEditor && !changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject'\" [(value)]=\"showAllInstances\" label=\"Show all instances\" [disable]=\"false\"></boolean-field>\n  </div>\n</div>\n\n<div class=\"row\">\n  <!-- <div class=\"label-holder\"></div> -->\n  <div class=\"col-md-12\">\n    <div class=\"btn-group geobject-editor-tab-holder\">\n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 0, disabled: shouldForceSetExist()}\" (click)=\"changePage(0);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabZero\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(0)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(0)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 1, disabled: shouldForceSetExist()}\" (click)=\"changePage(1);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabOne\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(1)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(1)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 2, disabled: shouldForceSetExist()}\" (click)=\"changePage(2);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabTwo\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(2)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(2)\" class=\"tabHasChanges\"></span></span>\n      </label>\n      <label class=\"btn full-width-radio-button settings\" [ngClass]=\"{active: tabIndex === 3}\" (click)=\"changePage(3);\"> \n        <span style=\"display:inline-block; width:90%;\"><i class=\"fa fa-cog\"></i></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(3)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(3)\" class=\"tabHasChanges\"></span></span>\n      </label>\n    </div>\n  </div>\n</div>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n  <fieldset>\n    <!-- <div class=\"col-md-12\"> -->\n    <div *ngIf=\"changeRequestEditor && changeRequestEditor.geoObject\">\n      <div *ngIf=\"tabIndex === 0\" class=\"row\">\n        <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    \n        <div class=\"col-md-12\">\n\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes; let i = index\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n              <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(attr).hasChanges()\" class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span *ngIf=\"attr.code === 'code'\"> \n                      <localize key=\"geoobject.code.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code === 'displayLabel'\"> \n                      <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                    </span>\n                    <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\"> {{attr.label.localizedValue}} </span> \n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <div *ngIf=\"attr.code !== 'code' && attr.isChangeOverTime\">\n                    <manage-versions\n                        [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"attr\"\n                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\" >\n                    </manage-versions>\n                  </div>\n\n                  <div *ngIf=\"!attr.isChangeOverTime\">\n                    <input *ngIf=\"changeRequestEditor.geoObject && attr.code === 'code'\" type=\"text\" [(ngModel)]=\"changeRequestEditor.getEditorForAttribute(attr).value\" id=\"mod-{{attr.code}}\" \n                        name=\"mod-{{attr.code}}\" [disabled]=\"readOnly || (attr.code === 'code' && !isNew)\" [style]=\"(readOnly || (attr.code === 'code' && !isNew)) ? '' : 'color:#333'\" required>\n\n                    <div *ngIf=\"attr.code !== 'code'\">\n                        <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"attr\" [geoObject]=\"changeRequestEditor.geoObject\"\n                          [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div *ngIf=\"tabIndex === 1\" class=\"row\">\n        <div class=\"col-md-12\">\n\t        <ul class=\"list-group\">\n\t\t        <li *ngFor=\"let hierarchy of hierarchies\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n\t\t          <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(parentAttributeType, hierarchy).hasChanges()\" class=\"panel panel-default\">\n\t              <div class=\"panel-heading\">\n\t                <h4 style=\"margin:0;\">\n\t                  <span> {{hierarchy.label}} </span> \n\t                </h4>\n\t              </div>\n\t\t\t\t      \n\t\t\t\t        <div class=\"panel-body\">\n\t\t\t\t          <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"parentAttributeType\"\n\t                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"filterDate\" [hierarchy]=\"hierarchy\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n\t\t\t\t        </div>\n\t\t\t        </div>\n\t\t        </li>\n\t        </ul>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 2\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(geometryAttributeType).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span> <localize key=\"shared.attributes.attribute.geometry.label\"></localize> </span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"geometryAttributeType\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 3\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('exists')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span>{{getAttribute('exists').label.localizedValue}}</span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"getAttribute('exists')\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('invalid')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <!-- <span>{{getAttribute('invalid').label.localizedValue}}</span>  -->\n                <localize key=\"geoobject.invalid.alternate.label\"></localize>\n              \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"getAttribute('invalid')\" [geoObject]=\"changeRequestEditor.geoObject\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- </div> -->\n  </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-text\",\n    templateUrl: \"./localized-text.component.html\",\n    styleUrls: [\"./localized-text.css\"],\n})\nexport class LocalizedTextComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Input() public inlinelayout: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","\n<div *ngFor=\"let localeValue of value.localeValues\">\n  <div [ngClass]=\"{'row' : inlinelayout, 'row-holder' : !inlinelayout}\" >\n    <div [ngClass]=\"{'col-md-12' : inlinelayout}\">\n      <div class=\"form-group\">\n        <div [ngClass]=\"{'label-holder' : !inlinelayout}\" >\n          <label>\n            <localize [key]=\"key\"></localize>\n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n        </div>\n        <div [ngClass]=\"{'holder' : !inlinelayout}\">\n          <span class=\"text\">\n            <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\nimport { ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n\r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { GeoObjectType, AttributeType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"attribute-input\",\n    templateUrl: \"./attribute-input.component.html\",\n    styleUrls: [\"./attribute-input.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\"))\n            // transition('show => none', animate('100ms'))\n        ])\n    ]\n})\nexport class AttributeInputComponent implements OnInit {\n\n    @Input() disableCodeField: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() isDecimal: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType;\n    @Output() attributeChange = new EventEmitter<AttributeType>();\n    message: string = null;\n\n    state: string = \"none\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges() {\n\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    toggleIsUnique(): void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.attribute.code) {\n            // if code has a space\n            if (this.attribute.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            if (this.attribute.label.localeValues[0].value.length === 0) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == \"\")) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == \"\")) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-input\",\n    templateUrl: \"./localized-input.component.html\",\n    styleUrls: []\n})\nexport class LocalizedInputComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from 'rxjs';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\nimport * as d3 from 'd3';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal'\n\nimport { HierarchyType, HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\nimport { Organization } from '@shared/model/core';\nimport { RegistryService, HierarchyService } from '@registry/service';\n\nimport { SvgHierarchyType } from './d3/svg-hierarchy-type';\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection } from './d3/svg-util';\nimport { SvgHierarchyNode } from './d3/svg-hierarchy-node';\nimport { ImportTypesModalComponent } from './modals/import-types-modal.component';\n\nexport const TREE_SCALE_FACTOR_X: number = 1.8;\nexport const TREE_SCALE_FACTOR_Y: number = 1.8;\n\nexport const DEFAULT_NODE_FILL = '#e6e6e6';\nexport const DEFAULT_NODE_BANNER_COLOR = '#A29BAB';\nexport const INHERITED_NODE_FILL = '#d4d4d4';\nexport const INHERITED_NODE_BANNER_COLOR = '#a0a0a0';\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n  active: boolean;\n  label: string;\n}\n\nexport interface DropTarget {\n  dropSelector: string;\n  onDrag(dragEl: Element, dropEl: Element, event: any): void;\n  onDrop(dragEl: Element, event: any): void;\n  [others: string]: any;\n}\n\n@Component({\n\n  selector: 'hierarchies',\n  templateUrl: './hierarchy.component.html',\n  styleUrls: ['./hierarchy.css']\n})\nexport class HierarchyComponent implements OnInit {\n\n  userOrganization: string = null;\n\n  primarySvgHierarchy: SvgHierarchyType;\n  currentHierarchy: HierarchyType = null;\n\n  instance: Instance = new Instance();\n  hierarchies: HierarchyType[];\n  organizations: Organization[];\n  geoObjectTypes: GeoObjectType[] = [];\n\n  hierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n  filter: string = '';\n  filteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  filteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n  @ViewChild('searchInput', { static: true }) searchInput: ElementRef;\n\n  hierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n  geoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n  _opened: boolean = false;\n\n  /*\n   * Reference to the modal current showing\n  */\n  private bsModalRef: BsModalRef;\n\n  /*\n   * Template for tree node menu\n   */\n  @ViewChild('nodeMenu') public nodeMenuComponent: ContextMenuComponent;\n\n  /*\n   * Template for leaf menu\n   */\n  @ViewChild('leafMenu') public leafMenuComponent: ContextMenuComponent;\n\n  /* \n   * Currently clicked on id for delete confirmation modal \n   */\n  current: any;\n\n  isSRA: boolean = false;\n\n  hierarchyService: HierarchyService;\n\n  localizeService: LocalizationService;\n\n  options = {\n    //      allowDrag: (any) => node.isLeaf,\n    //      allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n    // return true / false based on element, to.parent, to.index. e.g.\n    //          return parent.hasChildren;\n    //        },\n    displayField: \"label\",\n    actionMapping: {\n      mouse: {\n        click: (tree: any, node: any, $event: any) => {\n          this.treeNodeOnClick(node, $event);\n        },\n        contextMenu: (tree: any, node: any, $event: any) => {\n          this.handleOnMenu(node, $event);\n        }\n      }\n    },\n    mouse: {\n      //              drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n      //                console.log('drag', from, to); // from === {name: 'first'}\n      //                // Add a node to `to.parent` at `to.index` based on the data in `from`\n      //                // Then call tree.update()\n      //              }\n    }\n  };\n\n\n\n  constructor(hierarchyService: HierarchyService, private modalService: BsModalService,\n    private contextMenuService: ContextMenuService,\n    localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n\n    this.isSRA = authService.isSRA();\n\n    this.hierarchyService = hierarchyService;\n    this.localizeService = localizeService;\n  }\n\n  ngOnInit(): void {\n    this.refreshAll(null);\n\n    fromEvent(this.searchInput.nativeElement, 'keyup').pipe(\n\n      // get value\n      filter(Boolean),\n      debounceTime(500),\n      distinctUntilChanged(),\n      tap(() => {\n        this.onFilterChange();\n      })\n      // subscription for response\n    ).subscribe();\n  }\n\n  localize(key: string): string {\n    return this.localizeService.decode(key);\n  }\n\n  private renderTree(): void {\n    if (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length == 0) {\n      d3.select(\"#svg\").remove();\n\n      let canDrag = false;\n      if (this.currentHierarchy != null) {\n        canDrag = (this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode));\n      }\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n        got.canDrag = canDrag;\n      });\n      return;\n    }\n\n    d3.select(\".g-context-menu\").remove();\n    d3.select(\".hierarchy-inherit-button\").remove();\n    d3.select(\".g-hierarchy-got-connector\").remove();\n\n    let overflowDiv: any = d3.select(\"#overflow-div\").node();\n    let scrollLeft = overflowDiv.scrollLeft;\n    let scrollRight = overflowDiv.scrollRight;\n\n    let svg = d3.select(\"#svg\");\n\n    if (svg.node() == null) {\n      svg = d3.select(\"#svgHolder\").append(\"svg\");\n      svg.attr(\"id\", \"svg\");\n    }\n\n    this.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService, this.authService);\n    this.primarySvgHierarchy.render();\n\n    this.calculateSvgViewBox();\n\n    let overflowDiv2: any = d3.select(\"#overflow-div\").node();\n    overflowDiv2.scrollLeft = scrollLeft;\n    overflowDiv2.scrollRight = scrollRight;\n\n    //this.registerSvgHandlers();\n\n    this.geoObjectTypes.forEach((got: GeoObjectType) => {\n      got.canDrag = this.calculateCanDrag(got);\n    });\n  }\n\n  calculateSvgViewBox(): void {\n    let svg: any = d3.select(\"#svg\");\n    let svgNode: any = svg.node();\n\n    let { x, y, width, height } = svgNode.getBBox();\n\n    const xPadding = 30;\n    const yPadding = 40;\n    svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n    width = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n    height = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n    d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n    //d3.select(\"#svgHolder\").style(\"height\", height + \"px\"); \n  }\n\n  calculateCanDrag(got: GeoObjectType): boolean {\n    let hierarchyComponent = this;\n\n    if (this.primarySvgHierarchy != null) {\n      // Check permissions against GOT and Hierarchy org\n      if (!(this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode))) {\n        return false;\n      }\n\n      // If the child is already on the graph, they cannot drag.\n      if (this.primarySvgHierarchy.getNodeByCode(got.code) != null) {\n        return false;\n      }\n\n      // If we are abstract, and one of our children is on the graph, they cannot drag.\n      if (got.isAbstract) {\n        let isChildOnGraph = false;\n\n        this.geoObjectTypes.forEach((child: GeoObjectType) => {\n          if (child.superTypeCode === got.code) {\n            if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null) {\n              isChildOnGraph = true;\n            }\n          }\n        });\n\n        if (isChildOnGraph) {\n          return false;\n        }\n      }\n      // If we are a child of an abstract type, and our abstract type is on the graph, we cannot drag.\n      else if (got.superTypeCode != null) {\n        if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null) {\n          return false;\n        }\n      }\n    }\n    else {\n      // If there is no selected hierarchy, they cannot drag.\n      return false;\n    }\n\n    return true;\n  }\n\n  calculateRelatedHierarchies(got: GeoObjectType): string[] {\n    let relatedHiers = [];\n\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let hierarchyType = this.hierarchies[i];\n\n      if (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n        let d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n        let found = d3Hierarchy.find((node) => {\n          return node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n        });\n\n        if (found) {\n          relatedHiers.push(hierarchyType.code);\n        }\n      }\n    }\n\n    return relatedHiers;\n  }\n\n  private registerDragHandlers(): any {\n    let that = this;\n\n    let dropTargets: DropTarget[] = [];\n\n    // Empty Hierarchy Drop Zone\n    dropTargets.push({\n      dropSelector: \".drop-box-container\", onDrag: function(dragEl: Element, dropEl: Element) {\n        if (this.dropEl != null) {\n          this.dropEl.style(\"border-color\", null);\n          this.dropEl = null;\n        }\n\n        if (dropEl != null) {\n          let emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n          if (emptyHierarchyDropZone != null) {\n            this.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n          }\n        }\n      }, onDrop: function(dragEl: Element) {\n        if (this.dropEl != null) {\n          this.dropEl.style(\"border-color\", null);\n          that.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n          this.dropEl = null;\n        }\n      }\n    });\n\n    // SVG GeoObjectType Drop Zone\n    dropTargets.push({\n      dropSelector: \".svg-got-body-rect\", onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n        this.clearDropZones();\n\n        let lastDropEl = this.dropEl;\n\n        // translate page to SVG co-ordinate\n        let svg: any = d3.select(\"#svg\").node();\n\n        if (svg == null) {\n          return;\n        }\n        let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        // Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n        // we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones. \n        that.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n          if (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n            this.dropEl = d3.select('.g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\"' + node.data.geoObjectType + '\"]');\n            node.data.activeDropZones = true;\n\n            if (node.parent == null) {\n              node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n            }\n          }\n          else {\n            node.data.activeDropZones = false;\n\n            if (node.parent == null) {\n              node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n            }\n          }\n        });\n\n        if (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") != this.dropEl.attr(\"data-gotCode\"))) {\n          this.clearGhostNodes(true);\n        }\n\n        if (this.dropEl != null) {\n          let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n          const gotCode = this.dropEl.attr(\"data-gotCode\");\n          let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n          let isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n          this.dropEl.attr(\"stroke\", \"blue\");\n\n          const dropElX = parseInt(this.dropEl.attr(\"x\"));\n          const dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n          // Add drop zones\n          const childW: number = SvgHierarchyType.gotRectW;\n          const childH: number = SvgHierarchyType.gotRectH;\n\n          let dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n          // Render Child Drop Zone\n          let dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length == 0);\n          let isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n          if (isChildDZActive) {\n            this.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"white\")\n\n            this.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"none\")\n              .attr(\"stroke\", \"black\")\n              .attr(\"stroke-width\", \"1\")\n              .attr(\"stroke-dasharray\", \"5,5\");\n\n            let addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n            this.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 10)\n              .attr(\"fill\", \"black\")\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n              .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n              .text(addChildLabel);\n          }\n\n          // Render Parent Drop Zone\n          if (!isDragGroup) // Don't render it if we're a group\n          {\n            this.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"white\")\n\n            this.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"none\")\n              .attr(\"stroke\", \"black\")\n              .attr(\"stroke-width\", \"1\")\n              .attr(\"stroke-dasharray\", \"5,5\");\n\n            d3.select(\".svg-got-parent-dz-text\").remove();\n            let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n            this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 10)\n              .attr(\"fill\", \"black\")\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n              .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n              .text(addParentLabel);\n          }\n\n          // Render Sibling Drop Zone\n          if (this.ghostCode != gotCode) {\n\n\n            if (this.ghostCode != null) {\n              this.clearGhostNodes(dropNode.parent == null);\n            }\n\n            if (dropNode.parent != null) {\n              let parentIndex = null;\n              for (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n                let hn: any = dropNode.parent.data.children[i];\n\n                if (hn.geoObjectType === gotCode) {\n                  parentIndex = i + 1;\n                }\n              };\n\n              let addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n              dropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n              that.renderTree();\n              this.ghostCode = gotCode;\n            }\n          }\n\n          let siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n          if (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n            this.parentDz.attr(\"stroke\", \"blue\");\n            this.parentDzText.attr(\"fill\", \"blue\");\n            isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n            isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n            siblingGhostBody.attr(\"stroke\", \"black\");\n            this.activeDz = this.parentDz;\n          }\n          else if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n            !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n            !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n            this.childDz.attr(\"stroke\", \"blue\");\n            this.childDzText.attr(\"fill\", \"blue\");\n            siblingGhostBody.attr(\"stroke\", \"black\");\n            this.activeDz = this.childDz;\n          }\n          else if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n            !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n            !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n            isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n            isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n            siblingGhostBody.attr(\"stroke\", \"blue\");\n            this.activeDz = \"sibling\";\n          }\n        }\n      }, onDrop: function(dragEl: Element) {\n        if (this.dropEl != null && this.activeDz != null) {\n          let dropGot = this.dropEl.attr(\"data-gotCode\");\n          let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n          let dragGot = d3.select(dragEl).attr(\"id\");\n\n          if (this.activeDz === this.childDz) {\n            if (dropNode.data.children.length == 0) {\n              that.addChild(that.currentHierarchy.code, dropGot, dragGot);\n            }\n            else {\n              let youngest = \"\";\n\n              for (let i = 0; i < dropNode.data.children.length; ++i) {\n                youngest = youngest + dropNode.data.children[i].geoObjectType;\n\n                if (i < dropNode.data.children.length - 1) {\n                  youngest = youngest + \",\";\n                }\n              }\n\n              that.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n            }\n          }\n          else if (this.activeDz === this.parentDz) {\n            if (dropNode.parent == null) {\n              that.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n            }\n            else {\n              that.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n            }\n          }\n          else if (this.activeDz === \"sibling\") {\n            that.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n          }\n        }\n        this.clearDropZones();\n        this.clearGhostNodes(true);\n      }, clearDropZones: function() {\n        if (this.dropEl != null) {\n          this.dropEl.attr(\"stroke\", null);\n        }\n\n        this.dropEl = null;\n        this.activeDz = null;\n\n        this.childDz = null;\n        this.parentDz = null;\n\n        d3.select(\".svg-dropZone-g\").remove();\n\n      }, clearGhostNodes: function(renderTree: boolean) {\n        if (this.ghostCode != null) {\n          let ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n          if (ghostNode != null) {\n            let parentIndex = null;\n            for (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n              let hn: any = ghostNode.parent.data.children[i];\n\n              if (hn.ghostingCode === this.ghostCode) {\n                parentIndex = i;\n              }\n            };\n\n            if (parentIndex != null) {\n              ghostNode.parent.data.children.splice(parentIndex, 1);\n              if (renderTree) {\n                that.renderTree();\n              }\n            }\n          }\n\n          this.ghostCode = null;\n        }\n      }\n    });\n\n    // GeoObjectTypes and Hierarchies\n    let deltaX: number, deltaY: number, width: number;\n    let sidebarDragHandler = d3.drag()\n      .on(\"start\", function(event: any) {\n        let canDrag = d3.select(this).attr(\"data-candrag\");\n        if (canDrag === \"false\") {\n          return;\n        }\n\n        let rect = this.getBoundingClientRect();\n        deltaX = rect.left - event.sourceEvent.pageX;\n        deltaY = rect.top - event.sourceEvent.pageY;\n        width = rect.width;\n      })\n      .on(\"drag\", function(event: any) {\n        let canDrag = d3.select(this).attr(\"data-candrag\");\n        if (canDrag === \"false\") {\n          return;\n        }\n\n        d3.select(\".g-context-menu\").remove();\n\n        let selThis = d3.select(this);\n\n        // Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n        selThis.style(\"display\", \"none\");\n\n        let target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        selThis.style(\"display\", null);\n\n        for (let i = 0; i < dropTargets.length; ++i) {\n          dropTargets[i].onDrag(this, target, event);\n        }\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        selThis\n          .classed(\"dragging\", true)\n          .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n          .style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n          .style(\"width\", width + \"px\");\n\n        // If they are moving a GOT group then we have to move the children as well \n        if (selThis.classed(\"got-group-parent\")) {\n          let index = 1;\n          d3.selectAll('.got-group-child[data-superTypeCode=\"' + selThis.attr(\"id\") + '\"]').each(function() {\n            let li: any = this;\n            let child = d3.select(li);\n\n            child\n              .classed(\"dragging\", true)\n              .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n              .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2) * index) + \"px\")\n              .style(\"width\", width + \"px\");\n\n            index++;\n          });\n        }\n      }).on(\"end\", function(event: any) {\n        let selThis = d3.select(this)\n          .classed(\"dragging\", false)\n          .style(\"left\", null)\n          .style(\"top\", null)\n          .style(\"width\", null);\n\n        // If they are moving a GOT group then we have to reset the children as well \n        if (selThis.classed(\"got-group-parent\")) {\n          d3.selectAll('.got-group-child[data-superTypeCode=\"' + selThis.attr(\"id\") + '\"]').each(function() {\n            let child = d3.select(this);\n\n            child\n              .classed(\"dragging\", false)\n              .style(\"left\", null)\n              .style(\"top\", null)\n              .style(\"width\", null);\n          });\n        }\n\n        for (let i = 0; i < dropTargets.length; ++i) {\n          dropTargets[i].onDrop(this, event);\n        }\n      });\n\n    sidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n  }\n\n  private registerSvgHandlers(): void {\n    let hierarchyComponent = this;\n\n    // SVG Drag Handler\n    let deltaX: number, deltaY: number, width: number;\n    let startPoint: any;\n    let svgGot: SvgHierarchyNode;\n    let svgDragHandler = d3.drag()\n      .on(\"start\", function(event: any) {\n        let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n        // let select = d3.select(this);\n\n        svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n\n\n        // d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        //   d3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        // d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     console.log(\"no --> \",a.data.geoObjectType)\n        //     return -1\n        //   }\n        //   else {\n        //     console.log(\"yes --> \",a.data.geoObjectType)\n        //     return 1\n        //   }\n        // });\n\n        startPoint = svgGot.getPos();\n\n        deltaX = startPoint.x - svgMousePoint.x;\n        deltaY = startPoint.y - svgMousePoint.y;\n      })\n      .on(\"drag\", function(event: any) {\n\n        d3.select(\".g-context-menu\").remove();\n\n        let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n        svgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n\n      }).on(\"end\", function(event: any) {\n\n        let bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n\n        svgGot.setPos(startPoint.x, startPoint.y, false);\n\n        // if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n        //   if (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n        //     let obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        //     hierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n        //       animated: true,\n        //       backdrop: true,\n        //       ignoreBackdropClick: true,\n        //     });\n\n        //     let message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        //     message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        //     hierarchyComponent.bsModalRef.content.message = message;\n        //     hierarchyComponent.bsModalRef.content.data = obj.code;\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n        //       let treeNode = svgGot.getTreeNode();\n        //       let parent = null;\n        //       if (treeNode.parent == null) {\n        //         parent = \"ROOT\";\n        //       }\n        //       else {\n        //         if (treeNode.parent.data.inheritedHierarchyCode != null) {\n        //           parent = \"ROOT\";\n        //         }\n        //         else {\n        //           parent = treeNode.parent.data.geoObjectType;\n        //         }\n        //       }\n\n        //       hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n        //     });\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n        //       svgGot.setPos(startPoint.x, startPoint.y, false);\n        //     });\n        //   }\n        //   else {\n        //     svgGot.setPos(startPoint.x, startPoint.y, false);\n        //   }\n\n        // }\n        // else {\n        //   svgGot.setPos(startPoint.x, startPoint.y, false);\n        // }\n\n      });\n\n    svgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n  }\n\n  public findGeoObjectTypeByCode(code: string): GeoObjectType {\n    for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n      let got: GeoObjectType = this.geoObjectTypes[i];\n\n      if (got.code === code) {\n        return got;\n      }\n    }\n  }\n\n  public findHierarchyByCode(code: string): HierarchyType {\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let ht: HierarchyType = this.hierarchies[i];\n\n      if (ht.code === code) {\n        return ht;\n      }\n    }\n  }\n\n  public findOrganizationByCode(code: string): Organization {\n    for (let i = 0; i < this.organizations.length; ++i) {\n      let org: Organization = this.organizations[i];\n\n      if (org.code === code) {\n        return org;\n      }\n    }\n  }\n\n  private addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n    this.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n      let got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n      let index = null;\n      for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n        if (got.relatedHierarchies[i] === hierarchyCode) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index == null) {\n        got.relatedHierarchies.push(hierarchyCode);\n      }\n\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  private insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n    this.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  isRA(): boolean {\n    return this.authService.isRA();\n  }\n\n  isOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n    return this.isSRA || this.authService.isOrganizationRA(orgCode);\n  }\n\n  getTypesByOrg(org: Organization): GeoObjectType[] {\n    let orgTypes: GeoObjectType[] = [];\n\n    for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n      let geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n      if (geoObjectType.organizationCode === org.code) {\n        orgTypes.push(geoObjectType);\n      }\n    }\n\n    return orgTypes;\n  }\n\n  getHierarchiesByOrg(org: Organization): HierarchyType[] {\n    let orgHierarchies: HierarchyType[] = [];\n\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let hierarchy: HierarchyType = this.hierarchies[i];\n\n      if (hierarchy.organizationCode === org.code) {\n        orgHierarchies.push(hierarchy);\n      }\n    }\n\n    return orgHierarchies;\n  }\n\n  public refreshAll(desiredHierarchy: HierarchyType) {\n\n    // Clear the types to then refresh\n    this.geoObjectTypes = [];\n\n    this.registryService.init().then(response => {\n      this.localizeService.setLocales(response.locales);\n\n      this.setGeoObjectTypes(response.types);\n\n      this.organizations = response.organizations;\n\n      this.organizations.forEach(org => {\n        if (this.isOrganizationRA(org.code)) {\n          this.userOrganization = org.code;\n        }\n      })\n\n      let pos = this.getGeoObjectTypePosition(\"ROOT\");\n      if (pos) {\n        this.geoObjectTypes.splice(pos, 1);\n      }\n\n      this.setHierarchies(response.hierarchies);\n\n      this.setNodesOnInit(desiredHierarchy);\n\n      this.updateViewDatastructures();\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  public setGeoObjectTypes(types: GeoObjectType[]): void {\n\n    // Set group parent types\n    this.setAbstractTypes(types);\n\n    // Set GeoObjectTypes that aren't part of a group.\n    types.forEach(type => {\n      if (!type.isAbstract) {\n        if (!type.superTypeCode) {\n          this.geoObjectTypes.push(type);\n        }\n      }\n    });\n\n    // Sort aphabetically because all other types to add will be children in a group.\n    this.geoObjectTypes.sort((a, b) => {\n      if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n      else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n      else return 0;\n    });\n\n    // Add group children\n    types.forEach(type => {\n      if (!type.isAbstract) {\n        if (type.superTypeCode && type.superTypeCode.length > 0) {\n\n          for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let setType = this.geoObjectTypes[i];\n            if (type.superTypeCode === setType.code) {\n              this.geoObjectTypes.splice(i + 1, 0, type);\n            }\n          }\n\n        }\n      }\n    });\n\n  }\n\n  private setAbstractTypes(types: GeoObjectType[]): void {\n    types.forEach(type => {\n      if (type.isAbstract) {\n        this.geoObjectTypes.push(type);\n      }\n    });\n  }\n\n  public updateViewDatastructures(): void {\n    this.hierarchiesByOrg = [];\n    this.typesByOrg = [];\n\n    for (let i = 0; i < this.organizations.length; ++i) {\n      let org: Organization = this.organizations[i];\n\n      this.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n      this.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n    }\n\n    this.geoObjectTypes.forEach((got: GeoObjectType) => {\n      got.canDrag = this.calculateCanDrag(got);\n      got.relatedHierarchies = this.calculateRelatedHierarchies(got);\n    });\n\n    this.onFilterChange();\n  }\n\n  public excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n    return (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n  }\n\n  public excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n    return (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n  }\n\n  private setNodesOnInit(desiredHierarchy: HierarchyType): void {\n\n    let index = -1;\n\n    if (desiredHierarchy != null) {\n      index = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n    }\n    else if (this.hierarchies.length > 0) {\n      index = 0;\n    }\n\n    if (index > -1) {\n      const hierarchy = this.hierarchies[index];\n\n      this.setCurrentHierarchy(hierarchy);\n\n      this.renderTree();\n    }\n  }\n\n  private getHierarchy(hierarchyId: string): HierarchyType {\n    let target: HierarchyType = null;\n    this.hierarchies.forEach(hierarchy => {\n      if (hierarchyId === hierarchy.code) {\n        target = hierarchy;\n      }\n    });\n\n    return target;\n  }\n\n  private setHierarchies(data: HierarchyType[]): void {\n    let hierarchies: HierarchyType[] = [];\n    data.forEach((hierarchyType, index) => {\n\n      if (hierarchyType.rootGeoObjectTypes.length > 0) {\n        hierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n          this.processHierarchyNodes(rootGeoObjectType);\n        })\n      }\n\n      hierarchies.push(hierarchyType);\n\n    });\n\n    this.hierarchies = hierarchies\n\n    this.hierarchies.sort((a, b) => {\n      if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n      else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n      else return 0;\n    });\n  }\n\n  private processHierarchyNodes(node: HierarchyNode) {\n    if (node != null) {\n      node.label = this.getHierarchyLabel(node.geoObjectType);\n\n      node.children.forEach(child => {\n        this.processHierarchyNodes(child);\n      })\n    }\n  }\n\n  private getHierarchyLabel(geoObjectTypeCode: string): string {\n    let label: string = null;\n    this.geoObjectTypes.forEach(function(gOT) {\n      if (gOT.code === geoObjectTypeCode) {\n        label = gOT.label.localizedValue;\n      }\n    });\n\n    return label;\n  }\n\n  public handleOnMenu(node: any, $event: any): void {\n    if (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n      this.contextMenuService.show.next({\n        contextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n        event: $event,\n        item: node,\n      });\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n    else {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  }\n\n  public treeNodeOnClick(node: any, $event: any): void {\n\n    node.treeModel.setFocusedNode(node);\n\n    if (node.treeModel.isExpanded(node)) {\n      node.collapse();\n    }\n    else {\n      node.treeModel.expandAll();\n    }\n  }\n\n  public hierarchyOnClick(event: any, item: HierarchyType) {\n    this.setCurrentHierarchy(item);\n    this.renderTree();\n  }\n\n  public createHierarchy(): void {\n    this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n\n    (<CreateHierarchyTypeModalComponent>this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n\n      this.hierarchies.push(data);\n\n      this.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n        var nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n        var nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n        if (nameA < nameB) {\n          return -1; //nameA comes first\n        }\n\n        if (nameA > nameB) {\n          return 1; // nameB comes first\n        }\n\n        return 0;  // names must be equal\n      });\n\n      this.updateViewDatastructures();\n    });\n  }\n\n  public deleteHierarchyType(obj: HierarchyType): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n    this.bsModalRef.content.data = obj.code;\n    this.bsModalRef.content.type = \"DANGER\";\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n    (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n      this.removeHierarchyType(data);\n    });\n  }\n\n  public editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n\n    this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n    this.bsModalRef.content.edit = true;\n    this.bsModalRef.content.readOnly = readOnly;\n    this.bsModalRef.content.hierarchyType = obj;\n    this.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n      let pos = this.getHierarchyTypePosition(data.code);\n\n      this.hierarchies[pos].label = data.label;\n      this.hierarchies[pos].description = data.description;\n      this.hierarchies[pos].progress = data.progress;\n      this.hierarchies[pos].acknowledgement = data.acknowledgement;\n      this.hierarchies[pos].disclaimer = data.disclaimer;\n      this.hierarchies[pos].useConstraints = data.useConstraints;\n      this.hierarchies[pos].accessConstraints = data.accessConstraints;\n      this.hierarchies[pos].contact = data.contact;\n      this.hierarchies[pos].phoneNumber = data.phoneNumber;\n      this.hierarchies[pos].email = data.email;\n\n      this.updateViewDatastructures();\n\n      if (this.currentHierarchy.code === data.code) {\n        this.setCurrentHierarchy(this.hierarchies[pos]);\n\n        this.renderTree();\n      }\n    });\n  }\n\n  setCurrentHierarchy(hierarchyType: HierarchyType): void {\n    this.currentHierarchy = hierarchyType;\n  }\n\n  isPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n    // return hierarchy.isPrimary;\n    return hierarchy.code === this.currentHierarchy.code;\n  }\n\n  public removeHierarchyType(code: string): void {\n    this.hierarchyService.deleteHierarchyType(code).then(response => {\n\n      let pos = this.getHierarchyTypePosition(code);\n      this.hierarchies.splice(pos, 1);\n      this.updateViewDatastructures();\n\n      if (this.hierarchies.length > 0) {\n        this.setCurrentHierarchy(this.hierarchies[0]);\n      }\n      else {\n        this.currentHierarchy = null;\n      }\n\n      this.renderTree();\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  public createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean, org: Organization): void {\n    this.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n    this.bsModalRef.content.init(org, this.geoObjectTypes, groupSuperType, isAbstract);\n\n    this.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n\n      data.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n      this.refreshAll(this.currentHierarchy);\n\n    });\n  }\n\n  public deleteGeoObjectType(obj: GeoObjectType): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n    this.bsModalRef.content.data = obj.code;\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n    this.bsModalRef.content.type = ModalTypes.danger;\n\n    (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n      this.removeGeoObjectType(data);\n    });\n  }\n\n  public removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n    this.registryService.deleteGeoObjectType(code).then(response => {\n\n      let pos = this.getGeoObjectTypePosition(code);\n      this.geoObjectTypes.splice(pos, 1);\n\n      this.refreshAll(this.currentHierarchy);\n\n    }).catch((err: HttpErrorResponse) => {\n      if (errCallback != null) {\n        errCallback(err);\n      }\n      this.error(err);\n    });\n  }\n\n  public manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n\n    this.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'manage-geoobjecttype-modal'\n    });\n\n    geoObjectType.attributes.sort((a, b) => {\n      if (a.label.localizedValue < b.label.localizedValue) return -1;\n      else if (a.label.localizedValue > b.label.localizedValue) return 1;\n      else return 0;\n    });\n    this.bsModalRef.content.geoObjectType = geoObjectType;\n    this.bsModalRef.content.readOnly = readOnly;\n\n    (<ManageGeoObjectTypeModalComponent>this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n\n      if (data.isAbstract) {\n        this.refreshAll(this.currentHierarchy);\n      }\n      else {\n        const position = this.getGeoObjectTypePosition(data.code);\n\n        if (position !== -1) {\n          this.geoObjectTypes[position] = data;\n        }\n\n        // Update all of the hierarchies for the new geo object type\n        this.updateViewDatastructures();\n\n        this.hierarchies.forEach((hierarchyType: HierarchyType) => {\n          this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n        });\n\n        // Update the current hierarchy view\n        if (this.currentHierarchy != null) {\n          this.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n        }\n\n        this.renderTree();\n      }\n    });\n  }\n\n  private getHierarchyTypePosition(code: string): number {\n    for (let i = 0; i < this.hierarchies.length; i++) {\n      let obj = this.hierarchies[i];\n      if (obj.code === code) {\n        return i;\n      }\n    }\n  }\n\n  private getGeoObjectTypePosition(code: string): number {\n    for (let i = 0; i < this.geoObjectTypes.length; i++) {\n      let obj = this.geoObjectTypes[i];\n      if (obj.code === code) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  public refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n    this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let hierarchy = this.hierarchies[i];\n\n      if (hierarchy.code === hierarchyType.code) {\n        this.hierarchies[i] = hierarchyType;\n\n        this.setCurrentHierarchy(hierarchyType);\n      }\n    }\n\n    this.updateViewDatastructures();\n\n    this.renderTree();\n  }\n\n  public removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n    const that = this;\n\n    this.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n\n      let got = that.findGeoObjectTypeByCode(gotCode);\n\n      let index = null;\n      for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n        if (got.relatedHierarchies[i] === hierarchyType.code) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index != null) {\n        got.relatedHierarchies.splice(index, 1);\n      }\n\n      that.refreshPrimaryHierarchy(hierarchyType);\n\n    }).catch((err: HttpErrorResponse) => {\n      if (errCallback != null) {\n        errCallback(err);\n      }\n\n      this.error(err);\n    });\n  }\n\n  public isActive(item: HierarchyType) {\n    return this.currentHierarchy === item;\n  };\n\n  onFilterChange(): void {\n    const label = this.filter.toLowerCase();\n\n    this.filteredHierarchiesByOrg = [];\n    this.filteredTypesByOrg = [];\n\n    this.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n\n      const filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n        const index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n        return (index !== -1);\n      });\n\n      this.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n    });\n\n    this.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n\n      const filtered = item.types.filter((type: GeoObjectType) => {\n        const index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n        return (index !== -1);\n      });\n\n      this.filteredTypesByOrg.push({ org: item.org, types: filtered });\n    });\n\n    setTimeout(() => { this.registerDragHandlers(); }, 500);\n  }\n\n  handleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n    this.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  handleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n    this.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  public importTypes(): void {\n    this.bsModalRef = this.modalService.show(ImportTypesModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n\n    this.bsModalRef.content.init(this.organizations);\n\n    this.bsModalRef.content.onNodeChange.subscribe(data => {\n      // Reload the page\n      this.refreshAll(null);\n    });\n  }\n\n\n\n  public error(err: HttpErrorResponse): void {\n    this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"type.permissions.includes('WRITE')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false, typeByOrg.org)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!type.permissions.includes('WRITE') && type.permissions.includes('READ')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': (currentHierarchy != null && hierarchy.code === currentHierarchy.code), 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n        <div *ngIf=\"isSRA\" style=\"text-align: center;padding: 10px 0;\">\n          <button (click)=\"importTypes()\" type=\"button\" class=\"btn btn-primary\" style=\"margin-bottom:20px;min-width:45%;\">\n            <localize key=\"hierarchy.sidebar.importTypes\"></localize>\n          </button>                \n        </div>                \n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\">\n                      <div *ngIf=\"isOrganizationRA(currentHierarchy.organizationCode, true)\" id=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n                      </div>\n                      <div *ngIf=\"!isOrganizationRA(currentHierarchy.organizationCode, true)\">\n                          <p class=\"upload-text\">\n                              <localize key=\"hierarchy.content.emptyHierarchy\"></localize>\n                          </p>\n                      </div>\n                    </div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"NodeTooltip\" class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-form\">\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                      <label>\n                        <localize key=\"hierarchy.nodeTooltip.hierarchy\"></localize>\n                      </label>\n                    </div>\n                    <div class=\"holder\">\n                      <label id=\"hierarchyLabel\"></label>\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","import { ChangeType } from \"@registry/model/constants\";\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime, GeoObjectType, HierarchyOverTime, ValueOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService, LocalizationService } from \"@shared/service\";\nimport { Subject } from \"rxjs\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\n\nexport class ChangeRequestEditor {\n\n    changeRequest: ChangeRequest;\n\n    // eslint-disable-next-line no-undef\n    attributeEditors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[];\n\n    geometryAttributeType: AttributeType;\n\n    parentAttributeType: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    geoObjectType: GeoObjectType;\n\n    hierarchies: HierarchyOverTime[];\n\n    private _isValid: boolean;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    localizationService: LocalizationService;\n\n    dateService: DateService;\n\n    registryService: RegistryService;\n\n    constructor(changeRequest: ChangeRequest, geoObject: GeoObjectOverTime, geoObjectType: GeoObjectType, hierarchies: HierarchyOverTime[], geometryAttributeType: AttributeType, parentAttributeType: AttributeType, localizationService: LocalizationService, dateService: DateService, registryService: RegistryService) {\n        this.changeRequest = changeRequest;\n        this.geoObject = geoObject;\n        this.geoObjectType = geoObjectType;\n        this.geometryAttributeType = geometryAttributeType;\n        this.parentAttributeType = parentAttributeType;\n        this.hierarchies = hierarchies;\n        this.localizationService = localizationService;\n        this.dateService = dateService;\n        this.registryService = registryService;\n\n        this.attributeEditors = this.generateAttributeEditors();\n        this.validate();\n    }\n\n    private generateAttributeEditors() {\n        let geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n        let editors = [];\n\n        let attrs = this.geoObjectType.attributes.slice(); // intentionally a shallow copy\n        attrs = attrs.filter(attr => geoObjectAttributeExcludes.indexOf(attr.code) === -1);\n        attrs.push(this.geometryAttributeType);\n        attrs.push(this.parentAttributeType);\n\n        attrs.forEach(attr => {\n            if (attr.code !== \"_PARENT_\") {\n                if (attr.isChangeOverTime) {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, null);\n\n                    editors.push(editor);\n                } else {\n                    let editor = new StandardAttributeCRModel(attr, this.geoObject, this.changeRequest);\n\n                    editors.push(editor);\n                }\n            } else {\n                this.hierarchies.forEach(hierarchy => {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, hierarchy);\n\n                    editors.push(editor);\n                });\n            }\n        });\n\n        return editors;\n    }\n\n    public hasChanges(): boolean {\n        let hasChanges = false;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (attributeEditor.hasChanges()) {\n                hasChanges = true;\n            }\n        });\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    public validate(skipExists: boolean = false): boolean {\n        this._isValid = true;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (!skipExists || attributeEditor.attribute.code !== \"exists\") {\n                attributeEditor.validate(true);\n\n                if (!attributeEditor.isValid()) {\n                    this._isValid = false;\n                }\n            }\n        });\n\n        return this._isValid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.geoObject.attributes[attributeCode]) {\n            let index = this.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditorForAttribute(attribute: AttributeType, hierarchy: HierarchyOverTime = null): ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel {\n        let indexOf = this.attributeEditors.findIndex(editor => (!editor.attribute.isChangeOverTime || (hierarchy == null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy == null) || ((editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy != null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy.code === hierarchy.code)) && editor.attribute.code === attribute.code);\n\n        if (indexOf === -1) {\n            return null;\n        } else {\n            return this.attributeEditors[indexOf];\n        }\n    }\n\n    public getEditors(): (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] {\n        return this.attributeEditors;\n    }\n\n    public onChange(type: ChangeType) {\n        this.onChangeSubject.next(type);\n    }\n\n    public existsAtDate(date: string) {\n        let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.geoObjectType, \"exists\");\n        let existEditors = (this.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n\n        let valLen = existEditors.length;\n        for (let j = 0; j < valLen; ++j) {\n            let editor: ValueOverTimeCREditor = existEditors[j];\n\n            if (editor.startDate != null && editor.endDate != null && !editor.isDelete() && editor.value === true && this.dateService.between(date, editor.startDate, editor.endDate)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { DatePipe } from \"@angular/common\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError, ValueOverTime } from \"@registry/model/registry\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\n@Component({\n    selector: \"geoobject-editor\",\n    templateUrl: \"./geoobject-editor.component.html\",\n    styleUrls: [\"./geoobject-editor.component.css\"],\n    providers: [DatePipe]\n})\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    geoObject: GeoObjectOverTime;\n\n    //    /*\n    //     * GeoObject Geometry Editor\n    //     */\n    //    @ViewChild( \"geometryEditor\" ) geometryEditor;\n    //\n    //    areGeometriesValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    constructor(private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate(votArray: ValueOverTime[], startDate: string): any {\n        for (let i: number = 0; i < votArray.length; ++i) {\n            if (votArray[i].startDate === startDate) {\n                return votArray[i];\n            }\n        }\n\n        return null;\n    }\n\n    setMasterListId(id: string) {\n        this.masterListId = id;\n    }\n\n    setOnSuccessCallback(func: Function) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew(typeCode: string, dateStr: string, isGeometryEditable: boolean) {\n        this.isNewGeoObject = true;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.hierarchies = retJson.hierarchies;\n        });\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError(importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0) {\n            this.hierarchies = importError.object.parents;\n        } else {\n            this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n                this.hierarchies = retJson.hierarchies;\n            });\n        }\n\n        this.geoObject = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n\n        this.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n            let config = {\n                historyId: historyId,\n                importErrorId: importError.id,\n                resolution: \"APPLY_GEO_OBJECT\",\n                parentTreeNode: hierarchies,\n                geoObject: geoObject,\n                isNew: importError.object.isNew\n            };\n\n            this.registryService.submitErrorResolve(config)\n                .then(() => {\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n        };\n    }\n\n\n\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting(code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean): void {\n        this.isNewGeoObject = false;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject(code, typeCode);\n        this.fetchGeoObjectType(typeCode);\n        this.fetchHierarchies(code, typeCode);\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject(code: string, typeCode: string) {\n        this.registryService.getGeoObjectOverTime(code, typeCode).then(geoObject => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(geoObject)).attributes);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then(locales => {\n            this.localizeService.setLocales(locales);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchGeoObjectType(code: string) {\n        this.registryService.getGeoObjectTypes([code], null)\n            .then(geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n\n                if (this.geoObject != null) {\n                    this.geoObject.geoObjectType = this.geoObjectType;\n                }\n\n                if (!this.geoObjectType.isGeometryEditable) {\n                    //                    this.areGeometriesValid = true;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                // eslint-disable-next-line no-console\n                console.log(err);\n            });\n    }\n\n    private fetchHierarchies(code: string, typeTypeCode: string) {\n        this.registryService.getHierarchiesForGeoObject(code, typeTypeCode)\n            .then((hierarchies: any) => {\n                this.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    getTypeAheadObservable(text, typeCode) {\n        return Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(text, typeCode).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, ptn: ParentTreeNode): void {\n        this.registryService.getGeoObjectByCode(e.item.code, ptn.geoObject.properties.type)\n            .then(geoObject => {\n                ptn.geoObject = geoObject;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    canSubmit(): boolean {\n        return this.attributeEditor && this.attributeEditor.isValid() &&\n            (this.isNewGeoObject || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        this.bsModalRef.hide();\n\n        if (this.submitFunction == null) {\n            /*\n                this.registryService.applyGeoObjectEdit(this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes)\n                    .then(() => {\n    \n                        if (this.onSuccessCallback != null) {\n                            this.onSuccessCallback();\n                        }\n    \n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                    */\n        } else {\n            this.submitFunction(this.geoObject, this.hierarchies, this.attributeEditor);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\">\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"this.geoObjectType && geoObject && hierarchies\"\n            #attributeEditor \n            [geoObjectType]=\"this.geoObjectType\"\n            [postGeoObject]=\"this.geoObject\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isGeometryInlined]=\"true\"\n            [hierarchies]=\"hierarchies\"\n            [readOnly]=\"false\">\n        </geoobject-shared-attribute-editor>\n\n        <!--\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n        -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!canSubmit()\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { HierarchyType, HierarchyGroupedTypeView } from \"@registry/model/hierarchy\";\nimport { TreeEntity } from \"@registry/model/registry\";\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class HierarchyService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getHierarchyTypes(types: any): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"types\", JSON.stringify(types));\n\n        return this.http\n            .get<HierarchyType[]>(registry.contextPath + \"/cgr/hierarchytype/get-all\", { params: params })\n            .toPromise();\n    }\n\n    getHierarchyGroupedTypes(): Promise<HierarchyGroupedTypeView[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<HierarchyGroupedTypeView[]>(registry.contextPath + \"/hierarchy/groupedTypes\", { params: params })\n            .toPromise();\n    }\n\n    addChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/add\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/insertBetweenTypes\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/remove\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/create\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/update\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteHierarchyType(code: string): Promise<TreeEntity> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>(registry.contextPath + \"/cgr/hierarchytype/delete\", { code: code }, { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/setInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, inheritedHierarchyTypeCode: inheritedHierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/removeInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from \"@registry/model/io\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    importSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport(configuration: ImportConfiguration): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/cancel-import\", JSON.stringify({ configuration: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    importShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    listGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"includeAbstractTypes\", includeAbstractTypes.toString());\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>(registry.contextPath + \"/cgr/geoobjecttype/list-types\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        params = params.set(\"includeInheritedTypes\", includeInheritedTypes.toString());\r\n\r\n        return this.http\r\n            .get<Location[]>(registry.contextPath + \"/cgr/geoobjecttype/get-ancestors\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-subtype-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/geo-synonym/createGeoEntitySynonym\", JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geo-synonym/deleteGeoEntitySynonym\", JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"mdAttributeId\", mdAttributeId);\r\n        params = params.set(\"text\", text);\r\n        params = params.set(\"limit\", limit);\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>(registry.contextPath + \"/uploader/getClassifierSuggestions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    createTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/uploader/createClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym(synonymId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ synonymId: synonymId });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/uploader/deleteClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from \"@shared/service\";\n\nimport { AllLocaleInfo } from \"@registry/model/localization-manager\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>(registry.contextPath + \"/localization/getNewLocaleInformation\")\n            .toPromise();\n    }\n\n    installLocale(language: string, country: string, variant: string): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if (language != null) {\n            params = params.set(\"language\", language);\n        }\n\n        if (country != null) {\n            params = params.set(\"country\", country);\n        }\n\n        if (variant != null) {\n            params = params.set(\"variant\", variant);\n        }\n\n        return this.http\n            .get<void>(registry.contextPath + \"/localization/installLocale\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\nimport * as mapboxgl from \"mapbox-gl\";\r\n\r\nimport { LocationInformation } from \"@registry/model/location-manager\";\r\nimport { EventService } from \"@shared/service\";\r\nimport { GeoObject } from \"@registry/model/registry\";\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) {\r\n        (mapboxgl as any).accessToken = \"pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNWE5bWkwazYwNGFtb3loOGxsbjR1In0.ZNEwT-pBnGookEb-BF_jQQ\";\r\n    }\r\n\r\n    roots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (typeCode != null) {\r\n            params = params.set(\"typeCode\", typeCode);\r\n        }\r\n\r\n        if (hierarchyCode != null) {\r\n            params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        }\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<LocationInformation>(registry.contextPath + \"/registrylocation/roots\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    search(text: string, date: string): Promise<{ type: string, features: GeoObject[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"text\", text);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ type: string, features: GeoObject[] }>(registry.contextPath + \"/registrylocation/search\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport {\r\n    GeoObject, GeoObjectType, AttributeType, Term, ParentTreeNode,\r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob,\r\n} from \"@registry/model/registry\";\r\n\r\nimport { HierarchyType } from \"@registry/model/hierarchy\";\r\nimport { Progress } from \"@shared/model/progress\";\r\n\r\nimport { Organization, LocaleView, PageResult } from \"@shared/model/core\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }>(registry.contextPath + \"/cgr/init\")\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (types != null) {\r\n            params = params.set(\"types\", JSON.stringify(types));\r\n        }\r\n\r\n        if (hierarchies != null) {\r\n            params = params.set(\"hierarchies\", JSON.stringify(hierarchies));\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>(registry.contextPath + \"/cgr/geoobjecttype/get-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects(childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"childId\", childId);\r\n        params = params.set(\"childTypeCode\", childTypeCode);\r\n        params = params.set(\"parentTypes\", JSON.stringify(parentTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>(registry.contextPath + \"/cgr/geoobject/get-parent-geoobjects\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getChildGeoObjects(parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"parentId\", parentId);\r\n        params = params.set(\"parentTypeCode\", parentTypeCode);\r\n        params = params.set(\"childrenTypes\", JSON.stringify(childrenTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>(registry.contextPath + \"/cgr/geoobject/getchildren\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    doesGeoObjectExistAtRange(startDate: string, endDate: string, typeCode: string, code: string): Promise<{exists: boolean, invalid: boolean}> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"startDate\", startDate);\r\n        params = params.set(\"endDate\", endDate);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"code\", code);\r\n\r\n        return this.http\r\n            .get<{exists: boolean, invalid: boolean}>(registry.contextPath + \"/geoobject/exists-at-range\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/create\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/update\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType(code: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/delete\", JSON.stringify({ code: code }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/addattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/updateattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<boolean>(registry.contextPath + \"/cgr/geoobjecttype/deleteattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeName: attributeName }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: term }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/updateterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: termJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject(id: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"id\", id);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"date\", date);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject-time/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject(code: string, typeCode: string): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>(registry.contextPath + \"/cgr/geoobject/get-hierarchies-over-time\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, parentTypeCode: string, hierarchy: string, startDate: string, endDate: string): Promise<{id: string, code: string, name: string, typeCode: string, uid: string}[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if (parentTypeCode != null) {\r\n            params.parentTypeCode = parentTypeCode;\r\n        }\r\n\r\n        if (startDate != null && endDate != null) {\r\n            params.startDate = startDate;\r\n            params.endDate = endDate;\r\n        }\r\n\r\n        return this.http\r\n            .post<{id: string, code: string, name: string, typeCode: string, uid: string}[]>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-active\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-completed\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-import-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-export-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/import-resolve\", JSON.stringify({ historyId: historyId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitValidationResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/validation-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitErrorResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/error-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<LocaleView[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<LocaleView[]>(registry.contextPath + \"/localization/get-locales\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", geoObjectCode);\r\n        params = params.set(\"typeCode\", geoObjectTypeCode);\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>(registry.contextPath + \"/cgr/geoobject-time/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectOverTime(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject-time/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>(registry.contextPath + \"/cgr/geoobject/setAttributeVersions\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit(geoObjectCode: string, geoObjectTypeCode: string, actions: string, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n\t  // TODO\r\n\t\t// Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n\t\t// This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n\t\t// for(const prop in geoObject.attributes) {\r\n\t\t//\tlet attr = geoObject.attributes[prop];\r\n \t\t//\tif(attr.type === \"date\"){\r\n\t\t//\t\tattr.values.forEach( val => {\r\n\t\t//\t\t\tval.value = new Date(val.value).getTime().toString();\r\n\t\t//\t\t})\r\n\t\t//\t}\r\n\t\t// }\r\n\r\n        let params = { geoObjectCode: geoObjectCode, geoObjectTypeCode: geoObjectTypeCode, actions: actions };\r\n\r\n        if (masterListId != null) {\r\n            params[\"masterListId\"] = masterListId;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/updateGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n    * Not really part of the RegistryService\r\n    */\r\n    applyGeoObjectCreate(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n    // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n    // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        for (const prop in geoObject.attributes) {\r\n            let attr = geoObject.attributes[prop];\r\n            if (attr.type === \"date\") {\r\n                attr.values.forEach(val => {\r\n                    val.value = new Date(val.value).getTime().toString();\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = { geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if (parentTreeNode != null) {\r\n            params[\"parentTreeNode\"] = parentTreeNode;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/createGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n\r\n    progress(oid: string): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<Progress>(registry.contextPath + \"/master-list/progress\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n\r\n    getDatasetBounds(oid: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/master-list/bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n\tgetOrganizations(): Promise<Organization[]> {\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Organization[]>(registry.contextPath + '/cgr/organizations/get-all')\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from \"@registry/model/registry\";\nimport { AttributeConfigInfo } from \"@registry/model/sync\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<SynchronizationConfig>>(registry.contextPath + \"/synchronization-config/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<SynchronizationConfig> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<AttributeConfigInfo[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalId\", externalId);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<AttributeConfigInfo[]>(registry.contextPath + \"/synchronization-config/get-custom-attr\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalSystemId\", externalSystemId);\n        params = params.set(\"hierarchyTypeCode\", hierarchyTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-config-for-es\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/apply\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {};\n\n        if (oid != null) {\n            params = { oid: oid };\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(registry.contextPath + \"/synchronization-config/edit\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    run(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/run\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJobs(oid: string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        //        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExportScheduledJob>>(registry.contextPath + \"/synchronization-config/get-jobs\", { params: params })\n            //            .pipe(finalize(() => {\n            //                this.eventService.complete();\n            //            }))\n            .toPromise();\n    }\n\n    getFhirExportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-export-implementations\", { params: params })\n            .toPromise();\n    }\n\n    getFhirImportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-import-implementations\", { params: params })\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";import { PageResult } from \"@shared/model/core\";\r\n declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    getMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"orderBy\", \"createDate\");\r\n        params = params.set(\"pageNum\", pageNum.toString());\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"whereStatus\", whereStatus);\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/tasks/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    completeTask(taskId: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/complete\", JSON.stringify({ id: taskId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setTaskStatus(taskId: string, status: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/setTaskStatus\", JSON.stringify({ id: taskId, status: status }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","import * as d3 from \"d3\";\n\nexport function calculateTextWidth(text: string, fontSize: number): number {\n    let svg = d3.select(\"#svg\");\n\n    let textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n    let textEl = textCalcGroup.append(\"text\")\n        .attr(\"x\", -5000)\n        .attr(\"y\", -5000)\n        .attr(\"font-size\", fontSize)\n        .text(text);\n\n    let bbox = textEl.node().getBBox();\n\n    d3.select(\".g-text-calc\").remove();\n\n    return bbox.width + 2; // +2 is for padding. I caught this truncating just ever so slightly\n}\n\nexport function svgPoint(x: number, y: number) {\n    let svg: any = d3.select(\"#svg\").node();\n    let pt = svg.createSVGPoint();\n\n    pt.x = x;\n    pt.y = y;\n\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n    return point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) ||\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) &&\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n    return { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.code === 'invalid' ? false : attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy, true ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\nimport { GeoObjectType, GeoObjectOverTime } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"submit-change-request\",\n    templateUrl: \"./submit-change-request.component.html\",\n    styleUrls: [\"./submit-change-request.css\"]\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    geoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    loading: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor(private modalService: BsModalService, private registryService: RegistryService,\n        private changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.dataSource = Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes([], null).then(types => {\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                const type = types[i];\n                const orgCode = type.organizationCode;\n                const typeCode = type.superTypeCode != null && type.superTypeCode != \"\" ? type.superTypeCode : type.code;\n\n                if (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort((a, b) => {\n                if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n                else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n                else return 0;\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public handleDateChange() {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n        } else {\n            this.forDate = null;\n        }\n    }\n\n    public onValidChange(newValid: boolean) {\n        if (this.geoObject == null) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading(e: boolean): void {\n        this.loading = e;\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n            this.geoObject = geoObject;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.geoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div style=\"margin-top:50px;margin-bottom:50px;background:#f7f7f7;width:100%;padding:10px;\">\n      <h3 style=\"margin-bottom: 20px;\"><localize key=\"change.request.search.for.geoobject.header\"></localize></h3>\n      <div class=\"row\">\n\n        <div class=\"col-md-3\">\n          <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>\n          <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\" [(ngModel)]=\"geoObjectType\" required>\n            <option>  </option>\n            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n          </select>\n        </div>\n        \n        <div class=\"col-md-3\">\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"!geoObjectType\" \n            [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" customStyles=\"width:100%\"></date-field>\n        </div>\n        \n        <div class=\"col-md-4\">\n          <localize key=\"change.request.search.for.geoobject.search.label\"></localize>\n          <input type=\"text\" [ngClass]=\"{'inline-loading':loading}\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" (typeaheadLoading)=\"changeTypeaheadLoading($event)\" [placeholder]=\"('masterlist.search' | localize) + '...'\" class=\"form-control\" autocomplete=\"off\">\n        </div>\n        \n        <div class=\"col-md-2\">\n          <label></label>\n           <!-- We cannot use the dataset-location-manager here because it pulls the tiles from the dataset (list) and we don't have a dataset. -->\n           <!-- <a *ngIf=\"preGeoObject && forDate\" [routerLink]=\"['/registry/dataset-location-manager', '123', preGeoObject.attributes.type, 'false', dateStr, preGeoObject.attributes.code, 'true']\" -->\n          \n           <a *ngIf=\"geoObject && forDate\" [routerLink]=\"['/registry/location-manager']\" [queryParams]=\"{type:geoObject.attributes.type, uid:geoObject.attributes.uid}\">\n            <button class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n          </a>\n          <button *ngIf=\"!(geoObject && forDate)\" disabled=\"true\" class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n        </div>\n\n      </div>\n      \n    </div>\n  </div>\n</div>","import { Component, Input } from \"@angular/core\";\n\nimport { Step, StepConfig } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"step-indicator\",\n    templateUrl: \"./step-indicator.component.html\",\n    styleUrls: [\"./step-indicator.css\"]\n})\nexport class StepIndicatorComponent {\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"steps\")\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n    constructor() {\n        this._stepConfig = { steps: [] };\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\nimport { ContextLayer, ContextList } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { LocalizationService } from \"@shared/service\";\nimport * as ColorGen from \"color-generator\";\nimport { Subscription } from \"rxjs\";\n\nimport { CdkDragDrop, moveItemInArray } from \"@angular/cdk/drag-drop\";\n\nexport const GRAPH_LAYER = \"graph\";\n\nexport class LayerEvent {\n\n    layer: ContextLayer;\n    prevLayer?: ContextLayer;\n\n}\n\n@Component({\n    selector: \"layer-panel\",\n    templateUrl: \"./layer-panel.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LayerPanelComponent implements OnInit, OnDestroy, OnChanges {\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: false\n    };\n\n    // Hack to allow the constant to be used in the html\n    CONSTANT = {\n        GRAPH_LAYER: GRAPH_LAYER\n    }\n\n    @Input() filter: string[] = [];\n    @Input() includeGraphLayer: boolean = false;\n\n    @Output() layerChange = new EventEmitter<LayerEvent>();\n    @Output() baseLayerChange = new EventEmitter<any>();\n    @Output() reorder = new EventEmitter<ContextLayer[]>();\n    @Output() zoomTo = new EventEmitter<ContextLayer>();\n    @Output() create = new EventEmitter<ContextLayer>();\n\n    @Input() baselayerIconHover: boolean = false;\n\n    lists: ContextList[] = [];\n    layers: ContextLayer[] = [];\n\n    form: { startDate: string, currentStartDate: string, endDate: string, currentEndDate: string } = {\n        startDate: \"\",\n        currentStartDate: \"\",\n        endDate: \"\",\n        currentEndDate: \"\"\n    };\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"baselayer.satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        //         {\n        //             name: 'Streets',\n        //             label: 'baselayer.streets',\n        //             id: 'streets-v11',\n        //             sprite: 'mapbox://sprites/mapbox/streets-v11',\n        //             url: 'mapbox://styles/mapbox/streets-v11'\n        //         }\n    ];\n\n    subscription: Subscription;\n\n    params: Params = null;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private service: ListTypeService,\n        private lService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.subscription = this.route.queryParams.subscribe(params => {\n            this.params = params;\n\n            this.handleParams();\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.includeGraphLayer != null) {\n            if (changes.includeGraphLayer.currentValue) {\n                const layer = {\n                    oid: GRAPH_LAYER,\n                    forDate: this.form.endDate,\n                    versionNumber: -1\n                };\n\n                const list = {\n                    oid: GRAPH_LAYER,\n                    label: this.lService.decode(\"explorer.search.layer\"),\n                    versions: [layer],\n                    open: false\n                };\n\n                this.lists.unshift(list);\n\n                this.toggleLayer(layer, list);\n            } else {\n                const index = this.lists.findIndex(v => v.oid === GRAPH_LAYER);\n\n                if (index !== -1) {\n                    const list = this.lists[index];\n                    this.toggleLayer(list.versions[0], list);\n\n                    this.lists.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     * Method responsible for parsing the state from the URL parameters and determining if\n     * the model of the widget needs to be updated or not.\n     *\n     * */\n    handleParams(): void {\n        let isSearchRequired = false;\n\n        if (this.params.startDate != null && this.params.startDate !== this.form.currentStartDate) {\n            this.form.startDate = this.params.startDate;\n\n            isSearchRequired = true;\n        }\n\n        if (this.params.endDate != null && this.params.endDate !== this.form.currentEndDate) {\n            this.form.endDate = this.params.endDate;\n\n            isSearchRequired = true;\n        }\n\n        const layers = this.params.layers != null ? JSON.parse(this.params.layers) : [];\n\n        layers.forEach(layer => {\n            const hasList = this.lists.filter(list => list.versions.findIndex(v => v.oid === layer) !== -1).length > 0;\n\n            if (!hasList) {\n                isSearchRequired = true;\n            }\n        });\n\n        if (isSearchRequired) {\n            // One of the enabled layers specified in the URL is not currently in the list/versions data model\n            // As such we must do a new search for the valid list/versions in order to populate the option\n            // into the data model.\n            // OR the search dates have been updated, so a new search must be performed.\n\n            this.handleSearch().then(lists => {\n                layers.reverse().forEach(oid => {\n                    lists.forEach(list => {\n                        list.versions.filter(v => v.oid === oid).forEach(v => {\n                            this.toggleLayer(v, list);\n                        });\n                    });\n                });\n            });\n        } else {\n            // Determine if an existing version in the data model needs to be toggled on based on the state\n            // of the URL 'layers' parameters\n            layers.forEach(layer => {\n                const index = this.layers.findIndex(l => l.oid === layer);\n\n                if (index === -1) {\n                    this.lists.forEach(list => {\n                        list.versions.filter(v => v.oid === layer).forEach(v => {\n                            this.toggleLayer(v, list);\n                        });\n                    });\n                }\n            });\n\n            // Determine if any existing layers which need to be toggled off based on the state of the URL ''\n            this.layers.filter(l => l.oid !== GRAPH_LAYER && layers.indexOf(l.oid) === -1).forEach(layer => {\n                this.lists.forEach(list => {\n                    list.versions.filter(v => v.oid === layer.oid).forEach(v => {\n                        this.toggleLayer(v, list);\n                    });\n                });\n            });\n        }\n\n        // Determine if the order of the layers has changed\n        if (this.params.layers != null) {\n            let isEqual = true;\n            for (let i = 0; i < this.layers.length; i++) {\n                if (this.layers[i].oid !== layers[i]) {\n                    isEqual = false;\n                }\n            }\n\n            if (!isEqual) {\n                const indecies = {};\n                for (let i = 0; i < layers.length; i++) {\n                    indecies[layers[i]] = i;\n                }\n\n                this.layers = this.layers.sort((a, b) => {\n                    return indecies[a.oid] - indecies[b.oid];\n                });\n\n                this.reorder.emit(this.layers);\n            }\n        }\n    }\n\n    onConfirm(): void {\n        if (this.params.startDate == null && this.params.endDate == null && this.params.layers == null && this.form.startDate === null && this.form.endDate === null) {\n            // A new search should null out any currently select layers and any record which has been clicked on\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { layers: null, version: null },\n                queryParamsHandling: \"merge\"\n            });\n\n            this.handleSearch();\n        } else {\n            // A new search should null out any currently select layers and any record which has been clicked on\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { startDate: this.form.startDate, endDate: this.form.endDate, layers: null, version: null },\n                queryParamsHandling: \"merge\"\n            });\n        }\n    }\n\n    handleSearch(): Promise<ContextList[]> {\n        return this.service.getGeospatialVersions(this.form.startDate, this.form.endDate).then(lists => {\n            // Remove all current lists\n            this.lists.forEach(list => {\n                list.versions.filter(v => v.enabled && v.oid !== GRAPH_LAYER).forEach(v => {\n                    this.toggleLayer(v, list);\n                });\n            });\n\n            this.form.currentStartDate = this.form.startDate;\n            this.form.currentEndDate = this.form.endDate;\n\n            this.lists = this.lists.filter(v => v.oid === GRAPH_LAYER).concat(lists);\n\n            this.lists.forEach(list => {\n                list.versions = list.versions.filter(v => this.filter.indexOf(v.oid) === -1);\n            });\n\n            return lists;\n        });\n    }\n\n    onToggleLayer(layer: ContextLayer, list: ContextList): void {\n        const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n        let layers = this.layers.filter(l => l.oid !== GRAPH_LAYER).map(l => l.oid);\n\n        if (index === -1) {\n            layers.unshift(layer.oid);\n        } else {\n            layers = layers.filter(l => l !== layer.oid);\n        }\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { layers: JSON.stringify(layers) },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    toggleLayer(layer: ContextLayer, list: ContextList): void {\n        layer.enabled = !layer.enabled;\n        layer.active = layer.enabled;\n\n        if (layer.active && layer.color == null) {\n            layer.color = ColorGen().hexString();\n            layer.label = list.label;\n        }\n\n        let index: number = 0;\n\n        if (layer.enabled) {\n            if (layer.oid === GRAPH_LAYER && this.params.layers != null) {\n                const i = JSON.parse(this.params.layers).indexOf(GRAPH_LAYER);\n\n                if (i !== -1) {\n                    index = i;\n                }\n            }\n\n            this.layers.splice(index, 0, layer);\n        } else {\n            const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n            if (index !== -1) {\n                this.layers.splice(index, 1);\n            }\n        }\n\n        this.layerChange.emit({ layer: layer });\n\n        if (index !== 0) {\n            this.reorder.emit(this.layers);\n        }\n    }\n\n    toggleActive(layer: ContextLayer): void {\n        layer.active = !layer.active;\n\n        const event: LayerEvent = {\n            layer: layer\n        };\n\n        if (layer.active) {\n            const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n            // Find the first active layer\n            for (let i = (index - 1); i >= 0; i--) {\n                if (event.prevLayer == null && this.layers[i].active) {\n                    event.prevLayer = this.layers[i];\n                }\n            }\n        }\n\n        this.layerChange.emit(event);\n    }\n\n    onGotoBounds(layer: ContextLayer): void {\n        this.zoomTo.emit(layer);\n    }\n\n    onCreate(layer: ContextLayer): void {\n        this.create.emit(layer);\n    }\n\n    toggleBaseLayer(layer: any): void {\n        this.baseLayers.forEach(bl => {\n            bl.active = false;\n        });\n\n        layer.active = true;\n\n        this.baseLayerChange.emit(layer);\n    }\n\n    moveLayerIncrementally(layer: ContextLayer, offset: number): void {\n        const index = this.layers.findIndex(l => l.oid === layer.oid);\n        const target = (index + offset);\n\n        if (index !== -1 && target > -1 && target <= this.layers.length - 1) {\n            let layers = this.layers.map(l => l.oid);\n\n            const a = layers[index];\n            layers[index] = layers[index + offset];\n            layers[index + offset] = a;\n\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { layers: JSON.stringify(layers) },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            });\n        }\n    }\n\n    moveLayer(oldLayers: ContextLayer[]): void {\n        let layers = oldLayers.map(l => l.oid);\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { layers: JSON.stringify(layers) },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    drop(event: CdkDragDrop<string[]>) {\n        let oldLayers = JSON.parse(JSON.stringify(this.layers));\n        moveItemInArray(oldLayers, event.previousIndex, event.currentIndex);\n        this.moveLayer(oldLayers);\n    }\n\n}\n","<ng-template #versionDetail let-layer='layer'>\n  (\n  <a *ngIf=\"layer.versionNumber !== 0\" [routerLink]=\"'/registry/master-list/' + layer.oid\" routerLinkActive=\"active\">\n    <localize key=\"list.type.version\"></localize>\n    {{layer.versionNumber}}\n  </a>\n  \n  <a *ngIf=\"layer.versionNumber === 0\" [routerLink]=\"'/registry/master-list/' + layer.oid\" routerLinkActive=\"active\">\n    <localize *ngIf=\"layer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n  </a>\n  )\n</ng-template>\n\n<div class=\"layer-toggle\">\n\n  <div>\n      <div class=\"clickable\" style=\"width: 30px;height: 30px;\" (click)=\"baselayerIconHover = !baselayerIconHover\">\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 122.88 105.02\" style=\"enable-background:new 0 0 122.88 105.02\" xml:space=\"preserve\"><g><path d=\"M97.25,40.58l23.85,10.28c1.48,0.64,2.17,2.36,1.53,3.85c-0.32,0.75-0.93,1.3-1.63,1.57l-23.19,9.39l23.29,10.04 c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57l-58.52,23.69c-0.73,0.3-1.52,0.27-2.2,0L1.83,81.05 c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67l22.97-9.96l-23.12-9.4c-1.5-0.61-2.22-2.31-1.61-3.81 c0.33-0.82,0.99-1.4,1.76-1.67l23.53-10.21L1.83,30.9c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67L60.02,0.24 c0.77-0.33,1.6-0.31,2.31,0l0-0.01l58.77,25.32c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57L97.25,40.58 L97.25,40.58z M112.36,53.47l-22.73-9.79L62.49,54.66c-0.73,0.3-1.52,0.27-2.2,0L33.08,43.6L10.47,53.4L61.39,74.1L112.36,53.47 L112.36,53.47z M90.19,68.75l-27.7,11.21c-0.73,0.3-1.52,0.27-2.2,0L32.52,68.68l-22.05,9.56l50.92,20.69l50.97-20.63L90.19,68.75 L90.19,68.75z M61.17,6.1l-50.7,21.99l50.92,20.69l50.97-20.63L61.17,6.1L61.17,6.1z\"/></g></svg>\n      </div>\n  </div>\n\n  <div *ngIf=\"!baselayerIconHover && layers.length > 0\">\n    <div style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.layers\"></localize>\n      </h4>\n      <div class=\"list-group\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n        <div *ngFor=\"let layer of layers\" class=\"list-group-item\" style=\"padding:5px;\" cdkDrag>\n\n            <div class=\"layer-toggle-wrapper\" style=\"cursor:move;\">\n            \n              <div class=\"custom-placeholder\" *cdkDragPlaceholder></div>\n              \n              <i class=\"fa fa-arrows\" style=\"font-size:15px;color: grey;margin-right: 3px;\" aria-hidden=\"true\"></i>\n              <boolean-field [value]=\"layer.active\" [label]=\"layer.label\" [disable]=\"false\" (change)=\"toggleActive(layer)\" style=\"line-height:0;\" ></boolean-field>\n              \n              <div class=\"label-wrapper\">\n                <span *ngIf=\"layer.oid !== CONSTANT.GRAPH_LAYER\">- {{ layer.forDate }}</span>\n                <ng-container *ngIf=\"layer.oid !== CONSTANT.GRAPH_LAYER\" [ngTemplateOutlet]=\"versionDetail\"\n                  [ngTemplateOutletContext]=\"{layer:layer}\">\n                </ng-container>\n                <div class=\"layer-legend-square\" [ngStyle]=\"{'background-color': layer.color}\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"> </div>\n<!--                 <i class=\"fa fa-arrow-up\" aria-hidden=\"true\" (click)=\"moveLayer(layer, -1)\"></i> -->\n<!--                 <i class=\"fa fa-arrow-down\" aria-hidden=\"true\" (click)=\"moveLayer(layer, 1)\"></i> -->\n                <i *ngIf=\"layer.oid !== CONSTANT.GRAPH_LAYER\" class=\"fa fa-eye\" aria-hidden=\"true\" (click)=\"onGotoBounds(layer)\"></i>\n                <i *ngIf=\"layer.versionNumber === 0 && !layer.isAbstract\" class=\"fa fa-plus\" aria-hidden=\"true\"\n                  (click)=\"onCreate(layer)\"></i>\n              </div>\n            </div>\n        </div>\n      </div>\n      \n    </div>\n  </div>\n\n  <div *ngIf=\"baselayerIconHover\" style=\"margin-top: 10px;\">\n\n    <div *ngIf=\"baseLayers.length > 1\" style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.base.layers.label\"></localize>\n      </h4>\n      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n        <input class=\"layer-toggle-input\" type='radio' name='baselayers' [value]='baseLayer.id'\n          [checked]=\"baseLayer.selected\" (change)=\"toggleBaseLayer(baseLayer)\">\n        <label class=\"layer-toggle-label\">\n          <localize [key]=\"baseLayer.label\"></localize>\n        </label>\n      </div>\n    </div>\n    \n    <form class=\"modal-form\" name=\"export-form\">\n    \n      <fieldset>\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <label><localize key=\"io.startDate\"></localize></label>\n          </div>\n          <div class=\"col-md-4\">\n            <label><localize key=\"io.endDate\"></localize></label>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-4\">\n            <date-field [(value)]=\"form.startDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"startDate\"\n              [allowFutureDates]=\"false\" name=\"startDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\">\n            <date-field [(value)]=\"form.endDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"endDate\"\n              [allowFutureDates]=\"false\" name=\"endDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\" style=\"text-align:center;\">\n            <button type=\"button\" (click)=\"onConfirm()\" class=\"btn btn-primary\" role=\"button\">\n              <span>\n                <localize key=\"explorer.find.layers.by.date.range.button\"></localize>\n              </span>\n            </button>\n          </div>\n        </div>\n        <div *ngIf=\"lists.length > 0\" class=\"row\">\n          <div class=\"col-md-12\">\n            <p style=\"font-style:italic;color:grey;\"><localize key=\"explorer.search.note\"></localize></p>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>\n              <localize key=\"explorer.layers\"></localize>\n            </h3>\n            \n            <p *ngIf=\"lists.length < 1\" style=\"font-style: italic; color: grey;\"><localize key=\"explorer.find.layers.no.layers.found.message\"></localize></p>\n            \n            <div class=\"list-group\">\n              <div *ngFor=\"let list of lists\">\n                <div *ngIf=\"list.versions.length > 0\" class=\"list-group-item\" style=\"border: none;\">\n                \n                  <h4><a (click)=\"list.open = !list.open\"><i class=\"fa fa-chevron-right\" [ngClass]=\"{'fa-chevron-down' : list.open, 'fa-chevron-right' : !list.open}\" style=\"font-size:14px;\"></i>{{ list.label }}</a></h4>\n                  <div *ngIf=\"list.open\" class=\"list-group\">\n                    <div *ngFor=\"let version of list.versions\">\n\n                        <div class=\"layer-toggle-wrapper\">\n                            <boolean-field [value]=\"version.enabled\" [label]=\"version.forDate\" [disable]=\"false\" (change)=\"onToggleLayer(version, list)\" style=\"line-height:0;\"></boolean-field>\n                        \n                            <div class=\"label-wrapper\">\n                              <ng-container *ngIf=\"version.oid !== CONSTANT.GRAPH_LAYER\" [ngTemplateOutlet]=\"versionDetail\"\n                                [ngTemplateOutletContext]=\"{layer:version}\">\n                              </ng-container>\n                              <div *ngIf=\"version.color != null\" class=\"layer-legend-square\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"\n                                [ngStyle]=\"{'background-color': version.color}\"> </div>\n                            </div>\n                        </div>           \n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n\n  </div>","import { LocalizedValue, PageResult } from \"@shared/model/core\";\nimport { GeoObjectType } from \"./registry\";\n\nexport class ListTypeByType {\n\n    orgCode: string;\n    orgLabel: string;\n    typeCode: string;\n    typeLabel: string;\n    geometryType: string;\n    write: boolean;\n    private: boolean;\n    lists: ListType[];\n}\n\nexport class ListMetadata {\n\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n}\n\nexport class ListType {\n\n    oid?: string;\n    code: string;\n    organization: string;\n    listType: string;\n    write?: boolean;\n    read?: boolean;\n    exploratory?: boolean;\n    typeCode: string;\n    superTypeCode?: string;\n    typeLabel?: string;\n    typePrivate?: boolean;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n    subtypes?: { label: string, code: string }[];\n    subtypeHierarchies?: any[];\n    hierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n    includeLatLong?: boolean;\n\n    listMetadata: ListMetadata;\n    geospatialMetadata: ListMetadata;\n\n    // Attributes for the subtypes\n    validOn?: string;\n    publishingStartDate?: string;\n    frequency?: string;\n    intervalJson?: { startDate: string, endDate: string }[]\n\n    entries?: ListTypeEntry[];\n}\n\nexport class ListTypeEntry {\n    displayLabel: string;\n    oid: string;\n    typeCode: string;\n    orgCode: string;\n    listType: string;\n    forDate: string;\n    wokring: ListTypeVersion;\n    versions?: ListTypeVersion[];\n    showAll?: boolean;\n}\n\nexport class VersionMetadata {\n    master: boolean;\n    visibility: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n}\n\nexport class ListVersionMetadata {\n    oid?: string;\n    listMetadata?: VersionMetadata;\n    geospatialMetadata?: VersionMetadata;\n}\n\nexport class ListTypeVersion extends ListVersionMetadata {\n    displayLabel: string;\n    typeCode: string;\n    orgCode: string;\n    listEntry: string;\n    listType: string;\n    forDate: string;\n    createDate: string;\n    publishDate: string;\n    attributes: any[];\n    isGeometryEditable: boolean;\n    locales?: string[];\n    shapefile?: boolean;\n    isAbstract?: boolean;\n    superTypeCode?: string;\n    refreshProgress?: any;\n    working: boolean;\n    isMember?: boolean;\n    versionNumber: number;\n    subtypes?: { label: string, code: string }[];\n    collapsed?: boolean;\n    curation?: any;\n}\n\nexport class ContextLayer {\n    oid: string;\n    forDate: string;\n    versionNumber: number;\n    active?: boolean;\n    enabled?: boolean;\n    color?: string;\n    label?: string;\n}\n\nexport class ContextList {\n    oid: string;\n    label: string;\n    versions: ContextLayer[];\n    open?: boolean;\n}\n\nexport class LayerRecord {\n    recordType: string;\n\n    // Attributes required for the geo object properties panel\n    type?: GeoObjectType;\n    code?: string;\n    forDate?: string;\n\n    // Attributes required for the list row properties panel\n    typeLabel?: LocalizedValue;\n    version?: string;\n    attributes?: any[];\n    data?: Object;\n}\n\nexport class CurationProblem {\n    resolution: string;\n    historyId: string;\n    type: string;\n    id: string;\n    typeCode?: string;\n    goCode?: string;\n    goUid?: string;\n    selected?: boolean;\n}\n\nexport class CurationJob {\n    status: string;\n    lastRun: string;\n    lastRunBy: string;\n    historyId: string;\n    jobId: string;\n    workTotal: number;\n    workProgress: number;\n    exception?: {\n        type: string,\n        message: string\n    };\n    page?: PageResult<CurationProblem>\n}","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ErrorHandler } from '@shared/component';\nimport { Organization } from '@shared/model/core';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService, LocalizationService } from '@shared/service';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n  selector: 'import-types-modal',\n  templateUrl: './import-types-modal.component.html',\n  styleUrls: []\n})\nexport class ImportTypesModalComponent implements OnInit {\n\n  public organizations: Organization[] = [];\n  public orgCode: string;\n\n\n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n\n  @ViewChild('myFile')\n  fileRef: ElementRef;\n\n  message: string = null;\n\n  public onNodeChange: Subject<boolean>;\n\n  constructor(private eventService: EventService, private localizationService: LocalizationService, public bsModalRef: BsModalRef) {\n  }\n\n  ngOnInit(): void {\n    this.onNodeChange = new Subject();\n  }\n\n  init(organizations: Organization[]): void {\n    this.organizations = organizations;\n\n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/cgr/import-types'\n    };\n\n    this.uploader = new FileUploader(options);\n\n    this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n      form.append('orgCode', this.orgCode);\n    };\n    this.uploader.onBeforeUploadItem = (fileItem: any) => {\n      this.eventService.start();\n    };\n    this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n      this.fileRef.nativeElement.value = \"\";\n      this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n      this.onNodeChange.next(true);\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n      const error = JSON.parse(response)\n\n      this.error({ error: error });\n    }\n\n  }\n\n  onSelect(orgCode: string): void {\n    this.orgCode = orgCode;\n  }\n\n  onClick(): void {\n\n    if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error({\n        message: this.localizationService.decode('io.missing.file'),\n        error: {},\n      });\n    }\n  }\n\n\n  public error(err: any): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1> <localize key=\"hierarchy.sidebar.importTypes\"></localize> </h1>\n    </div> \n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"attribute.organization.label\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <select (change)=\"onSelect($event.target.value)\">\n              <option></option>\n              <option *ngFor=\"let organization of organizations\" value={{organization.code}}>{{organization.label.localizedValue}}</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"hierarchy.sidebar.xmlFile\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xml\" required /> \n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\"></div>\n          <div class=\"holder\">\n            <div class=\"button-holder\">\n              <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.cancel\"></localize>\n                </span>\n              </button>\n              <button type=\"submit\" (click)=\"onClick()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.ok\"></localize>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"create-hierarchy-type-modal\",\n    templateUrl: \"./create-hierarchy-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n\n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n    readOnly: boolean = false;\n\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            rootGeoObjectTypes: [],\n            organizationCode: \"\"\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n            // Filter out organizations they're not RA's of, unless we're readOnly.\n            if (!this.readOnly) {\n                this.organizations = [];\n\n                for (var i = 0; i < orgs.length; ++i) {\n                    if (this.auth.isOrganizationRA(orgs[i].code)) {\n                        this.organizations.push(orgs[i]);\n                    }\n                }\n            } else {\n                this.organizations = orgs;\n            }\n\n            if (!this.edit && this.organizations.length === 1) {\n                this.hierarchyType.organizationCode = this.organizations[0].code;\n                this.organizationLabel = this.organizations[0].label.localizedValue;\n            } else if (this.edit || this.readOnly) {\n                this.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getOrganizationLabelFromCode(orgCode: string) {\n        for (var i = 0; i < this.organizations.length; ++i) {\n            if (this.organizations[i].code === orgCode) {\n                return this.organizations[i].label.localizedValue;\n            }\n        }\n\n        console.log(\"Did not find org with code [\" + orgCode + \"]\");\n        return orgCode;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if (this.readOnly) {\n            this.bsModalRef.hide();\n            return;\n        }\n\n        if (this.edit) {\n            this.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize *ngIf=\"!edit\" key=\"hierarchy.management.create.hierarchy.title\"></localize>\n            <localize *ngIf=\"edit\" key=\"hierarchy.management.update.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> \n          <span  style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      \n      <localized-text [(value)]=\"hierarchyType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\" [disabled]=\"readOnly\"></localized-text>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.disclaimer\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.disclaimer\" name=\"disclaimer\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.accessConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.useConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      \n      <hr/>\n      \n      <div class=\"form-group\">\n        <h4>\n          <localize key=\"masterlist.contact\"></localize>\n        </h4>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.phoneNumber\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.phoneNumber\" name=\"phoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.email\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1 || form.invalid\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\n@Component({\n    selector: \"create-geoobjtype-modal\",\n    templateUrl: \"./create-geoobjtype-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organization: Organization = null;\n    message: string = null;\n    parents: GeoObjectType[];\n    hierarchyType: HierarchyType;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            geometryType: \"MULTIPOINT\",\n            isLeaf: false,\n            isGeometryEditable: true,\n            organizationCode: \"\",\n            attributes: []\n        };\n    }\n\n    init(organization: Organization, parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n        this.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\n        if (groupSuperType) {\n            this.geoObjectType.superTypeCode = groupSuperType.code;\n            this.geoObjectType.geometryType = groupSuperType.geometryType;\n            this.geoObjectType.isPrivate = groupSuperType.isPrivate;\n        }\n\n        // Filter out parents that are not abstract\n        this.parents = parents.filter(parent => parent.isAbstract);\n\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n        this.geoObjectType.organizationCode = this.organization.code;\n        this.organizationLabel = this.organization.label.localizedValue;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n            this.onGeoObjTypeCreate.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    toggleIsAbstract(): void {\n        this.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"geoObjectType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <label style=\"display: block;\">\n            <localize key=\"attribute.group.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n        \n          <label style=\"display: block;\">\n            <localize key=\"geoObjectType.attr.visibility.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"geoObjectType.superTypeCode != null\" [(value)]=\"geoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [disabled]=\"geoObjectType.superTypeCode != null && geoObjectType.superTypeCode != ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { ManageGeoObjectTypeModalState, GeoObjectType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-geoobjecttype-modal\",\n    templateUrl: \"./manage-geoobjecttype-modal.component.html\",\n    styleUrls: [\"./manage-geoobjecttype-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, geoObjectTypeManagementService: GeoObjectTypeManagementService) {\n        this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe(modalState => {\n            this.modalState = modalState;\n        });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy() {\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the\n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next(data);\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form>\n\n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n\n<!--   @Deprecate -->\n<!--   <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></manage-attributes-modal> -->\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\"></edit-term-option-input>\n\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, AttributeType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"geoobjecttype-input\",\n    templateUrl: \"./geoobjecttype-input.component.html\",\n    styleUrls: [\"./geoobjecttype-input.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n\n    organizationLabel: string;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"setGeoObjectType\")\n    set in(geoObjectType: GeoObjectType) {\n        if (geoObjectType) {\n            this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        }\n    }\n\n    message: string = null;\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizationService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n\n        this.fetchOrganizationLabel();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    fetchOrganizationLabel(): void {\n        this.registryService.getOrganizations().then(orgs => {\n            for (let i = 0; i < orgs.length; ++i) {\n                if (orgs[i].code === this.editGeoObjectType.organizationCode) {\n                    this.organizationLabel = orgs[i].label.localizedValue;\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageAttributes, attribute: \"\", termOption: \"\" });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType(this.editGeoObjectType).then(geoObjectType => {\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n\n        // return false;\n\n        return true;\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"geoObjectType.attr.visibility.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"readOnly || geoObjectType.superTypeCode\" [(value)]=\"editGeoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n<!--                             <ul class=\"list-group list-group-flush\"> -->\n<!--                                 <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li> -->\n<!--                             </ul> -->\n\n<!--                             <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\"> -->\n<!--                                 <localize key=\"modal.button.manageAttributes\"></localize> -->\n<!--                             </button> -->\n\n                        <div class=\"table-responsive\">\n                              <table class=\"table\">\n<!--                                   <thead> -->\n<!--                                       <tr> -->\n<!--                                           <th> -->\n<!--                                               <localize key=\"data.property.label.label\"></localize> -->\n<!--                                           </th> -->\n<!--                                           <th class=\"button-column-header\"> -->\n<!--                                               <localize key=\"data.property.label.actions\"></localize> -->\n<!--                                           </th> -->\n<!--                                       </tr> -->\n<!--                                   </thead> -->\n                                  <tbody>\n                                      <tr *ngFor=\"let attr of geoObjectType.attributes\" >\n                                          <td>{{attr.label.localizedValue}}</td>\n                                          <td class=\"button-column\" style=\"width: 60px;\">\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                                  [title]=\"'modal.button.edit' | localize\"></a>\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                                  [title]=\"'modal.button.remove' | localize\"></a>\n                                          </td>\n                                      </tr>\n                                  </tbody>\n                              </table>\n                          </div>\n                          \n                          <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                              <localize key=\"modal.button.add\"></localize>\n                          </i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, AttributeTermType, AttributeDecimalType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"define-attribute-modal-content\",\n    templateUrl: \"./define-attribute-modal-content.component.html\",\n    styleUrls: [\"./define-attribute-modal-content.css\"]\n})\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    newAttribute: AttributeType = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.create.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.attributeInputComponent) {\n            this.attributeInputComponent.animate();\n        }\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.addAttributeType(this.geoObjectType.code, this.newAttribute).then(data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setAttribute(type: string): void {\n        if (type === \"term\") {\n            this.newAttribute = new AttributeTermType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else if (type === \"float\") {\n            this.newAttribute = new AttributeDecimalType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else {\n            this.newAttribute = new AttributeType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        let isAttrValid: boolean = false;\n\n        if (this.attributeInputComponent) {\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n\n        if (isAttrValid) {\n            return true;\n        }\n\n        return false;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Directive } from \"@angular/core\";\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from \"@angular/forms\";\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator(): ValidatorFn {\n    return (c: AbstractControl) => {\n        if (c.value) {\n            let isValid = c.value.indexOf(\" \") === -1;\n\n            if (isValid) {\n                return null;\n            } else {\n                return {\n                    geoObjectAttributeCode: {\n                        valid: false\n                    }\n                };\n            }\n        }\n    };\n}\n\n@Directive({\n    selector: \"[geoObjectAttributeCode][ngModel]\",\n    providers: [\n        // eslint-disable-next-line no-use-before-define\n        { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n    ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n\n    validator: ValidatorFn;\n\n    constructor() {\n        this.validator = validateGeoObjectAttributeCodeValidator();\n    }\n\n    validate(c: FormControl) {\n        return this.validator(c);\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"edit-attribute-modal-content\",\n    templateUrl: \"./edit-attribute-modal-content.component.html\",\n    styleUrls: [\"./edit-attribute-modal-content.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]]\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n            for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n                let attr = this.geoObjectType.attributes[i];\n                if (attr.code === data.code) {\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    back(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, AttributeTermType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { GeoObjectTypeManagementService } from \"@registry/service/geoobjecttype-management.service\";\n\n@Component({\n    selector: \"term-option-widget\",\n    templateUrl: \"./term-option-widget.component.html\",\n    styleUrls: [\"./term-option-widget.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    state: string = \"none\";\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n\n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n\n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" });\n    }\n\n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { GeoObjectType, AttributeTermType, Term } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"manage-term-options\",\n    templateUrl: \"./manage-term-options.component.html\",\n    styleUrls: [\"./manage-term-options.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    termOption: Term;\n    state: string = \"none\";\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: true }\n        ]\r\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.termOption.code && this.termOption.code.length > 0) {\n            // If code has a space\n            if (this.termOption.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            // If label is only spaces\n            for (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n                if (this.termOption.label.localeValues[i].value.replace(/\\s/g, \"\").length === 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n            return false;\n        }\n\n        return false;\n    }\n\n    addTermOption(): void {\n        this.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            this.attribute.rootTerm.children.push(data);\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    deleteTermOption(termOption: Term): void {\n        this.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n            if (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n                this.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n            }\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    removeTermOption(termOption: Term): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + termOption.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteTermOption(termOption);\n        });\n    }\n\n    editTermOption(termOption: Term): void {\n        const state = {\n            state: GeoObjectTypeModalStates.editTermOption,\n            attribute: this.attribute,\n            termOption: JSON.parse(JSON.stringify(termOption))\n        };\n\n        this.geoObjectTypeManagementService.setModalState(state);\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from \"@shared/model/modal\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"edit-term-option-input\",\n    templateUrl: \"./edit-term-option-input.component.html\",\n    styleUrls: [],\n    animations: [\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n                    ]\n                )]\n        )\n    ]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Input() termOption: Term;\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), active: true, enabled: true }\n\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            // Update the term definition on the attribute\n            const index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n            if (index !== -1) {\n                this.attribute.rootTerm.children[index] = data;\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: null });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\n\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { SvgHierarchyNode } from \"./svg-hierarchy-node\";\nimport { calculateTextWidth } from \"./svg-util\";\nimport { INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL, HierarchyComponent, TREE_SCALE_FACTOR_X, TREE_SCALE_FACTOR_Y } from \"../hierarchy.component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nexport class SvgHierarchyType {\n\n    public static gotRectW: number = 150;\n    public static gotRectH: number = 25;\n    public static gotBodyFontSize: number = 8;\n    public static gotOptionsButtonFontSize: number = 12;\n\n    public static gotHeaderW: number = 150;\n    public static gotHeaderH: number = 14;\n    public static gotHeaderFontSize: number = 8;\n\n    public static MOUSE_HOVER_EVENT_ENTER = \"mouseenter\";\n\n    public static MOUSE_HOVER_EVENT_MOVE = \"mousemove\";\n\n    public static MOUSE_HOVER_EVENT_EXIT = \"mouseleave\";\n\n    hierarchyComponent: HierarchyComponent;\n\n    hierarchyType: HierarchyType;\n\n    svgEl: any;\n\n    d3Hierarchy: any;\n\n    d3Tree: any;\n\n    isPrimary: boolean;\n\n    tooltip: any;\n\n    public constructor(hierarchyComponent: HierarchyComponent, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        const hierarchyType = ht;\n\n        this.hierarchyComponent = hierarchyComponent;\n        this.hierarchyType = hierarchyType;\n        this.svgEl = svgEl;\n\n        this.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n        this.isPrimary = isPrimary;\n\n        this.d3Tree = d3.tree().nodeSize([SvgHierarchyType.gotRectW * TREE_SCALE_FACTOR_X, (SvgHierarchyType.gotRectH + SvgHierarchyType.gotHeaderH) * TREE_SCALE_FACTOR_Y]).separation((a, b) => 0.8)(this.d3Hierarchy);\n    }\n\n    public getD3Tree() {\n        return this.d3Tree;\n    }\n\n    public getCode(): string {\n        return this.hierarchyType.code;\n    }\n\n    public getNodeByCode(gotCode: string): SvgHierarchyNode {\n        let treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\n        if (treeNode == null) {\n            return null;\n        }\n\n        return new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService, this.authService);\n    }\n\n    public renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n        let bbox = hg.node().getBBox();\n\n        let colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        let headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        const headerFontSize: number = 10;\n        const iconWidth: number = 20;\n        const maxHierarchyLabelLength = 200;\n\n        let hierarchyLabelW: number = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize);\n        let hierarchyLabelH:number = headerFontSize * 2;\n        let hierarchyLabelY:number = bbox.y + headerFontSize * 1.6;\n        if (hierarchyLabelW > maxHierarchyLabelLength) {\n            hierarchyLabelW = maxHierarchyLabelLength;\n            hierarchyLabelH = headerFontSize * 3;\n            hierarchyLabelY = bbox.y + headerFontSize;\n        }\n\n        let lineWidth = bbox.width;\n        let textWidth = hierarchyLabelW + iconWidth;\n\n        if (textWidth > lineWidth) {\n            lineWidth = textWidth;\n        }\n\n        // Hierarchy icon (font awesome)\n        headerg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .style(\"font-family\", \"FontAwesome\")\n            .attr(\"fill\", \"grey\")\n            .attr(\"font-size\", 12)\n            .text(\"\\uf0e8\");\n\n        // Hierarchy display label\n        colHeader.append(\"foreignObject\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"x\", bbox.x + iconWidth)\n            .attr(\"y\", hierarchyLabelY)\n            .attr(\"width\", hierarchyLabelW)\n            .attr(\"height\", hierarchyLabelH)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"gray\")\n            // .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => this.hierarchyType.label.localizedValue);\n\n        // Line underneath the header\n        headerg.append(\"line\").classed(\"hierarchy-header-line\", true)\n            .attr(\"x1\", bbox.x)\n            .attr(\"y1\", bbox.y + headerFontSize)\n            .attr(\"x2\", bbox.x + lineWidth)\n            .attr(\"y2\", bbox.y + headerFontSize)\n            .attr(\"stroke\", \"grey\")\n            .attr(\"stroke-width\", .5);\n\n        let headerGBbox = headerg.node().getBBox();\n        headerg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n        // Col header label\n        colHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize + 2)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"grey\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .text(colHeaderLabel);\n\n        colHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n        return headerg;\n    }\n\n    getRelatedHierarchies(gotCode: string): string[] {\n        let got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n        if (got.relatedHierarchies == null) {\n            got.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n        }\n\n        let relatedHiers: string[] = got.relatedHierarchies;\n\n        let index = null;\n        for (let i = 0; i < relatedHiers.length; ++i) {\n            if (relatedHiers[i] === this.getCode()) {\n                index = i;\n            }\n        }\n\n        if (index != null) {\n            relatedHiers.splice(index, 1);\n        }\n\n        return relatedHiers;\n    }\n\n    private nodeMouseover(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 1);\n    }\n\n    private nodeMousemove(event: any, element: any, data:any) {\n        d3.select(\"#hierarchyLabel\").html(this.hierarchyType.label.localizedValue);\n        d3.select(\"#hierarchyCodeLabel\").html(this.hierarchyType.code);\n\n        d3.select(\"#geoObjectTypeLabel\").html(data.data.label);\n        d3.select(\"#geoObjectTypeCodeLabel\").html(data.data.geoObjectType);\n\n        d3.select(\"#hierarchyOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyType.organizationCode).label.localizedValue);\n        d3.select(\"#geoObjectTypeOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyComponent.findGeoObjectTypeByCode(data.data.geoObjectType).organizationCode).label.localizedValue);\n\n        let nodeTooltip: any = d3.select(\"#NodeTooltip\").node();\n        let nodeTooltipBbox: DOMRect = nodeTooltip.getBoundingClientRect();\n\n        let pos = { x: event.pageX, y: event.pageY };\n        const yPointerOffset: number = 50;\n        const xPointerOffset: number = 0;\n\n    // If overflow off bottom of page\n        if ((event.pageY + nodeTooltipBbox.height + yPointerOffset) > document.documentElement.scrollHeight) {\n      // render above mouse pointer\n            pos.y = event.pageY - nodeTooltipBbox.height - yPointerOffset;\n        }\n\n    // If overflow off right side of page\n        if ((event.pageX + nodeTooltipBbox.width + xPointerOffset) > document.documentElement.scrollWidth) {\n      // render to the left of the mouse pointer\n            pos.x = event.pageX - nodeTooltipBbox.width - xPointerOffset;\n        }\n\n        d3.select(\"#NodeTooltip\")\n            .style(\"left\", pos.x + \"px\")\n            .style(\"top\", pos.y + \"px\");\n    }\n\n    private nodeMouseleave(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 0)\n            .style(\"left\", \"-10000px\")\n            .style(\"top\", \"-10000px\");\n    }\n\n    public render() {\n        let that = this;\n        let descends: any = this.d3Tree.descendants();\n\n        d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").remove();\n        if (this.isPrimary) {\n            d3.select(\".g-hierarchy[data-primary=\\\"true\\\"]\").remove();\n        }\n\n        let hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n        hg.attr(\"font-family\", \"sans-serif\");\n\n        let gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n        // Edge\n        gtree.append(\"g\").classed(\"g-got-edge\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(this.d3Tree.links())\n            .join(\"path\")\n            // .attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n            .attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n                return \"M\" + d.source.x + \",\" + (d.source.y) +\n                    \"V\" + ((d.source.y + d.target.y) / 2) +\n                    \"H\" + d.target.x +\n                    \"V\" + (d.target.y);\n            });\n\n        // Header on square which denotes which hierarchy it's a part of\n        let gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n        gHeader.selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"rx\", 3)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) =>\n                d.data.inheritedHierarchyCode != null\n            )\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Write the name of the hierarchy on the header\n        gHeader.selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) =>\n                d.x - (SvgHierarchyType.gotHeaderW / 2)\n            )\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .style(\"text-align\", \"center\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"white\")\n            .style(\"height\", (SvgHierarchyType.gotHeaderH - 4) + \"px\")\n            .style(\"width\", SvgHierarchyType.gotHeaderW + \"px\")\n            .html(function(d: any) {\n                let name = d.data.inheritedHierarchyCode != null ? that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue : that.hierarchyType.label.localizedValue;\n                // eslint-disable-next-line no-unused-expressions\n                calculateTextWidth(name, SvgHierarchyType.gotHeaderFontSize) > (SvgHierarchyType.gotHeaderW - 5) ? name = name.substring(0, 34) + \"...\" : true;\n                return name;\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // GeoObjectType Body Square\n        gtree.append(\"g\").classed(\"g-got\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-body-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"rx\", 3)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .each(function(d: any) {\n                if (d.data.geoObjectType !== \"GhostNode\") {\n                    if (d.data.activeDropZones) {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n                    } else {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                    }\n                }\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Arrows on Edges\n        const arrowRectD = { height: 7, width: 10 };\n        let gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n        gArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-rect\", true)\n            .attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n            .attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n        gArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3)) +\n                \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n            );\n\n        // Ghost Drop Zone (Sibling) Backer\n        gtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-backer-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"white\");\n\n        // Ghost Drop Zone (Sibling) Body Rectangle\n        gtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-body-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#6BA542\")\n            .attr(\"stroke-width\", \"1\")\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType);\n\n        // GeoObjectType label\n        gtree.append(\"g\").classed(\"g-got-codelabel\", true)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", SvgHierarchyType.gotBodyFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .classed(\"svg-got-label-text\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n            .attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n            .attr(\"height\", SvgHierarchyType.gotRectH - 4)\n            // .filter(function(d: any) {\n            //     return calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n            // })\n            // .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => d.data.label)\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        let headerg;\n        if (this.isPrimary) {\n            gtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n                .selectAll(\"text\")\n                .data(descends)\n                .join(\"text\")\n                .filter(function(d: any) {\n                    return (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n                })\n                .classed(\"svg-got-relatedhiers-button\", true)\n                .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n                .attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - (SvgHierarchyType.gotOptionsButtonFontSize) - 3)\n                .attr(\"y\", (d: any) => d.y + (SvgHierarchyType.gotOptionsButtonFontSize * 0.8) - SvgHierarchyType.gotOptionsButtonFontSize / 2)\n                .style(\"font-family\", \"FontAwesome\")\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", \"#767676\")\n                .style(\"font-size\", SvgHierarchyType.gotOptionsButtonFontSize + \"px\")\n                .text(\"\\uf013\")\n                .on(\"click\", function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n            headerg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n        } else {\n            headerg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n        }\n\n\n        // let paddingTop = (headerg.node().getBBox().height + 20);\n        // gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n    }\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a> \n          <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> \n          <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> \n          <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span>\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"data-page\",\n    templateUrl: \"./data-page.component.html\",\n    styleUrls: [\"./data-page.css\"]\n})\nexport class DataPageComponent implements OnInit {\n\n    content: string = \"SPREADSHEET\";\n    pageTitle: string;\n    bsModalRef: BsModalRef;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n    }\n\n    ngOnInit(): void {\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n\n        if (content === \"SPREADSHEET\") {\n            this.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n        } else if (content === \"SHAPEFILE\") {\n            this.pageTitle = this.localizationService.decode(\"shapefile.title\");\n        } else if (content === \"EXPORT\") {\n            this.pageTitle = this.localizationService.decode(\"io.export.title\");\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">\n                      <localize key=\"import-spreadsheet-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">\n                      <localize key=\"import-shapefile-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ViewChildren, ElementRef, QueryList, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from \"@shared/service\";\nimport { HierarchyService, IOService } from \"@registry/service\";\nimport { ExternalSystem } from \"@shared/model/core\";\n\nimport { SpreadsheetModalComponent } from \"./modals/spreadsheet-modal.component\";\nimport { ShapefileModalComponent } from \"./modals/shapefile-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"dataimporter\",\n    templateUrl: \"./dataimporter.component.html\",\n    styleUrls: [\"./dataimporter.css\"]\n})\nexport class DataImporterComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray:QueryList<DateFieldComponent>;\n\n    currentDate : Date = new Date();\n\n    showImportConfig: boolean = false;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Start date\n     */\n    startDate: Date = null;\n\n    /*\n     * End date\n     */\n    endDate: Date | string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string; // Can be SHAPEFILE or EXCEL\n\n    isExternal: boolean = false;\n\n    /*\n     * List of available external systems (filtered based on user's org)\n     */\n    externalSystems: ExternalSystem[];\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    isLoading: boolean = true;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService,\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private authService: AuthService,\n        private sysService: ExternalSystemService,\n        private hierarchyService: HierarchyService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) { }\n\n    ngOnInit(): void {\n        this.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n            this.externalSystems = paginatedSystems.resultSet;\n\n            if (this.externalSystems.length === 0) {\n                this.isExternal = false;\n                this.showImportConfig = true; // Show the upload widget if there are no external systems registered\n            }\n\n            this.isLoading = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = registry.contextPath + \"/excel/get-configuration\";\n        if (this.format === \"SHAPEFILE\") {\n            getUrl = registry.contextPath + \"/shapefile/get-shapefile-configuration\";\n\n            // this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n        }\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.typeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.startDate != null) {\n                form.append(\"startDate\", this.startDate);\n            }\n            if (this.endDate != null) {\n                form.append(\"endDate\", this.endDate);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.isExternal = this.isExternal;\n            configuration.hierarchy = this.hierarchyCode;\n\n            let externalSystem: ExternalSystem = null;\n            for (let i = 0; i < this.externalSystems.length; ++i) {\n                let sys: ExternalSystem = this.externalSystems[i];\n\n                if (sys.oid === this.externalSystemId) {\n                    externalSystem = sys;\n                }\n            }\n\n            configuration.externalSystemId = this.externalSystemId;\n            configuration.externalSystem = externalSystem;\n\n            if (this.format === \"SHAPEFILE\") {\n                this.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            } else {\n                this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            }\n\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n\n        this.checkDates();\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    setImportSource(event, type): void {\n        if (type === \"EXTERNAL\") {\n            this.isExternal = true;\n        } else {\n            this.isExternal = false;\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n//    setInfinity(endDate: any): void {\n//\n//        if(endDate === PRESENT){\n//            this.endDate = null;\n//        }\n//        else{\n//            this.endDate = PRESENT;\n//        }\n//    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = this.checkDateFieldValidity();\n        }, 0);\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        let startDateField: DateFieldComponent;\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n\n            if (field.inputName === \"startDate\") {\n                // set startDateField so we can use it in the next check\n                startDateField = field;\n            }\n\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        if (this.startDate > this.endDate) {\n            startDateField.setInvalid(this.localizationService.decode(\"date.input.startdate.after.enddate.error.message\"));\n\n            this.changeDetectorRef.detectChanges();\n        }\n\n        return true;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\" autocomplete=\"off\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                <label class=\"col-md-2 text-right\" for=\"hierarchyCode\"> <localize key=\"io.modal.hierarchy\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\" [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                        <option></option>\n                        <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>{{view.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\" (change)=\"onSelectType()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>{{type.super ? type.super.label + \" : \" + type.label : type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" (change)=\"checkDates()\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"startDate\" label=\"\" [inputName]=\"'startDate'\" (change)=\"checkDates()\" [allowFutureDates]=\"false\"></date-field>\n                </div>\n                \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"endDate\"><localize key=\"io.endDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"endDate\" label=\"\" [inputName]=\"'endDate'\" (change)=\"checkDates()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" ></date-field>\n                </div>\n                                      \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                \n                <label class=\"col-md-2 text-right\" for=\"copyBlank\"><localize key=\"dataimporter.importblankcells\"></localize></label>\n                <div class=\"col-md-8\">\n                   <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n<!--                     <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\"> -->\n<!--                         <localize key=\"io.back\"></localize> -->\n<!--                     </button> -->\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, ViewEncapsulation, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Location } from \"@angular/common\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\n\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { GeoObjectOverTime } from \"@registry/model/registry\";\n\nimport { ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { LocalizationService, AuthService, EventService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"request-table\",\n    templateUrl: \"./request-table.component.html\",\n    styleUrls: [\"./request-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class RequestTableComponent {\n\n    today: Date = new Date();\n    todayString: string = this.dateService.getDateString(new Date());\n\n    objectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    requests: ChangeRequest[] = [];\n\n    actions: AbstractAction[];\n\n    columns: any[] = [];\n\n    @Input() toggleId: string;\n\n    uploadRequest: ChangeRequest;\n\n    filterCriteria: string = \"ALL\";\n\n    sort: any[] = [{ attribute: \"createDate\", ascending: false }];\n\n    hasBaseDropZoneOver: boolean = false;\n\n    // Restrict page to the specified oid\n    oid: string = null;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    isValid: boolean = true;\n\n    isEditing: boolean = false;\n\n    constructor(private service: ChangeRequestService, private geomService: GeometryService, private modalService: BsModalService, private authService: AuthService, private localizationService: LocalizationService,\n        private eventService: EventService, private route: ActivatedRoute, private router: Router, private dateService: DateService, private location: Location) {\n        this.columns = [\n            { name: localizationService.decode(\"change.request.user\"), prop: \"createdBy\", sortable: false },\n            { name: localizationService.decode(\"change.request.createDate\"), prop: \"createDate\", sortable: false, width: 195 },\n            { name: localizationService.decode(\"change.request.status\"), prop: \"approvalStatus\", sortable: false }\n        ];\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.route.paramMap.subscribe(params => {\n            this.oid = params.get(\"oid\");\n            this.refresh();\n        });\n\n        if (this.oid != null) {\n            this.toggleId = this.oid;\n        }\n\n        let getUrl = registry.contextPath + \"/changerequest/upload-file-cr\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"crOid\", this.uploadRequest.oid);\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: any, status: number, headers: any) => {\n            const doc = JSON.parse(response);\n\n            const index = this.requests.findIndex(request => request.oid === doc.requestId);\n\n            if (index !== -1) {\n                this.requests[index].documents.push(doc);\n            }\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n\n        this.refresh();\n    }\n\n    isSorting(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].attribute === attribute;\n    }\n\n    isAscending(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].ascending;\n    }\n\n    onSort(attribute: string) {\n        let index = this.sort.findIndex(item => item.attribute === attribute);\n\n        if (index !== -1) {\n            let item = this.sort[index];\n\n            item.ascending = !item.ascending;\n        } else {\n            this.sort = [{\n                attribute: attribute,\n                ascending: true\n            }];\n        }\n\n        this.refresh();\n    }\n\n    getGOTLabel(action: any): string {\n        if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.displayLabel && action.geoObjectJson.attributes.displayLabel.values &&\n            action.geoObjectJson.attributes.displayLabel.values[0] && action.geoObjectJson.attributes.displayLabel.values[0].value && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues &&\n            action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0] && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value) {\n            return action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value;\n        } else if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.code) {\n            return action.geoObjectJson.attributes.code;\n        } else {\n            return this.localizationService.decode(\"geoObject.label\");\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    onUpload(request: ChangeRequest): void {\n        this.uploadRequest = request;\n\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onDownloadFile(request: ChangeRequest, fileOid: string): void {\n        window.location.href = registry.contextPath + \"/changerequest/download-file-cr?crOid=\" + request.oid + \"&\" + \"vfOid=\" + fileOid;\n    }\n\n    onDeleteFile(request: ChangeRequest, fileOid: string): void {\n        this.service.deleteFile(request.oid, fileOid).then(() => {\n            const index = request.documents.findIndex(doc => doc.oid === fileOid);\n\n            if (index !== -1) {\n                request.documents.splice(index, 1);\n            }\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    public fileOverBase(e: any): void {\n        this.hasBaseDropZoneOver = e;\n    }\n\n    pageChange(pageNumber: number = 1): void {\n        this.oid = null;\n        this.refresh(pageNumber);\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, pageNumber, this.filterCriteria, this.sort, this.oid).then(requests => {\n            this.page = requests;\n            this.requests = requests.resultSet;\n\n            // Copying the Geo-Object to add consistency for template processing\n            this.requests.forEach((req) => {\n                if (!req.current.geoObject) {\n                    for (let i = 0; i < req.actions.length; i++) {\n                        if (req.actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                            // This is the state of the Geo-Object as the Registry Contributor configured it.\n                            req.current.geoObject = JSON.parse(JSON.stringify((req.actions[0] as CreateGeoObjectAction).geoObjectJson));\n                        }\n                    }\n                }\n            });\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    onSelect(selected: any): void {\n        // this.request = selected.selected;\n\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, 1, \"ALL\", this.sort, this.oid).then(requests => {\n            this.requests = requests.resultSet;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.implementDecisions(changeRequest).then(request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n\n                const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true\n                });\n\n                bsModalRef.content.submitText = this.localizationService.decode(\"change.requests.more.geoobject.updates.submit.btn\");\n                bsModalRef.content.cancelText = this.localizationService.decode(\"change.requests.more.geoobject.updates.cancel.btn\");\n                bsModalRef.content.message = this.localizationService.decode(\"change.requests.more.geoobject.updates.message\");\n\n                bsModalRef.content.onConfirm.subscribe(() => {\n                    const object = this.getFirstGeoObjectInActions(request);\n\n                    if (object != null) {\n                        this.router.navigate([\"/registry/location-manager\"], {\n                            queryParams: { text: object.attributes.code, date: this.todayString, type: object.geoObjectType.code, code: object.attributes.code, uid: object.attributes.uid }\n                        });\n                        // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, object.geoObjectType.code, this.todayString, true]);\n                    } else {\n                        let object = request.current.geoObject;\n                        let type = request.current.geoObjectType;\n\n                        if (object != null && type != null) {\n                            this.router.navigate([\"/registry/location-manager\"], {\n                                queryParams: { text: object.attributes.code, date: this.todayString, type: type.code, code: object.attributes.code, uid: object.attributes.uid }\n                            });\n\n                            // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, type.code, this.todayString, true]);\n                        }\n                    }\n                });\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    onReject(cr: ChangeRequest): void {\n        this.service.rejectChangeRequest(cr).then(() => {\n            // TODO: Determine if there is a way to update an individual record\n            // TODO : cr.statusLabel needs to be updated...\n            /*\n            cr.approvalStatus = \"REJECTED\";\n     \n            let len = this.actions.length;\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n     \n                action.approvalStatus = \"REJECTED\";\n            }\n            */\n\n            this.refresh();\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    getFirstGeoObjectInActions(request: ChangeRequest): GeoObjectOverTime {\n        for (let i = 0; i < request.actions.length; i++) {\n            let action = request.actions[i];\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (action.hasOwnProperty(\"geoObjectJson\")) {\n                return action[\"geoObjectJson\"];\n            }\n        }\n\n        return null;\n    }\n\n    onDelete(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            bsModalRef.content.type = \"danger\";\n            bsModalRef.content.submitText = this.localizationService.decode(\"change.request.delete.request.confirm.btn\");\n            bsModalRef.content.message = this.localizationService.decode(\"change.request.delete.request.message\");\n\n            bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.delete(changeRequest.oid).then(deletedRequestId => {\n                    let pos = -1;\n                    for (let i = 0; i < this.requests.length; i++) {\n                        let req = this.requests[i];\n                        if (req.oid === deletedRequestId) {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > -1) {\n                        this.requests.splice(pos, 1);\n                    }\n\n                    this.refresh();\n                }).catch((response: HttpErrorResponse) => {\n                    this.error(response);\n                });\n            });\n        }\n    }\n\n    onUpdate(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.update(changeRequest).then(request => {\n                this.refresh();\n\n                this.isEditing = false;\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    applyActionStatusProperties(action: any): void {\n        // var action = JSON.parse(JSON.stringify(this.action));\n        // action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        this.service.setActionStatus(action.oid, action.approvalStatus).then(response => {\n            action.decisionMaker = (action.approvalStatus !== \"PENDING\") ? this.authService.getUsername() : \"\";\n\n            // this.crtable.refresh()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    requestTrackBy(index: number, request: ChangeRequest) {\n        return request.oid;\n    }\n\n    toggle(event: any, oid: string): void {\n        this.location.replaceState(\"/registry/change-requests/\" + oid);\n\n        if (!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")) {\n            if (this.toggleId === oid) {\n                this.toggleId = null;\n            } else {\n                this.toggleId = oid;\n                //                this.onSelect({ selected: [{ oid: oid }] });\n                this.requests.forEach(req => {\n                    if (req.oid === oid) {\n                        this.actions = req.actions;\n                    }\n                });\n            }\n        }\n    }\n\n    filter(criteria: string): void {\n        this.filterCriteria = criteria;\n\n        this.refresh(1);\n    }\n\n    setActionStatus(action: CreateGeoObjectAction | UpdateAttributeAction, status: string): void {\n        const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        bsModalRef.content.onConfirm.subscribe(data => {\n            action.approvalStatus = status;\n\n            this.applyActionStatusProperties(action);\n        });\n    }\n\n    getActiveDetailComponent(action: CreateGeoObjectAction | UpdateAttributeAction): any {\n        // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n        if (action.actionType.endsWith(\"CreateGeoObjectAction\") || action.actionType.endsWith(\"UpdateGeoObjectAction\")) {\n            // return this.cuDetail;\n        }\n        //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n        //   {\n        //     return this.arDetail;\n        //   }\n\n        return action;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    getUsername(): string {\n        return this.authService.getUsername();\n    }\n\n    isRequestTooOld(request: ChangeRequest): boolean {\n        if (request.actions && request.actions.length > 0) {\n            let firstAction = request.actions[0];\n\n            if (firstAction.actionType === ActionTypes.UPDATEGEOOBJECTACTION) {\n                return true;\n            } else if (firstAction.actionType === ActionTypes.CREATEGEOOBJECTACTION && !(firstAction as CreateGeoObjectAction).geoObjectJson.attributes[\"exists\"]) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    onEditAttributes(): void {\n        this.isEditing = !this.isEditing;\n    }\n\n    canEdit(request: ChangeRequest): boolean {\n        return (request.permissions.includes(\"WRITE_DETAILS\") && this.isEditing);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"form-group button-row\">\n\n      <a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" style=\"border-bottom: 1px solid;\" >\n        <localize key=\"change.request.all.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.pending.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.accepted.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PARTIAL')\" [ngClass]=\"filterCriteria === 'PARTIAL' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.partial.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.rejected.filter.link\"></localize>\n      </a>\n\n    </div>\n    <hr style=\"border-top:solid 3px #6BA542\" />\n\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <table class=\"table\">\n      <thead>\n        <tr style=\"height: 50px;color: grey;\">\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createdBy')\"><localize key=\"change.request.contributor.label\"></localize></a><i *ngIf=\"isSorting('createdBy')\" [ngClass]=\"isAscending('createdBy') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectTypeLabel')\"><localize key=\"geoObjectType.label\"></localize></a><i *ngIf=\"isSorting('geoObjectTypeLabel')\" [ngClass]=\"isAscending('geoObjectTypeLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectLabel')\"><localize key=\"geoObject.label\"></localize></a><i *ngIf=\"isSorting('geoObjectLabel')\" [ngClass]=\"isAscending('geoObjectLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createDate')\"><localize key=\"change.request.date.contributed.label\"></localize></a><i *ngIf=\"isSorting('createDate')\" [ngClass]=\"isAscending('createDate') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('approvalStatus')\"><localize key=\"change.request.status.label\"></localize></a><i *ngIf=\"isSorting('approvalStatus')\" [ngClass]=\"isAscending('approvalStatus') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('oid')\"><localize key=\"change.request.id.label\"></localize></a><i *ngIf=\"isSorting('oid')\" [ngClass]=\"isAscending('oid') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-template ngFor let-req [ngForOf]=\"requests | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" [ngForTrackBy]=\"requestTrackBy\">\n        \n          <tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n            <td class=\"col-md-1\">\n              <h5><strong>{{req.createdBy}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObjectType.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObject.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align: middle; color:grey;\">\n               <span class=\"date-string-display\">\n                  {{formatDate(req.createDate)}}\n               </span>\n            </td>\n            <td class=\"col-md-1\">\n              <h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-partial':req.approvalStatus === 'PARTIAL', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n                 <strong>{{req.statusLabel}}</strong>\n              </h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.oid}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:right;padding-right:25px;\">\n              <i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n            </td>\n          </tr>\n          \n          <!-- Action panel only shows when activated with click -->\n          <tr [@fadeInOut] *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\" [ngClass]=\"{'status-pending-container':req.approvalStatus === 'PENDING', 'status-accepted-container':req.approvalStatus === 'ACCEPTED', 'status-partial-container':req.approvalStatus === 'PARTIAL', 'status-rejected-container':req.approvalStatus === 'REJECTED'}\">\n            \n            <td colspan=\"7\">\n              <div class=\"geoobject-panel-header\">\n              \n                    <div>\n                        <h3 style=\"margin-top: 10px;\">{{req.geoObject.label}}</h3>\n                        <h4 style=\"font-style: italic;\">{{req.geoObject.code}}</h4>\n                        \n                        <h4 *ngIf=\"req.type === 'UpdateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.update.geoobject.label\"></localize></h4>\n                        <h4 *ngIf=\"req.type === 'CreateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.create.geoobject.label\"></localize></h4>\n                    </div>\n              </div>\n                  \n              <div class=\"row\" style=\"margin:0;background: white;\">\n                <!-- <div class=\"col-md-1\"></div> -->\n                <div class=\"col-md-12\">\n                \n                  <div *ngIf=\"!isRequestTooOld(req) && req.approvalStatus === 'INVALID'\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.invalid\"></localize>\n                  </div>\n                  <div *ngIf=\"isRequestTooOld(req)\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.tooOld\"></localize>\n                  </div>\n                \n                  <div *ngIf=\"req.permissions.includes('READ_CONTRIBUTOR_NOTES')\" class=\"form-group\" style=\"margin-top:20px;\">\n                     <label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n                     <textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;\" [(ngModel)]=\"req.contributorNotes\" [disabled]=\"!req.permissions.includes('WRITE_DETAILS')\"></textarea>\n                  </div>  \n                  \n                  <div>\n                    <p><localize key=\"change.request.contributor.prefix.label\"></localize>&nbsp;<strong>{{req.createdBy}}</strong></p>\n                    <p><localize key=\"change.request.contributor.email.prefix.label\"></localize>&nbsp;<strong>{{req.email}}</strong></p>\n                    <p><localize key=\"change.request.contributor.phone.prefix.label\"></localize>&nbsp;<strong>{{req.phoneNumber}}</strong></p>\n                  </div>\n  \n                  <div *ngIf=\"req.approvalStatus !== 'INVALID' && !isRequestTooOld(req)\" class=\"cr-details\">\n\t                  <div class=\"action-card\" style=\"margin-bottom:10px; background-color:white;\"> \n\t                    <div class=\"row\" style=\"background: white;\">\n\t                      <div class=\"col-md-12\">\n\t                      \n\t                         <geoobject-shared-attribute-editor *ngIf=\"req\"\n\t                              #attributeEditor\n\t                              [readOnly]=\"!canEdit(req)\"  \n\t                              [geoObjectType]=\"req.current.geoObjectType\"\n                                [postGeoObject]=\"req.type == 'UpdateGeoObject' ? req.current.geoObject : req.actions[0].geoObjectJson\" \n\t                              [changeRequest]=\"req\"\n\t                              [hierarchies]=\"req.type == 'UpdateGeoObject' ? req.current.hierarchies : req.actions[0].parentJson\"\n\t                              [isGeometryInlined]=\"true\"\n                                [isNew]=\"req.type === 'CreateGeoObject'\"\n                                (valid)=\"setValid($event)\">\n\t                         </geoobject-shared-attribute-editor>\n\t                         \n\t                       </div>\n\t                    </div>\n\t  \n\t                    <div class=\"row\" style=\"border-top: 1px grey solid;margin:0;padding: 10px 0;\">\n\t                      <div class=\"col-md-6\" >\n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                          <label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t                          <textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;margin:0\" [(ngModel)]=\"req.maintainerNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\"></textarea>\n\t                        </div>  \n\t                        \n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                              <label for=\"additionalNotes-{{req.oid}}\"> <localize key=\"change.request.action.detail.additionalNotes\"></localize> </label>\n\t                              <input type=\"text\" id=\"additionalNotes-{{req.oid}}\" class=\"form-control\" style=\"width:100%;\" [(ngModel)]=\"req.additionalNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\">\n\t                        </div>  \n\t                      </div>\n\t                      \n\t                      <div class=\"col-md-6\" >\n\t                        <div>\n\t                          <label><localize key=\"change.request.reference.documents.label\"></localize></label>\n\t                          <div *ngIf=\"req.documents.length > 0\" style=\"border:1px solid #ccc;border-radius: 4px;\">\n\t                            <ul style=\"padding:10px;margin:0;\">\n\t                                <li *ngFor=\"let doc of req.documents\" class=\"list-group-item\" style=\"padding:0;font-size:inherit;\">\n\t                                  <a (click)=\"onDownloadFile(req, doc.oid)\" >{{doc.fileName}}</a>\n\t                                  <i (click)=\"onDeleteFile(req, doc.oid)\" class=\"fa fa-times ico-remove\" style=\"margin-left:10px;\" aria-hidden=\"true\"></i>\n\t                                </li>\n\t                            </ul>\n\t                          </div>\n\t                          <p *ngIf=\"req.documents.length === 0\" style=\"color:grey;font-style:italic;\">\n\t                            <localize key=\"change.request.no.documents.label\"></localize>\n\t                          </p>\n\t                        \n\t                          <div *ngIf=\"req.permissions.includes('WRITE_DOCUMENTS') && isEditing\" style=\"padding:10px 0;\">\n\t                              <!-- Limit file types with: accept=\".xls, .xlsx, .pdf, .doc\" -->\n\t                              <input class=\"ghost-input\" style=\"display:inline-block;padding:0;height:auto;border-radius:0;margin-top:10px;\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" required />\n\t                              \n\t                              <button class=\"btn btn-primary pull-right\" style=\"margin:0;\" (click)=\"onUpload(req)\" [title]=\"'change.request.upload.document.btn.hover' | localize\">\n\t                                <localize key=\"change.request.reference.document.upload\"></localize>\n\t                              </button>\n\t                          </div>\n\t                        </div>\n\t  \n\t                      </div>\n\t                    </div>\n\t                  </div> \n\t  \n\t  \n\t                  <div *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS') || req.permissions.includes('DELETE')\" class=\"button-holder\" style=\"margin-bottom:20px;min-height:40px;\">\n\t                    <span *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS')\">\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\" [title]=\"'change.request.implement.decisions.btn.hover' | localize\">\n\t                        <localize [key]=\"req.type === 'UpdateGeoObject' ? 'change.request.accept.changes.btn' : 'change.request.accept.newGeoObject.btn'\"></localize>\n\t                      </button>\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" *ngIf=\"req.type === 'CreateGeoObject'\" type=\"submit\" (click)=\"onReject(req)\" class=\"btn btn-danger\" style=\"margin:0 10px;\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\">\n                            <localize key=\"change.request.reject.all.btn\"></localize>\n                          </button>\n\t                    </span>\n\n                        <span *ngIf=\"isValid && req.permissions.includes('WRITE_DETAILS') && req.createdBy === getUsername()\">\n                          <button type=\"submit\" *ngIf=\"!isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                          </button>\n                          <button type=\"submit\" *ngIf=\"isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                          </button>\n                          <button type=\"submit\" role=\"button\" class=\"btn btn-primary\" *ngIf=\"isEditing\" (click)=\"onUpdate(req)\" [title]=\"'modal.button.update' | localize\" >\n                            <localize key=\"modal.button.update\"></localize>\n                          </button>\n                          \n                          <button type=\"submit\" role=\"button\" class=\"btn btn-danger pull-right\" [disabled]=\"!isEditing\" *ngIf=\"req.permissions.includes('DELETE') && req.createdBy === getUsername()\" (click)=\"onDelete(req)\" [title]=\"'change.request.delete.request.hover' | localize\" >\n                            <localize key=\"change.request.delete.request.btn\"></localize>\n                          </button>\n                        </span>\n\t                  </div>\n                  </div>\n                </div>\n                <!-- <div class=\"col-md-1\"></div> -->\n              </div>\n  \n            </td>\n          </tr> <!-- END Action panel -->\n          \n        </ng-template>\n      </tbody>\n    </table>\n    <div class=\"solid-table-footer\">\n\t    <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n        <pagination-controls (pageChange)=\"pageChange($event)\"></pagination-controls>\n\t    </div>\n    </div>\n  </div>   \n</div>\n","import { ActionTypes, ChangeType } from \"@registry/model/constants\";\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeOverTimeAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectType, HierarchyOverTime, HierarchyOverTimeEntry, ValueOverTime } from \"@registry/model/registry\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { v4 as uuid } from \"uuid\";\nimport { GeometryService } from \"@registry/service\";\nimport { Subject } from \"rxjs\";\n\nexport class ChangeRequestChangeOverTimeAttributeEditor {\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    attribute: AttributeType;\n\n    editAction: AbstractAction;\n\n    hierarchy: HierarchyOverTime;\n\n    editors: ValueOverTimeCREditor[];\n\n    private _isValid: boolean;\n\n    onChangeSubject: Subject<any> = new Subject<any>();\n\n    constructor(changeRequestEditor: ChangeRequestEditor, attribute: AttributeType, hierarchy: HierarchyOverTime) {\n        this.changeRequestEditor = changeRequestEditor;\n        this.attribute = attribute;\n        this.hierarchy = hierarchy;\n\n        this.getEditAction();\n\n        if (hierarchy != null) {\n            for (let j = 0; j < this.hierarchy.entries.length; j++) {\n                let hierarchyEntry = this.hierarchy.entries[j];\n\n                if (hierarchyEntry.parents == null) {\n                    hierarchyEntry.parents = {};\n                }\n                if (hierarchyEntry.loading == null) {\n                    hierarchyEntry.loading = {};\n                }\n\n                for (let i = 0; i < this.hierarchy.types.length; i++) {\n                    let current = this.hierarchy.types[i];\n\n                    if (hierarchyEntry.parents[current.code] == null) {\n                        hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n                    }\n                }\n            }\n        }\n\n        this.editors = this.generateEditors();\n    }\n\n    getEditAction() {\n        if (this.editAction == null) {\n            let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n            if (actions.length === 0) {\n                this.editAction = new UpdateAttributeOverTimeAction(this.attribute.code);\n\n                if (this.attribute.code === \"_PARENT_\") {\n                    (this.editAction as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchy.code;\n                }\n            } else {\n                this.editAction = actions[actions.length - 1];\n            }\n        }\n\n        return this.editAction;\n    }\n\n    onChange(type: ChangeType) {\n        // If our attribute action has changes it needs to be added to the ChangeRequest actions. Otherwise we can remove it.\n        let hasChanges: boolean = this.hasChanges();\n\n        let index = this.changeRequestEditor.changeRequest.actions.findIndex(action => this.editAction === action);\n\n        if (index !== -1 && !hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.splice(index, 1);\n        } else if (index === -1 && hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.push(this.editAction);\n        }\n\n        this.validate();\n\n        this.onChangeSubject.next(type);\n        this.changeRequestEditor.onChange(type);\n    }\n\n    hasChanges(): boolean {\n        let hasChanges: boolean = true;\n\n        if (this.editAction.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n            let updateAction: UpdateAttributeOverTimeAction = this.editAction as UpdateAttributeOverTimeAction;\n\n            if (updateAction.attributeDiff.valuesOverTime.length === 0) {\n                hasChanges = false;\n            }\n        }\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(skipExists: boolean = false): boolean {\n        let validEditors = this.validateEditors();\n        let hasTimeConflict = this.changeRequestEditor.dateService.checkRanges(this.attribute, this.editors);\n\n        let hasExistConflict = false;\n        if (this.attribute.code !== \"exists\") {\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existEditors = (this.changeRequestEditor.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n            hasExistConflict = this.changeRequestEditor.dateService.checkExistRanges(this.editors, existEditors);\n        } else if (!skipExists) {\n            this.changeRequestEditor.validate(true); // If the exists attribute has changed we must revalidate all other attributes\n        }\n\n        this._isValid = validEditors && !hasTimeConflict && !hasExistConflict;\n\n        return this._isValid;\n    }\n\n    private validateEditors(): boolean {\n        let valid: boolean = true;\n\n        this.editors.forEach(editor => {\n            if (!editor.validate()) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditors(includeUnmodified: boolean = true): ValueOverTimeCREditor[] {\n        return this.editors.filter(editor => includeUnmodified || editor.diff != null);\n    }\n\n    generateEditors(): ValueOverTimeCREditor[] {\n        let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n        let editors: ValueOverTimeCREditor[] = [];\n\n        // First, we have to create a view for every ValueOverTime object. This is done to simply display what's currently\n        // on the GeoObject\n        if (this.attribute.code === \"_PARENT_\") {\n            this.hierarchy.entries.forEach((entry: HierarchyOverTimeEntry) => {\n                let editor = new HierarchyCREditor(this, this.attribute, this.editAction, entry, this.hierarchy);\n\n                editors.push(editor);\n            });\n        } else {\n            if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n                this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.forEach((vot: ValueOverTime) => {\n                    let editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n\n                    editor.valueOverTime = vot;\n\n                    editors.push(editor);\n                });\n            }\n        }\n\n        // Next, we must apply all changes which may exist in the actions.\n        if (this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            let len = actions.length;\n            for (let i = 0; i < len; ++i) {\n                let updateAttrAction: UpdateAttributeOverTimeAction = actions[i] as UpdateAttributeOverTimeAction;\n\n                updateAttrAction.attributeDiff.valuesOverTime.forEach((votDiff: ValueOverTimeDiff) => {\n                    let index = editors.findIndex(editor => editor.oid === votDiff.oid);\n                    let editor = (index === -1) ? null : editors[index];\n\n                    if (editor == null) {\n                        if (this.attribute.code === \"_PARENT_\") {\n                            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n                        } else {\n                            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n                        }\n\n                        editor.diff = votDiff;\n\n                        editors.push(editor);\n                    } else {\n                        editor.diff = votDiff;\n\n                        if (this.attribute.code === \"_PARENT_\") {\n                            (editor as HierarchyCREditor).hierarchyEntry.parents = votDiff.parents;\n                        }\n                    }\n                });\n            }\n        }\n\n        return editors;\n    }\n\n    public createNewVersion(original?: ValueOverTimeCREditor): ValueOverTimeCREditor {\n        let editor: ValueOverTimeCREditor;\n\n        // Create an instance of the appropriate editor object\n        if (this.attribute.code === \"_PARENT_\") {\n            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n        } else {\n            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n        }\n\n        // If we're creating a new GeoObject, add it to that GeoObject\n        if (this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            if (this.attribute.code === \"_PARENT_\") {\n                (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n                (editor as HierarchyCREditor).hierarchyOverTime.entries.push((editor as HierarchyCREditor).hierarchyEntry);\n            } else {\n                let vot = new ValueOverTime();\n                vot.oid = uuid();\n\n                (this.editAction as CreateGeoObjectAction).geoObjectJson.attributes[this.attribute.code].values.push(vot);\n\n                editor.valueOverTime = vot;\n            }\n        } else {\n            editor.constructNewDiff(\"CREATE\");\n        }\n\n        // Set any default values\n        if (this.attribute.type === \"local\") {\n            editor.value = this.changeRequestEditor.localizationService.create();\n        } else if (this.attribute.type === \"geometry\") {\n            let editors = this.getEditors(true);\n\n            if (editors.length > 0) {\n\n                if (original != null) {\n                    editor.value = JSON.parse(JSON.stringify(original.value));\n                }\n                else {\n                    editor.value = JSON.parse(JSON.stringify(editors[editors.length - 1].value));\n                }\n            } else {\n                editor.value = GeometryService.createEmptyGeometryValue(this.changeRequestEditor.geoObjectType.geometryType);\n            }\n        } else if (this.attribute.type === \"term\") {\n            let terms = GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.changeRequestEditor.geoObjectType, this.attribute.code);\n\n            if (terms && terms.length > 0) {\n                editor.value = terms[0].code;\n            }\n        } else if (this.attribute.code === \"_PARENT_\" && this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n        } else if (this.attribute.code !== \"_PARENT_\") {\n            editor.value = null;\n        }\n\n        this.editors.push(editor);\n\n        this.onChange(ChangeType.ADD);\n\n        return editor;\n    }\n\n    public remove(editor: ValueOverTimeCREditor) {\n        if ((editor.diff != null && editor.diff.action === \"CREATE\") || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            let index = this.editors.findIndex(find => find.oid === editor.oid);\n\n            if (index !== -1) {\n                this.editors.splice(index, 1);\n            }\n        }\n\n        editor.remove();\n\n        this.validate();\n    }\n\n}\n","import { ValueOverTime, AttributeType, TimeRangeEntry, ConflictMessage } from \"@registry/model/registry\";\nimport { CreateGeoObjectAction, UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GeometryService } from \"@registry/service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { Subject } from \"rxjs\";\nimport { ChangeType, ConflictType } from \"@registry/model/constants\";\n\nexport class ValueOverTimeCREditor implements TimeRangeEntry {\n\n    diff?: ValueOverTimeDiff; // Any existing diff which may be associated with this object.\n    valueOverTime?: ValueOverTime; // Represents a vot on an existing GeoObject. If this is set and the action is UpdateAttribute, we must be doing an UPDATE, and valueOverTime represents the original value in the DB.\n    action: AbstractAction;\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n    attr: AttributeType;\n    conflictMessages: Set<ConflictMessage>;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    _isValid: boolean = true;\n\n    constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction) {\n        this.attr = attr;\n        this.changeRequestAttributeEditor = changeRequestAttributeEditor;\n        this.action = action;\n    }\n\n    onChange(type: ChangeType) {\n        this.changeRequestAttributeEditor.onChange(type);\n        this.onChangeSubject.next(type);\n    }\n\n    getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n        return this.valueOverTime;\n    }\n\n    getValueFromGeoObjectForDiff(): any {\n        return this.valueOverTime.value;\n    }\n\n    validate(): boolean {\n        if (!this.conflictMessages) {\n            this.conflictMessages = new Set();\n        }\n\n        let dateService = this.changeRequestAttributeEditor.changeRequestEditor.dateService;\n        let start = dateService.validateDate(this.startDate == null ? null : dateService.getDateFromDateString(this.startDate), true, true);\n        let end = dateService.validateDate(this.endDate == null ? null : dateService.getDateFromDateString(this.endDate), true, true);\n        this._isValid = true;\n\n        if (!start.valid || !end.valid) {\n            this._isValid = false;\n        }\n\n        this.validateUpdateReference();\n\n        return this._isValid;\n    }\n\n    /**\n     * If we're referencing an existing value over time, that object should exist on our GeoObject (which represents the current state of the database)\n     */\n    validateUpdateReference() {\n        let missingReference = this.changeRequestAttributeEditor.changeRequestEditor.dateService.missingReference;\n\n        this.conflictMessages.delete(missingReference);\n\n        if (this.changeRequestAttributeEditor.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\" && this.diff != null && this.diff.action !== \"CREATE\") {\n            let existingVot = this.findExistingValueOverTimeByOid(this.diff.oid, this.attr.code);\n\n            if (existingVot == null) {\n                this._isValid = false;\n\n                this.conflictMessages.add(missingReference);\n            }\n        }\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    set oid(oid: string) {\n        if (this.diff != null) {\n            this.diff.oid = oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            this.getGeoObjectTimeRangeStorage().oid = oid;\n        }\n    }\n\n    get oid(): string {\n        if (this.diff != null) {\n            return this.diff.oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().oid;\n        }\n\n        return null;\n    }\n\n    get startDate(): string {\n        return this.getStartDate();\n    }\n\n    public getStartDate(): string {\n        if (this.diff != null && this.diff.newStartDate !== undefined) {\n            return this.diff.newStartDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldStartDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().startDate;\n        }\n\n        return null;\n    }\n\n    constructNewDiff(action: string): void {\n        this.diff = new ValueOverTimeDiff();\n        this.diff.action = action;\n        (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n\n        if (action === \"CREATE\") {\n            this.diff.oid = uuid();\n        } else {\n            let goRange = this.getGeoObjectTimeRangeStorage();\n\n            this.diff.oid = goRange.oid;\n            this.diff.oldStartDate = goRange.startDate;\n            this.diff.oldEndDate = goRange.endDate;\n        }\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        if (this.diff != null) {\n            this.diff.oldStartDate = oldStartDate;\n        }\n    }\n\n    get oldStartDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldStartDate;\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        return this.getEndDate();\n    }\n\n    public getEndDate(): string {\n        if (this.diff != null && this.diff.newEndDate !== undefined) {\n            return this.diff.newEndDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldEndDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().endDate;\n        }\n\n        return null;\n    }\n\n    set startDate(startDate: string) {\n        this.setStartDate(startDate);\n    }\n\n    public setStartDate(startDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.startDate === startDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (startDate === this.diff.oldStartDate) {\n                delete this.diff.newStartDate;\n            } else {\n                this.diff.newStartDate = startDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.startDate = startDate;\n        }\n\n        this.onChange(ChangeType.START_DATE);\n    }\n\n    set endDate(endDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (goRange == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.endDate === endDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (endDate === this.diff.oldEndDate) {\n                delete this.diff.newEndDate;\n            } else {\n                this.diff.newEndDate = endDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.endDate = endDate;\n        }\n\n        this.onChange(ChangeType.END_DATE);\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        if (this.diff != null) {\n            this.diff.oldEndDate = oldEndDate;\n        }\n    }\n\n    get oldEndDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldEndDate;\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        if (this.diff != null && this.diff.newValue !== undefined) {\n            return this.diff.newValue;\n        } else if (this.diff != null && this.diff.oldValue !== undefined) {\n            return this.diff.oldValue;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().value;\n        }\n\n        return null;\n    }\n\n    set value(value: any) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        if (value != null) {\n            if (this.attr.type === \"term\") {\n                value = [value];\n            } else if (this.attr.type === \"date\") {\n                value = new Date(value).getTime();\n            } else if (this.attr.type === \"geometry\") {\n                // Limit max precision for point geometries\n                let maxCoordinatePrecision = 6;\n\n                if (value.type === \"MultiPoint\") {\n                    for (let i = 0; i < value.coordinates.length; ++i) {\n                        let coordinate: number[] = value.coordinates[i];\n\n                        coordinate[0] = Number.parseFloat(coordinate[0].toFixed(maxCoordinatePrecision));\n                        coordinate[1] = Number.parseFloat(coordinate[1].toFixed(maxCoordinatePrecision));\n                    }\n                } else if (value.type === \"Point\") {\n                    value.coordinates = [Number.parseFloat(value.coordinates[0].toFixed(maxCoordinatePrecision)), Number.parseFloat(value.coordinates[1].toFixed(maxCoordinatePrecision))];\n                }\n            }\n        } else if (value == null) {\n            if (this.attr.type === \"geometry\") {\n                value = GeometryService.createEmptyGeometryValue(this.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType);\n            } else if (this.attr.type === \"character\") {\n                value = \"\";\n            }\n        }\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.oid = uuid();\n                    this.diff.action = \"CREATE\";\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                } else {\n                    if (this.areValuesEqual(this.valueOverTime.value, value)) {\n                        return;\n                    }\n\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.action = \"UPDATE\";\n                    this.diff.oid = this.getGeoObjectTimeRangeStorage().oid;\n                    this.diff.oldValue = this.valueOverTime.value;\n                    this.diff.oldStartDate = this.getGeoObjectTimeRangeStorage().startDate;\n                    this.diff.oldEndDate = this.getGeoObjectTimeRangeStorage().endDate;\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                }\n            }\n\n            if (this.diff.action !== \"CREATE\" && this.areValuesEqual(this.diff.oldValue, value)) {\n                delete this.diff.newValue;\n            } else {\n                this.diff.newValue = JSON.parse(JSON.stringify(value));\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            this.valueOverTime.value = value;\n        }\n\n        this.onChange(ChangeType.VALUE);\n    }\n\n    set oldValue(oldValue: any) {\n        if (this.diff != null) {\n            this.diff.oldValue = oldValue;\n        }\n    }\n\n    get oldValue(): any {\n        if (this.diff != null) {\n            return this.diff.oldValue;\n        }\n\n        return null;\n    }\n\n    public setLocalizedValue(localizedValue: LocalizedValue) {\n        this.value = JSON.parse(JSON.stringify(localizedValue));\n    }\n\n    removeEmptyDiff(): void {\n        if (this.diff != null && this.diff.newValue === undefined && this.diff.newStartDate === undefined && this.diff.newEndDate === undefined) {\n            const diffs = (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime;\n\n            const index = diffs.findIndex(d => d.oid === this.diff.oid);\n\n            if (index !== -1) {\n                diffs.splice(index, 1);\n            }\n\n            this.diff = null;\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attr.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (this.attr.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (this.attr.type === \"geometry\") {\n            return turf_booleanequal(val1, val2);\n        } else if (this.attr.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (this.attr.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return val1 === val2;\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public remove(): void {\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff != null && this.diff.action === \"CREATE\") {\n                // Its a new entry, just remove the diff from the diff array\n                let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n                const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n                if (index > -1) {\n                    updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n                }\n            } else if (this.diff != null) {\n                delete this.diff.newValue;\n                delete this.diff.newStartDate;\n                delete this.diff.newEndDate;\n                this.removeEmptyDiff();\n                this.onChange(ChangeType.REMOVE);\n                return;\n            } else if (this.valueOverTime != null && this.diff == null) {\n                this.diff = new ValueOverTimeDiff();\n                this.diff.action = \"DELETE\";\n                this.diff.oid = this.valueOverTime.oid;\n                this.diff.oldValue = this.valueOverTime.value;\n                this.diff.oldStartDate = this.valueOverTime.startDate;\n                this.diff.oldEndDate = this.valueOverTime.endDate;\n                (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n            }\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            let votc = (this.action as CreateGeoObjectAction).geoObjectJson.attributes[this.attr.code].values;\n\n            let index = votc.findIndex((vot) => { return vot.oid === this.valueOverTime.oid; });\n\n            if (index !== -1) {\n                votc.splice(index, 1);\n            }\n        }\n\n        this.onChange(ChangeType.REMOVE);\n    }\n\n    public isDelete() {\n        return this.diff != null && this.diff.action === \"DELETE\";\n    }\n\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    SimpleChanges\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GovernanceStatus, LayerColor } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { VersionDiffView, Layer } from \"./manage-versions-model\";\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { Observable, Observer } from \"rxjs\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\n\n@Component({\n    selector: \"manage-versions\",\n    templateUrl: \"./manage-versions.component.html\",\n    styleUrls: [\"./manage-versions.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class ManageVersionsComponent implements OnInit {\n\n    // height (as number) in pixels\n    mapRowHeight: number;\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    message: string = null;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() isGeometryInlined: boolean = false;\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() hierarchy: HierarchyOverTime = null;\n\n    @Input() filterDate: string = null;\n\n    @Input() showAllInstances: boolean = true;\n\n    viewModels: VersionDiffView[] = [];\n\n    isRootOfHierarchy: boolean = false;\n\n    isInitialized: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public geomService: GeometryService, public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, this.hierarchy) as ChangeRequestChangeOverTimeAttributeEditor;\n\n        this.calculateViewModels();\n        this.isRootOfHierarchy = this.attributeType.type === \"_PARENT_\" && (this.hierarchy == null || this.hierarchy.types == null || this.hierarchy.types.length === 0);\n        this.isInitialized = true;\n    }\n\n    ngAfterViewInit() {\n        if (this.isNew && this.attributeType.code === \"exists\" && this.viewModels.length === 0) {\n            this.onAddNewVersion();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isInitialized && changes.showAllInstances && changes.showAllInstances.previousValue !== changes.showAllInstances.currentValue) {\n            this.calculateViewModels();\n        }\n    }\n\n    setFilterDate(filterDate: string, refresh: boolean = true): void {\n        this.filterDate = filterDate;\n        if (refresh) {\n            this.calculateViewModels();\n        }\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasLocalizationChanged(viewModel: VersionDiffView, locale: string): boolean {\n        return viewModel.editor.oldValue != null && this.getValueAtLocale(viewModel.editor.oldValue, locale) !== this.getValueAtLocale(viewModel.editor.value, locale);\n    }\n\n    onDateChange(): any {\n        setTimeout(() => {\n            this.isValid = this.changeRequestAttributeEditor.validate() && this.checkDateFieldValidity();\n\n            this.isValidChange.emit(this.isValid);\n        }, 0);\n    }\n\n    remove(view: VersionDiffView): void {\n        if (this.geomService.isEditing()) {\n            this.geomService.stopEditing();\n        }\n\n        this.changeRequestAttributeEditor.remove(view.editor);\n\n        if (view.summaryKey === SummaryKey.NEW || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            const index = this.viewModels.findIndex(v => v.editor.oid === view.editor.oid);\n\n            if (index > -1) {\n                this.viewModels.splice(index, 1);\n            }\n        }\n\n        if (this.attributeType.type === \"geometry\") {\n            this.geomService.reload();\n        }\n    }\n\n    onAddNewVersion(original?: ValueOverTimeCREditor): void {\n        let editor = this.changeRequestAttributeEditor.createNewVersion(original);\n\n        if (this.isNew && this.changeRequestEditor.geoObject.attributes[\"exists\"]) {\n            let values = this.changeRequestEditor.geoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                editor.startDate = value.startDate;\n                editor.endDate = value.endDate;\n            }\n        }\n\n        this.viewModels.push(new VersionDiffView(this, editor));\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return lv == null ? null : new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    calculateViewModels(): void {\n        let viewModels: VersionDiffView[] = [];\n\n        let editors = this.changeRequestAttributeEditor.getEditors(this.showAllInstances);\n        editors.forEach((editor: ValueOverTimeCREditor) => {\n            if (this.filterDate == null || this.dateService.between(this.filterDate, editor.startDate, editor.endDate)) {\n                let view = new VersionDiffView(this, editor);\n                viewModels.push(view);\n            }\n        });\n\n        this.viewModels = viewModels;\n    }\n\n    onApprove(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.PENDING).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    /**\n     * Hierarchy Editing\n     */\n\n    getTypeAheadObservable(editor: HierarchyCREditor, startDate: string, endDate: string, type: any, entry: any, index: number): Observable<any> {\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let parentTypeCode = null;\n        let hierarchyCode = null;\n\n        if (index > 0) {\n            let pType = editor.changeRequestAttributeEditor.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n                parentTypeCode = parent.geoObject.properties.type;\n            }\n        }\n\n        return new Observable((observer: Observer<Object>) => {\n            if (parentCode == null) {\n                let loopI = index;\n\n                while (parentCode == null && loopI > 0) {\n                    loopI = loopI - 1;\n\n                    let parent = entry.parents[editor.changeRequestAttributeEditor.hierarchy.types[loopI].code];\n\n                    if (parent != null) {\n                        if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                            parentCode = parent.geoObject.properties.code;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        } else if (parent.goCode != null) {\n                            parentCode = parent.goCode;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        }\n                    }\n                }\n            }\n\n            this.service.getGeoObjectSuggestions(entry.parents[type.code].text, geoObjectTypeCode, parentCode, parentTypeCode, hierarchyCode, startDate, endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(editor: HierarchyCREditor, e: TypeaheadMatch, type: any, entry: any, date: string): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        entry.parents[type.code].text = e.item.name + \" : \" + e.item.code;\n        entry.parents[type.code].goCode = e.item.code;\n\n        let parentTypes = [];\n\n        for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n            let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n\n            parentTypes.push(current.code);\n\n            if (current.code === type.code) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects(e.item.uid, type.code, parentTypes, true, date).then(ancestors => {\n            // First filter the response for ancestors of only the correct hierarchy\n            ancestors.parents = ancestors.parents.filter(p => p.hierarchyType === editor.changeRequestAttributeEditor.hierarchy.code);\n\n            delete entry.parents[type.code].goCode;\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestors.geoObject.properties.code;\n\n            for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n                let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while (ancestor != null && ancestor.geoObject.properties.type !== current.code) {\n                    if (ancestor.parents.length > 0) {\n                        ancestor = ancestor.parents[0];\n                    } else {\n                        ancestor = null;\n                    }\n                }\n\n                if (ancestor != null) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestor.geoObject.properties.code;\n                }\n            }\n\n            editor.setParentValue(type, entry.parents);\n        });\n    }\n\n    /**\n     * GEOMETRY EDITING\n     */\n\n    toggleGeometryEditing(view: VersionDiffView) {\n        this.geomService.setEditing(!view.newLayer.isEditing, view.newLayer);\n\n        if (this.geoObjectType.geometryType === \"POINT\" || this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            view.coordinate = {};\n        }\n    }\n\n    toggleGeometryView(view: VersionDiffView) {\n        // Using setTimeout() to pull the calc out of the animation stack so the dom can finish mutating before getting final height.\n        setTimeout(() => {\n            this.mapRowHeight = this.elementRef.nativeElement.children[0].getElementsByClassName(\"attribute-element-wrapper\")[0].offsetHeight;\n        }, 0);\n\n        let layer: Layer = this.getOrCreateLayer(view, \"NEW\");\n\n        if (layer.isEditing) {\n            this.geomService.stopEditing();\n        }\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    toggleOldGeometryView(view: VersionDiffView) {\n        let layer: Layer = this.getOrCreateLayer(view, \"OLD\");\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    getOrCreateLayer(view: VersionDiffView, context: string): Layer {\n        if (context === \"NEW\") {\n            if (view.newLayer != null) {\n                return view.newLayer;\n            }\n\n            view.newLayer = new Layer();\n            view.newLayer.oid = \"NEW_\" + view.editor.oid;\n            view.newLayer.isEditing = false;\n            view.newLayer.isRendering = false;\n            view.newLayer.zindex = 1;\n            view.newLayer.color = LayerColor.NEW;\n            view.newLayer.geojson = view.editor.value;\n            view.newLayer.editPropagator = view.editor;\n\n            return view.newLayer;\n        } else {\n            if (view.oldLayer != null) {\n                return view.oldLayer;\n            }\n\n            view.oldLayer = new Layer();\n            view.oldLayer.oid = \"OLD_\" + view.editor.oid;\n            view.oldLayer.isEditing = false;\n            view.oldLayer.isRendering = false;\n            view.oldLayer.zindex = 0;\n            view.oldLayer.color = LayerColor.OLD;\n            view.oldLayer.geojson = view.editor.oldValue;\n            view.oldLayer.editPropagator = null;\n\n            return view.oldLayer;\n        }\n    }\n\n    manualCoordinateChange(view: VersionDiffView): void {\n        if (view.newCoordinateX || view.newCoordinateY) {\n            let newX = view.newCoordinateX;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newX = view.value.coordinates[0];\n            }\n            let newY = view.newCoordinateY;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newY = view.value.coordinates[1];\n            }\n            view.value.coordinates = [[newX || 0, newY || 0]];\n            delete view.newCoordinateX;\n            delete view.newCoordinateY;\n            return;\n        }\n\n        const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n        const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n        view.coordinate.latValid = isLatitude(view.value.coordinates[0][1]);\n        view.coordinate.longValid = isLongitude(view.value.coordinates[0][0]);\n\n        if (!view.coordinate.latValid || !view.coordinate.longValid) {\n            // outside EPSG bounds\n            this.isValid = false;\n            this.isValidChange.emit(this.isValid);\n            return;\n        }\n\n        this.geomService.setPointCoordinates(view.value.coordinates[0][1], view.value.coordinates[0][0]);\n    }\n\n}\n","<div>\n  <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n  </ng-template>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form name=\"manage-versions-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div [ngStyle]=\"{'width' : (isGeometryInlined && geomService.getRenderedLayers().length > 0) ? '45%' : '100%'}\" style=\"display:inline-block;\" class=\"col\">\n          <div *ngIf=\"changeRequestEditor.geoObject\" class=\"attribute-version-wrapper\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                <div *ngIf=\"attributeType\">\n                  <table class=\"table table-striped\">\n                    <tbody class=\"attribute-element-wrapper\" >\n                      <p class=\"message\" *ngIf=\"!isRootOfHierarchy && viewModels.length === 0\">\n                        <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize> \n                      </p>\n                      <div *ngIf=\"isRootOfHierarchy\">\n                        <localize key=\"changeovertime.manageVersions.rootOfHierarchy.message\"></localize>\n                      </div>\n                      \n                      <ng-container *ngIf=\"!isRootOfHierarchy\">\n                        <!-- TODO : Fade in out disabled because it doesn't work all that well with stability periods   @fadeInOut -->\n                        <tr  *ngFor=\"let viewModel of viewModels; let i = index;\" class=\"version-row\"\n                            [ngClass]=\"{ 'geometry-edit-active' : (viewModel.newLayer && viewModel.newLayer.isEditing) }\">\n                            <td class=\"version-column-wrapper\" [ngClass]=\"{'error-border': viewModel.hasError(),\n                            'warning-border': viewModel.hasWarning(),\n                            'warning' : viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'}\" >\n                            <div *ngIf=\"viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'\" class=\"version-column-indicator\">\n                                {{viewModel.summaryKeyLocalized}}\n                              </div>\n                            \n                            <table>\n                            \n                              <!-- \n                                Local Type \n                              -->\n                              <ng-container *ngIf=\"attributeType.type === 'local' && viewModel.value\">\n                               <tr *ngFor=\"let loc of viewModel.value.localeValues; let idx = index;\" class=\"attribute-value-row\">\n                                 <td colspan=\"2\">\n                                   <h5><convert-key-label [key]=\"loc.locale\"></convert-key-label></h5>\n                                   \n                                   <input [ngClass]=\"{'has-changed': (hasLocalizationChanged(viewModel, loc.locale) && !isNew)}\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"viewModel.editor.setLocalizedValue(viewModel.value)\" [required]=\"loc.locale === 'defaultLocale'\">\n                                   \n                                   <div class=\"form-input-validation-error-message-wrapper\">\n                                     <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">\n                                       <localize key=\"manage.versions.value.required.message\"></localize>\n                                     </p>\n                                   </div>\n                                   \n                                   <div *ngIf=\"hasLocalizationChanged(viewModel, loc.locale) && !isNew\">\n                                     <p class=\"warning-text display-current-value\" style=\"padding: 5px 0;margin-bottom:0;\">\n                                       <localize key=\"change.request.changed.value.prefix\"></localize>\n                                       {{ getValueAtLocale(viewModel.oldValue, loc.locale) }}\n                                     </p>\n                                   </div>\n                                 </td>\n                               </tr>\n                              </ng-container>\n                              <tr *ngIf=\"attributeType.type === 'geometry' || attributeType.type === '_PARENT_' || attributeType.type === 'term' || attributeType.type === 'character' || attributeType.type === 'date' || attributeType.type === 'integer' || attributeType.type === 'float' || attributeType.type === 'boolean'\" class=\"attribute-value-row\">\n                               <td colspan=\"2\">\n                               \n                                 <div *ngIf=\"attributeType.type === 'term'\">\n                                   <select [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" id=\"mod-{{attributeType.code}}\" [name]=\"'mod-term-' + i + '-' + attributeType.code\" class=\"select-area\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                       <option value=\"\"></option>\n                                       <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\" [value]=\"option.code\">{{option.label.localizedValue}}</option>\n                                   </select>\n                                 </div>\n                                 <div *ngIf=\"attributeType.type === 'character'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'date'\">\n                                   <date-field [customStyles]=\"(viewModel.oldValue && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.value\" label=\"\" [inputName]=\"'date-val-' + i\" [allowInfinity]=\"false\" [allowFutureDates]=\"true\" \n                                       [required]=\"true\" [placement]=\"'right'\" [(valid)]=\"isValid\" [disable]=\"readonly\" ></date-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'integer' || attributeType.type === 'float'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"number\" class=\"form-control\" [name]=\"'int-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'boolean'\">\n\t                                 <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t                                   <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === true\" [value]=\"true\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t                                 </label> \n\t                                 <label class=\"radio radio-inline\"> \n\t                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === false\" [value]=\"false\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t                                 </label>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === '_PARENT_'\">\n                                   <ng-container *ngIf=\"hierarchy != null && hierarchy.types != null && hierarchy.types.length > 0\">\n                                     <div style=\"float:left;width:100%;\" *ngFor=\"let type of hierarchy.types; let j = index\"> \n                                       {{type.label}}\n                                       <div class=\"input-group\">\n                                          <input style=\"width:100%;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"type.code + '-' + i\"\n                                            [disabled]=\"readonly || viewModel.summaryKey === 'DELETE' || viewModel.startDate == null || viewModel.startDate === ''\"\n                                            [(ngModel)]=\"viewModel.value.parents[type.code].text\" \n                                            [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(viewModel.editor, viewModel.startDate, viewModel.endDate, type, viewModel.value, j)\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect(viewModel.editor, $event, type, viewModel.value, viewModel.startDate)\" \n                                            (typeaheadLoading)=\"viewModel.value.loading[type.code] = $event\"\n                                            [ngClass]=\"{'inline-loading':viewModel.value.loading[type.code], 'has-changed': (viewModel.oldValue && !isNew)}\"                                                                \n                                            [typeaheadOptionsLimit]=\"7\"\n                                            [typeaheadItemTemplate]=\"customItemTemplate\" \n                                            [typeaheadMinLength]=\"0\"\n                                            [typeaheadWaitMs]=\"300\">\n                                          \n                                            <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\" (click)=\"viewModel.editor.removeType(type)\"> \n                                              <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                            </span>\n                                                  \n                                            <!-- Hack: This is needed for formatting  -->\n                                            <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\"> \n                                            </span>\n                                        </div>\n                                     </div>\n                                   </ng-container>\n                                 </div> \n                                 <div *ngIf=\"viewModel.oldValue && !isNew && attributeType.type !== 'geometry'\">\n                                   <p class=\"warning-text display-current-value\">\n                                     <localize key=\"change.request.changed.value.prefix\"></localize>\n                                     \n                                     <ng-container *ngIf=\"attributeType.type !== 'boolean'\">\n                                       {{ viewModel.oldValue }}\n                                     </ng-container>\n                                     <ng-container *ngIf=\"attributeType.type === 'boolean'\">\n                                       <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === false) : (viewModel.oldValue === true)\" style=\"padding-left:3px;\">\n                                         <localize key=\"change.request.boolean.option.true\"></localize>\n                                       </span>\n                                       <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === true) : (viewModel.oldValue === false)\" style=\"padding-left:3px;\">\n                                         <localize key=\"change.request.boolean.option.false\"></localize>\n                                       </span>\n                                     </ng-container>\n                                   </p>\n                                 </div>\n                                 \n                                 <table *ngIf=\"attributeType.type === 'geometry'\" style=\"padding:0;\">\n                                 <!-- \n                                    Geometry \n                                 -->\n<!--                                   <div *ngIf=\"attributeType.type === 'geometry'\"> -->\n  \n<!--                                     <td style=\"vertical-align: middle;padding-left:0;\"> -->\n                                      <tr>\n                                        <td colspan=\"2\" style=\"padding-left:0;\">\n                                        \n                                          <button *ngIf=\"viewModel.oldValue && viewModel.newLayer\" class=\"btn btn-primary\" (click)=\"toggleOldGeometryView(viewModel)\" role=\"button\" [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                           <localize *ngIf=\"!viewModel.oldLayer || !viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.viewOld\"></localize>\n                                           <localize *ngIf=\"viewModel.oldLayer && viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hideOld\"></localize>\n                                          </button>\n                                          <button class=\"btn btn-primary\" style=\"margin-left:0;\" (click)=\"toggleGeometryView(viewModel)\" role=\"button\"\n                                            [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"!viewModel.newLayer || !viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.view\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hide\"></localize>\n                                          </button>\n                                          <button *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering && geoObjectType.isGeometryEditable\" class=\"btn btn-primary\" (click)=\"toggleGeometryEditing(viewModel)\" role=\"button\"\n                                            [disabled]=\"readonly || viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"viewModel.newLayer && !viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.save\"></localize>\n                                          </button>\n\n                                          <i *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"fa fa-copy clickable\" (click)=\"onAddNewVersion(viewModel.editor)\"></i>                                          \n                                        </td>\n                                      </tr>\n  \n                                      <tr *ngIf=\"(viewModel.newLayer && viewModel.newLayer.isRendering) && (geoObjectType.geometryType === 'POINT' || geoObjectType.geometryType === 'MULTIPOINT') && viewModel.value && viewModel.value.coordinates && (viewModel.value.coordinates.length == 1 || viewModel.value.coordinates.length == 0)\">\n                                        \n                                        <td style=\"width:50%;padding-left:0;padding-right:5px;\" >\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.latitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][1]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateY\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLatitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n                                        <td style=\"width:50%;\">\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.longitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][0]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateX\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLongitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n  \n                                      </tr>\n<!--                                     </td> -->\n<!--                                   </div> -->\n                                  </table>\n                              </td>\n\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5>\n                              \n                                  <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldStartDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate && !readonly ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                                  \n                                  <div *ngIf=\"viewModel.oldStartDate && !isNew\">\n                                    <p class=\"warning-text display-current-value\">\n                                      <localize key=\"change.request.changed.value.prefix\"></localize>\n                                      {{ viewModel.oldStartDate }}\n                                    </p>\n                                  </div>\n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                    <h5>\n                                      <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                    </h5>\n                                    <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldEndDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"viewModel.summaryKey !== 'DELETE' && !readonly\" [allowFutureDates]=\"true\" \n                                        [required]=\"true\" [placement]=\"'bottom'\" [oldDate]=\"(viewModel.oldEndDate && !isNew) ? viewModel.oldEndDate : null\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate != null ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                      \n                                    <!--\n                                    <div *ngIf=\"viewModel.oldEndDate && !isNew\">\n                                      <p class=\"warning-text\">\n                                        <localize key=\"change.request.changed.value.prefix\"></localize>\n                                        {{ viewModel.oldEndDate }}\n                                      </p>\n                                    </div>\n                                    -->\n                                  </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"viewModel.editor.conflictMessages && viewModel.editor.conflictMessages.size > 0\">\n                                <p *ngFor=\"let msg of viewModel.editor.conflictMessages\" [ngClass]=\"{'error-message': msg.severity === 'ERROR', 'warning-message': msg.severity === 'WARNING'}\" >\n                                  {{msg.message}}\n                                </p>\n                              </tr>\n                            </table>\n                            \n                          </td>\n                          \n                          \n<!--                             <td *ngIf=\"!readonly && (!this.isNew || attributeType.code !== 'exists') && (filterDate == null || (viewModel.summaryKey !== 'UNMODIFIED' && viewModel.summaryKey !== 'NEW'))\" (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" [title]=\"(viewModel.summaryKey === 'UNMODIFIED' ? 'changeovertime.manageVersions.remove.version' : 'changeovertime.manageVersions.revert.version') | localize\"> -->\n\n              \n                            <!-- Remove button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && (viewModel.summaryKey === 'UNMODIFIED' && viewModel.summaryKey !== 'NEW')\"\n                                [attr.disabled]=\"attributeType.code === 'exists' || filterDate != null\" \n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"(filterDate ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : 'changeovertime.manageVersions.remove.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-times\" ></i> \n                            </td>\n                            <!-- Revert button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && viewModel.summaryKey !== 'UNMODIFIED'\"\n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"('changeovertime.manageVersions.revert.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-undo\" ></i> \n                            </td>\n                        </tr>\n                      </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </li>\n              \n              <li *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"list-group-item\" style=\"text-align: left;\">\n                <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"> \n                  <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                </i>\n              </li>\n              \n            </ul>\n            \n            <!-- TODO : This code copy/pasted into standard-attribute-editor.component.html -->\n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject' && changeRequestEditor.changeRequest.approvalStatus === 'PENDING' && changeRequestEditor.changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.hasChanges()\" style=\"margin-left: 15px;\">\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n                <localize key=\"change.request.accept.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n                <localize key=\"change.request.reject.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n                <localize key=\"change.request.pending.btn\"></localize>\n              </button>\n            </div>              \n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.approvalStatus !== 'PENDING'\" style=\"margin-left:15px;\">\n              <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n                  <localize key=\"change.request.status.accepted\"></localize>\n              </strong>\n              <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n                  <localize key=\"change.request.status.rejected\"></localize>\n              </strong>\n            </div>\n            \n          </div>\n        </div>\n        <geoobject-editor-map style=\"width:55%;display:inline-block;vertical-align:top;margin-top:15px;\" *ngIf=\"isGeometryInlined && geomService.getRenderedLayers().length > 0\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" \n          [mapHeight]=\"mapRowHeight\" [readOnly]=\"!geoObjectType.isGeometryEditable && readonly\"\n          [bboxCode]=\"this.changeRequestEditor.geoObject.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"geomService.getRenderedLayers()[0].startDate\">\n        </geoobject-editor-map>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"change-request-page\",\n    templateUrl: \"./change-request-page.component.html\",\n    styleUrls: [\"./change-request-page.css\"]\n})\nexport class ChangeRequestPageComponent implements OnInit {\n\n  pageTitle: string;\n  bsModalRef: BsModalRef;\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n  isContributorOnly: boolean;\n\n  urlSubscriber: any;\n\n  highlightOid: string;\n\n  constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService, private route: ActivatedRoute) {\n      this.isAdmin = service.isAdmin();\n      this.isMaintainer = this.isAdmin || service.isMaintainer();\n      this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n      this.isContributorOnly = service.isContributerOnly();\n  }\n\n  ngOnInit(): void {\n      this.urlSubscriber = this.route.params.subscribe(params => {\n          this.highlightOid = params[\"oid\"];\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.urlSubscriber.unsubscribe();\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>{{pageTitle}}</h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <request-table [toggleId]=\"highlightOid\"></request-table>\n            \n            <submit-change-request *ngIf=\"isContributorOnly\"></submit-change-request>\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { interval } from \"rxjs\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob, ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"scheduled-jobs\",\n    templateUrl: \"./scheduled-jobs.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class ScheduledJobsComponent implements OnInit {\n\n    message: string = null;\n\n    activeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    isViewAllOpen: boolean = false;\n\n    constructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.onActiveJobsPageChange(1);\n\n        this.pollingData = interval(1000).subscribe(() => {\n            this.activeTimeCounter++;\n            this.completeTimeCounter++;\n\n            if (this.isViewAllOpen) {\n                if (this.activeTimeCounter >= 4) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n                if (this.completeTimeCounter >= 7) {\n                    this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n                    this.completeTimeCounter = 0;\n                }\n            } else {\n                if (this.activeTimeCounter >= 2) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n        if (job.status === \"FEEDBACK\") {\n            return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PageResult<any>): void {\n        page.resultSet.forEach(job => {\n            let stepConfig = {\n                steps: [\n                    { label: this.localizeService.decode(\"scheduler.step.fileImport\"), status: \"COMPLETE\" },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.staging\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.validation\"),\n                        status: job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.databaseImport\"),\n                        status: job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n\n            job = job as ScheduledJobOverview;\n            job.stepConfig = stepConfig;\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    onViewAllCompleteJobs(): void {\n        this.onCompleteJobsPageChange(1);\n\n        this.isViewAllOpen = true;\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-history/\", code]);\n    }\n\n    onActiveJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCompleteJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(job.configuration).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.resultSet | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    <span class=\"date-string-display\">\n                                                        {{formatDate(job.createDate)}}\n                                                    </span>\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.resultSet | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                              <span class=\"date-string-display\">\n                                {{formatDate(job.createDate)}}\n                              </span>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <span class=\"date-string-display\">\n                                {{formatDate(job.lastUpdateDate)}}\n                            </span>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from \"./conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./conflict-widgets/reupload-modal.component\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { Subscription } from \"rxjs\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./job.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class JobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n\n    page: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + registry.contextPath;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"IMPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n        for (let i = 0; i < this.page.resultSet.length; ++i) {\n            let pageConflict = this.page.resultSet[i];\n\n            if (pageConflict.id === problem.id) {\n                this.page.resultSet.splice(i, 1);\n            }\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (probType === \"net.geoprism.registry.geoobject.ImportOutOfRangeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.importOutOfRange\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: any): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n        this.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe(data => {\n            if (data.action === \"RESOLVED\") {\n                this.onProblemResolved(data.data);\n            }\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n            this.job = response;\n\n            if (this.job.stage === \"IMPORT_RESOLVE\") {\n                this.page = this.job.importErrors;\n            } else if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.page = this.job.problems;\n\n                for (let i = 0; i < this.page.resultSet.length; ++i) {\n                    let problem = this.page.resultSet[i];\n\n                    if (problem.type === \"RowValidationProblem\") {\n                        this.hasRowValidationProblem = true;\n                    }\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.resultSet.forEach(row => {\n            row.selected = this.allSelected;\n        });\n    }\n\n    onReuploadAndResume(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.job = this.job;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.router.navigate([\"/registry/scheduled-jobs\"]);\n        });\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n        if (this.page.resultSet.length === 0) {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n            } else {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n            }\n\n            this.bsModalRef.content.type = ModalTypes.danger;\n\n            this.bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.resolveScheduledJob(historyId).then(response => {\n                    this.router.navigate([\"/registry/scheduled-jobs\"]);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            });\n        }\n    }\n\n    onCancelScheduledJob(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(this.job.configuration).then(response => {\n                // this.bsModalRef.hide()\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              <span class=\"date-string-display\">\n                                    {{formatDate(job.createDate)}}\n                              </span>\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"job-conflict-modal\",\n    templateUrl: \"./job-conflict-modal.component.html\",\n    styleUrls: []\n})\nexport class JobConflictModalComponent implements OnInit {\n\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef) {\n        this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onProblemResolvedListener(problem: any): void {\n        this.onConflictAction.next({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJob, ImportError } from \"@registry/model/registry\";\n\nimport { GeoObjectEditorComponent } from \"../../geoobject-editor/geoobject-editor.component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"import-problem-widget\",\n    templateUrl: \"./import-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ImportProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId(null);\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolved.emit(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>:\n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div *ngIf=\"problem.object != null && problem.object.geoObject != null\" style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"parent-reference-problem-widget\",\n    templateUrl: \"./parent-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"term-reference-problem-widget\",\n    templateUrl: \"./term-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(conflict: any): Observable<any> {\n        return Observable.create((observer: any) => {\n            this.iService.getTermSuggestions(conflict.mdAttributeId, this.searchLabel, \"20\").then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.termId = e.item.value;\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            classifierId: this.termId,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"row-validation-problem-widget\",\n    templateUrl: \"./row-validation-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class RowValidationProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">{{errorMessage}}</div>\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <div>{{message}}</div>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\n\nimport { TaskService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"task-viewer\",\n    templateUrl: \"./task-viewer.component.html\",\n    styleUrls: [\"./task-viewer.component.css\"],\n    providers: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completedTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    isViewAllOpen: boolean = false;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private taskService: TaskService, private localizeService: LocalizationService, private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onInProgressTasksPageChange(1);\n    }\n\n    onInProgressTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, \"UNRESOLVED\").then(page => {\n            this.inProgressTasks = page;\n        });\n    }\n\n    onCompletedTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, \"RESOLVED\").then(page => {\n            this.completedTasks = page;\n        });\n    }\n\n    onCompleteTask(task: any): void {\n        // this.isViewAllOpen = true;\n\n        this.taskService.completeTask(task.id).then(() => {\n            const index = this.inProgressTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.inProgressTasks.resultSet.splice(index, 1);\n            }\n\n            if(this.isViewAllOpen) {\n                this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            }\n        });\n    }\n\n    onMoveTaskToInProgress(task: any): void {\n        this.isViewAllOpen = true;\n\n        this.taskService.setTaskStatus(task.id, \"UNRESOLVED\").then(() => {\n            const index = this.completedTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.completedTasks.resultSet.splice(index, 1);\n            }\n\n            this.completedTasks.resultSet.splice(index, 1);\n            this.inProgressTasks.resultSet.push(task);\n        });\n    }\n\n    onToggleCompletedTasks(): void {\n        this.isViewAllOpen = !this.isViewAllOpen;\n\n        if (this.isViewAllOpen) {\n            this.onCompletedTasksPageChange(1);\n        }\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n\n    <div class=\"row\" *ngIf=\"inProgressTasks.resultSet.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n          <div\n            *ngFor=\"let task of inProgressTasks.resultSet | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    {{formatDate(task.createDate)}}\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked\n                      id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\"\n                      (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\"\n                      name=\"{{task.id}}-completed\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"inProgressTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <h2 class=\"col-md-9\">\n        <localize key=\"tasks.completedTasksTitle\"></localize>\n      </h2>\n      <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onToggleCompletedTasks()\"\n        class=\"btn btn-default pull-right\" role=\"button\">\n        <localize *ngIf=\"!isViewAllOpen\" key=\"tasks.viewCompletedTasksButton\"></localize>\n        <localize *ngIf=\"isViewAllOpen\" key=\"tasks.hideCompletedTasksButton\"></localize>\n      </button>\n    </div>\n    <hr>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.resultSet.length > 0\">\n          <div\n            *ngFor=\"let task of completedTasks.resultSet | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\" style=\"margin-right:30px;\">\n                    {{formatDate(task.createDate)}}\n                  </span>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.completeDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    {{formatDate(task.completedDate)}}\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\"\n                      (click)=\"onMoveTaskToInProgress(task)\" [id]=\"task.id+ '-inProgress'\" [name]=\"task.id+ '-inProgress'\"\n                      value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\"\n                    [id]=\"task.id+ '-completed'\" [name]=\"task.id+ '-completed'\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.resultSet.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\">\n            <localize key=\"tasks.no.completed.tasks.message\"></localize>\n          </p>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { ListTypeService } from '@registry/service/list-type.service';\nimport { ListTypeVersion } from '@registry/model/list-type';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-export-synchronization-config',\n  templateUrl: './fhir-export-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirExportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  subscription: Subscription = null;\n  versions: { [key: string]: ListTypeVersion[] } = {};\n  implementations: { className: string, label: string }[] = [];\n  lists: {label:string, oid:string}[] = [];\n\n  constructor(private service: SynchronizationConfigService, private rService: ListTypeService) { }\n\n  ngOnInit(): void {\n\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirExportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        levels: [],\n        hierarchy: null\n      }\n    }\n\n    if (this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        var level = this.config.configuration.levels[i];\n\n        // Get version options\n        this.onSelectMasterList(level);\n      }\n    }\n    else {\n      this.config.configuration.levels = [];\n    }\n\n    // Get \n    this.rService.getAllLists().then(response => {\n      this.lists = response;\n    });\n  }\n\n  onSelectMasterList(level: FhirSyncLevel): void {\n\n    if (level.masterListId != null && level.masterListId.length > 0) {\n\n      this.rService.getPublicVersions(level.masterListId).then(list => {\n        this.versions[level.masterListId] = list;\n      });\n    }\n    else {\n      this.versions[level.masterListId] = null;\n    }\n  }\n\n  addLevel(): void {\n    var level = {\n      masterListId: null,\n      versionId: null,\n      level: this.config.configuration.levels.length,\n    };\n\n    this.config.configuration.levels.push(level);\n  }\n\n  removeLevel(i: number): void {\n    this.config.configuration.levels.splice(i, 1);\n\n    // Reorder the level\n    if (this.config.configuration != null && this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        this.config.configuration.levels[i].level = i;\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.units\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 3%\">\n                            <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.field\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.forDate\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"synchronization.config.implementation\"></localize>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let level of config.configuration.levels; let i = index;\"\n                        [style.background-color]=\"'#F7F7F7'\">\n                        <td style=\"width: 3%\">\n                            <label style=\"padding: 10px 0; margin: 0;\">\n                                <localize key=\"sync.level.label\"></localize> {{level.level + 1}}\n                            </label>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.masterListId\" (change)=\"onSelectMasterList(level)\"\n                                [name]=\"'masterList' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let list of lists\" [value]=\"list.oid\">{{list.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select *ngIf=\"versions[level.masterListId] != null\" [(ngModel)]=\"level.versionId\"\n                                [name]=\"'version' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let version of versions[level.masterListId]\" [value]=\"version.oid\">\n                                    {{version.forDate}} (<localize key=\"list.type.version\"></localize> {{version.versionNumber}})\n                                </option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.implementation\" [name]=\"'implementation' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let implementation of implementations\"\n                                    [value]=\"implementation.className\">{{implementation.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <div>\n                                <a style=\"padding: 10px;\" (click)=\"removeLevel(i)\"\n                                    [title]=\"'button.delete.helptext' | localize\">\n                                    <i class=\"fa fa-trash-o ico-remove\"></i> <label\n                                        style=\"cursor: pointer; margin-left: 9px;\">\n                                        <localize key=\"sync.level.delete\"></localize>\n                                    </label>\n                                </a>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"button-column\"><a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\"\n                                (click)=\"addLevel()\"></a></td>\n                    </tr>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { AttributeConfigInfo, DHIS2AttributeMapping, SyncLevel } from \"@registry/model/sync\";\n\nlet DEFAULT_MAPPING_STRATEGY = \"net.geoprism.registry.etl.DHIS2AttributeMapping\";\n\nexport interface GOTAttributeConfig {\n  geoObjectTypeCode?: string;\n  mappings: DHIS2AttributeMapping[];\n  attrConfigInfos: AttributeConfigInfo[];\n}\nexport interface LevelRow {\n  isAttributeEditor: boolean;\n\n  level?: SyncLevel;\n  levelNum?: number;\n\n  attrCfg?: GOTAttributeConfig;\n}\n\n@Component({\n\n    selector: \"dhis2-synchronization-config\",\n    templateUrl: \"./dhis2-synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class Dhis2SynchronizationConfigComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() cOrg: OrgSyncInfo = null;\n\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  organizations: OrgSyncInfo[] = [];\n\n  types: GeoObjectType[] = [];\n\n  levelRows: LevelRow[] = [];\n\n  orgUnitGroups: any[] = [];\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    // Get the types\n    // this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n    //   this.types = types;\n    // });\n\n      if (this.config.configuration == null) {\n          this.config.configuration = {\n              levels: [],\n              hierarchyCode: null\n          }\n      }\n\n      this.levelRows = [];\n\n      if (this.config.configuration.levels != null) {\n          for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n              var level = this.config.configuration.levels[i];\n\n              var levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n              this.levelRows.push(levelRow);\n          }\n      } else {\n          this.config.configuration.levels = [];\n      }\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      this.fieldChange.subscribe(() => {\n          this.clearMappingData();\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.fieldChange.unsubscribe();\n  }\n\n  onChangeHierarchy(): void {\n      this.clearMappingData();\n  }\n\n  buildDefaultMappings(): DHIS2AttributeMapping[] {\n      return [\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"name\",\n              dhis2AttrName: \"name\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"shortName\",\n              dhis2AttrName: \"shortName\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"code\",\n              dhis2Id: \"code\",\n              externalId: null,\n              dhis2AttrName: \"code\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"openingDate\",\n              dhis2AttrName: \"openingDate\"\n          }\n          /*\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"created\",\n              dhis2AttrName: \"created\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"lastUpdateDate\",\n              externalId: null,\n              dhis2Id: \"lastUpdated\",\n              dhis2AttrName: \"lastUpdated\"\n          },\n          */\n      ];\n  }\n\n  clearMappingData(): void {\n      this.types = [];\n      this.levelRows = [];\n      this.config.configuration[\"levels\"] = [];\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      let lvl = {\n          type: null,\n          geoObjectType: null,\n          level: 0,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      this.config.configuration[\"levels\"] = [lvl];\n      this.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n  }\n\n  onSelectLevelType(levelRow: LevelRow): void {\n      if (levelRow.level.type === \"RELATIONSHIPS\") {\n          levelRow.attrCfg.mappings = [];\n          levelRow.level.mappings = [];\n\n          let editorIndex = this.getEditorIndex();\n          if (editorIndex !== -1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n      } else {\n          if (levelRow.attrCfg.mappings.length === 0) {\n              levelRow.attrCfg.mappings = this.buildDefaultMappings();\n              levelRow.level.mappings = levelRow.attrCfg.mappings;\n\n              let len = levelRow.level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = levelRow.level.mappings[i];\n\n                  levelRow.attrCfg.attrConfigInfos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n          }\n      }\n  }\n\n  deleteMapping(levelRow: LevelRow, index: number): void {\n      levelRow.attrCfg.mappings.splice(index, 1);\n  }\n\n  addNewMapping(levelRow: LevelRow): void {\n      levelRow.attrCfg.mappings.push({\n          attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n          cgrAttrName: null,\n          dhis2AttrName: null,\n          externalId: null,\n          terms: []\n      });\n  }\n\n  addLevel(): void {\n      var lvl = {\n          type: null,\n          geoObjectType: null,\n          level: this.config.configuration.levels.length,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      var len = this.config.configuration[\"levels\"].push(lvl);\n      this.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n  }\n\n  removeLevel(levelNum: number, levelRowIndex: number): void {\n      if (levelNum < this.config.configuration[\"levels\"].length) {\n          var editorIndex = this.getEditorIndex();\n          if (editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          this.levelRows.splice(levelRowIndex, 1);\n\n          var newLevelNum = 0;\n          for (var i = 0; i < this.levelRows.length; ++i) {\n              var levelRow: LevelRow = this.levelRows[i];\n\n              levelRow.levelNum = newLevelNum;\n\n              if (!levelRow.isAttributeEditor) {\n                  newLevelNum = newLevelNum + 1;\n              }\n          }\n\n          this.config.configuration[\"levels\"].splice(levelNum, 1);\n      }\n  }\n\n  getEditorIndex(): number {\n      for (var i = 0; i < this.levelRows.length; ++i) {\n          var levelRow = this.levelRows[i];\n\n          if (levelRow.isAttributeEditor) {\n              return i;\n          }\n      }\n\n      return -1;\n  }\n\n  configureAttributes(levelRow: any): void {\n      var editorIndex = this.getEditorIndex();\n\n      if (editorIndex !== -1) {\n          this.levelRows.splice(editorIndex, 1);\n\n          if (editorIndex === levelRow.levelNum + 1) {\n              return;\n          }\n      }\n\n      this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n  }\n\n  getTermOptions(info: AttributeConfigInfo, dhis2Id: string) {\n      for (var i = 0; i < info.dhis2Attrs.length; ++i) {\n          var dhis2Attr = info.dhis2Attrs[i];\n\n          if (dhis2Attr.dhis2Id === dhis2Id) {\n              return dhis2Attr.options;\n          }\n      }\n  }\n\n  onChangeDHIS2Attr(mapping: DHIS2AttributeMapping) {\n      if (mapping.dhis2Id == null || mapping.dhis2Id === \"\") {\n          if (mapping.terms != null) {\n              mapping.terms = {};\n          }\n\n          mapping.dhis2AttrName = null;\n\n          return;\n      }\n\n      mapping.terms = {};\n\n      let len = mapping.info.dhis2Attrs.length;\n      for (let i = 0; i < len; ++i) {\n          if (mapping.info.dhis2Attrs[i].dhis2Id === mapping.dhis2Id) {\n              if (mapping.info.dhis2Attrs[i].dhis2Id !== mapping.info.dhis2Attrs[i].name) {\n                  mapping.externalId = mapping.info.dhis2Attrs[i].dhis2Id;\n              } else {\n                  mapping.externalId = null;\n              }\n              mapping.dhis2AttrName = mapping.info.dhis2Attrs[i].name;\n          }\n      }\n  }\n\n  onSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n      if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n          var levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n          levelRow.attrCfg = null;\n          levelRow.level.mappings = [];\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          return;\n      }\n\n      var attrCfg = this.levelRows[levelRowIndex].attrCfg;\n      if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n          // Resume an editing session on attributes that we fetched previously\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex !== levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n\n              if (editorIndex < levelRowIndex) {\n                  levelRowIndex = levelRowIndex - 1;\n              }\n          }\n\n          this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n      } else {\n          this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((infos: AttributeConfigInfo[]) => {\n              var editorIndex = this.getEditorIndex();\n              var levelRow: LevelRow = this.levelRows[levelRowIndex];\n              var level = levelRow.level;\n\n              if (level.mappings == null) {\n                  level.mappings = [];\n              }\n\n              if (level.mappings.length === 0 || isDifferentGot) {\n                  level.mappings = this.buildDefaultMappings();\n              }\n\n              let len = level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = level.mappings[i];\n\n                  infos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n\n              levelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, mappings: level.mappings, attrConfigInfos: infos };\n\n              if (editorIndex !== -1 && (editorIndex === levelRowIndex + 1 || infos.length > 0)) {\n                  this.levelRows.splice(editorIndex, 1);\n\n                  if (editorIndex < levelRowIndex) {\n                      levelRowIndex = levelRowIndex - 1;\n                  }\n              }\n\n              if (!isDifferentGot) {\n                  this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: levelRow.attrCfg, level: levelRow.level, levelNum: levelRow.levelNum });\n              }\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  mapCgrAttr(info: AttributeConfigInfo, mapping: DHIS2AttributeMapping) {\n      if (info == null) {\n          mapping.cgrAttrName = null;\n          mapping.info = null;\n          mapping.dhis2AttrName = null;\n          mapping.externalId = null;\n          mapping.terms = null;\n          mapping.isOrgUnitGroup = null;\n          return;\n      }\n\n      mapping.cgrAttrName = info.cgrAttr.name;\n      mapping.info = info;\n      mapping.dhis2AttrName = null;\n      mapping.externalId = null;\n      mapping.terms = {};\n      mapping.isOrgUnitGroup = false;\n      mapping.attributeMappingStrategy = info.attributeMappingStrategies[0];\n  }\n\n  onChangeTargetType(mapping: DHIS2AttributeMapping): void {\n      mapping.externalId = null;\n\n      for (const key in mapping.terms) {\n          if (mapping.terms.hasOwnProperty(key)) {\n              mapping.terms[key] = null;\n          }\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.onError.emit(err);\n  }\n\n}\n","      <div>\n        <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"select\">\n              <select type=\"text\" [(ngModel)]=\"config.configuration.hierarchyCode\" name=\"hierarchy\" (change)='onChangeHierarchy()' [disabled]=\"config.oid != null\" required>\n                <option></option>\n                <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n              </select>\n            </span>\n          </div>\n        </div>\n        \n        <div *ngIf=\"config.configuration.hierarchyCode != null\" class=\"row-holder\" >\n      \n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.units\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"list-table-wrapper\">\n              <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                  <tr>\n                    <th style=\"width:3%\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                    <th style=\"width:17%\">\n                      <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                    </th>\n                    <th style=\"width:25%; text-align: center;\">\n                      <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                    <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" (change)=\"onSelectLevelType(levelRow)\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                        <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                        <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                      </select>\n                    </td>\n                    <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                        <option></option>\n                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <div>\n                        <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n                          <i class=\"fa fa-trash-o ico-remove\"></i>\n                          <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n                        </a> \n                      </div>\n                      <div>\n                        <a *ngIf=\"levelRow.level.geoObjectType && (levelRow.level.type === 'ORG_UNITS' || levelRow.level.type === 'ALL')\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                          <i class=\"fa fa-edit\"></i>\n                          <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.attributes.editButton\"></localize></label>\n                        </a> \n                      </div>\n                    </td>\n                    <td colspan=\"5\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                      <h4><localize key=\"sync.attr.attributes.title\"></localize></h4>\n                      <table class=\"table table-bordered table-striped\" style=\"margin-left:80px; width: calc(100% - 80px)\">\n\n                        <colgroup>\n                          <col width=\"5%\">\n                          <col width=\"95%\">\n                        </colgroup>\n                        <tbody>\n                          <tr *ngFor=\"let mapping of levelRow.attrCfg.mappings; let mappingIndex = index;\">\n                            <td colspan=\"2\" class=\"row-holder\">\n                              <table style=\"width:80%; margin-top:15px; margin-bottom: 10px;\">\n                                <thead>\n                                <tr>\n                                  <th style=\"width:5%\"></th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\">\n                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                <tr>\n                                  <td style=\"width:5%\">\n                                    <i (click)=\"deleteMapping(levelRow, mappingIndex)\" class=\"fa fa-times\"></i>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <select style=\"width:95%\" [(ngModel)]=\"mapping.cgrAttrName\" (change)=\"mapCgrAttr($event.target.selectedIndex == 0 ? null : levelRow.attrCfg.attrConfigInfos[$event.target.selectedIndex-1], mapping)\" [name]=\"'sourceAttrSelect' + i + '-' + mappingIndex + (mapping.cgrAttrName ? mapping.cgrAttrName : '')\">\n                                      <option [ngValue]=\"null\"></option>\n                                      <option *ngFor=\"let info of levelRow.attrCfg.attrConfigInfos\" [ngValue]=\"info.cgrAttr.name\">\n                                        <label style=\"color:#999;\">{{info.cgrAttr.label}}</label>\n                                      </option>\n                                    </select>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\" style=\"color:#999;\">{{mapping.info.cgrAttr.typeLabel}}</label>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\" style=\"margin-right:20px; width:23%\">\n                                    <select style=\"width:95%\" *ngIf=\"mapping.info.cgrAttr.type === 'term'\" [(ngModel)]=\"mapping.isOrgUnitGroup\" (change)=\"onChangeTargetType(mapping)\" [name]=\"'isOrgUnitGroup' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"false\"><localize key=\"sync.attr.targetTypeOptionSet\"></localize></option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type !== 'term' && mapping.info.cgrAttr.name\" style=\"float:right; margin-right:20px; width:23%\">\n                                    <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n                                  </td>\n                                  <td style=\"width:23%\" *ngIf=\"mapping.info\">\n                                    <select *ngIf=\"mapping.info.dhis2Attrs.length > 0 && !mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.dhis2Id\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeDHIS2Attr(mapping)\">\n                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                      <option [ngValue]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of mapping.info.dhis2Attrs\">\n                                        {{dhis2Attr.name}}\n                                      </option>\n                                    </select>\n                                    <label *ngIf=\"mapping.info.dhis2Attrs.length == 0 && !mapping.isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n                                  </td>\n                                </tr>\n                              </tbody>\n                            </table>\n                            <div *ngIf=\"mapping.info && ((mapping.externalId != null && mapping.externalId.length > 0) || mapping.isOrgUnitGroup)\">\n                              <table *ngFor=\"let term of mapping.info.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n                                <thead>\n                                  <tr>\n                                    <th style=\"width:25%\">\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <!-- To -->\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label>\n                                        <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n                                        <localize *ngIf=\"mapping.isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n                                      </label>\n                                    </th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <tr>\n                                    <td></td>\n                                    <td><label style=\"color:#999;\">{{term.label}}</label></td>\n                                    <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n                                    <td>\n                                      <select *ngIf=\"!mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let option of getTermOptions(mapping.info, mapping.externalId)\" [value]=\"option.code\">\n                                          {{option.name}}\n                                        </option>\n                                      </select>\n                                      <select *ngIf=\"mapping.isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                                      </select>\n                                    </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td class=\"button-column\">\n                            <a class=\"fa fa-plus\" (click)=\"addNewMapping(levelRow)\" [title]=\"'sync.attr.attributes.add.tooltip' | localize\"></a>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>         \n        </div>\n      </div>\n    </div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { SynchronizationConfigModalComponent } from \"./synchronization-config-modal.component\";\n\n@Component({\n    selector: \"synchronization-config-manager\",\n    templateUrl: \"./synchronization-config-manager.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\n    message: string = null;\n\n    page: PageResult<SynchronizationConfig> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 20\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.service.getPage(pageNumber, this.page.pageSize).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    create(): void {\n        this.service.edit(null).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(null, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onEdit(config: SynchronizationConfig): void {\n        this.service.edit(config.oid).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(response.config, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onRemove(config: SynchronizationConfig): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + config.label.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(config.oid).then(() => {\n                this.onPageChange(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(config: SynchronizationConfig): void {\n        this.router.navigate([\"/registry/synchronization-config/\", config.oid]);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { SynchronizationConfig, OrgSyncInfo } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\n\n@Component({\n    selector: \"synchronization-config-modal\",\n    templateUrl: \"./synchronization-config-modal.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  config: SynchronizationConfig = {\n      organization: null,\n      system: null,\n      hierarchy: null,\n      isImport: false,\n      label: this.lService.create(),\n      configuration: {}\n  };\n\n  organizations: OrgSyncInfo[] = [];\n\n  cOrg: OrgSyncInfo = null;\n  cSystem: { label: string, oid: string, type: string } = null;\n\n  fieldChange: Subject<string>;\n\n  /*\n   * Observable subject for MasterList changes.  Called when an update is successful\n   */\n  onSuccess: Subject<SynchronizationConfig>;\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n      this.onSuccess = new Subject();\n      this.fieldChange = new Subject();\n  }\n\n  ngOnDestroy(): void {\n      this.onSuccess.unsubscribe();\n      this.fieldChange.unsubscribe();\n  }\n\n  init(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n      this.organizations = organizations;\n\n      if (config != null) {\n          this.config = config;\n\n          let oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n          if (oIndex !== -1) {\n              this.cOrg = this.organizations[oIndex];\n          }\n\n          let sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n          if (sIndex !== -1) {\n              this.cSystem = this.cOrg.systems[sIndex];\n          }\n      }\n  }\n\n  handleFieldChange(field: string): void {\n      this.fieldChange.next(field);\n  }\n\n  onOrganizationSelected(): void {\n      let index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n      if (index !== -1) {\n          this.cOrg = this.organizations[index];\n      } else {\n          this.cOrg = null;\n      }\n\n      this.cSystem = null;\n\n      this.handleFieldChange(\"organization\");\n  }\n\n  onChangeExternalSystem(): void {\n      let index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n      if (index !== -1) {\n          this.cSystem = this.cOrg.systems[index];\n      } else {\n          this.cSystem = null;\n      }\n\n      this.handleFieldChange(\"system\");\n  }\n\n  onSubmit(): void {\n    /*\n    let levelIndex = 0;\n    let len = this.levelRows.length;\n    for (let i = 0; i < len; ++i)\n    {\n      let levelRow: LevelRow = this.levelRows[i];\n\n      if (levelRow.isAttributeEditor)\n      {\n        continue;\n      }\n      else if (levelRow.attrCfg == null)\n      {\n        levelIndex++;\n        continue;\n      }\n\n      let mappings = this.config.configuration.levels[levelIndex].mappings;\n      let mappingsLen = levelRow.attrCfg.mappings.length;\n      for (let j = 0; j < mappingsLen; ++j)\n      {\n        let mapping = JSON.parse(JSON.stringify(levelRow.attrCfg.mappings[j]));\n        delete mapping.info;\n        mappings.push(mapping);\n      }\n\n      levelIndex++;\n    }\n    */\n\n      this.service.apply(this.config).then(cfg => {\n          this.onSuccess.next(cfg);\n          this.bsModalRef.hide();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  cancel(): void {\n      if (this.config.oid != null) {\n          this.service.unlock(this.config.oid).then(() => {\n              this.bsModalRef.hide();\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      } else {\n          this.bsModalRef.hide();\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      \n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n        <dhis2-synchronization-config [(config)]=\"config\" [cOrg]=\"cOrg\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></dhis2-synchronization-config>\n      </div>\n      <div *ngIf=\"cSystem != null && cSystem.type === 'FhirExternalSystem'\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>Synchronization Type</label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"col-md-3\" style=\"display: flex; align-items: center;\">\n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"!config.isImport\" name=\"isImport\" [value]=\"false\">\n                <span>Export</span>\n              </label>                \n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"config.isImport\" name=\"isImport\" [value]=\"true\">\n                <span>Import</span>\n              </label>                \n            </div>          \n          </div>\n        </div>\n      \n        <fhir-export-synchronization-config *ngIf=\"config.isImport !== true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-export-synchronization-config>\n        <fhir-import-synchronization-config *ngIf=\"config.isImport === true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-import-synchronization-config>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-import-synchronization-config',\n  templateUrl: './fhir-import-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirImportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n  subscription: Subscription = null;\n\n  implementations: { className: string, label: string }[] = [];\n\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirImportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        implementation: null\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.implementation\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <select [(ngModel)]=\"config.configuration.implementation\" name=\"implementation\" required>\n            <option></option>\n            <option *ngFor=\"let implementation of implementations\" [value]=\"implementation.className\">\n                {{implementation.label}}\n            </option>\n        </select>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { SynchronizationConfig, ExportScheduledJob } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component/error-handler/error-handler\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; import { Subscription } from \"rxjs\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"synchronization-config\",\n    templateUrl: \"./synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\n  message: string = null;\n\n  config: SynchronizationConfig = null;\n\n  page: PageResult<ExportScheduledJob> = {\n      pageSize: 10,\n      pageNumber: 1,\n      count: 1,\n      resultSet: []\n  };\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n  subscription: Subscription = null;\n\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n      const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n      this.service.get(oid).then(config => {\n          this.config = config;\n          this.onPageChange(1);\n      });\n\n      let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + registry.contextPath;\n\n      this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n      this.subscription = this.notifier.subscribe(message => {\n          if (message.type === \"DATA_EXPORT_JOB_CHANGE\") {\n              this.onPageChange(this.page.pageNumber);\n          }\n      });\n  }\n\n  ngOnDestroy() {\n      if (this.subscription != null) {\n          this.subscription.unsubscribe();\n      }\n\n      if (this.notifier != null) {\n          this.notifier.complete();\n      }\n  }\n\n  onRun(): void {\n      this.message = null;\n\n      this.service.run(this.config.oid).then(() => {\n      // Refresh the page\n          this.onPageChange(this.page.pageNumber);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  onGenerateFile(): void {\n      window.open(registry.contextPath + \"/synchronization-config/generate-file?oid=\" + encodeURIComponent(this.config.oid));\n  }\n\n  onPageChange(pageNumber: number): void {\n      if (this.config != null) {\n          this.message = null;\n\n          this.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n              this.formatStepConfig(response);\n              this.page = response;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  formatJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"FEEDBACK\") {\n          return this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n      } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      } else if (job.status === \"QUEUED\") {\n          return this.lService.decode(\"etl.JobStatus.QUEUED\");\n      } else if (job.status === \"SUCCESS\") {\n          return this.lService.decode(\"etl.JobStatus.SUCCESS\");\n      } else if (job.status === \"CANCELED\") {\n          return this.lService.decode(\"etl.JobStatus.CANCELED\");\n      } else if (job.status === \"FAILURE\") {\n          return this.lService.decode(\"etl.JobStatus.FAILURE\");\n      } else {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      }\n  }\n\n  formatStepConfig(page: PageResult<ExportScheduledJob>): void {\n      page.resultSet.forEach((job: ExportScheduledJob) => {\n          const steps = [\n              {\n                  label: this.lService.decode(\"synchronization.step.Queued\"),\n                  status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n              },\n\n              {\n                  label: this.lService.decode(\"synchronization.step.Connecting\"),\n                  status: job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n              }\n          ];\n\n          const stepLabel = this.config.isImport ? \"Importing\" : this.lService.decode(\"synchronization.step.DatabaseExport\");\n\n          steps.push({\n              label: stepLabel,\n              status: job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n          });\n\n          job.stepConfig = {\n              steps: steps\n          };\n      });\n  }\n\n  getCompletedStatus(jobStage: string, targetStage: string): string {\n      let order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n      let jobPos = order.indexOf(jobStage);\n      let targetPos = order.indexOf(targetStage);\n\n      if (targetPos < jobPos) {\n          return \"COMPLETE\";\n      } else {\n          return \"\";\n      }\n  }\n\n  getJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n          return \"WORKING\";\n      } else if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n          return \"STUCK\";\n      }\n\n      return \"\";\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label>\n              <i class=\"fa\"\n                [ngClass]=\"{'fa-long-arrow-right' : !config.isImport, 'fa-long-arrow-left' : config.isImport}\"\n                aria-hidden=\"true\"\n                style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i>\n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-group text-right\" style=\"margin: 0;\">\n                <form>\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                  <button *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\"\n                    type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onGenerateFile()\" class=\"btn btn-secondary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.generateBundle\"></localize>\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.geoObjectType}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                      <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\">\n                      </localize>\n                      <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"masterlist.field\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"masterlist.forDate\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.typeLabel}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      {{level.forDate}}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\">\n                          <localize key=\"masterlist.jobs\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr\n                        *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\"\n                                style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator\n                              *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\"\n                              [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\"\n                              [routerLink]=\"'/registry/sync/details/' + config.oid + '/' + job.historyId\"\n                              routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                          </div>\n                        </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { RegistryService, IOService, SynchronizationConfigService } from '@registry/service';\nimport { ScheduledJob, SynchronizationConfig } from '@registry/model/registry';\n\n@Component({\n  selector: 'job',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.css']\n})\nexport class SyncDetailsComponent implements OnInit {\n  message: string = null;\n  job: ScheduledJob;\n  historyId: string = \"\";\n\n  config: SynchronizationConfig = null;\n\n  page: any = {\n    count: 0,\n    pageNumber: 1,\n    pageSize: 10,\n    results: []\n  };\n\n  constructor(private configService: SynchronizationConfigService, public service: RegistryService, private route: ActivatedRoute, public ioService: IOService) {\n  }\n\n  ngOnInit(): void {\n\n    this.historyId = this.route.snapshot.params[\"oid\"];\n\n    const configOid = this.route.snapshot.paramMap.get('config');\n\n    this.configService.get(configOid).then(config => {\n      this.config = config;\n\n      this.onPageChange(1);\n    });\n  }\n\n  ngOnDestroy() {\n  }\n\n  formatAffectedRows(rows: string) {\n    return rows.replace(/,/g, \", \");\n  }\n\n  formatValidationResolve(obj: any) {\n    return JSON.stringify(obj);\n  }\n\n  onPageChange(pageNumber: any): void {\n\n    this.message = null;\n\n    this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n\n      this.job = response;\n\n      this.page = this.job.exportErrors;\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n                                    <span *ngIf=\"config == null || !config.isImport\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n                                    </span>\n                                    <span *ngIf=\"config != null && config.isImport\">Resource</span>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th *ngIf=\"config == null || !config.isImport\" class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td  *ngIf=\"config == null || !config.isImport\" class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild } from \"@angular/core\";\nimport {Location} from '@angular/common';\nimport { ActivatedRoute, Params, Router, RoutesRecognized } from \"@angular/router\";\nimport { Map, LngLatBoundsLike, NavigationControl, AttributionControl, IControl, LngLatBounds } from \"mapbox-gl\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { AllGeoJSON } from \"@turf/helpers\";\nimport bbox from \"@turf/bbox\";\n\nimport { GeoObject } from \"@registry/model/registry\";\nimport { ModalState } from \"@registry/model/location-manager\";\n\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ConfirmModalComponent, SuccessModalComponent } from \"@shared/component\";\n\nimport { AuthService, LocalizationService } from \"@shared/service\";\nimport { ContextLayer, LayerRecord } from \"@registry/model/list-type\";\nimport { GRAPH_LAYER, LayerEvent } from \"./layer-panel.component\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { timeout } from \"d3-timer\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { SelectTypeModalComponent } from \"./select-type-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"location-manager\",\n    providers: [Location],\n    templateUrl: \"./location-manager.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    pageMode: string = \"\";\n    \n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE: ModalState = {\n        SEARCH: 0,\n        VIEW: 1\n    }\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Search results from the server\n     */\n    data: GeoObject[] = [];\n\n    state: {\n        text: string,\n        currentText: string,\n        date: string,\n        currentDate: string,\n        featureText?: string\n    } = { text: \"\", currentText: \"\", date: \"\", currentDate: \"\" }\n\n    /*\n     * Currently selected record\n     */\n    record: LayerRecord;\n\n    /*\n     * Currently highlighted feature\n     */\n    feature: any;\n\n    /*\n     * Flag denoting if an object is currently being editted\n     */\n    isEdit: boolean = false;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    /*\n     *  Mode used to determine what is being show on the left hand panel\n     */\n    mode: number = this.MODE.SEARCH;\n\n    /*\n    *  Flag to indicate if the left handle panel should be displayed or not\n     */\n    showPanel: boolean = false;\n    \n    layers: ContextLayer[] = [];\n\n    backReference: string;\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n    ];\n\n    preventSingleClick: boolean = false;\n\n    /*\n     * Timer for determining double click vs single click\n     */\n    timer: any;\n\n    /*\n     * URL pamaters of the component\n     */\n    params: any = null;\n\n    /*\n    * Subscription for changes to the URL parameters\n    */\n    subscription: Subscription;\n\n    // Flag denoting if the map in loaded and initialized\n    ready: boolean = false;\n\n    // Flag denoting if the map in loaded and initialized\n    searchFeatures: boolean = false;\n\n    // Flag denoting if the search and results panel is enabled at all\n    searchEnabled: boolean = true;\n\n    typeahead: Observable<any> = null;\n\n    @ViewChild(\"simpleEditControl\") simpleEditControl: IControl;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private modalService: BsModalService,\n        private service: RegistryService,\n        private listService: ListTypeService,\n        private mapService: MapService,\n        private geomService: GeometryService,\n        private lService: LocalizationService,\n        private authService: AuthService,\n        private location: Location) { \n            this.location = location; \n        }\n\n    ngOnInit(): void {\n        this.subscription = this.route.queryParams.subscribe(params => {\n            this.handleParameterChange(params);\n        });\n\n        this.searchEnabled = registry.searchEnabled && (this.authService.isRC(false) || this.authService.isRM() || this.authService.isRA());\n\n        this.typeahead = new Observable((observer: Observer<any>) => {\n            this.handleFeatureSearch(observer);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n        this.subscription.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n        const layer = this.baseLayers[0];\n\n        const mapConfig: any = {\n            container: \"map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    mapbox: {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox\"\n                        // \"source-layer\": \"mapbox_satellite_full\"\n                    }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            center: [-41.44427718989905, 41.897852]\n        };\n\n        if (this.params.bounds != null && this.params.bounds.length > 0) {\n            mapConfig.bounds = new LngLatBounds(JSON.parse(this.params.bounds));\n        }\n        \n        mapConfig.logoPosition = \"bottom-right\";\n\n        this.map = new Map(mapConfig);\n\n        this.map.on(\"load\", () => {\n            this.ready = true;\n\n            this.initMap();\n        });\n\n        if (this.simpleEditControl) {\n            this.map.addControl(this.simpleEditControl);\n        }\n    }\n\n    /**\n    *\n    * Method responsible for parsing the state from the URL parameters and determining if\n    * the model of the widget needs to be updated or not.\n    *\n    * */\n    handleParameterChange(params: Params): void {\n        this.params = params;\n\n        if (this.ready) {\n            let mode = this.MODE.SEARCH;\n            let showPanel = false;\n\n            if (this.params != null) {\n                // Handle parameters for searching for a geo object\n                if (this.params.text != null) {\n                    if (this.params.text !== this.state.currentText || this.params.date !== this.state.currentDate) {\n                        this.state.text = this.params.text;\n                        this.state.date = this.params.date;\n\n                        this.handleSearch(this.params.text, this.params.date);\n                    }\n\n                    showPanel = true;\n                }\n\n                // Handle parameters for selecting a geo object\n                if (this.params.type != null && this.params.code != null) {\n                    if (this.record == null || this.record.type == null || this.record.type.code !== this.params.type || this.record.code !== this.params.code) {\n                        this.handleSelect(this.params.type, this.params.code, this.params.uid);\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                // Handle parameters for select a record from a context layer\n                if (this.params.version != null && this.params.uid != null) {\n                    if (this.record == null || this.feature == null || this.feature.source !== this.params.version || this.feature.id !== this.params.uid) {\n                        this.handleRecord(this.params.version, this.params.uid);\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n                \n                if (this.params.pageContext) {\n                    this.pageMode = this.params.pageContext;\n                }\n                \n                // Keep the sidebar open if toggling a context layer when the sidebar is already open.\n                // This only happens on a fresh page load when sidebar is open (no search results or obj focus)\n                if (this.showPanel && this.pageMode === \"EXPLORER\") {\n                    showPanel = true;\n                }\n                \n            } \n\n            this.changeMode(mode);\n            this.setPanel(showPanel);\n        }\n    }\n\n    handleFeatureSearch(observer: Observer<any>): void {\n        const localeProperty = \"displayLabel_\" + navigator.language.toLowerCase();\n\n        // Search features\n        if (this.ready && this.map != null && this.state.featureText != null) {\n            const value = this.state.featureText.toLocaleLowerCase();\n            const features = this.map.queryRenderedFeatures().filter(feature => {\n                if (feature.source !== GRAPH_LAYER) {\n                    const localizedName = feature.properties[localeProperty];\n                    let name = localizedName != null && localizedName.length > 0 ? localizedName : feature.properties.displayLabel;\n                    name = name.toLowerCase();\n                    const code = feature.properties.code.toLowerCase();\n\n                    if (name.includes(value) || code.includes(value)) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }).filter((value, index, self) => self.findIndex(feature => {\n                return feature.source === value.source && feature.properties.uid === value.properties.uid;\n            }) === index).map(feature => {\n                const localizedName = feature.properties[localeProperty];\n\n                let name = localizedName != null && localizedName.length > 0 ? localizedName : feature.properties.displayLabel;\n\n                const index = this.layers.findIndex(l => l.oid === feature.source);\n                const layer = this.layers[index];\n\n                return {\n                    id: feature.properties.uid,\n                    code: feature.properties.code,\n                    layer: layer,\n                    name: name,\n                    feature: feature\n                };\n            }).sort((a, b) => (a.name > b.name) ? 1 : -1);\n\n            observer.next(features);\n        }\n    }\n\n    setPanel(showPanel: boolean): void {\n        if (this.showPanel !== showPanel) {\n            this.showPanel = showPanel;\n            \n            timeout(() => {\n                this.map.resize();\n            }, 1);\n        }\n\n    }\n\n    togglePanel(): void {\n        this.setPanel(!this.showPanel);\n    }\n    \n    changeMode(mode: number): void {\n        this.mode = mode;\n\n        if (this.isEdit) {\n            this.geomService.destroy(false);\n        }\n\n        if (this.mode === this.MODE.SEARCH) {\n            this.isEdit = false;\n\n            if (this.feature != null) {\n                this.map.removeFeatureState(this.feature);\n            }\n\n            this.record = null;\n            this.feature = null;\n        }\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl({ visualizePitch: true }), \"top-right\");\n        this.map.addControl(new AttributionControl({ compact: true }), \"top-right\");\n\n        this.map.on(\"click\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"moveend\", (event: any) => {\n            const bounds: LngLatBounds = this.map.getBounds();\n            const array = bounds.toArray();\n\n            let url = this.router.createUrlTree([], {\n                relativeTo: this.route,\n                queryParams: { bounds: JSON.stringify(array) },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            }).toString();\n\n            this.location.go(url);\n        });\n\n        // if (this.params.bounds != null && this.params.bounds.length > 0) {\n        //     const bounds = JSON.parse(this.params.bounds);\n\n        //     this.map.fitBounds(new LngLatBounds(bounds), { animate: false });\n        // }\n\n        this.handleParameterChange(this.params);\n    }\n\n    onZoomTo(oid: string): void {\n        this.listService.getBounds(oid).then(bounds => {\n            if (bounds && Array.isArray(bounds)) {\n                let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                this.map.fitBounds(llb, { padding: 50, animate: true, maxZoom: 20 });\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(layer: ContextLayer): void {\n        if (!this.isEdit) {\n            this.listService.getVersion(layer.oid).then(version => {\n                if (!version.isAbstract) {\n                    this.select({\n                        properties: {\n                            type: version.typeCode,\n                            code: \"__NEW__\"\n                        }\n                    }, null);\n                } else {\n                    this.bsModalRef = this.modalService.show(SelectTypeModalComponent, {\n                        animated: true,\n                        backdrop: true,\n                        ignoreBackdropClick: true\n                    });\n                    this.bsModalRef.content.init(version, typeCode => {\n                        this.select({\n                            properties: {\n                                type: typeCode,\n                                code: \"__NEW__\"\n                            }\n                        }, null);\n                    });\n                }\n            });\n        }\n    }\n\n    handleMapClickEvent(e: any): void {\n        if (!this.isEdit) {\n            const features = this.map.queryRenderedFeatures(e.point);\n\n            if (features != null && features.length > 0) {\n                const feature = features[0];\n\n                if (feature.properties.uid != null) {\n                    if (feature.source === GRAPH_LAYER) {\n                        this.select(feature, null);\n                    } else {\n                        this.router.navigate([], {\n                            relativeTo: this.route,\n                            queryParams: { type: null, code: null, version: feature.source, uid: feature.properties.uid },\n                            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    onPanelCancel(): void {\n        this.clearRecord();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        if (applyInfo.isChangeRequest) {\n            if (this.backReference != null && this.backReference.length >= 2 && this.backReference.substring(0, 2) === \"CR\") {\n                this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n            } else {\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n                this.bsModalRef.content.cancelText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n                this.bsModalRef.content.onCancel.subscribe(() => {\n                    this.clearRecord();\n                });\n            }\n        } else {\n            this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n            this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n            this.bsModalRef.content.onConfirm.subscribe(() => {\n                this.onPanelCancel();\n            });\n        }\n    }\n\n    addLayers(): void {\n        this.layers.forEach(cLayer => {\n            this.addLayer(cLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        // this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n        this.baseLayers.forEach(baseLayer => {\n            baseLayer.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.map.setStyle({\n            version: 8,\n            name: layer.name,\n            metadata: {\n                \"mapbox:autocomposite\": true\n            },\n            sources: {\n                mapbox: {\n                    type: \"raster\",\n                    url: layer.url,\n                    tileSize: 256\n                }\n            },\n            sprite: layer.sprite,\n            glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n            layers: [\n                {\n                    id: layer.id,\n                    type: \"raster\",\n                    source: \"mapbox\"\n                    // \"source-layer\": \"mapbox_satellite_full\"\n                }\n            ]\n        });\n    }\n\n    onToggleSearch(): void {\n        this.searchFeatures = !this.searchFeatures;\n    }\n\n    search(): void {\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { text: this.state.text, date: this.state.date, type: null, code: null, version: null, uid: null },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    handleSearch(text: string, date: string): void {\n        this.geomService.destroy(false);\n        this.mapService.search(text, date).then(data => {\n            this.state.currentText = text;\n            this.state.currentDate = date;\n\n            this.showPanel = true;\n\n            if (this.data.length > 0) {\n                (<any> this.map.getSource(GRAPH_LAYER)).setData(data);\n            }\n\n            this.setData(data.features);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    zoomToFeature(node: GeoObject, event: MouseEvent): void {\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.preventSingleClick = false;\n        const delay = 200;\n\n        this.timer = setTimeout(() => {\n            if (!this.preventSingleClick) {\n                if (node && node.geometry != null) {\n                    const bounds = bbox(node as AllGeoJSON) as LngLatBoundsLike;\n\n                    let padding = 50;\n                    let maxZoom = 20;\n\n                    // Zoom level was requested to be reduced when displaying point types as per #420\n                    if (node.geometry.type === \"Point\" || node.geometry.type === \"MultiPoint\") {\n                        padding = 100;\n                        maxZoom = 12;\n                    }\n\n                    this.map.fitBounds(bounds, { padding: padding, animate: true, maxZoom: maxZoom });\n                }\n            }\n        }, delay);\n    }\n\n    handleRecord(list: string, uid: string): void {\n        // Get the feature data from the server and populate the left-hand panel\n        this.listService.record(list, uid).then(record => {\n            if (this.feature != null) {\n                this.map.removeFeatureState(this.feature);\n            }\n\n            // Highlight the feature on the map\n            this.map.setFeatureState(this.feature = {\n                source: list,\n                sourceLayer: \"context\",\n                id: uid\n            }, {\n                hover: true\n            });\n\n            this.mode = this.MODE.VIEW;\n            this.record = record;\n\n            if (this.record.recordType === \"GEO_OBJECT\") {\n                this.geomService.destroy(false);\n\n                this.geomService.initialize(this.map, record.type.geometryType, false);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    clearRecord() {\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { type: null, code: null, version: null, uid: null },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    select(node: any, event: MouseEvent): void {\n        if (!this.isEdit) {\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { type: node.properties.type, code: node.properties.code, uid: node.properties.uid, version: null },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            });\n        }\n    }\n\n    handleSelect(type: string, code: string, uid: string) {\n        // Highlight the feature on the map\n        this.service.getGeoObjectTypes([type], null).then(types => {\n            if (this.feature != null) {\n                this.map.removeFeatureState(this.feature);\n            }\n\n            // Highlight the feature on the map\n            if (this.feature && code !== \"__NEW__\") {\n                this.map.setFeatureState(this.feature = {\n                    source: GRAPH_LAYER,\n                    id: uid\n                }, {\n                    hover: true\n                });\n            }\n\n            this.mode = this.MODE.VIEW;\n\n            const type = types[0];\n            this.record = {\n                recordType: \"GEO_OBJECT\",\n                type: type,\n                code: code,\n                forDate: this.state.currentDate\n            };\n\n            if (this.record.recordType === \"GEO_OBJECT\") {\n                this.geomService.destroy(false);\n\n                this.geomService.initialize(this.map, this.record.type.geometryType, false);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setData(data: GeoObject[]): void {\n        this.data = data;\n    }\n\n    onLayerChange(event: LayerEvent): void {\n        const layer = event.layer;\n\n        if (layer.active) {\n            this.addLayer(layer, event.prevLayer);\n        } else {\n            this.removeLayer(layer);\n        }\n    }\n\n    onReorderLayers(layers: ContextLayer[]): void {\n        for (let i = layers.length - 1; i > -1; i--) {\n            const layer = layers[i];\n\n            this.map.moveLayer(layer.oid + \"-polygon\");\n            this.map.moveLayer(layer.oid + \"-points\");\n            this.map.moveLayer(layer.oid + \"-label\");\n        }\n    }\n\n    removeLayer(layer: ContextLayer): void {\n        const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n        if (index !== -1) {\n            const source = layer.oid;\n\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.layers.splice(index, 1);\n        }\n    }\n\n    addLayer(layer: ContextLayer, otherLayer?: ContextLayer): void {\n        if (layer.oid === GRAPH_LAYER) {\n            if (this.ready) {\n                const source = layer.oid;\n                const prevLayer = otherLayer != null ? otherLayer.oid + \"-polygon\" : null;\n\n                this.map.addSource(source, {\n                    type: \"geojson\",\n                    data: {\n                        type: \"FeatureCollection\",\n                        features: this.data as any\n                    },\n                    promoteId: \"uid\"\n                });\n\n                // Polygon layer\n                this.map.addLayer({\n                    id: source + \"-polygon\",\n                    type: \"fill\",\n                    source: source,\n                    layout: {},\n                    paint: {\n                        \"fill-color\": [\n                            \"case\",\n                            [\"boolean\", [\"feature-state\", \"hover\"], false],\n                            SELECTED_COLOR,\n                            layer.color\n                        ],\n                        \"fill-opacity\": 0.8,\n                        \"fill-outline-color\": \"black\"\n                    },\n                    filter: [\"all\",\n                        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                    ]\n                }, prevLayer);\n\n                // Point layer\n                this.map.addLayer({\n                    id: source + \"-points\",\n                    type: \"circle\",\n                    source: source,\n                    paint: {\n                        \"circle-radius\": 10,\n                        \"circle-color\": [\n                            \"case\",\n                            [\"boolean\", [\"feature-state\", \"hover\"], false],\n                            SELECTED_COLOR,\n                            layer.color\n                        ],\n                        \"circle-stroke-width\": 2,\n                        \"circle-stroke-color\": \"#FFFFFF\"\n                    },\n                    filter: [\"all\",\n                        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                    ]\n                }, prevLayer);\n\n                // Label layer\n                this.map.addLayer({\n                    id: source + \"-label\",\n                    source: source,\n                    type: \"symbol\",\n                    paint: {\n                        \"text-color\": \"black\",\n                        \"text-halo-color\": \"#fff\",\n                        \"text-halo-width\": 2\n                    },\n                    layout: {\n                        \"text-field\": [\"get\", \"localizedValue\", [\"get\", \"displayLabel\"]],\n                        \"text-font\": [\"NotoSansRegular\"],\n                        \"text-offset\": [0, 0.6],\n                        \"text-anchor\": \"top\",\n                        \"text-size\": 12\n                    }\n                }, prevLayer);\n            }\n\n            this.layers.push(layer);\n        } else {\n            this.addVectorLayer(layer, otherLayer);\n        }\n    }\n\n    addVectorLayer(layer: ContextLayer, otherLayer?: ContextLayer): void {\n        if (this.ready) {\n            const source = layer.oid;\n            const prevLayer = otherLayer != null ? otherLayer.oid + \"-polygon\" : null;\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + registry.contextPath + \"/list-type/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))],\n                promoteId: \"uid\"\n            });\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"hover\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"hover\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n        }\n\n        this.layers.push(layer);\n    }\n\n    onFeatureSelect(event: any): void {\n        if (!this.isEdit) {\n            this.state.featureText = event.item.name;\n\n            const feature = event.item.feature;\n\n            if (feature.properties.uid != null) {\n                this.listService.getBounds(feature.source, feature.properties.uid).then(bounds => {\n                    if (bounds && Array.isArray(bounds)) {\n                        let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                        this.map.fitBounds(llb, { padding: 50, animate: true, maxZoom: 20 });\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n\n            if (feature.properties.uid != null) {\n                this.router.navigate([], {\n                    relativeTo: this.route,\n                    queryParams: { type: null, code: null, version: feature.source, uid: feature.properties.uid },\n                    queryParamsHandling: \"merge\" // remove to replace all query params by provided\n                });\n            }\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.name }} : {{ model.code }}</h5>\n  <h6>\n    {{model.layer.label}} - {{ model.layer.forDate }}\n    (\n    <span *ngIf=\"model.layer.versionNumber !== 0\">\n      <localize key=\"list.type.version\"></localize>\n      {{model.layer.versionNumber}}\n    </span>\n    <localize *ngIf=\"model.layer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n    )\n  </h6>\n</ng-template>\n\n\n<div class=\"\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div *ngIf=\"searchEnabled\" class=\"row\" style=\"position: absolute;top: 0;bottom: 0;left: 10px;right: 10px;height: 100%;\">\n        <div class=\"col-md-5\" style=\"z-index:999;padding-bottom: 10px;\" [style.background]=\"showPanel ? 'white' : 'transparent'\">\n        \n          <div *ngIf=\"!showPanel\" class=\"map-button clickable\" (click)=\"!isEdit && togglePanel()\">\n            <div class=\"map-button-icon\">\n                <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n            </div>\n          </div>\n       \n          <article class=\"panel-toggle\" *ngIf=\"showPanel\">\n            \n            <div >\n              <div class=\"row\">\n                  <div class=\"col-md-12\">\n                      <label class=\"radio\" style=\"display:inline-block;\">\n                        <input type=\"radio\" name=\"userActive\" [value]=\"false\" [(ngModel)]=\"searchFeatures\">\n                        <span><localize key=\"explorer.search.search.graph\"></localize></span>\n                      </label>\n                      <label class=\"radio\" style=\"display:inline-block;margin-left:10px;\">\n                        <input type=\"radio\" name=\"userActive\" [value]=\"true\" [(ngModel)]=\"searchFeatures\" [disabled]=\"(layers.length < 1)\">\n                        <span><localize key=\"explorer.search.search.map.features\"></localize></span>\n                      </label>\n                      \n                      <div style=\"float:right;\">\n                          <i class=\"fa fa-compress clickable\" (click)=\"!isEdit && togglePanel()\" \n                          style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n                      </div>\n                  </div>\n              </div>\n              <div class=\"row\">\n                <!-- \n                    Search features from the working versions of lists\n                -->\n                <ng-container *ngIf=\"searchEnabled && !searchFeatures\">\n                  <div class=\"col-md-4\">\n                    <date-field [(value)]=\"state.date\" label=\"\" [inputName]=\"'date'\" [allowInfinity]=\"false\"\n                      [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" style=\"display:inline-grid;\">\n                    </date-field>\n                  </div>\n                  <div class=\"col-md-8\">\n                    <div class=\"input-group\">\n                      <input type=\"text\" class=\"form-control\" [placeholder]=\"'explorer.search.placeholder' | localize\"\n                        (keyup.enter)=\"search()\" [(ngModel)]=\"state.text\" name=\"text\">\n                      <span class=\"input-group-btn\">\n                        <button [disabled]=\"isEdit\" class=\"btn btn-primary\" type=\"button\" (click)=\"search()\">\n                          <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n                        </button>\n                      </span>\n                    </div>\n                  </div>\n                </ng-container>\n      \n                <!-- \n                    Search features that are rendered in the map \n                -->\n                <ng-container *ngIf=\"searchFeatures\">\n                  <div class=\"col-md-12\">\n                    <div>\n                      <input type=\"text\" class=\"form-control\" placeholder=\"Search features\" [(ngModel)]=\"state.featureText\"\n                        name=\"featureText\" [disabled]=\"isEdit\" [typeaheadAsync]=\"true\" [typeahead]=\"typeahead\"\n                        [typeaheadItemTemplate]=\"customItemTemplate\" (typeaheadOnSelect)=\"onFeatureSelect($event)\"\n                        [typeaheadMinLength]=\"1\" [typeaheadWaitMs]=\"300\" [typeaheadOptionsLimit]=\"20\">\n                    </div>\n                  </div>\n                </ng-container>\n      \n              </div>\n            </div>\n          </article>\n        </div>\n      </div>\n\n\n    <div class=\"row\">\n      <div *ngIf=\"showPanel\" id=\"navigator-left-sidebar\" class=\"col-md-5 lw-inner-col\"\n        style=\"height: calc(100vh - 144px);overflow-y: auto;\">\n\n        <ng-container *ngIf=\"mode === MODE.SEARCH && searchEnabled\">\n\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div id=\"hierarchy-tree-container\"\n                class=\"location-management-widget-section location-management-list-container\">\n                <div class=\"list-group\">\n\n                  <div *ngFor=\"let node of data; let i = index\" class=\"list-group-item\">\n                    <div class=\"card card-default\" (click)=\"select(node, $event)\">\n                      <div class=\"card-body\">\n                        <i class=\"fa fa-map-marker clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\"\n                          (click)=\"zoomToFeature(node, $event)\" [title]=\"'explorer.zoom.label' | localize\"></i>\n                        <h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"View Geo-Object details\">\n                          {{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n                      </div>\n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"mode === MODE.VIEW && record != null\">\n          <div *ngIf=\"record.recordType === 'GEO_OBJECT'\" class=\"row\">\n            <div class=\"col-md-12\">\n              <feature-panel [type]=\"record.type\" [code]=\"record.code\" [forDate]=\"record.forDate\" [readOnly]=\"false\"\n                (modeChange)=\"onModeChange($event)\" (panelCancel)=\"clearRecord()\" (panelSubmit)=\"onPanelSubmit($event)\">\n              </feature-panel>\n            </div>\n          </div>\n          <div *ngIf=\"record.recordType === 'LIST'\" class=\"row\">\n            <div class=\"col-md-12\">\n              <record-panel [record]=\"record\" (close)=\"clearRecord()\"></record-panel>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n\n      <div [ngClass]=\"{'col-md-7':showPanel, 'col-md-12':!showPanel}\" >\n        <div class=\"row\">\n\n          <article class=\"base-layer-panel\" [ngClass]=\"{'second-map-button' : searchEnabled && !showPanel}\">\n            <layer-panel (layerChange)=\"onLayerChange($event)\" (reorder)=\"onReorderLayers($event)\"\n              (zoomTo)=\"onZoomTo($event.oid)\" (create)=\"onCreate($event)\" [baselayerIconHover]=\"(this.pageMode === 'EXPLORER')\"\n              [includeGraphLayer]=\"data != null && data.length > 0\">\n            </layer-panel>\n          </article>\n\n          <div id=\"map\" class=\"map-view-port\"></div>\n\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\n\n\n@Component({\n    selector: \"select-type-modal\",\n    templateUrl: \"./select-type-modal.component.html\",\n    styleUrls: []\n})\nexport class SelectTypeModalComponent implements OnInit, OnDestroy {\n\n    version: ListTypeVersion;\n\n    type: string;\n\n    /*\n     * Called on confirm\n     */\n    onCreate: Subject<string>;\n\n    subscription: Subscription;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onCreate = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.onCreate.unsubscribe();\n    }\n\n    init(version: ListTypeVersion, observer: Observer<string>): void {\n        this.version = version;\n        this.subscription = this.onCreate.subscribe(observer);\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onCreate.next(this.type);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>                        \n        </h1>\n    </div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" name=\"export-form\">\n        <fieldset *ngIf=\"version != null\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n\n                    <select id=\"type\" name=\"type\" class=\"select-area\" [(ngModel)]=\"type\" required>\n                        <option></option>\n                        <option *ngFor=\"let subtype of version.subtypes\" [value]=\"subtype.code\">\n                            {{subtype.label}}                            \n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"form.invalid\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { CreateGeoObjectAction } from \"@registry/model/crtable\";\n\n@Component({\n    selector: \"feature-panel\",\n    templateUrl: \"./feature-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class FeaturePanelComponent implements OnInit, OnChanges {\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\",\n        GEOMETRY: \"GEOMETRY\"\n    }\n\n    @Input() datasetId: string;\n\n    @Input() type: GeoObjectType;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() code: string;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @Output() featureChange = new EventEmitter<GeoObjectOverTime>();\n    @Output() modeChange = new EventEmitter<boolean>();\n    @Output() panelCancel = new EventEmitter<void>();\n    @Output() panelSubmit = new EventEmitter<{ isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }>();\n\n    _isValid: boolean = true;\n\n    bsModalRef: BsModalRef;\n\n    mode: string = null;\n\n    isMaintainer: boolean;\n\n    // The current state of the GeoObject in the GeoRegistry\n    preGeoObject: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    postGeoObject: GeoObjectOverTime;\n\n    attribute: AttributeType = null;\n\n    isNew: boolean = false;\n\n    isEdit: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    hierarchy: HierarchyOverTime = null;\n\n    reason: string = \"\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private modalService: BsModalService, private authService: AuthService, private geometryService: GeometryService) { }\n\n    ngOnInit(): void {\n        this.isMaintainer = this.authService.isSRA() || this.authService.isOrganizationRA(this.type.organizationCode) || this.authService.isGeoObjectTypeOrSuperRM(this.type);\n        this.mode = \"ATTRIBUTES\";\n\n        //        this.isEdit = !this.readOnly;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.type != null || changes.code != null) {\n            this.refresh();\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this._isValid = valid;\n    }\n\n    isValid(): boolean {\n        return this._isValid && this.attributeEditor && this.attributeEditor.isValid();\n    }\n\n    updateCode(code: string): void {\n        this.code = code;\n    }\n\n    refresh(): void {\n        this.postGeoObject = null;\n        this.preGeoObject = null;\n        this.hierarchies = null;\n\n        if (this.code != null && this.type != null) {\n            if (this.code !== \"__NEW__\") {\n                this.isNew = false;\n\n                this.service.getGeoObjectOverTime(this.code, this.type.code).then(geoObject => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(geoObject)).attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n\n                this.service.getHierarchiesForGeoObject(this.code, this.type.code).then((hierarchies: HierarchyOverTime[]) => {\n                    this.hierarchies = hierarchies;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else {\n                this.isNew = true;\n\n                this.service.newGeoObjectOverTime(this.type.code).then(retJson => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, retJson.geoObject.attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n\n                    this.hierarchies = retJson.hierarchies;\n                    this.setEditMode(true);\n                });\n            }\n        }\n    }\n\n    onCancelInternal(): void {\n        this.panelCancel.emit();\n\n        // if (this.code === '__NEW__') {\n        //    this.updateCode(null);\n        // }\n        // else {\n        //    this.updateCode(this.code);\n        // }\n    }\n\n    canSubmit(): boolean {\n        return this.isValid() &&\n            (this.isMaintainer || (this.reason && this.reason.trim().length > 0)) &&\n            (this.isNew || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    onSubmit(): void {\n        if (this.isNew) {\n            const action: CreateGeoObjectAction = this.attributeEditor.getActions()[0];\n\n            this.service.applyGeoObjectCreate(action.parentJson, action.geoObjectJson, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n\n            // this.service.applyGeoObjectCreate(this.hierarchies, this.postGeoObject, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n            //     if (!applyInfo.isChangeRequest) {\n            //         this.featureChange.emit(this.postGeoObject);\n            //     }\n            //     this.panelSubmit.emit(applyInfo);\n            // }).catch((err: HttpErrorResponse) => {\n            //     this.error(err);\n            // });\n        } else {\n            this.service.applyGeoObjectEdit(this.postGeoObject.attributes.code, this.type.code, this.attributeEditor.getActions(), this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n\n        this.geometryService.stopEditing();\n    }\n\n    onManageAttributeVersion(attribute: AttributeType): void {\n        this.attribute = attribute;\n        this.mode = this.MODE.VERSIONS;\n    }\n\n    onManageHiearchyVersion(hierarchy: HierarchyOverTime): void {\n        this.hierarchy = hierarchy;\n        this.mode = this.MODE.HIERARCHY;\n    }\n\n    onEditAttributes(): void {\n        this.setEditMode(!this.isEdit);\n\n        window.document.getElementById(\"navigator-left-sidebar\").scroll({\n            top: 0,\n            behavior: \"smooth\"\n        });\n    }\n\n    setEditMode(value: boolean): void {\n        this.isEdit = value;\n        this.reason = null;\n\n        this.modeChange.emit(this.isEdit);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div style=\"padding-top:110px;\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{type.label.localizedValue}}</h3>\n    </div>      \n  </div>\n  <div *ngIf=\"mode == MODE.ATTRIBUTES && postGeoObject != null\">\n    <!-- Attributes tab -->\n    <geoobject-shared-attribute-editor  *ngIf=\"hierarchies && postGeoObject\"\n      #attributeEditor \n      [geoObjectType]=\"type\" \n      [postGeoObject]=\"postGeoObject\" \n      [isNew]=\"isNew\" \n      [isGeometryInlined]=\"false\"\n      [hierarchies]=\"hierarchies\"\n      [readOnly]=\"!isEdit\"\n      (valid)=\"setValid($event)\"\n      [filterDate]=\"forDate\"\n      [forDate]=\"forDate\"\n      [datasetId]=\"datasetId\"\n      > \n    </geoobject-shared-attribute-editor>\n    \n    <div *ngIf=\"isEdit && !isMaintainer\" class=\"form-group\" style=\"z-index: 0;\">\n      <label> \n        <localize key=\"change.request.reason.label\"></localize>\n      </label>\n      <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" class=\"form-control\" name=\"reason-input\" required></textarea>\n    </div>\n\n    <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    \n      <button *ngIf=\"!readOnly && !isEdit\" type=\"submit\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n        <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n      </button>\n      \n      <button *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-default\" (click)=\"onCancelInternal()\">\n        <localize key=\"modal.button.cancel\"></localize>\n      </button>\n      <button *ngIf=\"isEdit\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!canSubmit()\">\n        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n      </button>\n\n    </div>\n  </div>\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from \"@angular/core\";\nimport { LayerRecord } from \"@registry/model/list-type\";\n\n@Component({\n    selector: \"record-panel\",\n    templateUrl: \"./record-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class RecordPanelComponent {\n    @Input() record: LayerRecord\n    @Output() close = new EventEmitter<void>();\n\n    onClose():void {\n        this.close.emit();\n    }\n}\n","<div style=\"margin-top: 110px;\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{record.typeLabel.localizedValue}}</h3>\n    </div>      \n  </div>\n\n  <form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of record.attributes let i = index\" class=\"list-group-item\"\n              style=\"text-align:left;border:none;padding:0;\">\n              <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span>\n                      {{attr.label}}\n                    </span>\n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <input type=\"text\" [(ngModel)]=\"record.data[attr.name]\" [name]=\"'mod-' + attr.name\" disabled=\"true\">\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n  <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n      <localize key=\"modal.button.cancel\"></localize>\n    </button>\n  </div>\n\n</div>","import { Component } from \"@angular/core\";\nimport { AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"historical-event-module\",\n    templateUrl: \"./historical-event-module.component.html\",\n    styleUrls: []\n})\nexport class HistoricalEventModuleComponent {\n\n    tab: string = \"HISTORICAL-EVENT\";\n\n    readOnly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.readOnly = this.authService.isRC(true);\n        this.tab = this.readOnly ? \"HISTORICAL-REPORT\" : \"HISTORICAL-EVENT\";\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>\n              <localize *ngIf=\"tab === 'HISTORICAL-EVENT'\" key=\"transition.event.events\"></localize>\n              <localize *ngIf=\"tab === 'HISTORICAL-REPORT'\" key=\"historical.row.report\"></localize>\n            </h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <div *ngIf=\"!readOnly\" class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"form-group button-row\">\n\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-EVENT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-EVENT' ? 'cr-filter-link-active' : ''\"\n                    style=\"border-bottom: 1px solid;\">\n                    <localize key=\"transition.event.events\"></localize> \n                  </a>\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-REPORT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-REPORT' ? 'cr-filter-link-active' : ''\"\n                    style=\"margin-left: 5px;border-bottom:1px solid;\">\n                    <localize key=\"historical.row.report\"></localize>\n                  </a>\n\n                </div>\n                <hr style=\"border-top:solid 3px #6BA542\" />\n\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <transition-event-table *ngIf=\"tab === 'HISTORICAL-EVENT'\"></transition-event-table>\n                <historical-report *ngIf=\"tab === 'HISTORICAL-REPORT'\"></historical-report>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventModalComponent } from \"./transition-event-modal.component\";\nimport { AuthService, DateService, LocalizationService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\n@Component({\n\n    selector: \"transition-event-table\",\n    templateUrl: \"./transition-event-table.component.html\",\n    styleUrls: [\"./transition-event-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class TransitionEventTableComponent {\n\n    page: PageResult<TransitionEvent> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    attrConditions: any = [];\n\n    dateCondition = {\n        attribute: \"eventDate\",\n        startDate: \"\",\n        endDate: \"\"\n    };\n\n    beforeTypeCondition = {\n        attribute: \"beforeTypeCode\",\n        value: \"\"\n    };\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[] = [];\n\n    bsModalRef: BsModalRef;\n\n    readOnly: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private modalService: BsModalService, private iService: IOService, public dateService: DateService, private authService: AuthService, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.readOnly = !this.authService.isSRA() && !this.authService.isRA() && !this.authService.isRM();\n        this.refresh();\n\n        this.attrConditions.push(this.dateCondition);\n        this.attrConditions.push(this.beforeTypeCondition);\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            this.types = this.filterTypesBasedOnMyOrg(types);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    filterTypesBasedOnMyOrg(types) {\n        let isSRA = this.authService.isSRA();\n        let myOrgTypes = [];\n        let myOrgs: string[] = this.authService.getMyOrganizations();\n\n        for (let i = 0; i < types.length; ++i) {\n            const type = types[i];\n            const orgCode = type.orgCode;\n            let myOrgIndex = myOrgs.indexOf(orgCode);\n\n            if (myOrgIndex !== -1 || isSRA) {\n                myOrgTypes.push(type);\n            }\n        }\n\n        return myOrgTypes;\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getPage(this.page.pageSize, pageNumber, this.attrConditions).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    filterChange(): void {\n        this.refresh(this.page.pageNumber);\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(false);\n        this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n            this.refresh(this.page.pageNumber);\n        });\n    }\n\n    deleteEvent(jsEvent, transitionEvent: TransitionEvent): void {\n        jsEvent.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + transitionEvent.eventId + \"]\";\n        this.bsModalRef.content.data = transitionEvent;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.service.delete(transitionEvent).then(response => {\n                this.refresh(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(event: TransitionEvent): void {\n        this.service.getDetails(event.oid).then(response => {\n            this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(false, response);\n            this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n                this.refresh(this.page.pageNumber);\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n\n<div>\n  <div class=\"row\" style=\"padding-top:10px; padding-bottom: 10px;\">\n    <span class=\"col-md-4\">\n      <label for=\"beforeTypeFilter\">\n        <localize key=\"transition.event.beforeType\"></localize>\n      </label>\n      <select id=\"beforeTypeFilter\" name=\"beforeTypeFilter\" class=\"select-area\" [(ngModel)]=\"beforeTypeCondition.value\"\n        (change)=\"filterChange()\">\n        <option></option>\n        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n      </select>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"startDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.startDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'startDateFilter'\" [allowFutureDates]=\"false\" name=\"startDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\">\n      </date-field>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"endDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.endDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'endDateFilter'\" [allowFutureDates]=\"false\" name=\"endDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\"></date-field>\n    </span>\n  </div>\n  <div class=\"row\">\n    <span class=\"col-md-4\"></span>\n    <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(dateCondition.startDate, dateCondition.endDate)\">\n      <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n    </span>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.actions\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.date\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.id\"></localize>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-event\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:left;\">\n                <a *ngIf=\"event.permissions.includes('READ')\" (click)=\"onView(event)\" [ngClass]=\"{'fa-pencil' : event.permissions.indexOf('WRITE') !== -1, 'fa-eye' : event.permissions.indexOf('WRITE') === -1}\" class=\"fa\" aria-hidden=\"true\"></a>\n                <a *ngIf=\"event.permissions.includes('DELETE')\" (click)=\"deleteEvent($event, event)\" class=\"fa fa-trash\" aria-hidden=\"true\"></a>\n              </td>\n              <td class=\"col-md-1\">\n                <h5><strong>{{formatDate(event.eventDate)}}</strong></h5>\n              </td>\n              <td class=\"col-md-4\">\n                <h5><strong>{{event.description.localizedValue}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.beforeTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.afterTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.eventId}}</strong></h5>\n              </td>\n            </tr>\n          </ng-template>\n        </tbody>\n      </table>\n      <div *ngIf=\"!this.readOnly\" style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n          <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n            <localize key=\"hierarchy.management.button.create\"></localize>\n          </button>\n        </div>\n      </div>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","/* eslint-disable indent */\n/* eslint-disable quotes */\nimport { Component, OnDestroy, OnInit, ViewChild, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observable, Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { IOService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Transition, TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\n\nimport { DndDropEvent } from \"ngx-drag-drop\";\nimport * as uuid from \"uuid\";\n\n/* D3 Stuffs */\nimport * as d3 from \"d3\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const VIEWPORT_SCALE_FACTOR_X: number = 1.0;\nexport const VIEWPORT_SCALE_FACTOR_Y: number = 1.0;\n\nexport const GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR: string = \"#6BA542\"; // #3E2A5A or \"purple\"\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\n@Component({\n    selector: \"transition-event-modal\",\n    templateUrl: \"./transition-event-modal.component.html\",\n    styleUrls: [\"./transition-event-modal.component.css\"]\n})\nexport class TransitionEventModalComponent implements OnInit, OnDestroy {\n\n    @ViewChild(\"typeaheadParent\") typeaheadParent;\n\n    message: string = null;\n\n    event: TransitionEvent = null;\n\n    activeTransition: Transition = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onEventChange: Subject<TransitionEvent>;\n\n    afterTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    beforeTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    valid: boolean = false;\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: true\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private changeDetector: ChangeDetectorRef, public rService: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onEventChange = new Subject();\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            let myOrgs: string[] = this.authService.getMyOrganizations();\n            let myOrgTypes = [];\n            let afterTypes = [];\n            let isSRA = this.authService.isSRA();\n            for (let i = 0; i < types.length; ++i) {\n                const orgCode = types[i].orgCode;\n                const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                let myOrgIndex = myOrgs.indexOf(orgCode);\n\n                if (myOrgIndex !== -1 || isSRA) {\n                    afterTypes.push(types[i]);\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n            }\n            this.beforeTypes = myOrgTypes;\n            this.afterTypes = afterTypes;\n\n            this.readonly = this.readonly || this.event.permissions.indexOf(\"WRITE\") === -1;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.onEventChange.unsubscribe();\n    }\n\n    init(readonly: boolean, event?: TransitionEvent): void {\n        this.readonly = readonly;\n\n        if (event != null) {\n            this.event = event;\n        } else {\n            this.event = {\n                beforeTypeCode: \"\",\n                afterTypeCode: \"\",\n                eventDate: \"\",\n                permissions: [\"WRITE\", \"READ\", \"DELETE\", \"CREATE\"],\n                description: this.lService.create(),\n                transitions: []\n            };\n        }\n\n        setTimeout(() => {\n            this.onChange();\n        }, 0);\n    }\n\n    setActiveTransition(transition: Transition) {\n        let highlight = (active: boolean, trans: Transition) => {\n            let colorable = d3.selectAll('#svgHolder p[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],p[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            colorable.style(\"color\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_GO_LABEL_COLOR);\n\n            let fillable = d3.selectAll('#svgHolder circle[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],circle[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            fillable.attr(\"fill\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_CIRCLE_FILL);\n\n            let strokeable = d3.selectAll('#svgHolder path[data-transOid=\"' + trans.oid + '\"]');\n            strokeable.attr(\"stroke\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_LINE_COLOR);\n        };\n\n        if (this.activeTransition != null) {\n            highlight(false, this.activeTransition);\n        }\n\n        this.activeTransition = transition;\n\n        if (transition != null) {\n            highlight(true, transition);\n        }\n    }\n\n    onCreate(): void {\n        this.event.transitions.push({\n            oid: uuid.v4(),\n            isNew: true,\n            sourceCode: \"\",\n            sourceType: \"\",\n            targetCode: \"\",\n            targetType: \"\",\n            transitionType: \"\",\n            impact: \"\",\n            order: this.event.transitions.length\n        });\n    }\n\n    onChange(): void {\n        this.calculateDerivedAttributes();\n        this.renderVisual();\n\n        // Register highlight event listeners\n        let that = this;\n\n        setTimeout(() => {\n            d3.selectAll(\".transition\").on(\"mouseover\", function(mouseEvent) {\n                let d3This: any = this;\n                let transitionOid = d3This.getAttribute(\"data-transOid\");\n\n                let index = that.event.transitions.findIndex(trans => trans.oid === transitionOid);\n\n                that.setActiveTransition(that.event.transitions[index]);\n            });\n            d3.select(\"#transition-container\").on(\"mouseleave\", function(mouseEvent) {\n                that.setActiveTransition(null);\n            });\n        }, 0);\n\n        this.validChange();\n    }\n\n    getTypeAheadObservable(isSource: boolean, transition: Transition, typeCode: string, property: string): Observable<any> {\n        let date = isSource ? this.dateService.addDay(-1, this.event.eventDate) : this.event.eventDate;\n        return new Observable((observer: any) => {\n            this.rService.getGeoObjectSuggestions(transition[property], typeCode, null, null, null, date, date).then(results => {\n                let filtered = results.filter(result => {\n                  let pair = {\n                    sourceCode: isSource ? result.code : transition.sourceCode,\n                    targetCode: isSource ? transition.targetCode : result.code\n                  };\n\n                  for (let i = 0; i < this.event.transitions.length; ++i) {\n                      let transition = this.event.transitions[i];\n\n                      if (transition.sourceCode === pair.sourceCode && transition.targetCode === pair.targetCode) {\n                          return false;\n                      }\n                  }\n\n                  return true;\n                });\n\n                observer.next(filtered);\n            });\n        });\n    }\n\n    typeaheadOnSelect(selection: any, transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = selection.item.code;\n            transition.targetType = selection.item.typeCode;\n            transition.targetText = selection.item.name + \" (\" + selection.item.code + \")\";\n        } else {\n            transition.sourceCode = selection.item.code;\n            transition.sourceType = selection.item.typeCode;\n            transition.sourceText = selection.item.name + \" (\" + selection.item.code + \")\";\n        }\n\n        this.onChange();\n    }\n\n    clear(transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = \"\";\n            transition.targetType = \"\";\n            transition.targetText = \"\";\n        } else {\n            transition.sourceCode = \"\";\n            transition.sourceType = \"\";\n            transition.sourceText = \"\";\n        }\n\n        this.onChange();\n    }\n\n    localizeTransitionImpact(impact: string): string {\n        return this.lService.decode(\"transition.event.\" + impact.toLowerCase());\n    }\n\n    localizeTransitionType(type: string): string {\n        return type == null ? null : this.lService.decode(\"transition.event.type.\" + type.toLowerCase());\n    }\n\n    validChange() {\n        setTimeout(() => {\n            this.valid = (this.event.eventDate != null && this.event.eventDate.length > 0) &&\n                this.event.transitions.length > 0 &&\n                this.event.afterTypeCode != null &&\n                this.event.beforeTypeCode != null;\n        }, 0);\n    }\n\n    remove(index: number): void {\n        this.event.transitions.splice(index, 1);\n        this.onChange();\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.event).then(response => {\n            this.onEventChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    calculateDerivedAttributes(): void {\n        let stats = {};\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                if (stats[trans.sourceCode] == null) {\n                    stats[trans.sourceCode] = {\n                        source: 1,\n                        target: 0\n                    };\n                } else {\n                    stats[trans.sourceCode].source++;\n                }\n\n                if (stats[trans.targetCode] == null) {\n                    stats[trans.targetCode] = {\n                        source: 0,\n                        target: 1\n                    };\n                } else {\n                    stats[trans.targetCode].target++;\n                }\n            }\n        });\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let sourceStats = stats[trans.sourceCode];\n                let targetStats = stats[trans.targetCode];\n\n                let updown = \"UPGRADE\";\n                if (trans.transitionType != null && trans.transitionType.indexOf(\"DOWNGRADE\") !== -1) {\n                    updown = \"DOWNGRADE\";\n                }\n\n                if (sourceStats.source === 1 && targetStats.target === 1) {\n                    trans.transitionType = \"REASSIGN\";\n                    trans.impact = \"FULL\";\n                } else if (sourceStats.source > 1) {\n                    trans.impact = \"PARTIAL\";\n\n                    if (targetStats.target > 1) {\n                        trans.transitionType = \"MERGE\";\n                    } else {\n                        trans.transitionType = \"SPLIT\";\n                    }\n                } else if (targetStats.target > 1) {\n                    trans.impact = \"FULL\";\n                    trans.transitionType = \"MERGE\";\n                }\n\n                if (trans.sourceType !== trans.targetType) {\n                    if (trans.transitionType === \"REASSIGN\") {\n                        trans.typeUpdown = updown;\n                        delete trans.typePart;\n                        trans.transitionType = trans.typeUpdown;\n                    } else {\n                        trans.typeUpdown = updown;\n                        trans.typePart = trans.transitionType;\n                        trans.transitionType = trans.typeUpdown + \"_\" + trans.typePart;\n                    }\n                } else {\n                    delete trans.typePart;\n                }\n            }\n        });\n    }\n\n    onChangeTypeUpdown(transition: any): void {\n        if (transition.typePart) {\n            transition.transitionType = transition.typeUpdown + \"_\" + transition.typePart;\n        } else {\n            transition.transitionType = transition.typeUpdown;\n        }\n    }\n\n    /* Drag Drop Transitions */\n    onDragStart(event:DragEvent) {\n        // console.log(\"drag started\", JSON.stringify(event, null, 2));\n    }\n\n    onDragEnd(event:DragEvent) {\n        // console.log(\"drag ended\", JSON.stringify(event, null, 2));\n    }\n\n    onDragged(item: any, type: string) {\n        // console.log(\"onDragged\", item, type);\n    }\n\n    onDraggableCopied(event:DragEvent) {\n        // console.log(\"draggable copied\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableLinked(event:DragEvent) {\n        // console.log(\"draggable linked\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableMoved(event:DragEvent) {\n        // console.log(\"draggable moved\", JSON.stringify(event, null, 2));\n    }\n\n    onDragCanceled(event:DragEvent) {\n        // console.log(\"drag cancelled\", JSON.stringify(event, null, 2));\n    }\n\n    onDragover(event:DragEvent) {\n        // console.log(\"dragover\", JSON.stringify(event, null, 2));\n    }\n\n    onDrop(event:DndDropEvent) {\n        let transition: Transition = event.data;\n        let index: number = event.index;\n\n        // Remove from array\n        this.event.transitions.splice(transition.order, 1);\n\n        // Calculate new index, which may have shifted due to us removing the transition.\n        let newIndex = (index > transition.order) ? index - 1 : index;\n\n        // Insert us back into the array at newIndex\n        this.event.transitions.splice(newIndex, 0, transition);\n\n        // Update order for all transitions as elements have shifted\n        for (let i = 0; i < this.event.transitions.length; ++i) {\n            this.event.transitions[i].order = i;\n        }\n\n        window.setTimeout(() => { this.onChange(); }, 0);\n    }\n\n    /* D3 Stuff */\n    private renderVisual(): void {\n        if (this.event.transitions == null || this.event.transitions.length === 0) {\n            d3.select(\"#svg\").remove();\n            return;\n        }\n        d3.select(\"#svg\").remove();\n\n        let svg = d3.select(\"#svg\");\n\n        if (svg.node() == null) {\n            svg = d3.select(\"#svgHolder\").append(\"svg\");\n            svg.attr(\"id\", \"svg\");\n        }\n\n        let appData = this.generateAppData();\n        let renderingData = this.generateRenderingData(appData);\n\n        /*\n        let autoBox = function autoBox() {\n            document.body.appendChild(this);\n            const { x, y, width, height } = svg.node().getBBox();\n            document.body.removeChild(this);\n            return [x, y, width, height];\n        };\n        */\n\n        let chart = () => {\n            const root = renderingData.d3;\n\n            let links = svg.append(\"g\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", GRAPH_LINE_COLOR)\n                .attr(\"stroke-opacity\", 0.4)\n                .attr(\"stroke-width\", 0.4 * DRAW_SCALE_MULTIPLIER);\n            links.selectAll(\"path\")\n                .data(root.links())\n                .join(\"path\")\n                    .style(\"display\", function(d: any) {\n                        return d.source.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"d\", (d: any) => `\n                      M${d.target.y},${d.target.x}\n                       ${d.source.y},${d.source.x}\n                    `)\n                    .attr(\"data-transOid\", (d: any) => d.source.data.name === \"root\" ? null : appData.linkDataMappings[d.source.data.code + \":\" + d.target.data.code]);\n\n            svg.append(\"g\")\n                .selectAll(\"circle\")\n                .data(root.descendants())\n                .join(\"circle\")\n                    .style(\"display\", function(d: any) {\n                        return d.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"cx\", (d: any) => d.y)\n                    .attr(\"cy\", (d: any) => d.x)\n                    .attr(\"fill\", (d: any) => GRAPH_CIRCLE_FILL)\n                    .attr(\"r\", 0.9 * DRAW_SCALE_MULTIPLIER)\n                    .attr(\"data-goCode\", (d: any) => d.data.code)\n                    .attr(\"data-depth\", (d: any) => d.depth);\n\n            svg.append(\"g\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-size\", 2 * DRAW_SCALE_MULTIPLIER)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"stroke-width\", 3)\n              .selectAll(\"foreignObject\")\n              .data(root.descendants())\n              .join(\"foreignObject\")\n                .style(\"display\", function(d: any) {\n                    return d.depth === 0 ? \"none\" : null;\n                })\n                .attr(\"x\", (d: any) => (d.y + ((d.depth === 1) ? -13 : 1)))\n                .attr(\"y\", (d: any) => (d.x) + ((d.depth === 1) ? -2 : -3))\n                .attr(\"font-size\", \"0.7em\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"width\", 12)\n                .attr(\"height\", 8)\n              .append(\"xhtml:p\")\n                .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n                .attr(\"data-goCode\", (d: any) => d.data.code)\n                .attr(\"data-depth\", (d: any) => d.depth)\n                .style(\"margin\", \"0.5px\")\n                .style(\"vertical-align\", \"middle\")\n                .style(\"line-height\", 1.5)\n                .style(\"color\", GRAPH_GO_LABEL_COLOR)\n                .style(\"padding-left\", \"0.4px\")\n                .style(\"padding-top\", \"0.2px\")\n                .html((d: any) => d.data.name)\n              .filter((d: any) => d.depth === 1)\n                .style(\"text-align\", \"right\");\n\n            renderingData.multipleParentLinks.forEach(function(link) {\n                links.append(\"path\")\n                    .attr(\"d\", () => `\n                      M${link.parent.y},${link.parent.x}\n                       ${link.child.y},${link.child.x}\n                    `)\n                    .attr(\"data-transOid\", () => link.oid);\n            });\n\n            // return svg.attr(\"viewBox\", autoBox).node();\n        };\n\n        chart();\n\n        this.calculateSvgViewBox();\n    }\n\n    generateRenderingData(appData: any): any {\n        let width = 100;\n\n        const root: any = d3.hierarchy(appData.d3Data).sort((a, b) => d3.ascending(a.data.order, b.data.order));\n        root.dx = 5 * DRAW_SCALE_MULTIPLIER;\n        root.dy = width / (root.height + 1);\n        let d3RenderingData = d3.tree().nodeSize([root.dx, root.dy]).separation(() => 1.5)(root);\n\n        let multipleParentLinks = [];\n        appData.multipleParentLinks.forEach(function(link) {\n            let parentNode = root.find(node => node.data.isSource && node.data.code === link.parent.code);\n            let childNode = root.find(node => !node.data.isSource && node.data.code === link.child.code);\n\n            if (parentNode != null && childNode != null) {\n                multipleParentLinks.push({\n                    parent: parentNode,\n                    child: childNode,\n                    oid: link.oid\n                });\n            }\n        });\n\n        return {\n            d3: d3RenderingData,\n            multipleParentLinks: multipleParentLinks\n        };\n    }\n\n    generateAppData(): any {\n        let children = [];\n        let multipleParentLinks = []; // D3 can't handle multiple parents so we have to draw them ourselves.\n        let linkDataMappings = {}; // D3 doesn't allow us to put data on the link itself. Our link needs an oid. So this is a hack to store data on a link.\n\n        let isChildOfOtherNode = (code: string) => {\n            for (let i = 0; i < children.length; ++i) {\n                let child = children[i];\n\n                if (child.children) {\n                    for (let j = 0; j < child.children.length; ++j) {\n                        let grandChild = child.children[j];\n\n                        if (grandChild.code === code) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let index = children.findIndex(child => child.code === trans.sourceCode);\n                linkDataMappings[trans.sourceCode + \":\" + trans.targetCode] = trans.oid;\n\n                let childExists = isChildOfOtherNode(trans.targetCode);\n                let grandChild = null;\n                if (!childExists) {\n                    grandChild = {\n                        name: trans.targetText,\n                        code: trans.targetCode,\n                        isSource: false,\n                        children: []\n                    };\n                } else {\n                    multipleParentLinks.push({\n                        oid: trans.oid,\n                        child: {\n                            code: trans.targetCode,\n                            text: trans.targetText,\n                            type: trans.targetType\n                        },\n                        parent: {\n                            code: trans.sourceCode,\n                            text: trans.sourceText,\n                            type: trans.sourceType\n                        }\n                    });\n                }\n\n                if (index !== -1) {\n                    let child = children[index];\n\n                    let index2 = child.children.findIndex(child => child.code === trans.targetCode);\n\n                    if (index2 != null && grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n                } else {\n                    let child: any = {\n                        name: trans.sourceText,\n                        code: trans.sourceCode,\n                        children: [],\n                        isSource: true\n                    };\n\n                    if (grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n\n                    children.push(child);\n                }\n            }\n        });\n\n        return {\n            d3Data: {\n                name: \"root\",\n                children: children\n            },\n            multipleParentLinks: multipleParentLinks,\n            linkDataMappings: linkDataMappings\n        };\n    }\n\n    calculateSvgViewBox(): void {\n        let svg: any = d3.select(\"#svg\");\n        let svgNode: any = svg.node();\n\n        let { x, y, width, height } = svgNode.getBBox();\n\n        const xPadding = 0;\n        const yPadding = 2;\n        svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X + \" \" + (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y);\n\n        // width = (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X;\n        // height = (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y;\n\n        // d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n        // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"modal-body row\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset *ngIf=\"event != null\">\n            <div class=\"col-md-6\">\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label>\n\t\t                        <localize key=\"transition.event.date\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n\t\t                        {{formatDate(event.eventDate)}}\n\t\t                    </span>\n\t\t                    <date-field *ngIf=\"!readonly\" [(value)]=\"event.eventDate\" [classNames]=\"['form-control']\" label=\"\"\n\t\t                        [inputName]=\"'eventDate'\" [allowFutureDates]=\"false\" name=\"eventDate\" [required]=\"true\" (validChange)=\"validChange($event)\"\n\t\t                        [disable]=\"readonly || event.transitions.length > 0\"></date-field>\n\t\t                </div>\n\t\t            </div>\n\t\t        \n\t\t            <div class=\"row-holder\" *ngFor=\"let localeValue of event.description.localeValues\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label> <localize style=\"display:block;\" key=\"transition.event.description\"></localize>\n\t\t                        <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n\t\t                            </convert-key-label>)</span>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n\t\t                        class=\"form-control\" [disabled]=\"readonly\"\n\t\t                        [required]=\"false\" />\n\t\t                </div>\n\t\t            </div>\n\t\t\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"beforeTypeCode\">\n\t\t                        <localize key=\"transition.event.beforeType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && beforeTypes != null\" class=\"holder\">\n\t\t                    <select id=\"beforeTypeCode\" name=\"beforeTypeCode\" class=\"select-area\" [(ngModel)]=\"event.beforeTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of beforeTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.beforeTypeLabel\" name=\"beforeType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n\t\t            \n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"afterTypeCode\">\n\t\t                        <localize key=\"transition.event.afterType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && afterTypes != null\" class=\"holder\">\n\t\t                    <select id=\"afterTypeCode\" name=\"afterTypeCode\" class=\"select-area\" [(ngModel)]=\"event.afterTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of afterTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.afterTypeLabel\" name=\"afterType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n            </div>\n            \n            <div class=\"col-md-6\">\n\t\t\t\t      <div class=\"row\" style=\"text-align: center;\">\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.before\"></localize></label>\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.after\"></localize></label>\n\t\t\t\t      </div>\n\t\t\t\t    \n\t\t\t\t      <div style=\"margin-top: 10px;\" id=\"svgHolder\"></div>\n\t\t\t\t    </div>\n\t\t\t\t    \n            <div class=\"row-holder\" *ngIf=\"event.beforeTypeCode != null && event.beforeTypeCode !== '' && event.afterTypeCode != null && event.afterTypeCode !== '' && event.eventDate != null && event.eventDate !== ''\">\n                    <table class=\"table\" style=\"border-collapse: separate;\">\n                        <thead>\n\t                        <tr style=\"height: 50px;color: grey;\">\n\t\t                        <th *ngIf=\"!readonly\"></th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.before\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.impact\"></localize> </th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.after\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.type\"></localize> </th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\"></th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\" *ngIf=\"!readonly\"></th>\n\t                        </tr>\n                        </thead>\n                        <tbody class=\"dndList\" id=\"transition-container\"\n                          [dndDropzone]=\"readonly ? null : true\"\n                          [dndEffectAllowed]=\"readonly ? null : 'copyMove'\"\n                          (dndDrop)=\"readonly ? null : onDrop($event)\"\n                        >\n                            <tr *ngIf=\"!readonly\" class=\"dndPlaceholder\" dndPlaceholderRef>\n                              <td colspan=\"7\"></td>\n                            </tr>\n                        \n                            <tr *ngFor=\"let transition of event.transitions; let i = index;\" class=\"transition\" style=\"height: 50px;\" [attr.data-transOid]=\"transition.oid\"\n                                [dndDraggable]=\"readonly ? null : transition\"\n                                [dndEffectAllowed]=\"readonly ? null : draggable.effectAllowed\"\n                                [dndDisableIf]=\"readonly ? null : draggable.disable\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndStart)=\"readonly ? null : onDragStart($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCopied)=\"readonly ? null : onDraggableCopied($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndLinked)=\"readonly ? null : onDraggableLinked($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndMoved)=\"readonly ? null : onDraggableMoved($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCanceled)=\"readonly ? null : onDragCanceled($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndEnd)=\"readonly ? null : onDragEnd($event)\"\n                            >\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle; text-align: center;\">\n                                  <a style=\"font-size:25px; color: #969696; cursor: move;\" class=\"fa fa-bars\"></a>\n                                </td>\n                                <td>\n                                    <div class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.source-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.sourceText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(true, transition, this.event.beforeTypeCode, 'sourceText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'sourceText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentS-' + i\">\n\n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentS-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'sourceText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td style=\"vertical-align:middle;\">\n                                    <label>{{localizeTransitionImpact(transition.impact)}}</label>\n                                </td>\n                                <td>\n                                    <div  class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.target-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.targetText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(false, transition, this.event.afterTypeCode, 'targetText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'targetText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentT-' + i\">\n                                        \n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentT-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'targetText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td *ngIf=\"transition.typePart || !transition.typeUpdown\" style=\"vertical-align:middle;\">\n                                    <label *ngIf=\"!transition.typeUpdown\">{{localizeTransitionType(transition.transitionType)}}</label>\n                                    <label *ngIf=\"transition.typePart\" style=\"min-width:80px;\">{{localizeTransitionType(transition.typePart)}}</label>\n                                </td>\n                                <td *ngIf=\"transition.typeUpdown\">\n                                    <select style=\"min-width:80px;\" *ngIf=\"transition.typeUpdown\" [name]=\"'transition.transitionType-updown-' + transition.oid + '-' + i\" class=\"select-area\"\n                                        [(ngModel)]=\"transition.typeUpdown\" (change)=\"onChangeTypeUpdown(transition)\" [disabled]=\"readonly\" required>\n                                        <option value=\"UPGRADE\"><localize key=\"transition.event.type.upgrade\"></localize></option>\n                                        <option value=\"DOWNGRADE\"><localize key=\"transition.event.type.downgrade\"></localize></option>\n                                    </select>\n                                </td>\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle;\">\n                                    <span class=\"clickable\" (click)=\"remove(i)\">\n                                        <a class=\"fa fa-trash\" style=\"font-size:30px;\" aria-hidden=\"true\"></a>\n                                    </span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"!readonly\" style=\"margin-left: 6px; margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                        <div class=\"col-md-6\">\n                            <i class=\"fa fa-plus clickable\" (click)=\"onCreate()\"> \n                                <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                            </i>\n                        </div>\n                    </div>\n\n                </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                            role=\"button\" [disabled]=\"form.invalid || !valid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>\n","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse, HttpParams } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { HistoricalRow } from \"@registry/model/transition-event\";\nimport { AuthService, DateService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"historical-report\",\n    templateUrl: \"./historical-report.component.html\",\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class HistoricalReportComponent {\n\n    message: string = null;\n\n    page: PageResult<HistoricalRow> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    data = {\n        type: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    }\n\n    types: { label: string, code: string }[] = [];\n\n    isValid: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private iService: IOService, private authService: AuthService,\n        public dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.iService.listGeoObjectTypes(true).then(types => {\n            this.types = types;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getHistoricalReport(this.data.type, this.data.startDate, this.data.endDate, this.page.pageSize, pageNumber).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    exportToExcel(): void {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", this.data.type.toString());\n        params = params.set(\"startDate\", this.data.startDate.toString());\n        params = params.set(\"endDate\", this.data.endDate.toString());\n\n        window.location.href = registry.contextPath + \"/transition-event/export-excel?\" + params.toString();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = (this.data.startDate != null && this.data.endDate != null && !this.dateService.after(this.data.startDate, this.data.endDate));\n        }, 0);\n    }\n\n    public error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n  <form #form=\"ngForm\" autocomplete=\"off\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"code\">\n        <localize key=\"io.geoObjectType\"></localize>\n      </label>\n      <div class=\"col-md-8\">\n        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"data.type\" required>\n          <option></option>\n          <option *ngFor=\"let type of types\" [value]=\"type.code\">\n            {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n          </option>\n        </select>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"startDate\">\n        <localize key=\"io.startDate\"></localize>\n      </label>\n      <div class=\"col-md-2\">\n        <date-field #dateFieldComponents [(value)]=\"data.startDate\" label=\"\" [inputName]=\"'startDate'\"\n          [allowFutureDates]=\"false\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n        <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(data.startDate, data.endDate)\">\n\t        <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n\t      </span>\n      </div>\n\n      <label class=\"col-md-2 text-right\" for=\"endDate\">\n        <localize key=\"io.endDate\"></localize>\n      </label>\n      <div class=\"col-md-4\">\n        <date-field #dateFieldComponents [(value)]=\"data.endDate\" label=\"\" [inputName]=\"'endDate'\"\n          [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"button-holder col-md-8 text-right\">\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"refresh()\">\n          <localize key=\"io.submit\"></localize>\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"exportToExcel()\">\n          <localize key=\"io.export\"></localize>\n        </button>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n  </form>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventId\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventDate\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeLabel\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterLabel\"></localize>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-row\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td>\n                {{row.eventId}}\n              </td>\n              <td>\n                {{formatDate(row.eventDate)}}\n              </td>\n              <td>\n                {{row.eventType}}\n              </td>\n              <td>\n                {{row.description.localizedValue}}\n              </td>\n              <td>\n                {{row.beforeType}}\n              </td>\n              <td>\n                {{row.beforeCode}}\n              </td>\n              <td>\n                {{row.beforeLabel.localizedValue}}\n              </td>\n              <td>\n                {{row.afterType}}\n              </td>\n              <td>\n                {{row.afterCode}}\n              </td>\n              <td>\n                {{row.afterLabel.localizedValue}}\n              </td>\n            </tr>\n\n          </ng-template>\n        </tbody>\n      </table>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Params } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { Organization } from \"@shared/model/core\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { Location } from \"@angular/common\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n    selector: \"list-type-manager\",\n    templateUrl: \"./list-type-manager.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeManagerComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n    listByType: ListTypeByType = null;\n    current: ListType = null;\n\n    subscription: Subscription = null;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private registryService: RegistryService,\n        private route: ActivatedRoute,\n        private location: Location) { }\n\n    ngOnInit(): void {\n\n        this.subscription = this.route.queryParams.subscribe((params: Params) => {\n            const typeCode = params.typeCode;\n            const listId = params.listId;\n\n            if (listId != null && listId.length > 0) {\n\n                this.service.entries(listId).then(current => {\n                    this.current = current;\n                    this.listByType = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n            else if (typeCode != null && typeCode.length > 0) {\n\n                this.service.listForType(typeCode).then(listByType => {\n                    this.listByType = listByType;\n                    this.current = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n\n            // this.refresh();\n        });\n\n        if (this.typesByOrg.length === 0) {\n            this.registryService.init().then(response => {\n                this.typesByOrg = [];\n\n                response.organizations.forEach(org => {\n                    this.typesByOrg.push({ org: org, types: response.types.filter(t => t.organizationCode === org.code) });\n                })\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n\n            <nav class=\"col-md-3 list-sidebar\">\n                <div class=\"sidebar-section-content\">\n                    <ul *ngFor=\"let typeByOrg of typesByOrg;\" class=\"list-group\">\n                        <div>\n\n                            <div class=\"got-org-label-wrapper\">\n                                <h3>{{typeByOrg.org.label.localizedValue}}</h3>\n                            </div>\n\n                            <li class=\"list-group-item got-li-item\" *ngFor=\"let type of typeByOrg.types\"\n                                [id]=\"type.code\">\n                                <a [routerLink]=\"'/registry/master-lists'\"\n                                    [queryParams]=\"{typeCode:type.code}\" routerLinkActive=\"active\">\n                                    {{type.label.localizedValue}}\n                                </a>\n                            </li>\n                        </div>\n                    </ul>\n                </div>\n            </nav>\n            <div class=\"col-md-9 hierarchy-content\">\n                <div id=\"overflow-div\">\n                    <lists-for-type *ngIf=\"listByType != null\" [listByType]=\"listByType\" (error)=\"error($event)\">\n                    </lists-for-type>\n\n                    <list-type *ngIf=\"current != null\" [list]=\"current\" (error)=\"error($event)\"></list-type>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ListTypePublishModalComponent } from \"./publish-modal.component\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"lists-for-type\",\n    templateUrl: \"./lists-for-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListsForTypeComponent implements OnInit, OnDestroy {\n\n    @Input() listByType: ListTypeByType = null;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n    /*\n     * Observable subject for ListType changes.  Called when an update is successful\n     */\n    onListTypeChange: Subject<ListType>;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.onListTypeChange = new Subject();\n        this.onListTypeChange.subscribe(() => {\n            // Refresh\n            this.service.listForType(this.listByType.typeCode).then(listByType => {\n                this.listByType = listByType;\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.onListTypeChange.unsubscribe();\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange);\n    }\n\n    onEdit(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange, list);\n    }\n\n    onDelete(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + list.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.remove(list).then(response => {\n                this.listByType.lists = this.listByType.lists.filter((value, index, arr) => {\n                    return value.oid !== list.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n}\n","<ng-container>\n    <div class=\"heading\">\n        <h2>\n            {{listByType.orgLabel}} : {{listByType.typeLabel}}\n        </h2>\n    </div>\n    <div class=\"subheading\">\n        <h3>\n            <localize key=\"list.type.heading\"></localize>\n        </h3>\n    </div>\n    <hr />\n    <div *ngIf=\"listByType.write\" style=\"margin-top:30px;margin-bottom:30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n            <div>\n                <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"list.type.button.create\"></localize>\n                </button>\n            </div>\n        </div>\n    </div>\n    <div *ngFor=\"let list of listByType.lists; let i = index;\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-9\" style=\"vertical-align:middle;line-height:40px;\">\n                            <i *ngIf=\"list.listType === 'single'\" class=\"fa fa-table\" aria-hidden=\"true\"></i>\n                            <span *ngIf=\"list.listType !== 'single'\" class=\"fa-stack fa-lg\">\n                                <i class=\"fa fa-table fa-stack-2x\"></i>\n                                <i class=\"fa fa-table fa-stack-1x second-stacked-el\" style=\"margin-left:8px;margin-top:-4px;\"></i>\n                            </span>\n\n                            <a [routerLink]=\"'/registry/master-lists'\" [queryParams]=\"{typeCode:listByType.typeCode, listId: list.oid}\" routerLinkActive=\"active\" style=\"font-size:18px;\">\n                                {{list.displayLabel.localizedValue}}\n                            </a>\n                        </div>\n                        <div class=\"col-md-3\" style=\"text-align: right;\">\n                            <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                <localize key=\"masterlist.button.metadata\"></localize>\n                            </button>\n                            <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(list)\" class=\"btn btn-danger\"\n                                role=\"button\">\n                                <localize key=\"modal.button.delete\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'single'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"list.type.valid.on\"></localize>: {{list.validOn}}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'incremental'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"data.property.label.publishingStartDate\"></localize>:\n                                    {{list.publishingStartDate}}\n                                </li>\n                                <li>\n                                    <localize key=\"data.property.label.frequency\"></localize>: {{list.frequency}}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'interval'\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.valid.on\"></localize>:\n                            <ul class=\"unstyled-list\">\n                                <li *ngFor=\"let interval of list.intervalJson\">\n                                    {{interval.startDate}} - {{interval.endDate}}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <p style=\"color: #707070;\">{{list.description.localizedValue}}</p>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    </div>\n    <div *ngIf=\"listByType.lists.length === 0\" style=\"font-style:italic;\">\n        <localize key=\"list.type.no.lists.message\"></localize>\n    </div>\n\n</ng-container>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"list-type-publish-modal\",\n    templateUrl: \"./publish-modal.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypePublishModalComponent implements OnInit {\n\n    currentDate: Date = new Date();\n    message: string = null;\n    onListTypeChange: Subject<ListType> = null;\n\n    list: ListType = null;\n\n    tab: string = 'LIST';\n\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n    edit: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private iService: IOService,\n        private lService: LocalizationService,\n        private bsModalRef: BsModalRef,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    init(listByType: ListTypeByType, onListTypeChange: Subject<ListType>, list?: ListType): void {\n\n        this.onListTypeChange = onListTypeChange;\n        this.readonly = !listByType.write;\n\n        if (list == null) {\n            this.isNew = true;\n            this.list = {\n                oid: null,\n                listType: 'single',\n                organization: '',\n                typeCode: '',\n                typeLabel: '',\n                displayLabel: this.lService.create(),\n                description: this.lService.create(),\n                code: \"\",\n                hierarchies: [],\n                subtypeHierarchies: [],\n                listMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: '',\n                    collectionDate: '',\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: '',\n                    organization: '',\n                    telephoneNumber: '',\n                    email: '',\n                },\n                geospatialMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: '',\n                    collectionDate: '',\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: '',\n                    organization: '',\n                    telephoneNumber: '',\n                    email: '',\n                    topicCategories: '',\n                    placeKeywords: '',\n                    updateFrequency: '',\n                    lineage: '',\n                    languages: '',\n                    scaleResolution: '',\n                    spatialRepresentation: '',\n                    referenceSystem: '',\n                    reportSpecification: '',\n                    distributionFormat: '',\n                }\n\n            };\n\n            this.list.typeCode = listByType.typeCode;\n            this.list.typeLabel = listByType.typeLabel;\n            this.list.organization = listByType.orgCode;\n\n            if (listByType.geometryType === \"MULTIPOINT\" || listByType.geometryType === \"POINT\") {\n                this.list.includeLatLong = true;\n            }\n\n            this.iService.getHierarchiesForType(this.list.typeCode, true).then(hierarchies => {\n                this.list.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.iService.getHierarchiesForSubtypes(this.list.typeCode, false).then(hierarchies => {\n                this.list.subtypeHierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n        else {\n            this.list = list;\n            this.isNew = false;\n        }\n    }\n\n    getIsDisabled(event): boolean {\n        let elClasses = event.target.classList;\n        for (let i = 0; i < elClasses.length; i++) {\n            let c = elClasses[i];\n            if (c === \"disabled\") {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNewInterval(): void {\n        if (this.list.intervalJson == null) {\n            this.list.intervalJson = [];\n        }\n\n        this.list.intervalJson.push({\n            startDate: '',\n            endDate: ''\n        });\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.list).then(response => {\n            this.onListTypeChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleDateChange(): void {\n        if (this.list.listType === 'single') {\n            this.valid = (this.list.validOn != null && this.list.validOn.length > 0);\n        }\n        else if (this.list.listType === 'incremental') {\n            this.valid = (this.list.publishingStartDate != null && this.list.publishingStartDate.length > 0);\n        }\n        else if (this.list.listType === 'interval') {\n            this.valid = this.list.intervalJson.map(interval => {\n                return ((interval.startDate != null && interval.startDate.length > 0)\n                    && (interval.endDate != null && interval.endDate.length > 0)\n                    && !this.dateService.after(interval.startDate, interval.endDate));\n\n            }).reduce((a, b) => a && b);\n        }\n        else {\n            this.valid = true;\n        }\n    }\n\n    stringify(obj: any): string {\n        return JSON.stringify(obj);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-type=\"type\">\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.label\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.collection.date\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <date-field [(value)]=\"metadata.collectionDate\" [classNames]=\"['form-control']\" label=\"\"\n                [inputName]=\"'collectionDate'\" [allowFutureDates]=\"false\" name=\"collectionDate\" [disable]=\"readonly\">\n            </date-field>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"readonly\">\n                    <option></option>\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"readonly\">\n                    <option></option>\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"readonly\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"list != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1 *ngIf=\"isNew\">\n                <localize key=\"type.publish.title\"></localize>\n            </h1>\n            <h1 *ngIf=\"!isNew\">\n                {{list.displayLabel.localizedValue}}\n                <localize key=\"type.publish.view.title\"></localize>\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\" style=\"text-align: center;\">\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'single'\"\n                            [value]=\"'single'\" [(ngModel)]=\"list.listType\" name=\"single\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.single.date\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'incremental'\"\n                            [value]=\"'incremental'\" [(ngModel)]=\"list.listType\" name=\"incremental\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.incremental.series\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'interval'\"\n                            [value]=\"'interval'\" [(ngModel)]=\"list.listType\" name=\"interval\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.interval.series\"></localize>\n                        </span>\n                    </label>\n\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || edit\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.label\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.listAbstract\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeLabel\" name=\"typeLabel\" type=\"text\" class=\"form-control\"\n                            disabled />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeCode\" name=\"typeCode\" type=\"text\" class=\"form-control\" disabled />\n                    </div>\n                </div>\n\n                <div *ngIf=\"list.includeLatLong !== undefined\" class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"list.type.includeLatLong\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <boolean-field [(value)]=\"list.includeLatLong\" label=\"\" [disable]=\"false\"></boolean-field>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.hierarchies.length > 0\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\">\n                        <localize key=\"listlist.parents\"></localize>\n                    </div>\n                </div>\n\n                <div *ngFor=\"let hierarchy of list.hierarchies\">\n                    <ng-container *ngIf=\"hierarchy.parents.length > 0\">\n                        <div class=\"row-holder\">\n                            <div class=\"label-holder\">\n                                <label> {{hierarchy.label}} </label>\n                            </div>\n                            <div class=\"holder\">\n                                <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                                    <!-- <div class=\"holder\"> -->\n\n                                    <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                        <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                        <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\"\n                                            [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\"\n                                            style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                            <span></span>\n                                        </div>\n\n                                        <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                        <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                                    </div>\n                                    <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                                    <!-- </div> -->\n                                </div>\n                            </div>\n                        </div>\n                    </ng-container>\n                </div>\n\n                <div *ngIf=\"list.subtypeHierarchies.length > 0\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"listlist.subtypeHierarchies\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"row\" *ngFor=\"let hierarchy of list.subtypeHierarchies\">\n                                <!-- <div class=\"holder\"> -->\n\n                                <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                    <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                    <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\"\n                                        [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly || edit}\"\n                                        style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                        <span></span>\n                                    </div>\n\n                                    <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.listType === 'single'\">\n                    <div class=\"label-holder\">\n                        <label for=\"validOn\">\n                            <localize key=\"list.type.valid.on\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <date-field [(value)]=\"list.validOn\" [classNames]=\"['form-control']\" label=\"\"\n                            [inputName]=\"'validOn'\" [allowFutureDates]=\"false\" name=\"listValidOn\" [required]=\"true\"\n                            [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n                    </div>\n                </div>\n\n                <ng-container *ngIf=\"list.listType === 'incremental'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.frequency\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"list.frequency\"\n                                [disabled]=\"readonly || !isNew\" required #frequency=\"ngModel\">\n                                <option></option>\n                                <option value=\"ANNUAL\">\n                                    <localize key=\"georegistry.frequency.annual\"></localize>\n                                </option>\n                                <option value=\"BIANNUAL\">\n                                    <localize key=\"georegistry.frequency.biannual\"></localize>\n                                </option>\n                                <option value=\"QUARTER\">\n                                    <localize key=\"georegistry.frequency.quarter\"></localize>\n                                </option>\n                                <option value=\"MONTHLY\">\n                                    <localize key=\"georegistry.frequency.monthly\"></localize>\n                                </option>\n                            </select>\n                            <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\">\n                                <localize key=\"listlist.change.frequency\"></localize>\n                            </small>\n                        </div>\n                    </div>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.publishingStartDate\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                                {{formatDate(list.publishingStartDate)}}\n                            </span>\n                            <date-field *ngIf=\"!readonly\" [(value)]=\"list.publishingStartDate\"\n                                [classNames]=\"['form-control']\" label=\"\" [inputName]=\"'publishingStartDate'\"\n                                [allowFutureDates]=\"false\" name=\"listPublishingStartDate\" [required]=\"true\"\n                                [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container *ngIf=\"list.listType === 'interval'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"list.type.intervals\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div *ngFor=\"let interval of list.intervalJson; let i = index;\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <label>\n                                            <localize key=\"io.startDate\"></localize>\n                                        </label>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <label>\n                                            <localize key=\"io.endDate\"></localize>\n                                        </label>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <date-field [(value)]=\"interval.startDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'startDate-' + i\" [allowFutureDates]=\"false\"\n                                            [required]=\"true\" [disable]=\"readonly || !isNew\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <date-field [(value)]=\"interval.endDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'endDate-'+i\" [allowFutureDates]=\"false\"\n                                            [required]=\"true\" [disable]=\"readonly || !isNew\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\" *ngIf=\"!readonly && isNew\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\" (click)=\"onNewInterval()\" class=\"btn btn-primary\"\n                                        role=\"button\" style=\"margin:15px 0;\">\n                                        <localize key=\"changeovertime.manageVersions.summaryKey.NEW\"></localize>\n                                    </button>\n                                    <div *ngIf=\"!valid\" style=\"float:none;\" class=\"inline-error-message\">\n                                        <localize key=\"list.type.bad.interval.dates\"></localize>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <div class=\"label-holder\"></div>\n\n                            <div class=\"holder\">\n                                <div class=\"form-group\" style=\"text-align: center;\">\n\n                                    <div class=\"btn-group geobject-editor-tab-holder\">\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.list\"></localize>\n                                            </span>\n                                        </label>\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\"\n                                            (click)=\"handleTab('GEOSPATIAL')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.geospatial\"></localize>\n                                            </span>\n                                        </label>\n                                    </div>\n\n                                </div>\n                            </div>\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.listMetadata, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.geospatialMetadata, type:'geospatial'}\">\n                            </ng-container>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { AuthService, LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeEntry, ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { PublishVersionComponent } from \"./publish-version.component\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n    selector: \"list-type\",\n    templateUrl: \"./list-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeComponent implements OnInit, OnDestroy {\n\n    @Input() list: ListType;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n    isRC: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private router: Router,\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService,\n        private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.isRC = this.authService.isGeoObjectTypeOrSuperRC({\n            organizationCode: this.list.organization,\n            code: this.list.typeCode,\n            superTypeCode: this.list.superTypeCode,\n        });\n\n        // Expand the most recent version by default\n        this.list.entries.filter(entry => {\n            return (entry.versions != null && entry.versions.length > 0);\n        }).forEach(entry => {\n            entry.versions[0].collapsed = true;\n        })\n    }\n\n    ngOnDestroy() {\n    }\n\n    toggleVersions(entry: ListTypeEntry) {\n        entry.showAll = !entry.showAll;\n    }\n\n    onCreate(entry: ListTypeEntry): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry);\n    }\n\n    onEdit(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry, version);\n    }\n\n    onDelete(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" Version [\" + version.versionNumber + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n\n            this.service.removeVersion(version).then(response => {\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    onGotoMap(version: ListTypeVersion): void {\n        this.router.navigate(['/registry/location-manager'], {\n            queryParams: {layers: JSON.stringify([version.oid]) },\n        });\n    }\n\n}\n","<ng-template #versionDetail let-version='version' let-entry=\"entry\">\n    <div class=\"row\" style=\"margin-bottom:5px;line-height:40px;\">\n        <div class=\"col-md-9\" style=\"vertical-align: middle;\">\n\n            <span class=\"clickable\" (click)=\"version.collapsed = !version.collapsed\"\n                [attr.aria-expanded]=\"!version.collapsed\">\n                \n                <i class=\"fa fa-chevron-right\" [ngClass]=\"{'fa-chevron-down' : version.collapsed, 'fa-chevron-right' : !version.collapsed}\" style=\"font-size:14px;\"></i>\n                \n                <span class=\"h4\">\n                    <localize key=\"list.type.version\"></localize> {{version.versionNumber}}\n                </span>\n                <span style=\"margin-left:10px;color:grey;\">\n                    <localize key=\"list.type.date.generated\"></localize>: {{version.createDate}}\n                </span>\n            </span>\n        </div>\n        <div class=\"col-md-3\" style=\"text-align: right;\">\n            <button type=\"submit\" (click)=\"onEdit(entry, version)\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"masterlist.button.metadata\"></localize>\n            </button>\n            <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(entry, version)\" class=\"btn btn-danger\"\n                role=\"button\">\n                <localize key=\"modal.button.delete\"></localize>\n            </button>\n        </div>\n    </div>\n    \n    <div class=\"row\" style=\"margin-bottom:5px;\" [collapse]=\"!version.collapsed\">\n        <ul style=\"list-style:none;\">\n            <li>\n                <a *ngIf=\"(version.isMember || version.listMetadata.visibility === 'PUBLIC')\"\n                    [routerLink]=\"'/registry/master-list/' + version.oid\" routerLinkActive=\"active\">\n                    <localize key=\"list.type.list\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.listMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.list\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.listMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.listMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n            </li>\n            <li>\n                <a *ngIf=\"(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\"\n                    (click)=\"onGotoMap(version)\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.geospatialMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.geospatialMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n\n            </li>\n        </ul>\n    </div>\n</ng-template>\n\n\n<ng-container>\n\n    <div class=\"heading\">\n        <h2>\n            {{list.displayLabel.localizedValue}}\n        </h2>\n    </div>\n\n    <div *ngFor=\"let entry of list.entries\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <h3>{{entry.period}}</h3>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"list.write\" style=\"margin-bottom: 30px;\" class=\"row\">\n                        <div class=\"col-md-6\">\n                            <div>\n                                <button type=\"submit\" (click)=\"onCreate(entry)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\">\n                                    <localize key=\"list.type.new.version\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div *ngIf=\"list.write || isRC\" class=\"row\" style=\"margin-bottom: 5px;\">\n                        <div class=\"col-md-9\" style=\"vertical-align: middle;\">\n                            <span class=\"h4\">\n                                <a [routerLink]=\"'/registry/master-list/' + entry.working\" routerLinkActive=\"active\">\n                                    <localize key=\"list.type.working.version\"></localize>\n                                </a>\n                            </span>\n                        </div>\n                    </div>\n                    <ng-container *ngIf=\"entry.versions.length > 0\">\n                        <ng-container *ngFor=\"let version of entry.versions; let j = index;\">\n                            <ng-container *ngIf=\"j === 0 || entry.showAll\" [ngTemplateOutlet]=\"versionDetail\"\n                                [ngTemplateOutletContext]=\"{entry:entry, version:version}\">\n                            </ng-container>\n                        </ng-container>\n                        <div class=\"row\" style=\"margin-bottom: 5px;\">\n                            <div class=\"col-md-12\" style=\"text-align: left;\">\n                                <button *ngIf=\"entry.versions.length > 1\" type=\"submit\" (click)=\"toggleVersions(entry)\"\n                                    class=\"btn btn-default\" role=\"button\">\n                                    <localize *ngIf=\"!entry.showAll\" key=\"list.type.see.versions\"></localize>\n                                    <localize *ngIf=\"entry.showAll\" key=\"list.type.hide.versions\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </ng-container>\n                    <div class=\"row\" *ngIf=\"entry.versions.length === 0\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.no.versions\"></localize>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</ng-container>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeEntry, ListTypeVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"publish-version\",\n    templateUrl: \"./publish-version.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class PublishVersionComponent implements OnInit {\n    message: string = null;\n\n    list: ListType = null;\n    entry: ListTypeEntry = null;\n\n    metadata: ListVersionMetadata = null;\n\n    tab: string = 'LIST';\n\n    readonly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    init(list: ListType, entry: ListTypeEntry, version?: ListTypeVersion): void {\n\n        this.list = list;\n        this.entry = entry;\n        this.readonly = !list.write;\n\n        if (version == null) {\n            this.metadata = {\n                listMetadata: {\n                    visibility: 'PRIVATE',\n                    master: false,\n                    ...JSON.parse(JSON.stringify(list.listMetadata)),\n                },\n                geospatialMetadata: {\n                    visibility: 'PRIVATE',\n                    master: false,\n                    ...JSON.parse(JSON.stringify(list.geospatialMetadata)),\n                }\n            };\n        }\n        else {\n            this.metadata = version;\n\n            console.log(this.metadata);\n        }\n    }\n\n    onSubmit(): void {\n        if (this.metadata.oid != null) {\n            this.service.applyVersion(this.metadata).then(version => {\n                if (this.entry.versions != null) {\n                    const index = this.entry.versions.findIndex(v => v.oid === version.oid);\n\n                    this.entry.versions[index] = version;\n                }\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n        else {\n            this.service.createVersion(this.entry, this.metadata).then(version => {\n                this.entry.versions.unshift(version);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-list=\"list\" let-type=\"type\">\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.ismaster\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <boolean-field [disable]=\"readonly\" [(value)]=\"metadata.master\" label=\"\"></boolean-field>\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.visibility\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"metadata.visibility\" [disabled]=\"readonly\"\n                required>\n                <option value=\"PRIVATE\">\n                    <localize key=\"masterlist.private\"></localize>\n                </option>\n                <option *ngIf=\"!list.typePrivate\" value=\"PUBLIC\">\n                    <localize key=\"masterlist.public\"></localize>\n                </option>\n            </select>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.label\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.collection.date\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <date-field [(value)]=\"metadata.collectionDate\" [classNames]=\"['form-control']\" label=\"\"\n                [inputName]=\"'collectionDate'\" [allowFutureDates]=\"false\" name=\"collectionDate\" [disable]=\"readonly\">\n            </date-field>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"readonly\">\n                    <option></option>\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"readonly\">\n                    <option></option>\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"readonly\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"metadata != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"list.type.versionMetadata\"></localize>\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <div class=\"label-holder\"></div>\n                        \n                            <div class=\"holder\">\n                              <div class=\"form-group\" style=\"text-align: center;\">\n\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('LIST')\" -->\n<!--                                     [ngClass]=\"tab === 'LIST' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"border-bottom: 1px solid;\"> -->\n<!--                                     <localize key=\"list.type.list\"></localize> -->\n<!--                                 </a> -->\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('GEOSPATIAL')\" -->\n<!--                                     [ngClass]=\"tab === 'GEOSPATIAL' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"margin-left: 5px;border-bottom:1px solid;\"> -->\n<!--                                     <localize key=\"list.type.geospatial\"></localize> -->\n<!--                                 </a> -->\n                                \n                                <div class=\"btn-group geobject-editor-tab-holder\">\n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.list\"></localize></span>\n                                    </label> \n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\" (click)=\"handleTab('GEOSPATIAL')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.geospatial\"></localize></span>\n                                    </label> \n                                  </div>\n                                  \n                                </div>\n                              </div>\n\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.listMetadata, list:list, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.geospatialMetadata, list:list, type:'geospatial'}\">\n                            </ng-container>\n\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\">\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, ProgressService } from \"@shared/service\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ExportFormatModalComponent } from \"./export-format-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"list\",\n    templateUrl: \"./list.component.html\",\n    styleUrls: [\"./list.component.css\"]\n})\nexport class ListComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    list: ListTypeVersion = null;\n    p: number = 1;\n    current: string = \"\";\n    filter: { attribute: string, value: string, label: string }[] = [];\n    selected: string[] = [];\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 100,\n        results: []\n    };\n\n    sort = { attribute: \"code\", order: \"ASC\" };\n    isRefreshing: boolean = false;\n    isWritable: boolean = false;\n    isRM: boolean = false;\n\n    listAttrs: any[];\n\n    showInvalid = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    public searchPlaceholder = \"\";\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n    subscription: Subscription = null;\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private service: ListTypeService,\n        private pService: ProgressService,\n        private dateService: DateService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService,\n        private authService: AuthService) {\n        this.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.getVersion(oid).then(version => {\n            this.setList(version);\n            const orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(orgCode, typeCode);\n            this.isRM = this.authService.isGeoObjectTypeRM(orgCode, typeCode);\n\n            this.onPageChange(1);\n\n            if (version.refreshProgress != null) {\n                this.handleProgressChange(version.refreshProgress);\n            }\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + registry.contextPath;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(message);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    setList(_list: ListTypeVersion): void {\n        this.list = _list;\n        this.listAttrs = this.calculateListAttributes();\n    }\n\n    onShowInvalidChange() {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.message = null;\n\n        this.service.data(this.list.oid, pageNumber, this.page.pageSize, this.getFilter(), this.sort).then(page => {\n            this.page = page;\n            this.listAttrs = this.calculateListAttributes();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onSort(attribute: { name: string, label: string }): void {\n        if (this.sort.attribute === attribute.name) {\n            this.sort.order = (this.sort.order === \"ASC\" ? \"DESC\" : \"ASC\");\n        } else {\n            this.sort = { attribute: attribute.name, order: \"ASC\" };\n        }\n\n        this.onPageChange(1);\n    }\n\n    clearFilters(): void {\n        this.list.attributes.forEach(attr => {\n            attr.search = null;\n        });\n\n        this.filter = [];\n        this.showInvalid = false;\n        this.selected = [];\n\n        this.onPageChange(1);\n    }\n\n    toggleFilter(attribute: any): void {\n        attribute.isCollapsed = !attribute.isCollapsed;\n    }\n\n    getFilter(): { attribute: string, value: string, label: string }[] {\n        let newFilter = JSON.parse(JSON.stringify(this.filter));\n\n        if (!this.showInvalid) {\n            newFilter.push({ attribute: \"invalid\", value: \"false\" });\n        }\n\n        return newFilter;\n    }\n\n    calculateListAttributes() {\n        let attrs: any[];\n\n        if (this.showInvalid) {\n            attrs = this.list.attributes;\n        } else {\n            attrs = JSON.parse(JSON.stringify(this.list.attributes));\n\n            let index = attrs.findIndex(attr => attr.name === \"invalid\");\n\n            if (index !== -1) {\n                attrs.splice(index, 1);\n            }\n        }\n\n        attrs.forEach(attribute => {\n            attribute.isCollapsed = true;\n        });\n\n        return attrs;\n    }\n\n    getTypeaheadDataObservable(attribute: any): void {\n        return Observable.create((observer: any) => {\n            this.message = null;\n\n            // Get the valid values\n            this.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.getFilter()).then(options => {\n                if (this.filter.findIndex(filt => filt.value === \"null\") === -1) {\n                    options.unshift({ label: \"[\" + this.localizeService.decode(\"list.emptyValue\") + \"]\", value: \"null\" });\n                }\n                options.unshift({ label: \"[\" + this.localizeService.decode(\"masterlist.nofilter\") + \"]\", value: null });\n\n                observer.next(options);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    handleProgressChange(progress: any): void {\n        this.isRefreshing = (progress.current < progress.total);\n\n        this.pService.progress(progress);\n\n        if (!this.isRefreshing) {\n            // Refresh the resultSet\n            this.onPageChange(1);\n        }\n    }\n\n    handleDateChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && ((attribute.value.start != null && attribute.value.start !== \"\") || (attribute.value.end != null && attribute.value.end !== \"\"))) {\n            let label = \"[\" + attribute.label + \"] : [\";\n\n            if (attribute.value.start != null) {\n                label += attribute.value.start;\n            }\n\n            if (attribute.value.start != null && attribute.value.end != null) {\n                label += \" - \";\n            }\n\n            if (attribute.value.end != null) {\n                label += attribute.value.end;\n            }\n\n            label += \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleInputChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && attribute.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value === \"null\" ? null : attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleListChange(e: TypeaheadMatch, attribute: any): void {\n        attribute.value = e.item;\n        attribute.isCollapsed = true;\n\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        this.list.attributes.forEach(attr => {\n            if (attr.base === attribute.base) {\n                attr.search = \"\";\n            }\n        });\n\n        if (attribute.value.value != null && attribute.value.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value.label + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n            this.selected.push(attribute.base);\n            attribute.search = e.item.label;\n        } else {\n            this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n            attribute.search = \"\";\n        }\n\n        this.onPageChange(1);\n    }\n\n    isFilterable(attribute: any): boolean {\n        return attribute.type !== \"none\" && attribute.name !== \"invalid\" && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n    }\n\n    onEdit(data): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        editModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishList(this.list.oid).toPromise().then((historyOid: string) => {\n            this.isRefreshing = true;\n            this.list.curation = {};\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onNewGeoObject(): void {\n        const params: any = {\n            layers: JSON.stringify([this.list.oid]),\n            type: this.list.typeCode,\n            code: \"__NEW__\"\n        };\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    onExport(): void {\n        this.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.onFormat.subscribe(format => {\n            if (format === \"SHAPEFILE\") {\n                window.location.href = registry.contextPath + \"/list-type/export-shapefile?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.getFilter()));\n            } else if (format === \"EXCEL\") {\n                window.location.href = registry.contextPath + \"/list-type/export-spreadsheet?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.getFilter()));\n            }\n        });\n    }\n\n    changeTypeaheadLoading(attribute: any, loading: boolean): void {\n        attribute.loading = loading;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onWheel(event: WheelEvent): void {\n        let tableEl = (<Element>event.target).parentElement.closest(\"table\").parentElement;\n\n        tableEl.scrollLeft += event.deltaY;\n        event.preventDefault();\n    }\n\n    onGotoMap(result: any): void {\n        const params: any = { layers: JSON.stringify([this.list.oid]) };\n\n        if (result != null) {\n            params.version = this.list.oid;\n            params.uid = result.uid;\n            params.pageContext = \"DATA\";\n        }\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    onRunCuration(): void {\n        this.service.createCurationJob(this.list).then(job => {\n            this.router.navigate([\"/registry/curation-job\", this.list.oid]);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar *ngIf=\"isRefreshing\"></progress-bar>\n\n    <!--\n    <div *ngIf=\"isRefreshing\" class=\"version-busy-overlay\">\n      This Master List Version is currently refreshing...\n      ...Please wait... ?\n    </div>\n    -->\n\n    <div *ngIf=\"list != null\" id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-3\">\n                <h4>\n                    <localize key=\"masterlist.generatedDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        {{formatDate(list.publishDate)}}\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        {{formatDate(list.forDate)}}\n                    </span>\n                </h4>\n            </div>\n            <div *ngIf=\"filter.length > 0\" class=\"col-md-6\">\n                <div class=\"col-md-12 table-responsive\" style=\"\">\n                    <localize key=\"masterlist.filters\"></localize>\n                    <ol>\n                        <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                    </ol>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row form-group\">\n            <div class=\"col-md-4\">\n                <div *ngIf=\"list.working && isRM\" class=\"button-holder pull-left\">\n                    <button type=\"submit\" class=\"btn btn-primary\" role=\"button\" (click)=\"onRunCuration()\" style=\"margin-left:0;\">\n                        <localize key=\"list.type.run.curation\"></localize>\n                    </button>\n                    <span style=\"vertical-align:middle;display:inline-block;font-style: italic;margin-left: 5px;color: grey;\">\n                        <span *ngIf=\"list.curation.lastRun == null\" class=\"date-string-display\">\n                            <localize key=\"list.type.run.na\"></localize>\n                        </span>\n                        <a *ngIf=\"list.curation.lastRun != null\" [routerLink]=\"['/registry/curation-job', list.oid]\"\n                            routerLinkActive=\"active\">\n                            <localize key=\"list.type.last.validation.date\"></localize>\n                            {{formatDate(list.curation.lastRun)}}\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"button-holder pull-right\">\n\n                    <span *ngIf=\"isWritable\" class=\"clickable\" style=\"vertical-align:middle;display:inline-block;line-height:0;\">\n                        <boolean-field [(value)]=\"showInvalid\" (change)=\"onShowInvalidChange()\"\n                            [localizeLabelKey]=\"'masterlist.showInvalid'\"></boolean-field>\n                    </span>\n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n\n                    <span *ngIf=\"list.working\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true}\"\n                            style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n                    <button *ngIf=\"list.isMember || list.geospatialMetadata.visibility === 'PUBLIC'\" type=\"submit\"\n                        (click)=\"onGotoMap(null)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.viewOnMap\"></localize>\n                    </button>\n\n                    <button *ngIf=\"list.working && isWritable && !list.isAbstract\" type=\"submit\"\n                        (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.newGeoObject\"></localize>\n                    </button>\n\n                    <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                        <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive text-nowrap\" id=\"list-view-table\"\n                style=\"max-height:calc(100vh - 439px); min-height:calc(100vh - 439px);\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead style=\"position: sticky;top: 0;background: #ececec;\">\n                        <tr>\n                            <th *ngIf=\"list.isMember || list.geospatialMetadata.visibility === 'PUBLIC'\"\n                                style=\"width: 3%;position: sticky;top: 0;\" class=\"label-column\">\n                                <localize key=\"masterlist.view.column\"></localize>\n                            </th>\n                            <th style=\"position: sticky;top: 0\" *ngFor=\"let attribute of listAttrs\"\n                                class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\"\n                                    *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\"\n                                        [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n                                        <i style=\"font-size: 20px;\" class=\"fa fa-filter\"\n                                            [title]=\"'button.filter.helptext' | localize\"></i>\n                                    </a>\n                                </div>\n                                <a (click)=\"onSort(attribute)\"\n                                    style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}}\n                                </a>\n                                <a (click)=\"onSort(attribute)\"\n                                    style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\">\n                                    <i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\"\n                                        class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i>\n                                    <i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\"\n                                        class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                                </a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\"\n                                            [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\"\n                                            type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <!--                                             <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />  -->\n                                            <!--                                             <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> -->\n                                            <date-field [(value)]=\"attribute.value.start\" label=\"\"\n                                                [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'Start'\"\n                                                (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\"\n                                                [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\">\n                                            </date-field>\n                                            <date-field [(value)]=\"attribute.value.end\" label=\"\"\n                                                [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'End'\"\n                                                (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\"\n                                                [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\">\n                                            </date-field>\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\"\n                                            [placeholder]=\"('masterlist.search' | localize) + '...'\"\n                                            [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\"\n                                            [typeaheadAsync]=\"true\" [typeahead]=\"getTypeaheadDataObservable(attribute)\"\n                                            (typeaheadOnSelect)=\"handleListChange($event, attribute)\"\n                                            [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\"\n                                            [typeaheadWaitMs]=\"300\" [ngClass]=\"{'inline-loading':attribute.loading}\"\n                                            (typeaheadLoading)=\"changeTypeaheadLoading(attribute, $event)\"\n                                            typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\"\n                                            container=\"body\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\"\n                            class=\"fade-ngRepeat-item\">\n                            <td *ngIf=\"list.isMember || list.geospatialMetadata.visibility === 'PUBLIC'\"\n                                style=\"width: 3%; text-align: center;\" class=\"label-column\">\n                                <a class=\"fa\" style=\"padding:3px;\" [ngClass]=\"isWritable ? 'fa fa-pencil' : 'fa fa-eye'\"\n                                    (click)=\"onGotoMap(result)\"></a>\n                            </td>\n                            <td *ngFor=\"let attribute of listAttrs\" class=\"label-column\">{{ result[attribute.name] }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"display:inline-block;\" (pageChange)=\"onPageChange($event)\">\n                </pagination-controls>\n                <span\n                    style=\"display:inline-block;margin-left:20px;vertical-align:middle;color:#cacaca;font-weight:bold;\">\n                    <localize key=\"masterlist.pagination.showing\"></localize>\n                    &nbsp;{{(page.pageNumber-1)*page.pageSize}}\n                    -&nbsp;{{page.pageNumber*page.pageSize}}\n                    &nbsp;<localize key=\"masterlist.pagination.of\"></localize>&nbsp;{{page.count}}\n                </span>\n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\n\n@Component({\n    selector: \"export-format-modal\",\n    templateUrl: \"./export-format-modal.component.html\",\n    styleUrls: []\n})\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next(this.format);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            Export\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { Subscription } from \"rxjs\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"curation-job\",\n    templateUrl: \"./curation-job.component.html\",\n    styleUrls: []\n})\nexport class CurationJobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    version: ListTypeVersion;\n    job: CurationJob;\n\n    page: PageResult<CurationProblem> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(private router: Router, public service: ListTypeService, private modalService: BsModalService,\n        private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params[\"oid\"];\n        this.service.getVersion(oid).then(version => {\n            this.version = version;\n\n            this.onPageChange(1);\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + registry.contextPath;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"CURATION_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: CurationProblem): void {\n        const index = this.page.resultSet.findIndex(p => p.id === problem.id);\n\n        if (index !== -1) {\n            this.page.resultSet.splice(index, 1);\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.no.geometry\");\n        } else if (probType === \"INVALID_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.invalid.geometry\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: CurationProblem): void {\n        // this.bsModalRef = this.modalService.show(CurationProblemModalComponent, {\n        //     animated: true,\n        //     backdrop: true,\n        //     ignoreBackdropClick: true\n        // });\n        // this.bsModalRef.content.init(this.version, problem, this.job, (result: any) => {\n        //     // if (result.action === \"RESOLVED\") {\n        //     // this.onProblemResolved(result.data);\n        //     // }\n        // });\n\n        const params: any = {\n            layers: JSON.stringify([this.version.oid]),\n            version: this.version.oid,\n            uid: problem.goUid\n        };\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    toggleResolution(problem: CurationProblem): void {\n        const resolution = (problem.resolution == null || problem.resolution.length === 0 || problem.resolution === \"UNRESOLVED\")\n            ? \"APPLY_GEO_OBJECT\"\n            : \"UNRESOLVED\";\n\n        this.service.setResolution(problem, resolution).then(() => {\n            problem.resolution = resolution;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        if (this.version != null) {\n            this.message = null;\n\n            this.service.getCurationInfo(this.version, false, pageNumber, this.page.pageSize).then(response => {\n                this.job = response;\n\n                if (this.job.status === \"SUCCESS\") {\n                    this.page = this.job.page;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"py-5\">\n      <h2>\n        <localize key=\"curation.job.title\"></localize>\n      </h2>\n    </div>\n    <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n      <div class=\"col-md-4 order-md-1\">\n        <div class=\"wrapper\">\n\n          <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n          <p style=\"padding-left: 60px;\">\n            <span style=\"display: block;\">\n              <strong>{{version.label}}</strong>\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"list.type.job.started.by\"></localize>\n              {{job.lastRunBy}}\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"scheduledjobs.job.started.label\"></localize>\n              <span class=\"date-string-display\">\n                {{formatDate(job.lastRun)}}\n              </span>\n            </span>\n          </p>\n\n        </div>\n      </div>\n      <div class=\"col-md-3 order-md-1\">\n        <div>\n\n          <h5><b>{{job.workProgress}}\n            <localize key=\"list.type.validated.out.of\"></localize>\n              {{job.workTotal}}\n              <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n            </b></h5>\n          <h5>{{job.workTotal - job.workProgress}} <localize key=\"scheduledjobs.job.remaining.label\"></localize>\n          </h5>\n\n        </div>\n      </div>\n      <div class=\"col-md-5 order-md-1\">\n      </div>\n    </div>\n    <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n\n        <ul class=\"list-group\">\n\n          <table class=\"list-table table table-bordered table-striped\">\n            <thead>\n              <tr>\n                <th class=\"label-column\">\n                  <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n                </th>\n                <th class=\"label-column\">\n                  <localize key=\"data.property.label.code\"></localize>\n                </th>\n                <th class=\"label-column\">\n\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{getFriendlyProblemType(row.type)}}</p>\n                </td>\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{row.goCode}}</p>\n                </td>\n                <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                  <button *ngIf=\"row.resolution !=='APPLY_GEO_OBJECT' \" type=\"submit\" (click)=\"onEdit(row)\"\n                    class=\"btn btn-link\" role=\"button\">\n                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                  </button>\n                  <boolean-field [value]=\"row.resolution === 'APPLY_GEO_OBJECT'\" (change)=\"toggleResolution(row)\"\n                    [label]=\"'list.type.problem.resolved' | localize\" style=\"vertical-align:middle;line-height:0;\"></boolean-field>\n\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div class=\"solid-table-footer\">\n            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n              <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n          </div>\n        </ul>\n      </div>\n    </div>\n    <div *ngIf=\"job && job.status === 'SUCCESS' && page && page.resultSet.length === 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <localize key=\"list.type.validation.empty\"></localize>\n      </div>\n    </div>\n\n  </div>\n</div>","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\nimport { calculateTextWidth } from \"./svg-util\";\n\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\nimport { SvgHierarchyType } from \"./svg-hierarchy-type\";\nimport { HierarchyComponent, RELATED_NODE_BANNER_COLOR } from \"../hierarchy.component\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nexport class SvgHierarchyNode {\n\n    private hierarchyComponent: HierarchyComponent;\n\n    private svgHierarchyType: SvgHierarchyType;\n\n    private geoObjectType: GeoObjectType;\n\n    private treeNode: any;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    constructor(hierarchyComponent: HierarchyComponent, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n        public localizeService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        this.hierarchyComponent = hierarchyComponent;\n        this.svgHierarchyType = svgHierarchyType;\n        this.geoObjectType = geoObjectType;\n        this.treeNode = treeNode;\n    }\n\n    getCode(): string {\n        return this.geoObjectType.code;\n    }\n\n    setPos(x: number, y: number, dragging: boolean) {\n        let bbox = this.getBbox();\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + 5)\n            .attr(\"y\", y + 1);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + bbox.width - 20)\n            .attr(\"y\", y + 17);\n\n        // Move inherit and uninherit buttons with the node they're moving\n\n        let inheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (inheritNode != null) {\n            const heritX = (x + bbox.width - 60);\n            const heritY = (y + bbox.height - 24);\n            let inheritBbox = inheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n        }\n\n        let uninheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (uninheritNode != null) {\n            const heritX = (x + bbox.width - 71);\n            const heritY = (y + bbox.height - 24);\n            let uninheritBbox = uninheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n        }\n    }\n\n    getPos() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n    }\n\n    getBbox() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n    }\n\n    getTreeNode() {\n        return this.treeNode;\n    }\n\n    hideRelatedHierarchy(): string {\n        let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n        if (existingSecondary.node() != null) {\n            existingSecondary.remove();\n            this.hierarchyComponent.calculateSvgViewBox();\n\n            let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n            return existingSecondaryCode;\n        }\n    }\n\n    renderRelatedHierarchiesMenu() {\n        let that = this;\n        let existingMenu = d3.select(\".g-context-menu\");\n\n        if (existingMenu.node() == null) {\n            //let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n            let parent = d3.select(\"#svg\");\n\n            let contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n            let relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n            const hasActionsPermissions = this.authService.isSRA() || this.authService.isOrganizationRA(this.svgHierarchyType.hierarchyType.organizationCode);\n\n            let bbox = this.getBbox();\n            let x = bbox.x + bbox.width - 5;\n            let y = bbox.y + bbox.height / 2 - 8;\n            const height = 20;\n            const fontSize = 8;\n            const widthPadding = 10;\n            const borderColor = \"#aaaaaa\";\n            const dividerColor = \"#e4e4e4\";\n            const fontFamily = \"sans-serif\";\n            const titleFontSize = 9;\n\n            const titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n            const actionsTitle = this.hierarchyComponent.localize(\"hierarchy.content.actionsTitle\");\n            const removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n            const noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n            const hideRelatedHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.hideRelatedHierarchy\");\n            const uninheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n            const inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\n            let isSecondaryHierarchyRendered = (d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node() != null);\n\n            let numActions = hasActionsPermissions ? (isSecondaryHierarchyRendered ? 2 : 1) : 0;\n\n            // Calculate the width of our title\n            let width = calculateTextWidth(titleLabel, titleFontSize);\n\n            // Calculate with of remove text\n            let removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n            width = removeWidth > width ? removeWidth : width;\n\n            if (isSecondaryHierarchyRendered) {\n              // Calculate width of \"hide related hierarchy\" label\n                let hideRelatedWidth = calculateTextWidth(hideRelatedHierarchyLabel, fontSize);\n                width = hideRelatedWidth > width ? hideRelatedWidth : width;\n            }\n\n            if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                let uninheritWidth = calculateTextWidth(uninheritLabel, fontSize);\n                width = uninheritWidth > width ? uninheritWidth : width;\n                numActions++;\n            } else {\n                let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                if (existingSecondary.node() != null) {\n                    let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                    let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                    let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                    let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                    if (this.treeNode.parent == null && relatedGotHasParents) {\n                        let inheritWidth = calculateTextWidth(inheritLabel, fontSize);\n                        width = inheritWidth > width ? inheritWidth : width;\n                        numActions++;\n                    }\n                }\n            }\n\n            // Calculate the width of our context menu, which is based on how long the text inside it will be.\n            // We don't know how long text is until we render it. So we'll need to loop over all the text and\n            // render and destroy all of it.\n            if (relatedHierarchies.length > 0) {\n                relatedHierarchies.forEach((relatedHierarchyCode: string) => {\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    let textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n\n                    if (textWidth > width) {\n                        width = textWidth;\n                    }\n                });\n            } else {\n                let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n                width = noHierLabelWidth > width ? noHierLabelWidth : width;\n            }\n\n            width = width + widthPadding;\n\n            let heightAdditions: number = relatedHierarchies.length > 0 ? (numActions + 2) : (numActions + 3);\n\n            // Background rectangle with border\n            contextMenuGroup.append(\"rect\")\n                .classed(\"contextmenu-relatedhiers-background\", true)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"rx\", 5)\n                .attr(\"width\", width)\n                .attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", .5)\n                .attr(\"stroke\", borderColor);\n\n            // Related Hierarchies Title\n            contextMenuGroup.append(\"text\")\n                .classed(\"contextmenu-relatedhiers-title\", true)\n                .attr(\"x\", x + widthPadding / 2)\n                .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                .attr(\"font-size\", titleFontSize)\n                .attr(\"font-family\", fontFamily)\n                .attr(\"font-weight\", \"bold\")\n                .text(titleLabel);\n\n            y = y + height;\n\n            // Dividing line at the bottom\n            contextMenuGroup.append(\"line\")\n                .classed(\"contextmenu-relatedhiers-divider\", true)\n                .attr(\"x1\", x)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x + width)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", borderColor)\n                .attr(\"stroke-width\", .5);\n\n\n            if (relatedHierarchies.length > 0) {\n                // Loop over all related hierarchies and draw them as list items\n                for (let i = 0; i < relatedHierarchies.length; ++i) {\n                    let relatedHierarchyCode = relatedHierarchies[i];\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    // Text that says the hierarchy's display label\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"data-hierCode\", relatedHierarchyCode)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(relatedHierarchyLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n                    y = y + height;\n\n                    // Dividing line at the bottom\n                    if (i < relatedHierarchies.length) {\n                        contextMenuGroup.append(\"line\")\n                            .classed(\"contextmenu-relatedhiers-divider\", true)\n                            .attr(\"data-hierCode\", relatedHierarchyCode)\n                            .attr(\"x1\", x + 5)\n                            .attr(\"y1\", y)\n                            .attr(\"x2\", x + width - 5)\n                            .attr(\"y2\", y)\n                            .attr(\"stroke\", dividerColor)\n                            .attr(\"stroke-width\", .5);\n                    }\n                }\n            } else {\n                // Text that says \"No related Hierarchies\"\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(noRelatedHierLabel);\n\n                y = y + height;\n\n                    // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x + 5)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width - 5)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", dividerColor)\n                    .attr(\"stroke-width\", .5);\n            }\n\n      // Actions Section\n            if (hasActionsPermissions) {\n              // Actions Title\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-title\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                    .attr(\"font-size\", titleFontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .attr(\"font-weight\", \"bold\")\n                    .text(actionsTitle);\n\n                y = y + height;\n\n              // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n        // \"Remove from hierarchy\" button\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"data-remove\", \"REPLACE---gotCode\")\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(removeFromHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) { that.removeGotFromHierarchy(); });\n\n                y = y + height;\n\n            // Inherit / Uninherit buttons\n                if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                    contextMenuGroup.append(\"line\")\n                        .classed(\"contextmenu-relatedhiers-divider\", true)\n                        .attr(\"x1\", x)\n                        .attr(\"y1\", y)\n                        .attr(\"x2\", x + width)\n                        .attr(\"y2\", y)\n                        .attr(\"stroke\", borderColor)\n                        .attr(\"stroke-width\", .5);\n\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(uninheritLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.onClickUninheritHierarchy(); });\n\n                    y = y + height;\n                } else {\n                    let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                    if (existingSecondary.node() != null) {\n                        let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                        let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                        let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                        let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                        if (this.treeNode.parent == null && relatedGotHasParents) {\n                            contextMenuGroup.append(\"line\")\n                                .classed(\"contextmenu-relatedhiers-divider\", true)\n                                .attr(\"x1\", x)\n                                .attr(\"y1\", y)\n                                .attr(\"x2\", x + width)\n                                .attr(\"y2\", y)\n                                .attr(\"stroke\", borderColor)\n                                .attr(\"stroke-width\", .5);\n\n                            contextMenuGroup.append(\"text\")\n                                .classed(\"contextmenu-relatedhiers-text\", true)\n                                .attr(\"x\", x + widthPadding / 2)\n                                .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-family\", fontFamily)\n                                .text(inheritLabel)\n                                .style(\"cursor\", \"pointer\")\n                                .on(\"click\", function(event, node) { that.onClickInheritHierarchy(secondaryHierarchy); });\n\n                            y = y + height;\n                        }\n                    }\n                }\n            }\n\n            if (isSecondaryHierarchyRendered) {\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(hideRelatedHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) {\n                        that.hideRelatedHierarchy();\n\n                        let existingMenu = d3.select(\".g-context-menu\");\n                        if (existingMenu.node() != null) {\n                            existingMenu.remove();\n                        }\n\n                        d3.select(\".g-hierarchy-got-connector\").remove();\n                    });\n            }\n\n            this.hierarchyComponent.calculateSvgViewBox();\n        } else {\n            existingMenu.remove();\n        }\n    }\n\n    removeGotFromHierarchy() {\n        let svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n        let obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        let message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.data = obj.code;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            let treeNode = svgGot.getTreeNode();\n            let parent = null;\n            if (treeNode.parent == null) {\n                parent = \"ROOT\";\n            } else {\n                if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                    parent = \"ROOT\";\n                } else {\n                    parent = treeNode.parent.data.geoObjectType;\n                }\n            }\n\n            this.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err); });\n        });\n    }\n\n    renderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let myBbox = this.getBbox();\n        let svg = d3.select(\"#svg\");\n\n        // Remove any secondary hierarchy that may already be rendered\n        if (this.hideRelatedHierarchy() === relatedHierarchy.code) {\n            return;\n        }\n\n        // Get the bounding box for our primary hierarchy\n        let primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n        // Render the secondary hierarchy\n        let svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService, this.authService);\n        svgHt.render();\n        let gSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n\n        // Translate the secondary hierarchy to the right of the primary hierarchy\n        let gHierarchy: any = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node();\n        let bbox = gHierarchy.getBBox();\n        let paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n        gSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n        // Draw dotted line between the shared node in the hierarchies\n        let secondaryGot = d3.select(\".g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n        let secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n        secondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n        d3.select(\".g-hierarchy-got-connector\").remove();\n        let gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n        gConnector.append(\"path\")\n            .classed(\"hierarchy-got-connector\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\n                \"d\",\n                \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width) +\n                \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2) +\n                \"H\" + secondaryGotBbox.x\n            );\n\n        // Draw arrow for dotted line\n        const arrowRectD = { height: 10, width: 7 };\n        let gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n        gArrow.append(\"rect\")\n            .classed(\"hierarchy-got-connector-arrow-rect\", true)\n            .attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n            .attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n        gArrow.append(\"path\")\n            .classed(\"hierarchy-got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\",\n                \"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n            );\n\n        // Recalculate the viewbox (should probably be the last thing that happens)\n        this.hierarchyComponent.calculateSvgViewBox();\n    }\n\n    onClickInheritHierarchy(hierarchy: HierarchyType) {\n        this.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n    }\n\n    onClickUninheritHierarchy() {\n        this.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { TreeNode } from \"@circlon/angular-tree-component\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\n\n\n@Component({\n    selector: \"add-child-to-hierarchy-modal\",\n    templateUrl: \"./add-child-to-hierarchy-modal.component.html\",\n    styleUrls: []\n})\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n    /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n    public hierarchyType: HierarchyType;\n    public nodes: HierarchyNode[];\n    public allGeoObjectTypes: GeoObjectType[];\n    public selectedGeoObjectType: GeoObjectType;\n    private toRoot: boolean = false;\n    selectUndefinedOptionValue: any;\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n\n    onSelect(value: string): void {\n        this.allGeoObjectTypes.forEach(gObj => {\n            if (gObj.code === value) {\n                this.selectedGeoObjectType = gObj;\n            }\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy(this.hierarchyType.code, parent, this.selectedGeoObjectType.code).then(data => {\n            this.onNodeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-attributes-modal\",\n    templateUrl: \"./manage-attributes-modal.component.html\",\n    styleUrls: [\"./manage-attributes-modal.css\"]\n})\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageAttributes, attribute: this.attribute, termOption: \"\" };\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy() {\n        this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            this.onDeleteAttribute.next(data);\n\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            [title]=\"'modal.button.edit' | localize\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            [title]=\"'modal.button.remove' | localize\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyOverTimeEntry, GeoObject, HierarchyOverTimeEntryParent, HierarchyOverTime, AttributeType, TimeRangeEntry } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nexport class HierarchyCREditor extends ValueOverTimeCREditor {\n\n  hierarchyOverTime: HierarchyOverTime;\n\n  hierarchyEntry: HierarchyOverTimeEntry;\n\n  existRangeStale: boolean = false;\n\n  constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction, hierarchyEntry: HierarchyOverTimeEntry, hierarchyOverTime: HierarchyOverTime) {\n      super(changeRequestAttributeEditor, attr, action);\n      this.hierarchyEntry = hierarchyEntry;\n      this.hierarchyOverTime = hierarchyOverTime;\n\n      if (this.hierarchyEntry != null) {\n          this.hierarchyEntry.loading = {};\n      }\n  }\n\n  // @Override\n  getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n      return this.hierarchyEntry;\n  }\n\n  // @Override\n  getValueFromGeoObjectForDiff(): any {\n      let immediateParent: GeoObject = this.hierarchyEntry.parents[this.hierarchyOverTime.types[this.hierarchyOverTime.types.length - 1].code].geoObject;\n      let goVal: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n      return goVal;\n  }\n\n  // @Override\n  onChange(type: ChangeType) {\n      if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n          this.existRangeStale = true;\n      }\n\n      super.onChange(type);\n  }\n\n  // @Override\n  validate(): boolean {\n      super.validate();\n\n      let invalidParent = this.changeRequestAttributeEditor.changeRequestEditor.dateService.invalidParent;\n      let parentDoesNotExist = this.changeRequestAttributeEditor.changeRequestEditor.dateService.parentDoesNotExist;\n      let service = this.changeRequestAttributeEditor.changeRequestEditor.registryService;\n\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(this.hierarchyEntry.parents, type.code) && this.hierarchyEntry.parents[type.code].geoObject) {\n              let goParent = this.hierarchyEntry.parents[type.code].geoObject;\n\n              if (!this.existRangeStale) {\n                  if (goParent.properties.invalid) {\n                      this._isValid = false;\n                      this.conflictMessages.add(invalidParent);\n                  }\n                  if (!goParent.properties.exists) {\n                      this._isValid = false;\n                      this.conflictMessages.add(parentDoesNotExist);\n                  }\n              } else {\n                  service.doesGeoObjectExistAtRange(this.startDate, this.endDate, type.code, goParent.properties.code).then(stats => {\n                      goParent.properties.invalid = stats.invalid;\n                      goParent.properties.exists = stats.exists;\n\n                      this.conflictMessages.delete(invalidParent);\n                      this.conflictMessages.delete(parentDoesNotExist);\n\n                      if (goParent.properties.invalid) {\n                          this._isValid = false;\n                          this.conflictMessages.add(invalidParent);\n                      }\n                      if (!goParent.properties.exists) {\n                          this._isValid = false;\n                          this.conflictMessages.add(parentDoesNotExist);\n                      }\n                  }).catch((err: HttpErrorResponse) => {\n                      // eslint-disable-next-line no-console\n                      console.log(err);\n                  });\n              }\n          }\n      }\n\n      this.existRangeStale = false;\n\n      return this._isValid;\n  }\n\n  // @Override\n  validateUpdateReference() {\n      // We could potentially try to check for this, but it won't be easy. So for now we're doing nothing.\n  }\n\n  setParentValue(type: {code: string, label: string}, parents: { [k: string]: HierarchyOverTimeEntryParent }) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      let directParent: GeoObject = null;\n      if (type != null) {\n          directParent = parents[type.code].geoObject;\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  // let currentDirectParent: GeoObject = this.hierarchyEntry.parents[type.code].geoObject;\n                  let currentDirectParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n                  let oldValue: string = currentDirectParent == null ? null : currentDirectParent.properties.type + \"_~VST~_\" + currentDirectParent.properties.code;\n\n                  if (\n                      (currentDirectParent == null && directParent == null) ||\n                      ((currentDirectParent != null && directParent != null) &&\n                      currentDirectParent.properties.code === directParent.properties.code)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldParents = JSON.parse(JSON.stringify(this.hierarchyEntry.parents));\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          let newValueStrConcat: string = null;\n          if (directParent != null) {\n              newValueStrConcat = directParent.properties.type + \"_~VST~_\" + directParent.properties.code;\n          }\n\n          if (newValueStrConcat === this.diff.oldValue) {\n              delete this.diff.newValue;\n          } else {\n              this.diff.newValue = newValueStrConcat;\n          }\n\n          this.diff.parents = parents;\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.parents = parents;\n      }\n\n      this.onChange(ChangeType.VALUE);\n  }\n\n  public getLowestLevelFromHierarchyEntry(parents: any): {geoObject: GeoObject, text: string} {\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(parents, type.code) && parents[type.code].geoObject) {\n              return parents[type.code];\n          }\n      }\n\n      return null;\n  }\n\n  set value(val: any) {\n      throw new Error(\"Invoke setParentValue instead\");\n  }\n\n  get value() {\n      if (this.diff != null && this.diff.parents !== undefined) {\n          return this.diff;\n      } else if (this.hierarchyEntry != null) {\n          return this.hierarchyEntry;\n      }\n\n      return null;\n  }\n\n  public removeType(type): void {\n      // this.value.parents[type.code] = { text: \"\", geoObject: null };\n\n      let newParents = JSON.parse(JSON.stringify(this.value.parents));\n      newParents[type.code] = { text: \"\", geoObject: null };\n\n      // Set the value to be the next existing ancestor.\n      let entry = this.value;\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let parentType = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(entry.parents, parentType.code) && entry.parents[parentType.code].geoObject) {\n              this.setParentValue(parentType, newParents);\n              return;\n          }\n      }\n\n      // If we do not have a next existing ancestor, then we must set the value to null.\n      this.setParentValue(null, newParents);\n  }\n\n  createEmptyHierarchyEntry(): HierarchyOverTimeEntry {\n      let hierarchyEntry = new HierarchyOverTimeEntry();\n      hierarchyEntry.loading = {};\n      hierarchyEntry.oid = uuid();\n\n      hierarchyEntry.parents = {};\n\n      if (this.hierarchyOverTime) {\n          for (let i = 0; i < this.hierarchyOverTime.types.length; i++) {\n              let current = this.hierarchyOverTime.types[i];\n\n              hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n\n              hierarchyEntry.loading = {};\n          }\n      }\n\n      return hierarchyEntry;\n  }\n\n  public remove(): void {\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.onChange(ChangeType.REMOVE);\n              return;\n          } else if (this.hierarchyEntry != null && this.diff == null) {\n              let currentImmediateParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n              let oldValue: string = currentImmediateParent == null ? null : currentImmediateParent.properties.type + \"_~VST~_\" + currentImmediateParent.properties.code;\n\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.hierarchyEntry.oid;\n              this.diff.oldValue = oldValue;\n              this.diff.oldStartDate = this.hierarchyEntry.startDate;\n              this.diff.oldEndDate = this.hierarchyEntry.endDate;\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let index = this.hierarchyOverTime.entries.findIndex(vot => vot.oid === this.hierarchyEntry.oid);\n\n          if (index !== -1) {\n              this.hierarchyOverTime.entries.splice(index, 1);\n          }\n      }\n\n      this.onChange(ChangeType.REMOVE);\n  }\n\n}\n","\nimport { ChangeRequest, AbstractAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ActionTypes } from \"@registry/model/constants\";\n\nexport class StandardAttributeCRModel {\n\n    changeRequest: ChangeRequest;\n\n    diff: { oldValue?: any, newValue?: any };\n\n    attribute: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    editAction: AbstractAction;\n\n    code: string;\n\n    private _isValid: boolean = true;\n\n    constructor(attr: AttributeType, geoObject: GeoObjectOverTime, cr: ChangeRequest) {\n        this.attribute = attr;\n        this.geoObject = geoObject;\n        this.changeRequest = cr;\n        this.initialize();\n    }\n\n    initialize(): void {\n        let actions = this.changeRequest.actions;\n\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            if (actions.length > 0 && actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                this.editAction = actions[0];\n            }\n        } else {\n            actions.forEach((action: AbstractAction) => {\n                if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (this.attribute.code === updateAttrAction.attributeName) {\n                        this.editAction = action;\n                    }\n                }\n            });\n\n            if (this.editAction == null) {\n                this.editAction = new UpdateAttributeAction(this.attribute.code);\n            }\n        }\n\n        let len = this.changeRequest.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let action: AbstractAction = actions[i];\n\n            if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                if (this.attribute.code === updateAttrAction.attributeName) {\n                    this.diff = updateAttrAction.attributeDiff;\n                }\n            } else if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n              // Nothing to do here. Create actions don't have diffs.\n            } else {\n                console.log(\"Unexpected action : \" + action.actionType, action);\n            }\n        }\n    }\n\n    public hasChanges(): boolean {\n        return this.diff != null;\n    }\n\n    isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(): boolean {\n        return this._isValid;\n    }\n\n    set value(val: any) {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            this.geoObject.attributes[this.attribute.code] = val;\n        } else {\n            if (this.diff != null) {\n                if (this.areValuesEqual(this.diff.oldValue, val)) {\n                    delete (this.editAction as UpdateAttributeAction).attributeDiff;\n                    this.diff = null;\n\n                    let index = this.changeRequest.actions.findIndex(findAction => findAction === this.editAction);\n                    if (index !== -1) {\n                        this.changeRequest.actions.splice(index, 1);\n                    }\n                } else {\n                    this.diff.newValue = val;\n                }\n            } else {\n                this.diff = { oldValue: this.geoObject.attributes[this.attribute.code], newValue: val };\n\n                (this.editAction as UpdateAttributeAction).attributeDiff = this.diff;\n                this.changeRequest.actions.push(this.editAction);\n            }\n        }\n    }\n\n    get value(): any {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            return this.geoObject.attributes[this.attribute.code];\n        } else {\n            if (this.diff != null) {\n                return this.diff.newValue;\n            } else {\n                return this.geoObject.attributes[this.attribute.code];\n            }\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attribute.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        return val1 === val2;\n    }\n\n}\n","\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { ValueOverTimeDiff, SummaryKey } from \"@registry/model/crtable\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { LayerColor } from \"@registry/model/constants\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeTermType, ConflictMessage, Term } from \"@registry/model/registry\";\n\nexport class Layer {\n\n  oid: string;\n  isEditing: boolean;\n  isRendering: boolean;\n  color: LayerColor;\n  zindex: number;\n  geojson: any;\n  editPropagator: ValueOverTimeCREditor;\n\n}\n\n/*\n * This class exists purely for the purpose of storing what data to be rendered to the front-end. Any storage or submission of this data to the back-end must be translated\n * using the editor.\n */\nexport class VersionDiffView {\n\n  component: ManageVersionsComponent;\n  summaryKeyData: SummaryKey;\n  summaryKeyLocalized: string; // If we try to localize this in the html with a localize element then it won't update as frequently as we need so we're doing stuff manually here.\n  newLayer: Layer = null;\n  oldLayer: Layer = null;\n  coordinate?: any;\n  newCoordinateX?: any;\n  newCoordinateY? : any;\n  editor: ValueOverTimeCREditor;\n\n  // We must track our own value, so that they can be diffed when setting.\n  _value: any;\n\n  constructor(component: ManageVersionsComponent, editor: ValueOverTimeCREditor) {\n      this.component = component;\n      this.editor = editor;\n\n      this.populate(editor);\n      this.editor.onChangeSubject.subscribe(() => {\n          this.populate(this.editor);\n      });\n  }\n\n  populate(editor: ValueOverTimeCREditor) {\n      if (this.component.attributeType.type === \"local\" && this._value != null && this.editor.value != null) {\n          // The front-end glitches out if we swap to a new object. We have to update the existing object to be the same\n          LocalizedValue.populate(this._value, this.editor.value);\n      } else if (this.component.attributeType.code === \"_PARENT_\" && this._value != null && this.editor.value != null && this.editor.value.parents != null) {\n          for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n              let current = this.component.hierarchy.types[i];\n\n              this._value.parents[current.code].text = this.editor.value.parents[current.code].text;\n              this._value.parents[current.code].geoObject = this.editor.value.parents[current.code].geoObject;\n          }\n      } else if (this.component.attributeType.code === \"_PARENT_\") {\n          this._value = JSON.parse(JSON.stringify(this.editor.value));\n      } else {\n          this._value = this.convertValueForDisplay(this.editor.value == null ? null : JSON.parse(JSON.stringify(this.editor.value)));\n      }\n\n      if (this.component.attributeType.code === \"_PARENT_\") {\n          this._value.loading = {};\n      }\n\n      this.calculateSummaryKey();\n  }\n\n  set oid(oid: string) {\n      this.editor.oid = oid;\n  }\n\n  get oid(): string {\n      return this.editor.oid;\n  }\n\n  get startDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return this.editor.oldStartDate;\n      }\n\n      return this.editor.startDate;\n  }\n\n  set startDate(startDate: string) {\n      this.editor.startDate = startDate;\n      this.calculateSummaryKey();\n  }\n\n  set oldStartDate(oldStartDate: string) {\n      this.editor.oldStartDate = oldStartDate;\n  }\n\n  get oldStartDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newStartDate != null && this.editor.oldStartDate !== undefined) {\n          return this.convertDateForDisplay(this.editor.oldStartDate);\n      }\n\n      return null;\n  }\n\n  get endDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return this.editor.oldEndDate;\n      }\n\n      return this.editor.endDate;\n  }\n\n  set endDate(endDate: string) {\n      this.editor.endDate = endDate;\n      this.calculateSummaryKey();\n  }\n\n  set oldEndDate(oldEndDate: string) {\n      this.editor.oldEndDate = oldEndDate;\n  }\n\n  get oldEndDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newEndDate != null && this.editor.oldEndDate !== undefined) {\n          return this.convertDateForDisplay(this.editor.oldEndDate);\n      }\n\n      return null;\n  }\n\n  get value(): any {\n      return this._value;\n  }\n\n  set value(value: any) {\n      this.editor.value = value;\n  }\n\n  set oldValue(oldValue: any) {\n      this.editor.oldValue = oldValue;\n  }\n\n  get oldValue(): any {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newValue != null && this.editor.oldValue !== undefined) {\n          return this.convertOldValueForDisplay(this.editor.oldValue);\n      }\n\n      return null;\n  }\n\n  convertDateForDisplay(date: string): string {\n      return (date == null || date.length === 0) ? null : this.component.dateService.formatDateForDisplay(date);\n  }\n\n  convertOldValueForDisplay(val: any): any {\n      if (this.component.attributeType.type === \"date\") {\n          return this.component.dateService.formatDateForDisplay(new Date(val));\n      } else if (this.component.attributeType.code === \"_PARENT_\" && val.includes(\"_~VST~_\")) {\n          let split = val.split(\"_~VST~_\");\n          // let parentTypeCode = split[0];\n          let parentCode = split[1];\n\n          return parentCode;\n      } else if (this.component.attributeType.type === \"term\") {\n          let code = val;\n          if (code instanceof Array) {\n              code = val[0];\n          }\n\n          let attrOpts = (this.component.attributeType as AttributeTermType).rootTerm.children;\n\n          let index = attrOpts.findIndex((term:Term) => term.code === code);\n\n          if (index !== -1) {\n              return attrOpts[index].label.localizedValue;\n          } else {\n              return val;\n          }\n      }\n\n      return val;\n  }\n\n  convertValueForDisplay(val: any): any {\n      if (val == null) {\n          return null;\n      }\n\n      return val;\n  }\n\n  calculateSummaryKey() {\n      if (this.editor.diff == null) {\n          this.summaryKey = SummaryKey.UNMODIFIED;\n          return;\n      }\n\n      if (this.editor.diff.action === \"CREATE\") {\n          this.summaryKey = SummaryKey.NEW;\n          return;\n      } else if (this.editor.diff.action === \"DELETE\") {\n          this.summaryKey = SummaryKey.DELETE;\n          return;\n      }\n\n      let hasTime = this.editor.diff.newStartDate != null || this.editor.diff.newEndDate != null;\n      let hasValue = Object.prototype.hasOwnProperty.call(this.editor.diff, \"newValue\");\n\n      if (hasTime && hasValue) {\n          this.summaryKey = SummaryKey.UPDATE;\n      } else if (hasTime) {\n          this.summaryKey = SummaryKey.TIME_CHANGE;\n      } else if (hasValue) {\n          this.summaryKey = SummaryKey.VALUE_CHANGE;\n      } else {\n          this.summaryKey = SummaryKey.UNMODIFIED;\n      }\n  }\n\n  set summaryKey(newKey: SummaryKey) {\n      this.summaryKeyData = newKey;\n      this.localizeSummaryKey();\n  }\n\n  get summaryKey(): SummaryKey {\n      return this.summaryKeyData;\n  }\n\n  private localizeSummaryKey(): void {\n      this.summaryKeyLocalized = this.component.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + this.summaryKeyData);\n  }\n\n  private conflictMessagesHasSeverity(severity: string) {\n      let has = false;\n\n      this.editor.conflictMessages.forEach(msg => {\n          if (msg.severity === severity) {\n              has = true;\n          }\n      });\n\n      return has;\n  }\n\n  hasError(): boolean {\n      return this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"ERROR\");\n  }\n\n  hasWarning(): boolean {\n      return !this.hasError() && this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"WARNING\");\n  }\n\n}\n","import { Input, Component, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectOverTime, GeoObjectType } from \"@registry/model/registry\";\nimport { AbstractAction } from \"@registry/model/crtable\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\n\nimport { AuthService } from \"@shared/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { ActionDetailComponent } from \"../action-detail-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\ndeclare var $: any;\n\n@Component({\n\n    selector: \"crtable-detail-create-geo-object\",\n    templateUrl: \"./detail.component.html\",\n    styleUrls: [\"./crtable-detail-create-geo-object.css\"],\n    encapsulation: ViewEncapsulation.None\n})\n// export class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\nexport class CreateUpdateGeoObjectDetailComponent implements ActionDetailComponent {\n\n    isMaintainer: boolean = false;\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    @Input() readOnly: boolean;\n\n    isEditing: boolean = false;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    constructor(private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService,\n        private authService: AuthService) {\n\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if (this.isNew()) {\n\n            this.preGeoObject = this.postGeoObject;\n\n        }\n\n        this.onSelect(this.action);\n\n    }\n\n    isNew(): boolean {\n\n        return (this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\");\n\n    }\n\n    handleDateChange(): void {\n\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n    }\n\n    applyAction() {\n\n        // var action = JSON.parse( JSON.stringify( this.action ) );\n        let action = this.action;\n\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if (this.geometryEditor != null) {\n\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n\n        }\n\n        /*\n        this.changeRequestService.applyAction(action).then(response => {\n\n            this.endEdit();\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n        */\n\n    }\n\n    onSelect(action: AbstractAction) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n\n            this.registryService.getGeoObjectOverTime(this.postGeoObject.attributes.code, this.geoObjectType.code).then(geoObject => {\n\n                this.preGeoObject = geoObject;\n\n            }).catch((err: HttpErrorResponse) => {\n\n                this.error(err);\n\n            });\n\n        }\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    // @HostListener( 'window:beforeunload' )\n    // canDeactivate(): Observable<boolean> | boolean {\n    //    if ( this.isEditing ) {\n    //        //event.preventDefault();\n    //        //event.returnValue = 'Are you sure?';\n    //        //return 'Are you sure?';\n//\n     //       return false;\n     //   }\n//\n    //    return true;\n    // }\n\n    // afterDeactivate( isDeactivating: boolean ) {\n    //    if ( isDeactivating && this.isEditing ) {\n    //        this.unlockActionSync();\n    //    }\n    // }\n\n    startEdit(): void {\n\n        //this.lockAction();\n\n    }\n\n    public endEdit(): void {\n\n        //this.unlockAction();\n\n    }\n/*\n    lockAction() {\n\n        this.changeRequestService.lockAction(this.action.oid).then(response => {\n\n            this.isEditing = true;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(true);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    unlockAction() {\n\n        this.changeRequestService.unlockAction(this.action.oid).then(response => {\n\n            this.isEditing = false;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(false);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n\n        $.ajax({\n            url: registry.contextPath + \"/changerequest/unlockAction\",\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function(a) {\n\n            },\n            async: false\n        });\n\n    }\n*/\n    getUsername(): string {\n\n        return this.authService.getUsername();\n\n    }\n\n    public error(err: HttpErrorResponse): void {\n\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading text-center\">\n        <h1 class=\"action-detail-header\">{{action.actionLabel}}</h1>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <h4>\n        <localize key=\"io.geoObjectType\"></localize>: {{action.geoObjectType.code}}\n      </h4>\n    \n      <div style=\"margin: 20px 0;\">\n        <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\"></localize></span>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n\n<!--         <geoobject-shared-attribute-editor  -->\n<!--           #attributeEditor -->\n<!--           *ngIf=\"preGeoObject\" -->\n<!--           [readOnly]=\"!isEditing\"   -->\n<!--           [geoObjectType]=\"geoObjectType\" -->\n<!--           [postGeoObject]=\"postGeoObject\" -->\n<!--           [preGeoObject]=\"preGeoObject\" -->\n<!--           [forDate]=\"forDate\" -->\n<!--           [isGeometryInlined]=\"true\"> -->\n<!--         </geoobject-shared-attribute-editor> -->\n        \n        <geoobject-shared-attribute-editor \n            #attributeEditor\n            *ngIf=\"action\"\n            [readOnly]=\"readOnly\"  \n            [geoObjectType]=\"geoObjectType\"\n            [geoObjectData]=\"{'geoObject':postGeoObject, 'actions': [action]}\"\n            [forDate]=\"forDate\"\n            [readOnly]=\"false\"\n            [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\" [disabled]=\"!isEditing\"></textarea>\n        </div>\n\n        <div class=\"button-holder text-right\" style=\"margin:40px 0 20px 0;\">\n          <button *ngIf=\"!readOnly && !isEditing\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { TimeRangeEntry } from \"@registry/model/registry\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./geoobject-shared-attribute-editor.component\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\n\nexport interface DateBoundary { date: string; isStart: boolean; isEnd: boolean }\n\nexport interface TimelineEntry { width: number, x: number, period: TimeRangeEntry }\n\nexport interface DataTimeSpan {startDay: number, startDate: string, displayStartDate: string, endDay: number, endDate: string, displayEndDate: string, span: number}\n\n/*\n * This component is shared between:\n * -\n *\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\n@Component({\n    selector: \"stability-period\",\n    templateUrl: \"./stability-period.component.html\",\n    styleUrls: [\"./stability-period.component.css\"],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"1000ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"1000ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class StabilityPeriodComponent implements OnInit {\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    @Input() sharedAttributeEditor: GeoObjectSharedAttributeEditorComponent;\n\n    @Input() filterDate: string;\n\n    @Input() forDate: string;\n\n    @Input() context: string;\n\n    @Input() latestPeriodIsActive: boolean = false;\n\n    periods: TimeRangeEntry[] = [];\n\n    timelines: [TimelineEntry[]];\n\n    activeEntry: TimelineEntry = null;\n\n    forDateEntry: TimelineEntry = null;\n\n    private infinityDayPadding: number = 15;\n\n    dataTimeSpan: DataTimeSpan = null;\n\n    _showHint: boolean = false;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set showHint(val: boolean) {\n        this._showHint = val;\n\n        setTimeout(() => {\n            this.showHint = false;\n        }, 10000);\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public dateService: DateService) {}\n\n    ngOnInit(): void {\n        this.generate();\n\n        this.changeRequestEditor.onChangeSubject.subscribe(() => {\n            this.generate();\n        });\n\n        let timeline = this.timelines[0];\n        if (timeline && timeline.length > 1) {\n            if (this.filterDate != null) {\n                let index = timeline.findIndex(entry => this.dateService.between(this.filterDate, entry.period.startDate, entry.period.endDate));\n\n                if (index !== -1) {\n                    this.activeEntry = timeline[index];\n                }\n            } else if (this.latestPeriodIsActive) {\n                this.setActiveTimelineEntry(timeline[timeline.length - 1]);\n            }\n\n            if (this.forDate != null) {\n                let forDateIndex = timeline.findIndex(entry => this.dateService.between(this.forDate, entry.period.startDate, entry.period.endDate));\n\n                if (forDateIndex !== -1) {\n                    this.forDateEntry = timeline[forDateIndex];\n                }\n            }\n        }\n    }\n\n    navigateRelative(amount: number) {\n        let timeline: TimelineEntry[] = this.timelines[0];\n        if (timeline == null || timeline.length === 0) { return; }\n\n        if (this.activeEntry == null) {\n            this.setActiveTimelineEntry(timeline[0]);\n            return;\n        }\n\n        let index = timeline.findIndex(entry => entry.period.startDate === this.activeEntry.period.startDate);\n\n        if (index !== -1) {\n            let nextIndex = index + amount;\n\n            if (nextIndex < 0) {\n                nextIndex = timeline.length - 1;\n            } else if (nextIndex >= timeline.length) {\n                nextIndex = 0;\n            }\n\n            this.setActiveTimelineEntry(timeline[nextIndex]);\n        }\n    }\n\n    setActiveTimelineEntry(entry: TimelineEntry, refresh: boolean = true) {\n        if (this.periods.length <= 1) {\n            entry = null;\n        }\n\n        if (this.activeEntry && entry && entry.period.startDate === this.activeEntry.period.startDate) {\n            entry = null;\n        }\n\n        this.activeEntry = entry;\n        this.sharedAttributeEditor.setFilterDate(entry == null ? null : entry.period.startDate, refresh);\n    }\n\n    generate() {\n        this.generatePeriods();\n        this.generateTimelines();\n    }\n\n    calculateDataTimeSpan(): void {\n        let startDate: string = null;\n        let endDate: string = null;\n        let endDay: number = null;\n        let startDay: number = null;\n\n        if (this.periods.length > 0) {\n            startDate = this.periods[0].startDate;\n            endDate = this.periods[this.periods.length - 1].endDate;\n\n            startDay = this.dateService.getDateFromDateString(startDate).getTime() / (1000 * 60 * 60 * 24);\n\n            if (endDate === \"5000-12-31\") {\n                if (this.periods.length > 1) {\n                    endDay = this.dateService.getDateFromDateString(this.periods[this.periods.length - 1].startDate).getTime() / (1000 * 60 * 60 * 24);\n                    this.infinityDayPadding = (endDay - startDay) * 0.05;\n                    endDay = this.infinityDayPadding + endDay;\n                } else {\n                    endDay = startDay + this.infinityDayPadding;\n                }\n            } else {\n                endDay = this.dateService.getDateFromDateString(endDate).getTime() / (1000 * 60 * 60 * 24);\n            }\n        }\n\n        this.dataTimeSpan = { startDay: startDay, startDate: startDate, displayStartDate: this.dateService.formatDateForDisplay(startDate), endDay: endDay, endDate: endDate, displayEndDate: this.dateService.formatDateForDisplay(endDate), span: (endDay - startDay) };\n    }\n\n    generateTimelines() {\n        this.timelines = [] as any;\n\n        if (this.periods.length === 0) {\n            return;\n        } else if (this.periods.length === 1) {\n            this.setActiveTimelineEntry(null, false);\n        }\n\n        this.calculateDataTimeSpan();\n\n        let currentTimeline: any = [];\n        this.timelines.push(currentTimeline);\n        let daysLeft = this.dataTimeSpan.span;\n\n        let len = this.periods.length;\n        for (let i = 0; i < len; ++i) {\n            let period = this.periods[i];\n\n            let start: Date = this.dateService.getDateFromDateString(period.startDate);\n            let end: Date = this.dateService.getDateFromDateString(period.endDate);\n\n            let startDay = start.getTime() / (1000 * 60 * 60 * 24);\n            let endDay = end.getTime() / (1000 * 60 * 60 * 24);\n            if (period.endDate === \"5000-12-31\") {\n                endDay = startDay + this.infinityDayPadding;\n            }\n\n            let daysInPeriod: number = (endDay - startDay);\n            if (daysLeft - daysInPeriod < 0) {\n                let daysInFirstEntry = daysLeft;\n                let timelineEntry1: TimelineEntry = { width: (daysInFirstEntry / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry1);\n\n                currentTimeline = [];\n                this.timelines.push(currentTimeline);\n                daysLeft = this.dataTimeSpan.span;\n\n                let timelineEntry2: TimelineEntry = { width: ((daysInPeriod - daysInFirstEntry) / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry2);\n            } else {\n                let timelineEntry: TimelineEntry = { width: (daysInPeriod / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry);\n                daysLeft = daysLeft - daysInPeriod;\n\n                if (daysLeft === 0) {\n                    currentTimeline = [];\n                    this.timelines.push(currentTimeline);\n                    daysLeft = this.dataTimeSpan.span;\n                }\n            }\n        }\n\n        // console.log(this.timelines);\n    }\n\n    generatePeriods() {\n        let boundaries: DateBoundary[] = [];\n\n        // Create an array which contains all the unique start and end dates\n        let editors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] = this.changeRequestEditor.getEditors();\n        let len = editors.length;\n\n        for (let i = 0; i < len; ++i) {\n            if (editors[i] instanceof ChangeRequestChangeOverTimeAttributeEditor) {\n                let editor: ChangeRequestChangeOverTimeAttributeEditor = editors[i] as ChangeRequestChangeOverTimeAttributeEditor;\n                let values = editor.getEditors();\n\n                let valLen = values.length;\n                for (let j = 0; j < valLen; ++j) {\n                    let period: ValueOverTimeCREditor = values[j];\n\n                    if (period.startDate != null && period.endDate != null && !period.isDelete()) {\n                        let startIndex = boundaries.findIndex(boundary => period.startDate === boundary.date);\n                        if (startIndex !== -1) {\n                            boundaries[startIndex].isStart = true;\n                        } else {\n                            boundaries.push({ date: period.startDate, isStart: true, isEnd: false });\n                        }\n\n                        let endIndex = boundaries.findIndex(boundary => period.endDate === boundary.date);\n                        if (endIndex !== -1) {\n                            boundaries[endIndex].isEnd = true;\n                        } else {\n                            boundaries.push({ date: period.endDate, isStart: false, isEnd: true });\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sort the date boundaries\n        boundaries.sort(function(a, b) {\n            if (a.date == null || a.date === \"\") {\n                return 1;\n            } else if (b.date == null || b.date === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.date);\n            let next: any = new Date(b.date);\n            return first - next;\n        });\n\n        // Loop over the boundaries and create versions between all the boundaries, but only if there is data between them\n        this.periods = [];\n        let dlen = boundaries.length;\n        for (let i = 0; i < dlen; ++i) {\n            let current: DateBoundary = boundaries[i];\n            let next: DateBoundary = i + 1 > dlen ? null : boundaries[i + 1];\n\n            if (current.isStart && current.isEnd) {\n                this.periods.push({ startDate: current.date, endDate: current.date });\n            }\n            if (current.isEnd && (next != null && next.isStart && this.dateService.addDay(1, current.date) === next.date)) {\n                continue;\n            }\n\n            let startDate = (current.isEnd ? this.dateService.addDay(1, current.date) : current.date);\n\n            if (next != null && this.changeRequestEditor.existsAtDate(startDate)) {\n                let endDate = (!next.isStart ? next.date : this.dateService.addDay(-1, next.date));\n\n                this.periods.push({ startDate: startDate, endDate: endDate });\n            }\n        }\n\n        this.dateService.sort(this.periods);\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div *ngIf=\"dataTimeSpan\" style=\"margin-bottom:10px;\">\n    <span style=\"margin-left:20px;\">\n      <localize key=\"manage.versions.historyTitle\"></localize>\n      \n      <span>\n        <a *ngIf=\"activeEntry\" (click)=\"setActiveTimelineEntry(null)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewAll\"></localize>)</a>\n        <div [@fadeInOut] *ngIf=\"_showHint\" id=\"time-hint\">\n            <localize key=\"changeovertime.manageVersions.time.hint.message\"></localize>\n        </div>\n        \n        <a *ngIf=\"!activeEntry && forDate && context === 'LIST'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewListPeriod\"></localize>)</a>\n        <a *ngIf=\"!activeEntry && forDate && context === 'EXPLORER'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewExplorerPeriod\"></localize>)</a>\n        <span *ngIf=\"!activeEntry && !forDate\" class=\"view-all\">\n          (<localize key=\"manage.versions.history.viewingAll\"></localize>)\n        </span>\n      </span>\n\n    </span>\n    <span style=\"float:right;color:#6ba542;margin-right:20px;\">\n      <ng-container *ngIf=\"activeEntry\">\n\t\t      {{activeEntry.period.startDate}}\n\t\t      -\n\t\t      {{dateService.formatDateForDisplay(activeEntry.period.endDate)}}\n      </ng-container>\n      <ng-container *ngIf=\"!activeEntry\">\n          {{dataTimeSpan.displayStartDate}}\n          -\n          {{dataTimeSpan.displayEndDate}}\n      </ng-container>\n    </span>\n\t  \n    <div style=\"padding: 0 20px;\">\n        <div *ngFor=\"let timeline of timelines\" class=\"timeline\">\n\t      <a *ngFor=\"let entry of timeline\" class=\"timeline-entry\" [ngClass]=\"{'active-timeline-entry': this.activeEntry == null || (this.activeEntry != null && entry.period.startDate === this.activeEntry.period.startDate), 'not-clickable': periods.length <= 1}\" (click)=\"setActiveTimelineEntry(entry)\" [ngStyle]=\"{'width': entry.width + '%', 'left': entry.x + '%'}\">\n\t      </a>\n\t    </div>\n        \n        <div class=\"timeline-nav-btn-wrapper\">\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(-1)\" style=\"\"><i class=\"fa fa-chevron-left \"></i></a>\n<!--           </div> -->\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(1)\" style=\"\"><i class=\"fa fa-chevron-right \"></i></a> \n<!--           </div> -->\n        </div>\n    </div>\n\n<!-- \t  <div *ngIf=\"periods.length > 1\" class=\"navigation-controls\" style=\"padding-top:5px;\"> -->\n<!-- \t    <a (click)=\"navigateRelative(-1)\" style=\"float:left;\"><i class=\"fa fa-chevron-left\"></i></a> -->\n<!-- \t    <a (click)=\"navigateRelative(1)\" style=\"float:right;\"><i class=\"fa fa-chevron-right\"></i></a> -->\n<!-- \t  </div> -->\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\n\n@Component({\n    selector: \"standard-attribute-editor\",\n    templateUrl: \"./standard-attribute-editor.component.html\",\n    styleUrls: [\"./standard-attribute-editor.component.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class StandardAttributeEditorComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    message: string = null;\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObject: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    view: {\n        summaryKey: SummaryKey;\n        summaryKeyLocalized: string;\n        oldValue?: any;\n        value: any;\n        attributeCode: string;\n    };\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: StandardAttributeCRModel;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, null) as StandardAttributeCRModel;\n        this.calculateView();\n    }\n\n    ngAfterViewInit() {\n    }\n\n    calculateView(): void {\n        let diff = this.changeRequestAttributeEditor.diff;\n\n        if (diff != null) {\n            let newVal = diff.newValue == null ? null : JSON.parse(JSON.stringify(diff.newValue));\n            this.view = {\n                value: newVal,\n                summaryKey: SummaryKey.VALUE_CHANGE,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.VALUE_CHANGE),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n\n            if (diff.oldValue !== null && diff.oldValue !== undefined) {\n                this.view.oldValue = JSON.parse(JSON.stringify(diff.oldValue));\n            }\n        } else {\n            this.view = {\n                value: this.changeRequestAttributeEditor.value,\n                summaryKey: SummaryKey.UNMODIFIED,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.UNMODIFIED),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n        }\n    }\n\n    onValueChange(): void {\n        this.calculateView();\n    }\n\n    onApprove(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.PENDING).then(results => {\n            editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div @fadeInOut class=\"value-box\">\n    <div *ngIf=\"view\" class=\"value-box-wrapper\" [ngClass]=\"{'warning' : view.summaryKey && view.summaryKey !== 'UNMODIFIED'}\" >\n      <div *ngIf=\"view.summaryKey && view.summaryKey !== 'UNMODIFIED'\" class=\"value-box-indicator\">\n        {{view.summaryKeyLocalized}}\n      </div>\n      \n      <div class=\"inner-value\">\n        <div *ngIf=\"attributeType.type === 'boolean'\">\n          <div>\n\t          <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? view.value === false : (view.value === true)\" [value]=\"view.attributeCode === 'invalid' ? false : true\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-true\" name=\"mod-{{geoObjectType.code}}-true\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize></span>\n\t          </label> \n\t          <label class=\"radio radio-inline\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? changeRequestAttributeEditor.value === true : changeRequestAttributeEditor.value === false\" [value]=\"view.attributeCode === 'invalid' ? true : false\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-false\" name=\"mod-{{geoObjectType.code}}-false\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize></span>\n\t          </label>\n\t        </div>\n        </div>\n        \n        <div *ngIf=\"(view.oldValue !== null && view.oldValue !== undefined) && !isNew\">\n          <p style=\"color: var(--theme-text-dark);\" class=\"warning-text display-current-value\">\n            <localize key=\"change.request.changed.value.prefix\"></localize>&nbsp;\n            \n            <span *ngIf=\"attributeType.type === 'boolean'\">\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === false) : (view.oldValue === true)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize>\n\t            </span>\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === true) : (view.oldValue === false)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize>\n\t            </span>\n            </span>\n            \n            <span *ngIf=\"attributeType.type !== 'boolean'\">\n                {{ view.oldValue }}\n            </span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  <!-- TODO : This code copy/pasted from manage-versions.component.html -->\n  <div *ngIf=\"changeRequest && !changeRequest.isNew\" class=\"cr-maintainer-options\">\n    <div *ngIf=\"changeRequest.approvalStatus === 'PENDING' && changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.editAction && changeRequestAttributeEditor.diff\">\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n        <localize key=\"change.request.accept.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n        <localize key=\"change.request.reject.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n        <localize key=\"change.request.pending.btn\"></localize>\n      </button>\n    </div>              \n    <div *ngIf=\"changeRequest.approvalStatus !== 'PENDING'\">\n      <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n          <localize key=\"change.request.status.accepted\"></localize>\n      </strong>\n      <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n          <localize key=\"change.request.status.rejected\"></localize>\n      </strong>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, OnDestroy, Input } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService, MapService, GeometryService } from \"@registry/service\";\n\nimport { Map, NavigationControl } from \"mapbox-gl\";\n\n// eslint-disable-next-line no-unused-vars\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"geoobject-editor-map[geometryType]\",\n    templateUrl: \"./geoobject-editor-map.component.html\",\n    styleUrls: [\"./geoobject-editor-map.component.css\"]\n})\n\n/**\n * This component is used when viewing change requests\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    _mapHeight: number = 400;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set mapHeight(height: number) {\n        if (height > 400) {\n            this._mapHeight = height;\n        }\n    }\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mapDiv\") mapDiv;\n\n    map: Map;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private geomService: GeometryService, private registryService: RegistryService, private mapService: MapService) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.mapDiv.nativeElement.id = Math.floor(Math.random() * (899999)) + 100000;\n\n            this.map = new Map({\n                container: this.mapDiv.nativeElement.id,\n                style: \"mapbox://styles/mapbox/satellite-v9\",\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            });\n\n            this.map.on(\"load\", () => {\n                this.initMap();\n            });\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    getIsValid(): boolean {\n        return this.geomService.isValid();\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            // this.addLayers();\n            // this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n        });\n\n        this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl());\n\n        this.zoomToBbox();\n    }\n\n    zoomToBbox(): void {\n        this.geomService.zoomToLayersExtent();\n    }\n\n    public error(err: HttpErrorResponse): void {\n        // TODO\n        console.log(\"ERROR\", err);\n    }\n\n}\n","<div class=\"geoobject-editor-map-wrapper\">\n  <div #mapDiv class=\"map-view-port-inline text-left\" [style.height.px]=\"_mapHeight\" style=\"width:calc(100% - 15px)\"></div>\n</div>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: \"simple-edit-control\",\n    templateUrl: \"./simple-edit-control.component.html\",\n    styleUrls: [\"./simple-edit-control.css\"]\n})\nexport class SimpleEditControl {\n\n    elRef: ElementRef\n\n    @Output() editEmitter = new EventEmitter<void>();\n\n    @Input() visible: boolean = true;\n    @Input() editSessionEnabled: boolean = false;\n    @Input() save: boolean = false;\n\n    constructor(elRef: ElementRef) {\n        this.elRef = elRef;\n    }\n\n    onAdd(map): any {\n        return this.elRef.nativeElement;\n    }\n\n    onRemove(map): void {\n        this.elRef.nativeElement.remove();\n    }\n\n    onClick(): void {\n        this.editEmitter.emit();\n    }\n}\n","<div (click)=\"this.onClick();\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button *ngIf=\"editSessionEnabled\" \n    class=\"fa\" \n    [ngClass]=\"{'fa-pencil-square-o':!save, 'fa-save':save}\" \n    style=\"color: black; font-size: 18px;\" \n    [title]=\"'changeovertime.manageVersions.button.label' | localize\" \n    >\n  </button>\n  <div *ngIf=\"editSessionEnabled\" class=\"map-button-info-hint-wrapper\">\n    <div class=\"map-button-info-hint\">\n      <localize key=\"map.button.info.hint\"></localize>\n    </div>\n    <div class=\"map-button-pointer\"></div>\n  </div>\n</div>","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\n@Component({\n\n    selector: \"cascading-geo-selector\",\n    templateUrl: \"./cascading-geo-selector.html\"\n})\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mainForm\") mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() customEvent: boolean = false;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach(hierarchy => {\n            const object = {};\n            object[\"label\"] = hierarchy.label;\n            object[\"code\"] = hierarchy.code;\n\n            this.isValid = this.isValid && (this.hierarchies.length > 0);\n\n            hierarchy.entries.forEach(pot => {\n                const startDate = Date.parse(pot.startDate);\n                const endDate = Date.parse(pot.endDate);\n\n                if (time >= startDate && time <= endDate) {\n                    let parents = [];\n\n                    hierarchy.types.forEach(type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if (pot.parents[type.code] != null) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push(parent);\n                    });\n\n                    object[\"parents\"] = parents;\n                }\n            });\n\n            this.cHierarchies.push(object);\n        });\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions(code: string): void {\n        const hierarchy = this.hierarchies.find(h => h.code === code);\n\n        if (this.customEvent) {\n            this.onManageVersion.emit(hierarchy);\n        } else {\n/*\n            this.bsModalRef = this.modalService.show(ManageParentVersionsModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            });\n            this.bsModalRef.content.init(hierarchy);\n            this.bsModalRef.content.onVersionChange.subscribe(hierarchy => {\n                this.calculate();\n            });\n            */\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\" *ngIf=\"!readOnly\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, Input, EventEmitter, Output, SimpleChanges } from \"@angular/core\";\nimport { IActionMapping, ITreeOptions } from \"@circlon/angular-tree-component\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\n\n@Component({\n\n    selector: \"tree-geo-selector\",\n    templateUrl: \"./tree-geo-selector.html\",\n    styleUrls: [\"./tree-geo-selector.css\"]\n})\nexport class TreeGeoSelector {\n\n    @Input() hierarchy: HierarchyOverTime;\n\n    @Input() readOnly: boolean = false;\n\n    @Input() forDate: Date = null;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    nodes: any[] = [];\n\n    actionMapping: IActionMapping = {\n        mouse: {\n            click: null\n        }\n    }\n\n    options: ITreeOptions = {\n        displayField: \"name\",\n        isExpandedField: \"expanded\",\n        idField: \"code\",\n        actionMapping: this.actionMapping\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        let time = null;\n\n        if (this.forDate != null) {\n            time = this.forDate.getTime();\n        }\n\n        let nodes = [];\n        let current = null;\n\n        this.hierarchy.entries.forEach(pot => {\n            const startDate = Date.parse(pot.startDate);\n            const endDate = Date.parse(pot.endDate);\n\n            // eslint-disable-next-line no-mixed-operators\n            if (time == null || time >= startDate && time <= endDate) {\n                this.hierarchy.types.forEach(type => {\n                    let node: any = {\n                        code: type.code,\n                        label: type.label,\n                        children: [],\n                        expanded: false\n                    };\n\n                    if (pot.parents[type.code] != null) {\n                        node.name = pot.parents[type.code].text;\n\n                        if (time == null) {\n                            node.name = node.name + \" (\" + pot.startDate + \" -> \" + pot.endDate + \")\";\n                        }\n\n                        node.geoObject = pot.parents[type.code].geoObject;\n                    }\n\n                    if (current == null) {\n                        nodes.push(node);\n                    } else {\n                        current.children.push(node);\n                        current.expanded = true;\n                    }\n\n                    current = node;\n                });\n            }\n\n            current = null;\n        });\n\n        this.nodes = nodes;\n    }\n\n    onEdit(): void {\n        this.onManageVersion.emit(this.hierarchy);\n    }\n\n}\n","<div>\n\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 style=\"margin: 0;\">{{hierarchy.label}}</h4>\n    </div>\n    <div class=\"panel-body\">\n\n<!--       <div class=\"input-group\"> -->\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\" >\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n<!--         <span *ngIf=\"!readOnly\" class=\"input-group-addon\">  -->\n<!--           <i class=\"fa fa-pencil clickable\" (click)=\"onEdit()\" aria-hidden=\"true\"></i> -->\n<!--         </span> -->\n<!--       </div> -->\n      \n      <button class=\"btn btn-primary\" style=\"width:100%;margin-top:10px;\" *ngIf=\"!readOnly\" (click)=\"onEdit()\"><localize key=\"modal.button.edit\"></localize></button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component({\n    selector: \"action-detail-modal\",\n    templateUrl: \"./action-detail-modal.component.html\",\n    styleUrls: []\n})\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    readonly: boolean;\n\n    @ViewChild(\"cuDetail\") cuDetail: ActionDetailComponent;\n    @ViewChild(\"arDetail\") arDetail: ActionDetailComponent;\n    @ViewChild(\"spDetail\") spDetail: ActionDetailComponent;\n\n    @Input()\n    curAction(action: any, readonly: boolean) {\n        this.action = action;\n        this.readonly = readonly;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if (this.cuDetail != null) {\n            this.cuDetail.endEdit();\n        }\n\n        if (this.arDetail != null) {\n            this.arDetail.endEdit();\n        }\n\n        if (this.spDetail != null) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { IOService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"data-export\",\n    templateUrl: \"./data-export.component.html\",\n    styleUrls: []\n})\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService, private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes(true).then(types => {\n            // this.types = types;\n\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                if (this.authService.isOrganizationRA(types[i].orgCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.types = myOrgTypes;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onChange(code: string): void {\n        if (code != null && code.length > 0) {\n            this.service.getHierarchiesForType(code, false).then(hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n    }\n\n    onExport(): void {\n        if (this.format === \"SHAPEFILE\") {\n            window.location.href = registry.contextPath + \"/shapefile/export-shapefile?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        } else if (this.format === \"EXCEL\") {\n            window.location.href = registry.contextPath + \"/excel/export-spreadsheet?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, PRESENT } from \"@registry/model/registry\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport * as moment from \"moment\";\n\n@Component({\n    selector: \"geometry-panel\",\n    templateUrl: \"./geometry-panel.component.html\",\n    styleUrls: [\"./geometry-panel.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeometryPanelComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n\n    isVersionForHighlight: number;\n\n    message: string = null;\n\n    readonly: boolean = false;\n\n    hasConflict: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Output() onCloneGeometry = new EventEmitter<any>();\n\n    @Output() onEdit = new EventEmitter<ValueOverTime>();\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    geoObjectOverTime: GeoObjectOverTime;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set geoObjectOverTimeInput(value: GeoObjectOverTime) {\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value));\n        this.geoObjectOverTime = value;\n    }\n\n    @Input() isNewGeoObject: boolean = false;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public changeDetectorRef: ChangeDetectorRef, private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    onDateChange(): any {\n        this.hasConflict = false;\n\n        this.isValid = this.checkDateFieldValidity();\n\n        let vAttributes = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        this.hasConflict = this.dateService.checkRanges(null, vAttributes);\n    }\n\n    edit(vot: ValueOverTime, isVersionForHighlight: number): void {\n        this.onEdit.emit(vot);\n\n        this.isVersionForHighlight = isVersionForHighlight;\n    }\n\n    onAddNewVersion(geometry: ValueOverTime): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null; // Utils.formatDateString(new Date());\n        vot.endDate = null; // Utils.formatDateString(new Date());\n\n        if (geometry && geometry.value) {\n            vot.value = geometry.value;\n        } else {\n            vot.value = { type: this.geoObjectType.geometryType, coordinates: [] };\n        }\n\n        if (this.geoObjectType.geometryType === \"MULTIPOLYGON\") {\n            vot.value.type = \"MultiPolygon\";\n        } else if (this.geoObjectType.geometryType === \"POLYGON\") {\n            vot.value.type = \"Polygon\";\n        } else if (this.geoObjectType.geometryType === \"POINT\") {\n            vot.value.type = \"Point\";\n        } else if (this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            vot.value.type = \"MultiPoint\";\n        } else if (this.geoObjectType.geometryType === \"LINE\") {\n            vot.value.type = \"Line\";\n        } else if (this.geoObjectType.geometryType === \"MULTILINE\") {\n            vot.value.type = \"MultiLine\";\n        }\n\n        votArr.push(vot);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    setDateAttribute(vot: ValueOverTime, val: string): void {\n        vot.value = new Date(val).getTime().toString();\n    }\n\n    remove(version: any): void {\n        let val = this.geoObjectOverTime.attributes[\"geometry\"];\n\n        let position = -1;\n        for (let i = 0; i < val.values.length; i++) {\n            let vals = val.values[i];\n\n            if (vals.startDate === version.startDate) {\n                position = i;\n            }\n        }\n\n        if (position > -1) {\n            val.values.splice(position, 1);\n        }\n    }\n\n    formatDate(date: string) {\n        let localeData = moment.localeData(date);\n        let format = localeData.longDateFormat(\"L\");\n        return moment().format(format);\n    }\n\n    setInfinity(vAttribute, attributes): void {\n        if (vAttribute.endDate === PRESENT) {\n            vAttribute.endDate = new Date();\n        } else {\n            vAttribute.endDate = PRESENT;\n        }\n\n        this.onDateChange();\n    }\n\n    sort(votArr: ValueOverTime[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    onCloneGeometryToNewVersion(geometry: ValueOverTime): void {\n        this.onAddNewVersion(geometry);\n    }\n\n    onSubmit(): void {\n        this.onChange.emit(this.geoObjectOverTime);\n    }\n\n    onCancel(): void {\n        this.onChange.emit(this.originalGeoObjectOverTime);\n    }\n\n}\n","<div>\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #versionsform=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"col-md-12\">\n          <div class=\"attribute-version-wrapper\" *ngIf=\"geoObjectOverTime\">\n\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                    <table class=\"table table-striped\">\n\n                      <tbody class=\"attribute-element-wrapper\">\n                        <p class=\"message\" *ngIf=\"geoObjectOverTime.attributes['geometry'].values.length === 0\">\n                          <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize>\n                        </p>\n\n                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\" [ngClass]=\"{'error-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'ERROR', 'warning-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'WARNING'}\">\n                          <td [ngClass]=\"{'active' : i === isVersionForHighlight}\">\n                            <table>\n                              <tr class=\"attribute-value-row\" *ngIf=\"geoObjectType.isGeometryEditable\">\n                                <td colspan=\"2\">\n                                  <button class=\"btn btn-primary\" (click)=\"edit(vAttribute, i)\" role=\"button\">\n                                    <localize key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                  </button>\n                                  <button type=\"submit\" (click)=\"onCloneGeometryToNewVersion(vAttribute)\" class=\"btn btn-default\" role=\"button\">\n                                      <localize key=\"changeovertime.manageVersions.copy.geometry.button\"></localize>\n                                    </button>\n                                </td>\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5> \n                                  \n                                  <date-field #dateFieldComponents [(value)]=\"vAttribute.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" ></date-field>\n                                  \n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                      <h5>\n                                        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                      </h5>\n                                      \n                                      <date-field #dateFieldComponents [(value)]=\"vAttribute.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" [placement]=\"'bottom'\"></date-field>\n                                      \n                                    </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0\">\n<!--                                   <p class=\"error-message\"> -->\n<!--                                     <localize key=\"manage.versions.overlap.message\"></localize> -->\n<!--                                   </p> -->\n                                  <p *ngFor=\"let msg of vAttribute.conflictMessage\" [ngClass]=\"{'error-message': msg.type === 'ERROR', 'warning-message': msg.type === 'WARNING'}\">\n                                    {{msg.message}}\n                                  </p>\n                              </tr>    \n                            </table>\n                          </td>\n                          <td style=\"vertical-align: middle;\" class=\"manage-version-button clickable\" [title]=\"'changeovertime.manageVersions.remove.version' | localize\" (click)=\"remove(vAttribute)\">\n                            <i class=\"fa fa-times\"></i>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </li>\n\n                  <li class=\"list-group-item\" style=\"text-align: left;\">\n                    <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion(null)\"> <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                    </i>\n                  </li>\n                </ul>\n              </div>\n        </div>\n\n      </div>\n\n      <div class=\"row-holder\">\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"holder\" style=\"border: none; width: 100%;\">\n          <div class=\"button-holder pull-right\">\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n              <localize key=\"io.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || !versionsform.valid\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\n@Pipe({\n    name: \"geoobjecttype\",\n    pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n\n    transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        let unassignedGeoObjTypes: string[] = [];\n        this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n\n        // filter items array, items which match and return true will be\n        // kept, false will be filtered out\n        return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n    }\n\n    buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void {\n        filter.forEach(f => {\n            this.processHierarchyNodes(f, unassignedGeoObjTypes);\n        })\n    }\n\n    processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]) {\n        unassignedGeoObjTypes.push(node.geoObjectType)\n\n        node.children.forEach(child => {\n            this.processHierarchyNodes(child, unassignedGeoObjTypes);\n        })\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"geoObjectAttributeExcludesFilter\",\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"toEpochDateTime\",\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n\n    transform(date: string): any {\n        if (!date) {\n            return date;\n        }\n\n        return new Date(date).getTime();\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from \"../shared/service/guard.service\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"hierarchies\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"data\",\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-requests\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"change-requests/:oid\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"master-lists\",\n        component: ListTypeManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"master-list/:oid\",\n        component: ListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"scheduled-jobs\",\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"job/:oid\",\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-request\",\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"tasks\",\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"synchronization-configs\",\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"synchronization-config/:oid\",\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'sync/details/:config/:oid',\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'curation-job/:oid',\n        component: CurationJobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"historical-events\",\n        component: HistoricalEventModuleComponent,\n        canActivate: [ContributerGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n})\nexport class RegistryRoutingModule { }\n","import { Component } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\nimport { DateService } from \"@shared/service\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"curation-problem-modal\",\n    templateUrl: \"./curation-problem-modal.component.html\",\n    styleUrls: []\n})\nexport class CurationProblemModalComponent {\n\n    message: string = null;\n    version: ListTypeVersion;\n    problem: CurationProblem;\n    job: CurationJob;\n    callback: Function;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public service: ListTypeService, public bsModalRef: BsModalRef, private modalService: BsModalService, private dateService: DateService) {\n    }\n\n    init(version: ListTypeVersion, problem: CurationProblem, job: CurationJob, callback: Function): void {\n        this.version = version;\n        this.problem = problem;\n        this.job = job;\n        this.callback = callback;\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            // return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n            return 'Missing geometry';\n        }\n\n        return probType;\n    }\n\n    onEditGeoObject(): void {\n        const editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureAsExisting(this.problem.goCode, this.problem.typeCode, this.version.forDate, true);\n        editModal.content.setMasterListId(this.version.oid);\n        editModal.content.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n\n            // THERE HAS TO BE A BETTER WAY TO DO THIS\n            if (attributeEditor.changeRequest != null) {\n                const changeRequest = attributeEditor.changeRequest;\n\n                let config = {\n                    historyId: this.job.historyId,\n                    problemId: this.problem.id,\n                    resolution: \"APPLY_GEO_OBJECT\",\n                    code: this.problem.goCode,\n                    typeCode: this.problem.typeCode,\n                    actions: changeRequest.actions,\n                };\n\n                this.service.submitErrorResolve(config).then(() => {\n                    this.callback({ action: \"RESOLVED\", data: this.problem });\n                    editModal.hide();\n                }).catch((err: HttpErrorResponse) => {\n                    editModal.content.error(err);\n                });\n            }\n        };\n\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolvedListener(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onProblemResolvedListener(problem: CurationProblem): void {\n        this.callback({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\" *ngIf=\"problem != null\">\n\n        <fieldset>\n\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n                <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n                <!-- <div class=\"row\">\n            \n                    <h2>\n                        Review: {{job.fileName}} problem\n                    </h2>\n                </div> -->\n                <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                                    border-radius: 10px;\n                                                    margin-bottom: 20px;\n                                                    margin-top: 20px;\n                                                    padding: 10px;\">\n                    <div class=\"col-md-6\">\n                        <div class=\"wrapper\">\n\n                            <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.lastRunBy}}\n                                </span>\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.started.date.label\"></localize>:\n                                    <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                                        {{formatDate(job.lastRun)}}\n                                    </span>\n                                </span>\n                            </p>\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-6\"></div>\n                </div>\n\n                <div class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n                    <div class=\"col-md-12\">\n\n                        <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                            <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                                <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                                    <h4><strong>\n                                            <localize key=\"etl.problem.header.problem\"></localize>\n                                        </strong></h4>\n                                    <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.type)}}\n                                    </p>\n\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                                <div\n                                    style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                                    <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\"\n                                        class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>"],"sourceRoot":""}