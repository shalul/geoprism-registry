{"version":3,"sources":["webpack:///./src/app/registry/service/geometry.service.ts","webpack:///./src/app/registry/registry.module.ts","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-editor.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/location-manager/layer-panel.component.ts","webpack:///./src/app/registry/component/location-manager/layer-panel.component.html","webpack:///./src/app/registry/component/location-manager/feature-panel.component.ts","webpack:///./src/app/registry/component/location-manager/feature-panel.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.ts","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.html","webpack:///./src/app/registry/component/location-manager/dataset-location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/dataset-location-manager.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-change-over-time-attribute-editor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/HierarchyCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/StandardAttributeCRModel.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-model.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.ts","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.ts","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["layers","editingControl","simpleEditControl","geometryChange","EventEmitter","ngOnInit","window","onbeforeunload","destroy","initialize","map","geometryType","readOnly","this","addLayers","on","saveEdits","destroyMap","removeControl","remove","removeLayers","forEach","layer","isEditing","isRendering","editingLayer","startEditing","stopEditing","enableEditing","addEditingLayers","rerender","deleteAll","setPointCoordinates","lat","long","set","type","features","id","oid","properties","geometry","coordinates","changeMode","featureIds","isValid","getAll","length","geoJson","getDrawGeometry","editPropagator","value","reload","setEditing","setRendering","addLayer","newLayer","existingIndex","findIndex","findLayer","splice","push","sort","a","b","zindex","getLayers","getRenderedLayers","filter","setLayers","controls","point","line_string","polygon","trash","combine_features","uncombine_features","userProperties","styles","paint","getSource","addControl","add","removeSource","prefix","sourceName","getLayer","removeLayer","len","i","renderGeometryAsLayer","geojson","color","finalSourceName","addSource","data","source","layout","setData","featureCollection","polygons","feature","j","points","lines","createEmptyGeometryValue","zoomToLayersExtent","coords","LngLatBounds","coord","extend","center","getCenter","pt","LngLat","lng","flyTo","zoom","essential","polys","subpoly","fitBounds","padding","subline","GeometryService","Injectable","Output","RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","AccordionModule","forRoot","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","ManageVersionsComponent","StandardAttributeEditorComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","TreeGeoSelector","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","LocationManagerComponent","DatasetLocationManagerComponent","ContextLayerModalComponent","LayerPanelComponent","FeaturePanelComponent","GeometryPanelComponent","NgModule","imports","declarations","providers","entryComponents","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","services","SummaryKey","Document","Geometry","ValueOverTimeDiff","AbstractAction","actionType","ActionTypes","CREATEGEOOBJECTACTION","CreateGeoObjectAction","attributeName","UPDATEATTRIBUTETACTION","attributeDiff","valuesOverTime","UpdateAttributeOverTimeAction","UpdateAttributeAction","ChangeRequestCurrentObject","UpdateChangeRequestCurrentObject","isNew","getActionsForAttribute","cr","hierarchyCode","actions","newActions","action","updateAttrAction","ChangeRequest","GovernanceStatus","PageEvent","http","eventService","implementDecisions","request","headers","HttpHeaders","start","post","acp","JSON","stringify","pipe","finalize","complete","toPromise","update","setActionStatus","actionOid","status","getAllRequests","pageSize","pageNumber","params","HttpParams","toString","get","rejectChangeRequest","delete","requestId","deleteFile","crOid","fileId","vfOid","ImportSheet","Location","Term","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","key","disabled","inlinelayout","valueChange","Component","selector","templateUrl","styleUrls","Input","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","message","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","attribute","unique","animate","onAnimationDone","event","indexOf","label","localeValues","precision","scale","trigger","style","opacity","transition","animations","geoObjectType","service","iService","lService","bsModalRef","authService","dateService","currentDate","Date","readonly","edit","onMasterListChange","master","listGeoObjectTypes","then","types","myOrgTypes","orgCode","typeCode","superTypeCode","isGeoObjectTypeRM","catch","err","error","displayLabel","create","representativityDate","publishingStartDate","publishDate","listAbstract","process","progress","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","hierarchies","subtypeHierarchies","leaf","frequency","isMaster","visibility","ngAfterContentInit","init","org","getIsDisabled","elClasses","target","classList","onChange","getHierarchiesForType","getHierarchiesForSubtypes","onSubmit","createMasterList","response","hide","onCancel","unsubscribe","formatDate","date","formatDateForDisplay","ErrorHandler","getMessageFromError","changeRequestEditor","geomService","postGeoObject","showAllInstances","tabIndex","isContributorOnly","attributeExcludes","isGeometryInlined","onManageVersion","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","isContributerOnly","apply","geometryAttributeType","getAttribute","AttributeType","LocalizedValue","parentAttributeType","changeRequest","createNewChangeRequest","ChangeRequestEditor","shouldForceSetExist","changePage","getChangeRequestEditor","approvalStatus","createAction","geoObjectJson","parentJson","attributes","values","startDate","endDate","undefined","name","nextPage","hasChanges","hasErrors","attributeEditors","getEditors","filteredEditors","editor","hierarchy","getEditorForAttribute","invalid","existsAttribute","GeoObjectType","existsEditor","prototype","hasOwnProperty","call","allValid","att","validate","getActions","left","geometryEditor","ViewChild","attributeForm","TREE_SCALE_FACTOR_X","TREE_SCALE_FACTOR_Y","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","modalService","contextMenuService","localizeService","registryService","userOrganization","currentHierarchy","instance","geoObjectTypes","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","isSRA","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","nativeElement","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","subscribe","localize","decode","renderTree","rootGeoObjectTypes","d3","select","isOrganizationRA","organizationCode","got","canDrag","overflowDiv","scrollLeft","scrollRight","svg","append","attr","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","calculateCanDrag","getBBox","x","y","width","height","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","calculateRelatedHierarchies","relatedHiers","hierarchyType","descendants","find","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","addChild","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","isPointWithin","dropZoneBbox","activeDropZones","parent","gotRectW","gotRectH","clearGhostNodes","isDragGroup","classed","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","parseInt","dropElY","childW","childH","dzg","dropTargetHasChildren","children","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","text","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","insertBetweenTypes","ghostNode","drag","rect","getBoundingClientRect","top","selThis","document","elementFromPoint","selectAll","each","sidebarDragHandler","registerSvgHandlers","startPoint","svgGot","getPos","setPos","svgDragHandler","findHierarchyByCode","ht","findOrganizationByCode","organizations","parentGeoObjectTypeCode","childGeoObjectTypeCode","addChildToHierarchy","index","relatedHierarchies","refreshPrimaryHierarchy","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","isRA","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","setLocales","locales","setGeoObjectTypes","pos","getGeoObjectTypePosition","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","localizedValue","toLowerCase","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","h","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","geoObjectTypeCode","gOT","show","childType","nodeMenuComponent","leafMenuComponent","item","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","animated","backdrop","ignoreBackdropClick","content","onHierarchytTypeCreate","nameA","toUpperCase","nameB","deleteHierarchyType","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","class","getHierarchyTypePosition","description","acknowledgement","contact","phoneNumber","isPrimaryHierarchy","createGeoObjectType","groupSuperType","onGeoObjTypeCreate","deleteGeoObjectType","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","onGeoObjectTypeSubmitted","position","removeFromHierarchy","parentGotCode","gotCode","isActive","filtered","setTimeout","handleInheritHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","setInheritedHierarchy","handleUninheritHierarchy","removeInheritedHierarchy","showErrorAsDialog","static","getHierarchyTypes","getHierarchyGroupedTypes","createHierarchyType","htJSON","updateHierarchyType","importSpreadsheet","configuration","json","cancelImport","importShapefile","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","includeTypes","getGeoObjectSuggestions","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","parentTermCode","termJSON","removeTerm","termCode","getNewLocaleInfo","installLocale","language","country","variant","mapboxgl","accessToken","roots","search","getGeoObjectTypes","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","gtJSON","updateGeoObjectType","addAttributeType","geoObjTypeId","attributeType","updateAttributeType","deleteAttributeType","addAttributeTermTypeOption","term","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","getGeoObject","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","getExportDetails","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","versionType","getAllMasterListVersions","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","newGeoObjectOverTime","setAttributeVersions","collection","list","createMasterListVersion","forDate","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","masterListId","notes","applyGeoObjectCreate","parentTreeNode","geoObject","prop","val","getTime","valueAttribute","publishShapefile","getMasterListsByOrg","getPublishMasterListJobs","getDatasetBounds","getOrganizations","getPage","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","unlock","run","getJobs","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","bbox","fontSize","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","configurationChange","stateChange","onNext","emit","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","exclusion","termProblems","attributeCode","localizationService","generateAttributeEditors","editors","attrs","slice","isChangeOverTime","ChangeRequestChangeOverTimeAttributeEditor","StandardAttributeCRModel","attributeEditor","_isValid","skipExists","findExistingValueOverTimeByOid","vot","changeRequestService","geoObjectId","reason","dateStr","loading","dataSource","Observable","observer","results","isGeoObjectTypeRC","handleDateChange","parse","onValidChange","newValid","getIsValid","changeTypeaheadLoading","typeaheadOnSelect","cancel","isNewGeoObject","submitFunction","arePropertiesValid","areParentsValid","isEditingGeometries","isAdmin","isMaintainer","isContributor","isContributer","day","getUTCDate","getUTCFullYear","getUTCMonth","findVotWithStartDate","votArray","setMasterListId","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","GeoObjectOverTime","goPropertiesPost","configureFromImportError","importError","object","parents","importErrorId","resolution","goSubmit","configureAsExisting","fetchGeoObject","fetchHierarchies","console","log","typeTypeCode","getTypeAheadObservable","ptn","parentSelector","force","persistModelChanges","getHierarchies","submit","_stepConfig","steps","layerChange","baseLayerChange","baselayerIconHover","lists","baseLayers","sprite","url","selected","contextLayerGroups","updateContextGroups","changes","currentValue","previousValue","contextGroup","contextLayers","versions","version","thisContextLayer","active","enabled","groupHasEnabledContextLayers","group","hasEnabled","cLayerGroup","cLayer","hasEnabledContextLayers","toggleContextLayer","removeContextLayer","addContextLayerModal","toggleBaseLayer","bl","geometryService","MODE","VERSIONS","ATTRIBUTES","HIERARCHY","GEOMETRY","_code","featureChange","modeChange","panelCancel","panelSubmit","mode","isEdit","updateCode","isGeoObjectTypeOrSuperRM","setValid","valid","preGeoObject","setEditMode","onCancelInternal","canSubmit","trim","datasetId","applyInfo","isChangeRequest","onManageAttributeVersion","onManageHiearchyVersion","onEditAttributes","auth","orgs","organizationLabel","getOrganizationLabelFromCode","isLeaf","isPrivate","toggleIsLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","geoObjectTypeManagementService","GeoObjectTypeModalStates","termOption","modalStateSubscription","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","fetchOrganizationLabel","defineAttributeModal","defineAttribute","manageAttributes","editAttribute","removeAttributeType","in","newAttribute","setAttribute","attributeInputComponent","AttributeTermType","AttributeDecimalType","isFormValid","isAttrValid","validator","c","geoObjectAttributeCode","provide","NG_VALIDATORS","useExisting","multi","Directive","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","replace","addTermOption","rootTerm","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","t","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","getCode","treeNode","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","hierarchyLabelW","hierarchyLabelH","headerFontSize","hierarchyLabelY","lineWidth","textWidth","html","d","headerGBbox","getRelatedHierarchies","nodeMouseover","element","nodeMousemove","nodeTooltipBbox","documentElement","scrollHeight","scrollWidth","nodeMouseleave","descends","insert","gtree","links","join","gHeader","gotHeaderW","MOUSE_HOVER_EVENT_ENTER","MOUSE_HOVER_EVENT_MOVE","MOUSE_HOVER_EVENT_EXIT","gotHeaderFontSize","substring","arrowRectD","gArrow","gotBodyFontSize","gotOptionsButtonFontSize","renderRelatedHierarchiesMenu","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","sysService","changeDetectorRef","showImportConfig","importStrategies","strategy","ImportStrategy","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","copyBlank","getExternalSystems","paginatedSystems","externalSystems","resultSet","views","allHierarchyViews","allTypeViews","len0","view","len2","len9","view2","findType","findHier","filteredHierarchyViews","filteredTypeViews","getUrl","format","queueLimit","removeAfterUpload","uploader","FileUploader","onBuildItemForm","fileItem","form","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","externalSystem","sys","onErrorItem","onSelectHierarchy","onSelectType","checkDates","onClick","queue","uploadAll","setImportSource","checkDateFieldValidity","startDateField","dateFields","dateFieldComponentsArray","toArray","field","inputName","setInvalid","ViewChildren","onCreate","createDate","lastUpdateDate","write","read","onView","onEdit","pair","ret","onDelete","arr","onFormat","confirm","route","today","todayString","getDateString","objectKeys","page","count","requests","columns","filterCriteria","hasBaseDropZoneOver","waitingOnScroll","sortable","snapshot","paramMap","toggleId","uploadRequest","doc","documents","onSelect","refresh","getGOTLabel","onUpload","onDownloadFile","fileOid","location","href","onDeleteFile","fileOverBase","current","onExecute","getFirstGeoObjectInActions","uid","onReject","deletedRequestId","onUpdate","applyActionStatusProperties","decisionMaker","getUsername","requestTrackBy","toggle","parentElement","className","includes","criteria","getActiveDetailComponent","endsWith","isRequestTooOld","UPDATEGEOOBJECTACTION","canEdit","permissions","encapsulation","ViewEncapsulation","None","changeRequestAttributeEditor","onChangeSubject","getGeoObjectTimeRangeStorage","valueOverTime","getValueFromGeoObjectForDiff","validateDate","getDateFromDateString","end","validateUpdateReference","conflictMessage","ConflictType","MISSING_REFERENCE","diff","severity","newStartDate","oldStartDate","goRange","constructNewDiff","oldValue","removeEmptyDiff","oldEndDate","newEndDate","newValue","areValuesEqual","setLocalizedValue","diffs","val1","val2","localeValue","lv2","getValueAtLocale","locale","lv1","lv","getValue","updateAction","votc","ValueOverTimeCREditor","requestService","elementRef","isValidChange","viewModels","isRootOfHierarchy","calculateViewModels","onAddNewVersion","hasLocalizationChanged","viewModel","onDateChange","summaryKey","NEW","v","createNewVersion","VersionDiffView","getGeoObjectTypeTermAttributeOptions","termAttributeCode","includeUnmodified","onApprove","editAction","ACCEPTED","REJECTED","onPending","PENDING","entry","pType","loopI","goCode","ancestors","p","ancestor","setParentValue","toggleGeometryEditing","coordinate","toggleGeometryView","mapRowHeight","getElementsByClassName","offsetHeight","getOrCreateLayer","toggleOldGeometryView","context","Layer","LayerColor","oldLayer","OLD","manualCoordinateChange","newCoordinateX","newCoordinateY","newX","newY","num","latValid","isFinite","Math","abs","longValid","isLongitude","ControlContainer","NgForm","host","viewProviders","calculateView","newVal","VALUE_CHANGE","summaryKeyLocalized","UNMODIFIED","onValueChange","transform","items","Pipe","pure","urlSubscriber","highlightOid","customEvent","cHierarchies","parentMap","calculate","time","entries","pot","onManageVersions","mainForm","pService","order","isPublished","isRefreshing","isWritable","showInvalid","searchPlaceholder","setList","onPageChange","refreshProgress","handleProgressChange","baseUrl","hostname","port","notifier","webSocket","_list","listAttrs","calculateListAttributes","onShowInvalidChange","getFilter","onSort","clearFilters","toggleFilter","isCollapsed","newFilter","getValues","base","unshift","total","f","s","handleInputChange","handleListChange","isFilterable","dependency","editModal","onPublish","historyOid","onNewGeoObject","onExport","encodeURIComponent","onWheel","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onDownloadShapefile","isForDateValid","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","interval","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","onResolveScheduledJob","allSelected","timeCounter","isPolling","hasRowValidationProblem","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onProblemResolvedListener","onEditGeoObject","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onViewAllCompletedTasks","onSuccess","onRemove","DEFAULT_MAPPING_STRATEGY","system","cOrg","cSystem","levelRows","orgUnitGroups","oIndex","sIndex","systems","esConfig","levels","levelRow","level","levelNum","isAttributeEditor","buildDefaultMappings","attributeMappingStrategy","isOrgUnitGroup","cgrAttrName","dhis2Id","dhis2AttrName","clearMappingData","lvl","mappings","orgUnitGroupId","onSelectLevelType","attrCfg","editorIndex","getEditorIndex","mapping","attrConfigInfos","info","cgrAttr","onOrganizationSelected","deleteMapping","addNewMapping","terms","onChangeExternalSystem","onChangeHierarchy","addLevel","removeLevel","levelRowIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Attrs","dhis2Attr","onChangeDHIS2Attr","isDifferentGot","infos","mapCgrAttr","attributeMappingStrategies","onChangeTargetType","onRun","exportErrors","mapService","longitude","latitude","SEARCH","VIEW","editSessionEnabled","displayDateRequiredError","vectorLayers","preventSingleClick","hideSearchOptions","geoObjectUid","backReference","geoObj","Map","container","metadata","sources","mapbox","tileSize","glyphs","protocol","attributionControl","initMap","onModeChange","NavigationControl","visualizePitch","AttributionControl","compact","handleMapClickEvent","fc","zoomToFeature","showOriginalGeometry","addVectorLayer","hideOriginalGeometry","removeVectorLayer","onPanelCancel","onPanelSubmit","SuccessModalComponent","changeRequestId","handleBasemapStyle","baseLayer","setStyle","timer","bounds","maxZoom","onContextLayerChange","tiles","navigator","groupHasContextLayers","hasCLayers","toolsIconHover","editOnly","published","GenericModalComponent","buttons","shouldClose","llb","vLayer","prevLayer","onFeatureChange","setFilter","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","hideRelatedHierarchy","existingSecondary","existingMenu","contextMenuGroup","hasActionsPermissions","titleLabel","actionsTitle","removeFromHierarchyLabel","noRelatedHierLabel","hideRelatedHierarchyLabel","uninheritLabel","inheritLabel","isSecondaryHierarchyRendered","numActions","removeWidth","hideRelatedWidth","uninheritWidth","existingSecondaryCode","secondaryHierarchy","relatedGotHasParents","inheritWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","onClickUninheritHierarchy","onClickInheritHierarchy","myBbox","primaryHierBbox","gSecondary","paddingLeft","secondaryGot","secondaryGotBbox","gConnector","toRoot","onNodeChange","allGeoObjectTypes","gObj","selectedGeoObjectType","onDeleteAttribute","getEditAction","generateEditors","validEditors","validateEditors","hasTimeConflict","checkRanges","hasExistConflict","existEditors","checkExistRanges","HierarchyCREditor","votDiff","hierarchyEntry","createEmptyHierarchyEntry","hierarchyOverTime","ValueOverTime","immediateParent","directParent","currentDirectParent","getLowestLevelFromHierarchyEntry","oldParents","newValueStrConcat","removeType","newParents","parentType","HierarchyOverTimeEntry","currentImmediateParent","findAction","component","populate","_value","convertValueForDisplay","calculateSummaryKey","convertDateForDisplay","convertOldValueForDisplay","split","Array","attrOpts","hasTime","hasValue","UPDATE","TIME_CHANGE","DELETE","summaryKeyData","newKey","localizeSummaryKey","applyAction","saveDraw","startEdit","endEdit","_mapHeight","mapDiv","floor","random","zoomToBbox","mapHeight","bboxCode","bboxType","bboxDate","elRef","editEmitter","visible","save","onAdd","nodes","isExpandedField","idField","expanded","curAction","cuDetail","arDetail","spDetail","hasConflict","onCloneGeometry","hasDuplicateDate","originalGeoObjectOverTime","geoObjectOverTime","vAttributes","isVersionForHighlight","votArr","getVersionData","vAttribute","getDefaultLocaleVal","defVal","locVal","setDateAttribute","moment","localeData","longDateFormat","setInfinity","PRESENT","onCloneGeometryToNewVersion","geoObjectOverTimeInput","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","routes","path","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"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AAQ,CACvBC,QAAS,WAGd,GAA0B,SAAtB,EAAK/G,cAAiD,cAAtB,EAAKA,aAA8B,CAC1E,IAAIgG,EAEJ,GAFIA,EAASrF,EAAMqE,QAAQjD,YAEf,CACR,IAAI,EAAS,IAAI,EAAAkE,aACjBD,EAAOtF,SAAQ,SAAAmF,GACXA,EAAMnF,SAAQ,SAAAsG,GACVA,EAAQtG,SAAQ,SAAAwF,GACZ,EAAOC,OAAOD,YAK1B,EAAKnG,IAAI+G,UAAU,EAAQ,CACvBC,QAAS,W,iCAtkBxBE,I,oCAAAA,EAAe,QAAfA,EAAe,O,EAD5B,GACa,EAAAA,mB,+DAAAA,EAAe,E,KAD3B,EAAAC,c,uBAmBa1H,eAAc,E,KAAvB,EAAA2H,Y,0GChCL,WACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UAEA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,UAEA,O,wFAEA,4B,wCA6IaC,I,iCAAAA,I,sCA5CE,CACP,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,8BACH,SA7GQ,CACL,EAAAC,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA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","file":"1.chunk.js","sourcesContent":["import { Injectable, Output, EventEmitter } from \"@angular/core\";\n\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { Map, LngLat, LngLatBounds } from \"mapbox-gl\";\n\nimport { Layer } from \"../component/geoobject-shared-attribute-editor/manage-versions-model\";\n\n// eslint-disable-next-line no-unused-vars\ndeclare let acp: any;\n\n/**\n * This is a generic service used for rendering layers from ValueOverTime objects\n */\n@Injectable()\nexport class GeometryService {\n\n    map: Map;\n\n    layers: Layer[] = [];\n\n    geometryType: String;\n\n    readOnly: boolean;\n\n    // @Output() layersChange: EventEmitter<VersionOverTimeLayer[]> = new EventEmitter();\n\n    editingControl: any = null;\n\n    simpleEditControl: any = null;\n\n    editingLayer: Layer;\n\n    @Output() geometryChange = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    ngOnInit() {\n        window.onbeforeunload = () => this.destroy();\n    }\n\n    initialize(map: Map, geometryType: String, readOnly: boolean) {\n        this.map = map;\n        this.geometryType = geometryType;\n        // this.editingControl = null;\n\n        this.addLayers();\n\n        this.map.on(\"draw.create\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.delete\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.update\", () => {\n            this.saveEdits();\n        });\n    }\n\n    destroy(destroyMap: boolean = true): void {\n        if (this.editingControl != null) {\n            this.map.removeControl(this.editingControl);\n            this.editingControl = null;\n        }\n\n        if (this.map != null && destroyMap) {\n            this.map.remove();\n            this.map = null;\n        } else if (this.map != null) {\n            this.removeLayers();\n        }\n\n        if (this.layers != null) {\n            this.layers.forEach(layer => {\n                layer.isEditing = false;\n                layer.isRendering = false;\n            });\n        }\n\n        this.editingLayer = null;\n        this.layers = [];\n    }\n\n    startEditing(layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        this.editingLayer = layer;\n        this.editingLayer.isEditing = true;\n\n        if (!this.readOnly) {\n            this.enableEditing();\n        }\n\n        this.addEditingLayers();\n    }\n\n    stopEditing(rerender: boolean = true) {\n        if (this.isEditing()) {\n            this.saveEdits(rerender);\n\n            this.editingLayer.isEditing = false;\n            this.editingLayer = null;\n\n            this.editingControl.deleteAll();\n            this.map.removeControl(this.editingControl);\n\n            this.editingControl = null;\n        }\n    }\n\n    isEditing(): boolean {\n        return this.editingLayer != null;\n    }\n\n    setPointCoordinates(lat: any, long: any) {\n        if (this.editingLayer != null) {\n            this.editingControl.set({\n                type: \"FeatureCollection\",\n                features: [{\n                    id: this.editingLayer.oid,\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: { type: \"Point\", coordinates: [long, lat] }\n                }]\n            });\n\n            this.editingControl.changeMode(\"simple_select\", { featureIds: this.editingLayer.oid });\n\n            this.saveEdits();\n\n            /*\n            this.editingLayer.value = {\n              type: 'FeatureCollection',\n              features: [{\n              id: this.editingLayer.oid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ long, lat ] }\n              }]\n            };\n            */\n\n            /*\n            this.editingLayer.value.coordinates = [ -97.4870830718814, 41.84836050415993 ];\n\n            this.editingControl.set(this.editingLayer.value);\n\n            this.removeLayers();\n            this.addLayers();\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.editingLayer.oid } );\n            */\n        }\n    }\n\n    isValid(): boolean {\n        if (!this.readOnly) {\n            let isValid: boolean = false;\n\n            if (this.editingControl != null) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if (featureCollection.features.length > 0) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    saveEdits(rerender: boolean = true): void {\n        if (this.editingLayer != null) {\n            let geoJson = this.getDrawGeometry();\n\n            this.editingLayer.editPropagator.value = geoJson;\n\n            if (rerender) {\n                this.removeLayers();\n                this.addLayers();\n            }\n        }\n    }\n\n    public reload(): void {\n        if (this.map != null) {\n            this.removeLayers();\n            this.addLayers();\n\n            if (this.editingControl != null) {\n                this.editingControl.deleteAll();\n            }\n\n            this.addEditingLayers();\n        }\n    }\n\n    setEditing(isEditing: boolean, layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        layer.isEditing = isEditing;\n\n        if (isEditing) {\n            this.startEditing(layer);\n        }\n    }\n\n    setRendering(isRendering: boolean, layer: Layer) {\n        layer.isRendering = isRendering;\n        this.addLayer(layer);\n    }\n\n    addLayer(newLayer: Layer) {\n        let existingIndex = this.layers.findIndex((findLayer: Layer) => { return findLayer.oid === newLayer.oid; });\n\n        if (existingIndex !== -1) {\n            this.layers.splice(existingIndex, 1);\n            this.layers.push(newLayer);\n        } else {\n            this.layers.push(newLayer);\n        }\n\n        if (newLayer.isEditing) {\n            this.startEditing(newLayer);\n        }\n\n        this.layers = this.layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.removeLayers();\n        this.addLayers();\n    }\n\n    getLayers(): Layer[] {\n        return this.layers;\n    }\n\n    getRenderedLayers(): Layer[] {\n        return this.layers.filter(layer => layer.isRendering);\n    }\n\n    setLayers(layers: Layer[]): void {\n        this.removeLayers();\n\n        this.layers = layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.addLayers();\n    }\n\n    enableEditing(): void {\n        if (this.editingControl == null) {\n            if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: false,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n                this.editingControl = new MapboxDraw({\n                    userProperties: true,\n                    controls: {\n                        point: true,\n                        line_string: false,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    },\n                    styles: [\n                        {\n                            id: \"highlight-active-points\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"true\"]],\n                            paint: {\n                                \"circle-radius\": 13,\n                                \"circle-color\": \"#33FFF9\",\n                                \"circle-stroke-width\": 4,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        },\n                        {\n                            id: \"points-are-blue\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"false\"]],\n                            paint: {\n                                \"circle-radius\": 10,\n                                \"circle-color\": \"#800000\",\n                                \"circle-stroke-width\": 2,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        }\n                    ]\n                });\n            } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: true,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            }\n\n            if (this.map.getSource(\"mapbox-gl-draw-cold\") == null) {\n                this.map.addControl(this.editingControl);\n            }\n        }\n    }\n\n    addEditingLayers(): void {\n        if (this.editingLayer != null && this.editingControl != null) {\n            let val = this.editingLayer.editPropagator.value;\n\n            if (val) {\n                this.editingControl.add(this.editingLayer.editPropagator.value);\n            }\n        }\n    }\n\n    removeSource(prefix: string): void {\n        if (!this.map) {\n            return;\n        }\n\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            if (this.map.getLayer(sourceName + \"-polygon\") != null) {\n                this.map.removeLayer(sourceName + \"-polygon\");\n            }\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            if (this.map.getLayer(sourceName + \"-point\") != null) {\n                this.map.removeLayer(sourceName + \"-point\");\n            }\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\") {\n            if (this.map.getLayer(sourceName + \"-line\") != null) {\n                this.map.removeLayer(sourceName + \"-line\");\n            }\n        }\n\n        if (this.map.getSource(sourceName) != null) {\n            this.map.removeSource(sourceName);\n        }\n    }\n\n    removeLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n                this.removeSource(layer.oid);\n            }\n        }\n    }\n\n    addLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n\n                if (layer.isRendering) {\n                    this.renderGeometryAsLayer(layer.editPropagator == null ? layer.geojson : layer.editPropagator.value, layer.oid, layer.color);\n                }\n            }\n        }\n    }\n\n    renderGeometryAsLayer(geometry: any, sourceName: string, color: string) {\n        let finalSourceName: string = sourceName + \"-geoobject\";\n\n        if (!this.map) {\n            return;\n        }\n        if (!geometry) {\n            return;\n        }\n\n        this.map.addSource(finalSourceName, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            // Polygon Layer\n            this.map.addLayer({\n                id: finalSourceName + \"-polygon\",\n                type: \"fill\",\n                source: finalSourceName,\n                paint: {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7\n                }\n            });\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            // Point layer\n            this.map.addLayer({\n                id: finalSourceName + \"-point\",\n                type: \"circle\",\n                source: finalSourceName,\n                paint: {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                }\n            });\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n            this.map.addLayer({\n                id: finalSourceName + \"-line\",\n                source: finalSourceName,\n                type: \"line\",\n                layout: {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                paint: {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            });\n        }\n\n        (<any> this.map.getSource(finalSourceName)).setData(geometry);\n    }\n\n    getDrawGeometry(): any {\n        if (this.editingControl != null) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if (featureCollection.features.length > 0) {\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if (this.geometryType === \"MULTIPOLYGON\") {\n                    let polygons = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPolygon\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                polygons.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            polygons.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: \"MultiPolygon\"\n                    };\n                } else if (this.geometryType === \"MULTIPOINT\") {\n                    let points = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPoint\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                points.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            points.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: \"MultiPoint\"\n                    };\n                } else if (this.geometryType === \"MULTILINE\") {\n                    let lines = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiLineString\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                lines.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            lines.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: \"MultiLineString\"\n                    };\n                } else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static createEmptyGeometryValue(geometryType: String): any {\n        let value = { type: geometryType, coordinates: [] };\n\n        if (geometryType === \"MULTIPOLYGON\") {\n            value.type = \"MultiPolygon\";\n        } else if (geometryType === \"POLYGON\") {\n            value.type = \"Polygon\";\n        } else if (geometryType === \"POINT\") {\n            value.type = \"Point\";\n        } else if (geometryType === \"MULTIPOINT\") {\n            value.type = \"MultiPoint\";\n        } else if (geometryType === \"LINE\") {\n            value.type = \"Line\";\n        } else if (geometryType === \"MULTILINE\") {\n            value.type = \"MultiLine\";\n        }\n\n        return value;\n    }\n\n    zoomToLayersExtent(): void {\n        this.layers.forEach(layer => {\n            if (layer.geojson != null) {\n                if (this.geometryType === \"MULTIPOINT\" || this.geometryType === \"POINT\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(coord => {\n                            bounds.extend(coord);\n                        });\n\n                        let center = bounds.getCenter();\n                        let pt = new LngLat(center.lng, center.lat);\n\n                        this.map.flyTo({\n                            center: pt,\n                            zoom: 9,\n                            essential: true\n                        });\n                    }\n                } else if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(polys => {\n                            polys.forEach(subpoly => {\n                                subpoly.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(lines => {\n                            lines.forEach(subline => {\n                                subline.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule, DatePipe } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\n\nimport { LocalizedInputComponent } from \"./component/form-fields/localized-input/localized-input.component\";\nimport { LocalizedTextComponent } from \"./component/form-fields/localized-text/localized-text.component\";\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { CreateHierarchyTypeModalComponent } from \"./component/hierarchy/modals/create-hierarchy-type-modal.component\";\nimport { AddChildToHierarchyModalComponent } from \"./component/hierarchy/modals/add-child-to-hierarchy-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./component/hierarchy/modals/create-geoobjtype-modal.component\";\nimport { ManageAttributesModalComponent } from \"./component/hierarchy/geoobjecttype-management/manage-attributes-modal.component\";\nimport { DefineAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component\";\nimport { EditAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component\";\nimport { ShapefileModalComponent } from \"./component/importer/modals/shapefile-modal.component\";\nimport { AttributesPageComponent } from \"./component/importer/modals/attributes-page.component\";\nimport { LocationPageComponent } from \"./component/importer/modals/location-page.component\";\nimport { LocationProblemPageComponent } from \"./component/importer/modals/location-problem-page.component\";\nimport { LocationProblemComponent } from \"./component/importer/modals/location-problem.component\";\nimport { TermProblemPageComponent } from \"./component/importer/modals/term-problem-page.component\";\nimport { TermProblemComponent } from \"./component/importer/modals/term-problem.component\";\nimport { SpreadsheetModalComponent } from \"./component/importer/modals/spreadsheet-modal.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { TermOptionWidgetComponent } from \"./component/hierarchy/geoobjecttype-management/term-option-widget.component\";\nimport { AttributeInputComponent } from \"./component/hierarchy/geoobjecttype-management/attribute-input.component\";\nimport { EditTermOptionInputComponent } from \"./component/hierarchy/geoobjecttype-management/edit-term-option-input.component\";\nimport { ManageTermOptionsComponent } from \"./component/hierarchy/geoobjecttype-management/manage-term-options.component\";\nimport { GeoObjectTypeInputComponent } from \"./component/hierarchy/geoobjecttype-management/geoobjecttype-input.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./component/hierarchy/modals/manage-geoobjecttype-modal.component\";\nimport { MasterListManagerComponent } from \"./component/master-list/master-list-manager.component\";\nimport { PublishModalComponent } from \"./component/master-list/publish-modal.component\";\nimport { ExportFormatModalComponent } from \"./component/master-list/export-format-modal.component\";\nimport { RequestTableComponent } from \"./component/crtable/request-table.component\";\nimport { CreateUpdateGeoObjectDetailComponent } from \"./component/crtable/action-detail/create-update-geo-object/detail.component\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component\";\nimport { ManageVersionsComponent } from \"./component/geoobject-shared-attribute-editor/manage-versions.component\";\nimport { StandardAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/standard-attribute-editor.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { GeoObjectEditorComponent } from \"./component/geoobject-editor/geoobject-editor.component\";\nimport { GeoObjectEditorMapComponent } from \"./component/geoobject-editor-map/geoobject-editor-map.component\";\nimport { SimpleEditControl } from \"./component/geoobject-editor-map/simple-edit-control/simple-edit-control.component\";\nimport { CascadingGeoSelector } from \"./component/cascading-geo-selector/cascading-geo-selector\";\nimport { TreeGeoSelector } from \"./component/tree-geo-selector/tree-geo-selector\";\nimport { ActionDetailModalComponent } from \"./component/crtable/action-detail/action-detail-modal.component\";\nimport { DataImporterComponent } from \"./component/importer/dataimporter.component\";\nimport { DataExportComponent } from \"./component/data-export/data-export.component\";\nimport { MasterListComponent } from \"./component/master-list/master-list.component\";\nimport { PublishedMasterListHistoryComponent } from \"./component/master-list/published-master-list-history.component\";\nimport { MasterListHistoryComponent } from \"./component/master-list/master-list-history.component\";\nimport { MasterListViewComponent } from \"./component/master-list/master-list-view.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { JobConflictModalComponent } from \"./component/scheduled-jobs/conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./component/scheduled-jobs/conflict-widgets/reupload-modal.component\";\nimport { ParentReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component\";\nimport { TermReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component\";\nimport { RowValidationProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component\";\nimport { StepIndicatorComponent } from \"./component/scheduled-jobs/step-indicator.component\";\nimport { ImportProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/import-problem-widget.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\n\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigModalComponent } from \"./component/synchronization-config/synchronization-config-modal.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\n\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { DatasetLocationManagerComponent } from \"./component/location-manager/dataset-location-manager.component\";\nimport { ContextLayerModalComponent } from \"./component/location-manager/context-layer-modal.component\";\nimport { LayerPanelComponent } from \"./component/location-manager/layer-panel.component\";\nimport { FeaturePanelComponent } from \"./component/location-manager/feature-panel.component\";\nimport { GeometryPanelComponent } from \"./component/location-manager/geometry-panel.component\";\n\nimport { GeoObjectAttributeCodeValidator } from \"./factory/form-validation.factory\";\n\nimport { GeoObjectTypePipe } from \"./pipe/geoobjecttype.pipe\";\nimport { GeoObjectAttributeExcludesPipe } from \"./pipe/geoobject-attribute-excludes.pipe\";\nimport { ToEpochDateTimePipe } from \"./pipe/to-epoch-date-time.pipe\";\nimport { RegistryService } from \"./service/registry.service\";\nimport { TaskService } from \"./service/task.service\";\nimport { HierarchyService } from \"./service/hierarchy.service\";\nimport { SynchronizationConfigService } from \"./service/synchronization-config.service\";\nimport { LocalizationManagerService } from \"./service/localization-manager.service\";\nimport { ChangeRequestService } from \"./service/change-request.service\";\nimport { IOService } from \"./service/io.service\";\nimport { MapService } from \"./service/map.service\";\nimport { GeoObjectTypeManagementService } from \"./service/geoobjecttype-management.service\";\n\nimport { RegistryRoutingModule } from \"./registry-routing.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { AccordionModule } from \"ngx-bootstrap/accordion\";\n\nimport \"../rxjs-extensions\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        TabsModule,\n        CollapseModule,\n        NgxPaginationModule,\n        SharedModule,\n        RegistryRoutingModule,\n        AccordionModule.forRoot()\n    ],\n    declarations: [\n        HierarchyComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        ManageVersionsComponent,\n        StandardAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        TreeGeoSelector,\n        ActionDetailModalComponent,\n        HierarchyComponent,\n        DataImporterComponent,\n        DataExportComponent,\n        // Master List screens\n        MasterListManagerComponent,\n        MasterListComponent,\n        MasterListHistoryComponent,\n        PublishedMasterListHistoryComponent,\n        PublishModalComponent,\n        MasterListViewComponent,\n        // Scheduled jobs\n        ExportFormatModalComponent,\n        ScheduledJobsComponent,\n        JobComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        ParentReferenceProblemWidgetComponent,\n        TermReferenceProblemWidgetComponent,\n        RowValidationProblemWidgetComponent,\n        StepIndicatorComponent,\n        ImportProblemWidgetComponent,\n        TaskViewerComponent,\n        // Synchronization Config\n        SynchronizationConfigManagerComponent,\n        SynchronizationConfigModalComponent,\n        SynchronizationConfigComponent,\n        SyncDetailsComponent,\n        // Location manager\n        LocationManagerComponent,\n        DatasetLocationManagerComponent,\n        ContextLayerModalComponent,\n        LayerPanelComponent,\n        FeaturePanelComponent,\n        GeometryPanelComponent\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        LocalizationManagerService,\n        ChangeRequestService,\n        IOService,\n        GeoObjectTypeManagementService,\n        RegistryService,\n        TaskService,\n        DatePipe,\n        ToEpochDateTimePipe,\n        StepIndicatorComponent,\n        SynchronizationConfigService\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        PublishModalComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        StepIndicatorComponent,\n        SynchronizationConfigModalComponent,\n        ContextLayerModalComponent\n    ]\n})\nexport class RegistryModule { }\n","var map = {\n\t\"./af\": 381,\n\t\"./af.js\": 381,\n\t\"./ar\": 382,\n\t\"./ar-dz\": 383,\n\t\"./ar-dz.js\": 383,\n\t\"./ar-kw\": 384,\n\t\"./ar-kw.js\": 384,\n\t\"./ar-ly\": 385,\n\t\"./ar-ly.js\": 385,\n\t\"./ar-ma\": 386,\n\t\"./ar-ma.js\": 386,\n\t\"./ar-sa\": 387,\n\t\"./ar-sa.js\": 387,\n\t\"./ar-tn\": 388,\n\t\"./ar-tn.js\": 388,\n\t\"./ar.js\": 382,\n\t\"./az\": 389,\n\t\"./az.js\": 389,\n\t\"./be\": 390,\n\t\"./be.js\": 390,\n\t\"./bg\": 391,\n\t\"./bg.js\": 391,\n\t\"./bm\": 392,\n\t\"./bm.js\": 392,\n\t\"./bn\": 393,\n\t\"./bn-bd\": 394,\n\t\"./bn-bd.js\": 394,\n\t\"./bn.js\": 393,\n\t\"./bo\": 395,\n\t\"./bo.js\": 395,\n\t\"./br\": 396,\n\t\"./br.js\": 396,\n\t\"./bs\": 397,\n\t\"./bs.js\": 397,\n\t\"./ca\": 398,\n\t\"./ca.js\": 398,\n\t\"./cs\": 399,\n\t\"./cs.js\": 399,\n\t\"./cv\": 400,\n\t\"./cv.js\": 400,\n\t\"./cy\": 401,\n\t\"./cy.js\": 401,\n\t\"./da\": 402,\n\t\"./da.js\": 402,\n\t\"./de\": 403,\n\t\"./de-at\": 404,\n\t\"./de-at.js\": 404,\n\t\"./de-ch\": 405,\n\t\"./de-ch.js\": 405,\n\t\"./de.js\": 403,\n\t\"./dv\": 406,\n\t\"./dv.js\": 406,\n\t\"./el\": 407,\n\t\"./el.js\": 407,\n\t\"./en-au\": 408,\n\t\"./en-au.js\": 408,\n\t\"./en-ca\": 409,\n\t\"./en-ca.js\": 409,\n\t\"./en-gb\": 410,\n\t\"./en-gb.js\": 410,\n\t\"./en-ie\": 411,\n\t\"./en-ie.js\": 411,\n\t\"./en-il\": 412,\n\t\"./en-il.js\": 412,\n\t\"./en-in\": 413,\n\t\"./en-in.js\": 413,\n\t\"./en-nz\": 414,\n\t\"./en-nz.js\": 414,\n\t\"./en-sg\": 415,\n\t\"./en-sg.js\": 415,\n\t\"./eo\": 416,\n\t\"./eo.js\": 416,\n\t\"./es\": 417,\n\t\"./es-do\": 418,\n\t\"./es-do.js\": 418,\n\t\"./es-mx\": 419,\n\t\"./es-mx.js\": 419,\n\t\"./es-us\": 420,\n\t\"./es-us.js\": 420,\n\t\"./es.js\": 417,\n\t\"./et\": 421,\n\t\"./et.js\": 421,\n\t\"./eu\": 422,\n\t\"./eu.js\": 422,\n\t\"./fa\": 423,\n\t\"./fa.js\": 423,\n\t\"./fi\": 424,\n\t\"./fi.js\": 424,\n\t\"./fil\": 425,\n\t\"./fil.js\": 425,\n\t\"./fo\": 426,\n\t\"./fo.js\": 426,\n\t\"./fr\": 427,\n\t\"./fr-ca\": 428,\n\t\"./fr-ca.js\": 428,\n\t\"./fr-ch\": 429,\n\t\"./fr-ch.js\": 429,\n\t\"./fr.js\": 427,\n\t\"./fy\": 430,\n\t\"./fy.js\": 430,\n\t\"./ga\": 431,\n\t\"./ga.js\": 431,\n\t\"./gd\": 432,\n\t\"./gd.js\": 432,\n\t\"./gl\": 433,\n\t\"./gl.js\": 433,\n\t\"./gom-deva\": 434,\n\t\"./gom-deva.js\": 434,\n\t\"./gom-latn\": 435,\n\t\"./gom-latn.js\": 435,\n\t\"./gu\": 436,\n\t\"./gu.js\": 436,\n\t\"./he\": 437,\n\t\"./he.js\": 437,\n\t\"./hi\": 438,\n\t\"./hi.js\": 438,\n\t\"./hr\": 439,\n\t\"./hr.js\": 439,\n\t\"./hu\": 440,\n\t\"./hu.js\": 440,\n\t\"./hy-am\": 441,\n\t\"./hy-am.js\": 441,\n\t\"./id\": 442,\n\t\"./id.js\": 442,\n\t\"./is\": 443,\n\t\"./is.js\": 443,\n\t\"./it\": 444,\n\t\"./it-ch\": 445,\n\t\"./it-ch.js\": 445,\n\t\"./it.js\": 444,\n\t\"./ja\": 446,\n\t\"./ja.js\": 446,\n\t\"./jv\": 447,\n\t\"./jv.js\": 447,\n\t\"./ka\": 448,\n\t\"./ka.js\": 448,\n\t\"./kk\": 449,\n\t\"./kk.js\": 449,\n\t\"./km\": 450,\n\t\"./km.js\": 450,\n\t\"./kn\": 451,\n\t\"./kn.js\": 451,\n\t\"./ko\": 452,\n\t\"./ko.js\": 452,\n\t\"./ku\": 453,\n\t\"./ku.js\": 453,\n\t\"./ky\": 454,\n\t\"./ky.js\": 454,\n\t\"./lb\": 455,\n\t\"./lb.js\": 455,\n\t\"./lo\": 456,\n\t\"./lo.js\": 456,\n\t\"./lt\": 457,\n\t\"./lt.js\": 457,\n\t\"./lv\": 458,\n\t\"./lv.js\": 458,\n\t\"./me\": 459,\n\t\"./me.js\": 459,\n\t\"./mi\": 460,\n\t\"./mi.js\": 460,\n\t\"./mk\": 461,\n\t\"./mk.js\": 461,\n\t\"./ml\": 462,\n\t\"./ml.js\": 462,\n\t\"./mn\": 463,\n\t\"./mn.js\": 463,\n\t\"./mr\": 464,\n\t\"./mr.js\": 464,\n\t\"./ms\": 465,\n\t\"./ms-my\": 466,\n\t\"./ms-my.js\": 466,\n\t\"./ms.js\": 465,\n\t\"./mt\": 467,\n\t\"./mt.js\": 467,\n\t\"./my\": 468,\n\t\"./my.js\": 468,\n\t\"./nb\": 469,\n\t\"./nb.js\": 469,\n\t\"./ne\": 470,\n\t\"./ne.js\": 470,\n\t\"./nl\": 471,\n\t\"./nl-be\": 472,\n\t\"./nl-be.js\": 472,\n\t\"./nl.js\": 471,\n\t\"./nn\": 473,\n\t\"./nn.js\": 473,\n\t\"./oc-lnc\": 474,\n\t\"./oc-lnc.js\": 474,\n\t\"./pa-in\": 475,\n\t\"./pa-in.js\": 475,\n\t\"./pl\": 476,\n\t\"./pl.js\": 476,\n\t\"./pt\": 477,\n\t\"./pt-br\": 478,\n\t\"./pt-br.js\": 478,\n\t\"./pt.js\": 477,\n\t\"./ro\": 479,\n\t\"./ro.js\": 479,\n\t\"./ru\": 480,\n\t\"./ru.js\": 480,\n\t\"./sd\": 481,\n\t\"./sd.js\": 481,\n\t\"./se\": 482,\n\t\"./se.js\": 482,\n\t\"./si\": 483,\n\t\"./si.js\": 483,\n\t\"./sk\": 484,\n\t\"./sk.js\": 484,\n\t\"./sl\": 485,\n\t\"./sl.js\": 485,\n\t\"./sq\": 486,\n\t\"./sq.js\": 486,\n\t\"./sr\": 487,\n\t\"./sr-cyrl\": 488,\n\t\"./sr-cyrl.js\": 488,\n\t\"./sr.js\": 487,\n\t\"./ss\": 489,\n\t\"./ss.js\": 489,\n\t\"./sv\": 490,\n\t\"./sv.js\": 490,\n\t\"./sw\": 491,\n\t\"./sw.js\": 491,\n\t\"./ta\": 492,\n\t\"./ta.js\": 492,\n\t\"./te\": 493,\n\t\"./te.js\": 493,\n\t\"./tet\": 494,\n\t\"./tet.js\": 494,\n\t\"./tg\": 495,\n\t\"./tg.js\": 495,\n\t\"./th\": 496,\n\t\"./th.js\": 496,\n\t\"./tk\": 497,\n\t\"./tk.js\": 497,\n\t\"./tl-ph\": 498,\n\t\"./tl-ph.js\": 498,\n\t\"./tlh\": 499,\n\t\"./tlh.js\": 499,\n\t\"./tr\": 500,\n\t\"./tr.js\": 500,\n\t\"./tzl\": 501,\n\t\"./tzl.js\": 501,\n\t\"./tzm\": 502,\n\t\"./tzm-latn\": 503,\n\t\"./tzm-latn.js\": 503,\n\t\"./tzm.js\": 502,\n\t\"./ug-cn\": 504,\n\t\"./ug-cn.js\": 504,\n\t\"./uk\": 505,\n\t\"./uk.js\": 505,\n\t\"./ur\": 506,\n\t\"./ur.js\": 506,\n\t\"./uz\": 507,\n\t\"./uz-latn\": 508,\n\t\"./uz-latn.js\": 508,\n\t\"./uz.js\": 507,\n\t\"./vi\": 509,\n\t\"./vi.js\": 509,\n\t\"./x-pseudo\": 510,\n\t\"./x-pseudo.js\": 510,\n\t\"./yo\": 511,\n\t\"./yo.js\": 511,\n\t\"./zh-cn\": 512,\n\t\"./zh-cn.js\": 512,\n\t\"./zh-hk\": 513,\n\t\"./zh-hk.js\": 513,\n\t\"./zh-mo\": 514,\n\t\"./zh-mo.js\": 514,\n\t\"./zh-tw\": 515,\n\t\"./zh-tw.js\": 515\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 516;","import { ChangeRequestService } from './change-request.service';\nimport { GeoObjectTypeManagementService } from './geoobjecttype-management.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\nimport { GeometryService} from './geometry.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tGeoObjectTypeManagementService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService,\n\tGeometryService\n];\n\nexport * from './change-request.service';\nexport * from './geoobjecttype-management.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';\nexport * from './geometry.service';","/* eslint-disable no-unused-vars */\n/* eslint-disable padded-blocks */\nimport { GeoObjectOverTime, HierarchyOverTime, GeoObjectType, AttributeType } from \"./registry\";\nimport { ActionTypes } from \"./constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\nexport enum SummaryKey {\n    NEW = \"NEW\",\n    UNMODIFIED = \"UNMODIFIED\",\n    DELETE = \"DELETE\",\n    UPDATE = \"UPDATE\",\n    TIME_CHANGE = \"TIME_CHANGE\",\n    VALUE_CHANGE = \"VALUE_CHANGE\",\n}\n\nexport class Document {\n    fileName: string;\n    oid: string;\n}\n\nexport class Geometry {\n    type: string;\n    coordinates: number[][] | number[];\n}\n\nexport class ValueOverTimeDiff {\n    oid: string;\n    action: string; // Can be one of DELETE, UPDATE, CREATE\n    oldValue: any;\n    newValue: any;\n    newStartDate: string;\n    newEndDate: string;\n    oldStartDate: string;\n    oldEndDate: string;\n    parents?: any;\n    oldParents?: any;\n}\n\n// export class AbstractAction {\n//    approvalStatus: string;\n//    createActionDate: Date;\n//    label: string;\n//    oid: string;\n//    actionType: string;\n//    actionLabel: string;\n//    decisionMaker?: string;\n//    documents: Document[];\n// }\n\nexport class AbstractAction {\n    oid: string;\n    actionType: ActionTypes;\n    actionLabel: string;\n    createActionDate: string;\n    contributorNotes?: string;\n    maintainerNotes?: string;\n    additionalNotes?: string;\n    approvalStatus: string;\n    statusLabel: string;\n    createdBy: string;\n    documents: any[];\n    permissions: string[];\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n    geoObjectJson: GeoObjectOverTime;\n    parentJson: HierarchyOverTime[];\n\n    constructor() {\n        super();\n        this.actionType = ActionTypes.CREATEGEOOBJECTACTION;\n    }\n}\n\nexport class UpdateAttributeOverTimeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { \"valuesOverTime\": ValueOverTimeDiff[], hierarchyCode?: string };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = { valuesOverTime: [] };\n    }\n}\n\nexport class UpdateAttributeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { oldValue?: any, newValue?: any };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = {};\n    }\n}\n\nexport class ChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n}\n\nexport class UpdateChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n    geoObject: GeoObjectOverTime;\n}\n\nexport class ChangeRequest {\n    oid: string;\n    createdBy: string;\n    createDate: Date;\n    approvalStatus: string;\n    total: number;\n    pending: number;\n    documents: Document[];\n    actions: AbstractAction[];\n    current: ChangeRequestCurrentObject & UpdateChangeRequestCurrentObject;\n    type: string; // Can be one of [\"CreateGeoObject\", \"UpdateGeoObject\"]\n    statusLabel?: string;\n    phoneNumber?: string;\n    email?: string;\n    permissions?: string[];\n    isNew?: boolean;\n\n    constructor() {\n        this.isNew = true;\n    }\n\n    public static getActionsForAttribute(cr: ChangeRequest, attributeName: string, hierarchyCode: string): AbstractAction[] {\n        if (cr.type === \"CreateGeoObject\") {\n            return cr.actions;\n        } else {\n            let newActions = [];\n\n            for (let i = 0; i < cr.actions.length; ++i) {\n                let action = cr.actions[i];\n\n                if (action.actionType === \"UpdateAttributeAction\") {\n                    let updateAttrAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === attributeName &&\n                      (attributeName !== \"_PARENT_\" || updateAttrAction.attributeDiff.hierarchyCode === hierarchyCode)) {\n                        newActions.push(cr.actions[i]);\n                    }\n                }\n            }\n\n            return newActions;\n        }\n    }\n}\n\n// export class UpdateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class CreateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class AddChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyTypeCode: string;\n//    contributorNotes: string;\n//    maintainerNotes: string;\n//    createdBy: string;\n// }\n\n// export class RemoveChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyCode: string;\n// }\n\n// export class SetParentAction extends AbstractAction {\n//    childCode: string;\n//    childTypeCode: string;\n//    json: HierarchyOverTime[];\n// }\n\nexport class GovernanceStatus {\n    key: string;\n    label: string;\n}\n\nexport class PageEvent {\n    type: string;\n    data: any;\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { ImportConfiguration } from \"@registry/model/io\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    implementDecisions(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(acp + \"/changerequest/implement-decisions\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    update(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(acp + \"/changerequest/update\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setActionStatus(actionOid: String, status: String): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + \"/changerequest/set-action-status\", JSON.stringify({ actionOid: actionOid, status: status }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAllRequests(pageSize: number, pageNumber: number, filter: string, oid:string): Promise<PageResult<ChangeRequest>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"filter\", filter);\n\n        if (oid != null) {\n            params = params.set(\"oid\", oid);\n        }\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<ChangeRequest>>(acp + \"/changerequest/get-all-requests\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    rejectChangeRequest(request: ChangeRequest): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<void>(acp + \"/changerequest/reject\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(requestId: string): Promise<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<string>(acp + \"/changerequest/delete\", JSON.stringify({ requestId: requestId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteFile(crOid: string, fileId: string): Promise<ImportConfiguration> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ImportConfiguration>(acp + \"/changerequest/delete-file-cr\", JSON.stringify({ crOid: crOid, vfOid: fileId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType } from \"./registry\";\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\n    matchStrategy: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    formatType: string;\n    objectType: string;\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n    isExternal: string;\n    externalSystemId: string;\n    externalSystem?: any;\n    revealGeometryColumn?: any;\n    onValidChange: any;\n    externalIdAttributeTarget: string;\n}\n\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-text\",\n    templateUrl: \"./localized-text.component.html\",\n    styleUrls: [\"./localized-text.css\"],\n})\nexport class LocalizedTextComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Input() public inlinelayout: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","\n<div *ngFor=\"let localeValue of value.localeValues\">\n  <div [ngClass]=\"{'row' : inlinelayout, 'row-holder' : !inlinelayout}\" >\n    <div [ngClass]=\"{'col-md-12' : inlinelayout}\">\n      <div class=\"form-group\">\n        <div [ngClass]=\"{'label-holder' : !inlinelayout}\" >\n          <label>\n            <localize [key]=\"key\"></localize>\n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n        </div>\n        <div [ngClass]=\"{'holder' : !inlinelayout}\">\n          <span class=\"text\">\n            <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\nimport { ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n\r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { GeoObjectType, AttributeType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"attribute-input\",\n    templateUrl: \"./attribute-input.component.html\",\n    styleUrls: [\"./attribute-input.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\"))\n            // transition('show => none', animate('100ms'))\n        ])\n    ]\n})\nexport class AttributeInputComponent implements OnInit {\n\n    @Input() disableCodeField: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() isDecimal: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType;\n    @Output() attributeChange = new EventEmitter<AttributeType>();\n    message: string = null;\n\n    state: string = \"none\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges() {\n\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    toggleIsUnique(): void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.attribute.code) {\n            // if code has a space\n            if (this.attribute.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            if (this.attribute.label.localeValues[0].value.length === 0) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == \"\")) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == \"\")) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterList, MasterListByOrg } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"publish-modal\",\n    templateUrl: \"./publish-modal.component.html\",\n    styleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\n    currentDate: Date = new Date();\n    message: string = null;\n\n    master: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onMasterListChange: Subject<MasterList>;\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n    edit: boolean = false;\n\n    isNew: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onMasterListChange = new Subject();\n\n        if (!this.master || !this.readonly) {\n            this.iService.listGeoObjectTypes(true).then(types => {\n                let myOrgTypes = [];\n                for (let i = 0; i < types.length; ++i) {\n                    const orgCode = types[i].orgCode;\n                    const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n                this.types = myOrgTypes;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.master = {\n                oid: null,\n                typeCode: \"\",\n                displayLabel: this.lService.create(),\n                code: \"\",\n                representativityDate: null,\n                publishingStartDate: null,\n                publishDate: null,\n                listAbstract: \"\",\n                process: \"\",\n                progress: \"\",\n                accessConstraints: \"\",\n                useConstraints: \"\",\n                acknowledgements: \"\",\n                disclaimer: \"\",\n                contactName: \"\",\n                organization: \"\",\n                telephoneNumber: \"\",\n                email: \"\",\n                hierarchies: [],\n                subtypeHierarchies: [],\n                leaf: false,\n                frequency: \"ANNUAL\",\n                isMaster: null,\n                visibility: null\n            };\n        }\n    }\n\n    ngAfterContentInit() {\n\n    }\n\n    init(org: MasterListByOrg): void {\n        this.master.organization = org.oid;\n    }\n\n    getIsDisabled(event): boolean {\n        let elClasses = event.target.classList;\n        for (let i = 0; i < elClasses.length; i++) {\n            let c = elClasses[i];\n            if (c === \"disabled\") {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onChange(): void {\n        if (this.master.typeCode != null && this.master.typeCode.length > 0) {\n            this.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n                this.master.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.iService.getHierarchiesForSubtypes(this.master.typeCode, false).then(hierarchies => {\n                this.master.subtypeHierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.master.hierarchies = [];\n        }\n    }\n\n    onSubmit(): void {\n        this.service.createMasterList(this.master).then(response => {\n            this.onMasterListChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    ngOnDestroy() {\n        this.onMasterListChange.unsubscribe();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n        <h1 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h1>\n        <h1 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h1>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && (readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                  <input [(ngModel)]=\"master.typeLabel.localizedValue\" name=\"typeCode\" type=\"text\" class=\"form-control\" disabled />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"BIANNUAL\"><localize key=\"georegistry.frequency.biannual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.publishingStartDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                              {{formatDate(master.publishingStartDate)}}\n                    </span>\n                    <date-field *ngIf=\"!readonly\" [(value)]=\"master.publishingStartDate\" [classNames]=\"['form-control']\" label=\"\" [inputName]=\"'publishingStartDate'\" \n                        [allowFutureDates]=\"false\" [required]=\"false\" [disable]=\"readonly\"></date-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div *ngIf=\"master.subtypeHierarchies.length > 0\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> <localize key=\"masterlist.subtypeHierarchies\"></localize> </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let hierarchy of master.subtypeHierarchies\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\" [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { GeometryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, Term, HierarchyOverTime } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, CreateGeoObjectAction, ChangeRequest } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\n\n@Component({\n    selector: \"geoobject-shared-attribute-editor\",\n    templateUrl: \"./geoobject-shared-attribute-editor.component.html\",\n    styleUrls: [\"./geoobject-shared-attribute-editor.css\"],\n    providers: [DatePipe],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"slide\", [\n                state(\"left\", style({ left: 0 })),\n                state(\"right\", style({ left: \"100%\" })),\n                transition(\"* => *\", animate(200))\n            ])\n        ]]\n})\n\n/**\n * IMPORTANT\n * This component is shared between:\n * - crtable (request-table.component.ts)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget (feature-panel.component.ts)\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    // The changed state of the GeoObject in the GeoRegistry\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    showAllInstances: boolean = false;\n\n    tabIndex: number = 0;\n\n    isContributorOnly: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n//    @Input() action: Action = null;\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isGeometryInlined = false;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    @Output() onManageVersion = new EventEmitter<AttributeType>();\n\n    // Observable subject for MasterList changes.  Called when an update is successful\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n\n    // TODO : This was copy / pasted into manage-versions.component::onDateChange and ChangeRequestEditor::generateAttributeEditors\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"invalid\", \"exists\"];\n\n    @ViewChild(\"attributeForm\") attributeForm;\n\n    public parentAttributeType: AttributeType;\n\n    public geometryAttributeType: AttributeType;\n\n    constructor(private lService: LocalizationService, private geomService: GeometryService, private authService: AuthService, private dateService: DateService) {\n        this.isContributorOnly = this.authService.isContributerOnly();\n    }\n\n    ngOnInit(): void {\n        if (this.attributeExcludes != null) {\n            this.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n            if (!this.isGeometryInlined) {\n                this.geoObjectAttributeExcludes.push(\"geometry\");\n            }\n        }\n\n        this.geometryAttributeType = this.getAttribute(\"geometry\");\n        if (this.geometryAttributeType == null) {\n            this.geometryAttributeType = new AttributeType(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n        }\n\n        this.parentAttributeType = new AttributeType(\"_PARENT_\", \"_PARENT_\", new LocalizedValue(\"Parents\", null), new LocalizedValue(\"Parents\", null), true, false, false, true);\n\n        if (this.changeRequest == null) {\n            this.changeRequest = this.createNewChangeRequest();\n        } else {\n            if (!this.changeRequest.actions) {\n                this.changeRequest.actions = [];\n            }\n\n            if (this.changeRequest.actions.length === 0 && this.isNew) {\n                this.changeRequest.actions = this.createNewChangeRequest().actions;\n            }\n        }\n\n        this.changeRequestEditor = new ChangeRequestEditor(this.changeRequest, this.postGeoObject, this.geoObjectType, this.hierarchies, this.geometryAttributeType, this.parentAttributeType, this.lService, this.dateService);\n\n        if (this.shouldForceSetExist()) {\n            this.changePage(3);\n        }\n    }\n\n    getChangeRequestEditor(): ChangeRequestEditor {\n        return this.changeRequestEditor;\n    }\n\n    createNewChangeRequest(): ChangeRequest {\n        let cr = new ChangeRequest();\n        cr.approvalStatus = \"PENDING\";\n        cr.actions = [];\n\n        if (this.isNew) {\n            cr.type = \"CreateGeoObject\";\n\n            let createAction: CreateGeoObjectAction = new CreateGeoObjectAction();\n            createAction.geoObjectJson = this.postGeoObject;\n            createAction.parentJson = this.hierarchies;\n            cr.actions[0] = createAction;\n        } else {\n            cr.type = \"UpdateGeoObject\";\n        }\n\n        return cr;\n    }\n\n    shouldForceSetExist() {\n        if (this.isNew && this.postGeoObject.attributes[\"exists\"]) {\n            let values = this.postGeoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n            }\n        }\n\n        return this.isNew;\n    }\n\n    getAttribute(name: string): AttributeType {\n        if (name === \"_PARENT_\") {\n            return this.parentAttributeType;\n        } else if (name === \"geometry\") {\n            return this.geometryAttributeType;\n        }\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            if (this.geoObjectType.attributes[i].code === name) {\n                return this.geoObjectType.attributes[i];\n            }\n        }\n\n        return null;\n    }\n\n    changePage(nextPage: number): void {\n        if (this.shouldForceSetExist() && nextPage !== 3) {\n            return;\n        }\n\n        this.geomService.destroy(false);\n\n        this.tabIndex = nextPage;\n    }\n\n    hasChanges(tabIndex: number) {\n        let len = this.changeRequest.actions.length;\n\n        if (len > 0) {\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.changeRequest.actions[i];\n\n                if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                    return false;\n                } else if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeOverTimeAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === \"_PARENT_\" && tabIndex === 1) {\n                        return true;\n                    } else if (updateAttrAction.attributeName === \"geometry\" && tabIndex === 2) {\n                        return true;\n                    } else if ((updateAttrAction.attributeName === \"invalid\" || updateAttrAction.attributeName === \"exists\") && tabIndex === 3) {\n                        return true;\n                    } else if (tabIndex === 0 && updateAttrAction.attributeName !== \"_PARENT_\" && updateAttrAction.attributeName !== \"geometry\" && updateAttrAction.attributeName !== \"exists\" && updateAttrAction.attributeName !== \"invalid\") {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    hasErrors(tabIndex: number) {\n        let attributeEditors = this.changeRequestEditor.getEditors();\n\n        if (tabIndex === 0) {\n            let filter = [\"invalid\", \"exists\", \"_PARENT_\", \"geometry\"];\n            let filteredEditors = attributeEditors.filter(editor => filter.indexOf(editor.attribute.code) === -1);\n\n            for (let i = 0; i < filteredEditors.length; ++i) {\n                let editor = filteredEditors[i];\n\n                if (!editor.isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 1) {\n            for (let i = 0; i < this.hierarchies.length; ++i) {\n                let hierarchy = this.hierarchies[i];\n\n                if (!this.changeRequestEditor.getEditorForAttribute(this.parentAttributeType, hierarchy).isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 2) {\n            return !this.changeRequestEditor.getEditorForAttribute(this.geometryAttributeType).isValid();\n        } else if (tabIndex === 3) {\n            let invalid = this.getAttribute(\"invalid\");\n\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existsEditor = this.changeRequestEditor.getEditorForAttribute(existsAttribute);\n\n            return (Object.prototype.hasOwnProperty.call(invalid, \"isValid\") && !invalid.isValid) ||\n            !existsEditor.isValid();\n        }\n\n        return false;\n    }\n\n    public isValid(): boolean {\n        let allValid:boolean = true;\n\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.isValid != null && !att.isValid) {\n                allValid = false;\n            }\n        });\n\n        if (this.parentAttributeType.isValid != null && !this.parentAttributeType.isValid) {\n            allValid = false;\n        }\n\n        if (this.geometryAttributeType.isValid != null && !this.geometryAttributeType.isValid) {\n            allValid = false;\n        }\n\n        return allValid && this.changeRequestEditor.validate();\n    }\n\n    public getActions(): AbstractAction[] {\n        return this.changeRequestEditor.changeRequest.actions;\n    }\n\n}\n","<div class=\"row\">\n  <!-- <div class=\"label-holder\"></div> -->\n  <div class=\"col-md-12\">\n    <div class=\"btn-group geobject-editor-tab-holder\">\n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 0, disabled: shouldForceSetExist()}\" (click)=\"changePage(0);\"> \n        <span class=\"errorSpan\"><span *ngIf=\"hasErrors(0)\" class=\"tabHasErrors\"></span></span>\n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabZero\"></localize></span>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(0)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 1, disabled: shouldForceSetExist()}\" (click)=\"changePage(1);\"> \n        <span class=\"errorSpan\"><span *ngIf=\"hasErrors(1)\" class=\"tabHasErrors\"></span></span>\n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabOne\"></localize></span>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(1)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 2, disabled: shouldForceSetExist()}\" (click)=\"changePage(2);\"> \n        <span class=\"errorSpan\"><span *ngIf=\"hasErrors(2)\" class=\"tabHasErrors\"></span></span>\n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabTwo\"></localize></span>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(2)\" class=\"tabHasChanges\"></span></span>\n      </label>\n      <label class=\"btn full-width-radio-button settings\" [ngClass]=\"{active: tabIndex === 3}\" (click)=\"changePage(3);\"> \n        <span class=\"errorSpan\"><span *ngIf=\"hasErrors(3)\" class=\"tabHasErrors\"></span></span>\n        <span style=\"display:inline-block; width:90%;\"><i class=\"fa fa-cog\"></i></span>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(3)\" class=\"tabHasChanges\"></span></span>\n      </label>\n    </div>\n  </div>\n</div>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n  <fieldset>\n    <!-- <div class=\"col-md-12\"> -->\n    <div *ngIf=\"changeRequestEditor && changeRequestEditor.geoObject\">\n      <div *ngIf=\"tabIndex === 0\" class=\"row\">\n        <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    \n        <div class=\"col-md-12\">\n\n<!--           <div class=\"row\"> -->\n<!--             <div class=\"col-md-12\"> -->\n<!--               <boolean-field [(value)]=\"showAllInstances\" [label]=\"'Show all instances'\" [disable]=\"false\"></boolean-field> -->\n<!--             </div> -->\n<!--           </div> -->\n\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes; let i = index\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n              <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span *ngIf=\"attr.code === 'code'\"> \n                      <localize key=\"geoobject.code.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code === 'displayLabel'\"> \n                      <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\"> {{attr.label.localizedValue}} </span> \n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <div *ngIf=\"attr.code !== 'code' && attr.isChangeOverTime\">\n                    <manage-versions\n                        [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"attr\"\n                        [readonly]=\"readOnly\" [isNew]=\"isNew\" >\n                    </manage-versions>\n                  </div>\n\n                  <div *ngIf=\"!attr.isChangeOverTime\">\n                    <input *ngIf=\"changeRequestEditor.geoObject && attr.code === 'code'\" type=\"text\" [(ngModel)]=\"changeRequestEditor.getEditorForAttribute(attr).value\" id=\"mod-{{attr.code}}\" \n                        name=\"mod-{{attr.code}}\" [disabled]=\"readOnly || (attr.code === 'code' && !isNew)\" [style]=\"(readOnly || (attr.code === 'code' && !isNew)) ? '' : 'color:#333'\" required>\n\n                    <div *ngIf=\"attr.code !== 'code'\">\n                        <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"attr\" [geoObject]=\"changeRequestEditor.geoObject\"\n                          [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div *ngIf=\"tabIndex === 1\" class=\"row\">\n        <div class=\"col-md-12\">\n\t        <ul class=\"list-group\">\n\t\t        <li *ngFor=\"let hierarchy of hierarchies\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n\t\t          <div class=\"panel panel-default\">\n\t              <div class=\"panel-heading\">\n\t                <h4 style=\"margin:0;\">\n\t                  <span> {{hierarchy.label}} </span> \n\t                </h4>\n\t              </div>\n\t\t\t\t      \n\t\t\t\t        <div class=\"panel-body\">\n\t\t\t\t          <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"parentAttributeType\"\n\t                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [hierarchy]=\"hierarchy\"></manage-versions>\n\t\t\t\t        </div>\n\t\t\t        </div>\n\t\t        </li>\n\t        </ul>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 2\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span> <localize key=\"shared.attributes.attribute.geometry.label\"></localize> </span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"geometryAttributeType\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\"></manage-versions>\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 3\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span>{{getAttribute('exists').label.localizedValue}}</span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"getAttribute('exists')\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\"></manage-versions>\n          </div>\n        </div>\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span>{{getAttribute('invalid').label.localizedValue}}</span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"getAttribute('invalid')\" [geoObject]=\"changeRequestEditor.geoObject\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- </div> -->\n  </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-input\",\n    templateUrl: \"./localized-input.component.html\",\n    styleUrls: []\n})\nexport class LocalizedInputComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from \"rxjs\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { ContextMenuService, ContextMenuComponent } from \"ngx-contextmenu\";\nimport * as d3 from \"d3\";\n\nimport { CreateHierarchyTypeModalComponent } from \"./modals/create-hierarchy-type-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./modals/create-geoobjtype-modal.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./modals/manage-geoobjecttype-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { Organization } from \"@shared/model/core\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { SvgHierarchyType } from \"./d3/svg-hierarchy-type\";\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection } from \"./d3/svg-util\";\nimport { SvgHierarchyNode } from \"./d3/svg-hierarchy-node\";\n\nexport const TREE_SCALE_FACTOR_X: number = 1.8;\nexport const TREE_SCALE_FACTOR_Y: number = 1.8;\n\nexport const DEFAULT_NODE_FILL = \"#e6e6e6\";\nexport const DEFAULT_NODE_BANNER_COLOR = \"#A29BAB\";\nexport const INHERITED_NODE_FILL = \"#d4d4d4\";\nexport const INHERITED_NODE_BANNER_COLOR = \"#a0a0a0\";\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n\n    active: boolean;\n    label: string;\n\n}\n\nexport interface DropTarget {\n    dropSelector: string;\n    onDrag(dragEl: Element, dropEl: Element, event: any): void;\n    onDrop(dragEl: Element, event: any): void;\n    [others: string]: any;\n}\n\n@Component({\n\n    selector: \"hierarchies\",\n    templateUrl: \"./hierarchy.component.html\",\n    styleUrls: [\"./hierarchy.css\"]\n})\nexport class HierarchyComponent implements OnInit {\n\n    userOrganization: string = null;\n\n    primarySvgHierarchy: SvgHierarchyType;\n    currentHierarchy: HierarchyType = null;\n\n    instance: Instance = new Instance();\n    hierarchies: HierarchyType[];\n    organizations: Organization[];\n    geoObjectTypes: GeoObjectType[] = [];\n\n    hierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n    typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n    filter: string = \"\";\n    filteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n    filteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n    @ViewChild(\"searchInput\", { static: true }) searchInput: ElementRef;\n\n    hierarchyTypeDeleteExclusions: string[] = [\"AllowedIn\", \"IsARelationship\"];\n    geoObjectTypeDeleteExclusions: string[] = [\"ROOT\"];\n\n    _opened: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n    @ViewChild(\"leafMenu\") public leafMenuComponent: ContextMenuComponent;\n\n    /*\n     * Currently clicked on id for delete confirmation modal\n    */\n    current: any;\n\n    isSRA: boolean = false;\n\n    hierarchyService: HierarchyService;\n\n    localizeService: LocalizationService;\n\n    options = {\n        //      allowDrag: (any) => node.isLeaf,\n        //      allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n        // return true / false based on element, to.parent, to.index. e.g.\n        //          return parent.hasChildren;\n        //        },\n        displayField: \"label\",\n        actionMapping: {\n            mouse: {\n                click: (tree: any, node: any, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: any, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                }\n            }\n        },\n        mouse: {\n            //              drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n            //                console.log('drag', from, to); // from === {name: 'first'}\n            //                // Add a node to `to.parent` at `to.index` based on the data in `from`\n            //                // Then call tree.update()\n            //              }\n        }\n    };\n\n    constructor(hierarchyService: HierarchyService, private modalService: BsModalService, private contextMenuService: ContextMenuService,\n        localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n        this.isSRA = authService.isSRA();\n\n        this.hierarchyService = hierarchyService;\n        this.localizeService = localizeService;\n    }\n\n    ngOnInit(): void {\n        this.refreshAll(null);\n\n        fromEvent(this.searchInput.nativeElement, \"keyup\").pipe(\n\n            // get value\n            filter(Boolean),\n            debounceTime(500),\n            distinctUntilChanged(),\n            tap(() => {\n                this.onFilterChange();\n            })\n            // subscription for response\n        ).subscribe();\n    }\n\n    localize(key: string): string {\n        return this.localizeService.decode(key);\n    }\n\n    private renderTree(): void {\n        if (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length === 0) {\n            d3.select(\"#svg\").remove();\n\n            let canDrag = false;\n            if (this.currentHierarchy != null) {\n                canDrag = (this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode));\n            }\n\n            this.geoObjectTypes.forEach((got: GeoObjectType) => {\n                got.canDrag = canDrag;\n            });\n            return;\n        }\n\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".hierarchy-inherit-button\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let overflowDiv: any = d3.select(\"#overflow-div\").node();\n        let scrollLeft = overflowDiv.scrollLeft;\n        let scrollRight = overflowDiv.scrollRight;\n\n        let svg = d3.select(\"#svg\");\n\n        if (svg.node() == null) {\n            svg = d3.select(\"#svgHolder\").append(\"svg\");\n            svg.attr(\"id\", \"svg\");\n        }\n\n        this.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService, this.authService);\n        this.primarySvgHierarchy.render();\n\n        this.calculateSvgViewBox();\n\n        let overflowDiv2: any = d3.select(\"#overflow-div\").node();\n        overflowDiv2.scrollLeft = scrollLeft;\n        overflowDiv2.scrollRight = scrollRight;\n\n        // this.registerSvgHandlers();\n\n        this.geoObjectTypes.forEach((got: GeoObjectType) => {\n            got.canDrag = this.calculateCanDrag(got);\n        });\n    }\n\n    calculateSvgViewBox(): void {\n        let svg: any = d3.select(\"#svg\");\n        let svgNode: any = svg.node();\n\n        let { x, y, width, height } = svgNode.getBBox();\n\n        const xPadding = 30;\n        const yPadding = 40;\n        svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n        width = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n        height = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n        d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n        // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n    }\n\n    calculateCanDrag(got: GeoObjectType): boolean {\n        let hierarchyComponent = this;\n\n        if (this.primarySvgHierarchy != null) {\n            // Check permissions against GOT and Hierarchy org\n            if (!(this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode))) {\n                return false;\n            }\n\n            // If the child is already on the graph, they cannot drag.\n            if (this.primarySvgHierarchy.getNodeByCode(got.code) != null) {\n                return false;\n            }\n\n            // If we are abstract, and one of our children is on the graph, they cannot drag.\n            if (got.isAbstract) {\n                let isChildOnGraph = false;\n\n                this.geoObjectTypes.forEach((child: GeoObjectType) => {\n                    if (child.superTypeCode === got.code) {\n                        if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null) {\n                            isChildOnGraph = true;\n                        }\n                    }\n                });\n\n                if (isChildOnGraph) {\n                    return false;\n                }\n            } else if (got.superTypeCode != null) {\n                // If we are a child of an abstract type, and our abstract type is on the graph, we cannot drag.\n                if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null) {\n                    return false;\n                }\n            }\n        } else {\n            // If there is no selected hierarchy, they cannot drag.\n            return false;\n        }\n\n        return true;\n    }\n\n    calculateRelatedHierarchies(got: GeoObjectType): string[] {\n        let relatedHiers = [];\n\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let hierarchyType = this.hierarchies[i];\n\n            if (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n                let d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n                let found = d3Hierarchy.find((node) => {\n                    return node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n                });\n\n                if (found) {\n                    relatedHiers.push(hierarchyType.code);\n                }\n            }\n        }\n\n        return relatedHiers;\n    }\n\n    private registerDragHandlers(): any {\n        let that = this;\n\n        let dropTargets: DropTarget[] = [];\n\n        // Empty Hierarchy Drop Zone\n        dropTargets.push({\n            dropSelector: \".drop-box-container\",\n            onDrag: function(dragEl: Element, dropEl: Element) {\n                if (this.dropEl != null) {\n                    this.dropEl.style(\"border-color\", null);\n                    this.dropEl = null;\n                }\n\n                if (dropEl != null) {\n                    let emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n                    if (emptyHierarchyDropZone != null) {\n                        this.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n                    }\n                }\n            },\n            onDrop: function(dragEl: Element) {\n                if (this.dropEl != null) {\n                    this.dropEl.style(\"border-color\", null);\n                    that.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n                    this.dropEl = null;\n                }\n            }\n        });\n\n        // SVG GeoObjectType Drop Zone\n        dropTargets.push({\n            dropSelector: \".svg-got-body-rect\",\n            onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n                this.clearDropZones();\n\n                let lastDropEl = this.dropEl;\n\n                // translate page to SVG co-ordinate\n                let svg: any = d3.select(\"#svg\").node();\n\n                if (svg == null) {\n                    return;\n                }\n                let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n                // Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n                // we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones.\n                that.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n                    if (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n                        this.dropEl = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + node.data.geoObjectType + \"\\\"]\");\n                        node.data.activeDropZones = true;\n\n                        if (node.parent == null) {\n                            node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n                        }\n                    } else {\n                        node.data.activeDropZones = false;\n\n                        if (node.parent == null) {\n                            node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                        }\n                    }\n                });\n\n                if (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") !== this.dropEl.attr(\"data-gotCode\"))) {\n                    this.clearGhostNodes(true);\n                }\n\n                if (this.dropEl != null) {\n                    let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n                    const gotCode = this.dropEl.attr(\"data-gotCode\");\n                    let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n                    let isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n                    this.dropEl.attr(\"stroke\", \"blue\");\n\n                    const dropElX = parseInt(this.dropEl.attr(\"x\"));\n                    const dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n                    // Add drop zones\n                    const childW: number = SvgHierarchyType.gotRectW;\n                    const childH: number = SvgHierarchyType.gotRectH;\n\n                    let dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n                    // Render Child Drop Zone\n                    let dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length === 0);\n                    let isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n                    if (isChildDZActive) {\n                        this.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"white\");\n\n                        this.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"none\")\n                            .attr(\"stroke\", \"black\")\n                            .attr(\"stroke-width\", \"1\")\n                            .attr(\"stroke-dasharray\", \"5,5\");\n\n                        let addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n                        this.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n                            .attr(\"font-family\", \"sans-serif\")\n                            .attr(\"font-size\", 10)\n                            .attr(\"fill\", \"black\")\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n                            .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n                            .text(addChildLabel);\n                    }\n\n                    // Render Parent Drop Zone\n                    // Don't render it if we're a group\n                    if (!isDragGroup) {\n                        this.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"white\");\n\n                        this.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"none\")\n                            .attr(\"stroke\", \"black\")\n                            .attr(\"stroke-width\", \"1\")\n                            .attr(\"stroke-dasharray\", \"5,5\");\n\n                        d3.select(\".svg-got-parent-dz-text\").remove();\n                        let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n                        this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n                            .attr(\"font-family\", \"sans-serif\")\n                            .attr(\"font-size\", 10)\n                            .attr(\"fill\", \"black\")\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n                            .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n                            .text(addParentLabel);\n                    }\n\n                    // Render Sibling Drop Zone\n                    if (this.ghostCode !== gotCode) {\n                        if (this.ghostCode != null) {\n                            this.clearGhostNodes(dropNode.parent == null);\n                        }\n\n                        if (dropNode.parent != null) {\n                            let parentIndex = null;\n                            for (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n                                let hn: any = dropNode.parent.data.children[i];\n\n                                if (hn.geoObjectType === gotCode) {\n                                    parentIndex = i + 1;\n                                }\n                            }\n\n                            let addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n                            dropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n                            that.renderTree();\n                            this.ghostCode = gotCode;\n                        }\n                    }\n\n                    let siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n                    if (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n                        this.parentDz.attr(\"stroke\", \"blue\");\n                        this.parentDzText.attr(\"fill\", \"blue\");\n                        isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                        isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                        siblingGhostBody.attr(\"stroke\", \"black\");\n                        this.activeDz = this.parentDz;\n                    } else if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n                        !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                        !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                        this.childDz.attr(\"stroke\", \"blue\");\n                        this.childDzText.attr(\"fill\", \"blue\");\n                        siblingGhostBody.attr(\"stroke\", \"black\");\n                        this.activeDz = this.childDz;\n                    } else if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n                        !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                        !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                        isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                        isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                        siblingGhostBody.attr(\"stroke\", \"blue\");\n                        this.activeDz = \"sibling\";\n                    }\n                }\n            },\n            onDrop: function(dragEl: Element) {\n                if (this.dropEl != null && this.activeDz != null) {\n                    let dropGot = this.dropEl.attr(\"data-gotCode\");\n                    let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n                    let dragGot = d3.select(dragEl).attr(\"id\");\n\n                    if (this.activeDz === this.childDz) {\n                        if (dropNode.data.children.length === 0) {\n                            that.addChild(that.currentHierarchy.code, dropGot, dragGot);\n                        } else {\n                            let youngest = \"\";\n\n                            for (let i = 0; i < dropNode.data.children.length; ++i) {\n                                youngest = youngest + dropNode.data.children[i].geoObjectType;\n\n                                if (i < dropNode.data.children.length - 1) {\n                                    youngest = youngest + \",\";\n                                }\n                            }\n\n                            that.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n                        }\n                    } else if (this.activeDz === this.parentDz) {\n                        if (dropNode.parent == null) {\n                            that.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n                        } else {\n                            that.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n                        }\n                    } else if (this.activeDz === \"sibling\") {\n                        that.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n                    }\n                }\n                this.clearDropZones();\n                this.clearGhostNodes(true);\n            },\n            clearDropZones: function() {\n                if (this.dropEl != null) {\n                    this.dropEl.attr(\"stroke\", null);\n                }\n\n                this.dropEl = null;\n                this.activeDz = null;\n\n                this.childDz = null;\n                this.parentDz = null;\n\n                d3.select(\".svg-dropZone-g\").remove();\n            },\n            clearGhostNodes: function(renderTree: boolean) {\n                if (this.ghostCode != null) {\n                    let ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n                    if (ghostNode != null) {\n                        let parentIndex = null;\n                        for (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n                            let hn: any = ghostNode.parent.data.children[i];\n\n                            if (hn.ghostingCode === this.ghostCode) {\n                                parentIndex = i;\n                            }\n                        }\n\n                        if (parentIndex != null) {\n                            ghostNode.parent.data.children.splice(parentIndex, 1);\n                            if (renderTree) {\n                                that.renderTree();\n                            }\n                        }\n                    }\n\n                    this.ghostCode = null;\n                }\n            }\n        });\n\n        // GeoObjectTypes and Hierarchies\n        let deltaX: number, deltaY: number, width: number;\n        let sidebarDragHandler = d3.drag()\n            .on(\"start\", function(event: any) {\n                let canDrag = d3.select(this).attr(\"data-candrag\");\n                if (canDrag === \"false\") {\n                    return;\n                }\n\n                let rect = this.getBoundingClientRect();\n                deltaX = rect.left - event.sourceEvent.pageX;\n                deltaY = rect.top - event.sourceEvent.pageY;\n                width = rect.width;\n            })\n            .on(\"drag\", function(event: any) {\n                let canDrag = d3.select(this).attr(\"data-candrag\");\n                if (canDrag === \"false\") {\n                    return;\n                }\n\n                d3.select(\".g-context-menu\").remove();\n\n                let selThis = d3.select(this);\n\n                // Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n                selThis.style(\"display\", \"none\");\n\n                let target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n                selThis.style(\"display\", null);\n\n                for (let i = 0; i < dropTargets.length; ++i) {\n                    dropTargets[i].onDrag(this, target, event);\n                }\n\n                // Move the GeoObjectType with the pointer when they move their mouse\n                selThis\n                    .classed(\"dragging\", true)\n                    .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                    .style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n                    .style(\"width\", width + \"px\");\n\n                // If they are moving a GOT group then we have to move the children as well\n                if (selThis.classed(\"got-group-parent\")) {\n                    let index = 1;\n                    d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                        let li: any = this;\n                        let child = d3.select(li);\n\n                        child\n                            .classed(\"dragging\", true)\n                            .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                            .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2) * index) + \"px\")\n                            .style(\"width\", width + \"px\");\n\n                        index++;\n                    });\n                }\n            }).on(\"end\", function(event: any) {\n                let selThis = d3.select(this)\n                    .classed(\"dragging\", false)\n                    .style(\"left\", null)\n                    .style(\"top\", null)\n                    .style(\"width\", null);\n\n                // If they are moving a GOT group then we have to reset the children as well\n                if (selThis.classed(\"got-group-parent\")) {\n                    d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                        let child = d3.select(this);\n\n                        child\n                            .classed(\"dragging\", false)\n                            .style(\"left\", null)\n                            .style(\"top\", null)\n                            .style(\"width\", null);\n                    });\n                }\n\n                for (let i = 0; i < dropTargets.length; ++i) {\n                    dropTargets[i].onDrop(this, event);\n                }\n            });\n\n        sidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n    }\n\n    private registerSvgHandlers(): void {\n        let hierarchyComponent = this;\n\n        // SVG Drag Handler\n        let deltaX: number, deltaY: number, width: number;\n        let startPoint: any;\n        let svgGot: SvgHierarchyNode;\n        let svgDragHandler = d3.drag()\n            .on(\"start\", function(event: any) {\n                let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n                // let select = d3.select(this);\n\n                svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n                // d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n                //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n                //     return -1\n                //   }\n                //   else {\n                //     return 1\n                //   }\n                // });\n\n                //   d3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n                //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n                //     return -1\n                //   }\n                //   else {\n                //     return 1\n                //   }\n                // });\n\n                // d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n                //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n                //     console.log(\"no --> \",a.data.geoObjectType)\n                //     return -1\n                //   }\n                //   else {\n                //     console.log(\"yes --> \",a.data.geoObjectType)\n                //     return 1\n                //   }\n                // });\n\n                startPoint = svgGot.getPos();\n\n                deltaX = startPoint.x - svgMousePoint.x;\n                deltaY = startPoint.y - svgMousePoint.y;\n            })\n            .on(\"drag\", function(event: any) {\n                d3.select(\".g-context-menu\").remove();\n\n                let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n                svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n                svgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n            }).on(\"end\", function(event: any) {\n                svgGot.setPos(startPoint.x, startPoint.y, false);\n\n                // let bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n                // if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n                //   if (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n                //     let obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n                //     hierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n                //       animated: true,\n                //       backdrop: true,\n                //       ignoreBackdropClick: true,\n                //     });\n\n                //     let message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n                //     message = message.replace(\"{label}\", obj.label.localizedValue);\n\n                //     hierarchyComponent.bsModalRef.content.message = message;\n                //     hierarchyComponent.bsModalRef.content.data = obj.code;\n\n                //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n                //       let treeNode = svgGot.getTreeNode();\n                //       let parent = null;\n                //       if (treeNode.parent == null) {\n                //         parent = \"ROOT\";\n                //       }\n                //       else {\n                //         if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                //           parent = \"ROOT\";\n                //         }\n                //         else {\n                //           parent = treeNode.parent.data.geoObjectType;\n                //         }\n                //       }\n\n                //       hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n                //     });\n\n                //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n                //       svgGot.setPos(startPoint.x, startPoint.y, false);\n                //     });\n                //   }\n                //   else {\n                //     svgGot.setPos(startPoint.x, startPoint.y, false);\n                //   }\n\n                // }\n                // else {\n                //   svgGot.setPos(startPoint.x, startPoint.y, false);\n                // }\n            });\n\n        svgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n    }\n\n    public findGeoObjectTypeByCode(code: string): GeoObjectType {\n        for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n            let got: GeoObjectType = this.geoObjectTypes[i];\n\n            if (got.code === code) {\n                return got;\n            }\n        }\n    }\n\n    public findHierarchyByCode(code: string): HierarchyType {\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let ht: HierarchyType = this.hierarchies[i];\n\n            if (ht.code === code) {\n                return ht;\n            }\n        }\n    }\n\n    public findOrganizationByCode(code: string): Organization {\n        for (let i = 0; i < this.organizations.length; ++i) {\n            let org: Organization = this.organizations[i];\n\n            if (org.code === code) {\n                return org;\n            }\n        }\n    }\n\n    private addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n        this.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n            let got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n            let index = null;\n            for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n                if (got.relatedHierarchies[i] === hierarchyCode) {\n                    index = i;\n                    break;\n                }\n            }\n\n            if (index == null) {\n                got.relatedHierarchies.push(hierarchyCode);\n            }\n\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n        this.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    isRA(): boolean {\n        return this.authService.isRA();\n    }\n\n    isOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n        return this.isSRA || this.authService.isOrganizationRA(orgCode);\n    }\n\n    getTypesByOrg(org: Organization): GeoObjectType[] {\n        let orgTypes: GeoObjectType[] = [];\n\n        for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n            let geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n            if (geoObjectType.organizationCode === org.code) {\n                orgTypes.push(geoObjectType);\n            }\n        }\n\n        return orgTypes;\n    }\n\n    getHierarchiesByOrg(org: Organization): HierarchyType[] {\n        let orgHierarchies: HierarchyType[] = [];\n\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let hierarchy: HierarchyType = this.hierarchies[i];\n\n            if (hierarchy.organizationCode === org.code) {\n                orgHierarchies.push(hierarchy);\n            }\n        }\n\n        return orgHierarchies;\n    }\n\n    public refreshAll(desiredHierarchy: HierarchyType) {\n        // Clear the types to then refresh\n        this.geoObjectTypes = [];\n\n        this.registryService.init().then(response => {\n            this.localizeService.setLocales(response.locales);\n\n            this.setGeoObjectTypes(response.types);\n\n            this.organizations = response.organizations;\n\n            this.organizations.forEach(org => {\n                if (this.isOrganizationRA(org.code)) {\n                    this.userOrganization = org.code;\n                }\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            this.setHierarchies(response.hierarchies);\n\n            this.setNodesOnInit(desiredHierarchy);\n\n            this.updateViewDatastructures();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public setGeoObjectTypes(types: GeoObjectType[]): void {\n        // Set group parent types\n        this.setAbstractTypes(types);\n\n        // Set GeoObjectTypes that aren't part of a group.\n        types.forEach(type => {\n            if (!type.isAbstract) {\n                if (!type.superTypeCode) {\n                    this.geoObjectTypes.push(type);\n                }\n            }\n        });\n\n        // Sort aphabetically because all other types to add will be children in a group.\n        this.geoObjectTypes.sort((a, b) => {\n            if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n            else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n            else return 0;\n        });\n\n        // Add group children\n        types.forEach(type => {\n            if (!type.isAbstract) {\n                if (type.superTypeCode && type.superTypeCode.length > 0) {\n                    for (let i = 0; i < this.geoObjectTypes.length; i++) {\n                        let setType = this.geoObjectTypes[i];\n                        if (type.superTypeCode === setType.code) {\n                            this.geoObjectTypes.splice(i + 1, 0, type);\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    private setAbstractTypes(types: GeoObjectType[]): void {\n        types.forEach(type => {\n            if (type.isAbstract) {\n                this.geoObjectTypes.push(type);\n            }\n        });\n    }\n\n    public updateViewDatastructures(): void {\n        this.hierarchiesByOrg = [];\n        this.typesByOrg = [];\n\n        for (let i = 0; i < this.organizations.length; ++i) {\n            let org: Organization = this.organizations[i];\n\n            this.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n            this.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n        }\n\n        this.geoObjectTypes.forEach((got: GeoObjectType) => {\n            got.canDrag = this.calculateCanDrag(got);\n            got.relatedHierarchies = this.calculateRelatedHierarchies(got);\n        });\n\n        this.onFilterChange();\n    }\n\n    public excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n        return (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n    }\n\n    public excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n        return (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n    }\n\n    private setNodesOnInit(desiredHierarchy: HierarchyType): void {\n        let index = -1;\n\n        if (desiredHierarchy != null) {\n            index = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n        } else if (this.hierarchies.length > 0) {\n            index = 0;\n        }\n\n        if (index > -1) {\n            const hierarchy = this.hierarchies[index];\n\n            this.setCurrentHierarchy(hierarchy);\n\n            this.renderTree();\n        }\n    }\n\n    private getHierarchy(hierarchyId: string): HierarchyType {\n        let target: HierarchyType = null;\n        this.hierarchies.forEach(hierarchy => {\n            if (hierarchyId === hierarchy.code) {\n                target = hierarchy;\n            }\n        });\n\n        return target;\n    }\n\n    private setHierarchies(data: HierarchyType[]): void {\n        let hierarchies: HierarchyType[] = [];\n        data.forEach((hierarchyType, index) => {\n            if (hierarchyType.rootGeoObjectTypes.length > 0) {\n                hierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n                    this.processHierarchyNodes(rootGeoObjectType);\n                });\n            }\n\n            hierarchies.push(hierarchyType);\n        });\n\n        this.hierarchies = hierarchies;\n\n        this.hierarchies.sort((a, b) => {\n            if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n            else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n            else return 0;\n        });\n    }\n\n    private processHierarchyNodes(node: HierarchyNode) {\n        if (node != null) {\n            node.label = this.getHierarchyLabel(node.geoObjectType);\n\n            node.children.forEach(child => {\n                this.processHierarchyNodes(child);\n            });\n        }\n    }\n\n    private getHierarchyLabel(geoObjectTypeCode: string): string {\n        let label: string = null;\n        this.geoObjectTypes.forEach(function(gOT) {\n            if (gOT.code === geoObjectTypeCode) {\n                label = gOT.label.localizedValue;\n            }\n        });\n\n        return label;\n    }\n\n    public handleOnMenu(node: any, $event: any): void {\n        if (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n            this.contextMenuService.show.next({\n                contextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n                event: $event,\n                item: node\n            });\n            $event.preventDefault();\n            $event.stopPropagation();\n        } else {\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n    }\n\n    public treeNodeOnClick(node: any, $event: any): void {\n        node.treeModel.setFocusedNode(node);\n\n        if (node.treeModel.isExpanded(node)) {\n            node.collapse();\n        } else {\n            node.treeModel.expandAll();\n        }\n    }\n\n    public hierarchyOnClick(event: any, item: HierarchyType) {\n        this.setCurrentHierarchy(item);\n        this.renderTree();\n    }\n\n    public createHierarchy(): void {\n        this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            // eslint-disable-next-line quote-props\n            \"class\": \"upload-modal\"\n        });\n\n        (<CreateHierarchyTypeModalComponent> this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n            this.hierarchies.push(data);\n\n            this.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n                let nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n                let nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n                if (nameA < nameB) {\n                    return -1; // nameA comes first\n                }\n\n                if (nameA > nameB) {\n                    return 1; // nameB comes first\n                }\n\n                return 0; // names must be equal\n            });\n\n            this.updateViewDatastructures();\n        });\n    }\n\n    public deleteHierarchyType(obj: HierarchyType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.removeHierarchyType(data);\n        });\n    }\n\n    public editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n        this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            class: \"upload-modal\"\n        });\n        this.bsModalRef.content.edit = true;\n        this.bsModalRef.content.readOnly = readOnly;\n        this.bsModalRef.content.hierarchyType = obj;\n        this.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n            let pos = this.getHierarchyTypePosition(data.code);\n\n            this.hierarchies[pos].label = data.label;\n            this.hierarchies[pos].description = data.description;\n            this.hierarchies[pos].progress = data.progress;\n            this.hierarchies[pos].acknowledgement = data.acknowledgement;\n            this.hierarchies[pos].disclaimer = data.disclaimer;\n            this.hierarchies[pos].useConstraints = data.useConstraints;\n            this.hierarchies[pos].accessConstraints = data.accessConstraints;\n            this.hierarchies[pos].contact = data.contact;\n            this.hierarchies[pos].phoneNumber = data.phoneNumber;\n            this.hierarchies[pos].email = data.email;\n\n            this.updateViewDatastructures();\n\n            if (this.currentHierarchy.code === data.code) {\n                this.setCurrentHierarchy(this.hierarchies[pos]);\n\n                this.renderTree();\n            }\n        });\n    }\n\n    setCurrentHierarchy(hierarchyType: HierarchyType): void {\n        this.currentHierarchy = hierarchyType;\n    }\n\n    isPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n        // return hierarchy.isPrimary;\n        return hierarchy.code === this.currentHierarchy.code;\n    }\n\n    public removeHierarchyType(code: string): void {\n        this.hierarchyService.deleteHierarchyType(code).then(response => {\n            let pos = this.getHierarchyTypePosition(code);\n            this.hierarchies.splice(pos, 1);\n            this.updateViewDatastructures();\n\n            if (this.hierarchies.length > 0) {\n                this.setCurrentHierarchy(this.hierarchies[0]);\n            } else {\n                this.currentHierarchy = null;\n            }\n\n            this.renderTree();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean, org: Organization): void {\n        this.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            class: \"upload-modal\"\n        });\n        this.bsModalRef.content.init(org, this.geoObjectTypes, groupSuperType, isAbstract);\n\n        this.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n            data.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n            this.refreshAll(this.currentHierarchy);\n        });\n    }\n\n    public deleteGeoObjectType(obj: GeoObjectType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.removeGeoObjectType(data);\n        });\n    }\n\n    public removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n        this.registryService.deleteGeoObjectType(code).then(response => {\n            let pos = this.getGeoObjectTypePosition(code);\n            this.geoObjectTypes.splice(pos, 1);\n\n            this.refreshAll(this.currentHierarchy);\n        }).catch((err: HttpErrorResponse) => {\n            if (errCallback != null) {\n                errCallback(err);\n            }\n            this.error(err);\n        });\n    }\n\n    public manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n        this.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            class: \"manage-geoobjecttype-modal\"\n        });\n\n        geoObjectType.attributes.sort((a, b) => {\n            if (a.label.localizedValue < b.label.localizedValue) return -1;\n            else if (a.label.localizedValue > b.label.localizedValue) return 1;\n            else return 0;\n        });\n        this.bsModalRef.content.geoObjectType = geoObjectType;\n        this.bsModalRef.content.readOnly = readOnly;\n\n        (<ManageGeoObjectTypeModalComponent>this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n            if (data.isAbstract) {\n                this.refreshAll(this.currentHierarchy);\n            } else {\n                const position = this.getGeoObjectTypePosition(data.code);\n\n                if (position !== -1) {\n                    this.geoObjectTypes[position] = data;\n                }\n\n                // Update all of the hierarchies for the new geo object type\n                this.updateViewDatastructures();\n\n                this.hierarchies.forEach((hierarchyType: HierarchyType) => {\n                    this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n                });\n\n                // Update the current hierarchy view\n                if (this.currentHierarchy != null) {\n                    this.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n                }\n\n                this.renderTree();\n            }\n        });\n    }\n\n    private getHierarchyTypePosition(code: string): number {\n        for (let i = 0; i < this.hierarchies.length; i++) {\n            let obj = this.hierarchies[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    public refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n        this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let hierarchy = this.hierarchies[i];\n\n            if (hierarchy.code === hierarchyType.code) {\n                this.hierarchies[i] = hierarchyType;\n\n                this.setCurrentHierarchy(hierarchyType);\n            }\n        }\n\n        this.updateViewDatastructures();\n\n        this.renderTree();\n    }\n\n    public removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n        const that = this;\n\n        this.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n            let got = that.findGeoObjectTypeByCode(gotCode);\n\n            let index = null;\n            for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n                if (got.relatedHierarchies[i] === hierarchyType.code) {\n                    index = i;\n                    break;\n                }\n            }\n\n            if (index != null) {\n                got.relatedHierarchies.splice(index, 1);\n            }\n\n            that.refreshPrimaryHierarchy(hierarchyType);\n        }).catch((err: HttpErrorResponse) => {\n            if (errCallback != null) {\n                errCallback(err);\n            }\n\n            this.error(err);\n        });\n    }\n\n    public isActive(item: HierarchyType) {\n        return this.currentHierarchy === item;\n    }\n\n    onFilterChange(): void {\n        const label = this.filter.toLowerCase();\n\n        this.filteredHierarchiesByOrg = [];\n        this.filteredTypesByOrg = [];\n\n        this.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n            const filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n                const index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n                return (index !== -1);\n            });\n\n            this.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n        });\n\n        this.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n            const filtered = item.types.filter((type: GeoObjectType) => {\n                const index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n                return (index !== -1);\n            });\n\n            this.filteredTypesByOrg.push({ org: item.org, types: filtered });\n        });\n\n        setTimeout(() => { this.registerDragHandlers(); }, 500);\n    }\n\n    handleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n        this.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n        this.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"type.permissions.includes('WRITE')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false, typeByOrg.org)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!type.permissions.includes('WRITE') && type.permissions.includes('READ')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': (currentHierarchy != null && hierarchy.code === currentHierarchy.code), 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\">\n                      <div *ngIf=\"isOrganizationRA(currentHierarchy.organizationCode, true)\" id=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n                      </div>\n                      <div *ngIf=\"!isOrganizationRA(currentHierarchy.organizationCode, true)\">\n                          <p class=\"upload-text\">\n                              <localize key=\"hierarchy.content.emptyHierarchy\"></localize>\n                          </p>\n                      </div>\n                    </div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"NodeTooltip\" class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-form\">\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                      <label>\n                        <localize key=\"hierarchy.nodeTooltip.hierarchy\"></localize>\n                      </label>\n                    </div>\n                    <div class=\"holder\">\n                      <label id=\"hierarchyLabel\"></label>\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { HierarchyType, HierarchyGroupedTypeView } from \"@registry/model/hierarchy\";\nimport { TreeEntity } from \"@registry/model/registry\";\nimport { EventService } from \"@shared/service\";\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getHierarchyTypes(types: any): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"types\", JSON.stringify(types));\n\n        return this.http\n            .get<HierarchyType[]>(acp + \"/cgr/hierarchytype/get-all\", { params: params })\n            .toPromise();\n    }\n\n    getHierarchyGroupedTypes(): Promise<HierarchyGroupedTypeView[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<HierarchyGroupedTypeView[]>(acp + \"/hierarchy/groupedTypes\", { params: params })\n            .toPromise();\n    }\n\n    addChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/add\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/insertBetweenTypes\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/remove\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/create\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/update\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteHierarchyType(code: string): Promise<TreeEntity> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>(acp + \"/cgr/hierarchytype/delete\", { code: code }, { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/setInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, inheritedHierarchyTypeCode: inheritedHierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/removeInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from \"@registry/model/io\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    importSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(acp + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport(configuration: ImportConfiguration): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/etl/cancel-import\", JSON.stringify({ configuration: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    importShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(acp + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    listGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"includeAbstractTypes\", includeAbstractTypes.toString());\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>(acp + \"/cgr/geoobjecttype/list-types\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        params = params.set(\"includeInheritedTypes\", includeInheritedTypes.toString());\r\n\r\n        return this.http\r\n            .get<Location[]>(acp + \"/cgr/geoobjecttype/get-ancestors\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + \"/cgr/geoobjecttype/get-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + \"/cgr/geoobjecttype/get-subtype-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>(acp + \"/geo-synonym/createGeoEntitySynonym\", JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geo-synonym/deleteGeoEntitySynonym\", JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"mdAttributeId\", mdAttributeId);\r\n        params = params.set(\"text\", text);\r\n        params = params.set(\"limit\", limit);\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>(acp + \"/uploader/getClassifierSuggestions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    createTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n        return this.http\r\n            .post<Synonym>(acp + \"/uploader/createClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym(synonymId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ synonymId: synonymId });\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/uploader/deleteClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/addterm\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from \"@shared/service\";\n\nimport { AllLocaleInfo } from \"@registry/model/localization-manager\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>(acp + \"/localization/getNewLocaleInformation\")\n            .toPromise();\n    }\n\n    installLocale(language: string, country: string, variant: string): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if (language != null) {\n            params = params.set(\"language\", language);\n        }\n\n        if (country != null) {\n            params = params.set(\"country\", country);\n        }\n\n        if (variant != null) {\n            params = params.set(\"variant\", variant);\n        }\n\n        return this.http\n            .get<void>(acp + \"/localization/installLocale\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\nimport * as mapboxgl from \"mapbox-gl\";\r\n\r\nimport { LocationInformation } from \"@registry/model/location-manager\";\r\nimport { EventService } from \"@shared/service\";\r\nimport { GeoObject } from \"@registry/model/registry\";\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) {\r\n        (mapboxgl as any).accessToken = \"pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNWE5bWkwazYwNGFtb3loOGxsbjR1In0.ZNEwT-pBnGookEb-BF_jQQ\";\r\n    }\r\n\r\n    roots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (typeCode != null) {\r\n            params = params.set(\"typeCode\", typeCode);\r\n        }\r\n\r\n        if (hierarchyCode != null) {\r\n            params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        }\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<LocationInformation>(acp + \"/registrylocation/roots\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    search(text: string, date: string): Promise<{ type: string, features: GeoObject[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"text\", text);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ type: string, features: GeoObject[] }>(acp + \"/registrylocation/search\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport {\n    GeoObject, GeoObjectType, AttributeType, Term, MasterList, MasterListVersion, ParentTreeNode,\r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage,\r\n    MasterListByOrg\n} from \"@registry/model/registry\";\r\n\r\nimport { HierarchyType } from \"@registry/model/hierarchy\";\r\nimport { Progress } from \"@shared/model/progress\";\r\n\r\nimport { Organization, LocaleView } from \"@shared/model/core\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }>(acp + \"/cgr/init\")\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (types != null) {\r\n            params = params.set(\"types\", JSON.stringify(types));\r\n        }\r\n\r\n        if (hierarchies != null) {\r\n            params = params.set(\"hierarchies\", JSON.stringify(hierarchies));\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>(acp + \"/cgr/geoobjecttype/get-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects(childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"childId\", childId);\r\n        params = params.set(\"childTypeCode\", childTypeCode);\r\n        params = params.set(\"parentTypes\", JSON.stringify(parentTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>(acp + \"/cgr/geoobject/get-parent-geoobjects\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getChildGeoObjects(parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"parentId\", parentId);\r\n        params = params.set(\"parentTypeCode\", parentTypeCode);\r\n        params = params.set(\"childrenTypes\", JSON.stringify(childrenTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>(acp + \"/cgr/geoobject/getchildren\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(acp + \"/cgr/geoobjecttype/create\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(acp + \"/cgr/geoobjecttype/update\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType(code: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/cgr/geoobjecttype/delete\", JSON.stringify({ code: code }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/addattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/updateattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<boolean>(acp + \"/cgr/geoobjecttype/deleteattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeName: attributeName }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/addterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: term }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/updateterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: termJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<AttributeType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject(id: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"id\", id);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(acp + \"/cgr/geoobject/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/cgr/geoobject/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"date\", date);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/cgr/geoobject-time/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(acp + \"/cgr/geoobject/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject(code: string, typeCode: string): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>(acp + \"/cgr/geoobject/get-hierarchies-over-time\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, parentTypeCode: string, hierarchy: string, date: string): Promise<GeoObject> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if (parentTypeCode != null) {\r\n            params.parentTypeCode = parentTypeCode;\r\n        }\r\n\r\n        if (date != null) {\r\n            params.date = date;\r\n        }\r\n\r\n        return this.http\r\n            .post<GeoObject>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/etl/get-active\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/etl/get-completed\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(acp + \"/etl/get-import-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(acp + \"/etl/get-export-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/etl/import-resolve\", JSON.stringify({ historyId: historyId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitValidationResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/etl/validation-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitErrorResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/etl/error-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>(acp + \"/master-list/list-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListHistory(oid: string, versionType: string): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n        params = params.set(\"versionType\", versionType);\r\n\r\n        return this.http\r\n            .get<MasterList>(acp + \"/master-list/versions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getAllMasterListVersions(): Promise<MasterList[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<MasterList[]>(acp + \"/master-list/list-all-versions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListVersion(oid: string): Promise<MasterListVersion> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<MasterListVersion>(acp + \"/master-list/version\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<LocaleView[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<LocaleView[]>(acp + \"/localization/get-locales\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", geoObjectCode);\r\n        params = params.set(\"typeCode\", geoObjectTypeCode);\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>(acp + \"/cgr/geoobject-time/get-code\", { params: params })\r\n            .toPromise();\n    }\r\n\r\n    newGeoObjectOverTime(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject-time/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>(acp + \"/cgr/geoobject/setAttributeVersions\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterList(list: MasterList): Promise<MasterList> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/master-list/create\", JSON.stringify({ list: list }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterListVersion(oid: string, forDate: string): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterListVersion>(acp + \"/master-list/create-version\", JSON.stringify({ oid: oid, forDate: forDate }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterListVersions(oid: string): Promise<{ job: string }> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<{ job: string }>(acp + \"/master-list/publish-versions\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterList(oid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/master-list/remove\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterListVersion(oid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/master-list/remove-version\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterList(oid: string): Observable<string> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http.post<string>(acp + \"/master-list/publish\", JSON.stringify({ oid: oid }), { headers: headers });\r\n    }\r\n\r\n    getMasterList(oid: string): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<MasterList>(acp + \"/master-list/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit(geoObjectCode: string, geoObjectTypeCode: string, actions: string, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n\t  // TODO\r\n\t\t// Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n\t\t// This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n\t\t// for(const prop in geoObject.attributes) {\r\n\t\t//\tlet attr = geoObject.attributes[prop];\r\n \t\t//\tif(attr.type === \"date\"){\r\n\t\t//\t\tattr.values.forEach( val => {\r\n\t\t//\t\t\tval.value = new Date(val.value).getTime().toString();\r\n\t\t//\t\t})\r\n\t\t//\t}\r\n\t\t// }\r\n\r\n        let params = { geoObjectCode: geoObjectCode, geoObjectTypeCode: geoObjectTypeCode, actions: actions };\r\n\r\n        if (masterListId != null) {\r\n            params[\"masterListId\"] = masterListId;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geoobject-editor/updateGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n    * Not really part of the RegistryService\r\n    */\r\n    applyGeoObjectCreate(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n    // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n    // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        for (const prop in geoObject.attributes) {\r\n            let attr = geoObject.attributes[prop];\r\n            if (attr.type === \"date\") {\r\n                attr.values.forEach(val => {\r\n                    val.value = new Date(val.value).getTime().toString();\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = { geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if (parentTreeNode != null) {\r\n            params[\"parentTreeNode\"] = parentTreeNode;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geoobject-editor/createGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    data(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid,\r\n            sort: sort\r\n        } as any;\r\n\r\n        if (pageNumber != null) {\r\n            params.pageNumber = pageNumber;\r\n        }\r\n\r\n        if (pageSize != null) {\r\n            params.pageSize = pageSize;\r\n        }\r\n\r\n        if (filter.length > 0) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/master-list/data\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    values(oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[]): Promise<{ label: string, value: string }[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid,\r\n            attributeName: attributeName,\r\n            valueAttribute: valueAttribute\r\n        } as any;\r\n\r\n        if (filter.length > 0) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        if (value != null && value.length > 0) {\r\n            params.value = value;\r\n        }\r\n\r\n        return this.http\r\n            .post<{ label: string, value: string }[]>(acp + \"/master-list/values\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    publishShapefile(oid: string): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<MasterListVersion>(acp + \"/master-list/generate-shapefile\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    progress(oid: string): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<Progress>(acp + \"/master-list/progress\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListsByOrg(): Promise<{ orgs: MasterListByOrg[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + \"/master-list/list-org\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/master-list/get-publish-jobs\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getDatasetBounds(oid: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/master-list/bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getOrganizations(): Promise<Organization[]> {\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(acp + \"/cgr/organizations/get-all\")\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from \"@registry/model/registry\";\nimport { AttributeConfigInfo } from \"@registry/model/sync\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<SynchronizationConfig>>(acp + \"/synchronization-config/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<SynchronizationConfig> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<SynchronizationConfig>(acp + \"/synchronization-config/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<AttributeConfigInfo[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalId\", externalId);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<AttributeConfigInfo[]>(acp + \"/synchronization-config/get-custom-attr\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalSystemId\", externalSystemId);\n        params = params.set(\"hierarchyTypeCode\", hierarchyTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<any[]>(acp + \"/synchronization-config/get-config-for-es\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SynchronizationConfig>(acp + \"/synchronization-config/apply\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {};\n\n        if (oid != null) {\n            params = { oid: oid };\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(acp + \"/synchronization-config/edit\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    run(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/run\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJobs(oid:string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n//        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExportScheduledJob>>(acp + \"/synchronization-config/get-jobs\", { params: params })\n//            .pipe(finalize(() => {\n//                this.eventService.complete();\n//            }))\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { PaginationPage } from \"@registry/model/registry\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    getMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PaginationPage> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"orderBy\", \"createDate\");\r\n        params = params.set(\"pageNum\", pageNum.toString());\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"whereStatus\", whereStatus);\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/tasks/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    completeTask(taskId: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/tasks/complete\", JSON.stringify({ id: taskId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setTaskStatus(taskId: string, status: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/tasks/setTaskStatus\", JSON.stringify({ id: taskId, status: status }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","import * as d3 from \"d3\";\n\nexport function calculateTextWidth(text: string, fontSize: number): number {\n    let svg = d3.select(\"#svg\");\n\n    let textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n    let textEl = textCalcGroup.append(\"text\")\n        .attr(\"x\", -5000)\n        .attr(\"y\", -5000)\n        .attr(\"font-size\", fontSize)\n        .text(text);\n\n    let bbox = textEl.node().getBBox();\n\n    d3.select(\".g-text-calc\").remove();\n\n    return bbox.width + 2; // +2 is for padding. I caught this truncating just ever so slightly\n}\n\nexport function svgPoint(x: number, y: number) {\n    let svg: any = d3.select(\"#svg\").node();\n    let pt = svg.createSVGPoint();\n\n    pt.x = x;\n    pt.y = y;\n\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n    return point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) ||\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) &&\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n    return { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.code === 'invalid' ? false : attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy, true ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { ChangeRequest } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime, GeoObjectType, HierarchyOverTime, ValueOverTime } from \"@registry/model/registry\";\nimport { DateService, LocalizationService } from \"@shared/service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\n\nexport class ChangeRequestEditor {\n\n    changeRequest: ChangeRequest;\n\n    // eslint-disable-next-line no-undef\n    attributeEditors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[];\n\n    geometryAttributeType: AttributeType;\n\n    parentAttributeType: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    geoObjectType: GeoObjectType;\n\n    hierarchies: HierarchyOverTime[];\n\n    private _isValid: boolean;\n\n    localizationService: LocalizationService;\n\n    dateService: DateService;\n\n    constructor(changeRequest: ChangeRequest, geoObject: GeoObjectOverTime, geoObjectType: GeoObjectType, hierarchies: HierarchyOverTime[], geometryAttributeType: AttributeType, parentAttributeType: AttributeType, localizationService: LocalizationService, dateService: DateService) {\n        this.changeRequest = changeRequest;\n        this.geoObject = geoObject;\n        this.geoObjectType = geoObjectType;\n        this.geometryAttributeType = geometryAttributeType;\n        this.parentAttributeType = parentAttributeType;\n        this.hierarchies = hierarchies;\n        this.localizationService = localizationService;\n        this.dateService = dateService;\n\n        this.attributeEditors = this.generateAttributeEditors();\n        this.validate();\n    }\n\n    private generateAttributeEditors() {\n        let geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n        let editors = [];\n\n        let attrs = this.geoObjectType.attributes.slice(); // intentionally a shallow copy\n        attrs = attrs.filter(attr => geoObjectAttributeExcludes.indexOf(attr.code) === -1);\n        attrs.push(this.geometryAttributeType);\n        attrs.push(this.parentAttributeType);\n\n        attrs.forEach(attr => {\n            if (attr.code !== \"_PARENT_\") {\n                if (attr.isChangeOverTime) {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, null);\n\n                    editors.push(editor);\n                } else {\n                    let editor = new StandardAttributeCRModel(attr, this.geoObject, this.changeRequest);\n\n                    editors.push(editor);\n                }\n            } else {\n                this.hierarchies.forEach(hierarchy => {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, hierarchy);\n\n                    editors.push(editor);\n                });\n            }\n        });\n\n        return editors;\n    }\n\n    public hasChanges(): boolean {\n        let hasChanges = false;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (attributeEditor.hasChanges()) {\n                hasChanges = true;\n            }\n        });\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    public validate(skipExists: boolean = false): boolean {\n        this._isValid = true;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (!skipExists || attributeEditor.attribute.code !== \"exists\") {\n                attributeEditor.validate(true);\n\n                if (!attributeEditor.isValid()) {\n                    this._isValid = false;\n                }\n            }\n        });\n\n        return this._isValid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.geoObject.attributes[attributeCode]) {\n            let index = this.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditorForAttribute(attribute: AttributeType, hierarchy: HierarchyOverTime = null): ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel {\n        let indexOf = this.attributeEditors.findIndex(editor => (!editor.attribute.isChangeOverTime || (hierarchy == null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy == null) || ((editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy != null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy.code === hierarchy.code)) && editor.attribute.code === attribute.code);\n\n        if (indexOf === -1) {\n            return null;\n        } else {\n            return this.attributeEditors[indexOf];\n        }\n    }\n\n    public getEditors(): (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] {\n        return this.attributeEditors;\n    }\n\n}\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\nimport { GeoObjectType, GeoObjectOverTime } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"submit-change-request\",\n    templateUrl: \"./submit-change-request.component.html\",\n    styleUrls: [\"./submit-change-request.css\"]\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    geoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    loading: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor(private modalService: BsModalService, private registryService: RegistryService,\n        private changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.dataSource = Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes([], null).then(types => {\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                const type = types[i];\n                const orgCode = type.organizationCode;\n                const typeCode = type.superTypeCode != null && type.superTypeCode != \"\" ? type.superTypeCode : type.code;\n\n                if (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort((a, b) => {\n                if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n                else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n                else return 0;\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public handleDateChange() {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n        } else {\n            this.forDate = null;\n        }\n    }\n\n    public onValidChange(newValid: boolean) {\n        if (this.geoObject == null) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading(e: boolean): void {\n        this.loading = e;\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n            this.geoObject = geoObject;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.geoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div style=\"margin-top:50px;margin-bottom:50px;background:#f7f7f7;width:100%;padding:10px;\">\n      <h3 style=\"margin-bottom: 20px;\"><localize key=\"change.request.search.for.geoobject.header\"></localize></h3>\n      <div class=\"row\">\n\n        <div class=\"col-md-3\">\n          <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>\n          <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\" [(ngModel)]=\"geoObjectType\" required>\n            <option>  </option>\n            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n          </select>\n        </div>\n        \n        <div class=\"col-md-3\">\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"!geoObjectType\" \n            [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" customStyles=\"width:100%\"></date-field>\n        </div>\n        \n        <div class=\"col-md-4\">\n          <localize key=\"change.request.search.for.geoobject.search.label\"></localize>\n          <input type=\"text\" [ngClass]=\"{'inline-loading':loading}\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" (typeaheadLoading)=\"changeTypeaheadLoading($event)\" [placeholder]=\"('masterlist.search' | localize) + '...'\" class=\"form-control\" autocomplete=\"off\">\n        </div>\n        \n        <div class=\"col-md-2\">\n          <label></label>\n           <!-- We cannot use the dataset-location-manager here because it pulls the tiles from the dataset (list) and we don't have a dataset. -->\n           <!-- <a *ngIf=\"preGeoObject && forDate\" [routerLink]=\"['/registry/dataset-location-manager', '123', preGeoObject.attributes.type, 'false', dateStr, preGeoObject.attributes.code, 'true']\" -->\n          \n           <a *ngIf=\"geoObject && forDate\" [routerLink]=\"['/registry/location-manager', geoObject.attributes.uid, geoObject.attributes.type, dateStr, 'true', 'CR']\">\n            <button class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n          </a>\n          <button *ngIf=\"!(geoObject && forDate)\" disabled=\"true\" class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n        </div>\n\n      </div>\n      \n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { DatePipe } from \"@angular/common\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError, ValueOverTime } from \"@registry/model/registry\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\n@Component({\n    selector: \"geoobject-editor\",\n    templateUrl: \"./geoobject-editor.component.html\",\n    styleUrls: [\"./geoobject-editor.component.css\"],\n    providers: [DatePipe]\n})\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n    //    /*\n    //     * GeoObject Geometry Editor\n    //     */\n    //    @ViewChild( \"geometryEditor\" ) geometryEditor;\n    //\n    //    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild(\"parentSelector\") parentSelector;\n\n    areParentsValid: boolean = true;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor(private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate(votArray: ValueOverTime[], startDate: string): any {\n        for (let i: number = 0; i < votArray.length; ++i) {\n            if (votArray[i].startDate === startDate) {\n                return votArray[i];\n            }\n        }\n\n        return null;\n    }\n\n    setMasterListId(id: string) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date(Date.parse(this.dateStr));\n    }\n\n    setOnSuccessCallback(func: Function) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew(typeCode: string, dateStr: string, isGeometryEditable: boolean) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date(Date.parse(this.dateStr));\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(this.goPropertiesPre)).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        });\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError(importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date(Date.parse(dateStr));\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0) {\n            this.hierarchies = importError.object.parents;\n            this.areParentsValid = true;\n        } else {\n            this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n                this.hierarchies = retJson.hierarchies;\n            });\n            this.areParentsValid = false;\n        }\n\n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n\n        this.submitFunction = () => {\n            let config = {\n                historyId: historyId,\n                importErrorId: importError.id,\n                resolution: \"APPLY_GEO_OBJECT\",\n                parentTreeNode: this.hierarchies,\n                geoObject: this.goSubmit,\n                isNew: importError.object.isNew\n            };\n\n            this.registryService.submitErrorResolve(config)\n                .then(() => {\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n        };\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting(code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean): void {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date(Date.parse(this.dateStr));\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject(code, typeCode);\n        this.fetchGeoObjectType(typeCode);\n        this.fetchHierarchies(code, typeCode);\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject(code: string, typeCode: string) {\n        this.registryService.getGeoObjectOverTime(code, typeCode).then(geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(geoObject)).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(this.goPropertiesPre)).attributes);\n            // this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n\n            this.goSubmit = this.goPropertiesPost;\n\n            //            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then(locales => {\n            this.localizeService.setLocales(locales);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchGeoObjectType(code: string) {\n        this.registryService.getGeoObjectTypes([code], null)\n            .then(geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n\n                if (this.goPropertiesPre != null) {\n                    this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null) {\n                    this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if (!this.geoObjectType.isGeometryEditable) {\n                    //                    this.areGeometriesValid = true;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                console.log(err);\n                //                this.error( err );\n            });\n    }\n\n    private fetchHierarchies(code: string, typeTypeCode: string) {\n        this.registryService.getHierarchiesForGeoObject(code, typeTypeCode)\n            .then((hierarchies: any) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    getTypeAheadObservable(text, typeCode) {\n        return Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(text, typeCode).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, ptn: ParentTreeNode): void {\n        this.registryService.getGeoObjectByCode(e.item.code, ptn.geoObject.properties.type)\n            .then(geoObject => {\n                ptn.geoObject = geoObject;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    public onValidChange() {\n        if (this.attributeEditor != null) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n        //        if ( this.geometryEditor != null ) {\n        //            this.areGeometriesValid = this.geometryEditor.getIsValid();\n        //        }\n        if (this.parentSelector != null) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n\n        //        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage(nextPage: number, force: boolean = false): void {\n        if (nextPage === this.tabIndex && !force) {\n            return;\n        }\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n\n        if (nextPage === 2) {\n            this.isEditingGeometries = true;\n        } else {\n            this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if (this.attributeEditor != null) {\n            this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if (this.parentSelector != null) {\n            this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        if (this.isValid) {\n            this.bsModalRef.hide();\n\n            this.persistModelChanges();\n\n            if (this.submitFunction == null) {\n            /*\n                this.registryService.applyGeoObjectEdit(this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes)\n                    .then(() => {\n\n                        if (this.onSuccessCallback != null) {\n                            this.onSuccessCallback();\n                        }\n\n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                    */\n            } else {\n                this.submitFunction();\n            }\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n            \n                <div *ngIf=\"!areParentsValid\" class=\"alert alert-danger\" role=\"alert\">\n                  <localize key=\"geoobject.editor.modal.parents.must.be.assigned.message\"></localize>                \n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, Input } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { Step, StepConfig } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"step-indicator\",\n    templateUrl: \"./step-indicator.component.html\",\n    styleUrls: [\"./step-indicator.css\"]\n})\nexport class StepIndicatorComponent {\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"steps\")\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n    constructor(private localizeService: LocalizationService) {\n        this._stepConfig = { steps: [] };\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ContextLayer, ContextLayerGroup, MasterList } from \"@registry/model/registry\";\nimport { ContextLayerModalComponent } from \"./context-layer-modal.component\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"layer-panel\",\n    templateUrl: \"./layer-panel.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LayerPanelComponent implements OnInit, OnChanges {\n\n    @Input() filter: string[] = [];\n    @Output() layerChange = new EventEmitter<ContextLayer>();\n    @Output() baseLayerChange = new EventEmitter<any>();\n\n    baselayerIconHover = false;\n\n    lists: MasterList[] = [];\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"baselayer.satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n//         {\n//             name: 'Streets',\n//             label: 'baselayer.streets',\n//             id: 'streets-v11',\n//             sprite: 'mapbox://sprites/mapbox/streets-v11',\n//             url: 'mapbox://styles/mapbox/streets-v11'\n//         }\n    ];\n\n    contextLayerGroups: ContextLayerGroup[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, public service: RegistryService) { }\n\n    ngOnInit(): void {\n        this.service.getAllMasterListVersions().then(lists => {\n            this.lists = lists;\n\n            this.updateContextGroups();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.filter.currentValue !== changes.filter.previousValue) {\n            this.updateContextGroups();\n        }\n    }\n\n    updateContextGroups(): void {\n        this.lists.forEach(list => {\n            let contextGroup = { oid: list.oid, displayLabel: list.displayLabel.localizedValue, contextLayers: [] };\n\n            list.versions.forEach(version => {\n                const index = this.filter.indexOf(version.oid);\n\n                if (index === -1) {\n                    let thisContextLayer = { oid: version.oid, displayLabel: version.forDate, active: false, enabled: false };\n\n                    contextGroup.contextLayers.push(thisContextLayer);\n                }\n            });\n\n            if (contextGroup.contextLayers.length > 0) {\n                this.contextLayerGroups.push(contextGroup);\n            }\n        });\n    }\n\n    groupHasEnabledContextLayers(group: string): boolean {\n        let hasEnabled = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            if (cLayerGroup.oid === group) {\n                cLayerGroup.contextLayers.forEach(cLayer => {\n                    if (cLayer.enabled) {\n                        hasEnabled = true;\n                    }\n                });\n            }\n        });\n\n        return hasEnabled;\n    }\n\n    hasEnabledContextLayers(): boolean {\n        let hasEnabled = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            cLayerGroup.contextLayers.forEach(cLayer => {\n                if (cLayer.enabled) {\n                    hasEnabled = true;\n                }\n            });\n        });\n\n        return hasEnabled;\n    }\n\n    toggleContextLayer(layer: ContextLayer): void {\n        layer.active = !layer.active;\n\n        this.layerChange.emit(layer);\n    }\n\n    removeContextLayer(layer: ContextLayer): void {\n        layer.active = false;\n        layer.enabled = false;\n\n        this.layerChange.emit(layer);\n    }\n\n    addContextLayerModal(): void {\n        let bsModalRef = this.modalService.show(ContextLayerModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            // eslint-disable-next-line quote-props\n            \"class\": \"context-layer-modal\"\n        });\n        bsModalRef.content.contextLayerGroups = this.contextLayerGroups;\n\n        //        bsModalRef.content.onSubmit.subscribe(() => {\n        //\n        //            this.contextLayerGroups.forEach(cLayerGroup => {\n        //                cLayerGroup.contextLayers.forEach(cLayer => {\n        //\n        //                    console.log(\"Emitting event\", cLayer);\n        //                    this.layerChange.emit(cLayer);\n        //                });\n        //            })\n        //\n        //        });\n    }\n\n    toggleBaseLayer(layer: any): void {\n        this.baseLayers.forEach(bl => {\n            bl.active = false;\n        });\n\n        layer.active = true;\n\n        this.baseLayerChange.emit(layer);\n    }\n\n}\n","\n<div class=\"layer-toggle\" (mouseenter)=\"baselayerIconHover = true\" (mouseleave)=\"baselayerIconHover = false\">\n\n  <i class=\"fa fa-bars\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n  <div [hidden]=\"!baselayerIconHover\">\n\n    <div style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.base.layers.label\"></localize>\n      </h4>\n      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n        <input class=\"layer-toggle-input\" type='radio' name='baselayers' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"toggleBaseLayer(baseLayer)\">\n        <label class=\"layer-toggle-label\"><localize [key]=\"baseLayer.label\"></localize></label>\n      </div>\n    </div>\n    <div>\n      <div *ngIf=\"hasEnabledContextLayers()\">\n        <h4>\n          <localize key=\"explorer.context.layers.label\"></localize>\n        </h4>\n        <div class=\"list-group\">\n          <div *ngFor=\"let cLayerGroup of contextLayerGroups;\">\n            <div *ngIf=\"groupHasEnabledContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n              <label>{{ cLayerGroup.displayLabel }}</label>\n              <div class=\"list-group\">\n                <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                  <div class=\"list-group-item\" style=\"border: none;\" *ngIf=\"cLayer.enabled\">\n                    <input type=\"checkbox\" [checked]=\"cLayer.active\" (click)=\"toggleContextLayer(cLayer)\"> {{ cLayer.displayLabel }} <i class=\"fa fa-times delete-btn clickable\" aria-hidden=\"true\" (click)=\"removeContextLayer(cLayer)\"></i>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n      <button class=\"btn btn-primary\" (click)=\"addContextLayerModal()\">+ <localize key=\"explorer.add.context.layer.button.label\"></localize></button>\n    </div>\n\n  </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\nimport { ErrorModalComponent, ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"feature-panel\",\n    templateUrl: \"./feature-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class FeaturePanelComponent implements OnInit {\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\",\n        GEOMETRY: \"GEOMETRY\"\n    }\n\n    @Input() datasetId: string;\n\n    @Input() type: GeoObjectType;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set code(value: string) {\n        this.updateCode(value);\n    }\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    _code: string = null;\n\n    @Output() featureChange = new EventEmitter<GeoObjectOverTime>();\n    @Output() modeChange = new EventEmitter<boolean>();\n    @Output() panelCancel = new EventEmitter<void>();\n    @Output() panelSubmit = new EventEmitter<{isChangeRequest:boolean, geoObject?: any, changeRequestId?: string}>();\n\n    _isValid: boolean = true;\n\n    bsModalRef: BsModalRef;\n\n    mode: string = null;\n\n    isMaintainer: boolean;\n\n    // The current state of the GeoObject in the GeoRegistry\n    preGeoObject: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    postGeoObject: GeoObjectOverTime;\n\n    attribute: AttributeType = null;\n\n    isNew: boolean = false;\n\n    isEdit: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    hierarchy: HierarchyOverTime = null;\n\n    reason: string = \"\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private modalService: BsModalService, private authService: AuthService, private geometryService: GeometryService) { }\n\n    ngOnInit(): void {\n        this.isMaintainer = this.authService.isSRA() || this.authService.isOrganizationRA(this.type.organizationCode) || this.authService.isGeoObjectTypeOrSuperRM(this.type);\n        this.mode = \"ATTRIBUTES\";\n\n//        this.isEdit = !this.readOnly;\n    }\n\n    setValid(valid: boolean): void {\n        this._isValid = valid;\n    }\n\n    isValid(): boolean {\n        return this._isValid && this.attributeEditor && this.attributeEditor.isValid();\n    }\n\n    updateCode(code: string): void {\n        this._code = code;\n        this.postGeoObject = null;\n        this.preGeoObject = null;\n        this.hierarchies = null;\n\n        if (code != null && this.type != null) {\n            if (code !== \"__NEW__\") {\n                this.isNew = false;\n\n                this.service.getGeoObjectOverTime(code, this.type.code).then(geoObject => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(geoObject)).attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n\n                this.service.getHierarchiesForGeoObject(code, this.type.code).then((hierarchies: HierarchyOverTime[]) => {\n                    this.hierarchies = hierarchies;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else {\n                this.isNew = true;\n\n                this.service.newGeoObjectOverTime(this.type.code).then(retJson => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, retJson.geoObject.attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n\n                    this.hierarchies = retJson.hierarchies;\n                    this.setEditMode(true);\n                });\n            }\n        }\n    }\n\n    onCancelInternal(): void {\n        this.panelCancel.emit();\n\n        // if (this._code === '__NEW__') {\n        //    this.updateCode(null);\n        // }\n        // else {\n        //    this.updateCode(this._code);\n        // }\n    }\n\n    canSubmit(): boolean {\n        return this.isValid() &&\n          (this.isMaintainer || (this.reason && this.reason.trim().length > 0)) &&\n          (this.isNew || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    onSubmit(): void {\n        if (this.isNew) {\n            this.service.applyGeoObjectCreate(this.hierarchies, this.postGeoObject, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                    this.updateCode(this._code);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.service.applyGeoObjectEdit(this.postGeoObject.attributes.code, this.type.code, this.attributeEditor.getActions(), this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                    this.updateCode(this._code);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n\n        this.geometryService.stopEditing();\n    }\n\n    onManageAttributeVersion(attribute: AttributeType): void {\n        this.attribute = attribute;\n        this.mode = this.MODE.VERSIONS;\n    }\n\n    onManageHiearchyVersion(hierarchy: HierarchyOverTime): void {\n        this.hierarchy = hierarchy;\n        this.mode = this.MODE.HIERARCHY;\n    }\n\n    onEditAttributes(): void {\n        this.setEditMode(!this.isEdit);\n    }\n\n    setEditMode(value: boolean): void {\n        this.isEdit = value;\n        this.reason = null;\n\n        this.modeChange.emit(this.isEdit);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div *ngIf=\"mode == MODE.ATTRIBUTES && postGeoObject != null\">\n    <!-- Attributes tab -->\n    <geoobject-shared-attribute-editor  *ngIf=\"hierarchies\"\n      #attributeEditor \n      [geoObjectType]=\"type\" \n      [postGeoObject]=\"postGeoObject\" \n      [isNew]=\"isNew\" \n      [isGeometryInlined]=\"false\"\n      [hierarchies]=\"hierarchies\"\n      [readOnly]=\"!isEdit\"\n      (valid)=\"setValid($event)\"\n      > \n    </geoobject-shared-attribute-editor>\n    \n    <div *ngIf=\"isEdit && !isMaintainer\" class=\"form-group\" style=\"z-index: 0;\">\n      <label> \n        <localize key=\"change.request.reason.label\"></localize>\n      </label>\n      <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" class=\"form-control\" name=\"reason-input\" required></textarea>\n    </div>\n\n    <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    \n      <button *ngIf=\"!readOnly && !isEdit\" type=\"submit\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n        <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n      </button>\n      \n      <button *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-default\" (click)=\"onCancelInternal()\">\n        <localize key=\"modal.button.cancel\"></localize>\n      </button>\n      <button *ngIf=\"isEdit\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!canSubmit()\">\n        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n      </button>\n\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"create-hierarchy-type-modal\",\n    templateUrl: \"./create-hierarchy-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n\n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n    readOnly: boolean = false;\n\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            rootGeoObjectTypes: [],\n            organizationCode: \"\"\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n            // Filter out organizations they're not RA's of, unless we're readOnly.\n            if (!this.readOnly) {\n                this.organizations = [];\n\n                for (var i = 0; i < orgs.length; ++i) {\n                    if (this.auth.isOrganizationRA(orgs[i].code)) {\n                        this.organizations.push(orgs[i]);\n                    }\n                }\n            } else {\n                this.organizations = orgs;\n            }\n\n            if (!this.edit && this.organizations.length === 1) {\n                this.hierarchyType.organizationCode = this.organizations[0].code;\n                this.organizationLabel = this.organizations[0].label.localizedValue;\n            } else if (this.edit || this.readOnly) {\n                this.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getOrganizationLabelFromCode(orgCode: string) {\n        for (var i = 0; i < this.organizations.length; ++i) {\n            if (this.organizations[i].code === orgCode) {\n                return this.organizations[i].label.localizedValue;\n            }\n        }\n\n        console.log(\"Did not find org with code [\" + orgCode + \"]\");\n        return orgCode;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if (this.readOnly) {\n            this.bsModalRef.hide();\n            return;\n        }\n\n        if (this.edit) {\n            this.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize key=\"hierarchy.management.create.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> \n          <span  style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      \n      <localized-text [(value)]=\"hierarchyType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\" [disabled]=\"readOnly\"></localized-text>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.disclaimer\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.disclaimer\" name=\"disclaimer\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.accessConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.useConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      \n      <hr/>\n      \n      <div class=\"form-group\">\n        <h4>\n          <localize key=\"masterlist.contact\"></localize>\n        </h4>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.phoneNumber\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.phoneNumber\" name=\"phoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.email\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1 || form.invalid\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\n@Component({\n    selector: \"create-geoobjtype-modal\",\n    templateUrl: \"./create-geoobjtype-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organization: Organization = null;\n    message: string = null;\n    parents: GeoObjectType[];\n    hierarchyType: HierarchyType;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            geometryType: \"MULTIPOINT\",\n            isLeaf: false,\n            isGeometryEditable: true,\n            organizationCode: \"\",\n            attributes: []\n        };\n    }\n\n    init(organization: Organization, parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n        this.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\n        if (groupSuperType) {\n            this.geoObjectType.superTypeCode = groupSuperType.code;\n            this.geoObjectType.geometryType = groupSuperType.geometryType;\n            this.geoObjectType.isPrivate = groupSuperType.isPrivate;\n        }\n\n        // Filter out parents that are not abstract\n        this.parents = parents.filter(parent => parent.isAbstract);\n\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n        this.geoObjectType.organizationCode = this.organization.code;\n        this.organizationLabel = this.organization.label.localizedValue;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n            this.onGeoObjTypeCreate.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    toggleIsAbstract(): void {\n        this.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"geoObjectType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <label style=\"display: block;\">\n            <localize key=\"attribute.group.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n        \n          <label style=\"display: block;\">\n            <localize key=\"geoObjectType.attr.visibility.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"geoObjectType.superTypeCode != null\" [(value)]=\"geoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [disabled]=\"geoObjectType.superTypeCode != null && geoObjectType.superTypeCode != ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { ManageGeoObjectTypeModalState, GeoObjectType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-geoobjecttype-modal\",\n    templateUrl: \"./manage-geoobjecttype-modal.component.html\",\n    styleUrls: [\"./manage-geoobjecttype-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, geoObjectTypeManagementService: GeoObjectTypeManagementService) {\n        this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe(modalState => {\n            this.modalState = modalState;\n        });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy() {\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the\n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next(data);\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form>\n\n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n\n<!--   @Deprecate -->\n<!--   <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></manage-attributes-modal> -->\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\"></edit-term-option-input>\n\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, AttributeType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"geoobjecttype-input\",\n    templateUrl: \"./geoobjecttype-input.component.html\",\n    styleUrls: [\"./geoobjecttype-input.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n\n    organizationLabel: string;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"setGeoObjectType\")\n    set in(geoObjectType: GeoObjectType) {\n        if (geoObjectType) {\n            this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        }\n    }\n\n    message: string = null;\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizationService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n\n        this.fetchOrganizationLabel();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    fetchOrganizationLabel(): void {\n        this.registryService.getOrganizations().then(orgs => {\n            for (let i = 0; i < orgs.length; ++i) {\n                if (orgs[i].code === this.editGeoObjectType.organizationCode) {\n                    this.organizationLabel = orgs[i].label.localizedValue;\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageAttributes, attribute: \"\", termOption: \"\" });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType(this.editGeoObjectType).then(geoObjectType => {\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n\n        // return false;\n\n        return true;\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"geoObjectType.attr.visibility.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"geoObjectType.superTypeCode\" [(value)]=\"editGeoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n<!--                             <ul class=\"list-group list-group-flush\"> -->\n<!--                                 <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li> -->\n<!--                             </ul> -->\n\n<!--                             <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\"> -->\n<!--                                 <localize key=\"modal.button.manageAttributes\"></localize> -->\n<!--                             </button> -->\n\n                        <div class=\"table-responsive\">\n                              <table class=\"table\">\n<!--                                   <thead> -->\n<!--                                       <tr> -->\n<!--                                           <th> -->\n<!--                                               <localize key=\"data.property.label.label\"></localize> -->\n<!--                                           </th> -->\n<!--                                           <th class=\"button-column-header\"> -->\n<!--                                               <localize key=\"data.property.label.actions\"></localize> -->\n<!--                                           </th> -->\n<!--                                       </tr> -->\n<!--                                   </thead> -->\n                                  <tbody>\n                                      <tr *ngFor=\"let attr of geoObjectType.attributes\" >\n                                          <td>{{attr.label.localizedValue}}</td>\n                                          <td class=\"button-column\" style=\"width: 60px;\">\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                                  [title]=\"'modal.button.edit' | localize\"></a>\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                                  [title]=\"'modal.button.remove' | localize\"></a>\n                                          </td>\n                                      </tr>\n                                  </tbody>\n                              </table>\n                          </div>\n                          \n                          <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                              <localize key=\"modal.button.add\"></localize>\n                          </i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, AttributeTermType, AttributeDecimalType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"define-attribute-modal-content\",\n    templateUrl: \"./define-attribute-modal-content.component.html\",\n    styleUrls: [\"./define-attribute-modal-content.css\"]\n})\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    newAttribute: AttributeType = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.create.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.attributeInputComponent) {\n            this.attributeInputComponent.animate();\n        }\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.addAttributeType(this.geoObjectType.code, this.newAttribute).then(data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setAttribute(type: string): void {\n        if (type === \"term\") {\n            this.newAttribute = new AttributeTermType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else if (type === \"float\") {\n            this.newAttribute = new AttributeDecimalType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else {\n            this.newAttribute = new AttributeType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        let isAttrValid: boolean = false;\n\n        if (this.attributeInputComponent) {\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n\n        if (isAttrValid) {\n            return true;\n        }\n\n        return false;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Directive } from \"@angular/core\";\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from \"@angular/forms\";\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator(): ValidatorFn {\n    return (c: AbstractControl) => {\n        if (c.value) {\n            let isValid = c.value.indexOf(\" \") === -1;\n\n            if (isValid) {\n                return null;\n            } else {\n                return {\n                    geoObjectAttributeCode: {\n                        valid: false\n                    }\n                };\n            }\n        }\n    };\n}\n\n@Directive({\n    selector: \"[geoObjectAttributeCode][ngModel]\",\n    providers: [\n        // eslint-disable-next-line no-use-before-define\n        { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n    ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n\n    validator: ValidatorFn;\n\n    constructor() {\n        this.validator = validateGeoObjectAttributeCodeValidator();\n    }\n\n    validate(c: FormControl) {\n        return this.validator(c);\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"edit-attribute-modal-content\",\n    templateUrl: \"./edit-attribute-modal-content.component.html\",\n    styleUrls: [\"./edit-attribute-modal-content.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]]\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n            for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n                let attr = this.geoObjectType.attributes[i];\n                if (attr.code === data.code) {\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    back(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, AttributeTermType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { GeoObjectTypeManagementService } from \"@registry/service/geoobjecttype-management.service\";\n\n@Component({\n    selector: \"term-option-widget\",\n    templateUrl: \"./term-option-widget.component.html\",\n    styleUrls: [\"./term-option-widget.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    state: string = \"none\";\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n\n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n\n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" });\n    }\n\n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { GeoObjectType, AttributeTermType, Term } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"manage-term-options\",\n    templateUrl: \"./manage-term-options.component.html\",\n    styleUrls: [\"./manage-term-options.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    termOption: Term;\n    state: string = \"none\";\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: true }\n        ]\r\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.termOption.code && this.termOption.code.length > 0) {\n            // If code has a space\n            if (this.termOption.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            // If label is only spaces\n            for (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n                if (this.termOption.label.localeValues[i].value.replace(/\\s/g, \"\").length === 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n            return false;\n        }\n\n        return false;\n    }\n\n    addTermOption(): void {\n        this.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            this.attribute.rootTerm.children.push(data);\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    deleteTermOption(termOption: Term): void {\n        this.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n            if (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n                this.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n            }\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    removeTermOption(termOption: Term): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + termOption.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteTermOption(termOption);\n        });\n    }\n\n    editTermOption(termOption: Term): void {\n        const state = {\n            state: GeoObjectTypeModalStates.editTermOption,\n            attribute: this.attribute,\n            termOption: JSON.parse(JSON.stringify(termOption))\n        };\n\n        this.geoObjectTypeManagementService.setModalState(state);\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from \"@shared/model/modal\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"edit-term-option-input\",\n    templateUrl: \"./edit-term-option-input.component.html\",\n    styleUrls: [],\n    animations: [\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n                    ]\n                )]\n        )\n    ]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Input() termOption: Term;\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), active: true, enabled: true }\n\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            // Update the term definition on the attribute\n            const index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n            if (index !== -1) {\n                this.attribute.rootTerm.children[index] = data;\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: null });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\n\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { SvgHierarchyNode } from \"./svg-hierarchy-node\";\nimport { calculateTextWidth } from \"./svg-util\";\nimport { INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL, HierarchyComponent, TREE_SCALE_FACTOR_X, TREE_SCALE_FACTOR_Y } from \"../hierarchy.component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nexport class SvgHierarchyType {\n\n    public static gotRectW: number = 150;\n    public static gotRectH: number = 25;\n    public static gotBodyFontSize: number = 8;\n    public static gotOptionsButtonFontSize: number = 12;\n\n    public static gotHeaderW: number = 150;\n    public static gotHeaderH: number = 14;\n    public static gotHeaderFontSize: number = 8;\n\n    public static MOUSE_HOVER_EVENT_ENTER = \"mouseenter\";\n\n    public static MOUSE_HOVER_EVENT_MOVE = \"mousemove\";\n\n    public static MOUSE_HOVER_EVENT_EXIT = \"mouseleave\";\n\n    hierarchyComponent: HierarchyComponent;\n\n    hierarchyType: HierarchyType;\n\n    svgEl: any;\n\n    d3Hierarchy: any;\n\n    d3Tree: any;\n\n    isPrimary: boolean;\n\n    tooltip: any;\n\n    public constructor(hierarchyComponent: HierarchyComponent, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        const hierarchyType = ht;\n\n        this.hierarchyComponent = hierarchyComponent;\n        this.hierarchyType = hierarchyType;\n        this.svgEl = svgEl;\n\n        this.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n        this.isPrimary = isPrimary;\n\n        this.d3Tree = d3.tree().nodeSize([SvgHierarchyType.gotRectW * TREE_SCALE_FACTOR_X, (SvgHierarchyType.gotRectH + SvgHierarchyType.gotHeaderH) * TREE_SCALE_FACTOR_Y]).separation((a, b) => 0.8)(this.d3Hierarchy);\n    }\n\n    public getD3Tree() {\n        return this.d3Tree;\n    }\n\n    public getCode(): string {\n        return this.hierarchyType.code;\n    }\n\n    public getNodeByCode(gotCode: string): SvgHierarchyNode {\n        let treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\n        if (treeNode == null) {\n            return null;\n        }\n\n        return new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService, this.authService);\n    }\n\n    public renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n        let bbox = hg.node().getBBox();\n\n        let colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        let headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        const headerFontSize: number = 10;\n        const iconWidth: number = 20;\n        const maxHierarchyLabelLength = 200;\n\n        let hierarchyLabelW: number = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize);\n        let hierarchyLabelH:number = headerFontSize * 2;\n        let hierarchyLabelY:number = bbox.y + headerFontSize * 1.6;\n        if (hierarchyLabelW > maxHierarchyLabelLength) {\n            hierarchyLabelW = maxHierarchyLabelLength;\n            hierarchyLabelH = headerFontSize * 3;\n            hierarchyLabelY = bbox.y + headerFontSize;\n        }\n\n        let lineWidth = bbox.width;\n        let textWidth = hierarchyLabelW + iconWidth;\n\n        if (textWidth > lineWidth) {\n            lineWidth = textWidth;\n        }\n\n        // Hierarchy icon (font awesome)\n        headerg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .style(\"font-family\", \"FontAwesome\")\n            .attr(\"fill\", \"grey\")\n            .attr(\"font-size\", 12)\n            .text(\"\\uf0e8\");\n\n        // Hierarchy display label\n        colHeader.append(\"foreignObject\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"x\", bbox.x + iconWidth)\n            .attr(\"y\", hierarchyLabelY)\n            .attr(\"width\", hierarchyLabelW)\n            .attr(\"height\", hierarchyLabelH)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"gray\")\n            // .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => this.hierarchyType.label.localizedValue);\n\n        // Line underneath the header\n        headerg.append(\"line\").classed(\"hierarchy-header-line\", true)\n            .attr(\"x1\", bbox.x)\n            .attr(\"y1\", bbox.y + headerFontSize)\n            .attr(\"x2\", bbox.x + lineWidth)\n            .attr(\"y2\", bbox.y + headerFontSize)\n            .attr(\"stroke\", \"grey\")\n            .attr(\"stroke-width\", .5);\n\n        let headerGBbox = headerg.node().getBBox();\n        headerg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n        // Col header label\n        colHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize + 2)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"grey\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .text(colHeaderLabel);\n\n        colHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n        return headerg;\n    }\n\n    getRelatedHierarchies(gotCode: string): string[] {\n        let got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n        if (got.relatedHierarchies == null) {\n            got.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n        }\n\n        let relatedHiers: string[] = got.relatedHierarchies;\n\n        let index = null;\n        for (let i = 0; i < relatedHiers.length; ++i) {\n            if (relatedHiers[i] === this.getCode()) {\n                index = i;\n            }\n        }\n\n        if (index != null) {\n            relatedHiers.splice(index, 1);\n        }\n\n        return relatedHiers;\n    }\n\n    private nodeMouseover(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 1);\n    }\n\n    private nodeMousemove(event: any, element: any, data:any) {\n        d3.select(\"#hierarchyLabel\").html(this.hierarchyType.label.localizedValue);\n        d3.select(\"#hierarchyCodeLabel\").html(this.hierarchyType.code);\n\n        d3.select(\"#geoObjectTypeLabel\").html(data.data.label);\n        d3.select(\"#geoObjectTypeCodeLabel\").html(data.data.geoObjectType);\n\n        d3.select(\"#hierarchyOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyType.organizationCode).label.localizedValue);\n        d3.select(\"#geoObjectTypeOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyComponent.findGeoObjectTypeByCode(data.data.geoObjectType).organizationCode).label.localizedValue);\n\n        let nodeTooltip: any = d3.select(\"#NodeTooltip\").node();\n        let nodeTooltipBbox: DOMRect = nodeTooltip.getBoundingClientRect();\n\n        let pos = { x: event.pageX, y: event.pageY };\n        const yPointerOffset: number = 50;\n        const xPointerOffset: number = 0;\n\n    // If overflow off bottom of page\n        if ((event.pageY + nodeTooltipBbox.height + yPointerOffset) > document.documentElement.scrollHeight) {\n      // render above mouse pointer\n            pos.y = event.pageY - nodeTooltipBbox.height - yPointerOffset;\n        }\n\n    // If overflow off right side of page\n        if ((event.pageX + nodeTooltipBbox.width + xPointerOffset) > document.documentElement.scrollWidth) {\n      // render to the left of the mouse pointer\n            pos.x = event.pageX - nodeTooltipBbox.width - xPointerOffset;\n        }\n\n        d3.select(\"#NodeTooltip\")\n            .style(\"left\", pos.x + \"px\")\n            .style(\"top\", pos.y + \"px\");\n    }\n\n    private nodeMouseleave(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 0)\n            .style(\"left\", \"-10000px\")\n            .style(\"top\", \"-10000px\");\n    }\n\n    public render() {\n        let that = this;\n        let descends: any = this.d3Tree.descendants();\n\n        d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").remove();\n        if (this.isPrimary) {\n            d3.select(\".g-hierarchy[data-primary=\\\"true\\\"]\").remove();\n        }\n\n        let hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n        hg.attr(\"font-family\", \"sans-serif\");\n\n        let gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n        // Edge\n        gtree.append(\"g\").classed(\"g-got-edge\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(this.d3Tree.links())\n            .join(\"path\")\n            // .attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n            .attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n                return \"M\" + d.source.x + \",\" + (d.source.y) +\n                    \"V\" + ((d.source.y + d.target.y) / 2) +\n                    \"H\" + d.target.x +\n                    \"V\" + (d.target.y);\n            });\n\n        // Header on square which denotes which hierarchy it's a part of\n        let gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n        gHeader.selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"rx\", 3)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) =>\n                d.data.inheritedHierarchyCode != null\n            )\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Write the name of the hierarchy on the header\n        gHeader.selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) =>\n                d.x - (SvgHierarchyType.gotHeaderW / 2)\n            )\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .style(\"text-align\", \"center\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"white\")\n            .style(\"height\", (SvgHierarchyType.gotHeaderH - 4) + \"px\")\n            .style(\"width\", SvgHierarchyType.gotHeaderW + \"px\")\n            .html(function(d: any) {\n                let name = d.data.inheritedHierarchyCode != null ? that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue : that.hierarchyType.label.localizedValue;\n                // eslint-disable-next-line no-unused-expressions\n                calculateTextWidth(name, SvgHierarchyType.gotHeaderFontSize) > (SvgHierarchyType.gotHeaderW - 5) ? name = name.substring(0, 34) + \"...\" : true;\n                return name;\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // GeoObjectType Body Square\n        gtree.append(\"g\").classed(\"g-got\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-body-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"rx\", 3)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .each(function(d: any) {\n                if (d.data.geoObjectType !== \"GhostNode\") {\n                    if (d.data.activeDropZones) {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n                    } else {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                    }\n                }\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Arrows on Edges\n        const arrowRectD = { height: 7, width: 10 };\n        let gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n        gArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-rect\", true)\n            .attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n            .attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n        gArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3)) +\n                \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n            );\n\n        // Ghost Drop Zone (Sibling) Backer\n        gtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-backer-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"white\");\n\n        // Ghost Drop Zone (Sibling) Body Rectangle\n        gtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-body-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#6BA542\")\n            .attr(\"stroke-width\", \"1\")\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType);\n\n        // GeoObjectType label\n        gtree.append(\"g\").classed(\"g-got-codelabel\", true)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", SvgHierarchyType.gotBodyFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .classed(\"svg-got-label-text\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n            .attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n            .attr(\"height\", SvgHierarchyType.gotRectH - 4)\n            // .filter(function(d: any) {\n            //     return calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n            // })\n            // .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => d.data.label)\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        let headerg;\n        if (this.isPrimary) {\n            gtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n                .selectAll(\"text\")\n                .data(descends)\n                .join(\"text\")\n                .filter(function(d: any) {\n                    return (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n                })\n                .classed(\"svg-got-relatedhiers-button\", true)\n                .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n                .attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - (SvgHierarchyType.gotOptionsButtonFontSize) - 3)\n                .attr(\"y\", (d: any) => d.y + (SvgHierarchyType.gotOptionsButtonFontSize * 0.8) - SvgHierarchyType.gotOptionsButtonFontSize / 2)\n                .style(\"font-family\", \"FontAwesome\")\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", \"#767676\")\n                .style(\"font-size\", SvgHierarchyType.gotOptionsButtonFontSize + \"px\")\n                .text(\"\\uf013\")\n                .on(\"click\", function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n            headerg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n        } else {\n            headerg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n        }\n\n\n        // let paddingTop = (headerg.node().getBBox().height + 20);\n        // gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n    }\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a> \n          <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> \n          <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> \n          <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span>\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"data-page\",\n    templateUrl: \"./data-page.component.html\",\n    styleUrls: [\"./data-page.css\"]\n})\nexport class DataPageComponent implements OnInit {\n\n    content: string = \"SPREADSHEET\";\n    pageTitle: string;\n    bsModalRef: BsModalRef;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n    }\n\n    ngOnInit(): void {\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n\n        if (content === \"SPREADSHEET\") {\n            this.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n        } else if (content === \"SHAPEFILE\") {\n            this.pageTitle = this.localizationService.decode(\"shapefile.title\");\n        } else if (content === \"EXPORT\") {\n            this.pageTitle = this.localizationService.decode(\"io.export.title\");\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">\n                      <localize key=\"import-spreadsheet-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">\n                      <localize key=\"import-shapefile-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ViewChildren, ElementRef, QueryList, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from \"@shared/service\";\nimport { HierarchyService, IOService } from \"@registry/service\";\nimport { ExternalSystem } from \"@shared/model/core\";\n\nimport { SpreadsheetModalComponent } from \"./modals/spreadsheet-modal.component\";\nimport { ShapefileModalComponent } from \"./modals/shapefile-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"dataimporter\",\n    templateUrl: \"./dataimporter.component.html\",\n    styleUrls: [\"./dataimporter.css\"]\n})\nexport class DataImporterComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray:QueryList<DateFieldComponent>;\n\n    currentDate : Date = new Date();\n\n    showImportConfig: boolean = false;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Start date\n     */\n    startDate: Date = null;\n\n    /*\n     * End date\n     */\n    endDate: Date | string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string; // Can be SHAPEFILE or EXCEL\n\n    isExternal: boolean = false;\n\n    /*\n     * List of available external systems (filtered based on user's org)\n     */\n    externalSystems: ExternalSystem[];\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    isLoading: boolean = true;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService,\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private authService: AuthService,\n        private sysService: ExternalSystemService,\n        private hierarchyService: HierarchyService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) { }\n\n    ngOnInit(): void {\n        this.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n            this.externalSystems = paginatedSystems.resultSet;\n\n            if (this.externalSystems.length === 0) {\n                this.isExternal = false;\n                this.showImportConfig = true; // Show the upload widget if there are no external systems registered\n            }\n\n            this.isLoading = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = acp + \"/excel/get-configuration\";\n        if (this.format === \"SHAPEFILE\") {\n            getUrl = acp + \"/shapefile/get-shapefile-configuration\";\n\n            // this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n        }\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.typeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.startDate != null) {\n                form.append(\"startDate\", this.startDate);\n            }\n            if (this.endDate != null) {\n                form.append(\"endDate\", this.endDate);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.isExternal = this.isExternal;\n            configuration.hierarchy = this.hierarchyCode;\n\n            let externalSystem: ExternalSystem = null;\n            for (let i = 0; i < this.externalSystems.length; ++i) {\n                let sys: ExternalSystem = this.externalSystems[i];\n\n                if (sys.oid === this.externalSystemId) {\n                    externalSystem = sys;\n                }\n            }\n\n            configuration.externalSystemId = this.externalSystemId;\n            configuration.externalSystem = externalSystem;\n\n            if (this.format === \"SHAPEFILE\") {\n                this.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            } else {\n                this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            }\n\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n\n        this.checkDates();\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    setImportSource(event, type): void {\n        if (type === \"EXTERNAL\") {\n            this.isExternal = true;\n        } else {\n            this.isExternal = false;\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n//    setInfinity(endDate: any): void {\n//\n//        if(endDate === PRESENT){\n//            this.endDate = null;\n//        }\n//        else{\n//            this.endDate = PRESENT;\n//        }\n//    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = this.checkDateFieldValidity();\n        }, 0);\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        let startDateField: DateFieldComponent;\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n\n            if (field.inputName === \"startDate\") {\n                // set startDateField so we can use it in the next check\n                startDateField = field;\n            }\n\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        if (this.startDate > this.endDate) {\n            startDateField.setInvalid(this.localizationService.decode(\"date.input.startdate.after.enddate.error.message\"));\n\n            this.changeDetectorRef.detectChanges();\n        }\n\n        return true;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\" autocomplete=\"off\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                <label class=\"col-md-2 text-right\" for=\"hierarchyCode\"> <localize key=\"io.modal.hierarchy\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\" [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                        <option></option>\n                        <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>{{view.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\" (change)=\"onSelectType()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>{{type.super ? type.super.label + \" : \" + type.label : type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" (change)=\"checkDates()\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"startDate\" label=\"\" [inputName]=\"'startDate'\" (change)=\"checkDates()\" [allowFutureDates]=\"false\"></date-field>\n                </div>\n                \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"endDate\"><localize key=\"io.endDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"endDate\" label=\"\" [inputName]=\"'endDate'\" (change)=\"checkDates()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" ></date-field>\n                </div>\n                                      \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                \n                <label class=\"col-md-2 text-right\" for=\"copyBlank\"><localize key=\"dataimporter.importblankcells\"></localize></label>\n                <div class=\"col-md-8\">\n                   <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n<!--                     <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\"> -->\n<!--                         <localize key=\"io.back\"></localize> -->\n<!--                     </button> -->\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterListByOrg } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"master-list-manager\",\n    templateUrl: \"./master-list-manager.component.html\",\n    styleUrls: [\"./master-list-manager.css\"]\n})\nexport class MasterListManagerComponent implements OnInit {\n\n    message: string = null;\n    orgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.service.getMasterListsByOrg().then(response => {\n            this.orgs = response.orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(org: MasterListByOrg): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(org);\n        this.bsModalRef.content.isNew = true;\n        this.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n            const obj = {\n                label: list.displayLabel.localizedValue,\n                oid: list.oid,\n                createDate: list.createDate,\n                lastUpdateDate: list.lastUpdateDate,\n                isMaster: list.isMaster,\n                write: list.write,\n                read: list.read,\n                visibility: list.visibility\n            };\n\n            org.lists.push(obj);\n        });\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-view/\", code])\n    }\n\n    onEdit(pair: { label: string, oid: string, visibility: string }): void {\n        this.service.getMasterList(pair.oid).then(list => {\n            this.bsModalRef = this.modalService.show(PublishModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.edit = true;\n            this.bsModalRef.content.readonly = !list.write;\n            this.bsModalRef.content.master = list;\n            this.bsModalRef.content.isNew = false;\n\n            this.bsModalRef.content.onMasterListChange.subscribe(ret => {\n                pair.label = ret.displayLabel.localizedValue;\n                pair.visibility = ret.visibility;\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + list.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterList(list.oid).then(response => {\n                org.lists = org.lists.filter((value, index, arr) => {\n                    return value.oid !== list.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                    <span>\n                                      (\n                                      <localize *ngIf=\"list.visibility === 'PUBLIC'\" key=\"masterlist.public\"></localize>\n                                      <localize *ngIf=\"list.visibility === 'PRIVATE'\" key=\"masterlist.private\"></localize>\n                                      )\n                                    </span>                                    \n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\n\n@Component({\n    selector: \"export-format-modal\",\n    templateUrl: \"./export-format-modal.component.html\",\n    styleUrls: []\n})\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next(this.format);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"export-modal.title\"></localize>\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, ViewEncapsulation, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\n\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { GeoObjectOverTime } from \"@registry/model/registry\";\n\nimport { ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { LocalizationService, AuthService, EventService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\ndeclare var acp: string;\n\n@Component({\n\n    selector: \"request-table\",\n    templateUrl: \"./request-table.component.html\",\n    styleUrls: [\"./request-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class RequestTableComponent {\n\n    today: Date = new Date();\n    todayString: string = this.dateService.getDateString(new Date());\n\n    objectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    requests: ChangeRequest[] = [];\n\n    actions: AbstractAction[];\n\n    columns: any[] = [];\n\n    @Input() toggleId: string;\n\n    uploadRequest: ChangeRequest;\n\n    filterCriteria: string = \"ALL\";\n\n    hasBaseDropZoneOver: boolean = false;\n\n    waitingOnScroll: boolean = false;\n\n    // Restrict page to the specified oid\n    oid: string = null;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    isValid: boolean = true;\n\n    isEditing: boolean = false;\n\n    constructor(private service: ChangeRequestService, private geomService: GeometryService, private modalService: BsModalService, private authService: AuthService, private localizationService: LocalizationService,\n        private eventService: EventService, private route: ActivatedRoute, private router: Router, private dateService: DateService) {\n        this.columns = [\n            { name: localizationService.decode(\"change.request.user\"), prop: \"createdBy\", sortable: false },\n            { name: localizationService.decode(\"change.request.createDate\"), prop: \"createDate\", sortable: false, width: 195 },\n            { name: localizationService.decode(\"change.request.status\"), prop: \"approvalStatus\", sortable: false }\n        ];\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        if (this.oid != null) {\n            this.toggleId = this.oid;\n        }\n\n        let getUrl = acp + \"/changerequest/upload-file-cr\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"crOid\", this.uploadRequest.oid);\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: any, status: number, headers: any) => {\n            const doc = JSON.parse(response);\n\n            const index = this.requests.findIndex(request => request.oid === doc.requestId);\n\n            if (index !== -1) {\n                this.requests[index].documents.push(doc);\n            }\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n\n        if (this.toggleId != null) {\n            this.onSelect({ selected: [{ oid: this.toggleId }] });\n            this.waitingOnScroll = true;\n        }\n\n        this.refresh();\n    }\n\n    getGOTLabel(action: any): string {\n        if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.displayLabel && action.geoObjectJson.attributes.displayLabel.values &&\n            action.geoObjectJson.attributes.displayLabel.values[0] && action.geoObjectJson.attributes.displayLabel.values[0].value && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues &&\n            action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0] && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value) {\n            return action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value;\n        } else if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.code) {\n            return action.geoObjectJson.attributes.code;\n        } else {\n            return this.localizationService.decode(\"geoObject.label\");\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    onUpload(request: ChangeRequest): void {\n        this.uploadRequest = request;\n\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onDownloadFile(request: ChangeRequest, fileOid: string): void {\n        window.location.href = acp + \"/changerequest/download-file-cr?crOid=\" + request.oid + \"&\" + \"vfOid=\" + fileOid;\n    }\n\n    onDeleteFile(request: ChangeRequest, fileOid: string): void {\n        this.service.deleteFile(request.oid, fileOid).then(() => {\n            const index = request.documents.findIndex(doc => doc.oid === fileOid);\n\n            if (index !== -1) {\n                request.documents.splice(index, 1);\n            }\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    public fileOverBase(e: any): void {\n        this.hasBaseDropZoneOver = e;\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, pageNumber, this.filterCriteria, this.oid).then(requests => {\n            this.page = requests;\n            this.requests = requests.resultSet;\n\n            // Copying the Geo-Object to add consistency for template processing\n            this.requests.forEach((req) => {\n                if (!req.current.geoObject) {\n                    for (let i = 0; i < req.actions.length; i++) {\n                        if (req.actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                            // This is the state of the Geo-Object as the Registry Contributor configured it.\n                            req.current.geoObject = JSON.parse(JSON.stringify((req.actions[0] as CreateGeoObjectAction).geoObjectJson));\n                        }\n                    }\n                }\n            });\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    onSelect(selected: any): void {\n        // this.request = selected.selected;\n\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, 1, \"ALL\", this.oid).then(requests => {\n            this.requests = requests.resultSet;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.implementDecisions(changeRequest).then(request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n\n                const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true\n                });\n\n                bsModalRef.content.submitText = this.localizationService.decode(\"change.requests.more.geoobject.updates.submit.btn\");\n                bsModalRef.content.cancelText = this.localizationService.decode(\"change.requests.more.geoobject.updates.cancel.btn\");\n                bsModalRef.content.message = this.localizationService.decode(\"change.requests.more.geoobject.updates.message\");\n\n                bsModalRef.content.onConfirm.subscribe(() => {\n                    const object = this.getFirstGeoObjectInActions(request);\n\n                    if (object != null) {\n                        this.router.navigate([\"/registry/location-manager\", object.attributes.uid, object.geoObjectType.code, this.todayString, true]);\n                    } else {\n                        let object = request.current.geoObject;\n                        let type = request.current.geoObjectType;\n\n                        if (object != null && type != null) {\n                            this.router.navigate([\"/registry/location-manager\", object.attributes.uid, type.code, this.todayString, true]);\n                        }\n                    }\n                });\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    onReject(cr: ChangeRequest): void {\n        this.service.rejectChangeRequest(cr).then(() => {\n            // TODO: Determine if there is a way to update an individual record\n            // TODO : cr.statusLabel needs to be updated...\n            /*\n            cr.approvalStatus = \"REJECTED\";\n\n            let len = this.actions.length;\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n\n                action.approvalStatus = \"REJECTED\";\n            }\n            */\n\n            this.refresh();\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    getFirstGeoObjectInActions(request: ChangeRequest): GeoObjectOverTime {\n        for (let i = 0; i < request.actions.length; i++) {\n            let action = request.actions[i];\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (action.hasOwnProperty(\"geoObjectJson\")) {\n                return action[\"geoObjectJson\"];\n            }\n        }\n\n        return null;\n    }\n\n    onDelete(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            bsModalRef.content.type = \"danger\";\n            bsModalRef.content.submitText = this.localizationService.decode(\"change.request.delete.request.confirm.btn\");\n            bsModalRef.content.message = this.localizationService.decode(\"change.request.delete.request.message\");\n\n            bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.delete(changeRequest.oid).then(deletedRequestId => {\n                    let pos = -1;\n                    for (let i = 0; i < this.requests.length; i++) {\n                        let req = this.requests[i];\n                        if (req.oid === deletedRequestId) {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > -1) {\n                        this.requests.splice(pos, 1);\n                    }\n\n                    this.refresh();\n                }).catch((response: HttpErrorResponse) => {\n                    this.error(response);\n                });\n            });\n        }\n    }\n\n    onUpdate(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.update(changeRequest).then(request => {\n                this.refresh();\n\n                this.isEditing = false;\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    applyActionStatusProperties(action: any): void {\n        // var action = JSON.parse(JSON.stringify(this.action));\n        // action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        this.service.setActionStatus(action.oid, action.approvalStatus).then(response => {\n            action.decisionMaker = (action.approvalStatus !== \"PENDING\") ? this.authService.getUsername() : \"\";\n\n            // this.crtable.refresh()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    requestTrackBy(index: number, request: ChangeRequest) {\n        return request.oid;\n    }\n\n    toggle(event: any, oid: string): void {\n        if (!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")) {\n            if (this.toggleId === oid) {\n                this.toggleId = null;\n            } else {\n                this.toggleId = oid;\n                //                this.onSelect({ selected: [{ oid: oid }] });\n                this.requests.forEach(req => {\n                    if (req.oid === oid) {\n                        this.actions = req.actions;\n                    }\n                });\n            }\n        }\n    }\n\n    filter(criteria: string): void {\n        this.filterCriteria = criteria;\n\n        this.refresh(1);\n    }\n\n    setActionStatus(action: CreateGeoObjectAction | UpdateAttributeAction, status: string): void {\n        const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        bsModalRef.content.onConfirm.subscribe(data => {\n            action.approvalStatus = status;\n\n            this.applyActionStatusProperties(action);\n        });\n    }\n\n    getActiveDetailComponent(action: CreateGeoObjectAction | UpdateAttributeAction): any {\n        // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n        if (action.actionType.endsWith(\"CreateGeoObjectAction\") || action.actionType.endsWith(\"UpdateGeoObjectAction\")) {\n            // return this.cuDetail;\n        }\n        //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n        //   {\n        //     return this.arDetail;\n        //   }\n\n        return action;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    getUsername(): string {\n        return this.authService.getUsername();\n    }\n\n    isRequestTooOld(request: ChangeRequest): boolean {\n        if (request.actions && request.actions.length > 0) {\n            let firstAction = request.actions[0];\n\n            if (firstAction.actionType === ActionTypes.UPDATEGEOOBJECTACTION) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    onEditAttributes(): void {\n        this.isEditing = !this.isEditing;\n    }\n\n    canEdit(request: ChangeRequest) : boolean {\n        return (request.permissions.includes(\"WRITE_DETAILS\") && this.isEditing);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"form-group button-row\">\n\n      <a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" style=\"border-bottom: 1px solid;\" >\n        <localize key=\"change.request.all.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.pending.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.accepted.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PARTIAL')\" [ngClass]=\"filterCriteria === 'PARTIAL' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.partial.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.rejected.filter.link\"></localize>\n      </a>\n\n    </div>\n\n    <hr style=\"border-top:solid 3px #6BA542\" />\n\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <table class=\"table\">\n      <thead>\n        <tr style=\"height: 50px;color: grey;\">\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.id.label\"></localize> </th>\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n          <!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-template ngFor let-req [ngForOf]=\"requests | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" [ngForTrackBy]=\"requestTrackBy\">\n        \n          <tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n            <td class=\"col-md-3\">\n              <h5><strong>{{req.createdBy}}</strong></h5>\n            </td>\n            <td class=\"col-md-4\">\n              <h5><strong>{{req.oid}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n               <span class=\"date-string-display\">\n                  {{formatDate(req.createDate)}}\n               </span>\n            </td>\n            <td class=\"col-md-2\">\n              <h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-partial':req.approvalStatus === 'PARTIAL', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n                 <strong>{{req.statusLabel}}</strong>\n              </h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:right;padding-right:25px;\">\n              <i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n            </td>\n          </tr>\n          \n          <!-- Action panel only shows when activated with click -->\n          <tr [@fadeInOut] *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\" [ngClass]=\"{'status-pending-container':req.approvalStatus === 'PENDING', 'status-accepted-container':req.approvalStatus === 'ACCEPTED', 'status-partial-container':req.approvalStatus === 'PARTIAL', 'status-rejected-container':req.approvalStatus === 'REJECTED'}\">\n            \n            <td colspan=\"5\">\n              <div class=\"geoobject-panel-header\">\n              \n                    <div>\n                        <h3 style=\"margin-top: 10px;\">{{req.geoObject.label}}</h3>\n                        <h4 style=\"font-style: italic;\">{{req.geoObject.code}}</h4>\n                        \n                        <h4 *ngIf=\"req.type === 'UpdateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.update.geoobject.label\"></localize></h4>\n                        <h4 *ngIf=\"req.type === 'CreateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.create.geoobject.label\"></localize></h4>\n                    </div>\n              </div>\n                  \n              <div class=\"row\" style=\"margin:0;background: white;\">\n                <!-- <div class=\"col-md-1\"></div> -->\n                <div class=\"col-md-12\">\n                \n                  <div *ngIf=\"!isRequestTooOld(req) && req.approvalStatus === 'INVALID'\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.invalid\"></localize>\n                  </div>\n                  <div *ngIf=\"isRequestTooOld(req)\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.tooOld\"></localize>\n                  </div>\n                \n                  <div *ngIf=\"req.permissions.includes('READ_CONTRIBUTOR_NOTES')\" class=\"form-group\" style=\"margin-top:20px;\">\n                     <label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n                     <textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;\" [(ngModel)]=\"req.contributorNotes\" [disabled]=\"!req.permissions.includes('WRITE_DETAILS')\"></textarea>\n                  </div>  \n                  \n                  <div>\n                    <p><localize key=\"change.request.contributor.prefix.label\"></localize>&nbsp;<strong>{{req.createdBy}}</strong></p>\n                    <p><localize key=\"change.request.contributor.email.prefix.label\"></localize>&nbsp;<strong>{{req.email}}</strong></p>\n                    <p><localize key=\"change.request.contributor.phone.prefix.label\"></localize>&nbsp;<strong>{{req.phoneNumber}}</strong></p>\n                  </div>\n  \n                  <div *ngIf=\"req.approvalStatus !== 'INVALID' && !isRequestTooOld(req)\" class=\"cr-details\">\n\t                  <div class=\"action-card\" style=\"margin-bottom:10px; background-color:white;\"> \n\t                    <div class=\"row\" style=\"background: white;\">\n\t                      <div class=\"col-md-12\">\n\t                      \n\t                         <geoobject-shared-attribute-editor *ngIf=\"req\"\n\t                              #attributeEditor\n\t                              [readOnly]=\"!canEdit(req)\"  \n\t                              [geoObjectType]=\"req.current.geoObjectType\"\n                                [postGeoObject]=\"req.type == 'UpdateGeoObject' ? req.current.geoObject : req.actions[0].geoObjectJson\" \n\t                              [changeRequest]=\"req\"\n\t                              [hierarchies]=\"req.type == 'UpdateGeoObject' ? req.current.hierarchies : req.actions[0].parentJson\"\n\t                              [isGeometryInlined]=\"true\"\n                                [isNew]=\"req.type === 'CreateGeoObject'\"\n                                (valid)=\"setValid($event)\">\n\t                         </geoobject-shared-attribute-editor>\n\t                         \n\t                       </div>\n\t                    </div>\n\t  \n\t                    <div class=\"row\" style=\"border-top: 1px grey solid;margin:0;padding: 10px 0;\">\n\t                      <div class=\"col-md-6\" >\n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                          <label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t                          <textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;margin:0\" [(ngModel)]=\"req.maintainerNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\"></textarea>\n\t                        </div>  \n\t                        \n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                              <label for=\"additionalNotes-{{req.oid}}\"> <localize key=\"change.request.action.detail.additionalNotes\"></localize> </label>\n\t                              <input type=\"text\" id=\"additionalNotes-{{req.oid}}\" class=\"form-control\" style=\"width:100%;\" [(ngModel)]=\"req.additionalNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\">\n\t                        </div>  \n\t                      </div>\n\t                      \n\t                      <div class=\"col-md-6\" >\n\t                        <div>\n\t                          <label><localize key=\"change.request.reference.documents.label\"></localize></label>\n\t                          <div *ngIf=\"req.documents.length > 0\" style=\"border:1px solid #ccc;border-radius: 4px;\">\n\t                            <ul style=\"padding:10px;margin:0;\">\n\t                                <li *ngFor=\"let doc of req.documents\" class=\"list-group-item\" style=\"padding:0;font-size:inherit;\">\n\t                                  <a (click)=\"onDownloadFile(req, doc.oid)\" >{{doc.fileName}}</a>\n\t                                  <i (click)=\"onDeleteFile(req, doc.oid)\" class=\"fa fa-times ico-remove\" style=\"margin-left:10px;\" aria-hidden=\"true\"></i>\n\t                                </li>\n\t                            </ul>\n\t                          </div>\n\t                          <p *ngIf=\"req.documents.length === 0\" style=\"color:grey;font-style:italic;\">\n\t                            <localize key=\"change.request.no.documents.label\"></localize>\n\t                          </p>\n\t                        \n\t                          <div *ngIf=\"req.permissions.includes('WRITE_DOCUMENTS') && isEditing\" style=\"padding:10px 0;\">\n\t                              <!-- Limit file types with: accept=\".xls, .xlsx, .pdf, .doc\" -->\n\t                              <input class=\"ghost-input\" style=\"display:inline-block;padding:0;height:auto;border-radius:0;margin-top:10px;\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" required />\n\t                              \n\t                              <button class=\"btn btn-primary pull-right\" style=\"margin:0;\" (click)=\"onUpload(req)\" [title]=\"'change.request.upload.document.btn.hover' | localize\">\n\t                                <localize key=\"change.request.reference.document.upload\"></localize>\n\t                              </button>\n\t                          </div>\n\t                        </div>\n\t  \n\t                      </div>\n\t                    </div>\n\t                  </div> \n\t  \n\t  \n\t                  <div *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS') || req.permissions.includes('DELETE')\" class=\"button-holder\" style=\"margin-bottom:20px;min-height:40px;\">\n\t                    <span *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS')\">\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\" [title]=\"'change.request.implement.decisions.btn.hover' | localize\">\n\t                        <localize [key]=\"req.type === 'UpdateGeoObject' ? 'change.request.accept.changes.btn' : 'change.request.accept.newGeoObject.btn'\"></localize>\n\t                      </button>\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" *ngIf=\"req.type === 'CreateGeoObject'\" type=\"submit\" (click)=\"onReject(req)\" class=\"btn btn-danger\" style=\"margin:0 10px;\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\">\n                            <localize key=\"change.request.reject.all.btn\"></localize>\n                          </button>\n\t                    </span>\n\n                        <span *ngIf=\"isValid && req.permissions.includes('WRITE_DETAILS') && req.createdBy === getUsername()\">\n                          <button type=\"submit\" *ngIf=\"!isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                          </button>\n                          <button type=\"submit\" *ngIf=\"isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                          </button>\n                          <button type=\"submit\" role=\"button\" class=\"btn btn-primary\" *ngIf=\"isEditing\" (click)=\"onUpdate(req)\" [title]=\"'modal.button.update' | localize\" >\n                            <localize key=\"modal.button.update\"></localize>\n                          </button>\n                          \n                          <button type=\"submit\" role=\"button\" class=\"btn btn-danger pull-right\" [disabled]=\"!isEditing\" *ngIf=\"req.permissions.includes('DELETE') && req.createdBy === getUsername()\" (click)=\"onDelete(req)\" [title]=\"'change.request.delete.request.hover' | localize\" >\n                            <localize key=\"change.request.delete.request.btn\"></localize>\n                          </button>\n                        </span>\n\t                  </div>\n                  </div>\n                </div>\n                <!-- <div class=\"col-md-1\"></div> -->\n              </div>\n  \n            </td>\n          </tr> <!-- END Action panel -->\n          \n        </ng-template>\n      </tbody>\n    </table>\n    <div class=\"solid-table-footer\">\n\t    <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n        <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n\t    </div>\n    </div>\n  </div>   \n</div>\n","import { ValueOverTime, AttributeType, TimeRangeEntry } from \"@registry/model/registry\";\nimport { CreateGeoObjectAction, UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GeometryService } from \"@registry/service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { Subject } from \"rxjs\";\nimport { ConflictType } from \"@registry/model/constants\";\n\nexport class ValueOverTimeCREditor implements TimeRangeEntry {\n\n    diff?: ValueOverTimeDiff; // Any existing diff which may be associated with this object.\n    valueOverTime?: ValueOverTime; // Represents a vot on an existing GeoObject. If this is set and the action is UpdateAttribute, we must be doing an UPDATE, and valueOverTime represents the original value in the DB.\n    action: AbstractAction;\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n    attr: AttributeType;\n    conflictMessage: any;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    _isValid: boolean = true;\n\n    constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction) {\n        this.attr = attr;\n        this.changeRequestAttributeEditor = changeRequestAttributeEditor;\n        this.action = action;\n    }\n\n    getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n        return this.valueOverTime;\n    }\n\n    getValueFromGeoObjectForDiff(): any {\n        return this.valueOverTime.value;\n    }\n\n    validate(): boolean {\n        let dateService = this.changeRequestAttributeEditor.changeRequestEditor.dateService;\n        let start = dateService.validateDate(this.startDate == null ? null : dateService.getDateFromDateString(this.startDate), true, true);\n        let end = dateService.validateDate(this.endDate == null ? null : dateService.getDateFromDateString(this.endDate), true, true);\n        this._isValid = true;\n\n        if (!start.valid || !end.valid) {\n            this._isValid = false;\n        }\n\n        this.validateUpdateReference();\n\n        return this._isValid;\n    }\n\n    /**\n     * If we're referencing an existing value over time, that object should exist on our GeoObject (which represents the current state of the database)\n     */\n    validateUpdateReference() {\n        if (!this.conflictMessage) {\n            this.conflictMessage = [];\n        }\n\n        for (let i = this.conflictMessage.length - 1; i >= 0; --i) {\n            if (this.conflictMessage[i].type === ConflictType.MISSING_REFERENCE) {\n                this.conflictMessage.splice(i, 1);\n            }\n        }\n\n        if (this.changeRequestAttributeEditor.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\" && this.diff != null && this.diff.action !== \"CREATE\") {\n            let existingVot = this.findExistingValueOverTimeByOid(this.diff.oid, this.attr.code);\n\n            if (existingVot == null) {\n                this._isValid = false;\n\n                this.conflictMessage.push({\n                    severity: \"ERROR\",\n                    message: this.changeRequestAttributeEditor.changeRequestEditor.localizationService.decode(\"changeovertime.manageVersions.missingReference\"),\n                    type: ConflictType.MISSING_REFERENCE\n                });\n            }\n        }\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    set oid(oid: string) {\n        if (this.diff != null) {\n            this.diff.oid = oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            this.getGeoObjectTimeRangeStorage().oid = oid;\n        }\n    }\n\n    get oid(): string {\n        if (this.diff != null) {\n            return this.diff.oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().oid;\n        }\n\n        return null;\n    }\n\n    get startDate(): string {\n        if (this.diff != null && this.diff.newStartDate !== undefined) {\n            return this.diff.newStartDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldStartDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().startDate;\n        }\n\n        return null;\n    }\n\n    constructNewDiff(action: string): void {\n        this.diff = new ValueOverTimeDiff();\n        this.diff.action = action;\n        (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n\n        if (action === \"CREATE\") {\n            this.diff.oid = uuid();\n        } else {\n            let goRange = this.getGeoObjectTimeRangeStorage();\n\n            this.diff.oid = goRange.oid;\n            this.diff.oldStartDate = goRange.startDate;\n            this.diff.oldEndDate = goRange.endDate;\n        }\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        if (this.diff != null) {\n            this.diff.oldStartDate = oldStartDate;\n        }\n    }\n\n    get oldStartDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldStartDate;\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        if (this.diff != null && this.diff.newEndDate !== undefined) {\n            return this.diff.newEndDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldEndDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().endDate;\n        }\n\n        return null;\n    }\n\n    set startDate(startDate: string) {\n        if (this.diff != null && this.diff.action === \"DELETE\") {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.startDate === startDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (startDate === this.diff.oldStartDate) {\n                delete this.diff.newStartDate;\n            } else {\n                this.diff.newStartDate = startDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.startDate = startDate;\n        }\n\n        this.changeRequestAttributeEditor.onChange();\n        this.onChangeSubject.next(\"startDate\");\n    }\n\n    set endDate(endDate: string) {\n        if (this.diff != null && this.diff.action === \"DELETE\") {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (goRange == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.endDate === endDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (endDate === this.diff.oldEndDate) {\n                delete this.diff.newEndDate;\n            } else {\n                this.diff.newEndDate = endDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.endDate = endDate;\n        }\n\n        this.changeRequestAttributeEditor.onChange();\n        this.onChangeSubject.next(\"endDate\");\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        if (this.diff != null) {\n            this.diff.oldEndDate = oldEndDate;\n        }\n    }\n\n    get oldEndDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldEndDate;\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        if (this.diff != null && this.diff.newValue !== undefined) {\n            return this.diff.newValue;\n        } else if (this.diff != null && this.diff.oldValue !== undefined) {\n            return this.diff.oldValue;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().value;\n        }\n\n        return null;\n    }\n\n    set value(value: any) {\n        if (this.diff != null && this.diff.action === \"DELETE\") {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        if (value != null) {\n            if (this.attr.type === \"term\") {\n                value = [value];\n            } else if (this.attr.type === \"date\") {\n                value = new Date(value).getTime();\n            }\n        } else if (value == null) {\n            if (this.attr.type === \"geometry\") {\n                value = GeometryService.createEmptyGeometryValue(this.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType);\n            } else if (this.attr.type === \"character\") {\n                value = \"\";\n            }\n        }\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.oid = uuid();\n                    this.diff.action = \"CREATE\";\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                } else {\n                    if (this.areValuesEqual(this.valueOverTime.value, value)) {\n                        return;\n                    }\n\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.action = \"UPDATE\";\n                    this.diff.oid = this.getGeoObjectTimeRangeStorage().oid;\n                    this.diff.oldValue = this.valueOverTime.value;\n                    this.diff.oldStartDate = this.getGeoObjectTimeRangeStorage().startDate;\n                    this.diff.oldEndDate = this.getGeoObjectTimeRangeStorage().endDate;\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                }\n            }\n\n            if (this.diff.action !== \"CREATE\" && this.areValuesEqual(this.diff.oldValue, value)) {\n                delete this.diff.newValue;\n            } else {\n                this.diff.newValue = JSON.parse(JSON.stringify(value));\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            this.valueOverTime.value = value;\n        }\n\n        this.changeRequestAttributeEditor.onChange();\n        this.onChangeSubject.next(\"value\");\n    }\n\n    set oldValue(oldValue: any) {\n        if (this.diff != null) {\n            this.diff.oldValue = oldValue;\n        }\n    }\n\n    get oldValue(): any {\n        if (this.diff != null) {\n            return this.diff.oldValue;\n        }\n\n        return null;\n    }\n\n    public setLocalizedValue(localizedValue: LocalizedValue) {\n        this.value = JSON.parse(JSON.stringify(localizedValue));\n    }\n\n    removeEmptyDiff(): void {\n        if (this.diff != null && this.diff.newValue === undefined && this.diff.newStartDate === undefined && this.diff.newEndDate === undefined) {\n            const diffs = (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime;\n\n            const index = diffs.findIndex(d => d.oid === this.diff.oid);\n\n            if (index !== -1) {\n                diffs.splice(index, 1);\n            }\n\n            this.diff = null;\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attr.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (this.attr.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (this.attr.type === \"geometry\") {\n            return turf_booleanequal(val1, val2);\n        } else if (this.attr.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (this.attr.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return val1 === val2;\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public remove(): void {\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff != null && this.diff.action === \"CREATE\") {\n                // Its a new entry, just remove the diff from the diff array\n                let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n                const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n                if (index > -1) {\n                    updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n                }\n            } else if (this.diff != null) {\n                delete this.diff.newValue;\n                delete this.diff.newStartDate;\n                delete this.diff.newEndDate;\n                this.removeEmptyDiff();\n                this.changeRequestAttributeEditor.onChange();\n                this.onChangeSubject.next(\"remove\");\n                return;\n            } else if (this.valueOverTime != null && this.diff == null) {\n                this.diff = new ValueOverTimeDiff();\n                this.diff.action = \"DELETE\";\n                this.diff.oid = this.valueOverTime.oid;\n                this.diff.oldValue = this.valueOverTime.value;\n                this.diff.oldStartDate = this.valueOverTime.startDate;\n                this.diff.oldEndDate = this.valueOverTime.endDate;\n                (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n            }\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            let votc = (this.action as CreateGeoObjectAction).geoObjectJson.attributes[this.attr.code].values;\n\n            let index = votc.findIndex((vot) => { return vot.oid === this.valueOverTime.oid; });\n\n            if (index !== -1) {\n                votc.splice(index, 1);\n            }\n        }\n\n        this.changeRequestAttributeEditor.onChange();\n        this.onChangeSubject.next(\"remove\");\n    }\n\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GovernanceStatus, LayerColor } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { VersionDiffView, Layer } from \"./manage-versions-model\";\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { Observable } from \"rxjs\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\n\n@Component({\n    selector: \"manage-versions\",\n    templateUrl: \"./manage-versions.component.html\",\n    styleUrls: [\"./manage-versions.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class ManageVersionsComponent implements OnInit {\n\n    // height (as number) in pixels\n    mapRowHeight: number;\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    message: string = null;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() isGeometryInlined: boolean = false;\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() hierarchy: HierarchyOverTime = null;\n\n    viewModels: VersionDiffView[] = [];\n\n    isRootOfHierarchy: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public geomService: GeometryService, public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, this.hierarchy) as ChangeRequestChangeOverTimeAttributeEditor;\n        this.calculateViewModels();\n        this.isRootOfHierarchy = this.attributeType.type === \"_PARENT_\" && (this.hierarchy == null || this.hierarchy.types == null || this.hierarchy.types.length === 0);\n    }\n\n    ngAfterViewInit() {\n        if (this.isNew && this.attributeType.code === \"exists\" && this.viewModels.length === 0) {\n            this.onAddNewVersion();\n        }\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasLocalizationChanged(viewModel: VersionDiffView, locale: string): boolean {\n        return viewModel.editor.oldValue != null && this.getValueAtLocale(viewModel.editor.oldValue, locale) !== this.getValueAtLocale(viewModel.editor.value, locale);\n    }\n\n    onDateChange(): any {\n        setTimeout(() => {\n            this.isValid = this.changeRequestAttributeEditor.validate() && this.checkDateFieldValidity();\n\n            this.isValidChange.emit(this.isValid);\n        }, 0);\n    }\n\n    remove(view: VersionDiffView): void {\n        if (this.geomService.isEditing()) {\n            this.geomService.stopEditing();\n        }\n\n        this.changeRequestAttributeEditor.remove(view.editor);\n\n        if (view.summaryKey === SummaryKey.NEW || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            const index = this.viewModels.findIndex(v => v.editor.oid === view.editor.oid);\n\n            if (index > -1) {\n                this.viewModels.splice(index, 1);\n            }\n        }\n\n        if (this.attributeType.type === \"geometry\") {\n            this.geomService.reload();\n        }\n    }\n\n    onAddNewVersion(): void {\n        let editor = this.changeRequestAttributeEditor.createNewVersion();\n\n        if (this.isNew && this.changeRequestEditor.geoObject.attributes[\"exists\"]) {\n            let values = this.changeRequestEditor.geoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                editor.startDate = value.startDate;\n                editor.endDate = value.endDate;\n            }\n        }\n\n        this.viewModels.push(new VersionDiffView(this, editor));\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return lv == null ? null : new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    calculateViewModels(): void {\n        let viewModels: VersionDiffView[] = [];\n\n        let includeUnmodified = false;\n\n        if (this.changeRequestEditor.changeRequest == null || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\" ||\n          (this.changeRequestEditor.changeRequest.approvalStatus !== \"ACCEPTED\" && this.changeRequestEditor.changeRequest.approvalStatus !== \"PARTIAL\" && this.changeRequestEditor.changeRequest.approvalStatus !== \"REJECTED\")) {\n            includeUnmodified = true;\n        }\n\n        let editors = this.changeRequestAttributeEditor.getEditors(includeUnmodified);\n        editors.forEach((editor: ValueOverTimeCREditor) => {\n            let view = new VersionDiffView(this, editor);\n            viewModels.push(view);\n        });\n\n        this.viewModels = viewModels;\n    }\n\n    onApprove(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.PENDING).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    /**\n     * Hierarchy Editing\n     */\n\n    getTypeAheadObservable(editor: HierarchyCREditor, date: string, type: any, entry: any, index: number): Observable<any> {\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let parentTypeCode = null;\n        let hierarchyCode = null;\n\n        if (index > 0) {\n            let pType = editor.changeRequestAttributeEditor.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n                parentTypeCode = parent.geoObject.properties.type;\n            }\n        }\n\n        return Observable.create((observer: any) => {\n            if (parentCode == null) {\n                let loopI = index;\n\n                while (parentCode == null && loopI > 0) {\n                    loopI = loopI - 1;\n\n                    let parent = entry.parents[editor.changeRequestAttributeEditor.hierarchy.types[loopI].code];\n\n                    if (parent != null) {\n                        if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                            parentCode = parent.geoObject.properties.code;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        } else if (parent.goCode != null) {\n                            parentCode = parent.goCode;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        }\n                    }\n                }\n            }\n\n            this.service.getGeoObjectSuggestions(entry.parents[type.code].text, geoObjectTypeCode, parentCode, parentTypeCode, hierarchyCode, date).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(editor: HierarchyCREditor, e: TypeaheadMatch, type: any, entry: any, date: string): void {\n      //        let ptn: ParentTreeNode = parent.ptn;\n\n        entry.parents[type.code].text = e.item.name + \" : \" + e.item.code;\n        entry.parents[type.code].goCode = e.item.code;\n\n        let parentTypes = [];\n\n        for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n            let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n\n            parentTypes.push(current.code);\n\n            if (current.code === type.code) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects(e.item.uid, type.code, parentTypes, true, date).then(ancestors => {\n            // First filter the response for ancestors of only the correct hierarchy\n            ancestors.parents = ancestors.parents.filter(p => p.hierarchyType === editor.changeRequestAttributeEditor.hierarchy.code);\n\n            delete entry.parents[type.code].goCode;\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestors.geoObject.properties.code;\n\n            for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n                let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while (ancestor != null && ancestor.geoObject.properties.type !== current.code) {\n                    if (ancestor.parents.length > 0) {\n                        ancestor = ancestor.parents[0];\n                    } else {\n                        ancestor = null;\n                    }\n                }\n\n                if (ancestor != null) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestor.geoObject.properties.code;\n                }\n            }\n\n            editor.setParentValue(type, entry.parents);\n        });\n    }\n\n    /**\n     * GEOMETRY EDITING\n     */\n\n    toggleGeometryEditing(view: VersionDiffView) {\n        this.geomService.setEditing(!view.newLayer.isEditing, view.newLayer);\n\n        if (this.geoObjectType.geometryType === \"POINT\" || this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            view.coordinate = {};\n        }\n    }\n\n    toggleGeometryView(view: VersionDiffView) {\n        // Using setTimeout() to pull the calc out of the animation stack so the dom can finish mutating before getting final height.\n        setTimeout(() => {\n            this.mapRowHeight = this.elementRef.nativeElement.children[0].getElementsByClassName(\"attribute-element-wrapper\")[0].offsetHeight;\n        }, 0);\n\n        let layer: Layer = this.getOrCreateLayer(view, \"NEW\");\n\n        if (layer.isEditing) {\n            this.geomService.stopEditing();\n        }\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    toggleOldGeometryView(view: VersionDiffView) {\n        let layer: Layer = this.getOrCreateLayer(view, \"OLD\");\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    getOrCreateLayer(view: VersionDiffView, context: string): Layer {\n        if (context === \"NEW\") {\n            if (view.newLayer != null) {\n                return view.newLayer;\n            }\n\n            view.newLayer = new Layer();\n            view.newLayer.oid = \"NEW_\" + view.editor.oid;\n            view.newLayer.isEditing = false;\n            view.newLayer.isRendering = false;\n            view.newLayer.zindex = 1;\n            view.newLayer.color = LayerColor.NEW;\n            view.newLayer.geojson = view.editor.value;\n            view.newLayer.editPropagator = view.editor;\n\n            return view.newLayer;\n        } else {\n            if (view.oldLayer != null) {\n                return view.oldLayer;\n            }\n\n            view.oldLayer = new Layer();\n            view.oldLayer.oid = \"OLD_\" + view.editor.oid;\n            view.oldLayer.isEditing = false;\n            view.oldLayer.isRendering = false;\n            view.oldLayer.zindex = 0;\n            view.oldLayer.color = LayerColor.OLD;\n            view.oldLayer.geojson = view.editor.oldValue;\n            view.oldLayer.editPropagator = null;\n\n            return view.oldLayer;\n        }\n    }\n\n    manualCoordinateChange(view: VersionDiffView): void {\n        if (view.newCoordinateX || view.newCoordinateY) {\n            let newX = view.newCoordinateX;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newX = view.value.coordinates[0];\n            }\n            let newY = view.newCoordinateY;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newY = view.value.coordinates[1];\n            }\n            view.value.coordinates = [[newX || 0, newY || 0]];\n            delete view.newCoordinateX;\n            delete view.newCoordinateY;\n            return;\n        }\n\n        const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n        const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n        view.coordinate.latValid = isLatitude(view.value.coordinates[0][1]);\n        view.coordinate.longValid = isLongitude(view.value.coordinates[0][0]);\n\n        if (!view.coordinate.latValid || !view.coordinate.longValid) {\n            // outside EPSG bounds\n            this.isValid = false;\n            this.isValidChange.emit(this.isValid);\n            return;\n        }\n\n        this.geomService.setPointCoordinates(view.value.coordinates[0][1], view.value.coordinates[0][0]);\n    }\n\n}\n","<div>\n  <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n  </ng-template>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form name=\"manage-versions-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div [ngStyle]=\"{'width' : (isGeometryInlined && geomService.getRenderedLayers().length > 0) ? '45%' : '100%'}\" style=\"display:inline-block;\" class=\"col\">\n          <div *ngIf=\"changeRequestEditor.geoObject\" class=\"attribute-version-wrapper\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                <div *ngIf=\"attributeType\">\n                  <table class=\"table table-striped\">\n                    <tbody class=\"attribute-element-wrapper\" >\n                      <p class=\"message\" *ngIf=\"!isRootOfHierarchy && viewModels.length === 0\">\n                        <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize> \n                      </p>\n                      <div *ngIf=\"isRootOfHierarchy\">\n                        <localize key=\"changeovertime.manageVersions.rootOfHierarchy.message\"></localize>\n                      </div>\n                      \n                      <ng-container *ngIf=\"!isRootOfHierarchy\">\n\t                      <tr @fadeInOut *ngFor=\"let viewModel of viewModels; let i = index;\" class=\"version-row\"\n\t                          [ngClass]=\"{'error-border': viewModel.editor.conflictMessage && viewModel.editor.conflictMessage.length > 0 && viewModel.editor.conflictMessage[0].severity === 'ERROR',\n\t                          'warning-border': viewModel.editor.conflictMessage && viewModel.editor.conflictMessage.length > 0 && viewModel.editor.conflictMessage[0].severity === 'WARNING',\n\t                          'geometry-edit-active' : (viewModel.newLayer && viewModel.newLayer.isEditing) }\">\n                            <td class=\"version-column-wrapper\" [ngClass]=\"{'warning' : viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'}\" >\n\t                          <div *ngIf=\"viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'\" class=\"version-column-indicator\">\n                                {{viewModel.summaryKeyLocalized}}\n                              </div>\n\t                          \n\t                          <table>\n\t                          \n\t                            <!-- \n\t                              Local Type \n\t                            -->\n\t                            <ng-container *ngIf=\"attributeType.type === 'local' && viewModel.value\">\n\t\t                           <tr *ngFor=\"let loc of viewModel.value.localeValues; let idx = index;\" class=\"attribute-value-row\">\n\t\t                             <td colspan=\"2\">\n\t\t                               <h5><convert-key-label [key]=\"loc.locale\"></convert-key-label></h5>\n\t\t                               \n\t\t                               <input [ngClass]=\"{'has-changed': (hasLocalizationChanged(viewModel, loc.locale) && !isNew)}\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"viewModel.editor.setLocalizedValue(viewModel.value)\" [required]=\"loc.locale === 'defaultLocale'\">\n\t\t                               \n\t\t                               <div class=\"form-input-validation-error-message-wrapper\">\n\t\t                                 <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">\n\t\t                                   <localize key=\"manage.versions.value.required.message\"></localize>\n\t\t                                 </p>\n\t\t                               </div>\n\t\t                               \n\t\t                               <div *ngIf=\"hasLocalizationChanged(viewModel, loc.locale) && !isNew\">\n\t\t                                 <p class=\"warning-text display-current-value\" style=\"padding: 5px 0;margin-bottom:0;\">\n\t\t                                   <localize key=\"change.request.changed.value.prefix\"></localize>\n\t\t                                   {{ getValueAtLocale(viewModel.oldValue, loc.locale) }}\n\t\t                                 </p>\n\t\t                               </div>\n\t\t                             </td>\n\t\t                           </tr>\n\t                            </ng-container>\n\t                            <tr *ngIf=\"attributeType.type === 'geometry' || attributeType.type === '_PARENT_' || attributeType.type === 'term' || attributeType.type === 'character' || attributeType.type === 'date' || attributeType.type === 'integer' || attributeType.type === 'float' || attributeType.type === 'boolean'\" class=\"attribute-value-row\">\n\t                             <td colspan=\"2\">\n                               \n\t                               <div *ngIf=\"attributeType.type === 'term'\">\n\t                                 <select [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" id=\"mod-{{attributeType.code}}\" [name]=\"'mod-term-' + i + '-' + attributeType.code\" class=\"select-area\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n\t                                     <option value=\"\"></option>\n\t                                     <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\" [value]=\"option.code\">{{option.label.localizedValue}}</option>\n\t                                 </select>\n\t                               </div>\n\t                               <div *ngIf=\"attributeType.type === 'character'\">\n\t                                 <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === 'date'\">\n\t                                 <date-field [customStyles]=\"(viewModel.oldValue && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.value\" label=\"\" [inputName]=\"'date-val-' + i\" [allowInfinity]=\"false\" [allowFutureDates]=\"true\" \n\t                                     [required]=\"true\" [placement]=\"'right'\" [(valid)]=\"isValid\" [disable]=\"readonly\" ></date-field>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === 'integer' || attributeType.type === 'float'\">\n\t                                 <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"number\" class=\"form-control\" [name]=\"'int-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === 'boolean'\">\n\t                                   <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t                                     <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === true\" [value]=\"true\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                     <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t                                   </label> \n\t                                   <label class=\"radio radio-inline\"> \n\t                                     <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === false\" [value]=\"false\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                     <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t                                   </label>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === '_PARENT_'\">\n                                   <ng-container *ngIf=\"hierarchy != null && hierarchy.types != null && hierarchy.types.length > 0\">\n\t\t                                 <div style=\"float:left;width:100%;\" *ngFor=\"let type of hierarchy.types; let j = index\"> \n\t\t\t                                 {{type.label}}\n\t\t\t                                 <div class=\"input-group\">\n\t\t\t                                    <input style=\"width:100%;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t\t\t                                      [name]=\"type.code + '-' + i\"\n\t\t\t                                      [disabled]=\"readonly || viewModel.summaryKey === 'DELETE' || viewModel.startDate == null || viewModel.startDate === ''\"\n\t\t\t                                      [(ngModel)]=\"viewModel.value.parents[type.code].text\" \n\t\t\t                                      [typeaheadAsync]=\"true\"\n\t\t\t                                      [typeahead]=\"getTypeAheadObservable(viewModel.editor, viewModel.startDate, type, viewModel.value, j)\"\n\t\t\t                                      (typeaheadOnSelect)=\"typeaheadOnSelect(viewModel.editor, $event, type, viewModel.value, viewModel.startDate)\" \n\t\t\t                                      (typeaheadLoading)=\"viewModel.value.loading[type.code] = $event\"\n\t\t\t                                      [ngClass]=\"{'inline-loading':viewModel.value.loading[type.code], 'has-changed': (viewModel.oldValue && !isNew)}\"                                                                \n\t\t\t                                      [typeaheadOptionsLimit]=\"7\"\n\t\t\t                                      [typeaheadItemTemplate]=\"customItemTemplate\" \n\t\t\t                                      [typeaheadMinLength]=\"0\"\n\t\t\t                                      [typeaheadWaitMs]=\"300\">\n\t\t\t                                    \n\t\t\t                                      <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\" (click)=\"viewModel.editor.removeType(type)\"> \n\t\t\t                                        <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n\t\t\t                                      </span>\n                                                  \n                                            <!-- Hack: This is needed for formatting  -->\n\t\t\t                                      <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\"> \n\t\t\t                                      </span>\n\t\t\t                                  </div>\n\t\t\t                               </div>\n                                   </ng-container>\n\t                               </div> \n                                 <div *ngIf=\"viewModel.oldValue && !isNew && attributeType.type !== 'geometry'\">\n                                  <p class=\"warning-text display-current-value\">\n                                    <localize key=\"change.request.changed.value.prefix\"></localize>\n                                    {{ viewModel.oldValue }}\n                                  </p>\n                                </div>\n                                 \n                                 <table *ngIf=\"attributeType.type === 'geometry'\" style=\"padding:0;\">\n                                 <!-- \n                                    Geometry \n                                 -->\n<!--                                   <div *ngIf=\"attributeType.type === 'geometry'\"> -->\n  \n<!--                                     <td style=\"vertical-align: middle;padding-left:0;\"> -->\n                                      <tr>\n                                        <td colspan=\"2\" style=\"padding-left:0;\">\n                                        \n                                          <button *ngIf=\"viewModel.oldValue && viewModel.newLayer\" class=\"btn btn-primary\" (click)=\"toggleOldGeometryView(viewModel)\" role=\"button\" [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                           <localize *ngIf=\"!viewModel.oldLayer || !viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.viewOld\"></localize>\n                                           <localize *ngIf=\"viewModel.oldLayer && viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hideOld\"></localize>\n                                          </button>\n                                          <button class=\"btn btn-primary\" style=\"margin-left:0;\" (click)=\"toggleGeometryView(viewModel)\" role=\"button\"\n                                            [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"!viewModel.newLayer || !viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.view\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hide\"></localize>\n                                          </button>\n                                          <button *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering\" class=\"btn btn-primary\" (click)=\"toggleGeometryEditing(viewModel)\" role=\"button\"\n                                            [disabled]=\"readonly || viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"viewModel.newLayer && !viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.save\"></localize>\n                                          </button>\n                                        </td>\n                                      </tr>\n  \n                                      <tr *ngIf=\"(viewModel.newLayer && viewModel.newLayer.isRendering) && (geoObjectType.geometryType === 'POINT' || geoObjectType.geometryType === 'MULTIPOINT') && viewModel.value && viewModel.value.coordinates && (viewModel.value.coordinates.length == 1 || viewModel.value.coordinates.length == 0)\">\n                                        \n                                        <td style=\"width:50%;padding-left:0;padding-right:5px;\" >\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.latitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][1]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateY\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLatitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n                                        <td style=\"width:50%;\">\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.longitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][0]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateX\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLongitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n  \n                                      </tr>\n<!--                                     </td> -->\n<!--                                   </div> -->\n                                  </table>\n                              </td>\n\n\t                            </tr>\n\t                            <tr class=\"attribute-date-input-row\">\n\t                              <td>\n\t                                <h5>\n\t                                  <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n\t                                </h5>\n\t                            \n\t                                <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldStartDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE'\" ></date-field>\n\t                                \n\t                                <div *ngIf=\"viewModel.oldStartDate && !isNew\">\n\t                                  <p class=\"warning-text display-current-value\">\n\t                                    <localize key=\"change.request.changed.value.prefix\"></localize>\n\t                                    {{ viewModel.oldStartDate }}\n\t                                  </p>\n\t                                </div>\n\t                              </td>\n\t                              <td>\n\t                                <div class=\"version-edit-date-container\">\n\t                                  <h5>\n\t                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n\t                                  </h5>\n\t                                  <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldEndDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"viewModel.summaryKey !== 'DELETE' && !readonly\" [allowFutureDates]=\"true\" \n\t                                      [required]=\"true\" [placement]=\"'bottom'\" [oldDate]=\"(viewModel.oldEndDate && !isNew) ? viewModel.oldEndDate : null\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE'\" ></date-field>\n\t                    \n\t                                  <!--\n\t                                  <div *ngIf=\"viewModel.oldEndDate && !isNew\">\n\t                                    <p class=\"warning-text\">\n\t                                      <localize key=\"change.request.changed.value.prefix\"></localize>\n\t                                      {{ viewModel.oldEndDate }}\n\t                                    </p>\n\t                                  </div>\n\t                                  -->\n\t                                </div>\n\t                              </td>\n\t                            </tr>\n\t                            <tr *ngIf=\"viewModel.editor.conflictMessage && viewModel.editor.conflictMessage.length > 0\">\n\t                              <p *ngFor=\"let msg of viewModel.editor.conflictMessage\" [ngClass]=\"{'error-message': msg.severity === 'ERROR', 'warning-message': msg.severity === 'WARNING'}\" >\n\t                                {{msg.message}}\n\t                              </p>\n\t                            </tr>\n\t                          </table>\n\t                          \n\t                        </td>\n\t                        \n\t                        <td *ngIf=\"!readonly && (!this.isNew || attributeType.code !== 'exists')\" (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" [title]=\"(viewModel.summaryKey === 'UNMODIFIED' ? 'changeovertime.manageVersions.remove.version' : 'changeovertime.manageVersions.revert.version') | localize\">\n\t                          <i class=\"fa\" [class]=\"{'fa-times' : viewModel.summaryKey === 'UNMODIFIED', 'fa-undo' : viewModel.summaryKey !== 'UNMODIFIED'}\" ></i>\n\t                        </td>\n\t                      </tr>\n\t                    </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </li>\n              \n              <li *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists')\" class=\"list-group-item\" style=\"text-align: left;\">\n                <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"> \n                  <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                </i>\n              </li>\n              \n            </ul>\n            \n            <!-- TODO : This code copy/pasted into standard-attribute-editor.component.html -->\n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.approvalStatus === 'PENDING' && changeRequestEditor.changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.hasChanges()\" style=\"margin-left: 15px;\">\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n                <localize key=\"change.request.accept.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n                <localize key=\"change.request.reject.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n                <localize key=\"change.request.pending.btn\"></localize>\n              </button>\n            </div>              \n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.approvalStatus !== 'PENDING'\" style=\"margin-left:15px;\">\n              <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n                  <localize key=\"change.request.status.accepted\"></localize>\n              </strong>\n              <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n                  <localize key=\"change.request.status.rejected\"></localize>\n              </strong>\n            </div>\n            \n          </div>\n        </div>\n\t      <geoobject-editor-map style=\"width:55%;display:inline-block;vertical-align:top;margin-top:15px;\" *ngIf=\"isGeometryInlined && geomService.getRenderedLayers().length > 0\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" \n\t        [mapHeight]=\"mapRowHeight\" [readOnly]=\"!geoObjectType.isGeometryEditable && readonly\"\n\t        [bboxCode]=\"this.changeRequestEditor.geoObject.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"geomService.getRenderedLayers()[0].startDate\">\n\t      </geoobject-editor-map>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\n\n@Component({\n    selector: \"standard-attribute-editor\",\n    templateUrl: \"./standard-attribute-editor.component.html\",\n    styleUrls: [\"./standard-attribute-editor.component.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class StandardAttributeEditorComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    message: string = null;\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObject: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    view: {\n        summaryKey: SummaryKey;\n        summaryKeyLocalized: string;\n        oldValue?: any;\n        value: any;\n    };\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: StandardAttributeCRModel;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, null) as StandardAttributeCRModel;\n        this.calculateView();\n    }\n\n    ngAfterViewInit() {\n    }\n\n    calculateView(): void {\n        let diff = this.changeRequestAttributeEditor.diff;\n\n        if (diff != null) {\n            let newVal = diff.newValue == null ? null : JSON.parse(JSON.stringify(diff.newValue));\n            this.view = {\n                value: newVal,\n                summaryKey: SummaryKey.VALUE_CHANGE,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.VALUE_CHANGE)\n            };\n\n            if (diff.oldValue !== null && diff.oldValue !== undefined) {\n                this.view.oldValue = JSON.parse(JSON.stringify(diff.oldValue));\n            }\n        } else {\n            this.view = {\n                value: this.changeRequestAttributeEditor.value,\n                summaryKey: SummaryKey.UNMODIFIED,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.UNMODIFIED)\n            };\n        }\n    }\n\n    onValueChange(): void {\n        this.calculateView();\n    }\n\n    onApprove(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.PENDING).then(results => {\n            editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div @fadeInOut class=\"value-box\">\n\t  <div *ngIf=\"view\" class=\"value-box-wrapper\" [ngClass]=\"{'warning' : view.summaryKey && view.summaryKey !== 'UNMODIFIED'}\" >\n\t\t  <div *ngIf=\"view.summaryKey && view.summaryKey !== 'UNMODIFIED'\" class=\"value-box-indicator\">\n\t\t    {{view.summaryKeyLocalized}}\n\t\t  </div>\n\t\t  \n\t\t  <div class=\"inner-value\">\n\t\t\t  <div *ngIf=\"attributeType.type === 'boolean'\">\n\t\t\t     <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t\t\t\t    <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.value === true\" [value]=\"true\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-true\" name=\"mod-{{geoObjectType.code}}-true\" [disabled]=\"readonly\"> \n\t\t\t\t    <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t\t\t\t  </label> \n\t\t\t\t  <label class=\"radio radio-inline\"> \n\t\t\t\t    <input [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\" (change)=\"onValueChange()\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"changeRequestAttributeEditor.value === false\" [value]=\"false\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-false\" name=\"mod-{{geoObjectType.code}}-false\" [disabled]=\"readonly\"> \n\t\t\t\t    <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t\t\t\t  </label>\n\t\t\t  </div>\n\t\t\t  \n\t\t\t  <div *ngIf=\"(view.oldValue !== null && view.oldValue !== undefined) && !isNew\">\n\t\t\t    <p class=\"warning-text display-current-value\">\n\t\t\t      <localize key=\"change.request.changed.value.prefix\"></localize>\n\t\t\t      {{ view.oldValue }}\n\t\t\t    </p>\n\t\t\t  </div>\n\t\t  </div>\n\t  </div>\n  </div>\n  \n  \n  <!-- TODO : This code copy/pasted from manage-versions.component.html -->\n  <div *ngIf=\"changeRequest && !changeRequest.isNew\" class=\"cr-maintainer-options\">\n\t  <div *ngIf=\"changeRequest.approvalStatus === 'PENDING' && changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.editAction && changeRequestAttributeEditor.diff\">\n\t    <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n\t      <localize key=\"change.request.accept.btn\"></localize>\n\t    </button>\n\t    <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n\t      <localize key=\"change.request.reject.btn\"></localize>\n\t    </button>\n\t    <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n\t      <localize key=\"change.request.pending.btn\"></localize>\n\t    </button>\n\t  </div>              \n\t  <div *ngIf=\"changeRequest.approvalStatus !== 'PENDING'\">\n\t    <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n\t        <localize key=\"change.request.status.accepted\"></localize>\n\t    </strong>\n\t    <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n\t        <localize key=\"change.request.status.rejected\"></localize>\n\t    </strong>\n\t  </div>\n\t</div>\n</div>\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"geoObjectAttributeExcludesFilter\",\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"change-request-page\",\n    templateUrl: \"./change-request-page.component.html\",\n    styleUrls: [\"./change-request-page.css\"]\n})\nexport class ChangeRequestPageComponent implements OnInit {\n\n  pageTitle: string;\n  bsModalRef: BsModalRef;\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n  isContributorOnly: boolean;\n\n  urlSubscriber: any;\n\n  highlightOid: string;\n\n  constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService, private route: ActivatedRoute) {\n      this.isAdmin = service.isAdmin();\n      this.isMaintainer = this.isAdmin || service.isMaintainer();\n      this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n      this.isContributorOnly = service.isContributerOnly();\n  }\n\n  ngOnInit(): void {\n      this.urlSubscriber = this.route.params.subscribe(params => {\n          this.highlightOid = params[\"oid\"];\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.urlSubscriber.unsubscribe();\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>{{pageTitle}}</h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <request-table [toggleId]=\"highlightOid\"></request-table>\n            \n            <submit-change-request *ngIf=\"isContributorOnly\"></submit-change-request>\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\n@Component({\n\n    selector: \"cascading-geo-selector\",\n    templateUrl: \"./cascading-geo-selector.html\"\n})\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mainForm\") mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() customEvent: boolean = false;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach(hierarchy => {\n            const object = {};\n            object[\"label\"] = hierarchy.label;\n            object[\"code\"] = hierarchy.code;\n\n            this.isValid = this.isValid && (this.hierarchies.length > 0);\n\n            hierarchy.entries.forEach(pot => {\n                const startDate = Date.parse(pot.startDate);\n                const endDate = Date.parse(pot.endDate);\n\n                if (time >= startDate && time <= endDate) {\n                    let parents = [];\n\n                    hierarchy.types.forEach(type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if (pot.parents[type.code] != null) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push(parent);\n                    });\n\n                    object[\"parents\"] = parents;\n                }\n            });\n\n            this.cHierarchies.push(object);\n        });\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions(code: string): void {\n        const hierarchy = this.hierarchies.find(h => h.code === code);\n\n        if (this.customEvent) {\n            this.onManageVersion.emit(hierarchy);\n        } else {\n/*\n            this.bsModalRef = this.modalService.show(ManageParentVersionsModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            });\n            this.bsModalRef.content.init(hierarchy);\n            this.bsModalRef.content.onVersionChange.subscribe(hierarchy => {\n                this.calculate();\n            });\n            */\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\" *ngIf=\"!readOnly\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { Observable } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { MasterListVersion } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ExportFormatModalComponent } from \"./export-format-modal.component\";\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, ProgressService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n    selector: \"master-list\",\n    templateUrl: \"./master-list.component.html\",\n    styleUrls: [\"./master-list.component.css\"]\n})\nexport class MasterListComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    list: MasterListVersion = null;\n    p: number = 1;\n    current: string = \"\";\n    filter: { attribute: string, value: string, label: string }[] = [];\n    selected: string[] = [];\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 100,\n        results: []\n    };\n\n    sort = { attribute: \"code\", order: \"ASC\" };\n    isPublished: boolean = true;\n    isRefreshing: boolean = false;\n    isWritable: boolean = false;\n    listAttrs: any[];\n\n    showInvalid = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    public searchPlaceholder = \"\";\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n\n    constructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private dateService: DateService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n        this.isPublished = (this.route.snapshot.paramMap.get(\"published\") === \"true\");\n\n        this.service.getMasterListVersion(oid).then(version => {\n            this.setList(version);\n            const orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(orgCode, typeCode);\n\n            this.onPageChange(1);\n\n            if (version.refreshProgress != null) {\n                this.handleProgressChange(version.refreshProgress);\n            }\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.notifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(message);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.notifier.complete();\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    setList(_list: MasterListVersion): void {\n        this.list = _list;\n        this.listAttrs = this.calculateListAttributes();\n    }\n\n    onShowInvalidChange() {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.message = null;\n\n        this.service.data(this.list.oid, pageNumber, this.page.pageSize, this.getFilter(), this.sort).then(page => {\n            this.page = page;\n            this.listAttrs = this.calculateListAttributes();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onSort(attribute: { name: string, label: string }): void {\n        if (this.sort.attribute === attribute.name) {\n            this.sort.order = (this.sort.order === \"ASC\" ? \"DESC\" : \"ASC\");\n        } else {\n            this.sort = { attribute: attribute.name, order: \"ASC\" };\n        }\n\n        this.onPageChange(1);\n    }\n\n    clearFilters(): void {\n        this.list.attributes.forEach(attr => {\n            attr.search = null;\n        });\n\n        this.filter = [];\n        this.showInvalid = false;\n        this.selected = [];\n\n        this.onPageChange(1);\n    }\n\n    toggleFilter(attribute: any): void {\n        attribute.isCollapsed = !attribute.isCollapsed;\n    }\n\n    getFilter(): { attribute: string, value: string, label: string }[] {\n        let newFilter = JSON.parse(JSON.stringify(this.filter));\n\n        if (!this.showInvalid) {\n            newFilter.push({ attribute: \"invalid\", value: \"false\" });\n        }\n\n        return newFilter;\n    }\n\n    calculateListAttributes() {\n        let attrs: any[];\n\n        if (this.showInvalid) {\n            attrs = this.list.attributes;\n        } else {\n            attrs = JSON.parse(JSON.stringify(this.list.attributes));\n\n            let index = attrs.findIndex(attr => attr.name === \"invalid\");\n\n            if (index !== -1) {\n                attrs.splice(index, 1);\n            }\n        }\n\n        attrs.forEach(attribute => {\n            attribute.isCollapsed = true;\n        });\n\n        return attrs;\n    }\n\n    getValues(attribute: any): void {\n        return Observable.create((observer: any) => {\n            this.message = null;\n\n            // Get the valid values\n            this.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.getFilter()).then(options => {\n                options.unshift({ label: \"[\" + this.localizeService.decode(\"masterlist.nofilter\") + \"]\", value: null });\n\n                observer.next(options);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    handleProgressChange(progress: any): void {\n        this.isRefreshing = (progress.current < progress.total);\n\n        this.pService.progress(progress);\n\n        if (!this.isRefreshing) {\n            // Refresh the resultSet\n            this.onPageChange(1);\n        }\n    }\n\n    handleDateChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && ((attribute.value.start != null && attribute.value.start !== \"\") || (attribute.value.end != null && attribute.value.end !== \"\"))) {\n            let label = \"[\" + attribute.label + \"] : [\";\n\n            if (attribute.value.start != null) {\n                label += attribute.value.start;\n            }\n\n            if (attribute.value.start != null && attribute.value.end != null) {\n                label += \" - \";\n            }\n\n            if (attribute.value.end != null) {\n                label += attribute.value.end;\n            }\n\n            label += \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleInputChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && attribute.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleListChange(e: TypeaheadMatch, attribute: any): void {\n        attribute.value = e.item;\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        this.list.attributes.forEach(attr => {\n            if (attr.base === attribute.base) {\n                attr.search = \"\";\n            }\n        });\n\n        if (attribute.value.value != null && attribute.value.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value.label + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n            this.selected.push(attribute.base);\n            attribute.search = e.item.label;\n        } else {\n            attribute.search = \"\";\n        }\n\n        this.onPageChange(1);\n    }\n\n    isFilterable(attribute: any): boolean {\n        return attribute.type !== \"none\" && attribute.name !== \"invalid\" && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n    }\n\n    onEdit(data): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        editModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setMasterListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishMasterList(this.list.oid).toPromise()\n            .then((historyOid: string) => {\n                this.isRefreshing = true;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n        // this.list = list;\n        // this.list.attributes.forEach(attribute => {\n        //  attribute.isCollapsed = true;\n        // });\n\n        // Refresh the resultSet\n        // this.onPageChange(1);\n    }\n\n    onNewGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        // editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n        editModal.content.configureAsNew(this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setMasterListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n        });\n    }\n\n    onExport(): void {\n        this.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.onFormat.subscribe(format => {\n            if (format === \"SHAPEFILE\") {\n                window.location.href = acp + \"/master-list/export-shapefile?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.getFilter()));\n            } else if (format === \"EXCEL\") {\n                window.location.href = acp + \"/master-list/export-spreadsheet?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.getFilter()));\n            }\n        });\n    }\n\n    changeTypeaheadLoading(attribute: any, loading: boolean): void {\n        attribute.loading = loading;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onWheel(event: WheelEvent): void {\n        let tableEl = (<Element>event.target).parentElement.closest(\"table\").parentElement;\n\n        tableEl.scrollLeft += event.deltaY;\n        event.preventDefault();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar *ngIf=\"isRefreshing\"></progress-bar>\n    \n    <!--\n    <div *ngIf=\"isRefreshing\" class=\"version-busy-overlay\">\n      This Master List Version is currently refreshing...\n      ...Please wait... ?\n    </div>\n    -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.generatedDate\"></localize>\n                    : <span class=\"date-string-display\">\n                          {{formatDate(list.publishDate)}}\n                      </span>\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : <span class=\"date-string-display\">\n                          {{formatDate(list.forDate)}}\n                      </span>\n                </h4>\n            </div>\n        </div>\n<!--         <div class=\"row\"> -->\n<!--             <div *ngIf=\"list\" class=\"col-md-12\"> -->\n<!--               <a [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, (!isWritable || list.isAbstract), list.forDate]\" routerLinkActive=\"active\"> -->\n<!--                 <localize key=\"masterlist.gotoMap\"></localize> -->\n<!--               </a> -->\n                \n<!--             </div> -->\n<!--         </div> -->\n\n        <div *ngIf=\"isWritable\" class=\"row form-group\">\n          <div class=\"col-md-12 table-responsive\" style=\"\">\n\t          <boolean-field [(value)]=\"showInvalid\" (change)=\"onShowInvalidChange()\" [localizeLabelKey]=\"'masterlist.showInvalid'\" ></boolean-field>\n          </div>\n        </div>\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true}\" style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n\n                        <button *ngIf=\"isWritable && !list.isAbstract\" type=\"submit\"\n                           [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, !isWritable, list.forDate, '__NEW__', (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\"\n                         class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                        </button>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"dropdown\" *ngIf=\"isWritable && list.isAbstract\">\n\t\t\t\t\t\t\t\t\t\t\t\t  <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <localize key=\"masterlist.newGeoObject\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t    <span class=\"caret\"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t  </button>\n\t\t\t\t\t\t\t\t\t\t\t\t  <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <li><localize style=\"padding-left:10px;\" key=\"masterlist.newGeoObject.selectASubtype\"></localize></li>\n\t\t\t\t\t\t\t\t\t\t\t\t    <li role=\"separator\" class=\"divider\"></li>\n\t\t\t\t\t\t\t\t\t\t\t\t    <li *ngFor=\"let subtype of list.subtypes\"><a [routerLink]=\"['/registry/dataset-location-manager', list.oid, subtype.code, !isWritable, list.forDate, '__NEW__', (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\">{{subtype.label}}</a></li>\n\t\t\t\t\t\t\t\t\t\t\t\t  </ul>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n                        <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\"  class=\"col-md-12 table-responsive text-nowrap\" id=\"list-view-table\" style=\"max-height:calc(100vh - 399px);\">\n                <table class=\"list-table table table-bordered table-striped\"  >\n                    <thead style=\"position: sticky;top: 0;background: #ececec;\">\n                        <tr>\n                            <th style=\"width: 3%;position: sticky;top: 0;\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th style=\"position: sticky;top: 0\" *ngFor=\"let attribute of listAttrs\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\" [title]=\"'button.filter.helptext' | localize\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n<!--                                             <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />  -->\n<!--                                             <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> -->\n                                            <date-field [(value)]=\"attribute.value.start\" label=\"\" [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'Start'\" (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\"></date-field>\n                                            <date-field [(value)]=\"attribute.value.end\" label=\"\" [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'End'\" (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\"></date-field>\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" \n                                          type=\"text\" \n                                          [placeholder]=\"('masterlist.search' | localize) + '...'\" \n                                          [name]=\"attribute.name\"\n                                          [(ngModel)]=\"attribute.search\"\n                                          [typeaheadAsync]=\"true\"\n                                          [typeahead]=\"getValues(attribute)\"\n                                          (typeaheadOnSelect)=\"handleListChange($event, attribute)\"\n                                          [typeaheadOptionsLimit]=\"100\"\n                                          [typeaheadMinLength]=\"0\"\n                                          [typeaheadWaitMs]=\"300\"\n                                          [ngClass]=\"{'inline-loading':attribute.loading}\"    \n                                          (typeaheadLoading)=\"changeTypeaheadLoading(attribute, $event)\"                                      \n                                          typeaheadOptionField=\"label\"\n                                          class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td style=\"width: 3%; text-align: center;\" class=\"label-column\">\n                              <a class=\"fa\" style=\"padding:3px;\" [ngClass]=\"isWritable ? 'fa fa-pencil' : 'fa fa-eye'\" [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, !isWritable, list.forDate, result.code, (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\"></a>\n                            </td>\n                            <td *ngFor=\"let attribute of listAttrs\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"display:inline-block;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                <span style=\"display:inline-block;margin-left:20px;vertical-align:middle;color:#cacaca;font-weight:bold;\">\n                  <localize key=\"masterlist.pagination.showing\"></localize>\n                  &nbsp;{{(page.pageNumber-1)*page.pageSize}} \n                  -&nbsp;{{page.pageNumber*page.pageSize}} \n                  &nbsp;<localize key=\"masterlist.pagination.of\"></localize>&nbsp;{{page.count}}\n                </span> \n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { PublishModalComponent } from \"./publish-modal.component\";\nimport { MasterList, MasterListVersion } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { AuthService, LocalizationService } from \"@shared/service\";\n\ndeclare var acp: any;\n\n@Component({\n    selector: \"published-master-list-history\",\n    templateUrl: \"./published-master-list-history.component.html\",\n    styleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit, OnDestroy {\n    message: string = null;\n    list: MasterList = null;\n    page: any = {\n        pageSize: 10,\n        pageNumber: 1,\n        count: 1,\n        results: []\n    };\n\n    @Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n\n    isAdmin: boolean;\n\n\n    constructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService, private localizeService: LocalizationService,\n        private dateService: DateService) {\n\n        this.isAdmin = authService.isAdmin();\n    }\n\n    ngOnInit(): void {\n        this.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n            this.list = list;\n\n            this.onPageChange(1);\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.notifier.subscribe(message => {\n            if (message.type === \"PUBLISH_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.notifier.complete();\n    }\n\n    //isGeoObjectTypeRM(type: string): boolean {\n    //    return this.authService.isGeoObjectTypeRM(type);\n    //}\n\n    onDeleteMasterListVersion(version: MasterListVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + version.forDate + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterListVersion(version.oid).then(response => {\n                this.updateList();\n\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    updateList(): void {\n        // update the list of versions. \n        this.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n            this.list = list;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: number): void {\n        if (this.list != null) {\n\n            this.message = null;\n\n            this.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n                this.page = response;\n\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.updateList();\n        }\n    }\n\n    onViewMetadata(): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.isNew = false;\n    }\n\n\n    onView(version: MasterListVersion): void {\n        this.router.navigate([\"/registry/master-list/\", version.oid, true])\n    }\n\n    onPublishShapefile(version: MasterListVersion): void {\n\n        this.service.publishShapefile(version.oid).then(() => {\n\n            this.onPageChange(this.page.pageNumber);\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDownloadShapefile(version: MasterListVersion): void {\n        window.location.href = acp + \"/master-list/download-shapefile?oid=\" + version.oid;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n     <div *ngIf=\"list && ((list.write))\" style=\"margin-bottom: 10px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" \n                    [title]=\"'masterList.publish.help.text' | localize\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.publishDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version )\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.forDate)}}\n                          </span>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.publishDate)}}\n                          </span>\n                        </td>\n                        \n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <div class=\"row\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span>\n                                            <span style=\"display: block;\"> {{job.author}} </span>\n                                            <span style=\"display: block;\"> {{job.type}} </span>\n                                            <span style=\"display: block;\"> {{job.status}} </span>\n                                            <span *ngIf=\"job.exception\" style=\"display: block;\"> {{job.exception.message}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterList, MasterListVersion } from \"@registry/model/registry\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"master-list-history\",\n    templateUrl: \"./master-list-history.component.html\",\n    styleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\n    message: string = null;\n    list: MasterList = null;\n    forDate: string = \"\";\n    isForDateValid: boolean = true;\n\n    @Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private router: Router, private modalService: BsModalService, private localizeService: LocalizationService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n            this.list = list;\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n            this.list.versions.push(version);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewMetadata(): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.isNew = false;\n    }\n\n    onView(version: MasterListVersion): void {\n        this.router.navigate([\"/registry/master-list/\", version.oid, false]);\n    }\n\n    onDelete(version: MasterListVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + version.forDate + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterListVersion(version.oid).then(response => {\n                this.list.versions = this.list.versions.filter((value, index, arr) => {\n                    return value.oid !== version.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && list.exploratory\" style=\"margin-bottom: 10px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\" style=\"margin-left: 10px;\" autocomplete=\"off\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> \n\n                    <date-field [(value)]=\"forDate\" [(valid)]=\"isForDateValid\" label=\"\" style=\"display:inline-grid;\" [inputName]=\"'forDate'\" \n                        [allowFutureDates]=\"false\" [required]=\"true\" [placement]=\"'right'\"></date-field>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid || !isForDateValid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.generatedDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.forDate)}}\n                          </span>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.createDate)}}\n                          </span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { MasterList } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\n@Component({\n\n    selector: \"master-list-view\",\n    templateUrl: \"./master-list-view.component.html\",\n    styleUrls: [\"./master-list-view.component.css\"]\n})\nexport class MasterListViewComponent implements OnInit {\n\n    content: string = \"\";\n    list: MasterList = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        if (oid != null) {\n            this.content = \"PUB\";\n        }\n\n        this.service.getMasterList(oid).then(list => {\n            this.list = list;\n\n            if (list.read) {\n                this.content = \"EXP\";\n            }\n        });\n    }\n\n    onViewMetadata(event: any): void {\n        event.preventDefault();\n\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.isNew = false;\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a *ngIf=\"list && list.read\" style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\"><localize key=\"lists.exploratory.link.label\"></localize></a>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\"><localize key=\"lists.published.link.label\"></localize></a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { interval } from \"rxjs\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\n@Component({\n    selector: \"scheduled-jobs\",\n    templateUrl: \"./scheduled-jobs.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class ScheduledJobsComponent implements OnInit {\n\n    message: string = null;\n\n    activeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    completeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    isViewAllOpen: boolean = false;\n\n    constructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.onActiveJobsPageChange(1);\n\n        this.pollingData = interval(1000).subscribe(() => {\n            this.activeTimeCounter++;\n            this.completeTimeCounter++;\n\n            if (this.isViewAllOpen) {\n                if (this.activeTimeCounter >= 4) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n                if (this.completeTimeCounter >= 7) {\n                    this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n                    this.completeTimeCounter = 0;\n                }\n            } else {\n                if (this.activeTimeCounter >= 2) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n        if (job.status === \"FEEDBACK\") {\n            return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PaginationPage): void {\n        page.results.forEach(job => {\n            let stepConfig = {\n                steps: [\n                    { label: this.localizeService.decode(\"scheduler.step.fileImport\"), status: \"COMPLETE\" },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.staging\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.validation\"),\n                        status: job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.databaseImport\"),\n                        status: job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n\n            job = job as ScheduledJobOverview;\n            job.stepConfig = stepConfig;\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    onViewAllCompleteJobs(): void {\n        this.onCompleteJobsPageChange(1);\n\n        this.isViewAllOpen = true;\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-history/\", code]);\n    }\n\n    onActiveJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCompleteJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(job.configuration).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n                    let activeJob = this.activeJobsPage.results[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.results.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n                    let activeJob = this.activeJobsPage.results[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.results.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    <span class=\"date-string-display\">\n                                                        {{formatDate(job.createDate)}}\n                                                    </span>\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                              <span class=\"date-string-display\">\n                                {{formatDate(job.createDate)}}\n                              </span>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <span class=\"date-string-display\">\n                                {{formatDate(job.lastUpdateDate)}}\n                            </span>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from \"./conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./conflict-widgets/reupload-modal.component\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\ndeclare let acp: any;\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./job.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class JobComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n\n    constructor(public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.notifier.subscribe(message => {\n            if (message.type === \"IMPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n        for (let i = 0; i < this.page.results.length; ++i) {\n            let pageConflict = this.page.results[i];\n\n            if (pageConflict.id === problem.id) {\n                this.page.results.splice(i, 1);\n            }\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n        \n        if (probType === \"net.geoprism.registry.geoobject.ImportOutOfRangeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.importOutOfRange\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: any): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n        this.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe(data => {\n            if (data.action === \"RESOLVED\") {\n                this.onProblemResolved(data.data);\n            }\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n            this.job = response;\n\n            if (this.job.stage === \"IMPORT_RESOLVE\") {\n                this.page = this.job.importErrors;\n            } else if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.page = this.job.problems;\n\n                for (let i = 0; i < this.page.results.length; ++i) {\n                    let problem = this.page.results[i];\n\n                    if (problem.type === \"RowValidationProblem\") {\n                        this.hasRowValidationProblem = true;\n                    }\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.results.forEach(row => {\n            row.selected = this.allSelected;\n        });\n    }\n\n    onReuploadAndResume(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.job = this.job;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.router.navigate([\"/registry/scheduled-jobs\"]);\n        });\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n        if (this.page.results.length === 0) {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n            } else {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n            }\n\n            this.bsModalRef.content.type = ModalTypes.danger;\n\n            this.bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.resolveScheduledJob(historyId).then(response => {\n                    this.router.navigate([\"/registry/scheduled-jobs\"]);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            });\n        }\n    }\n\n    onCancelScheduledJob(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(this.job.configuration).then(response => {\n                // this.bsModalRef.hide()\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              <span class=\"date-string-display\">\n                                    {{formatDate(job.createDate)}}\n                              </span>\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"job-conflict-modal\",\n    templateUrl: \"./job-conflict-modal.component.html\",\n    styleUrls: []\n})\nexport class JobConflictModalComponent implements OnInit {\n\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef) {\n        this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onProblemResolvedListener(problem: any): void {\n        this.onConflictAction.next({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJob, ImportError } from \"@registry/model/registry\";\n\nimport { GeoObjectEditorComponent } from \"../../geoobject-editor/geoobject-editor.component\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"import-problem-widget\",\n    templateUrl: \"./import-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ImportProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId(null);\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolved.emit(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>:\n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div *ngIf=\"problem.object != null && problem.object.geoObject != null\" style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"parent-reference-problem-widget\",\n    templateUrl: \"./parent-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"term-reference-problem-widget\",\n    templateUrl: \"./term-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(conflict: any): Observable<any> {\n        return Observable.create((observer: any) => {\n            this.iService.getTermSuggestions(conflict.mdAttributeId, this.searchLabel, \"20\").then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.termId = e.item.value;\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            classifierId: this.termId,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"row-validation-problem-widget\",\n    templateUrl: \"./row-validation-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class RowValidationProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">{{errorMessage}}</div>\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <div>{{message}}</div>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\n\nimport { TaskService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectType, PaginationPage } from \"@registry/model/registry\";\n\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"task-viewer\",\n    templateUrl: \"./task-viewer.component.html\",\n    styleUrls: [\"./task-viewer.component.css\"],\n    providers: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    completedTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    isViewAllOpen: boolean = false;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private taskService: TaskService, private localizeService: LocalizationService, private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onInProgressTasksPageChange(1);\n    }\n\n    upper(str: string): string {\n        if (str != null) {\n            return str.toUpperCase();\n        } else {\n            return \"\";\n        }\n    }\n\n    onInProgressTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, \"UNRESOLVED\").then(page => {\n            this.inProgressTasks = page;\n        });\n    }\n\n    onCompletedTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, \"RESOLVED\").then(page => {\n            this.completedTasks = page;\n        });\n    }\n\n    onCompleteTask(task: any): void {\n        // this.isViewAllOpen = true;\n\n        this.taskService.completeTask(task.id).then(() => {\n            const index = this.inProgressTasks.results.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.inProgressTasks.results.splice(index, 1);\n            }\n\n            this.completedTasks.results.push(task);\n            // this.onCompletedTasksPageChange(1);\n        });\n    }\n\n    onMoveTaskToInProgress(task: any): void {\n        this.isViewAllOpen = true;\n\n        this.taskService.setTaskStatus(task.id, \"UNRESOLVED\").then(() => {\n            const index = this.completedTasks.results.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.completedTasks.results.splice(index, 1);\n            }\n\n            this.completedTasks.results.splice(index, 1);\n            this.inProgressTasks.results.push(task);\n        });\n    }\n\n    onViewAllCompletedTasks(): void {\n        this.isViewAllOpen = true;\n\n        this.onCompletedTasksPageChange(1);\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label>\n                  <span class=\"date-string-display\">\n                      {{formatDate(task.createDate)}}\n                  </span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label>\n                <span class=\"date-string-display\" style=\"margin-right:30px;\">\n                   {{formatDate(task.createDate)}}\n                </span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label>\n                <span class=\"date-string-display\" >\n                   {{formatDate(task.completedDate)}}\n                </span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { SynchronizationConfigModalComponent } from \"./synchronization-config-modal.component\";\n\n@Component({\n    selector: \"synchronization-config-manager\",\n    templateUrl: \"./synchronization-config-manager.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\n    message: string = null;\n\n    page: PageResult<SynchronizationConfig> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 20\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.service.getPage(pageNumber, this.page.pageSize).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    create(): void {\n        this.service.edit(null).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(null, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onEdit(config: SynchronizationConfig): void {\n        this.service.edit(config.oid).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(response.config, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onRemove(config: SynchronizationConfig): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + config.label.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(config.oid).then(() => {\n                this.onPageChange(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(config: SynchronizationConfig): void {\n        this.router.navigate([\"/registry/synchronization-config/\", config.oid]);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from \"@registry/model/registry\";\nimport { SynchronizationConfigService, RegistryService } from \"@registry/service\";\nimport { AttributeConfigInfo, DHIS2AttributeMapping, SyncLevel } from \"@registry/model/sync\";\n\nlet DEFAULT_MAPPING_STRATEGY = \"net.geoprism.registry.etl.DHIS2AttributeMapping\";\n\nexport interface LevelRow {\n    isAttributeEditor: boolean;\n\n    level?: SyncLevel;\n    levelNum?: number;\n\n    // eslint-disable-next-line no-use-before-define\n    attrCfg?: GOTAttributeConfig;\n}\nexport interface GOTAttributeConfig {\n    geoObjectTypeCode?: string;\n    mappings: DHIS2AttributeMapping[];\n    attrConfigInfos: AttributeConfigInfo[];\n}\n\n@Component({\n    selector: \"synchronization-config-modal\",\n    templateUrl: \"./synchronization-config-modal.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit {\n\n    message: string = null;\n\n    @ViewChild(\"form\") form;\n\n    config: SynchronizationConfig = {\n        organization: null,\n        system: null,\n        hierarchy: null,\n        label: this.lService.create(),\n        configuration: {}\n    };\n\n    organizations: OrgSyncInfo[] = [];\n\n    cOrg: OrgSyncInfo = null;\n    cSystem: { label: string, oid: string, type: string } = null;\n\n    types: GeoObjectType[] = [];\n\n    levelRows: LevelRow[] = [];\n\n    orgUnitGroups: any[] = [];\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onSuccess: Subject<SynchronizationConfig>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: SynchronizationConfigService, private registryService: RegistryService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onSuccess = new Subject();\n    }\n\n    init(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n        this.organizations = organizations;\n\n        if (config != null) {\n            this.config = config;\n\n            let oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n            if (oIndex !== -1) {\n                this.cOrg = this.organizations[oIndex];\n            }\n\n            let sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n            if (sIndex !== -1) {\n                this.cSystem = this.cOrg.systems[sIndex];\n            }\n\n            if (this.cSystem != null && this.cSystem.type === \"DHIS2ExternalSystem\") {\n                // Get the types\n                // this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n                //  this.types = types;\n                // });\n\n                this.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n                    this.types = esConfig.types;\n                    this.orgUnitGroups = esConfig.orgUnitGroups;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n\n            this.levelRows = [];\n            for (let i = 0; i < this.config.configuration.levels.length; ++i) {\n                let level = this.config.configuration.levels[i];\n\n                let levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n                this.levelRows.push(levelRow);\n            }\n        }\n    }\n\n    buildDefaultMappings(): DHIS2AttributeMapping[] {\n        return [\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"displayLabel\",\n                externalId: null,\n                dhis2Id: \"name\",\n                dhis2AttrName: \"name\"\n            },\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"displayLabel\",\n                externalId: null,\n                dhis2Id: \"shortName\",\n                dhis2AttrName: \"shortName\"\n            },\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"code\",\n                dhis2Id: \"code\",\n                externalId: null,\n                dhis2AttrName: \"code\"\n            },\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"createDate\",\n                externalId: null,\n                dhis2Id: \"openingDate\",\n                dhis2AttrName: \"openingDate\"\n            }\n            /*\n            {\n              \"attributeMappingStrategy\": DEFAULT_MAPPING_STRATEGY,\n              \"isOrgUnitGroup\": false,\n              \"cgrAttrName\": \"createDate\",\n              \"externalId\": null,\n              \"dhis2Id\": \"created\",\n              \"dhis2AttrName\": \"created\"\n            },\n            {\n              \"attributeMappingStrategy\": DEFAULT_MAPPING_STRATEGY,\n              \"isOrgUnitGroup\": false,\n              \"cgrAttrName\": \"lastUpdateDate\",\n              \"externalId\": null,\n              \"dhis2Id\": \"lastUpdated\",\n              \"dhis2AttrName\": \"lastUpdated\"\n            },\n            */\n        ];\n    }\n\n    clearMappingData(): void {\n        this.types = [];\n        this.levelRows = [];\n        this.config.configuration[\"levels\"] = [];\n\n        if (this.cSystem != null && this.cSystem.type === \"DHIS2ExternalSystem\") {\n            this.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n                this.types = esConfig.types;\n                this.orgUnitGroups = esConfig.orgUnitGroups;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            let lvl = {\n                type: null,\n                geoObjectType: null,\n                level: 0,\n                mappings: [],\n                orgUnitGroupId: null\n            };\n            this.config.configuration[\"levels\"] = [lvl];\n            this.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n        }\n    }\n\n    onSelectLevelType(levelRow: LevelRow): void {\n        if (levelRow.level.type === \"RELATIONSHIPS\") {\n            levelRow.attrCfg.mappings = [];\n            levelRow.level.mappings = [];\n\n            let editorIndex = this.getEditorIndex();\n            if (editorIndex !== -1) {\n                this.levelRows.splice(editorIndex, 1);\n            }\n        } else {\n            if (levelRow.attrCfg.mappings.length === 0) {\n                levelRow.attrCfg.mappings = this.buildDefaultMappings();\n                levelRow.level.mappings = levelRow.attrCfg.mappings;\n\n                let len = levelRow.level.mappings.length;\n                for (let i = 0; i < len; ++i) {\n                    let mapping = levelRow.level.mappings[i];\n\n                    levelRow.attrCfg.attrConfigInfos.forEach((info) => {\n                        if (info.cgrAttr.name === mapping.cgrAttrName) {\n                            mapping.info = info;\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n    onOrganizationSelected(): void {\n        let index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n        if (index !== -1) {\n            this.cOrg = this.organizations[index];\n        } else {\n            this.cOrg = null;\n            this.cSystem = null;\n        }\n\n        this.clearMappingData();\n    }\n\n    deleteMapping(levelRow: LevelRow, index: number): void {\n        levelRow.attrCfg.mappings.splice(index, 1);\n    }\n\n    addNewMapping(levelRow: LevelRow): void {\n        levelRow.attrCfg.mappings.push({\n            attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n            cgrAttrName: null,\n            dhis2AttrName: null,\n            externalId: null,\n            terms: []\n        });\n    }\n\n    onChangeExternalSystem(): void {\n        let index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n        if (index !== -1) {\n            this.cSystem = this.cOrg.systems[index];\n        } else {\n            this.cSystem = null;\n        }\n\n        this.clearMappingData();\n    }\n\n    onChangeHierarchy(): void {\n        this.clearMappingData();\n    }\n\n    addLevel(): void {\n        let lvl = {\n            type: null,\n            geoObjectType: null,\n            level: this.config.configuration.levels.length,\n            mappings: [],\n            orgUnitGroupId: null\n        };\n        let len = this.config.configuration[\"levels\"].push(lvl);\n        this.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n    }\n\n    removeLevel(levelNum: number, levelRowIndex: number): void {\n        if (levelNum < this.config.configuration[\"levels\"].length) {\n            let editorIndex = this.getEditorIndex();\n            if (editorIndex === levelRowIndex + 1) {\n                this.levelRows.splice(editorIndex, 1);\n            }\n\n            this.levelRows.splice(levelRowIndex, 1);\n\n            let newLevelNum = 0;\n            for (let i = 0; i < this.levelRows.length; ++i) {\n                let levelRow: LevelRow = this.levelRows[i];\n\n                levelRow.levelNum = newLevelNum;\n\n                if (!levelRow.isAttributeEditor) {\n                    newLevelNum = newLevelNum + 1;\n                }\n            }\n\n            this.config.configuration[\"levels\"].splice(levelNum, 1);\n        }\n    }\n\n    getEditorIndex(): number {\n        for (let i = 0; i < this.levelRows.length; ++i) {\n            let levelRow = this.levelRows[i];\n\n            if (levelRow.isAttributeEditor) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    configureAttributes(levelRow: any): void {\n        let editorIndex = this.getEditorIndex();\n\n        if (editorIndex !== -1) {\n            this.levelRows.splice(editorIndex, 1);\n\n            if (editorIndex === levelRow.levelNum + 1) {\n                return;\n            }\n        }\n\n        this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n    }\n\n    getTermOptions(info: AttributeConfigInfo, dhis2Id: string) {\n        for (let i = 0; i < info.dhis2Attrs.length; ++i) {\n            let dhis2Attr = info.dhis2Attrs[i];\n\n            if (dhis2Attr.dhis2Id === dhis2Id) {\n                return dhis2Attr.options;\n            }\n        }\n    }\n\n    onChangeDHIS2Attr(mapping: DHIS2AttributeMapping) {\n        if (mapping.dhis2Id == null || mapping.dhis2Id === \"\") {\n            if (mapping.terms != null) {\n                mapping.terms = {};\n            }\n\n            mapping.dhis2AttrName = null;\n\n            return;\n        }\n\n        mapping.terms = {};\n\n        let len = mapping.info.dhis2Attrs.length;\n        for (let i = 0; i < len; ++i) {\n            if (mapping.info.dhis2Attrs[i].dhis2Id === mapping.dhis2Id) {\n                if (mapping.info.dhis2Attrs[i].dhis2Id !== mapping.info.dhis2Attrs[i].name) {\n                    mapping.externalId = mapping.info.dhis2Attrs[i].dhis2Id;\n                } else {\n                    mapping.externalId = null;\n                }\n                mapping.dhis2AttrName = mapping.info.dhis2Attrs[i].name;\n            }\n        }\n    }\n\n    onSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n        if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n            let levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n            levelRow.attrCfg = null;\n            levelRow.level.mappings = [];\n\n            let editorIndex = this.getEditorIndex();\n\n            if (editorIndex !== -1 && editorIndex === levelRowIndex + 1) {\n                this.levelRows.splice(editorIndex, 1);\n            }\n\n            return;\n        }\n\n        let attrCfg = this.levelRows[levelRowIndex].attrCfg;\n        if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n            // Resume an editing session on attributes that we fetched previously\n\n            let editorIndex = this.getEditorIndex();\n\n            if (editorIndex !== -1 && editorIndex !== levelRowIndex + 1) {\n                this.levelRows.splice(editorIndex, 1);\n\n                if (editorIndex < levelRowIndex) {\n                    levelRowIndex = levelRowIndex - 1;\n                }\n            }\n\n            this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n        } else {\n            this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((infos: AttributeConfigInfo[]) => {\n                let editorIndex = this.getEditorIndex();\n                let levelRow: LevelRow = this.levelRows[levelRowIndex];\n                let level = levelRow.level;\n\n                if (level.mappings.length === 0 || isDifferentGot) {\n                    level.mappings = this.buildDefaultMappings();\n                }\n\n                let len = level.mappings.length;\n                for (let i = 0; i < len; ++i) {\n                    let mapping = level.mappings[i];\n\n                    infos.forEach((info) => {\n                        if (info.cgrAttr.name === mapping.cgrAttrName) {\n                            mapping.info = info;\n                        }\n                    });\n                }\n\n                levelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, mappings: level.mappings, attrConfigInfos: infos };\n\n                if (editorIndex !== -1 && (editorIndex === levelRowIndex + 1 || infos.length > 0)) {\n                    this.levelRows.splice(editorIndex, 1);\n\n                    if (editorIndex < levelRowIndex) {\n                        levelRowIndex = levelRowIndex - 1;\n                    }\n                }\n\n                if (!isDifferentGot) {\n                    this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: levelRow.attrCfg, level: levelRow.level, levelNum: levelRow.levelNum });\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    mapCgrAttr(info: AttributeConfigInfo, mapping: DHIS2AttributeMapping) {\n        if (info == null) {\n            mapping.cgrAttrName = null;\n            mapping.info = null;\n            mapping.dhis2AttrName = null;\n            mapping.externalId = null;\n            mapping.terms = null;\n            mapping.isOrgUnitGroup = null;\n            return;\n        }\n\n        mapping.cgrAttrName = info.cgrAttr.name;\n        mapping.info = info;\n        mapping.dhis2AttrName = null;\n        mapping.externalId = null;\n        mapping.terms = {};\n        mapping.isOrgUnitGroup = false;\n        mapping.attributeMappingStrategy = info.attributeMappingStrategies[0];\n    }\n\n    onChangeTargetType(mapping: DHIS2AttributeMapping): void {\n        mapping.externalId = null;\n\n        for (const key in mapping.terms) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (mapping.terms.hasOwnProperty(key)) {\n                mapping.terms[key] = null;\n            }\n        }\n    }\n\n    onSubmit(): void {\n        /*\n        let levelIndex = 0;\n        let len = this.levelRows.length;\n        for (let i = 0; i < len; ++i)\n        {\n          let levelRow: LevelRow = this.levelRows[i];\n\n          if (levelRow.isAttributeEditor)\n          {\n            continue;\n          }\n          else if (levelRow.attrCfg == null)\n          {\n            levelIndex++;\n            continue;\n          }\n\n          let mappings = this.config.configuration.levels[levelIndex].mappings;\n          let mappingsLen = levelRow.attrCfg.mappings.length;\n          for (let j = 0; j < mappingsLen; ++j)\n          {\n            let mapping = JSON.parse(JSON.stringify(levelRow.attrCfg.mappings[j]));\n            delete mapping.info;\n            mappings.push(mapping);\n          }\n\n          levelIndex++;\n        }\n        */\n\n        this.service.apply(this.config).then(cfg => {\n            this.onSuccess.next(cfg);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancel(): void {\n        if (this.config.oid != null) {\n            this.service.unlock(this.config.oid).then(() => {\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef.hide();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.hierarchy\" name=\"hierarchy\" (change)='onChangeHierarchy()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"config.hierarchy != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"row-holder\" *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.units\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n              <thead>\n                <tr>\n                  <th style=\"width:3%\">\n                    <localize key=\"settings.external.synchronization.level.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                  </th>\n                  <th style=\"width:17%\">\n                    <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                  </th>\n                  <th style=\"width:25%; text-align: center;\">\n                    <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                  <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" (change)=\"onSelectLevelType(levelRow)\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                      <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                      <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                    </select>\n                  </td>\n                  <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                      <option></option>\n                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n\t\t\t\t\t\t\t\t\t  <div>\n\t\t\t\t\t\t\t\t\t    <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n\t\t\t\t\t\t\t\t\t      <i class=\"fa fa-trash-o ico-remove\"></i>\n\t\t\t\t\t\t\t\t\t      <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n\t\t\t\t\t\t\t\t\t    </a> \n\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t  <div>\n                      <a *ngIf=\"levelRow.level.geoObjectType && (levelRow.level.type === 'ORG_UNITS' || levelRow.level.type === 'ALL')\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                        <i class=\"fa fa-edit\"></i>\n                        <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.attributes.editButton\"></localize></label>\n                      </a> \n                    </div>\n\t\t\t\t\t\t\t\t\t</td>\n                  <td colspan=\"5\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                    <h4><localize key=\"sync.attr.attributes.title\"></localize></h4>\n\t                  <table class=\"table table-bordered table-striped\" style=\"margin-left:80px; width: calc(100% - 80px)\">\n\n\t                    <colgroup>\n\t\t\t\t\t\t\t\t\t        <col width=\"5%\">\n\t\t\t\t\t\t\t\t\t        <col width=\"95%\">\n\t\t\t\t\t\t\t\t\t    </colgroup>\n\t                    <tbody>\n\t                      <tr *ngFor=\"let mapping of levelRow.attrCfg.mappings; let mappingIndex = index;\">\n\t                        <td colspan=\"2\" class=\"row-holder\">\n\t                          <table style=\"width:80%; margin-top:15px; margin-bottom: 10px;\">\n\t                            <thead>\n\t                              <tr>\n\t                                <th style=\"width:5%\"></th>\n\t                                <th style=\"width:23%\">\n\t                                  <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n\t                                </th>\n\t                                <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\">\n                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n\t                              </tr>\n\t                            </thead>\n\t                            <tbody>\n\t                              <tr>\n\t                                <td style=\"width:5%\">\n\t                                  <i (click)=\"deleteMapping(levelRow, mappingIndex)\" class=\"fa fa-times\"></i>\n\t                                </td>\n\t                                <td style=\"width:23%\">\n\t                                  <select style=\"width:95%\" [(ngModel)]=\"mapping.cgrAttrName\" (change)=\"mapCgrAttr($event.target.selectedIndex == 0 ? null : levelRow.attrCfg.attrConfigInfos[$event.target.selectedIndex-1], mapping)\" [name]=\"'sourceAttrSelect' + i + '-' + mappingIndex + (mapping.cgrAttrName ? mapping.cgrAttrName : '')\">\n\t\t\t\t\t                            <option [ngValue]=\"null\"></option>\n\t\t\t\t\t                            <option *ngFor=\"let info of levelRow.attrCfg.attrConfigInfos\" [ngValue]=\"info.cgrAttr.name\">\n\t\t\t\t\t                              <label style=\"color:#999;\">{{info.cgrAttr.label}}</label>\n\t\t\t\t\t                            </option>\n\t\t\t\t\t                          </select>\n\t                                </td>\n\t                                <td style=\"width:23%\">\n\t                                  <label *ngIf=\"mapping.info\" style=\"color:#999;\">{{mapping.info.cgrAttr.typeLabel}}</label>\n\t                                </td>\n\t                                <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\" style=\"margin-right:20px; width:23%\">\n\t                                  <select style=\"width:95%\" *ngIf=\"mapping.info.cgrAttr.type === 'term'\" [(ngModel)]=\"mapping.isOrgUnitGroup\" (change)=\"onChangeTargetType(mapping)\" [name]=\"'isOrgUnitGroup' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"false\"><localize key=\"sync.attr.targetTypeOptionSet\"></localize></option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n\t                                </td>\n\t                                <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type !== 'term' && mapping.info.cgrAttr.name\" style=\"float:right; margin-right:20px; width:23%\">\n\t                                  <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n\t                                </td>\n\t                                <td style=\"width:23%\" *ngIf=\"mapping.info\">\n\t                                  <select *ngIf=\"mapping.info.dhis2Attrs.length > 0 && !mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.dhis2Id\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeDHIS2Attr(mapping)\">\n\t                                    <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                    <option [ngValue]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of mapping.info.dhis2Attrs\">\n\t                                      {{dhis2Attr.name}}\n\t                                    </option>\n\t                                  </select>\n\t                                  <label *ngIf=\"mapping.info.dhis2Attrs.length == 0 && !mapping.isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n\t                                </td>\n\t                              </tr>\n\t                            </tbody>\n\t                          </table>\n\t                          <div *ngIf=\"mapping.info && ((mapping.externalId != null && mapping.externalId.length > 0) || mapping.isOrgUnitGroup)\">\n\t\t                          <table *ngFor=\"let term of mapping.info.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n\t                              <thead>\n\t                                <tr>\n\t                                  <th style=\"width:25%\">\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <!-- To -->\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label>\n\t                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n\t                                      <localize *ngIf=\"mapping.isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n\t                                    </label>\n\t                                  </th>\n\t                                </tr>\n\t                              </thead>\n\t                              <tbody>\n\t                                <tr>\n\t                                  <td></td>\n\t                                  <td><label style=\"color:#999;\">{{term.label}}</label></td>\n\t                                  <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n\t                                  <td>\n\t                                    <select *ngIf=\"!mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                      <option *ngFor=\"let option of getTermOptions(mapping.info, mapping.externalId)\" [value]=\"option.code\">\n\t                                        {{option.name}}\n\t                                      </option>\n\t                                    </select>\n\t                                    <select *ngIf=\"mapping.isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t\t\t\t\t\t\t                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t\t\t\t\t\t\t\t\t                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n\t\t\t\t\t\t\t\t\t                    </select>\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n                            </div>\n\t                        </td>\n\t                      </tr>\n\t                      <tr>\n                          <td class=\"button-column\">\n                            <a class=\"fa fa-plus\" (click)=\"addNewMapping(levelRow)\" [title]=\"'sync.attr.attributes.add.tooltip' | localize\"></a>\n                          </td>\n                        </tr>\n\t                    </tbody>\n\t                  </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          \n          </div>\n      </div>\n\n\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { SynchronizationConfig, ExportScheduledJob } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component/error-handler/error-handler\";\n\ndeclare let acp: any;\n\n@Component({\n    selector: \"synchronization-config\",\n    templateUrl: \"./synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\n    message: string = null;\n\n    config: SynchronizationConfig = null;\n\n    page: PageResult<ExportScheduledJob> = {\n        pageSize: 10,\n        pageNumber: 1,\n        count: 1,\n        resultSet: []\n    };\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.get(oid).then(config => {\n            this.config = config;\n            this.onPageChange(1);\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.notifier.subscribe(message => {\n            if (message.type === \"DATA_EXPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.notifier != null) {\n            this.notifier.complete();\n        }\n    }\n\n    onRun(): void {\n        this.message = null;\n\n        this.service.run(this.config.oid).then(() => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: number): void {\n        if (this.config != null) {\n            this.message = null;\n\n            this.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n                this.formatStepConfig(response);\n                this.page = response;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    formatJobStatus(job: ExportScheduledJob): string {\n        if (job.status === \"FEEDBACK\") {\n            return this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.lService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.lService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.lService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.lService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.lService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.lService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PageResult<ExportScheduledJob>): void {\n        page.resultSet.forEach((job: ExportScheduledJob) => {\n            job.stepConfig = {\n                steps: [\n                    {\n                        label: this.lService.decode(\"synchronization.step.Queued\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.lService.decode(\"synchronization.step.Connecting\"),\n                        status: job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n                    },\n                    {\n                        label: this.lService.decode(\"synchronization.step.DatabaseExport\"),\n                        status: job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ExportScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label> \n              <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i> \n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <form #myForm=\"ngForm\">\n                <div class=\"form-group text-right\" style=\"margin: 0;\">\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n                <h4>\n                    <localize key=\"synchronization.config.units\"></localize>\n                </h4>\n                <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>\n                          <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th>\n                          <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                        </th>\n                        <th style=\"text-align: right;\">\n                          <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\" >\n                        <td style=\"vertical-align: middle;\">\n                          <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                        </td>\n                        <td style=\"\">\n                          {{level.geoObjectType}}\n                        </td>\n                        <td style=\"text-align: right;\">\n                          <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                          <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                          <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                        </td>\n                      </tr>\n                    </tbody>\n                </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\" style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\" [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\" [routerLink]=\"'/registry/sync/details/' + job.historyId\" routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                           </div>\n                         </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { AuthService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./details.component.html\",\n    styleUrls: [\"./details.css\"]\n})\nexport class SyncDetailsComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    historyId: string = \"\";\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(public service: RegistryService, private route: ActivatedRoute, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n            this.job = response;\n\n            this.page = this.job.exportErrors;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Map, LngLatBoundsLike, NavigationControl, MapboxEvent, AttributionControl, IControl } from \"mapbox-gl\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { AllGeoJSON } from \"@turf/helpers\";\nimport bbox from \"@turf/bbox\";\n\nimport { Subject } from \"rxjs\";\n\nimport { GeoObject, ContextLayer, GeoObjectType, ValueOverTime } from \"@registry/model/registry\";\nimport { ModalState } from \"@registry/model/location-manager\";\n\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ErrorModalComponent, ConfirmModalComponent, SuccessModalComponent } from \"@shared/component\";\n\nimport { LocalizationService } from \"@shared/service\";\n\ndeclare let acp: string;\n\nconst DEFAULT_COLOR = \"#80cdc1\";\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"location-manager\",\n    templateUrl: \"./location-manager.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE: ModalState = {\n        SEARCH: 0,\n        VIEW: 1\n    }\n\n    urlSubscriber: any;\n\n    editSessionEnabled: boolean = false;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Root nodes of the tree\n     */\n    data: GeoObject[] = [];\n\n    /*\n     *  Search Text\n     */\n    text: string = \"\";\n\n    /*\n     *  MODE\n     */\n    mode: number = this.MODE.SEARCH;\n\n    /*\n     * Date of data for explorer\n     */\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    /*\n     * Currently selected geo object\n     */\n    current: GeoObject;\n\n    /*\n     * Currently selected geo object type\n     */\n    type: GeoObjectType;\n\n    /*\n     * Flag denoting if an object is currently being editted\n     */\n    isEdit: boolean = false;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    /*\n     * Flag denoting the draw control is active\n     */\n    active: boolean = false;\n\n    public displayDateRequiredError: boolean = false;\n\n    vectorLayers: string[] = [];\n\n    backReference: string;\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        // {\n        //   name: 'Streets',\n        //   label: 'Streets',\n        //   id: 'streets-v9',\n        //   sprite: 'mapbox://sprites/mapbox/basic-v9',\n        //   url: 'mapbox://mapbox.basic-v9'\n        // }\n    ];\n\n    hoverFeatureId: string;\n\n    preventSingleClick: boolean = false;\n\n    hideSearchOptions: boolean = false;\n\n    /*\n       * Timer for determining double click vs single click\n       */\n    timer: any;\n\n    /*\n       * debounced subject for map extent change events\n       */\n    subject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n    vot: ValueOverTime = null;\n\n    @ViewChild(\"simpleEditControl\") simpleEditControl: IControl;\n\n    editingControl: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private mapService: MapService, private geomService: GeometryService, public service: RegistryService,\n        private route: ActivatedRoute, private router: Router, private lService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.urlSubscriber = this.route.params.subscribe(params => {\n            let geoObjectUid = params[\"geoobjectuid\"];\n            let geoObjectTypeCode = params[\"geoobjecttypecode\"];\n            this.hideSearchOptions = params[\"hideSearchOptions\"];\n            this.backReference = this.route.snapshot ? this.route.snapshot.params[\"backReference\"] : null;\n\n            this.dateStr = params[\"datestr\"];\n            this.handleDateChange();\n\n            if (geoObjectUid && geoObjectTypeCode && this.dateStr) {\n                this.service.getGeoObject(geoObjectUid, geoObjectTypeCode).then(geoObj => {\n                    this.setData([geoObj]);\n                    this.select(geoObj, null);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n        this.urlSubscriber.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n        const layer = this.baseLayers[0];\n\n        this.map = new Map({\n            container: \"map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    mapbox: {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox\"\n                        // \"source-layer\": \"mapbox_satellite_full\"\n                    }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            center: [-78.880453, 42.897852]\n        });\n\n        this.map.on(\"load\", () => {\n            this.initMap();\n        });\n\n        if (this.simpleEditControl) {\n            this.map.addControl(this.simpleEditControl);\n        }\n    }\n\n    changeMode(mode: number): void {\n        this.mode = mode;\n\n        if (this.mode === this.MODE.SEARCH) {\n            this.isEdit = false;\n        }\n\n        this.geomService.destroy(false);\n\n        this.vot = null;\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n    }\n\n    handleDateChange(): void {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n            this.displayDateRequiredError = false;\n        }\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl({ visualizePitch: true }));\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n\n        this.map.on(\"click\", \"children-points\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"click\", \"children-polygon\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        // Set map data on page load with URL params (single Geo-Object)\n        if (this.data) {\n            let fc = { type: \"FeatureCollection\", features: this.data };\n            (<any> this.map.getSource(\"children\")).setData(fc);\n\n            this.zoomToFeature(this.data[0], null);\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    showOriginalGeometry() {\n        if (this.current) {\n            this.addVectorLayer(this.current.properties.uid);\n        }\n    }\n\n    hideOriginalGeometry() {\n        if (this.current) {\n            this.removeVectorLayer(this.current.properties.uid);\n        }\n    }\n\n    handleMapClickEvent(event: any): void {\n        if (!this.isEdit && event.features != null && event.features.length > 0) {\n            const feature = event.features[0];\n\n            if (feature.properties.code != null && (this.current == null || this.current.properties.code !== feature.properties.code)) {\n                this.select(feature, null);\n            }\n        }\n    }\n\n    onPanelCancel(): void {\n        if (this.backReference != null && this.backReference.length >= 2) {\n            let ref = this.backReference.substring(0, 2);\n\n            if (ref === \"CR\") {\n                this.router.navigate([\"/registry/change-requests\"]);\n            }\n        } else {\n            this.changeMode(this.MODE.SEARCH);\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        if (applyInfo.isChangeRequest) {\n            if (this.backReference != null && this.backReference.length >= 2 && this.backReference.substring(0, 2) === \"CR\") {\n                this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n            } else {\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n                this.bsModalRef.content.cancelText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n                this.bsModalRef.content.onCancel.subscribe(() => {\n                    this.changeMode(this.MODE.SEARCH);\n                });\n            }\n        } else {\n            this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n            this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n            this.bsModalRef.content.onConfirm.subscribe(() => {\n                this.onPanelCancel();\n            });\n        }\n    }\n\n    addLayers(): void {\n        const source = \"children\";\n\n        this.map.addSource(source, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        // Polygon layer\n        this.map.addLayer({\n            id: source + \"-polygon\",\n            type: \"fill\",\n            source: source,\n            layout: {},\n            paint: {\n                \"fill-color\": DEFAULT_COLOR,\n                \"fill-opacity\": 0.8,\n                \"fill-outline-color\": \"black\"\n            },\n            filter: [\"all\",\n                [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n            ]\n        });\n\n        // Point layer\n        this.map.addLayer({\n            id: source + \"-points\",\n            type: \"circle\",\n            source: source,\n            paint: {\n                \"circle-radius\": 10,\n                \"circle-color\": DEFAULT_COLOR,\n                \"circle-stroke-width\": 2,\n                \"circle-stroke-color\": \"#FFFFFF\"\n            },\n            filter: [\"all\",\n                [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n            ]\n        });\n\n        //    // Selected layers\n        //    this.map.addLayer({\n        //      \"id\": source + \"-points-selected\",\n        //      \"type\": \"circle\",\n        //      \"source\": source,\n        //      \"paint\": {\n        //        \"circle-radius\": 10,\n        //        \"circle-color\": DEFAULT_COLOR,\n        //        \"circle-stroke-width\": 2,\n        //        \"circle-stroke-color\": '#FFFFFF'\n        //      },\n        //      filter: ['all',\n        //        [\"==\", ['get', 'code'], this.current != null ? this.current.properties.code : ''],\n        //        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n        //      ]\n        //    });\n        //\n        //    this.map.addLayer({\n        //      'id': source + '-polygon-selected',\n        //      'type': 'fill',\n        //      'source': source,\n        //      'layout': {},\n        //      'paint': {\n        //        'fill-color': DEFAULT_COLOR,\n        //        'fill-opacity': 0.8,\n        //        'fill-outline-color': 'black'\n        //      },\n        //      filter: ['all',\n        //        [\"==\", ['get', 'code'], this.current != null ? this.current.properties.code : ''],\n        //        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n        //      ]\n        //    });\n\n        // Label layer\n        this.map.addLayer({\n            id: source + \"-label\",\n            source: source,\n            type: \"symbol\",\n            paint: {\n                \"text-color\": \"black\",\n                \"text-halo-color\": \"#fff\",\n                \"text-halo-width\": 2\n            },\n            layout: {\n                \"text-field\": [\"get\", \"localizedValue\", [\"get\", \"displayLabel\"]],\n                \"text-font\": [\"NotoSansRegular\"],\n                \"text-offset\": [0, 0.6],\n                \"text-anchor\": \"top\",\n                \"text-size\": 12\n            }\n        });\n\n        this.vectorLayers.forEach(cLayer => {\n            this.addVectorLayer(cLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        // this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n        this.baseLayers.forEach(baseLayer => {\n            baseLayer.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.map.setStyle({\n            version: 8,\n            name: layer.name,\n            metadata: {\n                \"mapbox:autocomposite\": true\n            },\n            sources: {\n                mapbox: {\n                    type: \"raster\",\n                    url: layer.url,\n                    tileSize: 256\n                }\n            },\n            sprite: layer.sprite,\n            glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n            layers: [\n                {\n                    id: layer.id,\n                    type: \"raster\",\n                    source: \"mapbox\"\n                    // \"source-layer\": \"mapbox_satellite_full\"\n                }\n            ]\n        });\n    }\n\n    search(): void {\n        this.geomService.destroy(false);\n        this.mapService.search(this.text, this.dateStr).then(data => {\n            (<any> this.map.getSource(\"children\")).setData(data);\n\n            this.setData(data.features);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    zoomToFeature(node: GeoObject, event: MouseEvent): void {\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.preventSingleClick = false;\n        const delay = 200;\n\n        this.timer = setTimeout(() => {\n            if (!this.preventSingleClick) {\n                if (node && node.geometry != null) {\n                    const bounds = bbox(node as AllGeoJSON) as LngLatBoundsLike;\n\n                    let padding = 50;\n                    let maxZoom = 20;\n\n                    // Zoom level was requested to be reduced when displaying point types as per #420\n                    if (node.geometry.type === \"Point\" || node.geometry.type === \"MultiPoint\") {\n                        padding = 100;\n                        maxZoom = 12;\n                    }\n\n                    this.map.fitBounds(bounds, { padding: padding, animate: true, maxZoom: maxZoom });\n                }\n            }\n        }, delay);\n    }\n\n    select(node: GeoObject, event: MouseEvent): void {\n        /*\n        if (this.forDate == null) {\n            this.displayDateRequiredError = true;\n\n            return;\n        }\n        */\n\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.service.getGeoObjectTypes([node.properties.type], null).then(types => {\n            this.type = types[0];\n            this.current = node;\n            this.mode = this.MODE.VIEW;\n\n            this.geomService.initialize(this.map, this.type.geometryType, !this.isEdit);\n            this.geomService.zoomToLayersExtent();\n\n            //      const code = this.current.properties.code;\n            //\n            //      // Update the filter properties\n            //      this.map.setFilter('children-points-selected', ['all',\n            //        [\"==\", ['get', 'code'], code != null ? code : ''],\n            //        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n            //      ]);\n            //\n            //      this.map.setFilter('children-polygon-selected', ['all',\n            //        [\"==\", ['get', 'code'], code != null ? code : ''],\n            //        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n            //      ]);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setData(data: GeoObject[]): void {\n        this.data = data;\n    }\n\n    onContextLayerChange(layer: ContextLayer): void {\n        if (layer.active) {\n            this.addVectorLayer(layer.oid);\n        } else {\n            this.removeVectorLayer(layer.oid);\n        }\n    }\n\n    removeVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index !== -1) {\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.vectorLayers.splice(index, 1);\n        }\n    }\n\n    addVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index === -1) {\n            const prevLayer = \"children-polygon\";\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + acp + \"/master-list/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))]\n            });\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": SELECTED_COLOR,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": SELECTED_COLOR,\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n\n            this.vectorLayers.push(source);\n        }\n    }\n\n// TODO : Not sure what the point of this code was\n/*\n    refreshInputsFromDraw(): void {\n        let geom = this.getDrawGeometry();\n        let point = geom.coordinates[0];\n\n        this.coordinate.latitude = point[1];\n        this.coordinate.longitude = point[0];\n    }\n\n    refreshDrawFromInput(): void {\n\n        if( this.coordinate.longitude != null && this.coordinate.latitude != null ) {\n\n            const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n            const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n            if( !isLatitude(this.coordinate.latitude) || !isLongitude(this.coordinate.longitude)){\n                // outside EPSG bounds\n            }\n\n            this.editingControl.set({\n              type: 'FeatureCollection',\n              features: [{\n                id: this.current.properties.uid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ this.coordinate.longitude, this.coordinate.latitude ] }\n              }]\n            });\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.current.properties.uid } );\n\n            this.editSessionEnabled = true;\n        }\n    }\n    */\n\n    error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div id=\"navigator-left-sidebar\" class=\"col-md-5 lw-inner-col\" style=\"height: calc(100vh - 145px);overflow-y: auto;\">\n        <div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n  \n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"location-management-widget-section\">\n                    <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\" ng-reflect-key=\"changeOverTime.forDate\"></localize></span>\n<!--                     <input style=\"width: 100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" [disabled]=\"mode !== MODE.SEARCH\"/> -->\n                    <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"mode !== MODE.SEARCH && !hideSearchOptions\" \n                        [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [classNames]=\"displayDateRequiredError ? 'date-required-message' : ''\" [placement]=\"'right'\" style=\"display:inline-grid;\"></date-field>\n                    <div *ngIf=\"displayDateRequiredError\" class=\"error-message\">\n                      <localize key=\"geoobject.editor.forDate.requiredErrorMessage\"></localize>\n                    </div>\n                  </div>\n                </div>\n              </div>\n  \n              <!-- Search bar -->\n              <div *ngIf=\"!hideSearchOptions\" class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"location-management-widget-section\">\n                    <div class=\"input-group\">\n                      <input type=\"text\" class=\"form-control\" (keyup.enter)=\"search()\" [(ngModel)]=\"text\" name=\"text\" [disabled]=\"mode !== MODE.SEARCH\">\n                      <span class=\"input-group-btn\">\n                        <button class=\"btn btn-primary\" type=\"button\" (click)=\"search()\" [disabled]=\"mode !== MODE.SEARCH\">\n                          <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span> \n<!--                           <localize key=\"explorer.search.button.message\"></localize> -->\n                        </button>\n                      </span>\n                    </div>\n                    <div *ngIf=\"mode === MODE.VIEW && current != null\" style=\"padding: 20px 0;\">\n                      <i class=\"fa fa-arrow-left clickable\" aria-hidden=\"true\" (click)=\"changeMode(this.MODE.SEARCH)\"><localize key=\"explorer.back.to.results\"></localize></i>              \n                    </div>\n                    \n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n  \n          <div class=\"row\"  *ngIf=\"mode === MODE.SEARCH\">\n            <div class=\"col-md-12\">\n              <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n                    <div class=\"list-group\">\n  \n                      <div *ngFor=\"let node of data; let i = index\" class=\"list-group-item\">\n                        <!-- Single column card -->\n                        <div class=\"card card-default\" (click)=\"select(node, $event)\">\n                          <div class=\"card-body\">\n                            <i class=\"fa fa-map-marker clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\" (click)=\"zoomToFeature(node, $event)\" [title]=\"'explorer.zoom.label' | localize\"></i>\n                            <h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"View Geo-Object details\">{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n                          </div>\n                        </div>\n                      </div>\n  \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>    \n        <div *ngIf=\"mode === MODE.VIEW && current != null\" class=\"row\">\n          <div class=\"col-md-12\">\n<!--             <div style=\"padding: 20px 0;\"> -->\n<!--               <i class=\"fa fa-arrow-left clickable\" aria-hidden=\"true\" (click)=\"changeMode(this.MODE.SEARCH)\"><localize key=\"explorer.back.to.results\"></localize></i>               -->\n<!--             </div> -->\n            <feature-panel\n              [type]=\"type\"\n              [code]=\"current.properties.code\"              \n              [forDate]=\"forDate\"\n              [readOnly]=\"!current.properties.writable\"\n              (featureChange)=\"search()\"\n              (modeChange)=\"onModeChange($event)\"\n              (panelCancel)=\"onPanelCancel()\"\n              (panelSubmit)=\"onPanelSubmit($event)\"\n            ></feature-panel>\n          </div>\n        </div>            \n      </div>\n\n      <div class=\"col-md-7\" id=\"site-explorer-map\">\n        <div class=\"row\">\n          \n          <article class=\"base-layer-panel\">\n            <layer-panel (layerChange)=\"onContextLayerChange($event)\"></layer-panel>\n          </article>\n\n          <div id=\"map\" class=\"map-view-port\"></div>\n<!--           <simple-edit-control [visible]=\"editingControl != null\" [editSessionEnabled]=\"editSessionEnabled\" [save]=\"true\" (editEmitter)=\"onMapSave()\" #simpleEditControl></simple-edit-control> -->\n          \n          <div *ngIf=\"editingControl && (type.geometryType === 'POINT' || type.geometryType === 'MULTIPOINT')\" style=\"position:absolute;top:185px;right:10px;color:white;\">\n            \n            <div >\n                <div><label><localize key=\"geoobject.editor.geometry.latitude.label\"></localize></label></div>\n                <div>\n                <div class=\"text-left\">\n                  <input name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.latitude\" (change)=\"refreshDrawFromInput()\" required />\n                </div>\n              </div>\n            </div>\n            <div >\n                <div><label><localize key=\"geoobject.editor.geometry.longitude.label\"></localize></label></div>\n                <div>\n                <div class=\"text-left\">\n                  <input name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.longitude\" (change)=\"refreshDrawFromInput()\" required />\n                </div>\n              </div>\n            </div>\n            \n          </div>\n          \n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nimport { ContextLayerGroup } from \"@registry/model/registry\";\n\n\n@Component({\n    selector: \"context-layer-modal\",\n    templateUrl: \"./context-layer-modal.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class ContextLayerModalComponent {\n\n    contextLayerGroups: ContextLayerGroup[];\n\n\n    /*\n     * Called on confirm\n     */\n    public onSubmit: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onSubmit = new Subject();\n    }\n\n    groupHasContextLayers(group:string): boolean {\n        let hasCLayers = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            if (cLayerGroup.oid === group && cLayerGroup.contextLayers.length > 0) {\n                hasCLayers = true;\n            }\n        });\n\n        return hasCLayers;\n    }\n\n    confirm(): void {\n        this.onSubmit.next(this.contextLayerGroups);\n        this.bsModalRef.hide();\n    }\n\n}\n","<div class=\"modal-body\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"explorer.add.context.layers.modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"list-group\">\n                        <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                            <div *ngIf=\"groupHasContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n                                <h4>{{ cLayerGroup.displayLabel }}</h4>\n                                <div class=\"list-group\">\n                                    <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                                        <input type=\"checkbox\" [checked]=\"cLayer.enabled\" (change)=\"cLayer.enabled = !cLayer.enabled\" style=\"margin-left: 10px;\"> {{ cLayer.displayLabel }}\n                                        \n                                        <!-- <boolean-field [(value)]=\"cLayer.enabled\" [label]=\"cLayer.displayLabel\"></boolean-field> -->\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, OnDestroy, AfterViewInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Map, NavigationControl, AttributionControl, LngLatBounds } from \"mapbox-gl\";\n\nimport { ContextLayer, GeoObjectType, ValueOverTime } from \"@registry/model/registry\";\n// MapService IS REQUIRED to set the mapbox access token for the map\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler, GenericModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\nconst DEFAULT_COLOR = \"#80cdc1\";\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"dataset-location-manager\",\n    templateUrl: \"./dataset-location-manager.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class DatasetLocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\"\n    }\n\n    toolsIconHover: boolean = false;\n    datasetId: string;\n    typeCode: string;\n    readOnly: boolean = false;\n    editOnly: boolean = false;\n    isEdit: boolean = false;\n    date: string;\n    code: string;\n    type: GeoObjectType;\n    bsModalRef: BsModalRef;\n    backReference: string;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    vectorLayers: string[] = [];\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        //     {\n        //       name: 'Streets',\n        //       label: 'Streets',\n        //       id: 'streets-v11',\n        //       sprite: 'mapbox://sprites/mapbox/basic-v11',\n        //       url: 'mapbox://styles/mapbox/streets-v11'\n        //     }\n    ];\n\n    mode: string = null;\n    isMaintainer: boolean;\n    forDate: Date = new Date();\n\n    vot: ValueOverTime;\n\n    constructor(private mapService: MapService, public geomService: GeometryService, public service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute,\n        authService: AuthService, private lService: LocalizationService, private dateService: DateService, private router: Router) {\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n    }\n\n    ngOnInit(): void {\n        this.datasetId = this.route.snapshot.params[\"datasetId\"];\n        this.typeCode = this.route.snapshot.params[\"typeCode\"];\n        this.date = this.route.snapshot.params[\"date\"];\n        this.readOnly = this.route.snapshot.params[\"readOnly\"] === \"true\";\n        this.editOnly = this.route.snapshot.params[\"editOnly\"] === \"true\";\n        this.backReference = this.route.snapshot.params[\"backReference\"];\n\n        if (this.route.snapshot.params[\"code\"] != null) {\n            this.code = this.route.snapshot.params[\"code\"];\n        }\n\n        this.forDate = this.dateService.getDateFromDateString(this.date);\n\n        this.service.getGeoObjectTypes([this.typeCode], null).then(types => {\n            this.type = types[0];\n            this.geomService.initialize(this.map, this.type.geometryType, !this.isEdit);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPanelCancel(): void {\n        if (this.backReference != null && this.backReference.length >= 2) {\n            let ref = this.backReference.substring(0, 2);\n\n            if (ref === \"ML\") {\n                let published = this.backReference.substring(3, 3) === \"T\";\n                let oid = this.backReference.substring(3);\n\n                this.router.navigate([\"/registry/master-list\", oid, published]);\n            }\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        this.bsModalRef = this.modalService.show(GenericModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n        if (applyInfo.isChangeRequest) {\n            const message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n            const buttons = [];\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.cancel.returnList\"),\n                onClick: () => { this.onPanelCancel(); },\n                shouldClose: true,\n                class: \"btn-primary\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.changerequest.view\"),\n                onClick: () => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.continueEditing\"),\n                onClick: () => { },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            this.bsModalRef.content.init(message, buttons);\n        } else {\n            const message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            const buttons = [];\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.cancel.returnList\"),\n                onClick: () => { this.onPanelCancel(); },\n                shouldClose: true,\n                class: \"btn-primary\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.continueEditing\"),\n                onClick: () => { },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            this.bsModalRef.content.init(message, buttons);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    ngAfterViewInit() {\n        const layer = this.baseLayers[0];\n        // eslint-disable-next-line no-import-assign\n        this.map = new Map({\n            container: \"dataset-map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    \"mapbox-satellite\": {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    //          {\n                    //            \"id\": layer.id,\n                    //            \"type\": 'raster',\n                    //            \"source\": 'mapbox-satellite',\n                    //          }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            center: [-78.880453, 42.897852]\n        });\n\n        this.map.on(\"load\", () => {\n            this.initMap();\n        });\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n        this.geomService.destroy(false);\n    }\n\n    initMap(): void {\n        if (this.code !== \"__NEW__\") {\n            this.service.getGeoObjectBoundsAtDate(this.code, this.typeCode, this.date).then(bounds => {\n                if (bounds) {\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                    let padding = 50;\n                    let maxZoom = 20;\n\n                    // Zoom level was requested to be reduced when displaying point types as per #420\n                    if (this.type.geometryType === \"POINT\" || this.type.geometryType === \"MULTIPOINT\") {\n                        padding = 100;\n                        maxZoom = 12;\n                    }\n\n                    this.map.fitBounds(llb, { padding: padding, animate: false, maxZoom: maxZoom });\n                }\n            });\n        }\n\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl({ visualizePitch: true }));\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n\n        this.map.on(\"click\", this.datasetId + \"-points\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"click\", this.datasetId + \"-polygon\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.showOriginalGeometry();\n    }\n\n    showOriginalGeometry() {\n        this.addVectorLayer(this.datasetId);\n    }\n\n    hideOriginalGeometry() {\n        this.removeVectorLayer(this.datasetId);\n    }\n\n    addLayers(): void {\n        this.map.addLayer({\n            type: \"raster\",\n            id: \"satellite-map\",\n            source: \"mapbox-satellite\"\n        });\n\n        this.vectorLayers.forEach(vLayer => {\n            this.addVectorLayer(vLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        if (layer.id === \"streets-v11\") {\n            this.map.setStyle(layer.url);\n        } else if (layer.id === \"satellite-v9\") {\n            this.map.setStyle({\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    \"mapbox-satellite\": {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox-satellite\"\n                    }\n                ]\n            });\n        }\n    }\n\n    onContextLayerChange(layer: ContextLayer): void {\n        if (layer.active) {\n            this.addVectorLayer(layer.oid);\n        } else {\n            this.removeVectorLayer(layer.oid);\n        }\n    }\n\n    removeVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index !== -1) {\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-points-selected\");\n            this.map.removeLayer(source + \"-polygon-selected\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.vectorLayers.splice(index, 1);\n        }\n    }\n\n    addVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index === -1) {\n            const prevLayer = (source !== this.datasetId) ? this.datasetId + \"-points\" : null;\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + acp + \"/master-list/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))]\n            });\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": DEFAULT_COLOR,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": DEFAULT_COLOR,\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Selected object layers\n            if (source === this.datasetId) {\n                this.map.addLayer({\n                    id: source + \"-points-selected\",\n                    type: \"circle\",\n                    source: source,\n                    \"source-layer\": \"context\",\n                    paint: {\n                        \"circle-radius\": 10,\n                        \"circle-color\": SELECTED_COLOR,\n                        \"circle-stroke-width\": 2,\n                        \"circle-stroke-color\": \"#FFFFFF\"\n                    },\n                    filter: [\"all\",\n                        [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                    ]\n                }, prevLayer);\n\n                this.map.addLayer({\n                    id: source + \"-polygon-selected\",\n                    type: \"fill\",\n                    source: source,\n                    \"source-layer\": \"context\",\n                    layout: {},\n                    paint: {\n                        \"fill-color\": SELECTED_COLOR,\n                        \"fill-opacity\": 0.8,\n                        \"fill-outline-color\": \"black\"\n                    },\n                    filter: [\"all\",\n                        [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                    ]\n                }, prevLayer);\n            }\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n\n            this.vectorLayers.push(source);\n        }\n    }\n\n    onFeatureChange(): void {\n        // Refresh the layer\n        this.hideOriginalGeometry();\n        this.showOriginalGeometry();\n    }\n\n    handleMapClickEvent(event: any): void {\n        if (!this.isEdit && event.features != null && event.features.length > 0) {\n            const feature = event.features[0];\n\n            if (feature.properties.code != null && this.code !== feature.properties.code) {\n                this.code = feature.properties.code;\n\n                // Update the filter properties\n                this.map.setFilter(this.datasetId + \"-points-selected\", [\"all\",\n                    [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]);\n\n                this.map.setFilter(this.datasetId + \"-polygon-selected\", [\"all\",\n                    [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]);\n            }\n        }\n    }\n\n    onNewGeoObject(): void {\n        this.code = \"__NEW__\";\n    }\n\n    formatDate(date: Date): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div *ngIf=\"type != null && code != null\" id=\"navigator-left-sidebar\" class=\"col-md-5 lw-inner-col\" style=\"height: calc(100vh - 145px);overflow-y: auto;\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            \n            <div id=\"attributes-header\">\n              <h3 *ngIf=\"type\">{{type.label.localizedValue}}</h3>\n              <h4><localize key=\"cgr.validity.valid.on.label\"></localize>: {{formatDate(forDate)}}</h4>\n            </div>\n            \n            <feature-panel\n              [type]=\"type\"\n              [code]=\"code\"              \n              [forDate]=\"forDate\"\n              [datasetId]=\"datasetId\"\n              [readOnly]=\"readOnly\"\n              (featureChange)=\"onFeatureChange()\"              \n              (modeChange)=\"onModeChange($event)\"\n              (panelCancel)=\"onPanelCancel()\"\n              (panelSubmit)=\"onPanelSubmit($event)\"\n            ></feature-panel>\n          </div>\n        </div>\n      </div>\n\n      <div [ngClass]=\"{'col-md-7':code != null, 'col-md-12':code == null}\" id=\"site-explorer-map\">\n        <div class=\"row\">\n\n          <article class=\"base-layer-panel\">\n            <layer-panel (layerChange)=\"onContextLayerChange($event)\" (baseLayerChange)=\"handleBasemapStyle($event)\" [filter]=\"[datasetId]\"></layer-panel>\n            \n            <div *ngIf=\"!editOnly\" class=\"layer-toggle\" style=\"margin-top:10px;\" (mouseenter)=\"toolsIconHover = true\" (mouseleave)=\"toolsIconHover = false\">\n             \n              <i class=\"fa fa-plus-square\" *ngIf=\"!toolsIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n              <div *ngIf=\"toolsIconHover\" style=\"margin-top:10px;\">\n            \n                <span (click)=\"onNewGeoObject()\" role=\"button\">\n                  <button class=\"btn btn-primary\">\n                    <localize key=\"masterlist.newGeoObject\"></localize>              \n                  </button>\n                </span>\n              </div>\n            \n            </div>\n          </article>\n\n          <div id=\"dataset-map\" class=\"map-view-port\"></div>     \n        </div>\n      </div>\n    </div>\n  </div>\n</div>","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\nimport { calculateTextWidth } from \"./svg-util\";\n\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\nimport { SvgHierarchyType } from \"./svg-hierarchy-type\";\nimport { HierarchyComponent, RELATED_NODE_BANNER_COLOR } from \"../hierarchy.component\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nexport class SvgHierarchyNode {\n\n    private hierarchyComponent: HierarchyComponent;\n\n    private svgHierarchyType: SvgHierarchyType;\n\n    private geoObjectType: GeoObjectType;\n\n    private treeNode: any;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    constructor(hierarchyComponent: HierarchyComponent, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n        public localizeService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        this.hierarchyComponent = hierarchyComponent;\n        this.svgHierarchyType = svgHierarchyType;\n        this.geoObjectType = geoObjectType;\n        this.treeNode = treeNode;\n    }\n\n    getCode(): string {\n        return this.geoObjectType.code;\n    }\n\n    setPos(x: number, y: number, dragging: boolean) {\n        let bbox = this.getBbox();\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + 5)\n            .attr(\"y\", y + 1);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + bbox.width - 20)\n            .attr(\"y\", y + 17);\n\n        // Move inherit and uninherit buttons with the node they're moving\n\n        let inheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (inheritNode != null) {\n            const heritX = (x + bbox.width - 60);\n            const heritY = (y + bbox.height - 24);\n            let inheritBbox = inheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n        }\n\n        let uninheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (uninheritNode != null) {\n            const heritX = (x + bbox.width - 71);\n            const heritY = (y + bbox.height - 24);\n            let uninheritBbox = uninheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n        }\n    }\n\n    getPos() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n    }\n\n    getBbox() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n    }\n\n    getTreeNode() {\n        return this.treeNode;\n    }\n\n    hideRelatedHierarchy(): string {\n        let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n        if (existingSecondary.node() != null) {\n            existingSecondary.remove();\n            this.hierarchyComponent.calculateSvgViewBox();\n\n            let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n            return existingSecondaryCode;\n        }\n    }\n\n    renderRelatedHierarchiesMenu() {\n        let that = this;\n        let existingMenu = d3.select(\".g-context-menu\");\n\n        if (existingMenu.node() == null) {\n            //let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n            let parent = d3.select(\"#svg\");\n\n            let contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n            let relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n            const hasActionsPermissions = this.authService.isSRA() || this.authService.isOrganizationRA(this.svgHierarchyType.hierarchyType.organizationCode);\n\n            let bbox = this.getBbox();\n            let x = bbox.x + bbox.width - 5;\n            let y = bbox.y + bbox.height / 2 - 8;\n            const height = 20;\n            const fontSize = 8;\n            const widthPadding = 10;\n            const borderColor = \"#aaaaaa\";\n            const dividerColor = \"#e4e4e4\";\n            const fontFamily = \"sans-serif\";\n            const titleFontSize = 9;\n\n            const titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n            const actionsTitle = this.hierarchyComponent.localize(\"hierarchy.content.actionsTitle\");\n            const removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n            const noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n            const hideRelatedHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.hideRelatedHierarchy\");\n            const uninheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n            const inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\n            let isSecondaryHierarchyRendered = (d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node() != null);\n\n            let numActions = hasActionsPermissions ? (isSecondaryHierarchyRendered ? 2 : 1) : 0;\n\n            // Calculate the width of our title\n            let width = calculateTextWidth(titleLabel, titleFontSize);\n\n            // Calculate with of remove text\n            let removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n            width = removeWidth > width ? removeWidth : width;\n\n            if (isSecondaryHierarchyRendered) {\n              // Calculate width of \"hide related hierarchy\" label\n                let hideRelatedWidth = calculateTextWidth(hideRelatedHierarchyLabel, fontSize);\n                width = hideRelatedWidth > width ? hideRelatedWidth : width;\n            }\n\n            if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                let uninheritWidth = calculateTextWidth(uninheritLabel, fontSize);\n                width = uninheritWidth > width ? uninheritWidth : width;\n                numActions++;\n            } else {\n                let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                if (existingSecondary.node() != null) {\n                    let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                    let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                    let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                    let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                    if (this.treeNode.parent == null && relatedGotHasParents) {\n                        let inheritWidth = calculateTextWidth(inheritLabel, fontSize);\n                        width = inheritWidth > width ? inheritWidth : width;\n                        numActions++;\n                    }\n                }\n            }\n\n            // Calculate the width of our context menu, which is based on how long the text inside it will be.\n            // We don't know how long text is until we render it. So we'll need to loop over all the text and\n            // render and destroy all of it.\n            if (relatedHierarchies.length > 0) {\n                relatedHierarchies.forEach((relatedHierarchyCode: string) => {\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    let textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n\n                    if (textWidth > width) {\n                        width = textWidth;\n                    }\n                });\n            } else {\n                let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n                width = noHierLabelWidth > width ? noHierLabelWidth : width;\n            }\n\n            width = width + widthPadding;\n\n            let heightAdditions: number = relatedHierarchies.length > 0 ? (numActions + 2) : (numActions + 3);\n\n            // Background rectangle with border\n            contextMenuGroup.append(\"rect\")\n                .classed(\"contextmenu-relatedhiers-background\", true)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"rx\", 5)\n                .attr(\"width\", width)\n                .attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", .5)\n                .attr(\"stroke\", borderColor);\n\n            // Related Hierarchies Title\n            contextMenuGroup.append(\"text\")\n                .classed(\"contextmenu-relatedhiers-title\", true)\n                .attr(\"x\", x + widthPadding / 2)\n                .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                .attr(\"font-size\", titleFontSize)\n                .attr(\"font-family\", fontFamily)\n                .attr(\"font-weight\", \"bold\")\n                .text(titleLabel);\n\n            y = y + height;\n\n            // Dividing line at the bottom\n            contextMenuGroup.append(\"line\")\n                .classed(\"contextmenu-relatedhiers-divider\", true)\n                .attr(\"x1\", x)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x + width)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", borderColor)\n                .attr(\"stroke-width\", .5);\n\n\n            if (relatedHierarchies.length > 0) {\n                // Loop over all related hierarchies and draw them as list items\n                for (let i = 0; i < relatedHierarchies.length; ++i) {\n                    let relatedHierarchyCode = relatedHierarchies[i];\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    // Text that says the hierarchy's display label\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"data-hierCode\", relatedHierarchyCode)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(relatedHierarchyLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n                    y = y + height;\n\n                    // Dividing line at the bottom\n                    if (i < relatedHierarchies.length) {\n                        contextMenuGroup.append(\"line\")\n                            .classed(\"contextmenu-relatedhiers-divider\", true)\n                            .attr(\"data-hierCode\", relatedHierarchyCode)\n                            .attr(\"x1\", x + 5)\n                            .attr(\"y1\", y)\n                            .attr(\"x2\", x + width - 5)\n                            .attr(\"y2\", y)\n                            .attr(\"stroke\", dividerColor)\n                            .attr(\"stroke-width\", .5);\n                    }\n                }\n            } else {\n                // Text that says \"No related Hierarchies\"\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(noRelatedHierLabel);\n\n                y = y + height;\n\n                    // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x + 5)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width - 5)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", dividerColor)\n                    .attr(\"stroke-width\", .5);\n            }\n\n      // Actions Section\n            if (hasActionsPermissions) {\n              // Actions Title\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-title\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                    .attr(\"font-size\", titleFontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .attr(\"font-weight\", \"bold\")\n                    .text(actionsTitle);\n\n                y = y + height;\n\n              // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n        // \"Remove from hierarchy\" button\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"data-remove\", \"REPLACE---gotCode\")\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(removeFromHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) { that.removeGotFromHierarchy(); });\n\n                y = y + height;\n\n            // Inherit / Uninherit buttons\n                if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                    contextMenuGroup.append(\"line\")\n                        .classed(\"contextmenu-relatedhiers-divider\", true)\n                        .attr(\"x1\", x)\n                        .attr(\"y1\", y)\n                        .attr(\"x2\", x + width)\n                        .attr(\"y2\", y)\n                        .attr(\"stroke\", borderColor)\n                        .attr(\"stroke-width\", .5);\n\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(uninheritLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.onClickUninheritHierarchy(); });\n\n                    y = y + height;\n                } else {\n                    let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                    if (existingSecondary.node() != null) {\n                        let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                        let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                        let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                        let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                        if (this.treeNode.parent == null && relatedGotHasParents) {\n                            contextMenuGroup.append(\"line\")\n                                .classed(\"contextmenu-relatedhiers-divider\", true)\n                                .attr(\"x1\", x)\n                                .attr(\"y1\", y)\n                                .attr(\"x2\", x + width)\n                                .attr(\"y2\", y)\n                                .attr(\"stroke\", borderColor)\n                                .attr(\"stroke-width\", .5);\n\n                            contextMenuGroup.append(\"text\")\n                                .classed(\"contextmenu-relatedhiers-text\", true)\n                                .attr(\"x\", x + widthPadding / 2)\n                                .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-family\", fontFamily)\n                                .text(inheritLabel)\n                                .style(\"cursor\", \"pointer\")\n                                .on(\"click\", function(event, node) { that.onClickInheritHierarchy(secondaryHierarchy); });\n\n                            y = y + height;\n                        }\n                    }\n                }\n            }\n\n            if (isSecondaryHierarchyRendered) {\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(hideRelatedHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) {\n                        that.hideRelatedHierarchy();\n\n                        let existingMenu = d3.select(\".g-context-menu\");\n                        if (existingMenu.node() != null) {\n                            existingMenu.remove();\n                        }\n\n                        d3.select(\".g-hierarchy-got-connector\").remove();\n                    });\n            }\n\n            this.hierarchyComponent.calculateSvgViewBox();\n        } else {\n            existingMenu.remove();\n        }\n    }\n\n    removeGotFromHierarchy() {\n        let svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n        let obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        let message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.data = obj.code;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            let treeNode = svgGot.getTreeNode();\n            let parent = null;\n            if (treeNode.parent == null) {\n                parent = \"ROOT\";\n            } else {\n                if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                    parent = \"ROOT\";\n                } else {\n                    parent = treeNode.parent.data.geoObjectType;\n                }\n            }\n\n            this.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err); });\n        });\n    }\n\n    renderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let myBbox = this.getBbox();\n        let svg = d3.select(\"#svg\");\n\n        // Remove any secondary hierarchy that may already be rendered\n        if (this.hideRelatedHierarchy() === relatedHierarchy.code) {\n            return;\n        }\n\n        // Get the bounding box for our primary hierarchy\n        let primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n        // Render the secondary hierarchy\n        let svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService, this.authService);\n        svgHt.render();\n        let gSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n\n        // Translate the secondary hierarchy to the right of the primary hierarchy\n        let gHierarchy: any = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node();\n        let bbox = gHierarchy.getBBox();\n        let paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n        gSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n        // Draw dotted line between the shared node in the hierarchies\n        let secondaryGot = d3.select(\".g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n        let secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n        secondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n        d3.select(\".g-hierarchy-got-connector\").remove();\n        let gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n        gConnector.append(\"path\")\n            .classed(\"hierarchy-got-connector\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\n                \"d\",\n                \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width) +\n                \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2) +\n                \"H\" + secondaryGotBbox.x\n            );\n\n        // Draw arrow for dotted line\n        const arrowRectD = { height: 10, width: 7 };\n        let gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n        gArrow.append(\"rect\")\n            .classed(\"hierarchy-got-connector-arrow-rect\", true)\n            .attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n            .attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n        gArrow.append(\"path\")\n            .classed(\"hierarchy-got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\",\n                \"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n            );\n\n        // Recalculate the viewbox (should probably be the last thing that happens)\n        this.hierarchyComponent.calculateSvgViewBox();\n    }\n\n    onClickInheritHierarchy(hierarchy: HierarchyType) {\n        this.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n    }\n\n    onClickUninheritHierarchy() {\n        this.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { TreeNode } from \"@circlon/angular-tree-component\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\n\n\n@Component({\n    selector: \"add-child-to-hierarchy-modal\",\n    templateUrl: \"./add-child-to-hierarchy-modal.component.html\",\n    styleUrls: []\n})\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n    /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n    public hierarchyType: HierarchyType;\n    public nodes: HierarchyNode[];\n    public allGeoObjectTypes: GeoObjectType[];\n    public selectedGeoObjectType: GeoObjectType;\n    private toRoot: boolean = false;\n    selectUndefinedOptionValue: any;\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n\n    onSelect(value: string): void {\n        this.allGeoObjectTypes.forEach(gObj => {\n            if (gObj.code === value) {\n                this.selectedGeoObjectType = gObj;\n            }\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy(this.hierarchyType.code, parent, this.selectedGeoObjectType.code).then(data => {\n            this.onNodeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-attributes-modal\",\n    templateUrl: \"./manage-attributes-modal.component.html\",\n    styleUrls: [\"./manage-attributes-modal.css\"]\n})\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageAttributes, attribute: this.attribute, termOption: \"\" };\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy() {\n        this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            this.onDeleteAttribute.next(data);\n\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            [title]=\"'modal.button.edit' | localize\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            [title]=\"'modal.button.remove' | localize\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { ActionTypes } from \"@registry/model/constants\";\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeOverTimeAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectType, HierarchyOverTime, HierarchyOverTimeEntry, ValueOverTime } from \"@registry/model/registry\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { v4 as uuid } from \"uuid\";\nimport { GeometryService } from \"@registry/service\";\n\nexport class ChangeRequestChangeOverTimeAttributeEditor {\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    attribute: AttributeType;\n\n    editAction: AbstractAction;\n\n    hierarchy: HierarchyOverTime;\n\n    editors: ValueOverTimeCREditor[];\n\n    private _isValid: boolean;\n\n    constructor(changeRequestEditor: ChangeRequestEditor, attribute: AttributeType, hierarchy: HierarchyOverTime) {\n        this.changeRequestEditor = changeRequestEditor;\n        this.attribute = attribute;\n        this.hierarchy = hierarchy;\n\n        this.getEditAction();\n        this.editors = this.generateEditors();\n    }\n\n    getEditAction() {\n        if (this.editAction == null) {\n            let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n            if (actions.length === 0) {\n                this.editAction = new UpdateAttributeOverTimeAction(this.attribute.code);\n\n                if (this.attribute.code === \"_PARENT_\") {\n                    (this.editAction as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchy.code;\n                }\n            } else {\n                this.editAction = actions[actions.length - 1];\n            }\n        }\n\n        return this.editAction;\n    }\n\n    onChange() {\n        // If our attribute action has changes it needs to be added to the ChangeRequest actions. Otherwise we can remove it.\n        let hasChanges: boolean = this.hasChanges();\n\n        let index = this.changeRequestEditor.changeRequest.actions.findIndex(action => this.editAction === action);\n\n        if (index !== -1 && !hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.splice(index, 1);\n        } else if (index === -1 && hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.push(this.editAction);\n        }\n\n        this.validate();\n    }\n\n    hasChanges(): boolean {\n        let hasChanges: boolean = true;\n\n        if (this.editAction.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n            let updateAction: UpdateAttributeOverTimeAction = this.editAction as UpdateAttributeOverTimeAction;\n\n            if (updateAction.attributeDiff.valuesOverTime.length === 0) {\n                hasChanges = false;\n            }\n        }\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(skipExists: boolean = false): boolean {\n        let validEditors = this.validateEditors();\n        let hasTimeConflict = this.changeRequestEditor.dateService.checkRanges(this.attribute, this.editors);\n\n        let hasExistConflict = false;\n        if (this.attribute.code !== \"exists\") {\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existEditors = (this.changeRequestEditor.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n            hasExistConflict = this.changeRequestEditor.dateService.checkExistRanges(this.editors, existEditors);\n        } else if (!skipExists) {\n            this.changeRequestEditor.validate(true); // If the exists attribute has changed we must revalidate all other attributes\n        }\n\n        this._isValid = validEditors && !hasTimeConflict && !hasExistConflict;\n\n        return this._isValid;\n    }\n\n    private validateEditors(): boolean {\n        let valid: boolean = true;\n\n        this.editors.forEach(editor => {\n            if (!editor.validate()) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditors(includeUnmodified: boolean = true): ValueOverTimeCREditor[] {\n        return this.editors.filter(editor => includeUnmodified || editor.diff != null);\n    }\n\n    generateEditors(): ValueOverTimeCREditor[] {\n        let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n        let editors: ValueOverTimeCREditor[] = [];\n\n        // First, we have to create a view for every ValueOverTime object. This is done to simply display what's currently\n        // on the GeoObject\n        if (this.changeRequestEditor.changeRequest == null || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\" ||\n          (this.changeRequestEditor.changeRequest.approvalStatus !== \"ACCEPTED\" && this.changeRequestEditor.changeRequest.approvalStatus !== \"PARTIAL\" && this.changeRequestEditor.changeRequest.approvalStatus !== \"REJECTED\")) {\n            if (this.attribute.code === \"_PARENT_\") {\n                this.hierarchy.entries.forEach((entry: HierarchyOverTimeEntry) => {\n                    let editor = new HierarchyCREditor(this, this.attribute, this.editAction, entry, this.hierarchy);\n\n                    editors.push(editor);\n                });\n            } else {\n                if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n                    this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.forEach((vot: ValueOverTime) => {\n                        let editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n\n                        editor.valueOverTime = vot;\n\n                        editors.push(editor);\n                    });\n                }\n            }\n        }\n\n        // Next, we must apply all changes which may exist in the actions.\n        if (this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            let len = actions.length;\n            for (let i = 0; i < len; ++i) {\n                let updateAttrAction: UpdateAttributeOverTimeAction = actions[i] as UpdateAttributeOverTimeAction;\n\n                updateAttrAction.attributeDiff.valuesOverTime.forEach((votDiff: ValueOverTimeDiff) => {\n                    let index = editors.findIndex(editor => editor.oid === votDiff.oid);\n                    let editor = (index === -1) ? null : editors[index];\n\n                    if (editor == null) {\n                        if (this.attribute.code === \"_PARENT_\") {\n                            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n                        } else {\n                            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n                        }\n\n                        editor.diff = votDiff;\n\n                        editors.push(editor);\n                    } else {\n                        editor.diff = votDiff;\n\n                        if (this.attribute.code === \"_PARENT_\") {\n                            (editor as HierarchyCREditor).hierarchyEntry.parents = votDiff.parents;\n                        }\n                    }\n                });\n            }\n        }\n\n        return editors;\n    }\n\n    public createNewVersion(): ValueOverTimeCREditor {\n        let editor: ValueOverTimeCREditor;\n\n        // Create an instance of the appropriate editor object\n        if (this.attribute.code === \"_PARENT_\") {\n            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n        } else {\n            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n        }\n\n        // If we're creating a new GeoObject, add it to that GeoObject\n        if (this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            if (this.attribute.code === \"_PARENT_\") {\n                (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n                (editor as HierarchyCREditor).hierarchyOverTime.entries.push((editor as HierarchyCREditor).hierarchyEntry);\n            } else {\n                let vot = new ValueOverTime();\n                vot.oid = uuid();\n\n                (this.editAction as CreateGeoObjectAction).geoObjectJson.attributes[this.attribute.code].values.push(vot);\n\n                editor.valueOverTime = vot;\n            }\n        } else {\n            editor.constructNewDiff(\"CREATE\");\n        }\n\n        // Set any default values\n        if (this.attribute.type === \"local\") {\n            editor.value = this.changeRequestEditor.localizationService.create();\n        } else if (this.attribute.type === \"geometry\") {\n            let editors = this.getEditors(true);\n\n            if (editors.length > 0) {\n                editor.value = JSON.parse(JSON.stringify(editors[editors.length - 1].value));\n            } else {\n                editor.value = GeometryService.createEmptyGeometryValue(this.changeRequestEditor.geoObjectType.geometryType);\n            }\n        } else if (this.attribute.type === \"term\") {\n            let terms = GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.changeRequestEditor.geoObjectType, this.attribute.code);\n\n            if (terms && terms.length > 0) {\n                editor.value = terms[0].code;\n            }\n        } else if (this.attribute.code === \"_PARENT_\" && this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n        } else if (this.attribute.code !== \"_PARENT_\") {\n            editor.value = null;\n        }\n\n        this.editors.push(editor);\n\n        return editor;\n    }\n\n    public remove(editor: ValueOverTimeCREditor) {\n        if ((editor.diff != null && editor.diff.action === \"CREATE\") || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            let index = this.editors.findIndex(find => find.oid === editor.oid);\n\n            if (index !== -1) {\n                this.editors.splice(index, 1);\n            }\n        }\n\n        editor.remove();\n\n        this.validate();\n    }\n\n}\n","import { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyOverTimeEntry, GeoObject, HierarchyOverTimeEntryParent, HierarchyOverTime, AttributeType, TimeRangeEntry } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\n\nexport class HierarchyCREditor extends ValueOverTimeCREditor {\n\n  hierarchyOverTime: HierarchyOverTime;\n\n  hierarchyEntry: HierarchyOverTimeEntry;\n\n  constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction, hierarchyEntry: HierarchyOverTimeEntry, hierarchyOverTime: HierarchyOverTime) {\n      super(changeRequestAttributeEditor, attr, action);\n      this.hierarchyEntry = hierarchyEntry;\n      this.hierarchyOverTime = hierarchyOverTime;\n\n      if (this.hierarchyEntry != null) {\n          this.hierarchyEntry.loading = {};\n      }\n  }\n\n  // @Override\n  getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n      return this.hierarchyEntry;\n  }\n\n  // @Override\n  getValueFromGeoObjectForDiff(): any {\n      let immediateParent: GeoObject = this.hierarchyEntry.parents[this.hierarchyOverTime.types[this.hierarchyOverTime.types.length - 1].code].geoObject;\n      let goVal: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n      return goVal;\n  }\n\n  // @Override\n  validateUpdateReference() {\n      // We could potentially try to check for this, but it won't be easy. So for now we're doing nothing.\n  }\n\n  setParentValue(type: {code: string, label: string}, parents: { [k: string]: HierarchyOverTimeEntryParent }) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      let directParent: GeoObject = null;\n      if (type != null) {\n          directParent = parents[type.code].geoObject;\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  // let currentDirectParent: GeoObject = this.hierarchyEntry.parents[type.code].geoObject;\n                  let currentDirectParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n                  let oldValue: string = currentDirectParent == null ? null : currentDirectParent.properties.type + \"_~VST~_\" + currentDirectParent.properties.code;\n\n                  if (\n                      (currentDirectParent == null && directParent == null) ||\n                      ((currentDirectParent != null && directParent != null) &&\n                      currentDirectParent.properties.code === directParent.properties.code)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldParents = this.hierarchyEntry.parents;\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          let newValueStrConcat: string = null;\n          if (directParent != null) {\n              newValueStrConcat = directParent.properties.type + \"_~VST~_\" + directParent.properties.code;\n          }\n\n          if (newValueStrConcat === this.diff.oldValue) {\n              delete this.diff.newValue;\n          } else {\n              this.diff.newValue = newValueStrConcat;\n          }\n\n          this.diff.parents = parents;\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.parents = parents;\n      }\n\n      this.changeRequestAttributeEditor.onChange();\n      this.onChangeSubject.next(\"value\");\n  }\n\n  public getLowestLevelFromHierarchyEntry(parents: any): {geoObject: GeoObject, text: string} {\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(parents, type.code) && parents[type.code].geoObject) {\n              return parents[type.code];\n          }\n      }\n\n      return null;\n  }\n\n  set value(val: any) {\n      throw new Error(\"Invoke setParentValue instead\");\n  }\n\n  get value() {\n      if (this.diff != null && this.diff.parents !== undefined) {\n          return this.diff;\n      } else if (this.hierarchyEntry != null) {\n          return this.hierarchyEntry;\n      }\n\n      return null;\n  }\n\n  public removeType(type): void {\n      // this.value.parents[type.code] = { text: \"\", geoObject: null };\n\n      let newParents = JSON.parse(JSON.stringify(this.value.parents));\n      newParents[type.code] = { text: \"\", geoObject: null };\n\n      // Set the value to be the next existing ancestor.\n      let entry = this.value;\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let parentType = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(entry.parents, parentType.code) && entry.parents[parentType.code].geoObject) {\n              this.setParentValue(parentType, newParents);\n              return;\n          }\n      }\n\n      // If we do not have a next existing ancestor, then we must set the value to null.\n      this.setParentValue(null, newParents);\n  }\n\n  createEmptyHierarchyEntry(): HierarchyOverTimeEntry {\n      let hierarchyEntry = new HierarchyOverTimeEntry();\n      hierarchyEntry.loading = {};\n      hierarchyEntry.oid = uuid();\n\n      hierarchyEntry.parents = {};\n\n      if (this.hierarchyOverTime) {\n          for (let i = 0; i < this.hierarchyOverTime.types.length; i++) {\n              let current = this.hierarchyOverTime.types[i];\n\n              hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n\n              hierarchyEntry.loading = {};\n          }\n      }\n\n      return hierarchyEntry;\n  }\n\n  public remove(): void {\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.changeRequestAttributeEditor.onChange();\n              this.onChangeSubject.next(\"value\");\n              return;\n          } else if (this.hierarchyEntry != null && this.diff == null) {\n              let currentImmediateParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n              let oldValue: string = currentImmediateParent == null ? null : currentImmediateParent.properties.type + \"_~VST~_\" + currentImmediateParent.properties.code;\n\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.hierarchyEntry.oid;\n              this.diff.oldValue = oldValue;\n              this.diff.oldStartDate = this.hierarchyEntry.startDate;\n              this.diff.oldEndDate = this.hierarchyEntry.endDate;\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let index = this.hierarchyOverTime.entries.findIndex(vot => vot.oid === this.hierarchyEntry.oid);\n\n          if (index !== -1) {\n              this.hierarchyOverTime.entries.splice(index, 1);\n          }\n      }\n\n      this.changeRequestAttributeEditor.onChange();\n      this.onChangeSubject.next(\"value\");\n  }\n\n}\n","\nimport { ChangeRequest, AbstractAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ActionTypes } from \"@registry/model/constants\";\n\nexport class StandardAttributeCRModel {\n\n    changeRequest: ChangeRequest;\n\n    diff: { oldValue?: any, newValue?: any };\n\n    attribute: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    editAction: AbstractAction;\n\n    private _isValid: boolean = true;\n\n    constructor(attr: AttributeType, geoObject: GeoObjectOverTime, cr: ChangeRequest) {\n        this.attribute = attr;\n        this.geoObject = geoObject;\n        this.changeRequest = cr;\n        this.initialize();\n    }\n\n    initialize(): void {\n        let actions = this.changeRequest.actions;\n\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            if (actions.length > 0 && actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                this.editAction = actions[0];\n            }\n        } else {\n            actions.forEach((action: AbstractAction) => {\n                if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (this.attribute.code === updateAttrAction.attributeName) {\n                        this.editAction = action;\n                    }\n                }\n            });\n\n            if (this.editAction == null) {\n                this.editAction = new UpdateAttributeAction(this.attribute.code);\n            }\n        }\n\n        let len = this.changeRequest.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let action: AbstractAction = actions[i];\n\n            if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                if (this.attribute.code === updateAttrAction.attributeName) {\n                    this.diff = updateAttrAction.attributeDiff;\n                }\n            } else if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n              // Nothing to do here. Create actions don't have diffs.\n            } else {\n                console.log(\"Unexpected action : \" + action.actionType, action);\n            }\n        }\n    }\n\n    public hasChanges(): boolean {\n        return this.diff != null;\n    }\n\n    isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(): boolean {\n        return this._isValid;\n    }\n\n    set value(val: any) {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            this.geoObject.attributes[this.attribute.code] = val;\n        } else {\n            if (this.diff != null) {\n                if (this.areValuesEqual(this.diff.oldValue, val)) {\n                    delete (this.editAction as UpdateAttributeAction).attributeDiff;\n                    this.diff = null;\n\n                    let index = this.changeRequest.actions.findIndex(findAction => findAction === this.editAction);\n                    if (index !== -1) {\n                        this.changeRequest.actions.splice(index, 1);\n                    }\n                } else {\n                    this.diff.newValue = val;\n                }\n            } else {\n                this.diff = { oldValue: this.geoObject.attributes[this.attribute.code], newValue: val };\n\n                (this.editAction as UpdateAttributeAction).attributeDiff = this.diff;\n                this.changeRequest.actions.push(this.editAction);\n            }\n        }\n    }\n\n    get value(): any {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            return this.geoObject.attributes[this.attribute.code];\n        } else {\n            if (this.diff != null) {\n                return this.diff.newValue;\n            } else {\n                return this.geoObject.attributes[this.attribute.code];\n            }\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attribute.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        return val1 === val2;\n    }\n\n}\n","\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { ValueOverTimeDiff, SummaryKey } from \"@registry/model/crtable\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { LayerColor } from \"@registry/model/constants\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeTermType, Term } from \"@registry/model/registry\";\n\nexport class Layer {\n\n  oid: string;\n  isEditing: boolean;\n  isRendering: boolean;\n  color: LayerColor;\n  zindex: number;\n  geojson: any;\n  editPropagator: ValueOverTimeCREditor;\n\n}\n\n/*\n * This class exists purely for the purpose of storing what data to be rendered to the front-end. Any storage or submission of this data to the back-end must be translated\n * using the editor.\n */\nexport class VersionDiffView {\n\n  component: ManageVersionsComponent;\n  summaryKeyData: SummaryKey;\n  summaryKeyLocalized: string; // If we try to localize this in the html with a localize element then it won't update as frequently as we need so we're doing stuff manually here.\n  newLayer: Layer = null;\n  oldLayer: Layer = null;\n  coordinate?: any;\n  newCoordinateX?: any;\n  newCoordinateY? : any;\n  editor: ValueOverTimeCREditor;\n\n  // We must track our own value, so that they can be diffed when setting.\n  _value: any;\n\n  constructor(component: ManageVersionsComponent, editor: ValueOverTimeCREditor) {\n      this.component = component;\n      this.editor = editor;\n\n      this.populate(editor);\n      this.editor.onChangeSubject.subscribe(() => {\n          this.populate(this.editor);\n      });\n  }\n\n  populate(editor: ValueOverTimeCREditor) {\n      if (this.component.attributeType.type === \"local\" && this._value != null && this.editor.value != null) {\n          // The front-end glitches out if we swap to a new object. We have to update the existing object to be the same\n          LocalizedValue.populate(this._value, this.editor.value);\n      } else if (this.component.attributeType.code === \"_PARENT_\" && this._value != null && this.editor.value != null && this.editor.value.parents != null) {\n          for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n              let current = this.component.hierarchy.types[i];\n\n              this._value.parents[current.code].text = this.editor.value.parents[current.code].text;\n              this._value.parents[current.code].geoObject = this.editor.value.parents[current.code].geoObject;\n          }\n      } else if (this.component.attributeType.code === \"_PARENT_\") {\n          this._value = this.editor.value;\n      } else {\n          this._value = this.convertValueForDisplay(this.editor.value == null ? null : JSON.parse(JSON.stringify(this.editor.value)));\n      }\n\n      if (this.component.attributeType.code === \"_PARENT_\") {\n          this._value.loading = {};\n      }\n\n      this.calculateSummaryKey();\n  }\n\n  set oid(oid: string) {\n      this.editor.oid = oid;\n  }\n\n  get oid(): string {\n      return this.editor.oid;\n  }\n\n  get startDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return this.editor.oldStartDate;\n      }\n\n      return this.editor.startDate;\n  }\n\n  set startDate(startDate: string) {\n      this.editor.startDate = startDate;\n      this.calculateSummaryKey();\n  }\n\n  set oldStartDate(oldStartDate: string) {\n      this.editor.oldStartDate = oldStartDate;\n  }\n\n  get oldStartDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newStartDate != null && this.editor.oldStartDate !== undefined) {\n          return this.convertDateForDisplay(this.editor.oldStartDate);\n      }\n\n      return null;\n  }\n\n  get endDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return this.editor.oldEndDate;\n      }\n\n      return this.editor.endDate;\n  }\n\n  set endDate(endDate: string) {\n      this.editor.endDate = endDate;\n      this.calculateSummaryKey();\n  }\n\n  set oldEndDate(oldEndDate: string) {\n      this.editor.oldEndDate = oldEndDate;\n  }\n\n  get oldEndDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newEndDate != null && this.editor.oldEndDate !== undefined) {\n          return this.convertDateForDisplay(this.editor.oldEndDate);\n      }\n\n      return null;\n  }\n\n  get value(): any {\n      return this._value;\n  }\n\n  set value(value: any) {\n      this.editor.value = value;\n  }\n\n  set oldValue(oldValue: any) {\n      this.editor.oldValue = oldValue;\n  }\n\n  get oldValue(): any {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newValue != null && this.editor.oldValue !== undefined) {\n          return this.convertOldValueForDisplay(this.editor.oldValue);\n      }\n\n      return null;\n  }\n\n  convertDateForDisplay(date: string): string {\n      return (date == null || date.length === 0) ? null : this.component.dateService.formatDateForDisplay(date);\n  }\n\n  convertOldValueForDisplay(val: any): any {\n      if (this.component.attributeType.type === \"date\") {\n          return this.component.dateService.formatDateForDisplay(new Date(val));\n      } else if (this.component.attributeType.code === \"_PARENT_\" && val.includes(\"_~VST~_\")) {\n          let split = val.split(\"_~VST~_\");\n          // let parentTypeCode = split[0];\n          let parentCode = split[1];\n\n          return parentCode;\n      } else if (this.component.attributeType.type === \"term\") {\n          let code = val;\n          if (code instanceof Array) {\n              code = val[0];\n          }\n\n          let attrOpts = (this.component.attributeType as AttributeTermType).rootTerm.children;\n\n          let index = attrOpts.findIndex((term:Term) => term.code === code);\n\n          if (index !== -1) {\n              return attrOpts[index].label.localizedValue;\n          } else {\n              return val;\n          }\n      }\n\n      return val;\n  }\n\n  convertValueForDisplay(val: any): any {\n      if (val == null) {\n          return null;\n      }\n\n      return val;\n  }\n\n  calculateSummaryKey() {\n      if (this.editor.diff == null) {\n          this.summaryKey = SummaryKey.UNMODIFIED;\n          return;\n      }\n\n      if (this.editor.diff.action === \"CREATE\") {\n          this.summaryKey = SummaryKey.NEW;\n          return;\n      } else if (this.editor.diff.action === \"DELETE\") {\n          this.summaryKey = SummaryKey.DELETE;\n          return;\n      }\n\n      let hasTime = this.editor.diff.newStartDate != null || this.editor.diff.newEndDate != null;\n      let hasValue = Object.prototype.hasOwnProperty.call(this.editor.diff, \"newValue\");\n\n      if (hasTime && hasValue) {\n          this.summaryKey = SummaryKey.UPDATE;\n      } else if (hasTime) {\n          this.summaryKey = SummaryKey.TIME_CHANGE;\n      } else if (hasValue) {\n          this.summaryKey = SummaryKey.VALUE_CHANGE;\n      } else {\n          this.summaryKey = SummaryKey.UNMODIFIED;\n      }\n  }\n\n  set summaryKey(newKey: SummaryKey) {\n      this.summaryKeyData = newKey;\n      this.localizeSummaryKey();\n  }\n\n  get summaryKey(): SummaryKey {\n      return this.summaryKeyData;\n  }\n\n  private localizeSummaryKey(): void {\n      this.summaryKeyLocalized = this.component.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + this.summaryKeyData);\n  }\n\n}\n","import { Input, Component, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectOverTime, GeoObjectType } from \"@registry/model/registry\";\nimport { AbstractAction } from \"@registry/model/crtable\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\n\nimport { AuthService } from \"@shared/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { ActionDetailComponent } from \"../action-detail-modal.component\";\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component({\n\n    selector: \"crtable-detail-create-geo-object\",\n    templateUrl: \"./detail.component.html\",\n    styleUrls: [\"./crtable-detail-create-geo-object.css\"],\n    encapsulation: ViewEncapsulation.None\n})\n// export class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\nexport class CreateUpdateGeoObjectDetailComponent implements ActionDetailComponent {\n\n    isMaintainer: boolean = false;\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    @Input() readOnly: boolean;\n\n    isEditing: boolean = false;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    constructor(private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService,\n        private authService: AuthService) {\n\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if (this.isNew()) {\n\n            this.preGeoObject = this.postGeoObject;\n\n        }\n\n        this.onSelect(this.action);\n\n    }\n\n    isNew(): boolean {\n\n        return (this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\");\n\n    }\n\n    handleDateChange(): void {\n\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n    }\n\n    applyAction() {\n\n        // var action = JSON.parse( JSON.stringify( this.action ) );\n        let action = this.action;\n\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if (this.geometryEditor != null) {\n\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n\n        }\n\n        /*\n        this.changeRequestService.applyAction(action).then(response => {\n\n            this.endEdit();\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n        */\n\n    }\n\n    onSelect(action: AbstractAction) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n\n            this.registryService.getGeoObjectOverTime(this.postGeoObject.attributes.code, this.geoObjectType.code).then(geoObject => {\n\n                this.preGeoObject = geoObject;\n\n            }).catch((err: HttpErrorResponse) => {\n\n                this.error(err);\n\n            });\n\n        }\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    // @HostListener( 'window:beforeunload' )\n    // canDeactivate(): Observable<boolean> | boolean {\n    //    if ( this.isEditing ) {\n    //        //event.preventDefault();\n    //        //event.returnValue = 'Are you sure?';\n    //        //return 'Are you sure?';\n//\n     //       return false;\n     //   }\n//\n    //    return true;\n    // }\n\n    // afterDeactivate( isDeactivating: boolean ) {\n    //    if ( isDeactivating && this.isEditing ) {\n    //        this.unlockActionSync();\n    //    }\n    // }\n\n    startEdit(): void {\n\n        //this.lockAction();\n\n    }\n\n    public endEdit(): void {\n\n        //this.unlockAction();\n\n    }\n/*\n    lockAction() {\n\n        this.changeRequestService.lockAction(this.action.oid).then(response => {\n\n            this.isEditing = true;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(true);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    unlockAction() {\n\n        this.changeRequestService.unlockAction(this.action.oid).then(response => {\n\n            this.isEditing = false;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(false);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n\n        $.ajax({\n            url: acp + \"/changerequest/unlockAction\",\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function(a) {\n\n            },\n            async: false\n        });\n\n    }\n*/\n    getUsername(): string {\n\n        return this.authService.getUsername();\n\n    }\n\n    public error(err: HttpErrorResponse): void {\n\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading text-center\">\n        <h1 class=\"action-detail-header\">{{action.actionLabel}}</h1>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <h4>\n        <localize key=\"io.geoObjectType\"></localize>: {{action.geoObjectType.code}}\n      </h4>\n    \n      <div style=\"margin: 20px 0;\">\n        <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\"></localize></span>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n\n<!--         <geoobject-shared-attribute-editor  -->\n<!--           #attributeEditor -->\n<!--           *ngIf=\"preGeoObject\" -->\n<!--           [readOnly]=\"!isEditing\"   -->\n<!--           [geoObjectType]=\"geoObjectType\" -->\n<!--           [postGeoObject]=\"postGeoObject\" -->\n<!--           [preGeoObject]=\"preGeoObject\" -->\n<!--           [forDate]=\"forDate\" -->\n<!--           [isGeometryInlined]=\"true\"> -->\n<!--         </geoobject-shared-attribute-editor> -->\n        \n        <geoobject-shared-attribute-editor \n            #attributeEditor\n            *ngIf=\"action\"\n            [readOnly]=\"readOnly\"  \n            [geoObjectType]=\"geoObjectType\"\n            [geoObjectData]=\"{'geoObject':postGeoObject, 'actions': [action]}\"\n            [forDate]=\"forDate\"\n            [readOnly]=\"false\"\n            [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\" [disabled]=\"!isEditing\"></textarea>\n        </div>\n\n        <div class=\"button-holder text-right\" style=\"margin:40px 0 20px 0;\">\n          <button *ngIf=\"!readOnly && !isEditing\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, OnDestroy, Input } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService, MapService, GeometryService } from \"@registry/service\";\n\nimport { Map, NavigationControl } from \"mapbox-gl\";\n\n// eslint-disable-next-line no-unused-vars\ndeclare let acp: string;\n\n@Component({\n    selector: \"geoobject-editor-map[geometryType]\",\n    templateUrl: \"./geoobject-editor-map.component.html\",\n    styleUrls: [\"./geoobject-editor-map.component.css\"]\n})\n\n/**\n * This component is used when viewing change requests\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    _mapHeight: number = 400;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set mapHeight(height: number) {\n        if (height > 400) {\n            this._mapHeight = height;\n        }\n    }\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mapDiv\") mapDiv;\n\n    map: Map;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private geomService: GeometryService, private registryService: RegistryService, private mapService: MapService) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.mapDiv.nativeElement.id = Math.floor(Math.random() * (899999)) + 100000;\n\n            this.map = new Map({\n                container: this.mapDiv.nativeElement.id,\n                style: \"mapbox://styles/mapbox/satellite-v9\",\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            });\n\n            this.map.on(\"load\", () => {\n                this.initMap();\n            });\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    getIsValid(): boolean {\n        return this.geomService.isValid();\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            // this.addLayers();\n            // this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n        });\n\n        this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl());\n\n        this.zoomToBbox();\n    }\n\n    zoomToBbox(): void {\n        this.geomService.zoomToLayersExtent();\n    }\n\n    public error(err: HttpErrorResponse): void {\n        // TODO\n        console.log(\"ERROR\", err);\n    }\n\n}\n","<div class=\"geoobject-editor-map-wrapper\">\n  <div #mapDiv class=\"map-view-port-inline text-left\" [style.height.px]=\"_mapHeight\" style=\"width:calc(100% - 15px)\"></div>\n</div>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: \"simple-edit-control\",\n    templateUrl: \"./simple-edit-control.component.html\",\n    styleUrls: [\"./simple-edit-control.css\"]\n})\nexport class SimpleEditControl {\n\n    elRef: ElementRef\n\n    @Output() editEmitter = new EventEmitter<void>();\n\n    @Input() visible: boolean = true;\n    @Input() editSessionEnabled: boolean = false;\n    @Input() save: boolean = false;\n\n    constructor(elRef: ElementRef) {\n        this.elRef = elRef;\n    }\n\n    onAdd(map): any {\n        return this.elRef.nativeElement;\n    }\n\n    onRemove(map): void {\n        this.elRef.nativeElement.remove();\n    }\n\n    onClick(): void {\n        this.editEmitter.emit();\n    }\n}\n","<div (click)=\"this.onClick();\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button *ngIf=\"editSessionEnabled\" \n    class=\"fa\" \n    [ngClass]=\"{'fa-pencil-square-o':!save, 'fa-save':save}\" \n    style=\"color: black; font-size: 18px;\" \n    [title]=\"'changeovertime.manageVersions.button.label' | localize\" \n    >\n  </button>\n  <div *ngIf=\"editSessionEnabled\" class=\"map-button-info-hint-wrapper\">\n    <div class=\"map-button-info-hint\">\n      <localize key=\"map.button.info.hint\"></localize>\n    </div>\n    <div class=\"map-button-pointer\"></div>\n  </div>\n</div>","import { Component, Input, EventEmitter, Output, SimpleChanges } from \"@angular/core\";\nimport { IActionMapping, ITreeOptions } from \"@circlon/angular-tree-component\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\n\n@Component({\n\n    selector: \"tree-geo-selector\",\n    templateUrl: \"./tree-geo-selector.html\",\n    styleUrls: [\"./tree-geo-selector.css\"]\n})\nexport class TreeGeoSelector {\n\n    @Input() hierarchy: HierarchyOverTime;\n\n    @Input() readOnly: boolean = false;\n\n    @Input() forDate: Date = null;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    nodes: any[] = [];\n\n    actionMapping: IActionMapping = {\n        mouse: {\n            click: null\n        }\n    }\n\n    options: ITreeOptions = {\n        displayField: \"name\",\n        isExpandedField: \"expanded\",\n        idField: \"code\",\n        actionMapping: this.actionMapping\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        let time = null;\n\n        if (this.forDate != null) {\n            time = this.forDate.getTime();\n        }\n\n        let nodes = [];\n        let current = null;\n\n        this.hierarchy.entries.forEach(pot => {\n            const startDate = Date.parse(pot.startDate);\n            const endDate = Date.parse(pot.endDate);\n\n            // eslint-disable-next-line no-mixed-operators\n            if (time == null || time >= startDate && time <= endDate) {\n                this.hierarchy.types.forEach(type => {\n                    let node: any = {\n                        code: type.code,\n                        label: type.label,\n                        children: [],\n                        expanded: false\n                    };\n\n                    if (pot.parents[type.code] != null) {\n                        node.name = pot.parents[type.code].text;\n\n                        if (time == null) {\n                            node.name = node.name + \" (\" + pot.startDate + \" -> \" + pot.endDate + \")\";\n                        }\n\n                        node.geoObject = pot.parents[type.code].geoObject;\n                    }\n\n                    if (current == null) {\n                        nodes.push(node);\n                    } else {\n                        current.children.push(node);\n                        current.expanded = true;\n                    }\n\n                    current = node;\n                });\n            }\n\n            current = null;\n        });\n\n        this.nodes = nodes;\n    }\n\n    onEdit(): void {\n        this.onManageVersion.emit(this.hierarchy);\n    }\n\n}\n","<div>\n\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 style=\"margin: 0;\">{{hierarchy.label}}</h4>\n    </div>\n    <div class=\"panel-body\">\n\n<!--       <div class=\"input-group\"> -->\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\" >\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n<!--         <span *ngIf=\"!readOnly\" class=\"input-group-addon\">  -->\n<!--           <i class=\"fa fa-pencil clickable\" (click)=\"onEdit()\" aria-hidden=\"true\"></i> -->\n<!--         </span> -->\n<!--       </div> -->\n      \n      <button class=\"btn btn-primary\" style=\"width:100%;margin-top:10px;\" *ngIf=\"!readOnly\" (click)=\"onEdit()\"><localize key=\"modal.button.edit\"></localize></button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component({\n    selector: \"action-detail-modal\",\n    templateUrl: \"./action-detail-modal.component.html\",\n    styleUrls: []\n})\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    readonly: boolean;\n\n    @ViewChild(\"cuDetail\") cuDetail: ActionDetailComponent;\n    @ViewChild(\"arDetail\") arDetail: ActionDetailComponent;\n    @ViewChild(\"spDetail\") spDetail: ActionDetailComponent;\n\n    @Input()\n    curAction(action: any, readonly: boolean) {\n        this.action = action;\n        this.readonly = readonly;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if (this.cuDetail != null) {\n            this.cuDetail.endEdit();\n        }\n\n        if (this.arDetail != null) {\n            this.arDetail.endEdit();\n        }\n\n        if (this.spDetail != null) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { IOService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"data-export\",\n    templateUrl: \"./data-export.component.html\",\n    styleUrls: []\n})\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService, private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes(true).then(types => {\n            // this.types = types;\n\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                if (this.authService.isOrganizationRA(types[i].orgCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.types = myOrgTypes;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onChange(code: string): void {\n        if (code != null && code.length > 0) {\n            this.service.getHierarchiesForType(code, false).then(hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n    }\n\n    onExport(): void {\n        if (this.format === \"SHAPEFILE\") {\n            window.location.href = acp + \"/shapefile/export-shapefile?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        } else if (this.format === \"EXCEL\") {\n            window.location.href = acp + \"/excel/export-spreadsheet?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, PRESENT } from \"@registry/model/registry\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport * as moment from \"moment\";\n\n@Component({\n    selector: \"geometry-panel\",\n    templateUrl: \"./geometry-panel.component.html\",\n    styleUrls: [\"./geometry-panel.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeometryPanelComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n\n    isVersionForHighlight: number;\n\n    message: string = null;\n\n    readonly: boolean = false;\n\n    hasConflict: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Output() onCloneGeometry = new EventEmitter<any>();\n\n    @Output() onEdit = new EventEmitter<ValueOverTime>();\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    geoObjectOverTime: GeoObjectOverTime;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set geoObjectOverTimeInput(value: GeoObjectOverTime) {\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value));\n        this.geoObjectOverTime = value;\n    }\n\n    @Input() isNewGeoObject: boolean = false;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public changeDetectorRef: ChangeDetectorRef, private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    onDateChange(): any {\n        this.hasConflict = false;\n\n        this.isValid = this.checkDateFieldValidity();\n\n        let vAttributes = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        this.hasConflict = this.dateService.checkRanges(null, vAttributes);\n    }\n\n    edit(vot: ValueOverTime, isVersionForHighlight: number): void {\n        this.onEdit.emit(vot);\n\n        this.isVersionForHighlight = isVersionForHighlight;\n    }\n\n    onAddNewVersion(geometry: ValueOverTime): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null; // Utils.formatDateString(new Date());\n        vot.endDate = null; // Utils.formatDateString(new Date());\n\n        if (geometry && geometry.value) {\n            vot.value = geometry.value;\n        } else {\n            vot.value = { type: this.geoObjectType.geometryType, coordinates: [] };\n        }\n\n        if (this.geoObjectType.geometryType === \"MULTIPOLYGON\") {\n            vot.value.type = \"MultiPolygon\";\n        } else if (this.geoObjectType.geometryType === \"POLYGON\") {\n            vot.value.type = \"Polygon\";\n        } else if (this.geoObjectType.geometryType === \"POINT\") {\n            vot.value.type = \"Point\";\n        } else if (this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            vot.value.type = \"MultiPoint\";\n        } else if (this.geoObjectType.geometryType === \"LINE\") {\n            vot.value.type = \"Line\";\n        } else if (this.geoObjectType.geometryType === \"MULTILINE\") {\n            vot.value.type = \"MultiLine\";\n        }\n\n        votArr.push(vot);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    setDateAttribute(vot: ValueOverTime, val: string): void {\n        vot.value = new Date(val).getTime().toString();\n    }\n\n    remove(version: any): void {\n        let val = this.geoObjectOverTime.attributes[\"geometry\"];\n\n        let position = -1;\n        for (let i = 0; i < val.values.length; i++) {\n            let vals = val.values[i];\n\n            if (vals.startDate === version.startDate) {\n                position = i;\n            }\n        }\n\n        if (position > -1) {\n            val.values.splice(position, 1);\n        }\n    }\n\n    formatDate(date: string) {\n        let localeData = moment.localeData(date);\n        let format = localeData.longDateFormat(\"L\");\n        return moment().format(format);\n    }\n\n    setInfinity(vAttribute, attributes): void {\n        if (vAttribute.endDate === PRESENT) {\n            vAttribute.endDate = new Date();\n        } else {\n            vAttribute.endDate = PRESENT;\n        }\n\n        this.onDateChange();\n    }\n\n    sort(votArr: ValueOverTime[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    onCloneGeometryToNewVersion(geometry: ValueOverTime): void {\n        this.onAddNewVersion(geometry);\n    }\n\n    onSubmit(): void {\n        this.onChange.emit(this.geoObjectOverTime);\n    }\n\n    onCancel(): void {\n        this.onChange.emit(this.originalGeoObjectOverTime);\n    }\n\n}\n","<div>\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #versionsform=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"col-md-12\">\n          <div class=\"attribute-version-wrapper\" *ngIf=\"geoObjectOverTime\">\n\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                    <table class=\"table table-striped\">\n\n                      <tbody class=\"attribute-element-wrapper\">\n                        <p class=\"message\" *ngIf=\"geoObjectOverTime.attributes['geometry'].values.length === 0\">\n                          <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize>\n                        </p>\n\n                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\" [ngClass]=\"{'error-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'ERROR', 'warning-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'WARNING'}\">\n                          <td [ngClass]=\"{'active' : i === isVersionForHighlight}\">\n                            <table>\n                              <tr class=\"attribute-value-row\" *ngIf=\"geoObjectType.isGeometryEditable\">\n                                <td colspan=\"2\">\n                                  <button class=\"btn btn-primary\" (click)=\"edit(vAttribute, i)\" role=\"button\">\n                                    <localize key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                  </button>\n                                  <button type=\"submit\" (click)=\"onCloneGeometryToNewVersion(vAttribute)\" class=\"btn btn-default\" role=\"button\">\n                                      <localize key=\"changeovertime.manageVersions.copy.geometry.button\"></localize>\n                                    </button>\n                                </td>\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5> \n                                  \n                                  <date-field #dateFieldComponents [(value)]=\"vAttribute.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" ></date-field>\n                                  \n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                      <h5>\n                                        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                      </h5>\n                                      \n                                      <date-field #dateFieldComponents [(value)]=\"vAttribute.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" [placement]=\"'bottom'\"></date-field>\n                                      \n                                    </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0\">\n<!--                                   <p class=\"error-message\"> -->\n<!--                                     <localize key=\"manage.versions.overlap.message\"></localize> -->\n<!--                                   </p> -->\n                                  <p *ngFor=\"let msg of vAttribute.conflictMessage\" [ngClass]=\"{'error-message': msg.type === 'ERROR', 'warning-message': msg.type === 'WARNING'}\">\n                                    {{msg.message}}\n                                  </p>\n                              </tr>    \n                            </table>\n                          </td>\n                          <td style=\"vertical-align: middle;\" class=\"manage-version-button clickable\" [title]=\"'changeovertime.manageVersions.remove.version' | localize\" (click)=\"remove(vAttribute)\">\n                            <i class=\"fa fa-times\"></i>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </li>\n\n                  <li class=\"list-group-item\" style=\"text-align: left;\">\n                    <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion(null)\"> <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                    </i>\n                  </li>\n                </ul>\n              </div>\n        </div>\n\n      </div>\n\n      <div class=\"row-holder\">\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"holder\" style=\"border: none; width: 100%;\">\n          <div class=\"button-holder pull-right\">\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n              <localize key=\"io.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || !versionsform.valid\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\n@Pipe({\n    name: \"geoobjecttype\",\n    pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n\n    transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        let unassignedGeoObjTypes: string[] = [];\n        this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n\n        // filter items array, items which match and return true will be\n        // kept, false will be filtered out\n        return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n    }\n\n    buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void {\n        filter.forEach(f => {\n            this.processHierarchyNodes(f, unassignedGeoObjTypes);\n        })\n    }\n\n    processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]) {\n        unassignedGeoObjTypes.push(node.geoObjectType)\n\n        node.children.forEach(child => {\n            this.processHierarchyNodes(child, unassignedGeoObjTypes);\n        })\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"toEpochDateTime\",\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n\n    transform(date: string): any {\n        if (!date) {\n            return date;\n        }\n\n        return new Date(date).getTime();\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { MasterListManagerComponent } from \"./component/master-list/master-list-manager.component\";\nimport { MasterListComponent } from \"./component/master-list/master-list.component\";\nimport { MasterListViewComponent } from \"./component/master-list/master-list-view.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { DatasetLocationManagerComponent } from \"./component/location-manager/dataset-location-manager.component\";\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from \"../shared/service/guard.service\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"hierarchies\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"data\",\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-requests\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"change-requests/:oid\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"master-lists\",\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"scheduled-jobs\",\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"job/:oid\",\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"master-list/:oid/:published\",\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"master-list-view/:oid\",\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"change-request\",\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"tasks\",\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"synchronization-configs\",\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"synchronization-config/:oid\",\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager/:geoobjectuid/:geoobjecttypecode/:datestr/:hideSearchOptions\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager/:geoobjectuid/:geoobjecttypecode/:datestr/:hideSearchOptions/:backReference\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code/:editOnly\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code/:editOnly/:backReference\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"sync/details/:oid\",\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n})\nexport class RegistryRoutingModule { }\n"],"sourceRoot":""}