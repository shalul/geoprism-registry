{"version":3,"sources":["webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/importer/spreadsheet.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/shapefile.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.ts","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/registry.module.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/model/hierarchy.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/spreadsheet.component.html","webpack:///./src/app/registry/component/importer/shapefile.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["http","eventService","init","this","get","acp","toPromise","getGeoObjectTypes","types","params","HttpParams","set","JSON","stringify","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","date","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","typeCode","headers","HttpHeaders","start","post","finally","complete","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","code","addAttributeType","geoObjTypeId","attribute","updateAttributeType","deleteAttributeType","attributeName","addAttributeTermTypeOption","parentTermCode","term","updateAttributeTermTypeOption","termJSON","deleteAttributeTermTypeOption","termCode","getGeoObject","id","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestions","text","type","parent","hierarchy","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","pageSize","pageNumber","sortAttr","isAscending","toString","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","oid","versionType","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","createMasterList","list","createMasterListVersion","forDate","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","parentTreeNode","geoObject","isNew","masterListId","notes","data","filter","sort","length","values","value","valueAttribute","publishShapefile","progress","getMasterListsByOrg","getPublishMasterListJobs","getOrganizations","RegistryService","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeLeafTypes","getTypeAncestors","hierarchyCode","getHierarchiesForType","includeTypes","createGeoObjectSynonym","entityId","label","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","removeTerm","IOService","PRESENT","TreeEntity","description","children","addChild","push","Term","GeoObject","attributes","GeoObjectType","Task","geoObjectType","getVotAtDate","attrCode","lService","retVot","startDate","endDate","time","getTime","i","attr","create","isChangeOverTime","forEach","vot","Date","parse","Array","isArray","GeoObjectOverTime","ValueOverTime","isDefault","required","unique","Attribute","isChange","rootTerm","termOptions","setRootTerm","AttributeTerm","precision","scale","AttributeDecimal","GeoObjectTypeModalStates","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","PaginationPage","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","MasterList","MasterListVersion","HierarchyOverTime","ImportStrategy","MasterListByOrg","getHierarchyTypes","addChildToHierarchy","parentGeoObjectTypeCode","childGeoObjectTypeCode","removeFromHierarchy","createHierarchyType","htJSON","updateHierarchyType","deleteHierarchyType","HierarchyService","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","GeoObjectTypeManagementService","getAllActions","requestId","applyAction","action","applyActionStatusProperties","lockAction","actionId","unlockAction","getAllRequests","getRequestDetails","confirmChangeRequest","execute","rejectAllActions","actions","approveAllActions","submitChangeRequest","ChangeRequestService","transform","ToEpochDateTimePipe","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","EventEmitter","message","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","animate","onAnimationDone","event","isValid","indexOf","AttributeInputComponent","ImportSheet","Location","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","service","iService","bsModalRef","readonly","edit","onMasterListChange","master","then","catch","err","error","displayLabel","representativityDate","publishDate","listAbstract","process","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","hierarchies","leaf","frequency","isMaster","visibility","org","getIsDisabled","elClasses","target","classList","onChange","onSubmit","response","hide","onCancel","localizedMessage","PublishModalComponent","modalService","changeDetectorRef","registryService","elRef","changeRequestService","datePipe","toEpochDateTimePipe","preGeoObject","calculatedPreObject","postGeoObject","calculatedPostObject","attributeExcludes","readOnly","isEditingGeometries","isGeometryInlined","valid","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","attributeForm","statusChanges","subscribe","result","emit","apply","geomAttr","geometry","LocalizedValue","calculate","changes","calculateCurrent","geometryEditor","reload","goot","object","formatDate","localize","handleChangeCode","e","onManageAttributeVersions","show","ManageVersionsModalComponent","animated","backdrop","ignoreBackdropClick","content","geoObjectOverTime","isNewGeoObject","onAttributeVersionChange","versionObj","tfInit","onManageGeometryVersions","isDifferentText","trim","isDifferentValue","onSelectPropertyOption","option","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attrOpts","removeStatuses","isStatusChanged","pre","preCompare","postCompare","getTypeDefinition","key","getIsValid","GeoObjectSharedAttributeEditorComponent","localizeService","geoObjectTypes","geoObjectId","reason","dataSource","Observable","observer","results","a","b","localizedValue","toLowerCase","pos","getGeoObjectTypePosition","splice","onValidChange","newValid","attributeEditor","changeTypeaheadLoading","typeaheadLoading","typeaheadOnSelect","item","submit","goSubmit","saveDraw","cancel","SuccessModalComponent","decode","ErrorModalComponent","SubmitChangeRequestComponent","valueChange","LocalizedInputComponent","contextMenuService","instance","Instance","nodes","currentHierarchy","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","desiredHierarchy","setLocales","locales","setHierarchies","setNodesOnInit","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","index","findIndex","h","rootGeoObjectTypes","setTimeout","treeModel","expandAll","setNodesForHierarchy","hierarchyType","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","updateHierarchy","getHierarchyLabel","child","gOT","childType","nodeMenuComponent","leafMenuComponent","preventDefault","stopPropagation","setFocusedNode","isExpanded","collapse","hierarchyOnClick","update","createHierarchy","CreateHierarchyTypeModalComponent","onHierarchytTypeCreate","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","CreateGeoObjTypeModalComponent","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","manageGeoObjectType","ManageGeoObjectTypeModalComponent","onGeoObjectTypeSubmitted","position","addChildAndRootToHierarchy","that","AddChildToHierarchyModalComponent","allGeoObjectTypes","toRoot","onNodeChange","current","deleteTreeNode","removeTreeNode","n","hasChildren","isActive","onDrop","element","allowDrop","HierarchyComponent","localizationService","isAdmin","isMaintainer","isContributor","isContributer","renderContent","pageTitle","DataPageComponent","geometryChange","onClickEdit","mapboxgl","accessToken","mapDiv","nativeElement","Math","floor","random","map","Map","container","style","zoom","center","on","initMap","removeLayers","addLayers","remove","editingControl","getAll","features","preGeometry","zoomToBbox","addControl","NavigationControl","addEditButton","enableEditing","simpleEditControl","editEmitter","geometryType","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","postGeometry","add","removeSource","prefix","sourceName","removeLayer","getSource","renderGeometryAsLayer","color","addSource","addLayer","setData","bboxCode","bboxType","bboxDate","boundArr","bounds","LngLatBounds","fitBounds","padding","featureCollection","polygons","feature","j","coordinates","points","lines","console","log","GeoObjectEditorMapComponent","ChangeRequestPageComponent","router","authService","orgs","onCreate","createDate","lastUpdateDate","admin","lists","onView","navigate","onEdit","pair","ret","onDelete","arr","MasterListManagerComponent","_stepConfig","StepIndicatorComponent","ioService","activeJobsPage","count","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","interval","onCompleteJobsPageChange","unsubscribe","formatJobStatus","job","status","formatStepConfig","page","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","order","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","ScheduledJobsComponent","route","allSelected","timeCounter","isPolling","hasRowValidationProblem","snapshot","onPageChange","stopPolling","formatAffectedRows","rows","replace","formatValidationResolve","onProblemResolved","problem","getFriendlyProblemType","probType","JobConflictModalComponent","onConflictAction","importErrors","problems","startPolling","onViewAllActiveJobs","toggleAll","row","selected","onReuploadAndResume","ReuploadModalComponent","onResolveScheduledJob","JobComponent","pService","p","isPublished","searchPlaceholder","paramMap","version","isCollapsed","onSort","name","clearFilters","search","toggleFilter","getValues","base","unshift","handleDateChange","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","includes","editModal","GeoObjectEditorComponent","configureAsExisting","isGeometryEditable","setMasterListId","setOnSuccessCallback","onGoto","window","open","onPublish","subscription","onNewGeoObject","configureAsNew","onExport","ExportFormatModalComponent","onFormat","format","location","href","encodeURIComponent","MasterListComponent","tabIndex","submitFunction","arePropertiesValid","areParentsValid","dateStr","day","getUTCDate","getUTCFullYear","getUTCMonth","findVotWithStartDate","votArray","func","onSuccessCallback","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","goPropertiesPost","configureFromImportError","importError","parents","importErrorId","resolution","fetchGeoObject","fetchHierarchies","typeTypeCode","getTypeAheadObservable","ptn","properties","parentSelector","changePage","nextPage","force","persistModelChanges","getHierarchies","onViewMetadata","MasterListViewComponent","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","toUpperCase","getMyTasks","onCompletedTasksPageChange","onCompleteTask","task","completeTask","onMoveTaskToInProgress","setTaskStatus","onViewAllCompletedTasks","TaskViewerComponent","pageNum","whereStatus","taskId","TaskService","LocalizedTextComponent","configurationChange","stateChange","onNext","AttributesPageComponent","locations","onBack","LocationPageComponent","hasProblems","locationProblems","resolved","handleError","exclusions","exclusion","LocationProblemPageComponent","termProblems","attributeCode","TermProblemPageComponent","cHierarchies","parentMap","entries","pot","onManageVersions","find","ManageParentVersionsModalComponent","onVersionChange","CascadingGeoSelector","organizations","organizationCode","onSelect","gObj","selectedGeoObjectType","toggleIsLeaf","isLeaf","toggleIsGeometryEditable","confirmBsModalRef","geoObjectTypeManagementService","modalStateSubscription","onModalStateChange","onGeoObjectTypeChange","close","importStrategies","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","append","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","SpreadsheetModalComponent","onErrorItem","onClick","queue","uploadAll","SpreadsheetComponent","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","ShapefileModalComponent","ShapefileComponent","visible","onAdd","onRemove","SimpleEditControl","editingGeometry","hasDuplicateDate","vAttribute","onDateChange","vAttributes","snapDates","votArr","prev","formatDateString","onAddNewVersion","terms","editGeometry","getVersionData","versions","localeValues","val","getDefaultLocaleVal","locale","defVal","locVal","setDateAttribute","newI","pendI","dateObj","month","objectKeys","Object","keys","requests","columns","filterCriteria","prop","sortable","width","refresh","onExecute","changeRequest","request","onApproveAll","onRejectAll","requestTrackBy","toggle","parentElement","className","toggleId","criteria","setActionStatus","approvalStatus","getActiveDetailComponent","actionType","endsWith","showActionDetail","ActionDetailModalComponent","curAction","RequestTableComponent","ChangeRequest","AbstractAction","UpdateGeoObjectAction","CreateGeoObjectAction","AddChildAction","RemoveChildAction","GovernanceStatus","PageEvent","SetParentAction","cuDetail","endEdit","arDetail","spDetail","confirm","onProblemResolvedListener","title","cancelText","warning","onDeleteMasterListVersion","updateList","onPublishShapefile","onDownloadShapefile","PublishedMasterListHistoryComponent","MasterListHistoryComponent","modalStepIndicatorService","modalStepConfig","manageAttributes","onDeleteAttribute","setStepConfig","defineAttributeModal","defineAttribute","editAttribute","removeAttributeType","attributeType","ManageAttributesModalComponent","validator","c","geoObjectAttributeCode","validate","GeoObjectAttributeCodeValidator","newAttribute","setAttribute","attributeInputComponent","isFormValid","DefineAttributeModalContentComponent","manageTermOption","openAddTermOptionForm","TermOptionWidgetComponent","back","EditAttributeModalContentComponent","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","LocationProblemComponent","termLabel","termId","createOption","parentCode","ignoreValue","TermProblemComponent","termOption","EditTermOptionInputComponent","geoObjectTypeChange","editGeoObjectType","GeoObjectTypeInputComponent","enableTermOptionForm","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","ManageTermOptionsComponent","entry","pType","uid","ancestors","ancestor","geoObjectJson","canDeactivate","afterDeactivate","isDeactivating","unlockActionSync","startEdit","$","ajax","method","success","async","CreateUpdateGeoObjectDetailComponent","original","assign","AddRemoveChildDetailComponent","SetParentDetailComponent","onEditGeoObject","ImportProblemWidgetComponent","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","RegistryModule","HierarchyType","Hierarchy","HierarchyNode","items","GeoObjectAttributeExcludesPipe","el","onKeyDown","OnlyNumber","keyCode","ctrlKey","shiftKey","MapService","getNewLocaleInfo","installLocale","language","country","variant","LocalizationManagerService","MaintainerGuard","ContributerGuard","RegistryRoutingModule"],"mappings":"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","file":"1.chunk.js","sourcesContent":["///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, TestScheduler } from 'rxjs';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/finally';\r\n\r\nimport { GeoObject, GeoObjectType, Attribute, Term, MasterList, MasterListVersion, ParentTreeNode, \r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage, MasterListByOrg } from '../model/registry';\r\nimport { HierarchyNode, HierarchyType } from '../model/hierarchy';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\nimport { templateJitUrl } from '@angular/compiler';\r\nimport { Organization } from '../../admin/model/settings';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }>( acp + '/cgr/init' )\r\n            .toPromise();\r\n    }\r\n    \r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes( types: any ): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'types', JSON.stringify( types ) );\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>( acp + '/cgr/geoobjecttype/get-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects( childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string ): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'childId', childId )\r\n        params = params.set( 'childTypeCode', childTypeCode )\r\n        params = params.set( 'parentTypes', JSON.stringify( parentTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        if ( date != null ) {\r\n            params = params.set( 'date', date );\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>( acp + '/cgr/geoobject/get-parent-geoobjects', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    getChildGeoObjects( parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean ): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'parentId', parentId )\r\n        params = params.set( 'parentTypeCode', parentTypeCode )\r\n        params = params.set( 'childrenTypes', JSON.stringify( childrenTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>( acp + '/cgr/geoobject/getchildren', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType( gtJSON: string ): Promise<GeoObjectType> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/create', JSON.stringify( { 'gtJSON': gtJSON } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType( gtJSON: GeoObjectType ): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/update', JSON.stringify( { \"gtJSON\": gtJSON } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType( code: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/delete', JSON.stringify( { code: code } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    addAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/addattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/updateattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType( geoObjTypeId: string, attributeName: string ): Promise<boolean> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<boolean>( acp + '/cgr/geoobjecttype/deleteattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeName': attributeName } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption( parentTermCode: string, term: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( { 'parentTermCode': parentTermCode, 'termJSON': term } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption( termJSON: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/updateterm', JSON.stringify( { 'termJSON': termJSON } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption( termCode: string ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { 'termCode': termCode } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject( id: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'id', id )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds( code: string, typeCode: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n    \r\n    getGeoObjectBoundsAtDate( code: string, typeCode: string, date: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n        params = params.set( 'date', date );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject-time/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode( code: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get-code', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject( code: string, typeCode: string ): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>( acp + '/cgr/geoobject/get-hierarchies-over-time', { params: params } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string, date: string ): Promise<GeoObject> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if ( date != null ) {\r\n            params.date = date;\r\n        }\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead( text: string, type: string ): Promise<GeoObject> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/etl/get-active', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/etl/get-completed', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString())\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>( acp + '/etl/get-import-details', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/import-resolve', JSON.stringify( { historyId: historyId } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n    \r\n    submitValidationResolve( config: any ): Promise<any> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n  \r\n      this.eventService.start();\r\n  \r\n      return this.http\r\n        .post<MasterList>( acp + '/etl/validation-resolve', JSON.stringify( { config: config } ), { headers: headers } )\r\n        .finally(() => {\r\n            this.eventService.complete();\r\n        } )\r\n        .toPromise();\r\n    }\r\n    \r\n    submitErrorResolve( config: any ): Promise<any> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<MasterList>( acp + '/etl/error-resolve', JSON.stringify( { config: config } ), { headers: headers } )\r\n        .finally(() => {\r\n            this.eventService.complete();\r\n        } )\r\n        .toPromise();\r\n    }\r\n\r\n    getMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>( acp + '/master-list/list-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListHistory( oid: string, versionType: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n        params = params.set( 'versionType', versionType );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/versions', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListVersion( oid: string ): Promise<MasterListVersion> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterListVersion>( acp + '/master-list/version', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<string[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<string[]>( acp + '/localization/get-locales', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime( geoObjectCode: string, geoObjectTypeCode: string ): Promise<GeoObjectOverTime> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        // let params: HttpParams = new HttpParams();\r\n        // params = params.set( 'geoObjectCode', geoObjectCode );\r\n        // params = params.set( 'geoObjectTypeCode', geoObjectTypeCode );\r\n        // params = params.set( 'attributeName', attributeName );\r\n\r\n        // return this.http\r\n        //     .get<ValueOverTime[]>( acp + '/cgr/geoobject/getAttributeVersions', { params: params } )\r\n        //     .toPromise();\r\n\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', geoObjectCode );\r\n        params = params.set( 'typeCode', geoObjectTypeCode );\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>( acp + '/cgr/geoobject-time/get-code', { params: params } )\r\n            .toPromise();\r\n\r\n    }\r\n\r\n    newGeoObjectOverTime( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject-time/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n\r\n\r\n    // getAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string ): any[] {\r\n    //     let test =[\r\n    //         {\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":{\"localeValues\":[\r\n    //             {\"locale\":\"defaultLocale\",\"value\":\"Anlong Veaeng\"}]}}\r\n    //     ]\r\n\r\n    //     // let test = [{\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":\"test\"}];\r\n\r\n    //     return test;\r\n    // }\r\n\r\n\r\n    setAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[] ): Promise<Response> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>( acp + '/cgr/geoobject/setAttributeVersions', JSON.stringify( params ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterList( list: MasterList ): Promise<MasterList> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>( acp + '/master-list/create', JSON.stringify( { list: list } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterListVersion( oid: string, forDate: string ): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterListVersion>( acp + '/master-list/create-version', JSON.stringify( { oid: oid, forDate: forDate } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterListVersions( oid: string ): Promise<{ job: string }> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<{ job: string }>( acp + '/master-list/publish-versions', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterList( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    deleteMasterListVersion( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove-version', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    publishMasterList( oid: string ): Observable<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http.post<MasterListVersion>( acp + '/master-list/publish', JSON.stringify( { oid: oid } ), { headers: headers } );\r\n    }\r\n\r\n    getMasterList( oid: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit( parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTreeNode: parentTreeNode, geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if ( notes != null ) {\r\n            params['notes'] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geoobject-editor/apply', JSON.stringify( params ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    data( oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string } ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            sort: sort\r\n        } as any;\r\n\r\n        if ( pageNumber != null ) {\r\n            params.pageNumber = pageNumber;\r\n        }\r\n\r\n        if ( pageSize != null ) {\r\n            params.pageSize = pageSize;\r\n        }\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/master-list/data', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    values( oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[] ): Promise<{ label: string, value: string }[]> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            attributeName: attributeName,\r\n            valueAttribute: valueAttribute\r\n        } as any;\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        if ( value != null && value.length > 0 ) {\r\n            params.value = value;\r\n        }\r\n\r\n\r\n        return this.http\r\n            .post<{ label: string, value: string }[]>( acp + '/master-list/values', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    publishShapefile( oid:string  ): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<MasterListVersion>( acp + '/master-list/generate-shapefile', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    progress( oid: string ): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<Progress>( acp + '/master-list/progress', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\tgetMasterListsByOrg(): Promise<{ locales: string[], orgs: MasterListByOrg[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + '/master-list/list-org', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n    getPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('oid', oid);\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/master-list/get-publish-jobs', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n    getOrganizations(): Promise<Organization[]> {\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(acp + '/cgr/organizations/get-all')\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            })\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/finally';\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from '../model/io';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    importSpreadsheet( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport( configuration: ImportConfiguration ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/cancel-import', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    importShapefile( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    listGeoObjectTypes( includeLeafTypes: boolean ): Promise<{ label: string, code: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'includeLeafTypes', includeLeafTypes.toString() );\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string }[]>( acp + '/cgr/geoobjecttype/list-types', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors( code: string, hierarchyCode: string ): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'hierarchyCode', hierarchyCode );\r\n\r\n        return this.http\r\n            .get<Location[]>( acp + '/cgr/geoobjecttype/get-ancestors', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType( code: string, includeTypes: boolean ): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'includeTypes', includeTypes.toString() );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>( acp + '/cgr/geoobjecttype/get-hierarchies', { params: params } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string ): Promise<any> {\r\n        \r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym( entityId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/geo-synonym/createGeoEntitySynonym', JSON.stringify( { entityId: entityId, label: label } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym( synonymId: string, vOid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geo-synonym/deleteGeoEntitySynonym', JSON.stringify( { synonymId: synonymId, vOid: vOid } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    getTermSuggestions( mdAttributeId: string, text: string, limit: string ): Promise<{ text: string, data: any }[]> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'mdAttributeId', mdAttributeId );\r\n        params = params.set( 'text', text );\r\n        params = params.set( 'limit', limit );\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>( acp + '/uploader/getClassifierSuggestions', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTermSynonym( classifierId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { classifierId: classifierId, label: label } );\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/uploader/createClassifierSynonym', data, { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym( synonymId: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { synonymId: synonymId } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/uploader/deleteClassifierSynonym', data, { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTerm( label: string, code: string, parentTermCode: string ): Promise<Term> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm( termCode: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { termCode: termCode } ), { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import { LocalizedValue } from '../../shared/model/core';\nimport { LocalizationService } from '../../shared/service/localization.service';\nimport { ImportConfiguration } from './io';\nimport { Organization } from '../../admin/model/settings';\n\nexport const PRESENT: string = '5000-12-31'\n\nexport class TreeEntity {\n\tid: string;\n\tname: string;\n\thasChildren: boolean;\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\n\tconstructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n\t\tthis.code = code;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t}\n\tchildren: Term[] = [];\n\n\taddChild(term: Term) {\n\t\tthis.children.push(term);\n\t}\n}\n\nexport class GeoObject {\n\ttype: string;\n\tgeometry: any;\n\tproperties: {\n\t\tuid: string,\n\t\tcode: string,\n\t\tdisplayLabel: LocalizedValue,\n\t\ttype: string,\n\t\tstatus: string[],\n\t\tsequence: string\n\t\tcreateDate: string,\n\t\tlastUpdateDate: string,\n\t};\n}\n\nexport class GeoObjectType {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tgeometryType: string;\n\tisLeaf: boolean;\n\tisGeometryEditable: boolean;\n\torganizationCode: string;\n\tattributes: Array<Attribute | AttributeTerm | AttributeDecimal> = [];\n}\n\nexport class Task {\n  id: string;\n  templateKey: string;\n  msg: string;\n  title: string;\n  status: string;\n  createDate: number;\n  completedDate: number;\n}\n\n// export class Attribute {\n\n//   name: string;\n//   type: string;\n//   label: string;\n//   description: string;\n//   isDefault: boolean;\n// }\n\n// export class AttributeTerm extends Attribute {\n//     descendants: Attribute[];\n//     rootTerm: string;\n// }\n\nexport class GeoObjectOverTime {\n\n\tgeoObjectType: GeoObjectType;\n\n\tattributes: any;\n\n\tpublic constructor(geoObjectType: GeoObjectType, attributes: any) {\n\t\tthis.geoObjectType = geoObjectType;\n\t\tthis.attributes = attributes;\n\t}\n\n\tpublic getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n\t\tlet retVot = { startDate: date, endDate: null, value: null };\n\n\t\tconst time = date.getTime();\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.code === attrCode) {\n\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\tretVot.value = lService.create();\n\t\t\t\t}\n\n\t\t\t\tif (attr.isChangeOverTime) {\n\t\t\t\t\tlet values = this.attributes[attr.code].values;\n\n\t\t\t\t\tvalues.forEach(vot => {\n\n\t\t\t\t\t\tconst startDate = Date.parse(vot.startDate);\n\t\t\t\t\t\tconst endDate = Date.parse(vot.endDate);\n\n\t\t\t\t\t\tif (time >= startDate && time <= endDate) {\n\n\t\t\t\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\t\t\t\tretVot.value = JSON.parse(JSON.stringify(vot.value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (attr.type === 'term' && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n\t\t\t\t\t\t\t\tretVot.value = vot.value[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tretVot.value = vot.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tretVot.value = this.attributes[attr.code];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn retVot;\n\t}\n}\n\nexport class ValueOverTime {\n\tstartDate: string;\n\tendDate: string;\n\tvalue: any;\n\tremovable?: boolean;\n}\n\nexport class Attribute {\n\tcode: string;\n\ttype: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tisDefault: boolean;\n\tunique: boolean;\n\tisChangeOverTime?: boolean;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n\t\tthis.code = code;\n\t\tthis.type = type;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t\tthis.isDefault = isDefault;\n\t\tthis.unique = unique;\n\t\tthis.isChangeOverTime = isChangeOverTime;\n\t}\n\n}\n\nexport class AttributeTerm extends Attribute {\n\t//descendants: Attribute[];\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n\n\trootTerm: Term = new Term(null, null, null);\n\n\ttermOptions: Term[] = [];\n\n\tsetRootTerm(term: Term) {\n\t\tthis.rootTerm = term;\n\t}\n}\n\nexport class AttributeDecimal extends Attribute {\n\tprecision: number = 32;\n\tscale: number = 8;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n}\n\nexport enum GeoObjectTypeModalStates {\n\t\"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n\t\"editAttribute\" = \"EDIT-ATTRIBUTE\",\n\t\"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n\t\"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n\t\"editTermOption\" = \"EDIT-TERM-OPTION\",\n\t\"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport class TreeNode {\n\tgeoObject: GeoObject;\n\thierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n\tchildren: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n\tparents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n\tstate: string;\n\tattribute: any;\n\ttermOption: any;\n}\n\nexport class PaginationPage {\n\tpageNumber: number;\n\tcount: number;\n\tpageSize: number;\n\tresults: any[];\n}\n\nexport class ScheduledJob {\n  jobId: string;\n\tfileName: string;\n\thistoryId: string;\n\tstage: string;\n\tstatus: string;\n\tauthor: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tworkProgress: number;\n\tworkTotal: number;\n\tstartDate: string;\n\tendDate: string;\n\timportedRecords: number;\n\tconfiguration: ImportConfiguration;\n\timportErrors: PaginationPage;\n\tproblems: PaginationPage;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n\tstepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n\texception: ServerException;\n\tobject: ImportErrorObject;\n\tobjectType: string;\n\tid: string;\n\tresolution: string;\n\tselected?: boolean;\n}\n\nexport class ServerException {\n\tattributes: ServerExceptionAttribute[];\n\ttype: string;\n\tmessage: string;\n}\n\nexport class ServerExceptionAttribute {\n\tvalue: string;\n\tkey: string;\n}\n\nexport class ImportErrorObject {\n\tgeoObject: GeoObjectOverTime;\n\tparents: HierarchyOverTime[];\n\tisNew: boolean;\n}\n\nexport class StepConfig {\n\tsteps: Step[];\n}\n\nexport class Step {\n\tlabel: string;\n\tcomplete: boolean;\n\tenabled: boolean;\n}\n\nexport class MasterList {\n\toid: string;\n\ttypeCode: string;\n\tdisplayLabel: LocalizedValue;\n\tcode: string;\n\trepresentativityDate: Date;\n\tpublishDate: Date;\n\tlistAbstract: string;\n\tprocess: string;\n\tprogress: string;\n\taccessConstraints: string;\n\tuseConstraints: string;\n\tacknowledgements: string;\n\tdisclaimer: string;\n\tcontactName: string;\n\torganization: string;\n\ttelephoneNumber: string;\n\temail: string;\n\thierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n\tleaf: boolean;\n\tfrequency: string;\n\tisMaster: boolean;\n\tvisibility: string;\n\tadmin: boolean;\n\tversions?: MasterListVersion[]\n}\n\nexport class MasterListVersion {\n\tdisplayLabel: string;\n\toid: string;\n\ttypeCode: string;\n\tleaf: boolean;\n\tmasterlist: string;\n\tforDate: string;\n\tcreateDate: string;\n\tpublishDate: string;\n\tattributes: any[];\n\tisGeometryEditable: boolean;\n\tlocales?: string[];\n\tshapefile?: boolean;\n}\n\nexport class HierarchyOverTime {\n\tcode: string;\n\tlabel: string;\n\ttypes: {\n\t\tcode: string;\n\t\tlabel: string;\n\t}[];\n\tentries: {\n\t\tstartDate: string;\n\t\tendDate: string;\n\t\tparents: { [k: string]: { text: string; geoObject: GeoObject } };\n\t}[];\n}\n\nexport enum ImportStrategy {\n\t\"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n\t\"NEW_ONLY\" = \"NEW_ONLY\",\n\t\"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport class MasterListByOrg {\n\toid: string;\n\tlabel: string;\n\tlists: { label: string, oid: string, createDate: string, lastUpdateDate: string, admin: boolean, isMaster: boolean }[];\n}\n\n\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\n\nimport { HierarchyType } from '../model/hierarchy';\nimport { TreeEntity } from '../model/registry';\nimport { EventService } from '../../shared/service/event.service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    getHierarchyTypes( types: any ): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'types', JSON.stringify(types) );\n        \n        return this.http\n            .get<HierarchyType[]>( acp + '/cgr/hierarchytype/get-all', {params: params})\n            .toPromise();\n    }\n    \n    addChildToHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n\t   let headers = new HttpHeaders( {\n           'Content-Type': 'application/json'\n       } );\n\n       this.eventService.start();\n\n       return this.http\n           .post<HierarchyType>( acp + '/cgr/hierarchytype/add', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n           .finally(() => {\n               this.eventService.complete();\n           } )\n           .toPromise();\n    }\n    \n    removeFromHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n \t   let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/remove', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n     }\n    \n    createHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/create', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n    \n    updateHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/update', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n    \n    deleteHierarchyType( code: string ): Promise<TreeEntity> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n        \n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>( acp + '/cgr/hierarchytype/delete', { 'code': code }, { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise()\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\nimport {  ManageGeoObjectTypeModalState } from '../model/registry';\r\n\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    constructor(  ) { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n        \r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ChangeRequest, AbstractAction } from '../model/crtable';\nimport { EventService } from '../../shared/service/event.service';\nimport { GeoObject } from '../model/registry';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\t  getAllActions( requestId: string ): Promise<AbstractAction[]> {\n        let params: HttpParams = new HttpParams();\n\n        if ( requestId != null ) {\n            params = params.set( 'requestId', requestId );\n\t\t}\n\t\t\n        this.eventService.start();\n\n        return this.http\n            .get<AbstractAction[]>( acp + '/changerequest/getAllActions', { params: params } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n\n//    fetchData( cb: any, requestId: string ): Promise<HttpResponse> {\n//        let params: HttpParams = new HttpParams();\n//\n//        if ( requestId != null ) {\n//            params = params.set( 'requestId', requestId );\n//        }\n//\n//        this.eventService.start();\n//\n//        return this.http\n//            .get( acp + '/changerequest/getAllActions', { params: params } )\n//            .finally(() => {\n//                this.eventService.complete();\n//            } )\n//            .toPromise()\n//            .then( response => {\n//                cb( response.json() );\n//\n//                return response;\n//            } )\n//    }\n\n    applyAction( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyAction', JSON.stringify( { action: action } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n\tapplyActionStatusProperties( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyActionStatusProperties', JSON.stringify( { action: action } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n\t\n    lockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/lockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    unlockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/unlockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    getAllRequests(filter: string): Promise<ChangeRequest[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tparams = params.set('filter', filter );\n\n        return this.http.get<ChangeRequest[]>( acp + '/changerequest/get-all-requests', { params: params } )\n            .toPromise();\n    }\n\n    getRequestDetails( requestId: string ): Promise<ChangeRequest> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'requestId', requestId );\n\n        this.eventService.start();\n\n        return this.http.get<ChangeRequest>( acp + '/changerequest/get-request-details', { params: params } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n\tconfirmChangeRequest( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/confirm-change-request', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n    execute( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/execute-actions', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    rejectAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/reject-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    approveAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/approve-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    submitChangeRequest( actions: string ): Promise<GeoObject> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'actions', actions )\n\n        this.eventService.start();\n\n        return this.http.post<GeoObject>( acp + '/cgr/submitChangeRequest', {actions: actions}, { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'toEpochDateTime',\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n    transform(date: string): any {\n        if (!date ) {\n            return date;\n        }\n       \n        return new Date(date).getTime();\n    }\n}","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\n\nimport { GeoObjectType, Attribute } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n \n@Component( {\n    selector: 'attribute-input',\n    templateUrl: './attribute-input.component.html',\n    styleUrls: ['./attribute-input.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms'))\n            //   transition('show => none', animate('100ms'))\n        ])\n    ]\n} )\nexport class AttributeInputComponent implements OnInit {\n\n    @Input() disableCodeField: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() isDecimal: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    @Output() attributeChange = new EventEmitter<Attribute>();\n    message: string = null;\n\n    state: string = 'none';\n\n    constructor( private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges() {\n \n    }\n\n    ngOnDestroy(){\n        \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    toggleIsUnique():void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if(this.attribute.code) {\n\n            // if code has a space\n            if(this.attribute.code.indexOf(\" \") !== -1){\n                return false;\n            }\n\n            return true;\n        }\n        \n        return false;\n    }\n}\n","import { GeoObjectType } from './registry';\n\nexport class ImportSheet {\n\tname: string;\n\tattributes: {\n\t\tboolean: string[];\n\t\tdate: string[];\n\t\tnumeric: string[];\n\t\ttext: string[];\n\t}\n}\n\nexport class Location {\n\tlabel: string;\n\tcode: string;\n\ttarget: string;\r\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: string;\n}\n\nexport class TermProblem {\n\tlabel: string;\n\tparentCode: string;\n\tmdAttributeId: string;\n\tattributeCode: string;\n\tattributeLabel: string;\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class LocationProblem {\n\tlabel: string;\n\ttype: string;\n\ttypeLabel: string;\n\tparent: string;\n\tcontext: { label: string, type: string }[];\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class Exclusion {\n\tcode: string;\n\tvalue: string;\n}\n\nexport class Synonym {\n\tlabel: string;\n\tsynonymId: string;\n\tvOid?: string;\n}\n\nexport class ImportConfiguration {\n\ttype: GeoObjectType;\n\tsheet: ImportSheet;\n\tdirectory: string;\n\tfilename: string;\n\thierarchy: string;\n\tpostalCode: boolean;\n\thasPostalCode: boolean;\n\tlocations: Location[];\n\tformatType: string;\n\tobjectType: string;\n\tlocationProblems: LocationProblem[];\n\ttermProblems: TermProblem[];\n\texclusions: Exclusion[];\n\thierarchies: { code: string, label: string }[];\n\tstartDate: string;\n\tendDate: string;\n\tparentLookupType: string;\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListByOrg } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n@Component({\n\tselector: 'publish-modal',\n\ttemplateUrl: './publish-modal.component.html',\n\tstyleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\tmessage: string = null;\n\tmaster: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonMasterListChange: Subject<MasterList>;\n\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n\treadonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\tedit: boolean = false;\n\n\n\tconstructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\n\t\tthis.onMasterListChange = new Subject();\n\n\t\tif (this.master == null || !this.readonly) {\n\t\t\tthis.iService.listGeoObjectTypes(true).then(types => {\n\t\t\t\tthis.types = types;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.master = {\n\t\t\t\toid: null,\n\t\t\t\ttypeCode: '',\n\t\t\t\tdisplayLabel: this.lService.create(),\n\t\t\t\tcode: '',\n\t\t\t\trepresentativityDate: null,\n\t\t\t\tpublishDate: null,\n\t\t\t\tlistAbstract: '',\n\t\t\t\tprocess: '',\n\t\t\t\tprogress: '',\n\t\t\t\taccessConstraints: '',\n\t\t\t\tuseConstraints: '',\n\t\t\t\tacknowledgements: '',\n\t\t\t\tdisclaimer: '',\n\t\t\t\tcontactName: '',\n\t\t\t\torganization: '',\n\t\t\t\ttelephoneNumber: '',\n\t\t\t\temail: '',\n\t\t\t\thierarchies: [],\n\t\t\t\tleaf: false,\n\t\t\t\tfrequency: 'ANNUAL',\n\t\t\t\tisMaster: null,\n\t\t\t\tvisibility: null\n\t\t\t};\n\t\t}\n\t}\n\n\tinit(org: MasterListByOrg): void {\n\t\tthis.master.organization = org.oid;\n\t}\n\n\tgetIsDisabled(event): boolean {\n\t\tlet elClasses = event.target.classList;\n\t\tfor (let i = 0; i < elClasses.length; i++) {\n\t\t\tlet c = elClasses[i];\n\t\t\tif (c === 'disabled') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tonChange(): void {\n\n\t\tif (this.master.typeCode != null && this.master.typeCode.length > 0) {\n\t\t\tthis.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n\t\t\t\tthis.master.hierarchies = hierarchies;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.master.hierarchies = [];\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.createMasterList(this.master).then(response => {\n\n\t\t\tthis.onMasterListChange.next(response);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCancel(): void {\n\t\tthis.bsModalRef.hide()\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <!-- <div class=\"col-md-12\"> -->\n            <div *ngIf=\"preGeoObject\">\n                <div *ngIf=\"!this.isEditingGeometries\" class=\"row\"> \n                    <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    <div class=\"col-md-12\">\n                        <span class=\"text\"></span>\n                            <div class=\"panel\" style=\"box-shadow: none;\">\n                                <div class=\"panel-body\">\n                                    <ul class=\"list-group\">\n                                        <li class=\"list-group-item\" style=\"text-align:left; border: 1px solid #ddd;\" *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes\">\n                                            <h5 *ngIf=\"attr.code !== 'geometry'\">\n\n                                              <span *ngIf=\"attr.code === 'code'\">\n                                                <localize key=\"geoobject.code.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code === 'displayLabel'\">\n                                                <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\">\n                                                {{attr.label.localizedValue}}\n                                              </span>\n                                              \n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>\n                                            </h5>\n                                            \n                                            <h5 *ngIf=\"attr.code === 'geometry'\">\n                                              <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>                                              \n                                            </h5>\n                                            \n\n                                            <div *ngIf=\"attr.code === 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"calculatedPostObject[attr.code]\" (change)=\"handleChangeCode($event)\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew\" required> \n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'character' && attr.code !== 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [ngModel]=\"calculatedPostObject[attr.code].value\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n\n                                              <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentText(attr)\">\n                                                <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                              </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'local'\">\n                                              <ul class=\"list-group\" *ngIf=\"calculatedPostObject[attr.code].value != null\">\n                                                <li class=\"list-group-item\" *ngFor=\"let localeValue of calculatedPostObject[attr.code].value.localeValues; let i = index\">\n                                                  <h5>{{localeValue.locale}}</h5>\n                                                  <input disabled [required]=\"localeValue.locale === 'defaultLocale'\" type=\"text\" [ngModel]=\"localeValue.value\" [name]=\"'mod-' + attr.code + '-' + localeValue.locale\"> \n\n                                                  <p class=\"warning-text\" *ngIf=\"!isNew && calculatedPreObject[attr.code].value != null && localeValue.value != null && localeValue.value.trim() !== calculatedPreObject[attr.code].value.localeValues[i].value\">\n                                                    <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value.localeValues[i].value}}\n                                                  </p>\n                                                </li>\n                                              </ul>                                            \n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'date'\">\n                                                <input type=\"date\" [ngModel]=\"calculatedPostObject[attr.code].value | date:'yyyy-MM-dd'\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n                                                    \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value | date}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'boolean'\">\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"calculatedPostObject[attr.code].value\" disabled [value]=\"true\" id=\"mod-{{attr.code}}-true\" name=\"mod-{{attr.code}}-true\">\n                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                </label>\n\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"!calculatedPostObject[attr.code].value\" disabled [value]=\"false\" id=\"mod-{{attr.code}}-false\" name=\"mod-{{attr.code}}-false\">\n                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                </label>\n                                                \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'float'\">\n                                                <input disabled type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\"\n                                                    id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'integer'\">\n                                                <input type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\" disabled id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'term'\">\n                                                <select id=\"mod-{{attr.code}}\" name=\"mod-term-{{attr.code}}\" class=\"select-area\" style=\"float:none;\" disabled [(ngModel)]=\"calculatedPostObject[attr.code].value\">\n                                                    <option value=\"\" ></option>\n                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attr.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                </select>\n\n                                                <!-- \n                                                <p class=\"warning-text\" *ngIf=\"calculatedPreObject[attr.code].value && calculatedPostObject[attr.code].value !== calculatedPreObject[attr.code].value\">\n                                                -->\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isStatusChanged(calculatedPostObject[attr.code].value, calculatedPreObject[attr.code].value)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'geometry' && this.isGeometryInlined\">\n                                              <geoobject-editor-map #geometryEditor\n                                                [geometryType]=\"this.geoObjectType.geometryType\"\n                                                [readOnly]=\"true\"\n                                                [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                                                [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                                                [bboxCode]=\"this.preGeoObject.attributes.code\"\n                                                [bboxType]=\"this.geoObjectType.code\"\n                                                (onClickEdit)=\"this.onManageGeometryVersions()\"\n                                                [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                                              </geoobject-editor-map>\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.isChangeOverTime\" class=\"button-holder\" style=\"text-align:left;\" >\n                                              <button type=\"submit\" style=\"\" (click)=\"onManageAttributeVersions(attr)\" class=\"btn btn-primary\" role=\"button\">\n                                                <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                                              </button>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                    </div>\n                 </div>\n                 <div *ngIf=\"this.isEditingGeometries && !this.isGeometryInlined\">\n                   <!-- <div class=\"label-holder\">\n                     <label>\n                      <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                     </label>\n                   </div> -->\n                   <div class=\"\">\n                     <geoobject-editor-map #geometryEditor \n                       [geometryType]=\"this.geoObjectType.geometryType\"\n                       [readOnly]=\"true\"\n                       [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                       [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                       [bboxCode]=\"this.preGeoObject.attributes.code\"\n                       [bboxType]=\"this.geoObjectType.code\"\n                       (onClickEdit)=\"this.onManageGeometryVersions()\"\n                       [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                     </geoobject-editor-map>\n                   </div>\n                 </div>\n           </div>\n        <!-- </div> -->\n    </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { ManageVersionsModalComponent } from './manage-versions-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, PRESENT } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport Utils from '../../utility/Utils';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-shared-attribute-editor',\n    templateUrl: './geoobject-shared-attribute-editor.component.html',\n    styleUrls: ['./geoobject-shared-attribute-editor.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is shared between:\n * - crtable (create-update-geo-object action detail)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget\n * \n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    private bsModalRef: BsModalRef;\n\n    /*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    @Input() preGeoObject: GeoObjectOverTime = null;\n\n    calculatedPreObject: any = {};\n\n    /*\n\t * The state of the GeoObject being modified\n\t */\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    calculatedPostObject: any = {};\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isEditingGeometries = false;\n\n    @Input() isGeometryInlined = false;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n    isValid: boolean = true;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n    @ViewChild( \"attributeForm\" ) attributeForm;\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private datePipe: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private lService: LocalizationService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.preGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\n        if ( this.postGeoObject == null ) {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // Object.assign is a shallow copy. We want a deep copy.\n        }\n        else {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.postGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n        }\n\n        this.attributeForm.statusChanges.subscribe( result => {\n            this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n            this.valid.emit( this.isValid );\n        } );\n\n        if ( this.attributeExcludes != null ) {\n            this.geoObjectAttributeExcludes.push.apply( this.geoObjectAttributeExcludes, this.attributeExcludes );\n\n            if ( !this.isGeometryInlined ) {\n                this.geoObjectAttributeExcludes.push( \"geometry\" );\n            }\n        }\n\n        let geomAttr = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geomAttr = this.geoObjectType.attributes[i];\n            }\n        }\n        if ( geomAttr == null ) {\n            let geometry: Attribute = new Attribute( \"geometry\", \"geometry\", new LocalizedValue( \"Geometry\", null ), new LocalizedValue( \"Geometry\", null ), true, false, false, true );\n            this.geoObjectType.attributes.push( geometry );\n        }\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): void {\n        this.calculatedPreObject = this.calculateCurrent( this.preGeoObject );\n        this.calculatedPostObject = this.calculateCurrent( this.postGeoObject );\n\n        if ( this.geometryEditor != null ) {\n            this.geometryEditor.reload();\n        }\n    }\n\n    calculateCurrent( goot: GeoObjectOverTime ): any {\n      const object = {};\n\n      const time = this.forDate.getTime();\n\n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n          let attr = this.geoObjectType.attributes[i];\n          object[attr.code] = null;\n\n          if ( attr.type === 'local' ) {\n              object[attr.code] = this.lService.create();\n          }\n\n          if ( attr.isChangeOverTime ) {\n            let values = goot.attributes[attr.code].values;\n\n            values.forEach( vot => {\n\n                const startDate = Date.parse( vot.startDate );\n                const endDate = Date.parse( vot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n\n                    if ( attr.type === 'local' ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: JSON.parse( JSON.stringify( vot.value ) )\n                        };\n                    }\n                    else if ( attr.type === 'term' && vot.value != null && Array.isArray( vot.value ) && vot.value.length > 0 ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value[0]\n                        };\n                    }\n                    else {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value\n                        };\n                    }\n                }\n            } );\n          }\n          else {\n              object[attr.code] = goot.attributes[attr.code];\n          }\n      }\n      \n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        let attr = this.geoObjectType.attributes[i];\n        \n        if ( attr.isChangeOverTime && object[attr.code] == null ) {\n          object[attr.code] = {\n            startDate: null,\n            endDate: null,\n            value: \"\"\n          }\n        }\n      }\n\n      return object;\n    }\n\n    formatDate( date: string ): string {\n        if ( date === PRESENT ) {\n            return this.lService.localize(\"changeovertime\", \"present\");\n        }\n\n        return date;\n    }\n\n    handleChangeCode( e: any ): void {\n        this.postGeoObject.attributes.code = this.calculatedPostObject['code'];\n        //        \n        //        console.log(this.calculatedPostObject['code'])\n        //        console.log(e)\n    }\n\n    onManageAttributeVersions( attribute: Attribute ): void {\n        this.bsModalRef = this.modalService.show( ManageVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        // TODO: sending the properties like this is wrong\n        this.bsModalRef.content.geoObjectOverTime = this.postGeoObject;\n        this.bsModalRef.content.geoObjectType = this.geoObjectType;\n        this.bsModalRef.content.isNewGeoObject = this.isNew;\n        this.bsModalRef.content.attribute = attribute;\n        this.bsModalRef.content.onAttributeVersionChange.subscribe( versionObj => {\n            this.calculate();\n        } );\n        this.bsModalRef.content.tfInit();\n    }\n\n    onManageGeometryVersions(): void {\n        let geometry = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geometry = this.geoObjectType.attributes[i];\n            }\n        }\n\n        this.onManageAttributeVersions( geometry );\n    }\n\n    isDifferentText( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null ) {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value.trim() !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    isDifferentValue( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null )\n        {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    onSelectPropertyOption( event: any, option: any ): void {\n        this.currentTermOption = JSON.parse( JSON.stringify( this.modifiedTermOption ) );\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                if ( attr.code === \"status\" ) {\n                    return Utils.removeStatuses( JSON.parse( JSON.stringify( attrOpts ) ) );\n                }\n                else {\n                    return attrOpts;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isStatusChanged( post, pre ) {\n\n        if ( pre != null && post == null ) {\n            return true;\n        }\n\n        if ( pre == null || post == null || pre.length == 0 || post.length == 0 ) {\n            return false;\n        }\n\n        var preCompare = pre;\n        if ( Array.isArray( pre ) ) {\n            preCompare = pre[0];\n        }\n\n        var postCompare = post;\n        if ( Array.isArray( post ) ) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    getTypeDefinition( key: string ): string {\n        // let attrs = this.geoObjectType.attributes;\n\n\n        // attrs.attributes.forEach(attr => {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if ( attr.code === key ) {\n                return attr.type;\n            }\n        }\n\n        return null;\n    }\n\n    public getIsValid(): boolean {\n        return this.isValid;\n    }\n\n    public getGeoObject(): any {\n        return this.postGeoObject;\n\n        //        // The front-end uses the 'yyyy-mm-dd' date format. Our backend expects dates in epoch format.\n        //        var submitGO = JSON.parse( JSON.stringify( this.postGeoObject ) );\n        //        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        //            var attr = this.geoObjectType.attributes[i];\n        //\n        //            if ( attr.type === \"date\" && this.postGeoObject.properties[attr.code] != null ) {\n        //                var parts = this.postGeoObject.properties[attr.code].split( '-' );\n        //                var date = new Date( parts[0], parts[1] - 1, parts[2] );\n        //\n        //                submitGO.properties[attr.code] = date.getTime();\n        //            }\n        //        }\n        //\n        //        return submitGO;\n    }\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\n\nimport { DatePipe } from '@angular/common';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'submit-change-request',\n    templateUrl: './submit-change-request.component.html',\n    styleUrls: []\n} )\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    typeaheadLoading: boolean;\n\n    typeaheadNoResults: boolean;\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n\t/*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    preGeoObject: GeoObjectOverTime = null;\n\n\t/*\n\t * The state of the GeoObject after our Change Request has been approved \n\t */\n    postGeoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private localizeService: LocalizationService ) {\n\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( this.geoObjectId, this.geoObjectType.code ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes( [] ).then( types => {\n            this.geoObjectTypes = types;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n\n\n    private onValidChange( newValid: boolean ) {\n        if ( this.preGeoObject == null ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.geometryEditor != null && !this.geometryEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.attributeEditor != null && !this.attributeEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading( e: boolean ): void {\n        this.typeaheadLoading = e;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.registryService.getGeoObjectOverTime( e.item.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n                this.postGeoObject = JSON.parse( JSON.stringify( this.preGeoObject ) ); // Object.assign is a shallow copy. We want a deep copy.\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    submit(): void {\n\n        let goSubmit: GeoObjectOverTime = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            let goGeometries: GeoObjectOverTime = this.geometryEditor.saveDraw();\n//            goSubmit.geometry = goGeometries.geometry;\n        }\n\n        let actions = [{\n            \"actionType\": \"geoobject/update\", // TODO: account for create\n            \"apiVersion\": \"1.0-SNAPSHOT\", // TODO: make dynamic\n            \"createActionDate\": new Date().getTime(),\n            \"geoObject\": goSubmit,\n            \"contributorNotes\": this.reason\n        }]\n\n        this.changeRequestService.submitChangeRequest( JSON.stringify( actions ) )\n            .then( geoObject => {\n                this.cancel();\n\n                this.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"change.request.success.message\" );\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.isValid = false;\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.preGeoObject = null;\n        this.postGeoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = (err.error.localizedMessage || err.error.message || err.message);\n        }\n    }\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-input',\n    templateUrl: './localized-input.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedInputComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TreeNode, TreeComponent, TreeDropDirective } from 'angular-tree-component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { HierarchyType, HierarchyNode } from '../../model/hierarchy';\nimport { GeoObjectType } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal'\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\n\nclass Instance {\n    active: boolean;\n    label: string;\n}\n\n@Component( {\n\n    selector: 'hierarchies',\n    templateUrl: './hierarchy.component.html',\n    styleUrls: ['./hierarchy.css']\n} )\n\nexport class HierarchyComponent implements OnInit {\n    instance: Instance = new Instance();\n    hierarchies: HierarchyType[];\n    geoObjectTypes: GeoObjectType[] = [];\n    nodes = [] as HierarchyNode[];\n    currentHierarchy: HierarchyType = null;\n\n    hierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n    geoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild( TreeComponent )\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild( 'nodeMenu' ) public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n    @ViewChild( 'leafMenu' ) public leafMenuComponent: ContextMenuComponent;\n\n    /* \n     * Currently clicked on id for delete confirmation modal \n     */\n    current: TreeNode;\n\n\n    constructor( private hierarchyService: HierarchyService, private modalService: BsModalService,\n        private contextMenuService: ContextMenuService, private changeDetectorRef: ChangeDetectorRef,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.refreshAll( null );\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    public refreshAll( desiredHierarchy ) {\n        this.registryService.init().then( response => {\n            this.localizeService.setLocales( response.locales );\n\n            this.geoObjectTypes = response.types;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            this.setHierarchies( response.hierarchies );\n\n            this.setNodesOnInit( desiredHierarchy );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public excludeHierarchyTypeDeletes( hierarchy: HierarchyType ) {\n        return ( this.hierarchyTypeDeleteExclusions.indexOf( hierarchy.code ) !== -1 );\n    }\n\n    public excludeGeoObjectTypeDeletes( geoObjectType: GeoObjectType ) {\n        return ( this.geoObjectTypeDeleteExclusions.indexOf( geoObjectType.code ) !== -1 );\n    }\n\n    private setNodesOnInit( desiredHierarchy ): void {\n\n        let index = -1;\n\n        if ( desiredHierarchy != null ) {\n            index = this.hierarchies.findIndex( h => h.code === desiredHierarchy.code );\n        }\n        else if ( this.hierarchies.length > 0 ) {\n            index = 0;\n        }\n\n        if ( index > -1 ) {\n            let hierarchy = this.hierarchies[index];\n\n            this.nodes = hierarchy.rootGeoObjectTypes;\n\n            this.currentHierarchy = hierarchy;\n\n            setTimeout(() => {\n                if ( this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n    }\n\n    private setNodesForHierarchy( hierarchyType: HierarchyType ): void {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let hierarchy = this.hierarchies[i];\n            if ( hierarchy.code === hierarchyType.code ) {\n                this.nodes = hierarchyType.rootGeoObjectTypes;\n                this.currentHierarchy = hierarchy;\n                break;\n            }\n        }\n\n        setTimeout(() => {\n            this.tree.treeModel.expandAll();\n        }, 1 )\n    }\n\n    private getHierarchy( hierarchyId: string ): HierarchyType {\n        let target: HierarchyType = null;\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchyId === hierarchy.code ) {\n                target = hierarchy;\n            }\n        } );\n\n        return target;\n    }\n\n    private setHierarchies( data: HierarchyType[] ): void {\n        let hierarchies: HierarchyType[] = [];\n        data.forEach(( hierarchyType, index ) => {\n\n            if ( hierarchyType.rootGeoObjectTypes.length > 0 ) {\n                hierarchyType.rootGeoObjectTypes.forEach( rootGeoObjectType => {\n                    this.processHierarchyNodes( rootGeoObjectType );\n                } )\n            }\n\n            hierarchies.push( hierarchyType );\n\n        } );\n\n        this.hierarchies = hierarchies\n\n        this.hierarchies.sort(( a, b ) => {\n            if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n            else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n            else return 0;\n        } );\n    }\n\n    private updateHierarchy( code: string, rootGeoObjectTypes: HierarchyNode[] ): void {\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchy.code === code ) {\n                hierarchy.rootGeoObjectTypes = rootGeoObjectTypes;\n            }\n        } )\n    }\n\n    /**\n     * Set properties required by angular-tree-component using recursion.\n     */\n    private processHierarchyNodes( node: HierarchyNode ) {\n        node.label = this.getHierarchyLabel( node.geoObjectType );\n\n        node.children.forEach( child => {\n            this.processHierarchyNodes( child );\n        } )\n    }\n\n    private getHierarchyLabel( geoObjectTypeCode: string ): string {\n        let label: string = null;\n        this.geoObjectTypes.forEach( function( gOT ) {\n            if ( gOT.code === geoObjectTypeCode ) {\n                label = gOT.label.localizedValue;\n            }\n        } );\n\n        return label;\n    }\n\n    public handleOnMenu( node: any, $event: any ): void {\n\n        this.contextMenuService.show.next( {\n            contextMenu: ( node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent ),\n            event: $event,\n            item: node,\n        } );\n        $event.preventDefault();\n        $event.stopPropagation();\n    }\n\n    public treeNodeOnClick( node: TreeNode, $event: any ): void {\n\n        node.treeModel.setFocusedNode( node );\n\n        if ( node.treeModel.isExpanded( node ) ) {\n            node.collapse();\n        }\n        else {\n            node.treeModel.expandAll();\n        }\n    }\n\n    options = {\n        //\t\t  allowDrag: (node:TreeNode) => node.isLeaf,\n        //\t\t  allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n        // return true / false based on element, to.parent, to.index. e.g.\n        //\t\t\t    return parent.hasChildren;\n        //\t\t\t  },\n        displayField: \"label\",\n        actionMapping: {\n            mouse: {\n                click: ( tree: TreeComponent, node: TreeNode, $event: any ) => {\n                    this.treeNodeOnClick( node, $event );\n                },\n                contextMenu: ( tree: any, node: any, $event: any ) => {\n                    this.handleOnMenu( node, $event );\n                }\n            }\n        },\n        mouse: {\n            //\t            drop: (tree: TreeComponent, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n            //\t              console.log('drag', from, to); // from === {name: 'first'}\n            //\t              // Add a node to `to.parent` at `to.index` based on the data in `from`\n            //\t              // Then call tree.update()\n            //\t            }\n        }\n    };\n\n    public hierarchyOnClick( event: any, item: any ) {\n        let hierarchyId = item.code;\n\n        this.currentHierarchy = item;\n\n        this.nodes = [];\n\n        if ( this.getHierarchy( hierarchyId ).rootGeoObjectTypes.length > 0 ) {\n            // TODO: should rootGeoObjectTypes be hardcoded to only one entry in the array?\n            this.nodes.push( this.getHierarchy( hierarchyId ).rootGeoObjectTypes[0] );\n\n            setTimeout(() => {\n                if ( this && this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n\n        if ( this.tree ) {\n            this.tree.treeModel.update();\n        }\n    }\n\n    public createHierarchy(): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n\n        ( <CreateHierarchyTypeModalComponent>this.bsModalRef.content ).onHierarchytTypeCreate.subscribe( data => {\n\n            this.hierarchies.push( data );\n        } );\n    }\n\n    public deleteHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeHierarchyType( data );\n        } );\n    }\n\n    public editHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.edit = true;\n        this.bsModalRef.content.hierarchyType = obj;\n        this.bsModalRef.content.onHierarchytTypeCreate.subscribe( data => {\n            let pos = this.getHierarchyTypePosition( data.code );\n\n            this.hierarchies[pos].label = data.label;\n            this.hierarchies[pos].description = data.description;\n        } );\n    }\n\n    public removeHierarchyType( code: string ): void {\n        this.hierarchyService.deleteHierarchyType( code ).then( response => {\n\n            let pos = this.getHierarchyTypePosition( code );\n            this.hierarchies.splice( pos, 1 );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public createGeoObjectType(): void {\n        this.bsModalRef = this.modalService.show( CreateGeoObjTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\n        ( <CreateGeoObjTypeModalComponent>this.bsModalRef.content ).onGeoObjTypeCreate.subscribe( data => {\n            this.geoObjectTypes.push( data );\n        } );\n    }\n\n    public deleteGeoObjectType( obj: GeoObjectType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeGeoObjectType( data );\n        } );\n    }\n\n    public removeGeoObjectType( code: string ): void {\n        this.registryService.deleteGeoObjectType( code ).then( response => {\n\n            let pos = this.getGeoObjectTypePosition( code );\n            this.geoObjectTypes.splice( pos, 1 );\n\n            //          const parent = node.parent;\n            //          let children = parent.data.children;\n            //\n            //          parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            //\n            //          if ( parent.data.children.length === 0 ) {\n            //              parent.data.hasChildren = false;\n            //          }\n            //\n            //        this.tree.treeModel.update();\n            //this.setNodesOnInit();\n\n            this.refreshAll( this.currentHierarchy );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public manageGeoObjectType( geoObjectType: GeoObjectType ): void {\n\n        this.bsModalRef = this.modalService.show( ManageGeoObjectTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'manage-geoobjecttype-modal'\n        } );\n\n        geoObjectType.attributes.sort(( a, b ) => {\n            if ( a.label.localizedValue < b.label.localizedValue ) return -1;\n            else if ( a.label.localizedValue > b.label.localizedValue ) return 1;\n            else return 0;\n        } );\n        this.bsModalRef.content.geoObjectType = geoObjectType;\n\n        ( <ManageGeoObjectTypeModalComponent>this.bsModalRef.content ).onGeoObjectTypeSubmitted.subscribe( data => {\n\n            let position = this.getGeoObjectTypePosition( data.code );\n            if ( position ) {\n                this.geoObjectTypes[position] = data;\n            }\n        } );\n    }\n\n    private getHierarchyTypePosition( code: string ): number {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let obj = this.hierarchies[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    public addChildAndRootToHierarchy(): void {\n        const that = this;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = \"ROOT\";\n        this.bsModalRef.content.toRoot = true;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public addChildToHierarchy( parent: TreeNode ): void {\n        const that = this;\n        that.current = parent;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = parent;\n        this.bsModalRef.content.toRoot = false;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n            const d = that.current.data;\n\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public deleteTreeNode( node: TreeNode ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + node.data.label + ']';\n        this.bsModalRef.content.data = node;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeTreeNode( data );\n        } );\n    }\n\n    public removeTreeNode( node: TreeNode ): void {\n        this.hierarchyService.removeFromHierarchy( this.currentHierarchy.code, node.parent.data.geoObjectType, node.data.geoObjectType ).then( data => {\n\n            if ( node.parent.data.geoObjectType == null ) {\n                this.nodes = [];\n                // this.refreshAll(null);\n                //return;\n            }\n\n            const parent = node.parent;\n            let children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            if ( parent.data.children.length === 0 ) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n\n            // Update the available GeoObjectTypes\n            this.changeDetectorRef.detectChanges()\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public isActive( item: any ) {\n        return this.currentHierarchy === item;\n    };\n\n    public onDrop( $event: any ) {\n        // Dropped $event.element\n        this.removeTreeNode( $event.element )\n    }\n\n    public allowDrop( element: Element ) {\n        // Return true/false based on element\n        return true;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-page',\n    templateUrl: './data-page.component.html',\n    styleUrls: ['./data-page.css']\n} )\nexport class DataPageComponent implements OnInit {\n\n\tcontent: string = \"SPREADSHEET\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SPREADSHEET\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n\t\t}\n\t\telse if(content === \"SHAPEFILE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"shapefile.title\");\n\t\t}\n\t\telse if(content === \"EXPORT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"io.export.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, ViewChild, SimpleChanges, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObject, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, ParentTreeNode } from '../../model/registry';\n\nimport { SimpleEditControl } from './simple-edit-control/simple-edit-control.component';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { Map, LngLatBounds, NavigationControl, ImageSource } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport * as mapboxgl from 'mapbox-gl';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor-map[geometryType]',\n    templateUrl: './geoobject-editor-map.component.html',\n    styleUrls: ['./geoobject-editor-map.component.css']\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. We will invoke this event with GeoJSON when the user makes an edit to the geometry.\n     */\n    @Output() geometryChange = new EventEmitter<any>();\n\n    /*\n     * Optional. If specified, we will diff based on this GeoJSON geometry.\n     */\n    @Input() preGeometry: any;\n\n    /*\n     * Optional. If we are read-only, this will be displayed as a layer. If we are not, it will be editable.\n     */\n    @Input() postGeometry: any;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    /*\n     * Optional. If specified, we will display an edit button on the map, and when it is clicked we will emit this event.\n     */\n    @Output() onClickEdit = new EventEmitter<void>();\n\n    @ViewChild( \"simpleEditControl\" ) simpleEditControl;\n\n    @ViewChild( \"mapDiv\" ) mapDiv;\n\n    map: Map;\n\n    editingControl: any;\n\n    constructor( private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            //this.registryService.getGeoObjectOverTime( \"22\", \"Province\" )\n            //.then( geoObject => {\n\n            ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\n\n            this.mapDiv.nativeElement.id = Math.floor( Math.random() * ( 899999 ) ) + 100000;\n\n            this.map = new Map( {\n                container: this.mapDiv.nativeElement.id,\n                style: 'mapbox://styles/mapbox/satellite-v9',\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            } );\n\n            this.map.on( 'load', () => {\n                this.initMap();\n            } );\n\n            this.map.on( 'draw.create', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.delete', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.update', () => {\n                this.onValidChange();\n            } );\n\n            //} ).catch(( err: HttpErrorResponse ) => {\n            //    this.error( err );\n            //} );\n        }, 10 );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['preGeometry'] || changes['postGeometry'] ) {\n            this.reload();\n        }\n    }\n\n    public reload(): void {\n        if ( this.map != null ) {\n            this.removeLayers();\n            this.addLayers();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    getIsValid(): boolean {\n        if ( !this.readOnly ) {\n            let isValid: boolean = false;\n\n            if ( this.editingControl != null ) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if ( featureCollection.features.length > 0 ) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    private onValidChange(): void {\n        this.geometryChange.emit( this.saveDraw() );\n    }\n\n    initMap(): void {\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            this.onValidChange();\n        } );\n\n\n        this.addLayers();\n\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.zoomToBbox();\n        }\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        if ( !this.readOnly ) {\n            this.enableEditing();\n        }\n        else {\n            this.addEditButton();\n        }\n\n        this.onValidChange();\n    }\n\n    addEditButton(): void {\n        this.simpleEditControl.editEmitter.subscribe( versionObj => {\n            this.onClickEdit.emit();\n        } );\n\n        this.map.addControl( this.simpleEditControl );\n    }\n\n    enableEditing(): void {\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: false,\n                    polygon: true,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: true,\n                    line_string: false,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: true,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        this.map.addControl( this.editingControl );\n\n        if ( this.postGeometry != null ) {\n            this.editingControl.add( this.postGeometry );\n        }\n    }\n\n    removeSource( prefix: string ): void {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.map.removeLayer( sourceName + \"-polygon\" );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.map.removeLayer( sourceName + \"-point\" );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\" ) {\n            this.map.removeLayer( sourceName + \"-line\" );\n        }\n\n        this.map.removeSource( sourceName );\n    }\n\n    removeLayers(): void {\n        if ( this.map.getSource( \"pre-geoobject\" ) ) {\n            this.removeSource( \"pre\" );\n        }\n        if ( this.map.getSource( \"post-geoobject\" ) ) {\n            this.removeSource( \"post\" );\n        }\n    }\n\n    addLayers(): void {\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.renderGeometryAsLayer( this.preGeometry, \"pre\", \"#EFA22E\" )\n        }\n        if ( this.readOnly && this.postGeometry != null && this.postGeometry !== \"\") {\n            this.renderGeometryAsLayer( this.postGeometry, \"post\", \"#3368EF\" );\n        }\n    }\n\n    renderGeometryAsLayer( geometry: any, prefix: string, color: string ) {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        this.map.addSource( sourceName, {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            // Polygon Layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-polygon\",\n                \"type\": \"fill\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7,\n                },\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            // Point layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-point\",\n                \"type\": \"circle\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": '#FFFFFF'\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.map.addLayer( {\n                \"id\": sourceName + \"-line\",\n                \"source\": sourceName,\n                \"type\": \"line\",\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            } );\n        }\n\n        ( <any>this.map.getSource( sourceName ) ).setData( geometry );\n    }\n\n    zoomToBbox(): void {\n        if ( this.bboxCode != null && this.bboxType != null ) {\n            if ( this.bboxDate == null ) {\n                this.registryService.getGeoObjectBounds( this.bboxCode, this.bboxType ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n            else {\n                this.registryService.getGeoObjectBoundsAtDate( this.bboxCode, this.bboxType, this.bboxDate ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n        }\n    }\n\n    saveDraw(): any {\n        if ( this.editingControl != null ) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if ( featureCollection.features.length > 0 ) {\n\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if ( this.geometryType === \"MULTIPOLYGON\" ) {\n                    let polygons = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPolygon' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                polygons.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            polygons.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: 'MultiPolygon'\n                    };\n                }\n                else if ( this.geometryType === \"MULTIPOINT\" ) {\n                    let points = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPoint' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                points.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            points.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: 'MultiPoint'\n                    };\n                }\n                else if ( this.geometryType === \"MULTILINE\" ) {\n                    let lines = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiLineString' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                lines.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            lines.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: 'MultiLineString'\n                    };\n                }\n                else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n\n            return this.postGeometry;\n        }\n\n        return this.postGeometry;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n        console.log( \"ERROR\", err );\n\n        // Handle error\n        //if (err !== null) {\n        //    this.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n        //    this.bsModalRef.content.message = (err.localizedMessage || err.message);\n        //}\n    }\n\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'change-request-page',\n    templateUrl: './change-request-page.component.html',\n    styleUrls: ['./change-request-page.css']\n} )\nexport class ChangeRequestPageComponent implements OnInit {\n\n\tcontent: string = \"SUBMIT\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"MANAGE\") : this.renderContent(\"SUBMIT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SUBMIT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.page.title\");\n\t\t}\n\t\telse if(content === \"MANAGE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.table.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListByOrg } from '../../model/registry';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-manager',\n\ttemplateUrl: './master-list-manager.component.html',\n\tstyleUrls: ['./master-list-manager.css']\n})\nexport class MasterListManagerComponent implements OnInit {\n\tmessage: string = null;\n\torgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.service.getMasterListsByOrg().then(response => {\n\n\t\t\tthis.localizeService.setLocales(response.locales);\n\n\t\t\tthis.orgs = response.orgs;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonCreate(org: MasterListByOrg): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.init(org);\n\t\tthis.bsModalRef.content.onMasterListChange.subscribe(list => {\n\t\t\tconst obj = {\n\t\t\t\tlabel: list.displayLabel.localizedValue,\n\t\t\t\toid: list.oid,\n\t\t\t\tcreateDate: list.createDate,\n\t\t\t\tlastUpdateDate: list.lastUpdateDate,\n\t\t\t\tadmin: list.admin,\n\t\t\t\tisMaster: list.isMaster\n\t\t\t};\n\n\t\t\torg.lists.push(obj);\n\t\t});\n\t}\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-view/', code])\n\t}\n\n\tonEdit(pair: { label: string, oid: string }): void {\n\t\tthis.service.getMasterList(pair.oid).then(list => {\n\n\t\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tthis.bsModalRef.content.edit = true;\n\t\t\tthis.bsModalRef.content.master = list;\n\t\t\tthis.bsModalRef.content.onMasterListChange.subscribe(ret => {\n\t\t\t\tpair.label = ret.displayLabel.localizedValue;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + list.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = \"danger\";\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterList(list.oid).then(response => {\n\t\t\t\torg.lists = org.lists.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== list.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { Step, StepConfig } from '../../model/registry';\n\n\n@Component( { \n    selector: 'step-indicator',\n    templateUrl: './step-indicator.component.html',\n    styleUrls: ['./step-indicator.css']\n} )\nexport class StepIndicatorComponent {\n\n    @Input('steps')\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n\n    constructor( private localizeService: LocalizationService ) {\n\n        this._stepConfig = {\"steps\": []};\n    }\n\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n       \n    }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { IOService } from '../../service/io.service';\n\nimport { ScheduledJob, Step, StepConfig, ScheduledJobOverview, PaginationPage } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\n\nimport {Observable} from 'rxjs/Rx';\n\n@Component( {\n    selector: 'scheduled-jobs',\n    templateUrl: './scheduled-jobs.component.html',\n    styleUrls: ['./scheduled-jobs.css']\n} )\nexport class ScheduledJobsComponent implements OnInit {\n    message: string = null;\n\n    activeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    completeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n    \n    pollingData: any;\n    \n    isViewAllOpen: boolean = false;\n\n    constructor( public service: RegistryService, private modalService: BsModalService, private router: Router,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService ) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n      this.onActiveJobsPageChange( 1 );\n      \n      this.pollingData = Observable.interval(1000).subscribe(() => {\n        this.activeTimeCounter++\n        this.completeTimeCounter++\n      \n        if (this.isViewAllOpen)\n        {\n          if (this.activeTimeCounter >= 4)\n          {\n            this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n            \n            this.activeTimeCounter = 0;\n          }\n          if (this.completeTimeCounter >= 7)\n          {\n            this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n            \n            this.completeTimeCounter = 0;\n          }\n        }\n        else\n        {\n          if (this.activeTimeCounter >= 2)\n          {\n            this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n            \n            this.activeTimeCounter = 0;\n          }\n        }\n      });\n\n    }\n    \n    ngOnDestroy() {\n      this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n      if (job.status === \"FEEDBACK\")\n      {\n        return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n      }\n      else if (job.status === \"RUNNING\" || job.status === \"NEW\")\n      {\n        return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n      }\n      else if (job.status === \"QUEUED\")\n      {\n        return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n      }\n      else if (job.status === \"SUCCESS\")\n      {\n        return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n      }\n      else if (job.status === \"CANCELED\")\n      {\n        return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n      }\n      else if (job.status === \"FAILURE\")\n      {\n        return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n      }\n      else\n      {\n        return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n      }\n    }\n\n    formatStepConfig(page: PaginationPage): void {\n\n      page.results.forEach(job => {\n        \n        let stepConfig = {\n          \"steps\": [\n            { \"label\": \"File Import\", \"status\": \"COMPLETE\" },\n\n            {\n              \"label\": \"Staging\",\n              \"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n            },\n\n            {\n              \"label\": \"Validation\",\n              \"status\": job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n            },\n\n            {\n              \"label\": \"Database Import\",\n              \"status\": job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n            }\n          ]\n        }\n\n        job = job as ScheduledJobOverview;\n        job.stepConfig = stepConfig;\n      });\n\n    }\n\n\n    getCompletedStatus(jobStage: string, targetStage: string): string{\n      let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n      let jobPos = order.indexOf(jobStage);\n      let targetPos = order.indexOf(targetStage);\n      if(targetPos < jobPos){\n        return \"COMPLETE\";\n      }\n      else {\n        return \"\";\n      }\n    }\n\n    getJobStatus(job: ScheduledJob): string{\n      if(job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n        return \"WORKING\"\n      }\n      else if(job.status === \"FEEDBACK\") {\n        return \"STUCK\";\n      }\n\n      return \"\";\n    }\n\n\n    onViewAllCompleteJobs(): void {\n      this.onCompleteJobsPageChange(1);\n      \n      this.isViewAllOpen = true;\n    }\n\n\n    onView( code: string ): void {\n        this.router.navigate( ['/registry/master-list-history/', code] )\n    }\n\n    onActiveJobsPageChange( pageNumber: any ): void {\n\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then( response => {\n\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onCompleteJobsPageChange( pageNumber: any ): void {\n\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then( response => {\n\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    \n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n      this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n      } );\n      \n      this.bsModalRef.content.message = this.localizeService.decode( \"etl.import.cancel.modal.description\" );\n      this.bsModalRef.content.submitText = this.localizeService.decode( \"etl.import.cancel.modal.button\" );\n      \n      this.bsModalRef.content.type = ModalTypes.danger;\n      \n      this.bsModalRef.content.onConfirm.subscribe( data => {\n      \n        this.ioService.cancelImport( job.configuration ).then( response => {\n          this.bsModalRef.hide()\n          \n          for (let i = 0; i < this.activeJobsPage.results.length; ++i)\n          {\n            let activeJob = this.activeJobsPage.results[i];\n            \n            if (activeJob.jobId === job.jobId)\n            {\n              this.activeJobsPage.results.splice(i, 1);\n              break;\n            }\n          }\n          \n          this.onViewAllCompleteJobs();\n          \n        } ).catch(( err: HttpErrorResponse ) => {\n          this.error( err );\n        } );\n  \n      } );\n    }\n\n\n\n    error( err: HttpErrorResponse ): void {\n      console.log(\"ERROR\", err);\n    \n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { JobConflictModalComponent } from './conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './conflict-widgets/reupload-modal.component';\n\nimport Utils from '../../utility/Utils'\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { ScheduledJob } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\nimport { IOService } from '../../service/io.service';\n\nimport {Observable} from 'rxjs/Rx';\n\n@Component( {\n    selector: 'job',\n    templateUrl: './job.component.html',\n    styleUrls: ['./scheduled-jobs.css']\n} )\nexport class JobComponent implements OnInit {\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n    \n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    timeCounter: number = 0;\n    \n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    pollingData: any;\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    constructor( public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService ) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n        \n    }\n    \n    ngOnDestroy() {\n      this.stopPolling();\n    }\n    \n    formatAffectedRows(rows: string)\n    {\n      return rows.replace(/,/g, \", \");\n    }\n    \n    formatValidationResolve(obj: any)\n    {\n      return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n      for (let i = 0; i < this.page.results.length; ++i)\n      {\n        let pageConflict = this.page.results[i];\n        \n        if (pageConflict.id === problem.id)\n        {\n          this.page.results.splice(i, 1);\n        }\n      }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n\n        if(probType === \"net.geoprism.registry.io.ParentCodeException\"){\n            return this.localizeService.decode( \"scheduledjobs.job.problem.type.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.PostalCodeLocationException\"){\n            return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.AmbiguousParentException\"){\n          return this.localizeService.decode( \"scheduledjobs.job.problem.type.multi.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.InvalidGeometryException\"){\n          return this.localizeService.decode( \"scheduledjobs.job.problem.type.invalid.geom.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.DataNotFoundException\"){\n          return this.localizeService.decode( \"scheduledjobs.job.problem.type.required.value.lookup\" );\n        }\n        \n        if(\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n          ){\n          return this.localizeService.decode( \"scheduledjobs.job.problem.type.permission\" );\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        \n        if(\n          probType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n          ){\n          return this.localizeService.decode( \"scheduledjobs.job.problem.type.duplicate.data.lookup\" );\n        }\n\n        return probType;\n    }\n\n\n    onEdit( problem: any ): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n         this.bsModalRef = this.modalService.show( JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe( data => {\n          if (data.action === 'RESOLVED')\n          {\n            this.onProblemResolved(data.data);\n          }\n        } );\n    }\n\n    onPageChange( pageNumber: any ): void {\n\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then( response => {\n\n            this.job = response;\n            \n            if (this.job.stage === 'IMPORT_RESOLVE')\n            {\n              this.page = this.job.importErrors;\n            }\n            else if (this.job.stage === 'VALIDATION_RESOLVE')\n            {\n              this.page = this.job.problems;\n              \n              for (let i = 0; i < this.page.results.length; ++i)\n              {\n                let problem = this.page.results[i];\n                \n                if (problem.type === 'RowValidationProblem')\n                {\n                  this.hasRowValidationProblem = true;\n                }\n              }\n            }\n            \n            if (!this.isPolling && this.job.status === 'RUNNING')\n            {\n              this.startPolling();\n            }\n            else if (this.isPolling && this.job.status != 'RUNNING')\n            {\n              this.stopPolling();\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n    \n    stopPolling(): void {\n      if (this.isPolling && this.pollingData != null)\n      {\n        this.pollingData.unsubscribe();\n      }\n    }\n    \n    startPolling(): void {\n      this.timeCounter = 0;\n    \n      this.pollingData = Observable.interval(1000).subscribe(() => {\n        this.timeCounter++\n        \n        if (this.timeCounter >= 2)\n        {\n          this.onPageChange(this.page.pageNumber);\n          \n          this.timeCounter = 0;\n        }\n      });\n      \n      this.isPolling = true;\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.results.forEach(row => {\n            row.selected = this.allSelected;\n        })\n    }\n\n    onReuploadAndResume(historyId: string): void {\n      this.bsModalRef = this.modalService.show( ReuploadModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n      } );\n      \n      this.bsModalRef.content.job = this.job;\n  \n      this.bsModalRef.content.onConfirm.subscribe( data => {\n        this.router.navigate( ['/registry/scheduled-jobs'] )\n      } );\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n      if (this.page.results.length == 0)\n      {\n        this.service.resolveScheduledJob( historyId ).then( response => {\n          this.router.navigate( ['/registry/scheduled-jobs'] );\n        } ).catch(( err: HttpErrorResponse ) => {\n          this.error( err );\n        } );\n      }\n      else\n      {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        \n        if (this.job.stage === 'VALIDATION_RESOLVE')\n        {\n          this.bsModalRef.content.message =  this.localizeService.decode( \"etl.import.resume.modal.validationDescription\" );\n          this.bsModalRef.content.submitText = this.localizeService.decode( \"etl.import.resume.modal.validationButton\" );\n        }\n        else\n        {\n          this.bsModalRef.content.message = this.localizeService.decode( \"etl.import.resume.modal.importDescription\" );\n          this.bsModalRef.content.submitText = this.localizeService.decode( \"etl.import.resume.modal.importButton\" );\n        }\n        \n        this.bsModalRef.content.type = ModalTypes.danger;\n    \n        this.bsModalRef.content.onConfirm.subscribe( data => {\n    \n          this.service.resolveScheduledJob( historyId ).then( response => {\n    \n              this.router.navigate( ['/registry/scheduled-jobs'] )\n              \n           } ).catch(( err: HttpErrorResponse ) => {\n               this.error( err );\n           } );\n    \n        } );\n      }\n    }\n    \n    onCancelScheduledJob(historyId: string): void {\n      this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n      } );\n      \n      this.bsModalRef.content.message = this.localizeService.decode( \"etl.import.cancel.modal.description\" );\n      this.bsModalRef.content.submitText = this.localizeService.decode( \"etl.import.cancel.modal.button\" );\n      \n      this.bsModalRef.content.type = ModalTypes.danger;\n      \n      this.bsModalRef.content.onConfirm.subscribe( data => {\n      \n        this.ioService.cancelImport( this.job.configuration ).then( response => {\n          //this.bsModalRef.hide()\n          this.router.navigate( ['/registry/scheduled-jobs'] )\n        } ).catch(( err: HttpErrorResponse ) => {\n          this.error( err );\n        } );\n  \n      } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n      console.log(\"Encountered error\", err);\n    \n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListVersion } from '../../model/registry';\n\nimport { ExportFormatModalComponent } from './export-format-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ProgressService } from '../../../shared/service/progress.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { GeoObjectEditorComponent } from '../geoobject-editor/geoobject-editor.component';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'master-list',\n    templateUrl: './master-list.component.html',\n    styleUrls: []\n} )\nexport class MasterListComponent implements OnInit {\n    message: string = null;\n    list: MasterListVersion = null;\n    p: number = 1;\n    current: string = '';\n    filter: { attribute: string, value: string, label: string }[] = [];\n    selected: string[] = [];\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 100,\n        results: []\n    };\n    sort = { attribute: 'code', order: 'ASC' };\n    isPublished: boolean = true;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    public searchPlaceholder = \"\";\n\n    private isAdmin: boolean;\n    private isMaintainer: boolean;\n    private isContributor: boolean;\n\n\n    constructor( public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private router: Router,\n        private modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService ) {\n\n        this.searchPlaceholder = localizeService.decode( \"masterlist.search\" );\n\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get( 'oid' );\n        this.isPublished = (this.route.snapshot.paramMap.get( 'published' ) == \"true\");\n\n        this.service.getMasterListVersion( oid ).then( version => {\n            this.list = version;\n            this.list.attributes.forEach( attribute => {\n                attribute.isCollapsed = true;\n            } );\n\n            this.onPageChange( 1 );\n        } );\n    }\n\n    onPageChange( pageNumber: number ): void {\n\n        this.message = null;\n\n        this.service.data( this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort ).then( page => {\n            this.page = page;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    //    onSearch(): void {\n    //        this.filter = this.current;\n    //\n    //        this.onPageChange( 1 );\n    //    }\n\n    onSort( attribute: { name: string, label: string } ): void {\n        if ( this.sort.attribute === attribute.name ) {\n            this.sort.order = ( this.sort.order === 'ASC' ? 'DESC' : 'ASC' );\n        }\n        else {\n            this.sort = { attribute: attribute.name, order: 'ASC' };\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    clearFilters(): void {\n        this.list.attributes.forEach( attr => {\n            attr.search = null;\n        } );\n\n        this.filter = [];\n        this.selected = [];\n\n        this.onPageChange( 1 );\n    }\n\n    toggleFilter( attribute: any ): void {\n        attribute.isCollapsed = !attribute.isCollapsed;\n    }\n\n    getValues( attribute: any ): void {\n        return Observable.create(( observer: any ) => {\n            this.message = null;\n\n            // Get the valid values\n            this.service.values( this.list.oid, attribute.search, attribute.name, attribute.base, this.filter ).then( options => {\n                options.unshift( { label: '[' + this.localizeService.decode( \"masterlist.nofilter\" ) + ']', value: null } );\n\n                observer.next( options );\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        } );\n    }\n\n\n    handleDateChange( attribute: any ): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter( f => f.attribute !== attribute.base );\n        this.selected = this.selected.filter( s => s !== attribute.base );\n\n        if ( attribute.value != null && ( attribute.value.start !== '' || attribute.value.end !== '' ) ) {\n\n            let label = '[' + attribute.label + '] : [';\n\n            if ( attribute.value.start != null ) {\n                label += attribute.value.start;\n            }\n\n            if ( attribute.value.start != null && attribute.value.end != null ) {\n                label += ' - ';\n            }\n\n            if ( attribute.value.end != null ) {\n                label += attribute.value.end;\n            }\n\n            label += ']';\n\n            this.filter.push( { attribute: attribute.base, value: attribute.value, label: label } );\n            this.selected.push( attribute.base );\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    handleInputChange( attribute: any ): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter( f => f.attribute !== attribute.base );\n        this.selected = this.selected.filter( s => s !== attribute.base );\n\n        if ( attribute.value != null && attribute.value !== '' ) {\n            const label = '[' + attribute.label + '] : ' + '[' + attribute.value + ']';\n\n            this.filter.push( { attribute: attribute.base, value: attribute.value, label: label } );\n            this.selected.push( attribute.base );\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    handleListChange( e: TypeaheadMatch, attribute: any ): void {\n        attribute.value = e.item;\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter( f => f.attribute !== attribute.base );\n        this.selected = this.selected.filter( s => s !== attribute.base );\n\n        this.list.attributes.forEach( attr => {\n            if ( attr.base === attribute.base ) {\n                attr.search = '';\n            }\n        } );\n\n        if ( attribute.value.value != null && attribute.value.value !== '' ) {\n            const label = '[' + attribute.label + '] : ' + '[' + attribute.value.label + ']';\n\n            this.filter.push( { attribute: attribute.base, value: e.item.value, label: label } );\n            this.selected.push( attribute.base );\n            attribute.search = e.item.label;\n        }\n        else {\n            attribute.search = '';\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    isFilterable( attribute: any ): boolean {\n        return attribute.type !== 'none' && ( attribute.dependency.length === 0 || this.selected.indexOf( attribute.base ) !== -1 || this.selected.filter( value => attribute.dependency.includes( value ) ).length > 0 );\n    }\n\n    onEdit( data ): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true } );\n        editModal.content.configureAsExisting( data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable );\n        editModal.content.setMasterListId( this.list.oid );\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange( this.page.pageNumber );\n        } );\n    }\n\n    onGoto( data ): void {\n        const oid = data.code;\n\n        if ( oid != null && oid.length > 0 ) {\n            window.open( acp + \"/nav/management#/locations/\" + oid, '_blank' );\n        }\n\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        let subscription = Observable.interval( 1000 ).subscribe(() => {\n            this.service.progress( this.list.oid ).then( progress => {\n                this.pService.progress( progress );\n            } );\n        } );\n\n        this.service.publishMasterList( this.list.oid ).finally(() => {\n            subscription.unsubscribe();\n\n            this.pService.complete();\n        } ).toPromise()\n            .then( list => {\n                this.list = list;\n                this.list.attributes.forEach( attribute => {\n                    attribute.isCollapsed = true;\n                } );\n\n                // Refresh the resultSet\n                this.onPageChange( 1 );\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.pService.start();\n    }\n\n    onNewGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true } );\n        //editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n        editModal.content.configureAsNew( this.list.typeCode, this.list.forDate, this.list.isGeometryEditable );\n        editModal.content.setMasterListId( this.list.oid );\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange( this.page.pageNumber );\n        } );\n    }\n\n    onExport(): void {\n        this.bsModalRef = this.modalService.show( ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.onFormat.subscribe( format => {\n            if ( format == 'SHAPEFILE' ) {\n                window.location.href = acp + '/master-list/export-shapefile?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent( JSON.stringify( this.filter ) );\n            }\n            else if ( format == 'EXCEL' ) {\n                window.location.href = acp + '/master-list/export-spreadsheet?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent( JSON.stringify( this.filter ) );\n            }\n        } );\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, \n    Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, Attribute, \n    AttributeTerm, AttributeDecimal, Term, ParentTreeNode, ImportError } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor',\n    templateUrl: './geoobject-editor.component.html',\n    styleUrls: ['./geoobject-editor.component.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n    \n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n//    /*\n//     * GeoObject Geometry Editor\n//     */\n//    @ViewChild( \"geometryEditor\" ) geometryEditor;\n//\n//    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild( \"parentSelector\" ) parentSelector;\n\n    areParentsValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n    \n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor( private service: IOService, private modalService: BsModalService, public bsModalRef: BsModalRef, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private localizeService: LocalizationService, private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, authService: AuthService ) {\n        \n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate( votArray, startDate ): any {\n      for (let i: number = 0; i < votArray.length; ++i)\n      {\n        if (votArray[i].startDate === startDate)\n        {\n          return votArray[i];\n        }\n      }\n      \n      return null;\n    }\n\n    setMasterListId( id: string ) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    setOnSuccessCallback( func: Function ) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew( typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        } );\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError( importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean ) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n        \n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0)\n        {\n          this.hierarchies = importError.object.parents;\n          this.areParentsValid = true;\n        }\n        else\n        {\n          this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.hierarchies = retJson.hierarchies;\n          } );\n          this.areParentsValid = false;\n        }\n        \n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        \n        this.submitFunction = () => {\n          let config = {\n            historyId : historyId,\n            importErrorId: importError.id,\n            resolution: 'APPLY_GEO_OBJECT',\n            parentTreeNode: this.hierarchies,\n            geoObject: this.goSubmit,\n            isNew: importError.object.isNew\n          }\n        \n          this.registryService.submitErrorResolve( config )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting( code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject( code, typeCode );\n        this.fetchGeoObjectType( typeCode );\n        this.fetchHierarchies( code, typeCode );\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject( code: string, typeCode: string ) {\n        this.registryService.getGeoObjectOverTime( code, typeCode ).then( geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( geoObject ) ).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n            //this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n            \n            this.goSubmit = this.goPropertiesPost;\n\n//            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then( locales => {\n            this.localizeService.setLocales( locales );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchGeoObjectType( code: string ) {\n        this.registryService.getGeoObjectTypes( [code] )\n            .then( geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n                \n                if (this.goPropertiesPre != null)\n                {\n                  this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null)\n                {\n                  this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if ( !this.geoObjectType.isGeometryEditable ) {\n//                    this.areGeometriesValid = true;\n                }\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( err );\n                //                this.error( err );\n            } );\n    }\n\n    private fetchHierarchies( code: string, typeTypeCode: string ) {\n        this.registryService.getHierarchiesForGeoObject( code, typeTypeCode )\n            .then(( hierarchies: any ) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    getTypeAheadObservable( text, typeCode ) {\n        return Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( text, typeCode ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, ptn: ParentTreeNode ): void {\n        this.registryService.getGeoObjectByCode( e.item.code, ptn.geoObject.properties.type )\n            .then( geoObject => {\n\n                ptn.geoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    private onValidChange() {\n        if ( this.attributeEditor != null ) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n//        if ( this.geometryEditor != null ) {\n//            this.areGeometriesValid = this.geometryEditor.getIsValid();\n//        }\n        if ( this.parentSelector != null ) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n        \n//        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage( nextPage: number, force: boolean = false ): void {\n        if ( nextPage === this.tabIndex && !force ) {\n            return;\n        }\n\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n        \n        if (nextPage === 2)\n        {\n          this.isEditingGeometries = true;\n        }\n        else\n        {\n          this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if ( this.attributeEditor != null ) {\n          this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if ( this.parentSelector != null ) {\n          this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n      // TODO\n  \n      // Handle error\n      if ( err !== null ) {\n          this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n          this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n      }\n    }\n\n    public cancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n      if ( this.isValid ) {\n        this.bsModalRef.hide();\n    \n        this.persistModelChanges();\n        \n        if (this.submitFunction == null)\n        {\n          this.registryService.applyGeoObjectEdit( this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n        else\n        {\n          this.submitFunction();\n        }\n      }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { MasterList } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\nimport { PublishModalComponent } from './publish-modal.component';\n\n@Component({\n\n\tselector: 'master-list-view',\n\ttemplateUrl: './master-list-view.component.html',\n\tstyleUrls: ['./master-list-view.component.css']\n})\nexport class MasterListViewComponent implements OnInit {\n\n\tcontent: string = \"\";\n\tlist: MasterList = null;\n\n\t/*\n\t * Reference to the modal current showing\n     */\n\tprivate bsModalRef: BsModalRef;\n\n\n\tconstructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) {\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tif (oid != null) {\n\t\t\tthis.content = \"PUB\";\n\t\t}\n\n\t\tthis.service.getMasterList(oid).then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t}\n\n\n\n\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\t}\n}\n","import { Component, OnInit, Input, Output } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { TaskService } from '../../service/task.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { GeoObjectType, GeoObjectOverTime, Task, PaginationPage } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'task-viewer',\n    templateUrl: './task-viewer.component.html',\n    styleUrls: ['./task-viewer.component.css'],\n    providers: [DatePipe]\n} )\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    completedTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    message: string;\n    \n    isViewAllOpen: boolean = false;\n    \n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n    \n    pollingData: any;\n\n    constructor( private registryService: RegistryService,\n                 private taskService: TaskService,\n                 private localizeService: LocalizationService,\n                 private date: DatePipe,\n                 private toEpochDateTimePipe: ToEpochDateTimePipe,\n                 private authService: AuthService\n      ) {\n      //const day = this.forDate.getUTCDate();\n      //this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n      this.onInProgressTasksPageChange( 1 );\n      \n      ////\n      //\n      // We don't need polling on this page. It's better to save bandwidth for low resource environments.\n      //\n      ////\n\n      // this.pollingData = Observable.interval(1000).subscribe(() => {\n      //   this.activeTimeCounter++\n      //   this.completeTimeCounter++\n      \n      //   if (this.isViewAllOpen)\n      //   {\n      //     if (this.activeTimeCounter >= 4)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //     if (this.completeTimeCounter >= 7)\n      //     {\n      //       this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            \n      //       this.completeTimeCounter = 0;\n      //     }\n      //   }\n      //   else\n      //   {\n      //     if (this.activeTimeCounter >= 2)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //   }\n      // });\n    }\n    \n    upper(str: string): string {\n      if (str != null)\n      {\n        return str.toUpperCase();\n      }\n      else\n      {\n        return \"\";\n      }\n    }\n    \n    onInProgressTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.inProgressTasks.pageSize, 'UNRESOLVED').then( page => {\n        this.inProgressTasks = page;\n      } );\n    }\n    \n    onCompletedTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.completedTasks.pageSize, 'RESOLVED').then( page => {\n        this.completedTasks = page;\n      } );\n    }\n    \n    onCompleteTask(task: any): void {\n      // this.isViewAllOpen = true;\n    \n      this.taskService.completeTask(task.id).then( () => {\n        this.inProgressTasks.results.splice(this.inProgressTasks.results.indexOf(task), 1);\n        this.completedTasks.results.push(task);\n        // this.onCompletedTasksPageChange(1);\n      } );\n    }\n    \n    onMoveTaskToInProgress(task: any): void {\n      this.isViewAllOpen = true;\n    \n      this.taskService.setTaskStatus(task.id, 'UNRESOLVED').then( () => {\n        this.completedTasks.results.splice(this.completedTasks.results.indexOf(task), 1);\n        this.inProgressTasks.results.push(task);\n        this.onInProgressTasksPageChange(1);\n      } );\n    }\n    \n    onViewAllCompletedTasks(): void {\n      this.isViewAllOpen = true;\n      \n      this.onCompletedTasksPageChange(1);\n    }\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/finally';\r\n\r\nimport { Task } from '../model/registry';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    getMyTasks( pageNum: number, pageSize: number, whereStatus: string ): Promise<any> {\r\n      let params: HttpParams = new HttpParams();\r\n      \r\n      params = params.set( 'orderBy', 'createDate' );\r\n      params = params.set( 'pageNum', pageNum.toString() );\r\n      params = params.set( 'pageSize', pageSize.toString() );\r\n      params = params.set( 'whereStatus', whereStatus );\r\n    \r\n      return this.http\r\n          .get<any>( acp + '/tasks/get', { params: params } )\r\n          .toPromise();\r\n    }\r\n    \r\n    completeTask( taskId: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/complete', JSON.stringify( { 'id': taskId } ), { headers: headers } )\r\n        .finally(() => {\r\n            this.eventService.complete();\r\n        } )\r\n        .toPromise();\r\n    }\r\n    \r\n    setTaskStatus( taskId: string, status: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/setTaskStatus', JSON.stringify( { 'id': taskId, 'status': status } ), { headers: headers } )\r\n        .finally(() => {\r\n            this.eventService.complete();\r\n        } )\r\n        .toPromise();\r\n    }\r\n}\r\n","<div [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-text',\n    templateUrl: './localized-text.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedTextComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ImportConfiguration } from '../../../model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ParentTreeNode, GeoObject, HierarchyOverTime } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\n\nimport { ManageParentVersionsModalComponent } from './manage-parent-versions-modal.component';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\n@Component( {\n\n    selector: 'cascading-geo-selector',\n    templateUrl: './cascading-geo-selector.html',\n} )\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n\n    @ViewChild( \"mainForm\" ) mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    constructor( private modalService: BsModalService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach( hierarchy => {\n            const object = {};\n            object['label'] = hierarchy.label;\n            object['code'] = hierarchy.code;\n\n            this.isValid = this.isValid && ( this.hierarchies.length > 0 );\n\n            hierarchy.entries.forEach( pot => {\n                const startDate = Date.parse( pot.startDate );\n                const endDate = Date.parse( pot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n                    let parents = [];\n\n                    hierarchy.types.forEach( type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if ( pot.parents[type.code] != null ) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push( parent );\n                    } );\n\n                    object['parents'] = parents;\n                }\n            } );\n\n            this.cHierarchies.push( object );\n\n        } );\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions( code: string ): void {\n\n        const hierarchy = this.hierarchies.find( h => h.code === code );\n\n        this.bsModalRef = this.modalService.show( ManageParentVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.init( hierarchy );\n        this.bsModalRef.content.onVersionChange.subscribe( hierarchy => {\n            this.calculate();\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType } from '../../../model/hierarchy';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'create-hierarchy-type-modal',\n    templateUrl: './create-hierarchy-type-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n    edit: boolean = false;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    constructor( private lService: LocalizationService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"rootGeoObjectTypes\": [],\n            \"organizationCode\": \"\"\n        };\n        \n        this.registryService.getOrganizations().then(orgs => {\n          if (!this.edit && orgs.length === 1)\n          {\n            this.hierarchyType.organizationCode = orgs[0].code;\n          }\n          this.organizations = orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if ( this.edit ) {\n            this.hierarchyService.updateHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchyService.createHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType, HierarchyNode } from '../../../model/hierarchy';\nimport { GeoObjectType } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\n\n@Component( {\n    selector: 'add-child-to-hierarchy-modal',\n    templateUrl: './add-child-to-hierarchy-modal.component.html',\n    styleUrls: []\n} )\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n\t /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n\n    public hierarchyType: HierarchyType;\n\n    public nodes: HierarchyNode[];\n\n    public allGeoObjectTypes: GeoObjectType[];\n\n    public selectedGeoObjectType: GeoObjectType;\n\n    private selectUndefinedOptionValue: any;\n\n\tprivate toRoot: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) {\n    }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n    \n    onSelect(value: string): void {\n    \tthis.allGeoObjectTypes.forEach(gObj => {\n    \t\tif(gObj.code === value){\n    \t\t\tthis.selectedGeoObjectType = gObj;\n    \t\t}\n    \t})\n    }\n    \n    handleOnSubmit(): void {\n        this.message = null;\n        \n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy( this.hierarchyType.code, parent, this.selectedGeoObjectType.code ).then( data => {\n            this.onNodeChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n        \n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { Organization } from '../../../../admin/model/settings';\n\n\n@Component( {\n    selector: 'create-geoobjtype-modal',\n    templateUrl: './create-geoobjtype-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organizations: any = [];\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    constructor( private lService: LocalizationService, private registryService: RegistryService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"geometryType\": \"POINT\",\n            \"isLeaf\": false,\n            \"isGeometryEditable\": true,\n            \"organizationCode\": \"\",\n            \"attributes\": []\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n          if (orgs.length === 1)\n          {\n            this.geoObjectType.organizationCode = orgs[0].code;\n          }\n          this.organizations = orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType( JSON.stringify( this.geoObjectType ) ).then( data => {\n            this.onGeoObjTypeCreate.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport {  GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, GeoObjectType } from '../../../model/registry';\n\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'manage-geoobjecttype-modal',\n    templateUrl: './manage-geoobjecttype-modal.component.html',\n    styleUrls: ['./manage-geoobjecttype-modal.css']\n} )\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n\n    constructor( public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n      this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe( modalState => {\n            this.modalState = modalState;\n      });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy(){\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the \n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next( data );\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { SpreadsheetModalComponent } from './modals/spreadsheet-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ImportStrategy } from '../../model/registry';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'spreadsheet',\n    templateUrl: './spreadsheet.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        {\"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\")},\n        {\"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\")},\n        {\"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\")}\n    ]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n    \n    /*\n     * Currently start date\n     */\n    startDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild( 'myFile' )\n    fileRef: ElementRef;\n\n\n    constructor( private service: IOService, private eventService: EventService, private modalService: BsModalService, private localizationService: LocalizationService, private router: Router ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( true ).then( types => {\n            this.types = types;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: acp + '/excel/get-configuration'\n        };\n\n        this.uploader = new FileUploader( options );\n\n        this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n            form.append( 'type', this.code );\n            \n            if ( this.startDate != null ) {\n                form.append( 'startDate', this.startDate );\n            }\n            if (this.importStrategy) {\n                form.append( 'strategy', this.importStrategy)\n            }\n        };\n        this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n            const configuration = JSON.parse( response );\n            \n            this.bsModalRef = this.modalService.show( SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true } );\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.error( JSON.parse( response ) );\n        }\n    }\n\n    onClick(): void {\n\n        if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n            this.uploader.uploadAll();\n        }\n        else {\n            this.error( {\n                message: this.localizationService.decode( 'io.missing.file' ),\n                error:{},\n            } );\n        }\n    }\n\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ShapefileModalComponent } from './modals/shapefile-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ImportStrategy } from '../../model/registry';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'shapefile',\n    templateUrl: './shapefile.component.html',\n    styleUrls: []\n} )\nexport class ShapefileComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n    \n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        {\"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\")},\n        {\"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\")},\n        {\"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\")}\n    ]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * Currently start date\n     */\n    startDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild( 'myFile' )\n    fileRef: ElementRef;\n\n    constructor( private service: IOService, private eventService: EventService, private modalService: BsModalService, private localizationService: LocalizationService, private router: Router ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( true ).then( types => {\n            this.types = types;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: acp + '/shapefile/get-shapefile-configuration'\n        };\n\n        this.uploader = new FileUploader( options );\n        this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n            form.append( 'type', this.code );\n\n            if ( this.startDate != null ) {\n                form.append( 'startDate', this.startDate );\n            }\n            \n            if (this.importStrategy) {\n                form.append( 'strategy', this.importStrategy)\n            }\n        };\n        this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n            const configuration = JSON.parse( response );\n\n            this.bsModalRef = this.modalService.show( ShapefileModalComponent, { backdrop: true } );\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.error( JSON.parse( response ) );\n        }\n    }\n\n    onClick(): void {\n\n        if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n            this.uploader.uploadAll();\n        }\n        else {\n            this.error( { message: this.localizationService.decode( 'io.missing.file' ), error: {} } );\n        }\n    }\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n}\n","<!-- <div class=\"new-admin-design-main\" style=\"height: 100vh;\">\n    <cgr-header></cgr-header> -->\n<loading-bar></loading-bar>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <div style=\"min-height:50vh;\">\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobjecttype.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\"\n                            [(ngModel)]=\"geoObjectType\" required>\n                            <!-- <option> <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize> </option> -->\n                            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}\n                            </option>\n                        </select>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\" style=\"overflow: visible;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobject.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <input type=\"text\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\"\n                            [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\"\n                            typeaheadOptionField=\"name\" class=\"form-control\" autocomplete=\"off\" required>\n\n                    </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"preGeoObject\">\n                <geoobject-shared-attribute-editor #attributeEditor (valid)=\"this.onValidChange($event)\"\n                    [geoObjectType]=\"this.geoObjectType\" [preGeoObject]=\"this.preGeoObject\"\n                    [(postGeoObject)]=\"this.postGeoObject\" [isGeometryInlined]=\"true\">\n                </geoobject-shared-attribute-editor>\n            </div>\n\n            <div class=\"row-holder\" style=\"z-index: 0;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"change.request.reason.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" name=\"reason-input\" required></textarea>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </fieldset>\n</form>\n","<div #mapDiv class=\"map-view-port text-left\" style=\"height:400px;\"></div>\n\n<simple-edit-control #simpleEditControl></simple-edit-control>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-edit-control',\n  templateUrl: './simple-edit-control.component.html',\n})\nexport class SimpleEditControl {\n  elRef: ElementRef\n  \n  @Input() visible = false;\n  \n  @Output() editEmitter = new EventEmitter<void>();\n  \n  constructor(elRef: ElementRef) {\n    this.elRef = elRef;\n  }\n\n  onAdd(map): any {\n    this.visible = true;\n    return this.elRef.nativeElement;\n  }\n  \n  onRemove(map): void {\n    this.elRef.nativeElement.remove();\n  }\n  \n  onClick(): void {\n    this.editEmitter.emit();\n  }\n}\n","import { Component, OnInit, Input, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\n\nimport { GeoObjectType, Attribute, ValueOverTime, GeoObjectOverTime, AttributeTerm, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component( {\n    selector: 'manage-versions-modal',\n    templateUrl: './manage-versions-modal.component.html',\n    styleUrls: [],\n    host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger( 'fadeInOut', [\n                transition( 'void => *', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] ),\n                transition( '* => void', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] )\n            ] )\n        ]]\n} )\nexport class ManageVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    readonly: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onAttributeVersionChange: Subject<GeoObjectOverTime>;\n\n    @Input() attribute: Attribute;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObjectOverTime: GeoObjectOverTime;\n\n    goGeometries: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    newVersion: ValueOverTime;\n\n    editingGeometry: number = -1;\n\n    hasDuplicateDate: boolean = false;\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService,\n        public bsModalRef: BsModalRef, public changeDetectorRef: ChangeDetectorRef ) { }\n\n    ngOnInit(): void {\n\n        this.onAttributeVersionChange = new Subject();        \n    }\n\n    tfInit(): void {\n      if ( this.attribute.code === 'geometry' && this.geoObjectOverTime.attributes[this.attribute.code].values.length === 1 ) {\n        this.editingGeometry = 0;\n      }\n    }\n    \n    geometryChange(vAttribute, event): void {\n      vAttribute.value = event;\n    }\n\n    onDateChange( event: any, vAttribute: ValueOverTime ): any {\n\n        //        console.log( event.currentTarget.value );\n        //\n        //        let dt = new Date( event.currentTarget.value );\n        //let dt = new Date(event);\n\n        let vAttributes = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        //        vAttribute.startDate = Utils.formatDateString( dt );\n\n        this.snapDates( vAttributes );\n\n        //        this.changeDetectorRef.detectChanges();\n    }\n\n    snapDates( votArr: ValueOverTime[] ): void {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data by start date \n        votArr.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n        for ( let i = 1; i < votArr.length; i++ ) {\n            let prev = votArr[i - 1];\n            let current = votArr[i];\n\n            if ( current.startDate ) {\n                prev.endDate = Utils.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n            }\n            else {\n                prev.endDate = PRESENT;\n            }\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( votArr.length > 0 ) {\n            votArr[votArr.length - 1].endDate = PRESENT;\n        }\n    }\n\n    onAddNewVersion(): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null;  // Utils.formatDateString(new Date());\n        vot.endDate = null;  // Utils.formatDateString(new Date());\n\n        if ( this.attribute.type === \"local\" ) {\n            //   vot.value = {\"localizedValue\":null,\"localeValues\":[{\"locale\":\"defaultLocale\",\"value\":null},{\"locale\":\"km_KH\",\"value\":null}]};\n            vot.value = this.lService.create();\n        }\n        else if ( this.attribute.type === 'geometry' ) {\n\n            if ( votArr.length > 0 ) {\n                if ( this.editingGeometry != -1 && this.editingGeometry != null ) {\n                    vot.value = votArr[this.editingGeometry].value;\n                }\n                else {\n                    vot.value = votArr[0].value;\n                }\n            }\n            else {\n                vot.value = { \"type\": this.geoObjectType.geometryType, \"coordinates\": [] };\n\n                if ( this.geoObjectType.geometryType === \"MULTIPOLYGON\" ) {\n                    vot.value.type = \"MultiPolygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POLYGON\" ) {\n                    vot.value.type = \"Polygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POINT\" ) {\n                    vot.value.type = \"Point\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTIPOINT\" ) {\n                    vot.value.type = \"MultiPoint\";\n                }\n                else if ( this.geoObjectType.geometryType === \"LINE\" ) {\n                    vot.value.type = \"Line\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTILINE\" ) {\n                    vot.value.type = \"MultiLine\";\n                }\n            }\n        }\n        else if ( this.attribute.type === 'term' ) {\n            var terms = this.getGeoObjectTypeTermAttributeOptions( this.attribute.code );\n\n            if ( terms.length > 0 ) {\n                vot.value = terms[0].code;\n            }\n        }\n\n        votArr.push( vot );\n\n        if ( this.attribute.code === 'geometry' ) {\n            this.editingGeometry = votArr.length - 1;\n        }\n\n        this.snapDates( votArr );\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    editGeometry( index: number ) {\n        this.editingGeometry = index;\n    }\n\n    getVersionData( attribute: Attribute ) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach( vAttribute => {\n            vAttribute.value.localeValues.forEach( val => {\n                versions.push( val );\n            } )\n        } )\n        return versions;\n    }\n\n    getDefaultLocaleVal( locale: any ): string {\n        let defVal = null;\n\n        locale.localeValues.forEach( locVal => {\n            if ( locVal.locale === 'defaultLocale' ) {\n                defVal = locVal.value;\n            }\n\n        } )\n\n        return defVal;\n    }\n\n    setDateAttribute( vot: ValueOverTime, val: string ): void {\n        vot.value = new Date( val ).getTime().toString()\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if ( attrOpts.length > 0 ) {\n                    if ( attr.code === \"status\" ) {\n                        return Utils.removeStatuses( JSON.parse( JSON.stringify( attrOpts ) ) );\n                    }\n                    else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    remove( version: any ): void {\n\n        let val = this.geoObjectOverTime.attributes[this.attribute.code];\n\n        for ( let i = 0; i < val.values.length; i++ ) {\n            let vals = val.values[i];\n\n            if ( vals.startDate === version.startDate ) {\n                val.values.splice( i, 1 );\n            }\n        }\n\n        this.snapDates( val.values );\n    }\n\n    isChangeOverTime( attr: Attribute ): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach( attribute => {\n            if ( this.attribute.code === attr.code ) {\n                isChangeOverTime = attr.isChangeOverTime\n            }\n        } )\n\n        return isChangeOverTime;\n    }\n\n    onSubmit(): void {\n\n        this.onAttributeVersionChange.next( this.geoObjectOverTime );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n        var newI = -1;\n        for ( var i = 0; i < arr.length; ++i ) {\n            if ( arr[i].code === \"CGR:Status-New\" ) {\n                newI = i;\n                break;\n            }\n        }\n        if ( newI != -1 ) {\n            arr.splice( newI, 1 );\n        }\n\n\n        var pendI = 0;\n        for ( var i = 0; i < arr.length; ++i ) {\n            if ( arr[i].code === \"CGR:Status-Pending\" ) {\n                pendI = i;\n                break;\n            }\n        }\n        if ( pendI != -1 ) {\n            arr.splice( pendI, 1 );\n        }\n\n        return arr;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n    \n}","import { Component, OnInit, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ChangeRequest, PageEvent, AbstractAction, AddChildAction, SetParentAction, CreateGeoObjectAction, RemoveChildAction, UpdateGeoObjectAction } from '../../model/crtable';\n\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ActionDetailModalComponent } from './action-detail/action-detail-modal.component'\n\n@Component( {\n\n    selector: 'request-table',\n    templateUrl: './request-table.component.html',\n    styleUrls: ['./request-table.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class RequestTableComponent {\n\n\tobjectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n\trequests: ChangeRequest[] = [];\n\n\tactions: AbstractAction[] | SetParentAction[] | AddChildAction[] | CreateGeoObjectAction[] | RemoveChildAction[] | UpdateGeoObjectAction[];\n\n\tcolumns: any[] = [];\n\t\n\ttoggleId: string;\n\n\tfilterCriteria: string = 'ALL';\n\n    constructor( private service: ChangeRequestService, private modalService: BsModalService, private localizationService: LocalizationService ) {\n        this.columns = [\n            { name: localizationService.decode( 'change.request.user' ), prop: 'createdBy', sortable: false },\n            { name: localizationService.decode( 'change.request.createDate' ), prop: 'createDate', sortable: false, width: 195 },\n            { name: localizationService.decode( 'change.request.status' ), prop: 'approvalStatus', sortable: false }\n        ];\n\n        this.refresh();\n    }\n\n    refresh(): void {\n\n            this.service.getAllRequests(\"ALL\").then( requests => {\n\n\t\t\t\tthis.requests = requests;\n\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } )\n\n    }\n\n\n    onSelect( selected: any ): void {\n\n\t\t// this.request = selected.selected;\n\n        this.service.getAllActions( selected.selected[0].oid ).then(actions => {\n\t\t\t\n\t\t\tthis.actions = actions;\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.execute( changeRequest.oid ).then( request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n\t}\n\t\n\t// onConfirmChangeRequest(request: any): void {\n\n    //     if ( request != null ) {\n    //         this.service.confirmChangeRequest( request.oid ).then( request => {\n    //             this.request = request;\n\n    //             // TODO: Determine if there is a way to update an individual record\n    //             this.refresh();\n    //         } ).catch(( response: HttpErrorResponse ) => {\n    //             this.error( response );\n    //         } );\n    //     }\n\t// }\n\t\n\tapplyActionStatusProperties(action: any ): void {\n\t\t// var action = JSON.parse(JSON.stringify(this.action));\n\t\t// action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n\t\tthis.service.applyActionStatusProperties(action).then( response => {\n\t\t\t// this.crtable.refresh()\n\t\t} ).catch(( err: HttpErrorResponse ) => {\n\t\t\tthis.error( err );\n\t\t} );\n\t}\n\n    onApproveAll(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.approveAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    onRejectAll(changeRequest: ChangeRequest): void {\n        if ( changeRequest != null ) {\n            this.service.rejectAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n\n                // TODO: Determine if there is a way to update an individual record\n                // this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\t}\n\t\n\trequestTrackBy(index: number, request: ChangeRequest) {\n    \treturn request.oid;\n\t}\n\t\n\ttoggle(event: any, oid: string): void {\n\n\t\tif(!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")){\n\t\t\tif(this.toggleId === oid){\n\t\t\t\tthis.toggleId = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggleId = oid;\n\t\t\t\tthis.onSelect({selected:[{oid:oid}]});\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(criteria: string): void {\n\n\t\t   this.service.getAllRequests(criteria).then( requests => {\n\t\t\t\tthis.requests = requests;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n\t\t\t} )\n\t\t\t\n\t\tthis.filterCriteria = criteria;\n\t}\n\n\tsetActionStatus(action: AbstractAction, status:string): void {\n\t\taction.approvalStatus = status;\n\n\t\tthis.applyActionStatusProperties(action);\n\t}\n\n\tgetActiveDetailComponent(action: AbstractAction) : any {\n      // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n      if (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\n      {\n        // return this.cuDetail;\n      }\n    //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n    //   {\n    //     return this.arDetail;\n\t//   }\n\t\n\t  return action;\n\t}\n\t\n    showActionDetail( action: any ) {\n\n\t\tthis.bsModalRef = this.modalService.show( ActionDetailModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\t\tthis.bsModalRef.content.curAction = action;\n      \n    //   var detail = this.getActiveDetailComponent();\n    //   if (detail != null)\n    //   {\n        // action.onSelect(action);\n    //   }\n    }\n\n}\n","import { GeoObjectOverTime, HierarchyOverTime } from './registry';\n\nexport class ChangeRequest {\n  oid: string;\n  createdBy: string;\n  createDate: Date;\n  approvalStatus: string;\n  statusCode: string;\n  total: number;\n  pending: number;\n}\n\nexport class AbstractAction {\n  approvalStatus: string;\n  createActionDate: Date;\n  label: string;\n  oid: string;\n  actionType: string;\n  actionLabel: string;\n}\n\nexport class UpdateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class AddChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyTypeCode: string;\n  contributorNotes: string;\n  maintainerNotes: string;\n}\n\nexport class RemoveChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyCode: string;\n}\n\nexport class GovernanceStatus {\n  key: string;\n  label: string;\n}\n\nexport class PageEvent {\n  type:string;\n  data:any;\n}\n\nexport class SetParentAction extends AbstractAction {\n  childCode: string;\n  childTypeCode: string;\n  json: HierarchyOverTime[];\n}\n\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { Action } from 'rxjs/scheduler/Action';\nimport { GeoObject, GeoObjectType } from '../../../model/registry';\nimport { CreateUpdateGeoObjectDetailComponent } from './create-update-geo-object/detail.component';\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component( {\n    selector: 'action-detail-modal',\n    templateUrl: './action-detail-modal.component.html',\n    styleUrls: []\n} )\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    @ViewChild( \"cuDetail\" ) cuDetail: ActionDetailComponent;\n    @ViewChild( \"arDetail\" ) arDetail: ActionDetailComponent;\n    @ViewChild( \"spDetail\" ) spDetail: ActionDetailComponent;\n\n    @Input()\n    set curAction( action: any ) {\n        this.action = action;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if ( this.cuDetail != null ) {\n            this.cuDetail.endEdit();\n        }\n\n        if ( this.arDetail != null ) {\n            this.arDetail.endEdit();\n        }\n\n        if ( this.spDetail != null ) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ParentReferenceProblemWidgetComponent } from './parent-reference-problem-widget.component'\nimport { TermReferenceProblemWidgetComponent } from './term-reference-problem-widget.component'\nimport { RowValidationProblemWidgetComponent } from './row-validation-problem-widget.component'\n\nimport { GeoObjectType, MasterList, ScheduledJob, ScheduledJobOverview } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\n\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'job-conflict-modal',\n    templateUrl: './job-conflict-modal.component.html',\n    styleUrls: []\n} )\nexport class JobConflictModalComponent implements OnInit {\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n    \n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) {\n      this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n      \n    }\n    \n    onProblemResolvedListener(problem: any): void {\n      this.onConflictAction.next({action:\"RESOLVED\", data: problem});\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { ModalTypes } from '../../../../shared/model/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { EventService } from '../../../../shared/service/event.service'\nimport { ScheduledJob } from '../../../model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: ['../../../../shared/component/modals/modal.css']\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    console.log(\"ERROR\", err);\n  \n    // Handle error\n    if ( err !== null ) {\n      this.error = ( err.error.localizedMessage || err.error.message || err.message );\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\n\n\n@Component( {\n    selector: 'export-format-modal',\n    templateUrl: './export-format-modal.component.html',\n    styleUrls: []\n} )\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next( this.format );\n    }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subscription, Observable } from 'rxjs';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'published-master-list-history',\n\ttemplateUrl: './published-master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tpage: any = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresults: []\n\t};\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpollingData: Subscription;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tthis.pollingData = Observable.interval(5000).subscribe(() => {\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tonDeleteMasterListVersion( oid: string ): void {\n\t\tthis.service.deleteMasterListVersion( oid ).then(data =>{\n\t\t\tthis.updateList();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tupdateList(): void {\n\t\t// update the list of versions. \n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\t\tif (this.list != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.updateList();\n\t\t}\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, true])\n\t}\n\n\tonPublishShapefile(version: MasterListVersion): void {\n\n\t\tthis.service.publishShapefile(version.oid).then(() => {\n\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDownloadShapefile(version: MasterListVersion): void {\n\t\twindow.location.href = acp + '/master-list/download-shapefile?oid=' + version.oid;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-history',\n\ttemplateUrl: './master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tforDate: string = '';\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n\t\t\tthis.list.versions.push(version);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, false])\n\t}\n\n\tonDelete(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.list.versions = this.list.versions.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== version.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            title=\"<localize key='modal.button.edit'></localize>\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            title=\"<localize key='modal.button.remove'></localize>\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n\n@Component( {\n    selector: 'manage-attributes-modal',\n    templateUrl: './manage-attributes-modal.component.html',\n    styleUrls: ['./manage-attributes-modal.css']\n} )\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy(){\n      this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    editAttribute(attr: Attribute, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":attr, \"termOption\":\"\"})\n    }\n\n    removeAttributeType(attr: Attribute, e: any): void {\n\n      this.confirmBsModalRef = this.modalService.show( ConfirmModalComponent, {\n\t\t  animated: true,\n\t\t  backdrop: true,\n\t\t  ignoreBackdropClick: true,\n\t  } );\n\t  this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + attr.label.localizedValue + ']';\n      this.confirmBsModalRef.content.data = {'attributeType': attr, 'geoObjectType': this.geoObjectType};\n      this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n\t  ( <ConfirmModalComponent>this.confirmBsModalRef.content ).onConfirm.subscribe( data => {\n          this.deleteAttributeType( data.geoObjectType.code, data.attributeType );\n\t  } );\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: Attribute): void {\n\n          this.registryService.deleteAttributeType( geoObjectTypeCode, attr.code ).then( data => {\n            this.onDeleteAttribute.next( data );\n\n            if(data){\n              this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message\" class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                        <error-message [message]=\"message\"></error-message>\n                    </div>\n                </div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <textarea [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\"></textarea>\n    </span>\n  </div>\n</div>\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from '@angular/forms';\n\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator() : ValidatorFn {\n  return (c: AbstractControl) => {\n    if(c.value){\n        let isValid = c.value.indexOf(\" \") === -1;\n        \n        if(isValid) {\n            return null;\n        } else {\n            return {\n                geoObjectAttributeCode: {\n                     valid: false\n                }\n            };\n        }\n    }\n\n  }\n}\n\n\n@Directive({\n  selector: '[geoObjectAttributeCode][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n  ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n  validator: ValidatorFn;\n  \n  constructor() {\n    this.validator = validateGeoObjectAttributeCodeValidator();\n  }\n  \n  validate(c: FormControl) {\n    return this.validator(c);\n  }\n  \n}","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ErrorMessageComponent } from '../../../../shared/component/message/error-message.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, AttributeTerm, AttributeDecimal, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n \n\n@Component( {\n    selector: 'define-attribute-modal-content',\n    templateUrl: './define-attribute-modal-content.component.html',\n    styleUrls: ['./define-attribute-modal-content.css'],\n    animations: [\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    message: string = null;\n    newAttribute: Attribute = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.create.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, \n        private geoObjectTypeManagementService: GeoObjectTypeManagementService, private localizeService: LocalizationService,\n        private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.addAttributeType( this.geoObjectType.code, this.newAttribute ).then( data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    setAttribute(type:string): void {\n        if(type === 'term'){\n            this.newAttribute = new AttributeTerm(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else if(type === 'float') {\n            this.newAttribute = new AttributeDecimal(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else{\n            this.newAttribute = new Attribute(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n\n        this.attributeInputComponent.animate();\n    }\n\n    isFormValid(): boolean {\n        \n        let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        if(isAttrValid){\n            return true;\n        }\n\n        return false;\n    }\n    \n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n   <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { GeoObjectType, AttributeTerm, GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, Term} from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component( {\n    selector: 'term-option-widget',\n    templateUrl: './term-option-widget.component.html',\n    styleUrls: ['./term-option-widget.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms')),\n              transition('show => none', animate('100ms'))\n        ]),\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    state: string = 'none';\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy(){\n    \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n            \n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n            \n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\": \"\"})\n\n    }    \n}\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\n\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n \n@Component( {\n    selector: 'edit-attribute-modal-content',\n    templateUrl: './edit-attribute-modal-content.component.html',\n    styleUrls: ['./edit-attribute-modal-content.css'],\n    animations: [\n        trigger('openClose', \n            [\n                transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":this.attribute, \"termOption\":\"\"};\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.updateAttributeType( this.geoObjectType.code, this.attribute ).then( data => {\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    isFormValid(): boolean {\n        \n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    back(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n      \n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.hierarchy\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"configuration.hierarchy\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of configuration.hierarchies\" value={{hierarchy.code}}>{{hierarchy.label}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> {{location.label}} </label>\n          </div>\n          <div class=\"holder\">\n            <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n              <option value=\"\"></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm( action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"modal-body\">\n   <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input autofocus type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\" required geoObjectAttributeCode>\n                            </span>\n                        </div>\n                    </div>\n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n\nimport { Step, StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, Term, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n \n@Component( {\n    selector: 'edit-term-option-input',\n    templateUrl: './edit-term-option-input.component.html',\n    styleUrls: [],\n    animations: [\n        trigger('openClose', \n            [\n                transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    @Input() termOption: Term;\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":this.attribute, \"termOption\":\"\"};\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), \"active\":true, \"enabled\":true}\n\n    ]};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.updateAttributeTermTypeOption( this.termOption ).then( data => {\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    isFormValid(): boolean {\n        \n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.editGeoObjectType.title\"></localize>\n                {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n\n            <localized-input [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                        <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option>\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.organizationCode\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group list-group-flush\">\n                                <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li>\n                            </ul>\n\n                            <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\">\n                                <localize key=\"modal.button.manageAttributes\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'geoobjecttype-input',\n    templateUrl: './geoobjecttype-input.component.html',\n    styleUrls: ['./geoobjecttype-input.css']\n} )\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange:  EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n    \n    @Input('setGeoObjectType') \n    set in(geoObjectType: GeoObjectType){\n        if(geoObjectType){\n          this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        //   this.geoObjectType = geoObjectType;\n        }\n    }\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizationService: LocalizationService, private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n    }\n\n    ngAfterViewInit() {\n    }\n\n    ngOnDestroy(){\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType( this.editGeoObjectType ).then( geoObjectType => {\n\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n        \n        // return false;\n\n        return true;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message\" class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                    <error-message [message]=\"message\"></error-message>\n                </div>\n            </div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option, $event)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option, $event)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from '../../../../shared/component/message/error-message.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectType, AttributeTerm, Term, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n@Component( {\n    selector: 'manage-term-options',\n    templateUrl: './manage-term-options.component.html',\n    styleUrls: ['./manage-term-options.css'],\n    animations: [\n        trigger( 'toggleInputs', [\n            state( 'none, void',\n                style( { 'opacity': 0 } )\n            ),\n            state( 'show',\n                style( { 'opacity': 1 } )\n            ),\n            transition( 'none => show', animate( '300ms' ) ),\n            transition( 'show => none', animate( '100ms' ) )\n        ] ),\n        trigger( 'openClose',\n            [\n                transition(\n                    ':enter', [\n                        style( { 'opacity': 0 } ),\n                        animate( '500ms', style( { 'opacity': 1 } ) )\n                    ]\n                ),\n                transition(\n                    ':leave', [\n                        style( { 'opacity': 1 } ),\n                        animate( '0ms', style( { 'opacity': 0 } ) ),\n\n                    ]\n                )]\n        )\n    ]\n} )\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    termOption: Term;\n    state: string = 'none';\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        \"steps\": [\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.geoobjecttype\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.attributes\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.edit.attribute\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.term.options\" ), \"active\": true, \"enabled\": true }\n        ]\r\n    };\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig( this.modalStepConfig );\n        this.termOption = new Term( \"\", this.localizeService.create(), this.localizeService.create() );\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone( event: AnimationEvent ): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if ( this.termOption.code && this.termOption.code.length > 0 ) {\n\n            // If code has a space\n            if ( this.termOption.code.indexOf( \" \" ) !== -1 ) {\n                return false;\n            }\n\n            // If label is only spaces\n            for(let i = 0; i < this.termOption.label.localeValues.length; i++) {\n              if ( this.termOption.label.localeValues[i].value.replace( /\\s/g, '' ).length === 0 ) {\n                return false\n              }                \n            }\n            \n\n            return true;\n        }\n        else if ( this.termOption.code && this.termOption.code.indexOf( \" \" ) !== -1 ) {\n            return false;\n        }\n\n        return false\n    }\n\n    addTermOption(): void {\n\n        this.registryService.addAttributeTermTypeOption( this.attribute.rootTerm.code, this.termOption ).then( data => {\n\n            this.attribute.rootTerm.children.push( data );\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n    deleteTermOption( termOption: Term ): void {\n\n        this.registryService.deleteAttributeTermTypeOption( termOption.code ).then( data => {\n\n            if ( this.attribute.rootTerm.children.indexOf( termOption ) !== -1 ) {\n                this.attribute.rootTerm.children.splice( this.attribute.rootTerm.children.indexOf( termOption ), 1 );\n            }\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    removeTermOption( termOption: Term ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + '[' + termOption.label + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.deleteTermOption( termOption );\n        } );\n    }\n\n    editTermOption( termOption: Term ): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editTermOption, \"attribute\": this.attribute, \"termOption\": termOption } )\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" } )\n    }\n\n    error( err: HttpErrorResponse ): void {\n        if ( err !== null ) {\n            // TODO: add error modal\n            //   this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            //   this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { HierarchyOverTime, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'manage-parent-versions-modal',\n    templateUrl: './manage-parent-versions-modal.component.html',\n    styleUrls: []\n} )\nexport class ManageParentVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onVersionChange: Subject<HierarchyOverTime>;\n\n    hierarchy: HierarchyOverTime = null;\n\n    hasDuplicateDate: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onVersionChange = new Subject();\n\n    }\n\n    init( hierarchy: HierarchyOverTime ): void {\n        this.hierarchy = hierarchy;\n    }\n\n    onAddNewVersion(): void {\n\n        let parents = {};\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parents[current.code] = {};\n        }\n\n        const entry = {\n            startDate: null,\n            endDate: null,\n            parents: parents\n        }\n\n        this.hierarchy.entries.push( entry );\n    }\n\n    remove( entry: any ): void {\n\n        for ( let i = 0; i < this.hierarchy.entries.length; i++ ) {\n            let vals = this.hierarchy.entries[i];\n\n            if ( vals.startDate === entry.startDate ) {\n                this.hierarchy.entries.splice( i, 1 );\n            }\n        }\n\n        this.snapDates();\n    }\n\n    getTypeAheadObservable( date: string, type: any, entry: any, index: number ): Observable<any> {\n\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let hierarchyCode = null;\n\n        if ( index > 0 ) {\n            let pType = this.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if ( parent.geoObject != null && parent.geoObject.properties.code != null ) {\n                hierarchyCode = this.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n            }\n        }\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( entry.parents[type.code].text, geoObjectTypeCode, parentCode, hierarchyCode, date ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, type: any, entry: any, date: string ): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        let parentTypes = [];\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parentTypes.push( current.code );\n\n            if ( current.code === type.code ) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects( e.item.uid, type.code, parentTypes, true, date ).then( ancestors => {\n\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n            for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n                let current = this.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while ( ancestor != null && ancestor.geoObject.properties.type != current.code ) {\n                    if ( ancestor.parents.length > 0 ) {\n                        ancestor = ancestor.parents[0];\n                    }\n                    else {\n                        ancestor = null;\n                    }\n                }\n\n                if ( ancestor != null ) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue;\n                }\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSubmit(): void {\n\n        this.onVersionChange.next( this.hierarchy );\n\n        this.bsModalRef.hide();\n    }\n\n    onDateChange( event: any ): any {\n        this.snapDates();\n    }\n\n    snapDates() {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data\n        this.hierarchy.entries.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n\n        for ( let i = 1; i < this.hierarchy.entries.length; i++ ) {\n            let prev = this.hierarchy.entries[i - 1];\n            let current = this.hierarchy.entries[i];\n\n            prev.endDate = this.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( this.hierarchy.entries.length > 0 ) {\n            this.hierarchy.entries[this.hierarchy.entries.length - 1].endDate = PRESENT;\n        }\n    }\n\n    formatDateString( dateObj: Date ): string {\n        const day = dateObj.getUTCDate();\n\n        return dateObj.getUTCFullYear() + \"-\" + ( dateObj.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [(ngModel)]=\"parent.geoObject.properties.displayLabel.localizedValue\" name=\"{{hierarchy.code}}-{{parent.code}}-input\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Observable } from 'rxjs/Observable';\n\nimport { GeoObjectOverTime, GeoObjectType } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-create-geo-object',\n    templateUrl: './detail.component.html',\n    styleUrls: ['./crtable-detail-create-geo-object.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    readOnly: boolean = true;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if ( this.isNew() ) {\n            this.preGeoObject = this.postGeoObject;\n        }\n\n        this.onSelect( this.action );\n    }\n\n    isNew(): boolean {\n        return ( this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\" );\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n        }\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSelect( action: AbstractAction ) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n            this.registryService.getGeoObjectOverTime( this.postGeoObject.attributes.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( \"Error\", err );\n                this.error( err );\n            } );\n        }\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( true );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( false );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\n\nimport { AddChildAction } from '../../../../model/crtable';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-add-remove-child',\n    templateUrl: './detail.component.html',\n    styleUrls: []\n} )\nexport class AddRemoveChildDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: AddChildAction;\n\n    original: AddChildAction;\n\n    readOnly: boolean = true;\n\n\n    private bsModalRef: BsModalRef;\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.original = Object.assign( {}, this.action );\n    }\n\n    applyAction() {\n        this.changeRequestService.applyAction( this.action ).then( response => {\n            this.original = Object.assign( {}, this.action );\n\n            this.unlockAction();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n\n            this.action = this.original;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n\n    onSelect( action: AddChildAction ) {\n        this.action = action;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Observable } from 'rxjs/Observable';\n\nimport { HierarchyOverTime } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'set-parent-detail',\n    templateUrl: './set-parent-detail.component.html',\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class SetParentDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    hierarchies: HierarchyOverTime[] = [];\n    readOnly: boolean = true;\n\n    bsModalRef: BsModalRef;\n    \n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;    \n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.hierarchies = this.action.json;\n\n        this.onSelect( this.action );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }    \n\n    onSelect( action: AbstractAction ) {\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GeoObjectType, MasterList, ScheduledJob, ImportError } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'import-problem-widget',\n    templateUrl: './import-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ImportProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        } );\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId( null );\n        editModal.content.setOnSuccessCallback(() => {\n\n          this.onProblemResolved.emit(this.problem);\n          this.bsModalRef.hide()\n            \n        } );\n    }\n\n    getFriendlyProblemType(probType: string): string {\n\n        if(probType === \"net.geoprism.registry.io.ParentCodeException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.PostalCodeLocationException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.AmbiguousParentException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.multi.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.InvalidGeometryException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.invalid.geom.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.DataNotFoundException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.required.value.lookup\" );\n        }\n        \n        if(\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.permission\" );\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if(\n          probType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.duplicate.data.lookup\" );\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'parent-reference-problem-widget',\n    templateUrl: './parent-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'term-reference-problem-widget',\n    templateUrl: './term-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( conflict: any ): Observable<any> {\n        return Observable.create(( observer: any ) => {\n            this.iService.getTermSuggestions( conflict.mdAttributeId, this.searchLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n    \n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        classifierId: this.termId,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'row-validation-problem-widget',\n    templateUrl: './row-validation-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class RowValidationProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    formatAffectedRows(rows: string)\n    {\n      return rows.replace(/,/g, \", \");\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { FileUploadModule } from 'ng2-file-upload/ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { DatePipe } from '@angular/common';\nimport { CustomFormsModule } from 'ng2-validation'\n\nimport { LocalizedInputComponent } from './component/form-fields/localized-input/localized-input.component';\nimport { LocalizedTextComponent } from './component/form-fields/localized-text/localized-text.component';\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { CreateHierarchyTypeModalComponent } from './component/hierarchy/modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './component/hierarchy/modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './component/hierarchy/modals/create-geoobjtype-modal.component';\nimport { ManageAttributesModalComponent } from './component/hierarchy/geoobjecttype-management/manage-attributes-modal.component';\nimport { DefineAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component';\nimport { EditAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component';\nimport { ShapefileModalComponent } from './component/importer/modals/shapefile-modal.component';\nimport { AttributesPageComponent } from './component/importer/modals/attributes-page.component';\nimport { LocationPageComponent } from './component/importer/modals/location-page.component';\nimport { LocationProblemPageComponent } from './component/importer/modals/location-problem-page.component';\nimport { LocationProblemComponent } from './component/importer/modals/location-problem.component';\nimport { TermProblemPageComponent } from './component/importer/modals/term-problem-page.component';\nimport { TermProblemComponent } from './component/importer/modals/term-problem.component';\nimport { SpreadsheetModalComponent } from './component/importer/modals/spreadsheet-modal.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { TermOptionWidgetComponent } from './component/hierarchy/geoobjecttype-management/term-option-widget.component';\nimport { AttributeInputComponent } from './component/hierarchy/geoobjecttype-management/attribute-input.component';\nimport { EditTermOptionInputComponent } from './component/hierarchy/geoobjecttype-management/edit-term-option-input.component';\nimport { ManageTermOptionsComponent } from './component/hierarchy/geoobjecttype-management/manage-term-options.component';\nimport { GeoObjectTypeInputComponent } from './component/hierarchy/geoobjecttype-management/geoobjecttype-input.component';\nimport { ManageGeoObjectTypeModalComponent } from './component/hierarchy/modals/manage-geoobjecttype-modal.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { PublishModalComponent } from './component/master-list/publish-modal.component';\nimport { ExportFormatModalComponent } from './component/master-list/export-format-modal.component';\nimport { RequestTableComponent } from './component/crtable/request-table.component';\nimport { CreateUpdateGeoObjectDetailComponent } from './component/crtable/action-detail/create-update-geo-object/detail.component';\nimport { AddRemoveChildDetailComponent } from './component/crtable/action-detail/add-remove-child/detail.component';\nimport { SetParentDetailComponent } from './component/crtable/action-detail/set-parent/set-parent-detail.component';\nimport { GeoObjectSharedAttributeEditorComponent } from './component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component';\nimport { ManageVersionsModalComponent } from './component/geoobject-shared-attribute-editor/manage-versions-modal.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { GeoObjectEditorComponent } from './component/geoobject-editor/geoobject-editor.component';\nimport { GeoObjectEditorMapComponent } from './component/geoobject-editor-map/geoobject-editor-map.component';\nimport { SimpleEditControl } from './component/geoobject-editor-map/simple-edit-control/simple-edit-control.component';\nimport { CascadingGeoSelector } from './component/cascading-geo-selector/cascading-geo-selector';\nimport { ManageParentVersionsModalComponent } from './component/cascading-geo-selector/manage-parent-versions-modal.component';\nimport { ActionDetailModalComponent } from './component/crtable/action-detail/action-detail-modal.component';\nimport { ShapefileComponent } from './component/importer/shapefile.component';\nimport { SpreadsheetComponent } from './component/importer/spreadsheet.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { PublishedMasterListHistoryComponent } from './component/master-list/published-master-list-history.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { JobConflictModalComponent } from './component/scheduled-jobs/conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './component/scheduled-jobs/conflict-widgets/reupload-modal.component';\nimport { ParentReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component';\nimport { TermReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component';\nimport { RowValidationProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component';\nimport { StepIndicatorComponent } from './component/scheduled-jobs/step-indicator.component';\nimport { ImportProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/import-problem-widget.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { GeoObjectAttributeCodeValidator } from './factory/form-validation.factory';\n\nimport { GeoObjectTypePipe } from './pipe/geoobjecttype.pipe';\nimport { GeoObjectAttributeExcludesPipe } from './pipe/geoobject-attribute-excludes.pipe';\nimport { ToEpochDateTimePipe } from './pipe/to-epoch-date-time.pipe';\nimport { RegistryService } from './service/registry.service';\nimport { TaskService } from './service/task.service';\nimport { HierarchyService } from './service/hierarchy.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\nimport { ChangeRequestService } from './service/change-request.service';\nimport { IOService } from './service/io.service';\nimport { MapService } from './service/map.service';\nimport { GeoObjectTypeManagementService } from './service/geoobjecttype-management.service'\n\nimport { RegistryRoutingModule } from './registry-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\t//        ModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule,\n\t\tCustomFormsModule,\n\t\tSharedModule,\n\t\tRegistryRoutingModule\n\t],\n\tdeclarations: [\n\t\tHierarchyComponent,\n\t\tRequestTableComponent,\n\t\tCreateUpdateGeoObjectDetailComponent,\n\t\tAddRemoveChildDetailComponent,\n\t\tSetParentDetailComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tShapefileModalComponent,\n\t\tAttributesPageComponent,\n\t\tLocationPageComponent,\n\t\tLocationProblemPageComponent,\n\t\tLocationProblemComponent,\n\t\tTermProblemPageComponent,\n\t\tTermProblemComponent,\n\t\tSpreadsheetModalComponent,\n\t\tGeoObjectTypePipe,\n\t\tGeoObjectAttributeCodeValidator,\n\t\tEditAttributeModalContentComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tLocalizedInputComponent,\n\t\tLocalizedTextComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tGeoObjectAttributeExcludesPipe,\n\t\tToEpochDateTimePipe,\n\t\tGeoObjectEditorMapComponent,\n\t\tSimpleEditControl,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tCascadingGeoSelector,\n\t\tManageParentVersionsModalComponent,\n\t\tActionDetailModalComponent,\n\t\tHierarchyComponent,\n\t\tShapefileComponent,\n\t\tSpreadsheetComponent,\n\t\tDataExportComponent,\n\t\t// Master List screens\n\t\tMasterListManagerComponent,\n\t\tMasterListComponent,\n\t\tMasterListHistoryComponent,\n\t\tPublishedMasterListHistoryComponent,\n\t\tPublishModalComponent,\n\t\tMasterListViewComponent,\n\t\t// Scheduled jobs\n\t\tExportFormatModalComponent,\n\t\tScheduledJobsComponent,\n\t\tJobComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tParentReferenceProblemWidgetComponent,\n\t\tTermReferenceProblemWidgetComponent,\n\t\tRowValidationProblemWidgetComponent,\n\t\tStepIndicatorComponent,\n\t\tImportProblemWidgetComponent,\n\t\tTaskViewerComponent\n\t],\n\tproviders: [\n\t\tMapService,\n\t\tHierarchyService,\n\t\tLocalizationManagerService,\n\t\tChangeRequestService,\n\t\tIOService,\n\t\tGeoObjectTypeManagementService,\n\t\tRegistryService,\n\t\tTaskService,\n\t\tDatePipe,\n\t\tToEpochDateTimePipe,\n\t\tStepIndicatorComponent\n\t],\n\tentryComponents: [\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tEditAttributeModalContentComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tShapefileModalComponent,\n\t\tSpreadsheetModalComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tManageParentVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tPublishModalComponent,\n\t\tExportFormatModalComponent,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tActionDetailModalComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tStepIndicatorComponent\n\t]\n})\nexport class RegistryModule { }\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <loading-bar></loading-bar>\n  \n  <div id=\"app-container\" class=\"container-fluid\">\n  \n  <!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n    \n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.types.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <!-- to filter out already assigned types use this pipe > geoobjecttype:nodes -->\n          <li class=\"list-group-item\" *ngFor=\"let type of geoObjectTypes\">\n            {{type.label.localizedValue}} <i *ngIf=\"type.isLeaf === 'true'\" class=\"fa fa-leaf\" style=\"font-size:15px;cursor:auto;margin-left:5px;\" aria-hidden=\"true\"></i> \n            <i class=\"fa fa-pencil clickable pull-right\" (click)=\"manageGeoObjectType(type)\"> </i> \n            <i class=\"fa fa-times delete-btn clickable pull-right\" *ngIf=\"!excludeGeoObjectTypeDeletes(type)\" (click)=\"deleteGeoObjectType(type)\"></i> \n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"createGeoObjectType()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n        \n      </div>\n    \n    \n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <li class=\"list-group-item clickable\" [ngClass]=\"{active: isActive(hierarchy)}\" *ngFor=\"let hierarchy of hierarchies;\" (click)=\"hierarchyOnClick($event,hierarchy)\">\n            <i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}} \n            <i class=\"fa fa-pencil pull-right clickable\" (click)=\"editHierarchyType(hierarchy)\"> </i>            \n            <i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\" class=\"fa fa-times delete-btn clickable pull-right\" (click)=\"deleteHierarchyType(hierarchy)\"></i> \n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"createHierarchy()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <h3> \n            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n            <span *ngIf=\"currentHierarchy\">{{currentHierarchy.label.localizedValue}}</span>\n        </h3>\n        <hr>\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n          <div>\n            <button type=\"submit\" class=\"btn btn-primary\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n          </div>\n        </div>\n      </div>\n            \n    </div>\n    \n  </div>\n  \n  <context-menu #nodeMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"addChildToHierarchy($event.item)\">\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>\n    </ng-template>\n  </context-menu>\n  \n  <context-menu #leafMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>  {{item?.data.label.localizedValue}}\n    </ng-template>\n  </context-menu>\n\n</div>\n","import { LocalizedValue } from \"../../shared/model/core\";\n\nexport class HierarchyType {\n  code: string;\n  description: LocalizedValue;\n  label: LocalizedValue;\n  rootGeoObjectTypes: HierarchyNode[];\n  organizationCode: string;\n}\n\nexport class Hierarchy {\n  id: string;\n  label: string;\n}\n\n//export class HierarchyNodeType {\n//  id: string;\n//  name: string;\n//}\n\nexport class HierarchyNode {\n\tgeoObjectType: string;\n    children: HierarchyNode[];\n    label: string; // added for angular-tree-widget\n//    id: string; // added for angular-tree-widget\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">Import spreadsheet</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">Import shapefile</a> \n\t\t\t\t\t<!-- <a style=\"font-size:20px;\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'EXPORT'}\" (click)=\"renderContent('EXPORT')\">Export data</a> -->\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<spreadsheet *ngIf=\"content === 'SPREADSHEET'\"></spreadsheet>\n\t\t\t\t\t<shapefile *ngIf=\"content === 'SHAPEFILE'\"></shapefile>\n\t\t\t\t\t<!-- <data-export *ngIf=\"content === 'EXPORT'\"></data-export> -->\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","\n<form #form=\"ngForm\">\n    <div class=\"form-group row\" *ngIf=\"types\">\n        <!-- <div class=\"col-md-12\"> -->\n        <label class=\"col-md-3 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                <option></option>\n                <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n            </select>\n        </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"form-group row\">\n        <!-- <div class=\"col-md-12\"> -->\n        <label class=\"col-md-3 text-right\" for=\"strategy\">\n            <localize key=\"spreadsheet.import.import.strategy\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n            </select>\n        </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"file\"> <localize key=\"io.spreadsheet\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n        </div>\n    </div>\n\n\n\n    <div class=\"form-group row\">\n        <div class=\"button-holder col-md-12 text-right\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n        </div>\n    </div>\n</form>\n\n","<form #form=\"ngForm\">\n    <div class=\"form-group row\" *ngIf=\"types\">\n        <label class=\"col-md-3 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n        <div class=\"col-md-9\">\n            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                <option></option>\n                <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n            </select>\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <!-- <div class=\"col-md-12\"> -->\n        <label class=\"col-md-3 text-right\" for=\"strategy\">\n            <localize key=\"shapefile.import.import.strategy\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n            </select>\n        </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\"></div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"file\"> <localize key=\"io.shapefile\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <div class=\"button-holder col-md-12 text-right\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n        </div>\n    </div>\n</form>\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'MANAGE'}\" (click)=\"renderContent('MANAGE')\">Manage</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isContributor\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SUBMIT'}\" (click)=\"renderContent('SUBMIT')\">Submit</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<submit-change-request *ngIf=\"content === 'SUBMIT'\"></submit-change-request>\n\t\t\t\t\t<request-table *ngIf=\"content === 'MANAGE'\"></request-table>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n        </div>\n    </div>\n</div>\n","<div *ngIf=\"this.visible\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button class=\"fa fa-pencil-square-o\" style=\"color: black; font-size: 18px;\" title=\"location.management.editing | localize\" (click)=\"this.onClick();\"></button>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'geoObjectAttributeExcludesFilter',\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n       \n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","<!-- <div class=\"row text-center\">\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"change.request.title\"></localize>\n        </h2>\n    </div>\n</div> -->\n\n<!-- <div class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            <localize key=\"change.request.table.title\"></localize>\n        </h3>\n    </div>\n</div> -->\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\t\t<div class=\"form-group button-row\">\n\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" >\n\t\t\t\t<localize key=\"change.request.all.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.pending.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.accepted.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;\" >\n\t\t\t\t<localize key=\"change.request.rejected.filter.link\"></localize>\n\t\t\t</a>\n\n\t\t</div>\n\n\t\t<hr style=\"border-top:solid 3px #6BA542\" />\n\n\t</div>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\n\t<table class=\"table\">\n\t\t<thead>\n\t\t\t<tr style=\"height: 50px;color: grey;\">\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n\t\t\t\t<!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n        <tbody>\n\t\t\t<ng-template ngFor let-req [ngForOf]=\"requests\" [ngForTrackBy]=\"requestTrackBy\">\n\t\t\t\t<tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n                \t<td class=\"col-md-4\">\n\t\t\t\t\t\t<h5><strong>{{req.createdBy}}</strong></h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n\t\t\t\t\t\t {{req.createDate}}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\">\n\t\t\t\t\t\t<h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n\t\t\t\t\t\t\t <strong>{{req.approvalStatus}}</strong>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!-- <td class=\"col-md-3\">\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onConfirmChangeRequest(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t</button>\t\n\t\t\t\t\t</td> -->\n\t\t\t\t\t<td class=\"col-md-1\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\">\n            \t\t<td colspan=\"5\" >\n\n\t\t\t\t\t\t<div class=\"row\" style=\"margin:0;\">\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\n\t\t\t\t\t\t\t\t<div *ngFor=\"let action of actions\" class=\"action-card\" [ngClass]=\"{'status-pending-container':action.approvalStatus === 'PENDING', 'status-accepted-container':action.approvalStatus === 'ACCEPTED', 'status-rejected-container':action.approvalStatus === 'REJECTED'}\" style=\"margin-bottom:10px; background-color:white;\"> \n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"margin:0; padding-top:5px; padding-bottom:5px;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-3\" style=\"border-right:2px grey solid; height:50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-circle\" style=\"float:left; line-height: 50px;\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"vertical-center\" style=\"margin:0; float:left; padding-left:20px;\">{{req.createdBy}}</h4>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" style=\"height: 50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"fa fa-refresh vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"fa fa-plus vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"fa fa-link vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"fa fa-chain-broken vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Update <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ]</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Create <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ] </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.SetParentAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set parents of <b>{{action.childCode}}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set <b>{{action.childTypeCode}}</b> as a child of <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Remove <b>{{action.childTypeCode}}</b> from <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-4\" style=\"height: 50px;text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t\t<h4 *ngIf=\"req.approvalStatus !== 'PENDING'\" class=\"vertical-center\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" style=\"margin: 0;\">{{action.approvalStatus}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'ACCEPTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'ACCEPTED')\" class=\"btn btn-primary vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.accept.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'ACCEPTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'REJECTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'REJECTED')\" class=\"btn btn-danger vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.reject.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'REJECTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'PENDING'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'PENDING')\" class=\"btn btn-warning vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.pending.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'PENDING'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"height: 150px;border-top: 1px grey solid;margin:0;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.contributorNotes\" readonly=\"true\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.maintainerNotes\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-2\" style=\"height:100%;\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" (click)=\"showActionDetail(action)\" class=\"btn btn-default vertical-center\" style=\"width:100%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.action.details.label\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> <!-- END action-card -->\n\n\t\t\t\t\t\t\t\t<!-- <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\">Change Request Notes</label>\n\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" value=\"\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t</div>\t -->\n\n\t\t\t\t\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onApproveAll(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll(req)\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\t\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.changes.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</td>\n        \t\t</tr>\n\t\t\t</ng-template>\n        </tbody>\n\t</table>\n\t</div>\t \n</div>\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.admin\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{job.createDate}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.createDate}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.lastUpdateDate}}</p>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <!-- <progress-bar></progress-bar> -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.publishDate\"></localize>\n                    : {{list.publishDate}}\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : {{list.forDate}}\n                </h4>\n            </div>\n        </div>\n\n\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            \n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i class=\"fa fa-refresh clickable\" style=\"font-size: 25px;vertical-align: middle;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n            \n            \n                    <!-- <button type=\"submit\" (click)=\"clearFilters()\" class=\"btn btn-default\" role=\"button\">\n                                <localize key=\"masterlist.clearFilters\"></localize>\n                            </button>\n                            <button *ngIf=\"isMaintainer\" type=\"submit\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"masterlist.publish\"></localize>\n                            </button> -->\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th *ngIf=\"!list.leaf\" style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.edit.column\"></localize></th>\n                            <th *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\" [typeaheadAsync]=\"true\" [typeahead]=\"getValues(attribute)\" (typeaheadOnSelect)=\"handleListChange($event, attribute)\" [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td *ngIf=\"!list.leaf\" style=\"width: 3%; text-align: center;\" class=\"label-column\"><a class=\"fa fa-map-marker\" (click)=\"onGoto(result)\"></a></td>\n                            <td style=\"width: 3%\" class=\"label-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(result)\"></a></td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n                <div class=\"button-holder pull-right\">\n                    <button type=\"submit\" (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.newGeoObject\"></localize>\n                    </button>\n                    <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                        <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\">Published</a> <a style=\"margin-right: 10px; font-size: 20px;\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\">Exploratory</a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.createDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version.oid )\" class=\"btn btn-danger\" role=\"button\">\n                                    Delete\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n    <div *ngIf=\"list && (list.admin)\" style=\"margin-bottom: 30px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span> <span style=\"display: block;\"> {{job.author}} </span> <span style=\"display: block;\"> {{job.type}} </span> <span style=\"display: block;\"> {{job.status}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && (list.admin)\" style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> <input id=\"forDate\" type=\"date\" name=\"forDate\" [(ngModel)]=\"forDate\" required>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.createDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"isMaintainer || isAdmin\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n  \n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span>{{task.createDate}}</span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span style=\"margin-right:30px;\">{{task.createDate}}</span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label><span>{{task.completedDate}}</span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <error-message [message]=\"message\"></error-message>\n\n    <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n\n    <!-- <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}\n      </h1>\n    </div> -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" required>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.description.localeValues\">\n          <div>\n            <label>\n              <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n            </label>\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n              class=\"form-control\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required>\n            <option></option>\n            <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"organization\" [(ngModel)]=\"geoObjectType.organizationCode\" required>\n            <option></option>\n            <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]'\n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","<form>\n\n  <div class=\"modal-body\">\n    <form class=\"modal-form\">\n\n      <error-message [message]=\"message\"></error-message>\n\n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.description.localeValues\">\n        <label for=\"descriptionInput\">\n          <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n          class=\"form-control\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select [disabled]=\"edit\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button type=\"submit\" [disabled]=\"hierarchyType.code.length < 1\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a (click)=\"toggle()\"> <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span *ngIf=\"show\">\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","\n<form >\n     \n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n  \n  <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\"></manage-attributes-modal>\n  \n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" ></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" ></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n \n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\" ></edit-term-option-input>\n \n</form>","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #versionsform=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\">\n\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"width: 100%;border: none;\">\n                    <div *ngIf=\"geoObjectOverTime\" >\n\n                        <div class=\"panel\" style=\"box-shadow: none;\">\n                            <div class=\"panel-body\">\n                                <ul class=\"list-group\">\n                                    <!-- <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> -->\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        \n                                        <div *ngIf=\"attribute.type !== 'geometry'\">\n                                                <table class=\"table table-striped\"> \n                                                    <thead style=\"font-size: 14px;\"> \n                                                        <tr> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                            <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                            <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                                        </tr> \n                                                    </thead> \n\n                                                    <tbody *ngIf=\"attribute.type === 'local'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\" >\n                                                            <td >\n                                                                <table style=\"width: 100%;\">\n                                                                    <tr *ngFor=\"let loc of vAttribute.value.localeValues; let idx = index;\" > \n                                                                        <td style=\"vertical-align: bottom; width: 35%;padding: 5px;\">\n                                                                            <h5>{{loc.locale}}</h5>\n                                                                            <input type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"loc.value = $event\" [attr.required]=\"loc.locale === 'defaultLocale'\">\n                                                                            <div class=\"form-input-validation-error-message-wrapper\">\n                                                                                <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">Value is required.</p>\n                                                                            </div>\n                                                                        </td> \n                                                                    </tr>\n                                                                </table>\n                                                            </td>\n\n                                                            <td style=\"vertical-align: middle; width: 35%;padding: 5px;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate_' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                                <div class=\"form-input-validation-error-message-wrapper\">\n                                                                    <p *ngIf=\"!vAttribute.startDate\" class=\"error-message\">Start date is required.</p>\n                                                                </div>\n                                                            </td> \n                                                            <td style=\"vertical-align: middle; width: 20%;padding: 5px;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle; width: 10%;padding: 5px; text-align: center;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n\n                                                    <!-- TODO: This isn't getting the options on load -->\n                                                    <tbody *ngIf=\"attribute.type === 'term'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <!-- <h5>{{loc.locale}}</h5> -->\n                                                                <!-- <input type=\"text\" class=\"form-control\" id=\"loc-val-{{i}}\" name=\"loc-val-{{i}}\" [(ngModel)]=\"version.value\" (ngModelChange)=\"version.value = $event\"> -->\n                                                                <select id=\"mod-{{attribute.code}}\" [name]=\"'mod-term-' + i + '-' + attribute.code\" class=\"select-area\" style=\"float:none;\" [(ngModel)]=\"vAttribute.value\">\n                                                                    <option value=\"\" ></option>\n                                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attribute.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                                </select>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'character'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'date'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"date\" class=\"form-control\" [name]=\"'char-val-' + i\" [ngModel]=\"vAttribute.value | date:'yyyy-MM-dd'\" (ngModelChange)=\"setDateAttribute(vAttribute, $event)\" required> \n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'boolean'\">\n\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === true\" [value]=\"true\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\">\n                                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                                </label>\n\n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === false\"  [value]=\"false\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\">\n                                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                                </label>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n\n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'float'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'integer'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n                                            </table>\n                                        </div> \n\n                                        <div *ngIf=\"attribute.type === 'geometry'\">\n                                           <table class=\"table table-striped\">\n                                             <thead style=\"font-size: 14px;\">\n                                               <th style=\"width:60%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                               <th style=\"width:20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                               <th style=\"width:10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                               <th style=\"width: 10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                             </thead>\n                                             <tbody style=\"text-align: center;\">\n                                               <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\">\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <button *ngIf=\"this.editingGeometry != i\" class=\"btn\" (click)=\"editGeometry(i)\" role=\"button\"><localize key=\"changeovertime.manageVersions.geometry.edit\"></localize></button>\n                                                   <geoobject-editor-map *ngIf=\"this.editingGeometry === i\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" (geometryChange)=\"this.geometryChange(vAttribute, $event);\" [readOnly]=\"!geoObjectType.isGeometryEditable\" [postGeometry]=\"vAttribute.value\" [bboxCode]=\"this.geoObjectOverTime.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"vAttribute.startDate\"></geoobject-editor-map>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <input type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                 </td>\n                                               </tr>\n                                              </tbody>\n                                          </table>\n                                        </div>\n\n                                    </li>\n\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\">\n                                            <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                                        </i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none;width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button> -->\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!versionsform.valid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"holder\" style=\"width: 100%; border: none;\">\n                    <div class=\"panel\" style=\"box-shadow: none;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\" *ngIf=\"hierarchy != null\">\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                    <table class=\"table table-striped\">\n                                        <thead style=\"font-size: 14px;\">\n                                            <tr>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let entry of hierarchy.entries; let i = index;\">\n                                                <td>\n                                                \n                                                  <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let type of hierarchy.types; let j = index\">\n                                                    {{type.label}}\n                                                    \n                                                    <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                                      name=\"{{type.code}}-{{i}}\"\n                                                      [disabled]=\"entry.startDate == null || entry.startDate === ''\"\n                                                      [(ngModel)]=\"entry.parents[type.code].text\" \n                                                      [typeaheadAsync]=\"true\"\n                                                      [typeahead]=\"getTypeAheadObservable(entry.startDate, type, entry, j)\"\n                                                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, type, entry, entry.startDate)\" \n                                                      [typeaheadOptionsLimit]=\"7\"\n                                                      typeaheadOptionField=\"name\" \n                                                      [typeaheadMinLength]=\"0\"\n                                                      [typeaheadWaitMs]=\"300\">\n                                                  </div>\n                                                \n                                                </td>\n                                                <td style=\"vertical-align: bottom;\">\n                                                  <input style=\"width: 100%;\" type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"entry.startDate\" (blur)=\"snapDates()\" required />\n                                                </td> \n                                                <td style=\"vertical-align: bottom;\">\n                                                  <p *ngIf=\"entry.startDate != null && entry.startDate !== ''\" style=\"font-size: 14px;\"> {{entry.endDate | date:'MM-dd-yyyy'}} </p>\n                                                </td>\n                                                <td style=\"vertical-align: middle; width: 10%; padding: 5px; text-align: center;\">\n                                                  <i class=\"fa fa-times delete-btn\" (click)=\"remove(entry)\"></i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </li>\n\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                  <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"><localize key=\"changeovertime.manageVersions.newVersion\"></localize></i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none; width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid || hasDuplicateDate\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>","<div class=\"modal-body text-center\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"masterlist.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n            <error-message *ngIf=\"!areParentsValid\" [message]=\"'geoobject.editor.modal.parents.must.be.assigned.message' | localize\"></error-message>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"masterlist.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"type.publish.title\"></localize>\n        </h2>\n        <h2 *ngIf=\"readonly\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> ({{localeValue.locale}})\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange($event)\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading\">\n        <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <div>\n        <label class=\"detail-label\">GeoObjectType : </label>\n        <label class=\"detail-value\">{{action.geoObjectType.code}}</label>\n      </div>\n    \n      <div>\n        <localize key=\"masterlist.forDate\"></localize>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n        <!-- \n\t  <label class=\"detail-label\">Label : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.displayLabel\">\n\t  \n\t  <label class=\"detail-label\">Code : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.code\">\n\t  -->\n\n        <geoobject-shared-attribute-editor \n          #attributeEditor\n          *ngIf=\"preGeoObject\"\n          [readOnly]=\"readOnly\"\n          [geoObjectType]=\"geoObjectType\"\n          [postGeoObject]=\"postGeoObject\"\n          [preGeoObject]=\"preGeoObject\"\n          [forDate]=\"forDate\"\n          [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n<!-- \n\t      <geoobject-editor-map #geometryEditor *ngIf=\"this.preGeoObject != null && this.postGeoObject != null && this.geoObjectType.isGeometryEditable\" [readOnly]=\"readOnly || !geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [isNew]=\"isNew()\"></geoobject-editor-map>\n -->\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    <div class=\"detail-content\">\n\n        <label class=\"detail-label\">Child UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childId\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Child TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childTypeCode\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentId\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Hierarchy Code : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.hierarchyTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">\n            <localize key=\"change.request.status\"></localize> :\n        </label>\n        <select style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=action.approvalStatus   [disabled]=\"readOnly\">\n            <option value=\"REJECTED\">\n                <localize key=\"change.request.status.rejected\"></localize>\n            </option>\n            <option value=\"ACCEPTED\">\n                <localize key=\"change.request.status.accepted\"></localize>\n            </option>\n            <option value=\"PENDING\">\n                <localize key=\"change.request.status.pending\"></localize>\n            </option>\n        </select>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n        \n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n        \n    </div>\n</div>","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n        <div>\n          <localize key=\"masterlist.forDate\"></localize>\n          <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n        </div>    \n    \n        <cascading-geo-selector #parentSelector \n          [hierarchies]=\"this.hierarchies\"\n          [forDate]=\"this.forDate\">\n        </cascading-geo-selector>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.status\"></localize> :\n            </label>\n            <select [disabled]=\"readOnly\" style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=\"action.approvalStatus\">\n                <option value=\"REJECTED\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </option>\n                <option value=\"ACCEPTED\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </option>\n                <option value=\"PENDING\">\n                    <localize key=\"change.request.status.pending\"></localize>\n                </option>\n            </select>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","<div class=\"modal-body\">\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <span *ngIf=\"errorMessage\">{{errorMessage}}</span>\n\n  <span>{{message}}</span>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/finally';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor( private http: HttpClient ) {\r\n        ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n    }\r\n\r\n    features(): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>( acp + '/project/features', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '../../shared/service/event.service';\n\nimport { AllLocaleInfo } from '../model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { MaintainerGuard, ContributerGuard } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HierarchyComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'hierarchies',\n        component: HierarchyComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'data',\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'change-requests',\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-lists',\n        component: MasterListManagerComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'scheduled-jobs',\n        component: ScheduledJobsComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'job/:oid',\n        component: JobComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-list/:oid/:published',\n        component: MasterListComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-list-view/:oid',\n        component: MasterListViewComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'change-request',\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'tasks',\n        component: TaskViewerComponent,\n        canActivate: [ContributerGuard]\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class RegistryRoutingModule { }"],"sourceRoot":""}