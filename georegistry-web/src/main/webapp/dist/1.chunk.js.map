{"version":3,"sources":["webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/service/list-type.service.ts","webpack:///./src/app/registry/service/business-type.service.ts","webpack:///./src/app/registry/service/geometry.service.ts","webpack:///./src/app/registry/service/layer-data-source.ts","webpack:///./src/app/registry/service/classification.service.ts","webpack:///./src/app/registry/service/registry-cache.service.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/relationship-visualization.service.ts","webpack:///./src/app/registry/service/classification-type.service.ts","webpack:///./src/app/registry/service/transition-event.service.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/shared/component/web-sockets/web-sockets.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field.component.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-editor.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/model/list-type.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/model/location-manager.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/service/business-object.service.ts","webpack:///./src/app/registry/component/list-type/publish-modal.component.ts","webpack:///./src/app/registry/component/list-type/publish-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/location-manager/layer-group.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field-modal.component.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-visualizer.component.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-visualizer.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-change-over-time-attribute-editor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.ts","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.html","webpack:///./src/app/registry/component/location-manager/feature-panel.component.ts","webpack:///./src/app/registry/component/location-manager/feature-panel.component.html","webpack:///./src/app/registry/component/location-manager/record-popup.component.ts","webpack:///./src/app/registry/component/location-manager/record-popup.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.html","webpack:///./src/app/registry/component/business-type/business-type-manager.component.ts","webpack:///./src/app/registry/component/business-type/business-type-manager.component.html","webpack:///./src/app/registry/component/business-type/modals/create-business-type-modal.component.ts","webpack:///./src/app/registry/component/business-type/modals/create-business-type-modal.component.html","webpack:///./src/app/registry/component/business-type/modals/manage-business-type-modal.component.ts","webpack:///./src/app/registry/component/business-type/modals/manage-business-type-modal.component.html","webpack:///./src/app/registry/component/business-table/business-table.component.ts","webpack:///./src/app/registry/component/business-table/business-table.component.html","webpack:///./src/app/registry/component/business-importer/business-importer.component.ts","webpack:///./src/app/registry/component/business-importer/business-importer.component.html","webpack:///./src/app/registry/component/historical-report/historical-report.component.ts","webpack:///./src/app/registry/component/historical-report/historical-report.component.html","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.ts","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.html","webpack:///./src/app/registry/component/list-type/list-type-manager.component.ts","webpack:///./src/app/registry/component/list-type/list-type-manager.component.html","webpack:///./src/app/registry/component/list-type/lists-for-type.component.ts","webpack:///./src/app/registry/component/list-type/lists-for-type.component.html","webpack:///./src/app/registry/component/list-type/list-type.component.ts","webpack:///./src/app/registry/component/list-type/list-type.component.html","webpack:///./src/app/registry/component/list-type/publish-version.component.ts","webpack:///./src/app/registry/component/list-type/publish-version.component.html","webpack:///./src/app/registry/component/list-type/list.component.ts","webpack:///./src/app/registry/component/list-type/list.component.html","webpack:///./src/app/registry/component/list-type/export-format-modal.component.ts","webpack:///./src/app/registry/component/list-type/export-format-modal.component.html","webpack:///./src/app/registry/component/curation/curation-job.component.ts","webpack:///./src/app/registry/component/curation/curation-job.component.html","webpack:///./src/app/registry/component/classification-type/classification-type-manager.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type-manager.component.html","webpack:///./src/app/registry/component/classification-type/classification-type-publish-modal.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type-publish-modal.component.html","webpack:///./src/app/registry/component/classification-type/classification-type.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type.component.html","webpack:///./src/app/registry/component/classification-type/classification-publish-modal.component.ts","webpack:///./src/app/registry/component/classification-type/classification-publish-modal.component.html","webpack:///./src/app/registry/service/layer-diffing-strategy.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-viz-layout.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/HierarchyCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/StandardAttributeCRModel.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-model.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.ts","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/location-manager/layer-panel.component.ts","webpack:///./src/app/registry/component/location-manager/layer-panel.component.html","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.ts","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts","webpack:///./src/app/registry/model/classification-type.ts","webpack:///./src/app/registry/component/location-manager/record-panel.component.ts","webpack:///./src/app/registry/component/location-manager/record-panel.component.html","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.ts","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.html","webpack:///./src/app/registry/component/location-manager/business-object-panel.component.ts","webpack:///./src/app/registry/component/location-manager/business-object-panel.component.html","webpack:///./src/app/registry/model/business-type.ts","webpack:///./src/app/registry/registry.module.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","services","ChangeRequestService","HierarchyService","IOService","LocalizationManagerService","MapService","RegistryService","SynchronizationConfigService","TaskService","GeometryService","http","eventService","listForType","typeCode","params","HttpParams","set","this","start","get","registry","contextPath","pipe","finalize","complete","toPromise","entries","oid","versions","getVersion","fetchVersionsAsListVersion","oids","join","apply","list","headers","HttpHeaders","post","JSON","stringify","createEntries","remove","createVersion","entry","metadata","applyVersion","removeVersion","page","criteria","pageConfig","showInvalid","record","uid","showOverlay","values","value","attributeName","filters","length","publishList","getAllLists","getPublicVersions","append","getGeospatialVersions","startDate","endDate","getBounds","getCurationInfo","version","onlyUnresolved","pageNumber","pageSize","curation","curationId","toString","getCurationPage","createCurationJob","listTypeVersionId","submitErrorResolve","config","setResolution","problem","resolution","problemId","getJob","historyOid","ListTypeService","Injectable","getByOrganization","getAll","type","edit","unlock","addAttributeType","attribute","attributeType","updateAttributeType","deleteAttributeType","BusinessTypeService","OLD_LAYER_COLOR","NEW_LAYER_COLOR","SELECTED_COLOR","route","router","registryService","relVizService","mapService","listService","localService","layers","currentMapState","editingControl","simpleEditControl","_zoomOnReady","isZooming","geometryChange","EventEmitter","layersChange","syncWithUrlParams","dataSourceFactory","DataSourceFactory","layerSorter","LayerGroupSorter","syncMapState","debounce","_syncMapState","initialize","geometryType","queryParamSubscription","queryParams","subscribe","handleParameterChange","err","console","log","on","saveEdits","window","onbeforeunload","destroy","ngOnDestroy","unsubscribe","deserializedLayers","parse","oldLayers","deserializeLayers","LayerDiffingStrategy","getDiffs","emit","getLayers","diffs","fullRebuild","filter","diff","prevLayer","newLayerIndex","i","mapboxMapLayer","mapboxUnmapLayer","oldLayer","layer","getLayer","getId","moveLayer","newLayerDiff","removeLayerDiff","newLayer","oldLayerIndex","rendered","mapboxShowLayer","mapboxHideLayer","unmapAllLayers","mapAllLayers","layerId","layerIndex","findIndex","l","zoomToLayer","splice","indexOf","dumpLayers","isMapZooming","refreshDatasets","otherLayer","forEach","dataSource","getDataSourceType","setLayers","newLayers","sortLayers","serialized","serializeLayers","navigate","relativeTo","queryParamsHandling","zoomOnReady","push","then","bounds","zoomConfig","calculateZoomConfig","fitBounds","padding","top","bottom","left","right","animate","maxDuration","maxZoom","graphPanelOpen","attrPanelOpen","Math","round","innerWidth","text","layersPanelSize","Number","parseInt","PANEL_SIZE_STATE","WINDOWED","FULLSCREEN","setGeometryType","getLayerFromMapboxLayer","mapboxLayer","endsWith","substring","destroyMap","removeControl","GeoJsonLayer","editing","editingLayer","getMap","getDataSourceFactory","setDataSourceFactory","fac","registerDataSource","unregisterDataSource","dataSourceType","startEditing","isEditing","stopEditing","readOnly","enableEditing","addEditingLayers","rerender","deleteAll","setPointCoordinates","lat","long","features","properties","geometry","coordinates","changeMode","featureIds","isValid","geoJson","getDrawGeometry","setLayerData","reload","setEditing","addOrUpdateLayer","orderingIndex","existingIndex","findLayer","removeLayer","removeLayers","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","userProperties","styles","paint","getSource","addControl","getLayerData","data","add","getMapboxLayerIdsForLayer","removeSource","len","setLayoutProperty","mapboxSource","buildMapboxSource","addSource","GeoJsonLayerDataSource","geojson","setData","getGeometryType","mapboxMapLayerAsType","labelConfig","source","layout","visibility","configureMapboxLayer","addLayer","layerConfig","getLayerIdGeomTypePostfix","color","featureCollection","polygons","feature","j","points","lines","createEmptyGeometryValue","upperType","toUpperCase","zoomToLayersExtent","geoJsonLayer","coords","LngLatBounds","coord","extend","center","getCenter","pt","LngLat","lng","flyTo","zoom","essential","polys","subpoly","subline","Output","createLayer","legendLabel","Layer","fromJSON","obj","assign","toJSON","LayerDataSource","pinned","getKey","getPinned","setPinned","layerType","GEO_OBJECT_DATA_SOURCE_TYPE","date","getCode","setCode","getTypeCode","setTypeCode","getDate","setDate","getGeoObjectBoundsAtDate","Array","isArray","GeoObjectLayerDataSource","LIST_VECTOR_SOURCE_TYPE","versionId","getVersionId","ListVectorLayer","tiles","location","protocol","host","encodeURIComponent","promoteId","ListVectorLayerDataSource","navigator","language","toLowerCase","CHANGE_REQUEST_SOURCE_TYPE_NEW","CHANGE_REQUEST_SOURCE_TYPE_OLD","newOrOld","votEditor","Promise","reject","oldValue","changeRequestAttributeEditor","changeRequestEditor","geoObjectType","ValueOverTimeDataSource","SEARCH_DATASOURCE_TYPE","getText","search","SearchLayerDataSource","RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE","vizService","geomService","relationshipType","relationshipCode","sourceObject","RelationshipVisualizionLayer","getRelationshipType","getRelationshipCode","getSourceObject","hasSameSourceObject","sourceObj","objectType","dataPromise","treeAsGeoJson","getBoundsAsWKT","wktBounds","mapBounds","convertBoundsToWKT","se","getSouthEast","sw","getSouthWest","nw","getNorthWest","ne","getNorthEast","getRelatedTypeFilter","RelationshipVisualizionDataSource","relatedTypeFilter","setRelatedTypeFilter","dataSources","getRegisteredDataSource","dataSourceId","newDataSourceFromType","deserializeDataSource","serializeDataSource","deserializeLayer","sl","ds","serializeLayer","sds","ret","serializedLayer","classificationCode","parentCode","classification","isNew","move","getChildren","getAncestorTree","rootCode","ClassificationService","service","subscription","typeCache","GeoObjectTypeCache","baseUrl","WebSockets","buildBaseUrl","notifier","webSocket","message","refresh","getTypeCache","RegistryCacheService","SummaryKey","Document","Geometry","ValueOverTimeDiff","AbstractAction","actionType","ActionTypes","CREATEGEOOBJECTACTION","CreateGeoObjectAction","UPDATEATTRIBUTETACTION","attributeDiff","valuesOverTime","UpdateAttributeOverTimeAction","UpdateAttributeAction","ChangeRequestCurrentObject","UpdateChangeRequestCurrentObject","getActionsForAttribute","cr","hierarchyCode","actions","newActions","action","updateAttrAction","ChangeRequest","GovernanceStatus","PageEvent","implementDecisions","request","update","setActionStatus","actionOid","status","getAllRequests","sort","rejectChangeRequest","delete","requestId","deleteFile","crOid","fileId","vfOid","init","getGeoObjectTypes","types","hierarchies","getParentGeoObjects","childCode","childTypeCode","parentTypes","recursive","getChildGeoObjects","parentTypeCode","childrenTypes","doesGeoObjectExistAtRange","newGeoObjectInstance","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","geoObjTypeId","addAttributeTermTypeOption","parentTermCode","term","termJSON","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","termCode","getGeoObject","getGeoObjectBounds","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestions","parent","hierarchy","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","historyId","getExportDetails","resolveScheduledJob","submitValidationResolve","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","applyGeoObjectEdit","masterListId","notes","applyGeoObjectCreate","parentTreeNode","geoObject","prop","attributes","attr","val","Date","getTime","progress","getDatasetBounds","getOrganizations","tree","graphTypeCode","sourceVertex","boundsWKT","relationships","RelationshipVisualizationService","classificationType","ClassificationTypeService","getPage","attrConditions","getDetails","event","eventId","getHistoricalReport","TransitionEventService","key","disabled","inlinelayout","valueChange","LocalizedTextComponent","Component","selector","templateUrl","styleUrls","Input","ImportSheet","Location","Term","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","LocalizedInputComponent","mapboxgl","accessToken","mapboxAccessToken","roots","cdr","excludeDescription","attributeChange","state","classifications","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","changes","resultSet","handleOnSubmit","toggleIsUnique","unique","onAnimationDone","label","localeValues","precision","scale","AttributeInputComponent","trigger","style","opacity","transition","animations","hostname","port","lService","authService","dateService","postGeoObject","showAllInstances","tabIndex","attributeExcludes","isGeometryInlined","modifiedTermOption","currentTermOption","requestedDate","calculatedDate","calculatedDateChange","forDate","datasetId","geoObjectAttributeExcludes","showStabilityPeriods","geometryAttributeType","getAttribute","AttributeType","LocalizedValue","parentAttributeType","changeRequest","createNewChangeRequest","ChangeRequestEditor","shouldForceSetExist","changePage","got","current","orgCode","organizationCode","isSRA","isOrganizationRA","isGeoObjectTypeOrSuperRM","isGeoObjectTypeOrSuperRC","setFilterDate","manageVersions","manageVersion","getChangeRequestEditor","approvalStatus","createAction","geoObjectJson","parentJson","undefined","name","nextPage","hasChanges","hasErrors","attributeEditors","getEditors","filteredEditors","editor","getEditorForAttribute","invalid","existsAttribute","GeoObjectType","existsEditor","prototype","hasOwnProperty","call","allValid","att","validate","getActions","GeoObjectSharedAttributeEditorComponent","ManageVersionsComponent","DatePipe","providers","attributeForm","ViewChild","ViewChildren","TREE_SCALE_FACTOR_X","TREE_SCALE_FACTOR_Y","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","hierarchyService","modalService","contextMenuService","localizeService","userOrganization","currentHierarchy","instance","geoObjectTypes","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","options","displayField","actionMapping","mouse","click","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","nativeElement","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","localize","decode","renderTree","rootGeoObjectTypes","d3","select","canDrag","overflowDiv","scrollLeft","scrollRight","svg","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","calculateCanDrag","getBBox","x","y","width","height","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","superTypeCode","calculateRelatedHierarchies","relatedHiers","hierarchyType","descendants","find","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","addChild","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","isPointWithin","dropZoneBbox","activeDropZones","gotRectW","gotRectH","clearGhostNodes","isDragGroup","classed","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","dropElY","childW","childH","dzg","dropTargetHasChildren","children","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","insertBetweenTypes","ghostNode","drag","rect","getBoundingClientRect","selThis","target","document","elementFromPoint","selectAll","each","sidebarDragHandler","registerSvgHandlers","startPoint","svgGot","getPos","setPos","split","svgDragHandler","findHierarchyByCode","ht","findOrganizationByCode","organizations","org","parentGeoObjectTypeCode","childGeoObjectTypeCode","addChildToHierarchy","index","relatedHierarchies","refreshPrimaryHierarchy","catch","error","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","isRA","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","response","setLocales","locales","setGeoObjectTypes","getMyOrganizations","arrayMove","pos","getGeoObjectTypePosition","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","a","b","localizedValue","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","h","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","gOT","show","next","childType","nodeMenuComponent","leafMenuComponent","item","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","bsModalRef","CreateHierarchyTypeModalComponent","animated","backdrop","ignoreBackdropClick","class","content","onHierarchytTypeCreate","nameA","nameB","deleteHierarchyType","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","description","acknowledgement","disclaimer","useConstraints","accessConstraints","contact","phoneNumber","email","isPrimaryHierarchy","groupSuperType","CreateGeoObjTypeModalComponent","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","ManageGeoObjectTypeModalComponent","onGeoObjectTypeSubmitted","position","removeFromHierarchy","parentGotCode","gotCode","isActive","filtered","setTimeout","handleInheritHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","setInheritedHierarchy","handleUninheritHierarchy","removeInheritedHierarchy","importTypes","ImportTypesModalComponent","onNodeChange","ErrorHandler","showErrorAsDialog","HierarchyComponent","static","customStyles","classNames","container","loading","typeahead","Observable","observer","results","typeaheadOnSelect","match","displayLabel","setValue","onViewTree","ClassificationFieldModalComponent","onTextChange","ClassificationFieldComponent","localizationService","onChangeSubject","Subject","generateAttributeEditors","editors","attrs","slice","isChangeOverTime","ChangeRequestChangeOverTimeAttributeEditor","StandardAttributeCRModel","attributeEditor","_isValid","skipExists","findExistingValueOverTimeByOid","attributeCode","vot","findEditorForValueOverTime","getEditor","onChange","existsAtDate","existEditors","valLen","isDelete","between","isNewGeoObject","submitFunction","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","dateStr","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","GeoObjectOverTime","configureFromImportError","importError","object","parents","importErrorId","configureAsExisting","fetchGeoObject","fetchHierarchies","typeTypeCode","getTypeAheadObservable","create","ptn","canSubmit","cancel","hide","submit","GeoObjectEditorComponent","VersionMetadata","ListVersionMetadata","ListTypeVersion","ListTypeEntry","ListMetadata","ListType","ListTypeByType","versionNumber","ContextLayer","ListVersion","ContextList","ListTypeGroup","ListOrgGroup","LayerRecord","CurationProblem","CurationJob","getHierarchyTypes","getHierarchyGroupedTypes","createHierarchyType","htJSON","updateHierarchyType","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","includeChild","getHierarchiesForType","includeTypes","getHierarchiesForSubtypes","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","removeTerm","getNewLocaleInfo","installLocale","country","variant","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","run","getJobs","getFhirExportImplementations","getFhirImportImplementations","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","LocationInformation","ModalState","MINIMIZED","modalStepIndicatorService","stateChange","geoObjectTypeChange","newAttribute","modalStepConfig","steps","active","enabled","modalState","GeoObjectTypeModalStates","defineAttribute","termOption","setAttribute","setStepConfig","attributeInputComponent","AttributeTermType","AttributeDecimalType","isFormValid","isAttrValid","getMessageFromError","DefineAttributeModalContentComponent","editAttribute","onModalStateChange","back","EditAttributeModalContentComponent","enableTermOptionForm","replace","addTermOption","rootTerm","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","openAddTermOptionForm","close","ManageTermOptionsComponent","t","manageTermOption","EditTermOptionInputComponent","bbox","fontSize","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","configurationChange","onNext","onCancel","AttributesPageComponent","property","locations","onBack","LocationPageComponent","hasProblems","locationProblems","resolved","handleError","exclusions","exclusion","LocationProblemPageComponent","termProblems","TermProblemPageComponent","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","SpreadsheetModalComponent","changeRequestService","cacheService","geoObjectId","reason","waitOnTypes","myOrgTypes","isGeoObjectTypeRC","handleDateChange","onValidChange","newValid","geometryEditor","getIsValid","changeTypeaheadLoading","onNewChangeRequest","typeLabel","formatDateForDisplay","ColorGen","hexString","SubmitChangeRequestComponent","_stepConfig","StepIndicatorComponent","businessTypeCode","getTypeAndObject","BusinessObjectService","iService","currentDate","onListTypeChange","tab","readonly","valid","gap","listByType","write","cache","getTypeByCode","listType","organization","floor","random","subtypeHierarchies","listMetadata","originator","collectionDate","process","acknowledgements","contactName","telephoneNumber","geospatialMetadata","topicCategories","placeKeywords","updateFrequency","lineage","languages","scaleResolution","spatialRepresentation","referenceSystem","reportSpecification","distributionFormat","includeLatLong","intervalJson","interval","PRESENT","getIsDisabled","elClasses","classList","onSubmit","getAttributeForFilter","onNewFilter","operation","removeFilter","onNewInterval","removeInterval","validOn","publishingStartDate","after","reduce","element","future","s1","e1","s2","e2","dateRangeOverlaps","hasGap","getGeoObjectTypeTermAttributeOptions","termAttributeCode","handleTab","ListTypePublishModalComponent","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","onErrorItem","onSelect","onClick","queue","uploadAll","auth","orgs","organizationLabel","getOrganizationLabelFromCode","getGroupName","groupName","setGroupName","getLabel","setLabel","LayerGroup","getLayerGroups","groups","g","sorted","group","isLeaf","isPrivate","toggleIsLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","onGeoObjectTypeChange","editGeoObjectType","fetchOrganizationLabel","defineAttributeModal","manageAttributes","removeAttributeType","GeoObjectTypeInputComponent","in","validator","c","geoObjectAttributeCode","GeoObjectAttributeCodeValidator","provide","NG_VALIDATORS","useExisting","multi","Directive","NodeType","nodes","idField","allowDrag","allowDrop","animateExpand","scrollOnActivate","animateSpeed","animateAcceleration","ancestor","build","timeout","getNodeById","setActiveAndVisible","CLASSIFICATION","hasChildren","treeNode","createNodes","concat","ex","cNode","count","LINK","expand","TreeComponent","TermOptionWidgetComponent","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","hierarchyLabelW","hierarchyLabelH","headerFontSize","hierarchyLabelY","lineWidth","textWidth","html","d","headerGBbox","getRelatedHierarchies","nodeMouseover","nodeMousemove","nodeTooltipBbox","documentElement","scrollHeight","scrollWidth","nodeMouseleave","descends","insert","gtree","links","gHeader","gotHeaderW","MOUSE_HOVER_EVENT_ENTER","MOUSE_HOVER_EVENT_MOVE","MOUSE_HOVER_EVENT_EXIT","gotHeaderFontSize","arrowRectD","gArrow","gotBodyFontSize","gotOptionsButtonFontSize","renderRelatedHierarchiesMenu","DRAW_SCALE_MULTIPLIER","SELECTED_NODE_COLOR","GRAPH_GO_LABEL_COLOR","GRAPH_CIRCLE_FILL","GRAPH_LINE_COLOR","COLLAPSE_ANIMATION_TIME","DIMENSIONS","NODE","WIDTH","HEIGHT","LABEL","FONTSIZE","PADDING","BETWEEN_NODES","NODE_LABEL","NODE_EDGE","spinner","CONSTANTS","OVERLAY","OverlayerIdentifier","VISUALIZER_PANEL","ORIENTATION","Orientation","nodeSelect","changeRelationship","svgHeight","svgWidth","panToNode$","update$","DagreNodesOnlyLayout","curve","shape","curveLinear","typeLegend","relationship","panelOpen","restrictToMapBounds","queryParamSub","queryParamChanges","newParams","oldParams","graphOid","rel","fetchRelationships","fetchData","resizeDimensions","graphContainer","getElementById","clientHeight","clientWidth","getHexagonPoints","relation","radius","n","angleDeg","angleRad","PI","cos","sin","p","onSelectRelationship","finally","updateUrl","calculateTypeLegend","relatedTypes","addLayers","relatedType","existingRelatedTypes","existingRelatedType","oldTypeLegend","collapseAnimation","activeEl","all","querySelectorAll","el","animateTransform","createElementNS","appendChild","beginElement","includeTransform","cloned","cloneNode","newParent","querySelector","onClickNode","selectAnimation","RelationshipVisualizerComponent","cancelText","ShapefileModalComponent","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","LocationProblemComponent","termLabel","termId","createOption","ignoreValue","TermProblemComponent","renderContent","pageTitle","DataPageComponent","sysService","changeDetectorRef","showImportConfig","importStrategies","strategy","ImportStrategy","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","copyBlank","getExternalSystems","paginatedSystems","externalSystems","views","allHierarchyViews","allTypeViews","len0","view","len2","len9","view2","findType","findHier","filteredHierarchyViews","filteredTypeViews","getUrl","format","importStrategy","externalSystem","sys","onSelectHierarchy","onSelectType","checkDates","setImportSource","checkDateFieldValidity","startDateField","dateFields","dateFieldComponentsArray","toArray","field","inputName","setInvalid","DataImporterComponent","today","todayString","getDateString","objectKeys","requests","columns","filterCriteria","ascending","hasBaseDropZoneOver","sortable","snapshot","paramMap","toggleId","uploadRequest","doc","documents","isSorting","onSort","getGOTLabel","setValid","onUpload","onDownloadFile","fileOid","href","onDeleteFile","fileOverBase","pageChange","selected","onExecute","getFirstGeoObjectInActions","pageContext","onReject","onDelete","deletedRequestId","onUpdate","applyActionStatusProperties","decisionMaker","getUsername","requestTrackBy","toggle","replaceState","parentElement","className","includes","getActiveDetailComponent","isRequestTooOld","firstAction","UPDATEGEOOBJECTACTION","onEditAttributes","canEdit","permissions","RequestTableComponent","encapsulation","ViewEncapsulation","None","getEditAction","hierarchyEntry","generateEditors","editAction","validEditors","validateEditors","hasTimeConflict","checkRanges","hasExistConflict","checkExistRanges","matches","includeUnmodified","HierarchyCREditor","ValueOverTimeCREditor","valueOverTime","votDiff","createNewVersion","original","createEmptyHierarchyEntry","hierarchyOverTime","ValueOverTime","constructNewDiff","terms","ChangeType","ADD","getGeoObjectTimeRangeStorage","getValueFromGeoObjectForDiff","conflictMessages","Set","validateDate","getDateFromDateString","end","validateUpdateReference","missingReference","getStartDate","setStartDate","newStartDate","oldStartDate","goRange","oldEndDate","getEndDate","newEndDate","removeEmptyDiff","END_DATE","START_DATE","newValue","coordinate","parseFloat","toFixed","areValuesEqual","VALUE","setLocalizedValue","val1","val2","localeValue","lv2","getValueAtLocale","locale","lv1","lv","getValue","updateAction","REMOVE","votc","buildDataSource","getDataSourceId","getDataSourceProviderId","requestService","elementRef","isValidChange","filterDate","viewModels","isRootOfHierarchy","isInitialized","calculateViewModels","layerChangeSub","syncLayerReferences","onAddNewVersion","previousValue","currentValue","vm","objectLayer","hasLocalizationChanged","viewModel","onDateChange","summaryKey","NEW","v","VersionDiffView","indexOL","keyEL","indexEL","keyOLD","indexOLD","onApprove","ACCEPTED","REJECTED","onPending","PENDING","pType","loopI","goCode","ancestors","setParentValue","toggleGeometryEditing","toggleGeometryView","mapRowHeight","getElementsByClassName","offsetHeight","toggleOldGeometryView","manualCoordinateChange","newCoordinateX","newCoordinateY","newX","newY","num","latValid","isFinite","abs","longValid","isLongitude","ControlContainer","NgForm","viewProviders","_mapHeight","mapDiv","Map","initMap","NavigationControl","zoomToBbox","GeoObjectEditorMapComponent","mapHeight","bboxCode","bboxType","bboxDate","isContributorOnly","isContributerOnly","urlSubscriber","highlightOid","ChangeRequestPageComponent","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","order","jobPos","onViewAllCompleteJobs","onView","onCancelScheduledJob","jobId","onResolveScheduledJob","ScheduledJobsComponent","allSelected","timeCounter","isPolling","hasRowValidationProblem","onPageChange","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onEdit","JobConflictModalComponent","onConflictAction","importErrors","problems","exception","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","ReuploadModalComponent","JobComponent","onProblemResolvedListener","onEditGeoObject","editModal","ImportProblemWidgetComponent","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","title","warning","confirm","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onToggleCompletedTasks","TaskViewerComponent","rService","implementations","lists","reset","fieldChange","levels","level","onSelectMasterList","addLevel","removeLevel","FhirExportSynchronizationConfigComponent","DEFAULT_MAPPING_STRATEGY","cOrg","levelRows","orgUnitGroups","levelRow","levelNum","isAttributeEditor","system","esConfig","clearMappingData","onChangeHierarchy","buildDefaultMappings","attributeMappingStrategy","isOrgUnitGroup","cgrAttrName","dhis2Id","dhis2AttrName","lvl","mappings","orgUnitGroupId","onSelectLevelType","attrCfg","editorIndex","getEditorIndex","mapping","attrConfigInfos","info","cgrAttr","deleteMapping","addNewMapping","levelRowIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Attrs","dhis2Attr","onChangeDHIS2Attr","isDifferentGot","infos","levelMapping","mapCgrAttr","attributeMappingStrategies","onChangeTargetType","Dhis2SynchronizationConfigComponent","SynchronizationConfigModalComponent","onSuccess","onRemove","SynchronizationConfigManagerComponent","isImport","cSystem","oIndex","sIndex","systems","handleFieldChange","onOrganizationSelected","onChangeExternalSystem","implementation","FhirImportSynchronizationConfigComponent","onRun","onGenerateFile","open","stepLabel","SynchronizationConfigComponent","configService","configOid","exportErrors","SyncDetailsComponent","businessObjectService","componentFactoryResolver","appRef","injector","pageMode","longitude","latitude","MODE","SEARCH","VIEW","SEARCH_OVERLAY","SEARCH_PANEL","isEdit","mode","showPanel","baseLayers","sprite","preventSingleClick","ready","searchEnabled","graphVisualizerEnabled","updateState","_updateState","windowWidth","windowHeight","innerHeight","urlParams","handleStateChange","isRC","isRM","initializeMap","resizeWindow","mapConfig","sources","mapbox","tileSize","glyphs","attributionControl","defaultMapBounds","logoPosition","newState","onGraphNodeSelect","closeEditSessionSafeguard","mockGeo","selectGeoObject","oldState","searchFieldText","dateFieldValue","loadSearchFromState","loadGeoObjectFromState","businessObject","businessType","selectBusinessObject","handleRecord","setPanel","convertMapBounds","resp","FEATURE_PANEL","resize","togglePanel","removeFeatureState","addSearchLayer","onModeChange","AttributionControl","compact","visualizePitch","handleMapClickEvent","onCreate","SelectTypeModalComponent","result","subsription","cancelEditingSession","resolver","rejecter","queryRenderedFeatures","onPanelCancel","clearRecord","onPanelSubmit","applyInfo","isChangeRequest","backReference","SuccessModalComponent","changeRequestId","handleBasemapStyle","baseLayer","setStyle","getGeoObjectTypeLabel","lFind","sourceLayer","setFeatureState","recordType","componentRef","resolveComponentFactory","RecordPopupComponent","displayLabelDefaultLocale","attachView","hostView","domElem","rootNodes","llb","Popup","closeOnClick","closeButton","setLngLat","setDOMContent","addTo","featurePanel","setEditMode","featurePanelForDateChange","addLayerForGeoObject","onFeatureSelect","toggleGraphPanel","convert","LocationManagerComponent","HostListener","geometryService","VERSIONS","ATTRIBUTES","HIERARCHY","GEOMETRY","forDateChange","featureChange","modeChange","panelCancel","panelSubmit","updateCode","preGeoObject","editorForDateChange","onCancelInternal","trim","onManageAttributeVersion","onManageHiearchyVersion","FeaturePanelComponent","dateCondition","beforeTypeCondition","filterTypesBasedOnMyOrg","myOrgs","filterChange","TransitionEventModalComponent","onEventChange","deleteEvent","jsEvent","transitionEvent","TransitionEventTableComponent","VIEWPORT_SCALE_FACTOR_X","VIEWPORT_SCALE_FACTOR_Y","GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR","changeDetector","activeTransition","afterTypes","beforeTypes","draggable","effectAllowed","disable","handle","isGeoObjectTypeRM","beforeTypeCode","afterTypeCode","eventDate","transitions","setActiveTransition","highlight","trans","sourceCode","targetCode","uuid","v4","sourceType","targetType","transitionType","impact","calculateDerivedAttributes","renderVisual","mouseEvent","transitionOid","validChange","isSource","addDay","pair","targetText","sourceText","clear","localizeTransitionImpact","localizeTransitionType","stats","sourceStats","targetStats","updown","typeUpdown","typePart","onChangeTypeUpdown","onDragStart","onDragEnd","onDragged","onDraggableCopied","onDraggableLinked","onDraggableMoved","onDragCanceled","onDragover","newIndex","root","appData","generateAppData","renderingData","generateRenderingData","depth","linkDataMappings","multipleParentLinks","link","d3Data","dx","dy","d3RenderingData","parentNode","childNode","grandChild","isChildOfOtherNode","typeaheadParent","CreateBusinessTypeModalComponent","onBusinessTypeChange","ManageBusinessTypeModalComponent","tt","BusinessTypeManagerComponent","labelAttribute","createAttribute","onTypeChange","cols","header","BusinessTableComponent","businessService","businessTypes","BusinessImporterComponent","exportToExcel","HistoricalReportComponent","HistoricalEventModuleComponent","noQueryParams","listId","orgTypesNoGroupMembers","groupTypes","gType","groupType","members","grpT","grp","typesByOrgIterEls","els","firstChild","ListTypeManagerComponent","single","incremental","createGroups","arr","ListsForTypeComponent","collapsed","toggleVersions","showAll","PublishVersionComponent","onCreateEntries","onViewConfiguration","layerFromVersion","onGotoMap","array","ListTypeComponent","working","master","unshift","pService","isRefreshing","isWritable","progressSubscription","jobSubscription","userOrgCodes","refreshColumns","refreshProgress","handleProgressChange","progressNotifier","jobNotifier","handleJobChange","isMember","orderedArray","customAttrs","otherAttrs","onComplete","handleShowInvalidChange","total","setListId","onPublish","jobOid","onNewGeoObject","onExport","matchMode","ExportFormatModalComponent","onFormat","onWheel","onRunCuration","onFilter","isListInOrg","ListComponent","goUid","toggleResolution","CurationJobComponent","querySubscription","ClassificationTypePublishModalComponent","ClassificationTypeManagerComponent","onClassificationTypeChange","drop","onMoveNode","getFirstRoot","ClassificationPublishModalComponent","classificationNode","removeTreeNode","from","TREE_ACTIONS","MOVE_NODE","ClassificationTypeComponent","onClassificationChange","equals","LayerDiff","calculateDiffs","iterations","max","diffLayers","addDiff","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","hideRelatedHierarchy","existingSecondary","existingMenu","contextMenuGroup","hasActionsPermissions","titleLabel","actionsTitle","removeFromHierarchyLabel","noRelatedHierLabel","hideRelatedHierarchyLabel","uninheritLabel","inheritLabel","isSecondaryHierarchyRendered","numActions","removeWidth","hideRelatedWidth","uninheritWidth","existingSecondaryCode","secondaryHierarchy","relatedGotHasParents","inheritWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","onClickUninheritHierarchy","onClickInheritHierarchy","myBbox","primaryHierBbox","gSecondary","paddingLeft","secondaryGot","secondaryGotBbox","gConnector","Alignment","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","curveDistance","multigraph","compound","settings","graph","createDagreGraph","dagre","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","_nodes","dimension","edges","edge","updateEdge","sourceNode","targetNode","rankAxis","orderAxis","rankDimension","dir","startingPoint","endingPoint","edgeLabelId","matchingEdgeLabel","graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","dagreEdges","linkId","newLink","setNode","setEdge","toRoot","allGeoObjectTypes","gObj","selectedGeoObjectType","AddChildToHierarchyModalComponent","onDeleteAttribute","ManageAttributesModalComponent","existRangeStale","immediateParent","invalidParent","parentDoesNotExist","exists","directParent","currentDirectParent","getLowestLevelFromHierarchyEntry","oldParents","newValueStrConcat","removeType","newParents","parentType","HierarchyOverTimeEntry","currentImmediateParent","findAction","component","populate","_value","convertValueForDisplay","calculateSummaryKey","convertDateForDisplay","convertOldValueForDisplay","attrOpts","hasTime","hasValue","UPDATE","TIME_CHANGE","VALUE_CHANGE","UNMODIFIED","DELETE","summaryKeyData","newKey","localizeSummaryKey","summaryKeyLocalized","conflictMessagesHasSeverity","severity","has","msg","hasError","size","hasWarning","day","getUTCDate","getUTCFullYear","getUTCMonth","applyAction","saveDraw","startEdit","endEdit","CreateUpdateGeoObjectDetailComponent","latestPeriodIsActive","periods","activeEntry","forDateEntry","infinityDayPadding","dataTimeSpan","_showHint","showHint","generate","timeline","timelines","period","setActiveTimelineEntry","forDateIndex","navigateRelative","amount","nextIndex","sharedAttributeEditor","generatePeriods","generateTimelines","calculateDataTimeSpan","endDay","startDay","displayStartDate","displayEndDate","span","currentTimeline","daysLeft","daysInPeriod","daysInFirstEntry","timelineEntry1","timelineEntry2","timelineEntry","boundaries","startIndex","boundary","isStart","isEnd","endIndex","dlen","formatDate","StabilityPeriodComponent","context","calculateView","newVal","onValueChange","StandardAttributeEditorComponent","elRef","editEmitter","visible","editSessionEnabled","save","onAdd","SimpleEditControl","customEvent","onManageVersion","cHierarchies","parentMap","calculate","time","pot","getHierarchies","onManageVersions","CascadingGeoSelector","mainForm","isExpandedField","expanded","TreeGeoSelector","curAction","cuDetail","arDetail","spDetail","ActionDetailModalComponent","DataExportComponent","LAYER_PANEL","includeSearchLayer","baseLayerChange","panelSize","panelSizeChange","listOrgGroups","layerGroups","versionMap","graphList","currentStartDate","currentEndDate","setPanelSize","togglePanelOpen","layersWithoutVersions","refreshListLayerReferences","handleSearch","listOrgGroup","listTypeGroup","ver","clickToggleLayerRendered","toggleLayerRendered","onGotoBounds","togglePinned","toggleVersionLayer","toggleBaseLayer","bl","moveItemInArray","previousIndex","currentIndex","LayerPanelComponent","visualizeMode","hasConflict","onCloneGeometry","hasDuplicateDate","originalGeoObjectOverTime","geoObjectOverTime","vAttributes","isVersionForHighlight","votArr","getVersionData","vAttribute","getDefaultLocaleVal","defVal","locVal","setDateAttribute","moment","localeData","longDateFormat","setInfinity","onCloneGeometryToNewVersion","GeometryPanelComponent","geoObjectOverTimeInput","transform","items","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","f","GeoObjectTypePipe","Pipe","pure","GeoObjectAttributeExcludesPipe","ToEpochDateTimePipe","routes","path","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","RegistryRoutingModule","LocationStrategy","useClass","HashLocationStrategy","RouterModule","forChild","NgModule","imports","ClassificationType","Classification","ClassificationNode","onClose","RecordPanelComponent","callback","CurationProblemModalComponent","BusinessObjectPanelComponent","BusinessType","BusinessTypeByOrg","BusinessObject","RegistryModule","CommonModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","DndModule","NgxGraphModule","DragDropModule","AccordionModule","forRoot","NgxSpinnerModule","declarations","entryComponents"],"mappings":"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CACPC,SAAU,yBACVC,YAAa,0CACbC,UAAW,Q,+OEbf,W,GACA,Q,uDCac,2BAEE,4BACE,6BACE,4BACE,2BACE,YACF,iBACF,iBACF,iBAEA,6BACE,gCACE,gCACE,8BACF,0BACA,iCACE,aACF,0BACF,0BACF,iBACF,iBACF,kB,2DAhBU,oEAQW,2DAGX,oE,yBAlBZ,6BACE,8BAuBF,2B,2CAvBO,iEDXnB,8BAUc,KAAAujB,MAAQ,IAAI,EAAAxgC,a,OAEtB,YAAAs3E,QAAA,WACIz9E,KAAK2mC,MAAMx+B,Q,iCARN01E,I,iCAAAA,EAA4B,ipBCRzC,0BACE,4BACE,4BACE,yBAAI,YAAoC,iBAC1C,iBACF,iBAEA,+BACE,+BACE,4BACE,4BACE,yBACA,4BACE,wCAyBF,iBACF,iBACF,iBACF,iBACF,iBAUF,kB,MAjDU,uEAU0C,2D,yrCDVpD,GAKa,EAAAA,gC,+DAAAA,EAA4B,E,KALxC,EAAA56D,U,MAAU,CACPC,SAAU,wBACVC,YAAa,yCACbC,UAAW,CAAC,sC,MAIH3e,KAAM,CAAF,C,KAAZ,EAAA4e,QACQgc,OAAQ,CAAF,C,KAAd,EAAAhc,QAESsjB,MAAK,E,KAAd,EAAAjzB,Y,8IEVL,mBAAa,EAAAoqE,eAab,mBAAa,EAAAC,oBASb,mBAAa,EAAAC,kB,0GCzBb,WACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,WACA,WACA,WACA,WAEA,WAEA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,WACA,UAEA,UAEA,OAEA,cACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,WACA,WACA,W,wGAEA,4B,wCA8LaC,I,iCAAAA,I,sCA7DE,CACP,GAAA7+E,WACA,GAAAH,iBACA,GAAAijB,iCACA,GAAA/iB,2BACA,GAAAH,qBACA,GAAAE,UACA,GAAAG,gBACA,GAAA6b,qBACA,GAAA3b,YACA,EAAAyqB,SACA,GAAAuyD,oBACA,GAAAlyC,uBACA,GAAA/qC,6BACA,GAAAqjB,uBACA,GAAA1d,oBACA,GAAAulC,sBACA,GAAAnmC,gBACA,GAAA+d,0BACA,GAAA/H,sBACA,GAAA7a,iBACH,SArJQ,CACL,EAAA0+E,aACA,EAAAhB,aACA,EAAAiB,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAjC,sBACA,EAAAkC,UACA,GAAAC,eACA,EAAAC,eACA,GAAAC,gBAAgBC,UAChB,EAAAC,qB,EAtBR,GA8La,EAAApB,mB,iEAAAA,GAAc,eArKnB,EAAA3iD,mBACA,EAAAsgB,gCACA,EAAAmH,sBACA,EAAAgxB,qCACA,EAAA74C,0BACA,GAAAq2B,yCACA,GAAA2D,yCACA,GAAAd,oCACA,EAAAn8B,kCACA,EAAAy4C,kCACA,EAAA/2C,+BACA,EAAAi3C,+BACA,EAAAhrC,qCACA,EAAAkW,wBACA,EAAAlU,wBACA,EAAAI,sBACA,EAAAO,6BACA,EAAA+T,yBACA,EAAA7T,yBACA,EAAAkU,qBACA,EAAA3T,0BACA,GAAAmzC,kBACA,GAAAzqC,gCACA,EAAA1L,mCACA,EAAAyN,0BACA,EAAAnuB,wBACA,EAAAyhB,6BACA,EAAA7M,kCACA,EAAA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","file":"1.chunk.js","sourcesContent":["var map = {\n\t\"./af\": 867,\n\t\"./af.js\": 867,\n\t\"./ar\": 868,\n\t\"./ar-dz\": 869,\n\t\"./ar-dz.js\": 869,\n\t\"./ar-kw\": 870,\n\t\"./ar-kw.js\": 870,\n\t\"./ar-ly\": 871,\n\t\"./ar-ly.js\": 871,\n\t\"./ar-ma\": 872,\n\t\"./ar-ma.js\": 872,\n\t\"./ar-sa\": 873,\n\t\"./ar-sa.js\": 873,\n\t\"./ar-tn\": 874,\n\t\"./ar-tn.js\": 874,\n\t\"./ar.js\": 868,\n\t\"./az\": 875,\n\t\"./az.js\": 875,\n\t\"./be\": 876,\n\t\"./be.js\": 876,\n\t\"./bg\": 877,\n\t\"./bg.js\": 877,\n\t\"./bm\": 878,\n\t\"./bm.js\": 878,\n\t\"./bn\": 879,\n\t\"./bn-bd\": 880,\n\t\"./bn-bd.js\": 880,\n\t\"./bn.js\": 879,\n\t\"./bo\": 881,\n\t\"./bo.js\": 881,\n\t\"./br\": 882,\n\t\"./br.js\": 882,\n\t\"./bs\": 883,\n\t\"./bs.js\": 883,\n\t\"./ca\": 884,\n\t\"./ca.js\": 884,\n\t\"./cs\": 885,\n\t\"./cs.js\": 885,\n\t\"./cv\": 886,\n\t\"./cv.js\": 886,\n\t\"./cy\": 887,\n\t\"./cy.js\": 887,\n\t\"./da\": 888,\n\t\"./da.js\": 888,\n\t\"./de\": 889,\n\t\"./de-at\": 890,\n\t\"./de-at.js\": 890,\n\t\"./de-ch\": 891,\n\t\"./de-ch.js\": 891,\n\t\"./de.js\": 889,\n\t\"./dv\": 892,\n\t\"./dv.js\": 892,\n\t\"./el\": 893,\n\t\"./el.js\": 893,\n\t\"./en-au\": 894,\n\t\"./en-au.js\": 894,\n\t\"./en-ca\": 895,\n\t\"./en-ca.js\": 895,\n\t\"./en-gb\": 896,\n\t\"./en-gb.js\": 896,\n\t\"./en-ie\": 897,\n\t\"./en-ie.js\": 897,\n\t\"./en-il\": 898,\n\t\"./en-il.js\": 898,\n\t\"./en-in\": 899,\n\t\"./en-in.js\": 899,\n\t\"./en-nz\": 900,\n\t\"./en-nz.js\": 900,\n\t\"./en-sg\": 901,\n\t\"./en-sg.js\": 901,\n\t\"./eo\": 902,\n\t\"./eo.js\": 902,\n\t\"./es\": 903,\n\t\"./es-do\": 904,\n\t\"./es-do.js\": 904,\n\t\"./es-mx\": 905,\n\t\"./es-mx.js\": 905,\n\t\"./es-us\": 906,\n\t\"./es-us.js\": 906,\n\t\"./es.js\": 903,\n\t\"./et\": 907,\n\t\"./et.js\": 907,\n\t\"./eu\": 908,\n\t\"./eu.js\": 908,\n\t\"./fa\": 909,\n\t\"./fa.js\": 909,\n\t\"./fi\": 910,\n\t\"./fi.js\": 910,\n\t\"./fil\": 911,\n\t\"./fil.js\": 911,\n\t\"./fo\": 912,\n\t\"./fo.js\": 912,\n\t\"./fr\": 913,\n\t\"./fr-ca\": 914,\n\t\"./fr-ca.js\": 914,\n\t\"./fr-ch\": 915,\n\t\"./fr-ch.js\": 915,\n\t\"./fr.js\": 913,\n\t\"./fy\": 916,\n\t\"./fy.js\": 916,\n\t\"./ga\": 917,\n\t\"./ga.js\": 917,\n\t\"./gd\": 918,\n\t\"./gd.js\": 918,\n\t\"./gl\": 919,\n\t\"./gl.js\": 919,\n\t\"./gom-deva\": 920,\n\t\"./gom-deva.js\": 920,\n\t\"./gom-latn\": 921,\n\t\"./gom-latn.js\": 921,\n\t\"./gu\": 922,\n\t\"./gu.js\": 922,\n\t\"./he\": 923,\n\t\"./he.js\": 923,\n\t\"./hi\": 924,\n\t\"./hi.js\": 924,\n\t\"./hr\": 925,\n\t\"./hr.js\": 925,\n\t\"./hu\": 926,\n\t\"./hu.js\": 926,\n\t\"./hy-am\": 927,\n\t\"./hy-am.js\": 927,\n\t\"./id\": 928,\n\t\"./id.js\": 928,\n\t\"./is\": 929,\n\t\"./is.js\": 929,\n\t\"./it\": 930,\n\t\"./it-ch\": 931,\n\t\"./it-ch.js\": 931,\n\t\"./it.js\": 930,\n\t\"./ja\": 932,\n\t\"./ja.js\": 932,\n\t\"./jv\": 933,\n\t\"./jv.js\": 933,\n\t\"./ka\": 934,\n\t\"./ka.js\": 934,\n\t\"./kk\": 935,\n\t\"./kk.js\": 935,\n\t\"./km\": 936,\n\t\"./km.js\": 936,\n\t\"./kn\": 937,\n\t\"./kn.js\": 937,\n\t\"./ko\": 938,\n\t\"./ko.js\": 938,\n\t\"./ku\": 939,\n\t\"./ku.js\": 939,\n\t\"./ky\": 940,\n\t\"./ky.js\": 940,\n\t\"./lb\": 941,\n\t\"./lb.js\": 941,\n\t\"./lo\": 942,\n\t\"./lo.js\": 942,\n\t\"./lt\": 943,\n\t\"./lt.js\": 943,\n\t\"./lv\": 944,\n\t\"./lv.js\": 944,\n\t\"./me\": 945,\n\t\"./me.js\": 945,\n\t\"./mi\": 946,\n\t\"./mi.js\": 946,\n\t\"./mk\": 947,\n\t\"./mk.js\": 947,\n\t\"./ml\": 948,\n\t\"./ml.js\": 948,\n\t\"./mn\": 949,\n\t\"./mn.js\": 949,\n\t\"./mr\": 950,\n\t\"./mr.js\": 950,\n\t\"./ms\": 951,\n\t\"./ms-my\": 952,\n\t\"./ms-my.js\": 952,\n\t\"./ms.js\": 951,\n\t\"./mt\": 953,\n\t\"./mt.js\": 953,\n\t\"./my\": 954,\n\t\"./my.js\": 954,\n\t\"./nb\": 955,\n\t\"./nb.js\": 955,\n\t\"./ne\": 956,\n\t\"./ne.js\": 956,\n\t\"./nl\": 957,\n\t\"./nl-be\": 958,\n\t\"./nl-be.js\": 958,\n\t\"./nl.js\": 957,\n\t\"./nn\": 959,\n\t\"./nn.js\": 959,\n\t\"./oc-lnc\": 960,\n\t\"./oc-lnc.js\": 960,\n\t\"./pa-in\": 961,\n\t\"./pa-in.js\": 961,\n\t\"./pl\": 962,\n\t\"./pl.js\": 962,\n\t\"./pt\": 963,\n\t\"./pt-br\": 964,\n\t\"./pt-br.js\": 964,\n\t\"./pt.js\": 963,\n\t\"./ro\": 965,\n\t\"./ro.js\": 965,\n\t\"./ru\": 966,\n\t\"./ru.js\": 966,\n\t\"./sd\": 967,\n\t\"./sd.js\": 967,\n\t\"./se\": 968,\n\t\"./se.js\": 968,\n\t\"./si\": 969,\n\t\"./si.js\": 969,\n\t\"./sk\": 970,\n\t\"./sk.js\": 970,\n\t\"./sl\": 971,\n\t\"./sl.js\": 971,\n\t\"./sq\": 972,\n\t\"./sq.js\": 972,\n\t\"./sr\": 973,\n\t\"./sr-cyrl\": 974,\n\t\"./sr-cyrl.js\": 974,\n\t\"./sr.js\": 973,\n\t\"./ss\": 975,\n\t\"./ss.js\": 975,\n\t\"./sv\": 976,\n\t\"./sv.js\": 976,\n\t\"./sw\": 977,\n\t\"./sw.js\": 977,\n\t\"./ta\": 978,\n\t\"./ta.js\": 978,\n\t\"./te\": 979,\n\t\"./te.js\": 979,\n\t\"./tet\": 980,\n\t\"./tet.js\": 980,\n\t\"./tg\": 981,\n\t\"./tg.js\": 981,\n\t\"./th\": 982,\n\t\"./th.js\": 982,\n\t\"./tk\": 983,\n\t\"./tk.js\": 983,\n\t\"./tl-ph\": 984,\n\t\"./tl-ph.js\": 984,\n\t\"./tlh\": 985,\n\t\"./tlh.js\": 985,\n\t\"./tr\": 986,\n\t\"./tr.js\": 986,\n\t\"./tzl\": 987,\n\t\"./tzl.js\": 987,\n\t\"./tzm\": 988,\n\t\"./tzm-latn\": 989,\n\t\"./tzm-latn.js\": 989,\n\t\"./tzm.js\": 988,\n\t\"./ug-cn\": 990,\n\t\"./ug-cn.js\": 990,\n\t\"./uk\": 991,\n\t\"./uk.js\": 991,\n\t\"./ur\": 992,\n\t\"./ur.js\": 992,\n\t\"./uz\": 993,\n\t\"./uz-latn\": 994,\n\t\"./uz-latn.js\": 994,\n\t\"./uz.js\": 993,\n\t\"./vi\": 995,\n\t\"./vi.js\": 995,\n\t\"./x-pseudo\": 996,\n\t\"./x-pseudo.js\": 996,\n\t\"./yo\": 997,\n\t\"./yo.js\": 997,\n\t\"./zh-cn\": 998,\n\t\"./zh-cn.js\": 998,\n\t\"./zh-hk\": 999,\n\t\"./zh-hk.js\": 999,\n\t\"./zh-mo\": 1000,\n\t\"./zh-mo.js\": 1000,\n\t\"./zh-tw\": 1001,\n\t\"./zh-tw.js\": 1001\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1004;","import { ChangeRequestService } from './change-request.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\nimport { GeometryService} from './geometry.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService,\n\tGeometryService\n];\n\nexport * from './change-request.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';\nexport * from './geometry.service';","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\nimport { FilterMetadata } from \"primeng/api\";\n\nimport { EventService } from \"@shared/service\";\nimport { CurationJob, CurationProblem, LayerRecord, ListOrgGroup, ListType, ListTypeByType, ListTypeEntry, ListTypeVersion, ListVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { Observable } from \"rxjs\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { ScheduledJob } from \"@registry/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ListTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    listForType(typeCode: string): Promise<ListTypeByType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeByType>(registry.contextPath + \"/list-type/list-for-type\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    entries(oid: string): Promise<ListType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListType>(registry.contextPath + \"/list-type/entries\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    versions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion[]>(registry.contextPath + \"/list-type/versions\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getVersion(oid: string): Promise<ListTypeVersion> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion>(registry.contextPath + \"/list-type/version\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    fetchVersionsAsListVersion(oids: string[]): Promise<ListVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oids\", oids.join(\",\"));\n\n        // this.eventService.start();\n\n        return this.http.get<ListVersion[]>(registry.contextPath + \"/list-type/fetchVersionsAsListVersion\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/apply\", JSON.stringify({ list: list }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createEntries(oid: string): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/create-entries\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createVersion(entry: ListTypeEntry, metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/create-version\", JSON.stringify({ oid: entry.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    applyVersion(metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/apply-version\", JSON.stringify({ oid: metadata.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeVersion(list: ListTypeVersion): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove-version\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object, pageConfig: any): Promise<PageResult<Object>> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: pageConfig.oid,\n            showInvalid: pageConfig.showInvalid,\n            criteria: criteria\n        } as any;\n\n        return this.http.post<PageResult<Object>>(registry.contextPath + \"/list-type/data\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    // data(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\n    //     let headers = new HttpHeaders({\n    //         \"Content-Type\": \"application/json\"\n    //     });\n\n    //     let params = {\n    //         oid: oid,\n    //         sort: sort\n    //     } as any;\n\n    //     if (pageNumber != null) {\n    //         params.pageNumber = pageNumber;\n    //     }\n\n    //     if (pageSize != null) {\n    //         params.pageSize = pageSize;\n    //     }\n\n    //     if (filter.length > 0) {\n    //         params.filter = filter;\n    //     }\n\n    //     return this.http\n    //         .post<any>(registry.contextPath + \"/list-type/data\", JSON.stringify(params), { headers: headers })\n    //         .toPromise();\n    // }\n\n    record(oid: string, uid: string, showOverlay: boolean = true): Promise<LayerRecord> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            uid: uid\n        };\n\n        if (showOverlay) {\n            this.eventService.start();\n        }\n\n        return this.http\n            .post<LayerRecord>(registry.contextPath + \"/list-type/record\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                if (showOverlay) {\n                    this.eventService.complete();\n                }\n            }))\n            .toPromise();\n    }\n\n    values(oid: string, value: string, attributeName: string, filters: { [s: string]: FilterMetadata }): Promise<string[]> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            attributeName: attributeName\n        } as any;\n\n        if (filters != null) {\n            params.criteria = { filters: filters };\n        }\n\n        if (value != null && value.length > 0) {\n            params.value = value;\n        }\n\n        return this.http\n            .post<string[]>(registry.contextPath + \"/list-type/values\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    publishList(oid: string): Observable<{ jobOid: string }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http.post<{ jobOid: string }>(registry.contextPath + \"/list-type/publish\", JSON.stringify({ oid: oid }), { headers: headers });\n    }\n\n    getAllLists(): Promise<{ label: string, oid: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<{ label: string, oid: string }[]>(registry.contextPath + \"/list-type/list-all\", { params: params })\n            .toPromise();\n    }\n\n    getPublicVersions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        return this.http\n            .get<ListTypeVersion[]>(registry.contextPath + \"/list-type/get-public-versions\", { params: params })\n            .toPromise();\n    }\n\n    getGeospatialVersions(startDate: string, endDate: string): Promise<ListOrgGroup[]> {\n        let params: HttpParams = new HttpParams();\n\n        if (startDate != null && startDate.length > 0) {\n            params = params.append(\"startDate\", startDate);\n        }\n\n        if (endDate != null && endDate.length > 0) {\n            params = params.append(\"endDate\", endDate);\n        }\n\n        return this.http\n            .get<ListOrgGroup[]>(registry.contextPath + \"/list-type/get-geospatial-versions\", { params: params })\n            .toPromise();\n    }\n\n    getBounds(oid: string, uid?: string): Promise<number[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        if (uid != null) {\n            params = params.append(\"uid\", uid);\n        }\n\n        return this.http\n            .get<number[]>(registry.contextPath + \"/list-type/bounds\", { params: params })\n            .toPromise();\n    }\n\n    getCurationInfo(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<CurationJob> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        return this.http.get<CurationJob>(registry.contextPath + \"/curation/details\", { params: params })\n            .toPromise();\n    }\n\n    getCurationPage(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<PageResult<any>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<any>>(registry.contextPath + \"/curation/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createCurationJob(version: ListTypeVersion): Promise<CurationJob> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<CurationJob>(registry.contextPath + \"/curation/curate\", JSON.stringify({ listTypeVersionId: version.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    submitErrorResolve(config: any): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/problem-resolve\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setResolution(problem: CurationProblem, resolution: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params: any = { problemId: problem.id };\n\n        if (resolution != null) {\n            params.resolution = resolution;\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/set-resolution\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJob(historyOid: string): Promise<ScheduledJob> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"historyOid\", historyOid);\n\n        return this.http\n            .get<ScheduledJob>(registry.contextPath + \"/list-type/get-publish-job\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { BusinessType, BusinessTypeByOrg } from \"@registry/model/business-type\";\nimport { AttributeType } from \"@registry/model/registry\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { PageResult } from \"@shared/model/core\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class BusinessTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getByOrganization(): Promise<BusinessTypeByOrg[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http.get<BusinessTypeByOrg[]>(registry.contextPath + \"/business-type/get-by-org\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAll(): Promise<BusinessType[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http.get<BusinessType[]>(registry.contextPath + \"/business-type/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<BusinessType> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<BusinessType>(registry.contextPath + \"/business-type/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(type: BusinessType): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/apply\", JSON.stringify({ type: type }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(type: BusinessType): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/remove\", JSON.stringify({ oid: type.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/edit\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    addAttributeType(typeCode: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<AttributeType>(registry.contextPath + \"/business-type/add-attribute\", JSON.stringify({ typeCode: typeCode, attributeType: attribute }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateAttributeType(typeCode: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<AttributeType>(registry.contextPath + \"/business-type/update-attribute\", JSON.stringify({ typeCode: typeCode, attributeType: attribute }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteAttributeType(typeCode: string, attributeName: string): Promise<boolean> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<boolean>(registry.contextPath + \"/business-type/remove-attribute\", JSON.stringify({ typeCode: typeCode, attributeName: attributeName }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object, pageConfig: any): Promise<PageResult<Object>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"criteria\", JSON.stringify(criteria));\n        params = params.set(\"typeCode\", pageConfig.typeCode);\n\n        return this.http\n            .get<PageResult<Object>>(registry.contextPath + \"/business-type/data\", { params: params })\n            .toPromise();\n    }\n\n}\n","\nimport { Injectable, Output, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\nimport * as MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { Map, LngLat, LngLatBounds, AnySourceData, LngLatBoundsLike } from \"mapbox-gl\";\nimport { Subscription } from \"rxjs\";\n\nimport { RelationshipVisualizationService } from \"./relationship-visualization.service\";\nimport { DataSourceFactory, GeoJsonLayer, GeoJsonLayerDataSource, Layer, LayerDataSource } from \"./layer-data-source\";\nimport { RegistryService } from \"./registry.service\";\nimport { MapService } from \"./map.service\";\nimport { ListTypeService } from \"./list-type.service\";\nimport { LayerGroupSorter, LayerSorter } from \"@registry/component/location-manager/layer-group\";\nimport { LocalizationService } from \"@shared/service/localization.service\";\nimport { LayerDiffingStrategy } from \"./layer-diffing-strategy\";\nimport { LocationManagerParams } from \"@registry/component/location-manager/location-manager.component\";\nimport { PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\nimport { debounce } from \"ts-debounce\";\n\nexport const OLD_LAYER_COLOR = \"#A4A4A4\";\n\nexport const NEW_LAYER_COLOR = \"#0062AA\";\n\nexport const SELECTED_COLOR = \"#800000\";\n\n/**\n * This service provides a global abstraction for mapping and editing layers across many different components (simultaneously) and\n * serializing / deserializing these layers to / from the url parameters to facilitate saving + loading of layer state.\n *\n * Layers contain references to data sources, which are invoked when deserializing from the url param to facilitate\n * population of layer data.\n */\n@Injectable()\nexport class GeometryService implements OnDestroy {\n\n    map: Map;\n\n    layers: Layer[] = [];\n\n    currentMapState: Layer[] = [];\n\n    geometryType: String;\n\n    readOnly: boolean;\n\n    editingControl: any = null;\n\n    simpleEditControl: any = null;\n\n    editingLayer: GeoJsonLayer;\n\n    // Id of a datasource that we want to zoom to when it becomes ready\n    _zoomOnReady: string[] = [];\n\n    isZooming: boolean = false;\n\n    @Output() geometryChange = new EventEmitter<any>();\n\n    @Output() layersChange: EventEmitter<Layer[]> = new EventEmitter();\n\n    /*\n    * Subscription for changes to the URL parameters\n    */\n    queryParamSubscription: Subscription;\n\n    /*\n     * URL pamaters\n     */\n    syncWithUrlParams: boolean = false;\n\n    params: LocationManagerParams = null;\n\n    dataSourceFactory: DataSourceFactory;\n\n    layerSorter: LayerSorter;\n\n    public syncMapState: () => void;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private registryService: RegistryService,\n        private relVizService: RelationshipVisualizationService,\n        private mapService: MapService,\n        private listService: ListTypeService,\n        private localService: LocalizationService\n    ) {\n        this.dataSourceFactory = new DataSourceFactory(this, this.registryService, this.relVizService, this.mapService, this.listService);\n        this.layerSorter = new LayerGroupSorter(this.localService);\n        this.syncMapState = debounce(this._syncMapState, 50);\n    }\n\n    public initialize(map: Map, geometryType: String, syncWithUrlParams: boolean) {\n        this.syncWithUrlParams = syncWithUrlParams;\n        this.map = map;\n        this.geometryType = geometryType;\n        // this.editingControl = null;\n\n        if (syncWithUrlParams) {\n            this.queryParamSubscription = this.route.queryParams.subscribe(params => {\n                try {\n                    this.handleParameterChange(params);\n                } catch (err) {\n                    // eslint-disable-next-line no-console\n                    console.log(err); // We will be unsubscribed if we throw an unhandled error and we don't want that to happen\n                }\n            });\n        }\n\n        // this.mapAllLayers();\n\n        this.map.on(\"style.load\", () => {\n            // this.mapAllLayers();\n        });\n\n        this.map.on(\"draw.create\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.delete\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.update\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"zoomstart\", () => {\n            this.isZooming = true;\n        });\n        this.map.on(\"zoomend\", () => {\n            this.isZooming = false;\n        });\n\n        window.onbeforeunload = () => this.destroy();\n\n        this.syncMapState();\n    }\n\n    ngOnDestroy(): void {\n        if (this.queryParamSubscription) {\n            this.queryParamSubscription.unsubscribe();\n        }\n    }\n\n    handleParameterChange(params: Params): void {\n        this.params = params as LocationManagerParams;\n\n        if (this.params != null) {\n            if (this.params.layers != null) {\n                let deserializedLayers: any = JSON.parse(this.params.layers);\n\n                let oldLayers = this.layers;\n\n                this.layers = this.dataSourceFactory.deserializeLayers(deserializedLayers);\n\n                if (new LayerDiffingStrategy(this.layers, oldLayers).getDiffs().length > 0) {\n                    this.layersChange.emit(this.getLayers());\n                }\n\n                this.syncMapState();\n            }\n        }\n    }\n\n    private _syncMapState() {\n        if (this.map) {\n            let strategy = new LayerDiffingStrategy(this.layers, this.currentMapState);\n\n            let diffs = strategy.getDiffs();\n\n            let fullRebuild = diffs.length > 0 || this.layers.length !== this.currentMapState.length;\n\n            if (diffs.length === 1 && (diffs[0].type === \"RENDERED_CHANGE\" || diffs[0].type === \"COLOR_CHANGE\")) {\n                // They just toggled whether a layer was rendered or changed a layer color\n\n                const diff = diffs[0];\n\n                let prevLayer = null;\n                if (diff.oldLayerIndex > 0) {\n                    for (let i = 0; i < diff.oldLayerIndex; ++i) {\n                        prevLayer = this.currentMapState[i];\n                    }\n                }\n\n                if (diff.type === \"RENDERED_CHANGE\") {\n                    if (diff.newLayer.rendered) {\n                        this.mapboxShowLayer(diff.newLayer);\n                    } else {\n                        this.mapboxHideLayer(diff.oldLayer);\n                    }\n                } else if (diff.type === \"COLOR_CHANGE\") {\n                    this.mapboxUnmapLayer(diff.oldLayer);\n                    this.mapboxMapLayer(diff.newLayer, prevLayer);\n                }\n\n                fullRebuild = false;\n            } else if (diffs.filter(diff => diff.type === \"NEW_LAYER\").length === 1 && diffs.filter(diff => diff.type !== \"NEW_LAYER\" && diff.type !== \"LAYER_REORDER\").length === 0 && this.layers.length === this.currentMapState.length + 1) {\n                // Added a layer\n                const diff = diffs.filter(diff => diff.type === \"NEW_LAYER\")[0];\n\n                let prevLayer = null;\n                if (diff.newLayerIndex > 0) {\n                    for (let i = 0; i < diff.newLayerIndex; ++i) {\n                        prevLayer = this.currentMapState[i];\n                    }\n                }\n\n                this.mapboxMapLayer(this.layers[diff.newLayerIndex], prevLayer);\n                fullRebuild = false;\n            } else if (diffs.filter(diff => diff.type === \"REMOVE_LAYER\").length === 1 && diffs.filter(diff => diff.type !== \"REMOVE_LAYER\" && diff.type !== \"LAYER_REORDER\").length === 0 && this.layers.length === this.currentMapState.length - 1) {\n                // Removed a layer\n                const diff = diffs.filter(diff => diff.type === \"REMOVE_LAYER\")[0];\n\n                this.mapboxUnmapLayer(diff.oldLayer);\n                fullRebuild = false;\n            } else if (diffs.length > 0 && this.layers.length === this.currentMapState.length && diffs.filter(diff => diff.type !== \"LAYER_REORDER\").length === 0) {\n                // Layers changed order but are otherwise the same.\n\n                this.currentMapState = this.layers;\n                for (let i = this.currentMapState.length - 1; i > -1; i--) {\n                    const layer = this.currentMapState[i];\n\n                    if (this.map.getLayer(layer.getId() + \"-POLYGON\")) {\n                        this.map.moveLayer(layer.getId() + \"-POLYGON\");\n                    }\n                    if (this.map.getLayer(layer.getId() + \"-POINT\")) {\n                        this.map.moveLayer(layer.getId() + \"-POINT\");\n                    }\n                    if (this.map.getLayer(layer.getId() + \"-LINE\")) {\n                        this.map.moveLayer(layer.getId() + \"-LINE\");\n                    }\n                    if (this.map.getLayer(layer.getId() + \"-LABEL\")) {\n                        this.map.moveLayer(layer.getId() + \"-LABEL\");\n                    }\n                }\n                fullRebuild = false;\n            } else if (diffs.length === 2 && diffs.filter(diff => diff.type === \"REMOVE_LAYER\").length === 1 && diffs.filter(diff => diff.type === \"NEW_LAYER\").length === 1 && this.layers.length === this.currentMapState.length && diffs.filter(diff => diff.type !== \"REMOVE_LAYER\" && diff.type !== \"NEW_LAYER\").length === 0) {\n                // Added a layer and removed a layer\n                const newLayerDiff = diffs.filter(diff => diff.type === \"NEW_LAYER\")[0];\n                const removeLayerDiff = diffs.filter(diff => diff.type === \"REMOVE_LAYER\")[0];\n\n                if (removeLayerDiff.oldLayer != null && newLayerDiff.newLayer != null) {\n                    this.mapboxUnmapLayer(removeLayerDiff.oldLayer);\n\n                    let prevLayer = null;\n                    if (newLayerDiff.newLayerIndex > 0) {\n                        for (let i = 0; i < newLayerDiff.newLayerIndex; ++i) {\n                            prevLayer = this.currentMapState[i];\n                        }\n                    }\n\n                    this.mapboxMapLayer(newLayerDiff.newLayer, prevLayer);\n\n                    fullRebuild = false;\n                }\n            }\n\n            if (fullRebuild) {\n                this.unmapAllLayers();\n\n                this.currentMapState = this.layers;\n                this.mapAllLayers();\n            } else {\n                // Make sure attribute changes are reflected\n                this.currentMapState = this.layers;\n            }\n\n            // Zoom to layers\n            if (this._zoomOnReady != null && this._zoomOnReady.length > 0 && !this.isZooming) {\n                for (let i = 0; i < this._zoomOnReady.length; ++i) {\n                    let layerId = this._zoomOnReady[i];\n\n                    let layerIndex = this.layers.findIndex(l => l.getId() === layerId);\n\n                    if (layerIndex !== -1) {\n                        let layer = this.layers[layerIndex];\n\n                        this.zoomToLayer(layer);\n                        this._zoomOnReady.splice(this._zoomOnReady.indexOf(layer.getId()), 1);\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    public dumpLayers(): void {\n        this.layers = [];\n        this.currentMapState = [];\n    }\n\n    public isMapZooming(): boolean {\n        return this.isZooming;\n    }\n\n    /*\n     * Notify the map that the datasets of a particular type have changed and that the data sources must be rebuilt.\n     */\n    public refreshDatasets(type: string) {\n        let otherLayer = null;\n        this.getLayers().forEach(layer => {\n            if (layer.dataSource.getDataSourceType() === type) {\n                this.mapboxUnmapLayer(layer);\n                this.mapboxMapLayer(layer, otherLayer);\n            }\n            otherLayer = layer;\n        });\n    }\n\n    public setLayers(newLayers: Layer[]) {\n        if (this.layerSorter != null) {\n            this.layers = this.layerSorter.sortLayers(newLayers);\n        } else {\n            this.layers = newLayers;\n        }\n\n        if (this.syncWithUrlParams) {\n            let serialized = this.dataSourceFactory.serializeLayers(newLayers);\n\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { layers: JSON.stringify(serialized) },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            });\n        } else {\n            this.syncMapState();\n        }\n\n        this.layersChange.emit(this.getLayers());\n    }\n\n    public zoomOnReady(layerId: string) {\n        if (this._zoomOnReady.indexOf(layerId) === -1) {\n            this._zoomOnReady.push(layerId);\n        }\n    }\n\n    public zoomToLayer(layer: Layer): Promise<void> {\n        return layer.dataSource.getBounds(layer).then((bounds: LngLatBoundsLike) => {\n            if (bounds != null) {\n                let zoomConfig = this.calculateZoomConfig(null);\n\n                this.isZooming = true;\n                this.map.fitBounds(bounds, zoomConfig);\n            }\n        });\n    }\n\n    private calculateZoomConfig(geometryType: string): any {\n        let config: any = { padding: { top: 10, bottom: 10, left: 10, right: 10 }, animate: true, maxDuration: 5000, maxZoom: 20 };\n\n        // Zoom level was requested to be reduced when displaying point types as per #420\n        if (geometryType === \"Point\" || geometryType === \"MultiPoint\") {\n            config.padding = { top: 50, bottom: 50, left: 50, right: 50 };\n            config.maxZoom = 12;\n        }\n\n        if (this.params.graphPanelOpen === \"true\" && !(this.params.attrPanelOpen === \"true\")) {\n            // If graph panel is open, but not attribute panel (takes up half of the left screen)\n            config.padding.left += Math.round(window.innerWidth / 2);\n        } else if (this.params.attrPanelOpen === \"true\" && (this.params.text != null) && !(this.params.graphPanelOpen === \"true\")) {\n            // If attribute panel is open, but not the graph panel (takes up half of the left screen)\n            config.padding.left += Math.round(window.innerWidth / 3);\n        }\n\n        if (this.params.layersPanelSize != null) {\n            let layerPanelSize = Number.parseInt(this.params.layersPanelSize);\n\n            if (layerPanelSize === PANEL_SIZE_STATE.WINDOWED || PANEL_SIZE_STATE.FULLSCREEN) {\n                config.padding.right += 50;\n\n                /*\n                config.padding.top += 37 * this.layers.length;\n                config.padding.top += layerPanelSize === PANEL_SIZE_STATE.FULLSCREEN ? 50 : 10;\n                */\n            }\n        }\n\n        return config;\n    }\n\n    public setGeometryType(geometryType: string) {\n        this.geometryType = geometryType;\n    }\n\n    public getLayerFromMapboxLayer(mapboxLayer: any) {\n        let id = mapboxLayer.id;\n\n        if (id.endsWith(\"-POINT\")) {\n            id = id.substring(0, id.length - \"-POINT\".length);\n        } else if (id.endsWith(\"-POLYGON\")) {\n            id = id.substring(0, id.length - \"-POLYGON\".length);\n        } else if (id.endsWith(\"-LINE\")) {\n            id = id.substring(0, id.length - \"-LINE\".length);\n        } else if (id.endsWith(\"-LABEL\")) {\n            id = id.substring(0, id.length - \"-LABEL\".length);\n        }\n\n        let layers = this.getLayers().filter(l => l.getId() === id);\n\n        if (layers.length > 0) {\n            let layer: Layer = layers[0];\n\n            return layer;\n        }\n    }\n\n    public destroy(destroyMap: boolean = true): void {\n        if (this.editingControl != null) {\n            this.map.removeControl(this.editingControl);\n            this.editingControl = null;\n        }\n\n        if (this.map != null && destroyMap) {\n            this.map.remove();\n            this.map = null;\n        } else if (this.map != null) {\n            this.unmapAllLayers();\n        }\n\n        if (this.layers != null) {\n            this.layers.forEach(layer => {\n                if (layer instanceof GeoJsonLayer) {\n                    layer.editing = false;\n                }\n            });\n        }\n\n        this.editingLayer = null;\n        this.layers = [];\n        this.currentMapState = [];\n        this.dataSourceFactory = new DataSourceFactory(this, this.registryService, this.relVizService, this.mapService, this.listService);\n    }\n\n    public getMap() {\n        return this.map;\n    }\n\n    public getDataSourceFactory() {\n        return this.dataSourceFactory;\n    }\n\n    public setDataSourceFactory(fac) {\n        this.dataSourceFactory = fac;\n    }\n\n    public registerDataSource(dataSource: LayerDataSource) {\n        this.dataSourceFactory.registerDataSource(dataSource);\n    }\n\n    public unregisterDataSource(dataSourceType: string) {\n        this.dataSourceFactory.unregisterDataSource(dataSourceType);\n    }\n\n    public startEditing(layer: GeoJsonLayer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        this.editingLayer = layer;\n        this.editingLayer.editing = true;\n\n        if (!this.readOnly) {\n            this.enableEditing();\n        }\n\n        this.addEditingLayers();\n    }\n\n    public stopEditing(rerender: boolean = true) {\n        if (this.isEditing()) {\n            this.saveEdits(rerender);\n\n            this.editingLayer.editing = false;\n            this.editingLayer = null;\n\n            this.editingControl.deleteAll();\n            this.map.removeControl(this.editingControl);\n\n            this.editingControl = null;\n        }\n    }\n\n    isEditing(): boolean {\n        return this.editingLayer != null;\n    }\n\n    setPointCoordinates(lat: any, long: any) {\n        if (this.editingLayer != null) {\n            this.editingControl.set({\n                type: \"FeatureCollection\",\n                features: [{\n                    id: this.editingLayer.getId(),\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: { type: \"Point\", coordinates: [long, lat] }\n                }]\n            });\n\n            this.editingControl.changeMode(\"simple_select\", { featureIds: this.editingLayer.getId() });\n\n            this.saveEdits();\n\n            /*\n            this.editingLayer.value = {\n              type: 'FeatureCollection',\n              features: [{\n              id: this.editingLayer.getId(),\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ long, lat ] }\n              }]\n            };\n            */\n\n            /*\n            this.editingLayer.value.coordinates = [ -97.4870830718814, 41.84836050415993 ];\n\n            this.editingControl.set(this.editingLayer.value);\n\n            this.unmapAllLayers();\n            this.mapAllLayers();\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.editingLayer.getId() } );\n            */\n        }\n    }\n\n    isValid(): boolean {\n        if (!this.readOnly) {\n            let isValid: boolean = false;\n\n            if (this.editingControl != null) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if (featureCollection.features.length > 0) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    public saveEdits(rerender: boolean = true): void {\n        if (this.editingLayer != null) {\n            let geoJson = this.getDrawGeometry();\n\n            (this.editingLayer.dataSource as unknown as GeoJsonLayerDataSource).setLayerData(geoJson);\n\n            if (rerender) {\n                this.unmapAllLayers();\n                this.mapAllLayers();\n            }\n        }\n    }\n\n    public reload(): void {\n        if (this.map != null) {\n            this.unmapAllLayers();\n            this.mapAllLayers();\n\n            if (this.editingControl != null) {\n                this.editingControl.deleteAll();\n            }\n\n            this.addEditingLayers();\n        }\n    }\n\n    setEditing(isEditing: boolean, layer: GeoJsonLayer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        layer.editing = isEditing;\n\n        if (isEditing) {\n            this.startEditing(layer);\n        }\n    }\n\n    public addOrUpdateLayer(newLayer: Layer, orderingIndex?: number) {\n        let newLayers = this.getLayers();\n\n        let existingIndex = newLayers.findIndex((findLayer: Layer) => { return findLayer.getId() === newLayer.getId(); });\n\n        if (existingIndex !== -1) {\n            newLayers[existingIndex] = newLayer;\n        } else {\n            if (orderingIndex != null) {\n                newLayers.splice(orderingIndex, 0, newLayer);\n            } else {\n                newLayers.push(newLayer);\n            }\n        }\n\n        if (newLayer instanceof GeoJsonLayer && newLayer.editing) {\n            this.startEditing(newLayer);\n        }\n\n        this.setLayers(newLayers);\n    }\n\n    public removeLayer(oid: string) {\n        let newLayers = this.getLayers();\n\n        let existingIndex = newLayers.findIndex((findLayer: Layer) => { return findLayer.getId() === oid; });\n\n        if (existingIndex !== -1) {\n            newLayers.splice(existingIndex, 1);\n\n            this.setLayers(newLayers);\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(\"Could not remove layer with id \" + oid + \" because one does not exist.\");\n        }\n    }\n\n    public removeLayers(oids: string[]) {\n        let newLayers = this.getLayers();\n\n        newLayers = newLayers.filter(layer => oids.indexOf(layer.getId()) === -1);\n\n        this.setLayers(newLayers);\n    }\n\n    public getLayers(): Layer[] {\n        return this.dataSourceFactory.deserializeLayers(this.dataSourceFactory.serializeLayers(this.layers));\n    }\n\n    enableEditing(): void {\n        if (this.editingControl == null) {\n            if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: false,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n                this.editingControl = new MapboxDraw({\n                    userProperties: true,\n                    controls: {\n                        point: true,\n                        line_string: false,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    },\n                    styles: [\n                        {\n                            id: \"highlight-active-points\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"true\"]],\n                            paint: {\n                                \"circle-radius\": 13,\n                                \"circle-color\": \"#33FFF9\",\n                                \"circle-stroke-width\": 4,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        },\n                        {\n                            id: \"points-are-blue\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"false\"]],\n                            paint: {\n                                \"circle-radius\": 10,\n                                \"circle-color\": \"#800000\",\n                                \"circle-stroke-width\": 2,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        }\n                    ]\n                });\n            } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: true,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"MIXED\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: true,\n                        line_string: true,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            }\n\n            if (this.map.getSource(\"mapbox-gl-draw-cold\") == null) {\n                this.map.addControl(this.editingControl, \"bottom-right\");\n            }\n        }\n    }\n\n    addEditingLayers(): void {\n        if (this.editingLayer != null && this.editingControl != null) {\n            (this.editingLayer.dataSource as unknown as GeoJsonLayerDataSource).getLayerData().then(data => {\n                if (data) {\n                    this.editingControl.add(data);\n                }\n            });\n        }\n    }\n\n    private mapboxUnmapLayer(layer: Layer): void {\n        if (this.map) {\n            this.getMapboxLayerIdsForLayer(layer).forEach(id => {\n                if (this.map.getLayer(id) != null) {\n                    this.map.removeLayer(id);\n                } else {\n                    // eslint-disable-next-line no-console\n                    console.log(\"Attempted to remove a layer [\" + id + \"] which does not exist.\");\n                }\n            });\n\n            // If this source is used by other layers we don't want to remove the source\n            let sourceHasOtherMappedLayers = this.currentMapState.filter(l => layer.getId() !== l.getId() && l.dataSource.getId() === layer.dataSource.getId()).length > 0;\n\n            if (!sourceHasOtherMappedLayers && this.map.getSource(layer.dataSource.getId()) != null) {\n                this.map.removeSource(layer.dataSource.getId());\n            }\n        }\n    }\n\n    private unmapAllLayers(): void {\n        if (this.currentMapState != null && this.currentMapState.length > 0) {\n            let len = this.currentMapState.length;\n\n            for (let i = 0; i < len; ++i) {\n                let layer = this.currentMapState[i];\n                this.mapboxUnmapLayer(layer);\n            }\n        }\n    }\n\n    private mapAllLayers(): void {\n        if (this.currentMapState != null && this.currentMapState.length > 0) {\n            let prevLayer = null;\n            let len = this.currentMapState.length;\n            for (let i = 0; i < len; ++i) {\n                let layer = this.currentMapState[i];\n\n                this.mapboxMapLayer(layer, prevLayer);\n                prevLayer = layer;\n            }\n        }\n    }\n\n    private mapboxHideLayer(layer: Layer): void {\n        if (!this.map) { return; }\n\n        this.getMapboxLayerIdsForLayer(layer).forEach(id => {\n            if (this.map.getLayer(id) != null) {\n                this.map.setLayoutProperty(id, \"visibility\", \"none\");\n            } else {\n                // eslint-disable-next-line no-console\n                console.log(\"Attempted to hide a layer [\" + id + \"] which does not exist.\");\n            }\n        });\n    }\n\n    private mapboxShowLayer(layer: Layer): void {\n        if (!this.map) { return; }\n\n        this.getMapboxLayerIdsForLayer(layer).forEach(id => {\n            if (this.map.getLayer(id) != null) {\n                this.map.setLayoutProperty(id, \"visibility\", \"visible\");\n            } else {\n                // eslint-disable-next-line no-console\n                console.log(\"Attempted to show a layer [\" + id + \"] which does not exist.\");\n            }\n        });\n    }\n\n    private mapboxMapLayer(layer: Layer, otherLayer?: Layer): void {\n        if (!this.map) { return; }\n\n        let mapboxSource: AnySourceData = layer.dataSource.buildMapboxSource();\n\n        if (this.map.getSource(layer.dataSource.getId()) == null) {\n            this.map.addSource(layer.dataSource.getId(), mapboxSource);\n        }\n\n        // If the layer wants to load some data asynchronously\n        if (layer.dataSource instanceof GeoJsonLayerDataSource) {\n            layer.dataSource.getLayerData().then(geojson => {\n                if (this.map.getSource(layer.dataSource.getId()) != null) {\n                    (this.map.getSource(layer.dataSource.getId()) as any).setData(geojson);\n                }\n            });\n        }\n\n        if (layer.dataSource.getGeometryType() === \"MIXED\") {\n            this.mapboxMapLayerAsType(\"POLYGON\", layer, otherLayer);\n            this.mapboxMapLayerAsType(\"POINT\", layer, otherLayer);\n            this.mapboxMapLayerAsType(\"LINE\", layer, otherLayer);\n        } else {\n            this.mapboxMapLayerAsType(layer.dataSource.getGeometryType(), layer, otherLayer);\n        }\n\n        // Label layer\n        let labelConfig: any = {\n            id: layer.getId() + \"-LABEL\",\n            source: layer.dataSource.getId(),\n            type: \"symbol\",\n            paint: {\n                \"text-color\": \"black\",\n                \"text-halo-color\": \"#fff\",\n                \"text-halo-width\": 2\n            },\n            layout: {\n                \"text-field\": [\"get\", \"localizedValue\", [\"get\", \"displayLabel\"]],\n                \"text-font\": [\"NotoSansRegular\"],\n                \"text-offset\": [0, 0.6],\n                \"text-anchor\": \"top\",\n                \"text-size\": 12\n            }\n        };\n\n        if (!layer.rendered) {\n            labelConfig.layout.visibility = \"none\";\n        }\n\n        layer.configureMapboxLayer(\"LABEL\", labelConfig);\n\n        this.map.addLayer(labelConfig, otherLayer ? otherLayer.getId() + \"-LABEL\" : null);\n    }\n\n    private mapboxMapLayerAsType(geometryType: string, layer: Layer, otherLayer?: Layer): void {\n        let layerConfig: any;\n\n        if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\") {\n            // Polygon Layer\n            layerConfig = {\n                id: layer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(geometryType),\n                type: \"fill\",\n                source: layer.dataSource.getId(),\n                paint: {\n                    \"fill-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"selected\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            };\n        } else if (geometryType === \"POINT\" || geometryType === \"MULTIPOINT\") {\n            // Point layer\n            layerConfig = {\n                id: layer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(geometryType),\n                type: \"circle\",\n                source: layer.dataSource.getId(),\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"selected\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            };\n        } else if (geometryType === \"LINE\" || geometryType === \"MULTILINE\") {\n            layerConfig = {\n                id: layer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(geometryType),\n                source: layer.dataSource.getId(),\n                type: \"line\",\n                layout: {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                paint: {\n                    \"line-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"selected\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"line-width\": 3\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"LineString\", \"MultiLineString\"], true, false]\n                ]\n            };\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(\"Unexpected geometry type [\" + geometryType + \"]\");\n            return;\n        }\n\n        layer.configureMapboxLayer(geometryType, layerConfig);\n\n        if (!layer.rendered) {\n            layerConfig.layout = (layerConfig.layout == null) ? {} : layerConfig.layout;\n            layerConfig.layout.visibility = \"none\";\n        }\n\n        this.map.addLayer(layerConfig, otherLayer ? otherLayer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(otherLayer.dataSource.getGeometryType()) : null);\n    }\n\n    private getLayerIdGeomTypePostfix(geometryType: string) {\n        if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\") {\n            return \"POLYGON\";\n        } else if (geometryType === \"POINT\" || geometryType === \"MULTIPOINT\") {\n            return \"POINT\";\n        } else if (geometryType === \"LINE\" || geometryType === \"MULTILINE\") {\n            return \"LINE\";\n        } else {\n            return \"POLYGON\";\n        }\n    }\n\n    private getMapboxLayerIdsForLayer(layer: Layer): string[] {\n        let ids = [];\n\n        if (layer.dataSource.getGeometryType() === \"MIXED\") {\n            ids = [\"POLYGON\", \"POINT\", \"LINE\", \"LABEL\"];\n        } else {\n            ids = [this.getLayerIdGeomTypePostfix(layer.dataSource.getGeometryType()), \"LABEL\"];\n        }\n\n        return ids.map(id => layer.getId() + \"-\" + id);\n    }\n\n    public getDrawGeometry(): any {\n        if (this.editingControl != null) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if (featureCollection.features.length > 0) {\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if (this.geometryType === \"MULTIPOLYGON\") {\n                    let polygons = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPolygon\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                polygons.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            polygons.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: \"MultiPolygon\"\n                    };\n                } else if (this.geometryType === \"MULTIPOINT\") {\n                    let points = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPoint\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                points.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            points.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: \"MultiPoint\"\n                    };\n                } else if (this.geometryType === \"MULTILINE\") {\n                    let lines = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiLineString\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                lines.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            lines.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: \"MultiLineString\"\n                    };\n                } else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static createEmptyGeometryValue(geometryType: String): any {\n        let value = { type: geometryType, coordinates: [] };\n\n        let upperType = geometryType.toUpperCase();\n\n        if (upperType === \"MULTIPOLYGON\" || upperType === \"MIXED\") {\n            value.type = \"MultiPolygon\";\n        } else if (upperType === \"POLYGON\") {\n            value.type = \"Polygon\";\n        } else if (upperType === \"POINT\") {\n            value.type = \"Point\";\n        } else if (upperType === \"MULTIPOINT\") {\n            value.type = \"MultiPoint\";\n        } else if (upperType === \"LINE\") {\n            value.type = \"Line\";\n        } else if (upperType === \"MULTILINE\") {\n            value.type = \"MultiLine\";\n        }\n\n        return value;\n    }\n\n    public zoomToLayersExtent(): void {\n        let layers = this.getLayers();\n        let geoJsonLayer: GeoJsonLayer = null;\n\n        layers.forEach(layer => {\n            if (layer instanceof GeoJsonLayer && layer.rendered) {\n                geoJsonLayer = layer as GeoJsonLayer;\n            }\n        });\n\n        if (geoJsonLayer != null) {\n            (geoJsonLayer.dataSource as unknown as GeoJsonLayerDataSource).getLayerData().then((geojson: any) => {\n                if (geojson != null) {\n                    const geometryType = geojson.type != null ? geojson.type.toUpperCase() : this.geometryType;\n\n                    if (geometryType === \"MULTIPOINT\" || geometryType === \"POINT\") {\n                        let coords = geojson.coordinates;\n\n                        if (coords) {\n                            let bounds = new LngLatBounds();\n                            coords.forEach(coord => {\n                                bounds.extend(coord);\n                            });\n\n                            let center = bounds.getCenter();\n                            let pt = new LngLat(center.lng, center.lat);\n\n                            this.map.flyTo({\n                                center: pt,\n                                zoom: 9,\n                                essential: true\n                            });\n                        }\n                    } else if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\" || geometryType === \"MIXED\") {\n                        let coords = geojson.coordinates;\n\n                        if (coords) {\n                            let bounds = new LngLatBounds();\n                            coords.forEach(polys => {\n                                polys.forEach(subpoly => {\n                                    subpoly.forEach(coord => {\n                                        bounds.extend(coord);\n                                    });\n                                });\n                            });\n\n                            this.map.fitBounds(bounds, {\n                                padding: 20\n                            });\n                        }\n                    } else if (geometryType === \"LINE\" || geometryType === \"MULTILINE\") {\n                        let coords = geojson.coordinates;\n\n                        if (coords) {\n                            let bounds = new LngLatBounds();\n                            coords.forEach(lines => {\n                                lines.forEach(subline => {\n                                    subline.forEach(coord => {\n                                        bounds.extend(coord);\n                                    });\n                                });\n                            });\n\n                            this.map.fitBounds(bounds, {\n                                padding: 20\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n}\n","import { AnySourceData, LngLatBounds, LngLatBoundsLike } from \"mapbox-gl\";\nimport { ListTypeService } from \"./list-type.service\";\nimport { RegistryService } from \"./registry.service\";\n\nimport { HttpParams } from \"@angular/common/http\";\nimport { v4 as uuid } from \"uuid\";\nimport bbox from \"@turf/bbox\";\nimport { GeoJSON } from \"geojson\";\nimport { RelationshipVisualizationService } from \"./relationship-visualization.service\";\nimport { GeometryService } from \"./geometry.service\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\nimport { MapService } from \"./map.service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { ObjectReference } from \"@registry/model/graph\";\ndeclare let registry: GeoRegistryConfiguration;\n\nexport abstract class LayerDataSource {\n\n    private dataSourceType: string;\n\n    private id: string;\n\n    constructor(dataSourceType: string) {\n        this.dataSourceType = dataSourceType;\n        this.id = uuid();\n    }\n\n    public getDataSourceType(): string {\n        return this.dataSourceType;\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new Layer(this, legendLabel, rendered, color);\n    }\n\n    public fromJSON(obj: any) {\n        Object.assign(this, obj);\n    }\n\n    public toJSON(): any {\n        return {\n            dataSourceType: this.dataSourceType,\n            id: this.id\n        };\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public abstract getKey(): string;\n\n    public abstract buildMapboxSource(): AnySourceData;\n\n    public abstract getGeometryType(): string;\n\n    public abstract getBounds(layer: Layer): Promise<LngLatBoundsLike>;\n\n}\n\nexport abstract class GeoJsonLayerDataSource extends LayerDataSource {\n\n    public abstract getLayerData(): Promise<GeoJSON.GeoJSON>;\n    public abstract setLayerData(data: GeoJSON.GeoJSON): void;\n\n    public buildMapboxSource(): AnySourceData {\n        return {\n            type: \"geojson\",\n            data: GeometryService.createEmptyGeometryValue(this.getGeometryType())\n        };\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.getLayerData().then(data => {\n            try {\n                return bbox(data as any) as LngLatBoundsLike;\n            // eslint-disable-next-line no-console\n            } catch (e) { console.log(e); }\n\n            return null;\n        });\n    }\n\n}\n\nexport class Layer {\n\n    legendLabel: string;\n    dataSource: LayerDataSource;\n    rendered: boolean;\n    color: string;\n    pinned: boolean;\n\n    constructor(dataSource?: LayerDataSource, legendLabel?: string, rendered?: boolean, color?: string) {\n        this.dataSource = dataSource;\n        this.legendLabel = legendLabel;\n        this.rendered = rendered;\n        this.color = color;\n        this.pinned = false;\n    }\n\n    public fromJSON(obj: any) {\n        Object.assign(this, obj);\n    }\n\n    public toJSON(): any {\n        return {\n            legendLabel: this.legendLabel,\n            rendered: this.rendered,\n            color: this.color,\n            pinned: this.pinned\n        };\n    }\n\n    public getId(): string {\n        return this.dataSource.getId();\n    }\n\n    public getKey(): string {\n        return this.dataSource.getKey();\n    }\n\n    public getPinned(): boolean {\n        return this.pinned;\n    }\n\n    public setPinned(pinned: boolean) {\n        this.pinned = pinned;\n    }\n\n    public configureMapboxLayer(layerType: string, layerConfig: any): void {\n\n    }\n\n}\n\nexport class GeoJsonLayer extends Layer {\n\n    constructor(dataSource?: LayerDataSource, legendLabel?: string, rendered?: boolean, color?: string) {\n        super(dataSource, legendLabel, rendered, color);\n        this.editing = false;\n    }\n\n    editing: boolean;\n\n}\n\nexport const GEO_OBJECT_DATA_SOURCE_TYPE: string = \"GEOOBJ\";\n\nexport class GeoObjectLayerDataSource extends LayerDataSource {\n\n    private registryService: RegistryService;\n\n    private code: string;\n\n    private typeCode: string;\n\n    private date: string;\n\n    constructor(registryService: RegistryService, code?: string, typeCode?: string, date?: string) {\n        super(GEO_OBJECT_DATA_SOURCE_TYPE);\n        this.registryService = registryService;\n        this.code = code;\n        this.typeCode = typeCode;\n        this.date = date;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            code: this.code,\n            typeCode: this.typeCode,\n            date: this.date\n        });\n    }\n\n    getCode(): string {\n        return this.code;\n    }\n\n    setCode(code: string): void {\n        this.code = code;\n    }\n\n    getTypeCode(): string {\n        return this.typeCode;\n    }\n\n    setTypeCode(typeCode: string): void {\n        this.typeCode = typeCode;\n    }\n\n    getDate(): string {\n        return this.date;\n    }\n\n    setDate(date: string): void {\n        this.date = date;\n    }\n\n    getDataSourceType(): string {\n        return GEO_OBJECT_DATA_SOURCE_TYPE;\n    }\n\n    getKey(): string {\n        return this.getDataSourceType() + this.getCode() + this.getTypeCode() + (this.getDate() == null ? \"\" : this.getDate());\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    buildMapboxSource(): AnySourceData {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"code\", this.code);\n        params = params.set(\"typeCode\", this.typeCode);\n\n        if (this.date != null) {\n            params = params.set(\"date\", this.date);\n        }\n\n        let url = registry.contextPath + \"/cgr/geoobject/get-code\" + \"?\" + params.toString();\n\n        return {\n            type: \"geojson\",\n            data: url\n        };\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.registryService.getGeoObjectBoundsAtDate(this.code, this.typeCode, this.date).then((bounds: number[]) => {\n            if (bounds && Array.isArray(bounds)) {\n                return new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n            } else {\n                return null;\n            }\n        });\n    }\n\n}\n\nexport const LIST_VECTOR_SOURCE_TYPE = \"LISTVECT\";\n\nexport class ListVectorLayerDataSource extends LayerDataSource {\n\n    private listService: ListTypeService;\n\n    private versionId: string;\n\n    constructor(listService: ListTypeService, versionId?: string) {\n        super(LIST_VECTOR_SOURCE_TYPE);\n        this.versionId = versionId;\n        this.listService = listService;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            versionId: this.versionId\n        });\n    }\n\n    getVersionId(): string {\n        return this.versionId;\n    }\n\n    getKey(): string {\n        return this.getDataSourceType() + this.getVersionId();\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new ListVectorLayer(this, legendLabel, rendered, color);\n    }\n\n    buildMapboxSource(): AnySourceData {\n        let protocol = window.location.protocol;\n        let host = window.location.host;\n\n        return {\n            type: \"vector\",\n            tiles: [protocol + \"//\" + host + registry.contextPath + \"/list-type/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: this.versionId }))],\n            promoteId: \"uid\"\n        };\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBounds> {\n        return this.listService.getBounds(this.versionId).then((bounds: number[]) => {\n            if (bounds && Array.isArray(bounds)) {\n                return new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n            } else {\n                return null;\n            }\n        });\n    }\n\n}\n\nexport class ListVectorLayer extends Layer {\n\n    configureMapboxLayer(layerType: string, layerConfig: any): void {\n        layerConfig[\"source-layer\"] = \"context\";\n\n        if (layerType === \"LABEL\") {\n            layerConfig.layout[\"text-field\"] = [\"case\",\n                [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                [\"coalesce\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()], [\"get\", \"displayLabel\"], [\"get\", \"code\"]],\n                [\"coalesce\", [\"get\", \"displayLabel\"], [\"string\", [\"get\", \"code\"]]\n                ]];\n        }\n    }\n\n}\n\nexport const CHANGE_REQUEST_SOURCE_TYPE_NEW = \"CRNEW\";\n\nexport const CHANGE_REQUEST_SOURCE_TYPE_OLD = \"CROLD\";\n\nexport class ValueOverTimeDataSource extends GeoJsonLayerDataSource {\n\n    votEditor: ValueOverTimeCREditor;\n\n    constructor(newOrOld: \"NEW\" | \"OLD\", votEditor: ValueOverTimeCREditor) {\n        super(newOrOld === \"NEW\" ? CHANGE_REQUEST_SOURCE_TYPE_NEW : CHANGE_REQUEST_SOURCE_TYPE_OLD);\n        this.votEditor = votEditor;\n    }\n\n    setLayerData(data: any): void {\n        if (this.getDataSourceType() === CHANGE_REQUEST_SOURCE_TYPE_NEW) {\n            this.votEditor.value = data;\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(\"ERROR. Cannot edit old geometry\");\n        }\n    }\n\n    getLayerData(): Promise<GeoJSON.GeoJSON> {\n        return new Promise((resolve, reject) => {\n            if (this.getDataSourceType() === CHANGE_REQUEST_SOURCE_TYPE_NEW) {\n                resolve(this.votEditor.value);\n            } else {\n                resolve(this.votEditor.oldValue);\n            }\n        });\n    }\n\n    getGeometryType(): string {\n        return this.votEditor.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType;\n    }\n\n    getKey(): string {\n        return this.getDataSourceType() + this.votEditor.oid;\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new GeoJsonLayer(this, legendLabel, rendered, color);\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.getLayerData().then(data => {\n            return bbox(data as any) as LngLatBoundsLike;\n        });\n    }\n\n}\n\nexport const SEARCH_DATASOURCE_TYPE = \"SEARCH\";\n\nexport class SearchLayerDataSource extends GeoJsonLayerDataSource {\n\n    private mapService: MapService;\n\n    private text: string;\n\n    private date: string;\n\n    private geojson: GeoJSON.GeoJSON;\n\n    constructor(mapService: MapService, text?: string, date?: string) {\n        super(SEARCH_DATASOURCE_TYPE);\n        this.mapService = mapService;\n        this.text = text;\n        this.date = date;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            text: this.text,\n            date: this.date\n        });\n    }\n\n    public getText(): string {\n        return this.text;\n    }\n\n    public getDate(): string {\n        return this.date;\n    }\n\n    public setLayerData(data: GeoJSON.GeoJSON): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public getLayerData(): Promise<GeoJSON.GeoJSON> {\n        if (this.geojson != null) {\n            return new Promise((resolve, reject) => {\n                resolve(this.geojson);\n            });\n        } else {\n            return this.mapService.search(this.text, this.date, false).then(data => {\n                this.geojson = data as any;\n                return data as GeoJSON.GeoJSON;\n            });\n        }\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    getKey(): string {\n        return SEARCH_DATASOURCE_TYPE + this.text + (this.date == null ? \"\" : this.date);\n    }\n\n}\n\nexport const RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE = \"RELVIZ\";\n\nexport class RelationshipVisualizionDataSource extends GeoJsonLayerDataSource {\n\n    relationshipType: string;\n    relationshipCode: string;\n    sourceObject: ObjectReference;\n    bounds: string;\n    date: string;\n\n    data: any;\n    dataPromise: any;\n\n    // eslint-disable-next-line no-use-before-define\n    vizService: RelationshipVisualizationService;\n    geomService: GeometryService;\n\n    constructor(vizService: RelationshipVisualizationService, geomService: GeometryService, relationshipType?: string, relationshipCode?: string, sourceObject?: ObjectReference, bounds?: string, date?: string) {\n        super(RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE);\n        this.vizService = vizService;\n        this.geomService = geomService;\n        this.relationshipType = relationshipType;\n        this.relationshipCode = relationshipCode;\n        this.sourceObject = sourceObject;\n        this.bounds = bounds;\n        this.date = date;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            relationshipType: this.relationshipType,\n            relationshipCode: this.relationshipCode,\n            sourceObject: this.sourceObject,\n            bounds: this.bounds,\n            date: this.date\n        });\n    }\n\n    getKey(): string {\n        return RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE + this.relationshipCode + this.sourceObject.code + this.sourceObject.typeCode + this.bounds + ((this.date == null) ? \"\" : this.date);\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new RelationshipVisualizionLayer(this, legendLabel, rendered, color);\n    }\n\n    getRelationshipType(): string {\n        return this.relationshipType;\n    }\n\n    getRelationshipCode(): string {\n        return this.relationshipCode;\n    }\n\n    getSourceObject(): ObjectReference {\n        return this.sourceObject;\n    }\n\n    hasSameSourceObject(sourceObj: ObjectReference): boolean {\n        return this.sourceObject.code === sourceObj.code && this.sourceObject.objectType === sourceObj.objectType && this.sourceObject.typeCode === sourceObj.typeCode;\n    }\n\n    getDate() {\n        return this.date;\n    }\n\n    public setLayerData(data: GeoJSON): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public getLayerData(): Promise<GeoJSON> {\n        if (this.data) {\n            return new Promise((resolve, reject) => {\n                resolve(this.data);\n            });\n        } else if (this.dataPromise != null) {\n            return this.dataPromise;\n        } else {\n            this.dataPromise = this.vizService.treeAsGeoJson(this.relationshipType, this.relationshipCode, this.sourceObject, this.date, this.getBoundsAsWKT()).then((data: any) => {\n                this.data = data;\n\n                this.dataPromise = null;\n                return this.data;\n            });\n            return this.dataPromise;\n        }\n    }\n\n    private getBoundsAsWKT(): string {\n        let wktBounds: string = null;\n\n        if (this.bounds != null) {\n            const mapBounds = new LngLatBounds(JSON.parse(this.bounds));\n            wktBounds = this.convertBoundsToWKT(mapBounds);\n        }\n\n        return wktBounds;\n    }\n\n    private convertBoundsToWKT(bounds: LngLatBounds): string {\n        let se = bounds.getSouthEast();\n        let sw = bounds.getSouthWest();\n        let nw = bounds.getNorthWest();\n        let ne = bounds.getNorthEast();\n\n        return \"POLYGON ((\" +\n          se.lng + \" \" + se.lat + \",\" +\n          sw.lng + \" \" + sw.lat + \",\" +\n          nw.lng + \" \" + nw.lat + \",\" +\n          ne.lng + \" \" + ne.lat + \",\" +\n          se.lng + \" \" + se.lat +\n        \"))\";\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.getLayerData().then((geojson: any) => {\n            if (geojson == null) { return null; }\n\n            if ((layer as RelationshipVisualizionLayer).getRelatedTypeFilter() != null) {\n                geojson.features = geojson.features.filter(feature => feature.properties.type === (layer as RelationshipVisualizionLayer).getRelatedTypeFilter());\n            }\n\n            return bbox(geojson) as LngLatBoundsLike;\n        });\n    }\n\n}\n\nexport class RelationshipVisualizionLayer extends Layer {\n\n    relatedTypeFilter: string;\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            relatedTypeFilter: this.relatedTypeFilter\n        });\n    }\n\n    getId(): string {\n        return (this.relatedTypeFilter == null) ? \"\" : this.relatedTypeFilter + this.dataSource.getId();\n    }\n\n    public getKey(): string {\n        return (this.relatedTypeFilter == null) ? \"\" : this.relatedTypeFilter + this.dataSource.getKey();\n    }\n\n    setRelatedTypeFilter(relatedTypeFilter: string) {\n        this.relatedTypeFilter = relatedTypeFilter;\n    }\n\n    getRelatedTypeFilter(): string {\n        return this.relatedTypeFilter;\n    }\n\n    configureMapboxLayer(layerType: string, layerConfig: any): void {\n        if (this.relatedTypeFilter != null) {\n            let filter = [\"match\", [\"get\", \"type\"], this.relatedTypeFilter, true, false];\n\n            if (layerConfig[\"filter\"] != null) {\n                layerConfig[\"filter\"].push(filter);\n            } else {\n                layerConfig[\"filter\"] = filter;\n            }\n        }\n    }\n\n}\n\nexport class DataSourceFactory {\n\n    private geomService: GeometryService;\n\n    private registryService: RegistryService;\n\n    private vizService: RelationshipVisualizationService;\n\n    private mapService: MapService;\n\n    private listService: ListTypeService;\n\n    private dataSources: { [key: string] : LayerDataSource } = {};\n\n    constructor(geomService: GeometryService, registryService: RegistryService, vizService: RelationshipVisualizationService, mapService: MapService, listService: ListTypeService) {\n        this.geomService = geomService;\n        this.registryService = registryService;\n        this.vizService = vizService;\n        this.mapService = mapService;\n        this.listService = listService;\n    }\n\n    public getRegisteredDataSource(dataSourceId: string) {\n        return this.dataSources[dataSourceId];\n    }\n\n    public registerDataSource(dataSource: LayerDataSource) {\n        this.dataSources[dataSource.getId()] = dataSource;\n    }\n\n    public unregisterDataSource(dataSourceType: string) {\n        delete this.dataSources[dataSourceType];\n    }\n\n    public newDataSourceFromType(dataSourceType: string): LayerDataSource {\n        if (dataSourceType === GEO_OBJECT_DATA_SOURCE_TYPE) {\n            return new GeoObjectLayerDataSource(this.registryService);\n        } else if (dataSourceType === RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE) {\n            return new RelationshipVisualizionDataSource(this.vizService, this.geomService);\n        } else if (dataSourceType === LIST_VECTOR_SOURCE_TYPE) {\n            return new ListVectorLayerDataSource(this.listService);\n        } else if (dataSourceType === SEARCH_DATASOURCE_TYPE) {\n            return new SearchLayerDataSource(this.mapService);\n        } else {\n            // This can happen if they were editing and refreshed the map with editing layers\n\n            // eslint-disable-next-line no-console\n            console.log(\"Cannot find data source of type '\" + dataSourceType + \"'\");\n            return null;\n        }\n    }\n\n    public deserializeDataSource(obj: any): LayerDataSource {\n        let dataSource = this.newDataSourceFromType(obj.dataSourceType);\n\n        if (dataSource == null && this.dataSources[obj.id] != null) {\n            return this.dataSources[obj.id];\n        } else if (dataSource == null) {\n            return null;\n        }\n\n        dataSource.fromJSON(obj);\n\n        return dataSource;\n    }\n\n    public serializeDataSource(dataSource: LayerDataSource): any {\n        let sds = dataSource.toJSON();\n\n        return sds;\n    }\n\n    public deserializeLayer(sl: any, ds: LayerDataSource): Layer {\n        let layer: Layer;\n\n        layer = ds.createLayer(sl.legendLabel, sl.rendered, sl.color);\n\n        Object.assign(layer, sl); // This will set the dataSource on the layer to an id\n        layer.dataSource = ds; // So we need to reset the dataSource\n\n        return layer;\n    }\n\n    public serializeLayer(layer: Layer): any {\n        let sl: any = layer.toJSON();\n\n        sl.dataSource = layer.dataSource.getId();\n\n        return sl;\n    }\n\n    public deserializeLayers(serialized: { layers: any[], dataSources: any[] }): Layer[] {\n        let layers: Layer[] = [];\n        let dataSources: LayerDataSource[] = [];\n\n        serialized.dataSources.forEach(sds => {\n            let ds = this.deserializeDataSource(sds);\n\n            if (ds != null) {\n                dataSources.push(ds);\n            }\n        });\n\n        serialized.layers.forEach(sl => {\n            let i = dataSources.findIndex(ds => ds.getId() === sl.dataSource);\n\n            if (i !== -1) {\n                layers.push(this.deserializeLayer(sl, dataSources[i]));\n            }\n        });\n\n        return layers;\n    }\n\n    public serializeLayers(layers: Layer[]): { layers: any[], dataSources: any[] } {\n        let ret = { layers: [], dataSources: [] };\n\n        layers.forEach(layer => {\n            if (ret.dataSources.findIndex(sds => sds.id === layer.dataSource.getId()) === -1) {\n                let sds = this.serializeDataSource(layer.dataSource);\n\n                ret.dataSources.push(sds);\n            }\n        });\n\n        layers.forEach(layer => {\n            let serializedLayer = this.serializeLayer(layer);\n\n            ret.layers.push(serializedLayer);\n        });\n\n        return ret;\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { Classification, ClassificationNode } from \"@registry/model/classification-type\";\nimport { PageResult } from \"@shared/model/core\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ClassificationService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    apply(classificationCode: string, parentCode: string, classification: Classification, isNew: boolean): Promise<Classification> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            classification: classification,\n            isNew: isNew\n        };\n\n        if (parentCode != null) {\n            params[\"parentCode\"] = parentCode;\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<Classification>(registry.contextPath + \"/classification/apply\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(classificationCode: string, code: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            code: code\n        };\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/classification/remove\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    move(classificationCode: string, code: string, parentCode: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            code: code,\n            parentCode: parentCode\n        };\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/classification/move\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getChildren(classificationCode: string, code: string, pageNumber: number, pageSize: number): Promise<PageResult<Classification>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        if (code != null) {\n            params = params.set(\"code\", code);\n        }\n\n        return this.http.get<PageResult<Classification>>(registry.contextPath + \"/classification/get-children\", { params: params })\n            .toPromise();\n    }\n\n    getAncestorTree(classificationCode: string, rootCode: string, code: string, pageSize: number): Promise<ClassificationNode> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"code\", code);\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        if (rootCode != null) {\n            params = params.set(\"rootCode\", rootCode);\n        }\n\n        return this.http.get<ClassificationNode>(registry.contextPath + \"/classification/get-ancestor-tree\", { params: params })\n            .toPromise();\n    }\n\n    search(classificationCode: string, rootCode: string, text: string): Promise<Classification[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n\n        if (rootCode != null) {\n            params = params.set(\"rootCode\", rootCode);\n        }\n\n        if (text != null) {\n            params = params.set(\"text\", text);\n        }\n\n        return this.http.get<Classification[]>(registry.contextPath + \"/classification/search\", { params: params })\n            .toPromise();\n    }\n\n    get(classificationCode: string, code: string): Promise<Classification> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"code\", code);\n\n        return this.http.get<Classification>(registry.contextPath + \"/classification/get\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\nimport { RegistryService } from \".\";\n\n@Injectable()\nexport class RegistryCacheService {\n\n    typeCache: GeoObjectTypeCache;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n\n    subscription: Subscription = null;\n\n    constructor(private service: RegistryService) {\n        this.typeCache = new GeoObjectTypeCache(this.service);\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"TYPE_CACHE_CHANGE\") {\n                this.typeCache.refresh();\n            }\n        });\n    }\n\n/*\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n    */\n\n    public getTypeCache(): GeoObjectTypeCache {\n        return this.typeCache;\n    }\n\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable padded-blocks */\nimport { GeoObjectOverTime, HierarchyOverTime, GeoObjectType, AttributeType } from \"./registry\";\nimport { ActionTypes } from \"./constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\nexport enum SummaryKey {\n    NEW = \"NEW\",\n    UNMODIFIED = \"UNMODIFIED\",\n    DELETE = \"DELETE\",\n    UPDATE = \"UPDATE\",\n    TIME_CHANGE = \"TIME_CHANGE\",\n    VALUE_CHANGE = \"VALUE_CHANGE\",\n}\n\nexport class Document {\n    fileName: string;\n    oid: string;\n}\n\nexport class Geometry {\n    type: string;\n    coordinates: number[][] | number[];\n}\n\nexport class ValueOverTimeDiff {\n    oid: string;\n    action: string; // Can be one of DELETE, UPDATE, CREATE\n    oldValue: any;\n    newValue: any;\n    newStartDate: string;\n    newEndDate: string;\n    oldStartDate: string;\n    oldEndDate: string;\n    parents?: any;\n    oldParents?: any;\n}\n\n// export class AbstractAction {\n//    approvalStatus: string;\n//    createActionDate: Date;\n//    label: string;\n//    oid: string;\n//    actionType: string;\n//    actionLabel: string;\n//    decisionMaker?: string;\n//    documents: Document[];\n// }\n\nexport class AbstractAction {\n    oid: string;\n    actionType: ActionTypes;\n    actionLabel: string;\n    createActionDate: string;\n    contributorNotes?: string;\n    maintainerNotes?: string;\n    additionalNotes?: string;\n    approvalStatus: string;\n    statusLabel: string;\n    createdBy: string;\n    documents: any[];\n    permissions: string[];\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n    geoObjectJson: GeoObjectOverTime;\n    parentJson: HierarchyOverTime[];\n\n    constructor() {\n        super();\n        this.actionType = ActionTypes.CREATEGEOOBJECTACTION;\n    }\n}\n\nexport class UpdateAttributeOverTimeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { \"valuesOverTime\": ValueOverTimeDiff[], hierarchyCode?: string };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = { valuesOverTime: [] };\n    }\n}\n\nexport class UpdateAttributeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { oldValue?: any, newValue?: any };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = {};\n    }\n}\n\nexport class ChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n}\n\nexport class UpdateChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n    geoObject: GeoObjectOverTime;\n}\n\nexport class ChangeRequest {\n    oid: string;\n    createdBy: string;\n    createDate: Date;\n    approvalStatus: string;\n    total: number;\n    pending: number;\n    documents: Document[];\n    actions: AbstractAction[];\n    current?: ChangeRequestCurrentObject & UpdateChangeRequestCurrentObject;\n    type: string; // Can be one of [\"CreateGeoObject\", \"UpdateGeoObject\"]\n    statusLabel?: string;\n    phoneNumber?: string;\n    email?: string;\n    permissions?: string[];\n    isNew?: boolean;\n\n    constructor() {\n        this.isNew = true;\n    }\n\n    public static getActionsForAttribute(cr: ChangeRequest, attributeName: string, hierarchyCode: string): AbstractAction[] {\n        if (cr.type === \"CreateGeoObject\") {\n            return cr.actions;\n        } else {\n            let newActions = [];\n\n            for (let i = 0; i < cr.actions.length; ++i) {\n                let action = cr.actions[i];\n\n                if (action.actionType === \"UpdateAttributeAction\") {\n                    let updateAttrAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === attributeName &&\n                      (attributeName !== \"_PARENT_\" || updateAttrAction.attributeDiff.hierarchyCode === hierarchyCode)) {\n                        newActions.push(cr.actions[i]);\n                    }\n                }\n            }\n\n            return newActions;\n        }\n    }\n}\n\n// export class UpdateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class CreateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class AddChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyTypeCode: string;\n//    contributorNotes: string;\n//    maintainerNotes: string;\n//    createdBy: string;\n// }\n\n// export class RemoveChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyCode: string;\n// }\n\n// export class SetParentAction extends AbstractAction {\n//    childCode: string;\n//    childTypeCode: string;\n//    json: HierarchyOverTime[];\n// }\n\nexport class GovernanceStatus {\n    key: string;\n    label: string;\n}\n\nexport class PageEvent {\n    type: string;\n    data: any;\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { ImportConfiguration } from \"@registry/model/io\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    implementDecisions(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/implement-decisions\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    update(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/update\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setActionStatus(actionOid: String, status: String): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/changerequest/set-action-status\", JSON.stringify({ actionOid: actionOid, status: status }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAllRequests(pageSize: number, pageNumber: number, filter: string, sort: any[], oid:string): Promise<PageResult<ChangeRequest>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"filter\", filter);\n        params = params.set(\"sort\", JSON.stringify(sort));\n\n        if (oid != null) {\n            params = params.set(\"oid\", oid);\n        }\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<ChangeRequest>>(registry.contextPath + \"/changerequest/get-all-requests\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    rejectChangeRequest(request: ChangeRequest): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<void>(registry.contextPath + \"/changerequest/reject\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(requestId: string): Promise<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<string>(registry.contextPath + \"/changerequest/delete\", JSON.stringify({ requestId: requestId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteFile(crOid: string, fileId: string): Promise<ImportConfiguration> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ImportConfiguration>(registry.contextPath + \"/changerequest/delete-file-cr\", JSON.stringify({ crOid: crOid, vfOid: fileId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport {\r\n    GeoObject, GeoObjectType, AttributeType, Term, ParentTreeNode,\r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob\r\n} from \"@registry/model/registry\";\r\n\r\nimport { HierarchyType } from \"@registry/model/hierarchy\";\r\nimport { Progress } from \"@shared/model/progress\";\r\n\r\nimport { Organization, LocaleView, PageResult } from \"@shared/model/core\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\nexport interface AttributeTypeService {\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType>;\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType>;\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean>;\r\n}\r\n\r\n@Injectable()\r\nexport class RegistryService implements AttributeTypeService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }>(registry.contextPath + \"/cgr/init\")\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (types != null) {\r\n            params = params.set(\"types\", JSON.stringify(types));\r\n        }\r\n\r\n        if (hierarchies != null) {\r\n            params = params.set(\"hierarchies\", JSON.stringify(hierarchies));\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>(registry.contextPath + \"/cgr/geoobjecttype/get-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects(childCode: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"childCode\", childCode);\r\n        params = params.set(\"childTypeCode\", childTypeCode);\r\n        params = params.set(\"parentTypes\", JSON.stringify(parentTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>(registry.contextPath + \"/cgr/geoobject/get-parent-geoobjects\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getChildGeoObjects(parentCode: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"parentCode\", parentCode);\r\n        params = params.set(\"parentTypeCode\", parentTypeCode);\r\n        params = params.set(\"childrenTypes\", JSON.stringify(childrenTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>(registry.contextPath + \"/cgr/geoobject/getchildren\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    doesGeoObjectExistAtRange(startDate: string, endDate: string, typeCode: string, code: string): Promise<{ exists: boolean, invalid: boolean }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"startDate\", startDate);\r\n        params = params.set(\"endDate\", endDate);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"code\", code);\r\n\r\n        return this.http\r\n            .get<{ exists: boolean, invalid: boolean }>(registry.contextPath + \"/geoobject/exists-at-range\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/create\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/update\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType(code: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/delete\", JSON.stringify({ code: code }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/addattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/updateattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<boolean>(registry.contextPath + \"/cgr/geoobjecttype/deleteattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeName: attributeName }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: term }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/updateterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: termJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject(id: string, typeCode: string, showOverlay: boolean = true): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"id\", id);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject-time/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject(code: string, typeCode: string, showOverlay: boolean = true): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>(registry.contextPath + \"/cgr/geoobject/get-hierarchies-over-time\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, parentTypeCode: string, hierarchy: string, startDate: string, endDate: string): Promise<{ id: string, code: string, name: string, typeCode: string, uid: string }[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if (parentTypeCode != null) {\r\n            params.parentTypeCode = parentTypeCode;\r\n        }\r\n\r\n        if (startDate != null && endDate != null) {\r\n            params.startDate = startDate;\r\n            params.endDate = endDate;\r\n        }\r\n\r\n        return this.http\r\n            .post<{ id: string, code: string, name: string, typeCode: string, uid: string }[]>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-active\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-completed\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-import-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-export-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/import-resolve\", JSON.stringify({ historyId: historyId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitValidationResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/validation-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitErrorResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/error-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<LocaleView[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<LocaleView[]>(registry.contextPath + \"/localization/get-locales\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", geoObjectCode);\r\n        params = params.set(\"typeCode\", geoObjectTypeCode);\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>(registry.contextPath + \"/cgr/geoobject-time/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectOverTime(typeCode: string, showOverlay: boolean = true): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject-time/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>(registry.contextPath + \"/cgr/geoobject/setAttributeVersions\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit(geoObjectCode: string, geoObjectTypeCode: string, actions: string, masterListId: string, notes: string, showOverlay: boolean = true): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        // TODO\r\n        // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n        // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        // for(const prop in geoObject.attributes) {\r\n        //\tlet attr = geoObject.attributes[prop];\r\n        //\tif(attr.type === \"date\"){\r\n        //\t\tattr.values.forEach( val => {\r\n        //\t\t\tval.value = new Date(val.value).getTime().toString();\r\n        //\t\t})\r\n        //\t}\r\n        // }\r\n\r\n        let params = { geoObjectCode: geoObjectCode, geoObjectTypeCode: geoObjectTypeCode, actions: actions };\r\n\r\n        if (masterListId != null) {\r\n            params[\"masterListId\"] = masterListId;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/updateGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n    * Not really part of the RegistryService\r\n    */\r\n    applyGeoObjectCreate(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string, showOverlay: boolean = true): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n        // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        for (const prop in geoObject.attributes) {\r\n            let attr = geoObject.attributes[prop];\r\n            if (attr.type === \"date\") {\r\n                attr.values.forEach(val => {\r\n                    val.value = new Date(val.value).getTime().toString();\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = { geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if (parentTreeNode != null) {\r\n            params[\"parentTreeNode\"] = parentTreeNode;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/createGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    progress(oid: string): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<Progress>(registry.contextPath + \"/master-list/progress\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getDatasetBounds(oid: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/master-list/bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getOrganizations(): Promise<Organization[]> {\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(registry.contextPath + \"/cgr/organizations/get-all\")\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ObjectReference, Relationship, TreeData } from \"@registry/model/graph\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class RelationshipVisualizationService {\n\n    constructor(private http: HttpClient, private eventService: EventService, private route: ActivatedRoute) {\n    }\n\n    tree(relationshipType: string, graphTypeCode: string, sourceVertex: ObjectReference, date: string, boundsWKT: string): Promise<TreeData> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"sourceVertex\", JSON.stringify(sourceVertex));\n\n        if (relationshipType != null) {\n            params = params.set(\"relationshipType\", relationshipType);\n        }\n\n        if (graphTypeCode != null) {\n            params = params.set(\"graphTypeCode\", graphTypeCode);\n        }\n\n        if (date) {\n            params = params.set(\"date\", date);\n        }\n\n        if (boundsWKT) {\n            params = params.set(\"boundsWKT\", boundsWKT);\n        }\n\n        // this.eventService.start();\n\n        return this.http\n            .get<TreeData>(registry.contextPath + \"/relationship-visualization/tree\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    treeAsGeoJson(relationshipType: string, graphTypeCode: string, sourceObject: ObjectReference, date: string, boundsWKT: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"sourceVertex\", JSON.stringify(sourceObject));\n        params = params.set(\"graphTypeCode\", graphTypeCode);\n\n        if (relationshipType != null) {\n            params = params.set(\"relationshipType\", relationshipType);\n        }\n\n        if (date) {\n            params = params.set(\"date\", date);\n        }\n\n        if (boundsWKT) {\n            params = params.set(\"boundsWKT\", boundsWKT);\n        }\n\n        // this.eventService.start();\n\n        return this.http\n            .get<any>(registry.contextPath + \"/relationship-visualization/treeAsGeoJson\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    relationships(objectType: \"BUSINESS\" | \"GEOOBJECT\", typeCode: string): Promise<Relationship[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"objectType\", objectType);\n        params = params.set(\"typeCode\", typeCode);\n\n        // this.eventService.start();\n\n        return this.http\n            .get<any>(registry.contextPath + \"/relationship-visualization/relationships\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ClassificationTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    apply(classificationType: ClassificationType): Promise<ClassificationType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ClassificationType>(registry.contextPath + \"/classification-type/apply\", JSON.stringify({ classificationType: classificationType }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(type: ClassificationType): Promise<ClassificationType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ClassificationType>(registry.contextPath + \"/classification-type/remove\", JSON.stringify({ oid: type.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object): Promise<PageResult<ClassificationType>> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            criteria: criteria\n        } as any;\n\n        return this.http.post<PageResult<ClassificationType>>(registry.contextPath + \"/classification-type/page\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    get(classificationCode: string): Promise<ClassificationType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n\n        return this.http.get<ClassificationType>(registry.contextPath + \"/classification-type/get\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { HistoricalRow, TransitionEvent } from \"@registry/model/transition-event\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class TransitionEventService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageSize: number, pageNumber: number, attrConditions: any): Promise<PageResult<TransitionEvent>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"attrConditions\", JSON.stringify(attrConditions));\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<TransitionEvent>>(registry.contextPath + \"/transition-event/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getDetails(oid: string): Promise<TransitionEvent> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<TransitionEvent>(registry.contextPath + \"/transition-event/get-details\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/apply\", JSON.stringify({ event: event }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/delete\", JSON.stringify({ eventId: event.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getHistoricalReport(typeCode: string, startDate: string, endDate: string, pageSize: number, pageNumber: number): Promise<PageResult<HistoricalRow>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode.toString());\n        params = params.set(\"startDate\", startDate.toString());\n        params = params.set(\"endDate\", endDate.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<HistoricalRow>>(registry.contextPath + \"/transition-event/historical-report\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-text\",\n    templateUrl: \"./localized-text.component.html\",\n    styleUrls: [\"./localized-text.css\"],\n})\nexport class LocalizedTextComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Input() public inlinelayout: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","\n<div *ngFor=\"let localeValue of value.localeValues\">\n  <div [ngClass]=\"{'row' : inlinelayout, 'row-holder' : !inlinelayout}\" >\n    <div [ngClass]=\"{'col-md-12' : inlinelayout}\">\n      <div class=\"form-group\">\n        <div [ngClass]=\"{'label-holder' : !inlinelayout}\" >\n          <label>\n            <localize [key]=\"key\"></localize>\n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n        </div>\n        <div [ngClass]=\"{'holder' : !inlinelayout}\">\n          <span class=\"text\">\n            <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType } from \"./registry\";\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\n    matchStrategy: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    formatType: string;\n    objectType: string;\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n    isExternal: string;\n    externalSystemId: string;\n    externalSystem?: any;\n    revealGeometryColumn?: any;\n    onValidChange: any;\n    externalIdAttributeTarget: string;\n}\n\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-input\",\n    templateUrl: \"./localized-input.component.html\",\n    styleUrls: []\n})\nexport class LocalizedInputComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\nimport * as mapboxgl from \"mapbox-gl\";\r\n\r\nimport { LocationInformation } from \"@registry/model/location-manager\";\r\nimport { EventService } from \"@shared/service\";\r\nimport { GeoObject } from \"@registry/model/registry\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\r\ndeclare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) {\r\n        (mapboxgl as any).accessToken = registry.mapboxAccessToken;\r\n    }\r\n\r\n    roots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (typeCode != null) {\r\n            params = params.set(\"typeCode\", typeCode);\r\n        }\r\n\r\n        if (hierarchyCode != null) {\r\n            params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        }\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<LocationInformation>(registry.contextPath + \"/registrylocation/roots\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    search(text: string, date: string, showOverlay: boolean = true): Promise<{ type: string, features: GeoObject[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"text\", text);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<{ type: string, features: GeoObject[] }>(registry.contextPath + \"/registrylocation/search\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { GeoObjectType, AttributeType } from \"@registry/model/registry\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\n\n@Component({\n    selector: \"attribute-input\",\n    templateUrl: \"./attribute-input.component.html\",\n    styleUrls: [\"./attribute-input.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\"))\n            // transition('show => none', animate('100ms'))\n        ])\n    ]\n})\nexport class AttributeInputComponent implements OnChanges {\n\n    @Input() isNew: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() type: string = null;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType;\n    @Output() attributeChange = new EventEmitter<AttributeType>();\n    message: string = null;\n\n    state: string = \"none\";\n    classifications: ClassificationType[] = [];\n\n    constructor(private service: ClassificationTypeService, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.type != null && this.attribute.type === \"classification\") {\n            this.service.page({}).then((page) => {\n                this.classifications = page.resultSet;\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    toggleIsUnique(): void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.attribute.code) {\n            // if code has a space\n            if (this.attribute.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            if (this.attribute.label.localeValues[0].value.length === 0) {\n                return false;\n            }\n\n            if (this.type === \"float\" && (this.attribute.precision == null || this.attribute.precision.toString() === \"\")) {\n                return false;\n            }\n\n            if (this.type === \"float\" && (this.attribute.scale == null || this.attribute.scale.toString() === \"\")) {\n                return false;\n            }\n\n            if (this.type === \"classification\" && (this.attribute.classificationType == null || this.attribute.classificationType.length === 0)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","<div>\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"!isNew\" [(ngModel)]=\"attribute.code\" name=\"code\" required\n          geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\">\n  </localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"type === 'float'\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"type === 'float'\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"type === 'classification'\">\n    <div class=\"row-holder\">\n      <div class=\"label-holder\">\n        <label>\n          <localize key=\"data.type.label.classification\"></localize>\n        </label>\n      </div>\n      <div class=\"holder\">\n        <select class=\"select-area\" name=\"classificationType\" [(ngModel)]=\"attribute.classificationType\" required\n          [disabled]=\"!isNew\">\n          <option></option>\n          <option *ngFor=\"let classification of classifications\" [value]=\"classification.code\">\n            {{classification.displayLabel.localizedValue}}\n          </option>\n        </select>\n      </div>\n    </div>\n\n    <div class=\"row-holder\" style=\"overflow: initial;\" *ngIf=\"attribute.classificationType != null && attribute.classificationType.length > 0\">\n      <div class=\"label-holder\">\n        <label>\n          Root Term\n        </label>\n      </div>\n      <div class=\"holder\">\n        <classification-field\n        [classificationType]=\"attribute.classificationType\"\n        name=\"classification-root\"\n        container=\"body\"\n        [(value)]=\"attribute.rootTerm\" \n        [disabled]=\"!isNew\">\n       </classification-field>\n      </div>\n    </div>\n\n  </ng-container>\n</div>","\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\nexport class WebSockets {\n\n    static buildBaseUrl(): string {\n        let protocol = \"wss\";\n\n        if (window.location.protocol.indexOf(\"https\") !== -1) {\n            protocol = \"wss\"; // Web Socket Secure\n        } else {\n            protocol = \"ws\";\n        }\n\n        let baseUrl = protocol + \"://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + registry.contextPath;\n\n        return baseUrl;\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input, ViewChildren, QueryList, Output, EventEmitter } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, Term, HierarchyOverTime } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, CreateGeoObjectAction, ChangeRequest } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { v4 as uuid } from \"uuid\";\n\n@Component({\n    selector: \"geoobject-shared-attribute-editor\",\n    templateUrl: \"./geoobject-shared-attribute-editor.component.html\",\n    styleUrls: [\"./geoobject-shared-attribute-editor.css\"],\n    providers: [DatePipe],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"slide\", [\n                state(\"left\", style({ left: 0 })),\n                state(\"right\", style({ left: \"100%\" })),\n                transition(\"* => *\", animate(200))\n            ])\n        ]]\n})\n\n/**\n * IMPORTANT\n * This component is shared between:\n * - crtable (request-table.component.ts)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget (feature-panel.component.ts)\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    // The changed state of the GeoObject in the GeoRegistry\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    showAllInstances: boolean = false;\n\n    tabIndex: number = 0;\n\n    // The current state of the GeoObject in the GeoRegistry\n    //    @Input() action: Action = null;\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isGeometryInlined = false;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n\n    @Input() requestedDate: string = null;\n\n    calculatedDate: string = null;\n\n    @Output() calculatedDateChange = new EventEmitter<string>();\n\n    // used in context of a list where reference back to the list forDate is needed\n    @Input() forDate: string = null;\n    @Input() datasetId: string = null;\n\n    // TODO : This was copy / pasted into manage-versions.component::onDateChange and ChangeRequestEditor::generateAttributeEditors\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"invalid\", \"exists\"];\n\n    @ViewChild(\"attributeForm\") attributeForm;\n\n    @ViewChildren(ManageVersionsComponent) manageVersions: QueryList<any>;\n\n    public parentAttributeType: AttributeType;\n\n    public geometryAttributeType: AttributeType;\n\n    showStabilityPeriods = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private geomService: GeometryService, private authService: AuthService, private dateService: DateService, private registryService: RegistryService) {\n\n    }\n\n    ngOnInit(): void {\n        if (this.attributeExcludes != null) {\n            this.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n            if (!this.isGeometryInlined) {\n                this.geoObjectAttributeExcludes.push(\"geometry\");\n            }\n        }\n\n        this.geometryAttributeType = this.getAttribute(\"geometry\");\n        if (this.geometryAttributeType == null) {\n            this.geometryAttributeType = new AttributeType(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n        }\n\n        this.parentAttributeType = new AttributeType(\"_PARENT_\", \"_PARENT_\", new LocalizedValue(\"Parents\", null), new LocalizedValue(\"Parents\", null), true, false, false, true);\n\n        if (this.changeRequest == null) {\n            this.changeRequest = this.createNewChangeRequest();\n        } else {\n            if (!this.changeRequest.actions) {\n                this.changeRequest.actions = [];\n            }\n\n            if (this.changeRequest.actions.length === 0 && this.isNew) {\n                this.changeRequest.actions = this.createNewChangeRequest().actions;\n            }\n        }\n\n        this.changeRequestEditor = new ChangeRequestEditor(this.changeRequest, this.postGeoObject, this.geoObjectType, this.hierarchies, this.geometryAttributeType, this.parentAttributeType, this.lService, this.dateService, this.registryService, this.geomService);\n\n        if (this.shouldForceSetExist()) {\n            this.changePage(3);\n        }\n\n        if (this.isNew) {\n            this.calculatedDate = null;\n        }\n\n        let got = this.changeRequest.current ? this.changeRequest.current.geoObjectType : this.postGeoObject.geoObjectType;\n        let orgCode = got.organizationCode;\n\n        // Don't show the stability bar on the Change Requests page.\n        if (this.changeRequest.isNew) {\n            this.showStabilityPeriods = (this.authService.isSRA() || this.authService.isOrganizationRA(orgCode) || this.authService.isGeoObjectTypeOrSuperRM(got) || this.authService.isGeoObjectTypeOrSuperRC(got));\n        }\n\n        this.showAllInstances = (this.changeRequestEditor.changeRequest.isNew || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\");\n    }\n\n    setFilterDate(date: string, refresh: boolean = true) {\n        this.calculatedDate = date;\n\n        if (this.manageVersions != null) {\n            this.manageVersions.forEach(manageVersion => manageVersion.setFilterDate(this.calculatedDate, refresh));\n        }\n\n        this.calculatedDateChange.emit(this.calculatedDate);\n    }\n\n    getChangeRequestEditor(): ChangeRequestEditor {\n        return this.changeRequestEditor;\n    }\n\n    createNewChangeRequest(): ChangeRequest {\n        let cr = new ChangeRequest();\n        cr.oid = uuid();\n        cr.approvalStatus = \"PENDING\";\n        cr.actions = [];\n\n        if (this.isNew) {\n            cr.type = \"CreateGeoObject\";\n\n            let createAction: CreateGeoObjectAction = new CreateGeoObjectAction();\n            createAction.geoObjectJson = this.postGeoObject;\n            createAction.parentJson = this.hierarchies;\n            cr.actions[0] = createAction;\n        } else {\n            cr.type = \"UpdateGeoObject\";\n        }\n\n        return cr;\n    }\n\n    shouldForceSetExist() {\n        if (!this.readOnly) {\n            if (this.isNew) {\n                const action: CreateGeoObjectAction = this.changeRequestEditor.changeRequest.actions[0] as CreateGeoObjectAction;\n\n                let values = action.geoObjectJson.attributes[\"exists\"].values;\n\n                if (values && values.length > 0) {\n                    let value = values[0];\n\n                    return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                }\n            } else {\n                let isNew = this.changeRequestEditor.changeRequest.isNew;\n\n                if (isNew && !this.readOnly && this.postGeoObject.attributes[\"exists\"]) {\n                    let values = this.postGeoObject.attributes[\"exists\"].values;\n\n                    if (values && values.length > 0) {\n                        let value = values[0];\n\n                        return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                    }\n                }\n\n                return isNew && !this.readOnly;\n            }\n        }\n\n        return !this.readOnly;\n    }\n\n    getAttribute(name: string): AttributeType {\n        if (name === \"_PARENT_\") {\n            return this.parentAttributeType;\n        } else if (name === \"geometry\") {\n            return this.geometryAttributeType;\n        }\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            if (this.geoObjectType.attributes[i].code === name) {\n                return this.geoObjectType.attributes[i];\n            }\n        }\n\n        return null;\n    }\n\n    changePage(nextPage: number): void {\n        if (this.shouldForceSetExist() && nextPage !== 3) {\n            return;\n        }\n\n        this.geomService.stopEditing();\n\n        this.tabIndex = nextPage;\n    }\n\n    hasChanges(tabIndex: number) {\n        let len = this.changeRequest.actions.length;\n\n        if (len > 0) {\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.changeRequest.actions[i];\n\n                if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                    return true;\n                } else if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeOverTimeAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === \"_PARENT_\" && tabIndex === 1) {\n                        return true;\n                    } else if (updateAttrAction.attributeName === \"geometry\" && tabIndex === 2) {\n                        return true;\n                    } else if ((updateAttrAction.attributeName === \"invalid\" || updateAttrAction.attributeName === \"exists\") && tabIndex === 3) {\n                        return true;\n                    } else if (tabIndex === 0 && updateAttrAction.attributeName !== \"_PARENT_\" && updateAttrAction.attributeName !== \"geometry\" && updateAttrAction.attributeName !== \"exists\" && updateAttrAction.attributeName !== \"invalid\") {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    hasErrors(tabIndex: number) {\n        let attributeEditors = this.changeRequestEditor.getEditors();\n\n        if (tabIndex === 0) {\n            let filter = [\"invalid\", \"exists\", \"_PARENT_\", \"geometry\"];\n            let filteredEditors = attributeEditors.filter(editor => filter.indexOf(editor.attribute.code) === -1);\n\n            for (let i = 0; i < filteredEditors.length; ++i) {\n                let editor = filteredEditors[i];\n\n                if (!editor.isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 1) {\n            for (let i = 0; i < this.hierarchies.length; ++i) {\n                let hierarchy = this.hierarchies[i];\n\n                if (!this.changeRequestEditor.getEditorForAttribute(this.parentAttributeType, hierarchy).isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 2) {\n            return !this.changeRequestEditor.getEditorForAttribute(this.geometryAttributeType).isValid();\n        } else if (tabIndex === 3) {\n            let invalid = this.getAttribute(\"invalid\");\n\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existsEditor = this.changeRequestEditor.getEditorForAttribute(existsAttribute);\n\n            return (Object.prototype.hasOwnProperty.call(invalid, \"isValid\") && !invalid.isValid) ||\n                !existsEditor.isValid();\n        }\n\n        return false;\n    }\n\n    public isValid(): boolean {\n        let allValid: boolean = true;\n\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.isValid != null && !att.isValid) {\n                allValid = false;\n            }\n        });\n\n        if (this.parentAttributeType.isValid != null && !this.parentAttributeType.isValid) {\n            allValid = false;\n        }\n\n        if (this.geometryAttributeType.isValid != null && !this.geometryAttributeType.isValid) {\n            allValid = false;\n        }\n\n        return allValid && this.changeRequestEditor.validate();\n    }\n\n    public getActions(): AbstractAction[] {\n        return this.changeRequestEditor.changeRequest.actions;\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <stability-period *ngIf=\"showStabilityPeriods\" [showHint]=\"!readOnly\" [changeRequestEditor]=\"changeRequestEditor\" [sharedAttributeEditor]=\"this\" [forDate]=\"forDate\" [context]=\"datasetId == null ? 'EXPLORER' : 'LIST'\" [filterDate]=\"requestedDate\" [latestPeriodIsActive]=\"requestedDate == null && changeRequestEditor.changeRequest.isNew\"></stability-period>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <boolean-field *ngIf=\"changeRequestEditor && !changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject'\" [(value)]=\"showAllInstances\" label=\"Show all instances\" [disable]=\"false\"></boolean-field>\n  </div>\n</div>\n\n<div class=\"row\">\n  <!-- <div class=\"label-holder\"></div> -->\n  <div class=\"col-md-12\">\n    <div class=\"btn-group geobject-editor-tab-holder\">\n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 0, disabled: shouldForceSetExist()}\" (click)=\"changePage(0);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabZero\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(0)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(0)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 1, disabled: shouldForceSetExist()}\" (click)=\"changePage(1);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabOne\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(1)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(1)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 2, disabled: shouldForceSetExist()}\" (click)=\"changePage(2);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabTwo\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(2)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(2)\" class=\"tabHasChanges\"></span></span>\n      </label>\n      <label class=\"btn full-width-radio-button settings\" [ngClass]=\"{active: tabIndex === 3}\" (click)=\"changePage(3);\"> \n        <span style=\"display:inline-block; width:90%;\"><i class=\"fa fa-cog\"></i></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(3)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(3)\" class=\"tabHasChanges\"></span></span>\n      </label>\n    </div>\n  </div>\n</div>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n  <fieldset>\n    <!-- <div class=\"col-md-12\"> -->\n    <div *ngIf=\"changeRequestEditor && changeRequestEditor.geoObject\">\n      <div *ngIf=\"tabIndex === 0\" class=\"row\">\n        <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    \n        <div class=\"col-md-12\">\n\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes; let i = index\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n              <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(attr).hasChanges()\" class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span *ngIf=\"attr.code === 'code'\"> \n                      <localize key=\"geoobject.code.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code === 'displayLabel'\"> \n                      <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                    </span>\n                    <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\"> {{attr.label.localizedValue}} </span> \n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <div *ngIf=\"attr.code !== 'code' && attr.isChangeOverTime\">\n                    <manage-versions\n                        [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"attr\"\n                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"calculatedDate\" [showAllInstances]=\"showAllInstances\" >\n                    </manage-versions>\n                  </div>\n\n                  <div *ngIf=\"!attr.isChangeOverTime\">\n                    <input *ngIf=\"changeRequestEditor.geoObject && attr.code === 'code'\" type=\"text\" [(ngModel)]=\"changeRequestEditor.getEditorForAttribute(attr).value\" id=\"mod-{{attr.code}}\" \n                        name=\"mod-{{attr.code}}\" [disabled]=\"readOnly || (attr.code === 'code' && !isNew)\" [style]=\"(readOnly || (attr.code === 'code' && !isNew)) ? '' : 'color:#333'\" required>\n\n                    <div *ngIf=\"attr.code !== 'code'\">\n                        <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"attr\" [geoObject]=\"changeRequestEditor.geoObject\"\n                          [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div *ngIf=\"tabIndex === 1\" class=\"row\">\n        <div class=\"col-md-12\">\n\t        <ul class=\"list-group\">\n\t\t        <li *ngFor=\"let hierarchy of hierarchies\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n\t\t          <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(parentAttributeType, hierarchy).hasChanges()\" class=\"panel panel-default\">\n\t              <div class=\"panel-heading\">\n\t                <h4 style=\"margin:0;\">\n\t                  <span> {{hierarchy.label}} </span> \n\t                </h4>\n\t              </div>\n\t\t\t\t      \n\t\t\t\t        <div class=\"panel-body\">\n\t\t\t\t          <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"parentAttributeType\"\n\t                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"filterDate\" [hierarchy]=\"hierarchy\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n\t\t\t\t        </div>\n\t\t\t        </div>\n\t\t        </li>\n\t        </ul>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 2\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(geometryAttributeType).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span> <localize key=\"shared.attributes.attribute.geometry.label\"></localize> </span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"geometryAttributeType\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 3\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('exists')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span>{{getAttribute('exists').label.localizedValue}}</span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"getAttribute('exists')\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('invalid')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <!-- <span>{{getAttribute('invalid').label.localizedValue}}</span>  -->\n                <localize key=\"geoobject.invalid.alternate.label\"></localize>\n              \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"getAttribute('invalid')\" [geoObject]=\"changeRequestEditor.geoObject\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- </div> -->\n  </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from \"rxjs\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ContextMenuService, ContextMenuComponent } from \"ngx-contextmenu\";\nimport * as d3 from \"d3\";\n\nimport { CreateHierarchyTypeModalComponent } from \"./modals/create-hierarchy-type-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./modals/create-geoobjtype-modal.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./modals/manage-geoobjecttype-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { Organization } from \"@shared/model/core\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { SvgHierarchyType } from \"./d3/svg-hierarchy-type\";\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection } from \"./d3/svg-util\";\nimport { SvgHierarchyNode } from \"./d3/svg-hierarchy-node\";\nimport { ImportTypesModalComponent } from \"./modals/import-types-modal.component\";\nimport Utils from \"@registry/utility/Utils\";\n\nexport const TREE_SCALE_FACTOR_X: number = 1.8;\nexport const TREE_SCALE_FACTOR_Y: number = 1.8;\n\nexport const DEFAULT_NODE_FILL = \"#e6e6e6\";\nexport const DEFAULT_NODE_BANNER_COLOR = \"#A29BAB\";\nexport const INHERITED_NODE_FILL = \"#d4d4d4\";\nexport const INHERITED_NODE_BANNER_COLOR = \"#a0a0a0\";\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n\n  active: boolean;\n  label: string;\n\n}\n\nexport interface DropTarget {\n  dropSelector: string;\n  onDrag(dragEl: Element, dropEl: Element, event: any): void;\n  onDrop(dragEl: Element, event: any): void;\n  [others: string]: any;\n}\n\n@Component({\n\n    selector: \"hierarchies\",\n    templateUrl: \"./hierarchy.component.html\",\n    styleUrls: [\"./hierarchy.css\"]\n})\nexport class HierarchyComponent implements OnInit {\n\n  userOrganization: string = null;\n\n  primarySvgHierarchy: SvgHierarchyType;\n  currentHierarchy: HierarchyType = null;\n\n  instance: Instance = new Instance();\n  hierarchies: HierarchyType[];\n  organizations: Organization[];\n  geoObjectTypes: GeoObjectType[] = [];\n\n  hierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n  filter: string = \"\";\n  filteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  filteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n  @ViewChild(\"searchInput\", { static: true }) searchInput: ElementRef;\n\n  hierarchyTypeDeleteExclusions: string[] = [\"AllowedIn\", \"IsARelationship\"];\n  geoObjectTypeDeleteExclusions: string[] = [\"ROOT\"];\n\n  _opened: boolean = false;\n\n  /*\n   * Reference to the modal current showing\n  */\n  private bsModalRef: BsModalRef;\n\n  /*\n   * Template for tree node menu\n   */\n  @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n  /*\n   * Template for leaf menu\n   */\n  @ViewChild(\"leafMenu\") public leafMenuComponent: ContextMenuComponent;\n\n  /*\n   * Currently clicked on id for delete confirmation modal\n   */\n  current: any;\n\n  isSRA: boolean = false;\n\n  hierarchyService: HierarchyService;\n\n  localizeService: LocalizationService;\n\n  options = {\n    //      allowDrag: (any) => node.isLeaf,\n    //      allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n    // return true / false based on element, to.parent, to.index. e.g.\n    //          return parent.hasChildren;\n    //        },\n      displayField: \"label\",\n      actionMapping: {\n          mouse: {\n              click: (tree: any, node: any, $event: any) => {\n                  this.treeNodeOnClick(node, $event);\n              },\n              contextMenu: (tree: any, node: any, $event: any) => {\n                  this.handleOnMenu(node, $event);\n              }\n          }\n      },\n      mouse: {\n      //              drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n      //                console.log('drag', from, to); // from === {name: 'first'}\n      //                // Add a node to `to.parent` at `to.index` based on the data in `from`\n      //                // Then call tree.update()\n      //              }\n      }\n  };\n\n  constructor(hierarchyService: HierarchyService, private modalService: BsModalService,\n    private contextMenuService: ContextMenuService,\n    localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n      this.isSRA = authService.isSRA();\n\n      this.hierarchyService = hierarchyService;\n      this.localizeService = localizeService;\n  }\n\n  ngOnInit(): void {\n      this.refreshAll(null);\n\n      fromEvent(this.searchInput.nativeElement, \"keyup\").pipe(\n\n      // get value\n          filter(Boolean),\n          debounceTime(500),\n          distinctUntilChanged(),\n          tap(() => {\n              this.onFilterChange();\n          })\n      // subscription for response\n      ).subscribe();\n  }\n\n  localize(key: string): string {\n      return this.localizeService.decode(key);\n  }\n\n  private renderTree(): void {\n      if (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length == 0) {\n          d3.select(\"#svg\").remove();\n\n          let canDrag = false;\n          if (this.currentHierarchy != null) {\n              canDrag = (this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode));\n          }\n\n          this.geoObjectTypes.forEach((got: GeoObjectType) => {\n              got.canDrag = canDrag;\n          });\n          return;\n      }\n\n      d3.select(\".g-context-menu\").remove();\n      d3.select(\".hierarchy-inherit-button\").remove();\n      d3.select(\".g-hierarchy-got-connector\").remove();\n\n      let overflowDiv: any = d3.select(\"#overflow-div\").node();\n      let scrollLeft = overflowDiv.scrollLeft;\n      let scrollRight = overflowDiv.scrollRight;\n\n      let svg = d3.select(\"#svg\");\n\n      if (svg.node() == null) {\n          svg = d3.select(\"#svgHolder\").append(\"svg\");\n          svg.attr(\"id\", \"svg\");\n      }\n\n      this.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService, this.authService);\n      this.primarySvgHierarchy.render();\n\n      this.calculateSvgViewBox();\n\n      let overflowDiv2: any = d3.select(\"#overflow-div\").node();\n      overflowDiv2.scrollLeft = scrollLeft;\n      overflowDiv2.scrollRight = scrollRight;\n\n    // this.registerSvgHandlers();\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n          got.canDrag = this.calculateCanDrag(got);\n      });\n  }\n\n  calculateSvgViewBox(): void {\n      let svg: any = d3.select(\"#svg\");\n      let svgNode: any = svg.node();\n\n      let { x, y, width, height } = svgNode.getBBox();\n\n      const xPadding = 30;\n      const yPadding = 40;\n      svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n      width = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n      height = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n      d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n    // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n  }\n\n  calculateCanDrag(got: GeoObjectType): boolean {\n      let hierarchyComponent = this;\n\n      if (this.primarySvgHierarchy != null) {\n      // Check permissions against GOT and Hierarchy org\n          if (!(this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode))) {\n              return false;\n          }\n\n      // If the child is already on the graph, they cannot drag.\n          if (this.primarySvgHierarchy.getNodeByCode(got.code) != null) {\n              return false;\n          }\n\n      // If we are abstract, and one of our children is on the graph, they cannot drag.\n          if (got.isAbstract) {\n              let isChildOnGraph = false;\n\n              this.geoObjectTypes.forEach((child: GeoObjectType) => {\n                  if (child.superTypeCode === got.code) {\n                      if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null) {\n                          isChildOnGraph = true;\n                      }\n                  }\n              });\n\n              if (isChildOnGraph) {\n                  return false;\n              }\n          }\n      // If we are a child of an abstract type, and our abstract type is on the graph, we cannot drag.\n          else if (got.superTypeCode != null) {\n              if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null) {\n                  return false;\n              }\n          }\n      } else {\n      // If there is no selected hierarchy, they cannot drag.\n          return false;\n      }\n\n      return true;\n  }\n\n  calculateRelatedHierarchies(got: GeoObjectType): string[] {\n      let relatedHiers = [];\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchyType = this.hierarchies[i];\n\n          if (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n              let d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n              let found = d3Hierarchy.find((node) => {\n                  return node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n              });\n\n              if (found) {\n                  relatedHiers.push(hierarchyType.code);\n              }\n          }\n      }\n\n      return relatedHiers;\n  }\n\n  private registerDragHandlers(): any {\n      let that = this;\n\n      let dropTargets: DropTarget[] = [];\n\n    // Empty Hierarchy Drop Zone\n      dropTargets.push({\n          dropSelector: \".drop-box-container\",\n          onDrag: function(dragEl: Element, dropEl: Element) {\n              if (this.dropEl != null) {\n                  this.dropEl.style(\"border-color\", null);\n                  this.dropEl = null;\n              }\n\n              if (dropEl != null) {\n                  let emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n                  if (emptyHierarchyDropZone != null) {\n                      this.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n                  }\n              }\n          },\n          onDrop: function(dragEl: Element) {\n              if (this.dropEl != null) {\n                  this.dropEl.style(\"border-color\", null);\n                  that.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n                  this.dropEl = null;\n              }\n          }\n      });\n\n    // SVG GeoObjectType Drop Zone\n      dropTargets.push({\n          dropSelector: \".svg-got-body-rect\",\n          onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n              this.clearDropZones();\n\n              let lastDropEl = this.dropEl;\n\n        // translate page to SVG co-ordinate\n              let svg: any = d3.select(\"#svg\").node();\n\n              if (svg == null) {\n                  return;\n              }\n              let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        // Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n        // we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones.\n              that.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n                  if (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n                      this.dropEl = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + node.data.geoObjectType + \"\\\"]\");\n                      node.data.activeDropZones = true;\n\n                      if (node.parent == null) {\n                          node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n                      }\n                  } else {\n                      node.data.activeDropZones = false;\n\n                      if (node.parent == null) {\n                          node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                      }\n                  }\n              });\n\n              if (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") != this.dropEl.attr(\"data-gotCode\"))) {\n                  this.clearGhostNodes(true);\n              }\n\n              if (this.dropEl != null) {\n                  let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n                  const gotCode = this.dropEl.attr(\"data-gotCode\");\n                  let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n                  let isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n                  this.dropEl.attr(\"stroke\", \"blue\");\n\n                  const dropElX = parseInt(this.dropEl.attr(\"x\"));\n                  const dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n          // Add drop zones\n                  const childW: number = SvgHierarchyType.gotRectW;\n                  const childH: number = SvgHierarchyType.gotRectH;\n\n                  let dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n          // Render Child Drop Zone\n                  let dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length == 0);\n                  let isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n                  if (isChildDZActive) {\n                      this.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"white\");\n\n                      this.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"none\")\n                          .attr(\"stroke\", \"black\")\n                          .attr(\"stroke-width\", \"1\")\n                          .attr(\"stroke-dasharray\", \"5,5\");\n\n                      let addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n                      this.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n                          .attr(\"font-family\", \"sans-serif\")\n                          .attr(\"font-size\", 10)\n                          .attr(\"fill\", \"black\")\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n                          .text(addChildLabel);\n                  }\n\n          // Render Parent Drop Zone\n                  if (!isDragGroup) // Don't render it if we're a group\n                  {\n                      this.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"white\");\n\n                      this.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"none\")\n                          .attr(\"stroke\", \"black\")\n                          .attr(\"stroke-width\", \"1\")\n                          .attr(\"stroke-dasharray\", \"5,5\");\n\n                      d3.select(\".svg-got-parent-dz-text\").remove();\n                      let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n                      this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n                          .attr(\"font-family\", \"sans-serif\")\n                          .attr(\"font-size\", 10)\n                          .attr(\"fill\", \"black\")\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n                          .text(addParentLabel);\n                  }\n\n          // Render Sibling Drop Zone\n                  if (this.ghostCode != gotCode) {\n                      if (this.ghostCode != null) {\n                          this.clearGhostNodes(dropNode.parent == null);\n                      }\n\n                      if (dropNode.parent != null) {\n                          let parentIndex = null;\n                          for (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n                              let hn: any = dropNode.parent.data.children[i];\n\n                              if (hn.geoObjectType === gotCode) {\n                                  parentIndex = i + 1;\n                              }\n                          }\n\n                          let addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n                          dropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n                          that.renderTree();\n                          this.ghostCode = gotCode;\n                      }\n                  }\n\n                  let siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n                  if (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n                      this.parentDz.attr(\"stroke\", \"blue\");\n                      this.parentDzText.attr(\"fill\", \"blue\");\n                      isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                      isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                      siblingGhostBody.attr(\"stroke\", \"black\");\n                      this.activeDz = this.parentDz;\n                  } else if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n                      !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                      !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                      this.childDz.attr(\"stroke\", \"blue\");\n                      this.childDzText.attr(\"fill\", \"blue\");\n                      siblingGhostBody.attr(\"stroke\", \"black\");\n                      this.activeDz = this.childDz;\n                  } else if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n                      !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                      !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                      isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                      isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                      siblingGhostBody.attr(\"stroke\", \"blue\");\n                      this.activeDz = \"sibling\";\n                  }\n              }\n          },\n          onDrop: function(dragEl: Element) {\n              if (this.dropEl != null && this.activeDz != null) {\n                  let dropGot = this.dropEl.attr(\"data-gotCode\");\n                  let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n                  let dragGot = d3.select(dragEl).attr(\"id\");\n\n                  if (this.activeDz === this.childDz) {\n                      if (dropNode.data.children.length == 0) {\n                          that.addChild(that.currentHierarchy.code, dropGot, dragGot);\n                      } else {\n                          let youngest = \"\";\n\n                          for (let i = 0; i < dropNode.data.children.length; ++i) {\n                              youngest = youngest + dropNode.data.children[i].geoObjectType;\n\n                              if (i < dropNode.data.children.length - 1) {\n                                  youngest = youngest + \",\";\n                              }\n                          }\n\n                          that.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n                      }\n                  } else if (this.activeDz === this.parentDz) {\n                      if (dropNode.parent == null) {\n                          that.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n                      } else {\n                          that.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n                      }\n                  } else if (this.activeDz === \"sibling\") {\n                      that.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n                  }\n              }\n              this.clearDropZones();\n              this.clearGhostNodes(true);\n          },\n          clearDropZones: function() {\n              if (this.dropEl != null) {\n                  this.dropEl.attr(\"stroke\", null);\n              }\n\n              this.dropEl = null;\n              this.activeDz = null;\n\n              this.childDz = null;\n              this.parentDz = null;\n\n              d3.select(\".svg-dropZone-g\").remove();\n          },\n          clearGhostNodes: function(renderTree: boolean) {\n              if (this.ghostCode != null) {\n                  let ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n                  if (ghostNode != null) {\n                      let parentIndex = null;\n                      for (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n                          let hn: any = ghostNode.parent.data.children[i];\n\n                          if (hn.ghostingCode === this.ghostCode) {\n                              parentIndex = i;\n                          }\n                      }\n\n                      if (parentIndex != null) {\n                          ghostNode.parent.data.children.splice(parentIndex, 1);\n                          if (renderTree) {\n                              that.renderTree();\n                          }\n                      }\n                  }\n\n                  this.ghostCode = null;\n              }\n          }\n      });\n\n    // GeoObjectTypes and Hierarchies\n      let deltaX: number, deltaY: number, width: number;\n      let sidebarDragHandler = d3.drag()\n          .on(\"start\", function(event: any) {\n              let canDrag = d3.select(this).attr(\"data-candrag\");\n              if (canDrag === \"false\") {\n                  return;\n              }\n\n              let rect = this.getBoundingClientRect();\n              deltaX = rect.left - event.sourceEvent.pageX;\n              deltaY = rect.top - event.sourceEvent.pageY;\n              width = rect.width;\n          })\n          .on(\"drag\", function(event: any) {\n              let canDrag = d3.select(this).attr(\"data-candrag\");\n              if (canDrag === \"false\") {\n                  return;\n              }\n\n              d3.select(\".g-context-menu\").remove();\n\n              let selThis = d3.select(this);\n\n        // Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n              selThis.style(\"display\", \"none\");\n\n              let target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n              selThis.style(\"display\", null);\n\n              for (let i = 0; i < dropTargets.length; ++i) {\n                  dropTargets[i].onDrag(this, target, event);\n              }\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n              selThis\n                  .classed(\"dragging\", true)\n                  .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                  .style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n                  .style(\"width\", width + \"px\");\n\n        // If they are moving a GOT group then we have to move the children as well\n              if (selThis.classed(\"got-group-parent\")) {\n                  let index = 1;\n                  d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                      let li: any = this;\n                      let child = d3.select(li);\n\n                      child\n                          .classed(\"dragging\", true)\n                          .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                          .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2) * index) + \"px\")\n                          .style(\"width\", width + \"px\");\n\n                      index++;\n                  });\n              }\n          }).on(\"end\", function(event: any) {\n              let selThis = d3.select(this)\n                  .classed(\"dragging\", false)\n                  .style(\"left\", null)\n                  .style(\"top\", null)\n                  .style(\"width\", null);\n\n        // If they are moving a GOT group then we have to reset the children as well\n              if (selThis.classed(\"got-group-parent\")) {\n                  d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                      let child = d3.select(this);\n\n                      child\n                          .classed(\"dragging\", false)\n                          .style(\"left\", null)\n                          .style(\"top\", null)\n                          .style(\"width\", null);\n                  });\n              }\n\n              for (let i = 0; i < dropTargets.length; ++i) {\n                  dropTargets[i].onDrop(this, event);\n              }\n          });\n\n      sidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n  }\n\n  private registerSvgHandlers(): void {\n      let hierarchyComponent = this;\n\n    // SVG Drag Handler\n      let deltaX: number, deltaY: number, width: number;\n      let startPoint: any;\n      let svgGot: SvgHierarchyNode;\n      let svgDragHandler = d3.drag()\n          .on(\"start\", function(event: any) {\n              let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n        // let select = d3.select(this);\n\n              svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n        // d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        //   d3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        // d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     console.log(\"no --> \",a.data.geoObjectType)\n        //     return -1\n        //   }\n        //   else {\n        //     console.log(\"yes --> \",a.data.geoObjectType)\n        //     return 1\n        //   }\n        // });\n\n              startPoint = svgGot.getPos();\n\n              deltaX = startPoint.x - svgMousePoint.x;\n              deltaY = startPoint.y - svgMousePoint.y;\n          })\n          .on(\"drag\", function(event: any) {\n              d3.select(\".g-context-menu\").remove();\n\n              let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n              svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n              svgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n          }).on(\"end\", function(event: any) {\n              let bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n\n              svgGot.setPos(startPoint.x, startPoint.y, false);\n\n        // if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n        //   if (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n        //     let obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        //     hierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n        //       animated: true,\n        //       backdrop: true,\n        //       ignoreBackdropClick: true,\n        //     });\n\n        //     let message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        //     message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        //     hierarchyComponent.bsModalRef.content.message = message;\n        //     hierarchyComponent.bsModalRef.content.data = obj.code;\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n        //       let treeNode = svgGot.getTreeNode();\n        //       let parent = null;\n        //       if (treeNode.parent == null) {\n        //         parent = \"ROOT\";\n        //       }\n        //       else {\n        //         if (treeNode.parent.data.inheritedHierarchyCode != null) {\n        //           parent = \"ROOT\";\n        //         }\n        //         else {\n        //           parent = treeNode.parent.data.geoObjectType;\n        //         }\n        //       }\n\n        //       hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n        //     });\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n        //       svgGot.setPos(startPoint.x, startPoint.y, false);\n        //     });\n        //   }\n        //   else {\n        //     svgGot.setPos(startPoint.x, startPoint.y, false);\n        //   }\n\n        // }\n        // else {\n        //   svgGot.setPos(startPoint.x, startPoint.y, false);\n        // }\n          });\n\n      svgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n  }\n\n  public findGeoObjectTypeByCode(code: string): GeoObjectType {\n      for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n          let got: GeoObjectType = this.geoObjectTypes[i];\n\n          if (got.code === code) {\n              return got;\n          }\n      }\n  }\n\n  public findHierarchyByCode(code: string): HierarchyType {\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let ht: HierarchyType = this.hierarchies[i];\n\n          if (ht.code === code) {\n              return ht;\n          }\n      }\n  }\n\n  public findOrganizationByCode(code: string): Organization {\n      for (let i = 0; i < this.organizations.length; ++i) {\n          let org: Organization = this.organizations[i];\n\n          if (org.code === code) {\n              return org;\n          }\n      }\n  }\n\n  private addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n      this.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n          let got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n          let index = null;\n          for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n              if (got.relatedHierarchies[i] === hierarchyCode) {\n                  index = i;\n                  break;\n              }\n          }\n\n          if (index == null) {\n              got.relatedHierarchies.push(hierarchyCode);\n          }\n\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  private insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n      this.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  isRA(): boolean {\n      return this.authService.isRA();\n  }\n\n  isOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n      return this.isSRA || this.authService.isOrganizationRA(orgCode);\n  }\n\n  getTypesByOrg(org: Organization): GeoObjectType[] {\n      let orgTypes: GeoObjectType[] = [];\n\n      for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n          let geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n          if (geoObjectType.organizationCode === org.code) {\n              orgTypes.push(geoObjectType);\n          }\n      }\n\n      return orgTypes;\n  }\n\n  getHierarchiesByOrg(org: Organization): HierarchyType[] {\n      let orgHierarchies: HierarchyType[] = [];\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchy: HierarchyType = this.hierarchies[i];\n\n          if (hierarchy.organizationCode === org.code) {\n              orgHierarchies.push(hierarchy);\n          }\n      }\n\n      return orgHierarchies;\n  }\n\n  public refreshAll(desiredHierarchy: HierarchyType) {\n    // Clear the types to then refresh\n      this.geoObjectTypes = [];\n\n      this.registryService.init().then(response => {\n          this.localizeService.setLocales(response.locales);\n\n          this.setGeoObjectTypes(response.types);\n\n          this.organizations = response.organizations;\n\n          this.organizations.forEach(org => {\n              if (this.isOrganizationRA(org.code)) {\n                  this.userOrganization = org.code;\n              }\n          });\n\n          if (!this.authService.isSRA()) {\n              let myorg = this.authService.getMyOrganizations();\n\n              let pos = response.organizations.findIndex(org => {\n                  return org.code === myorg[0];\n              });\n\n              if (pos >= 0) {\n                  Utils.arrayMove(response.organizations, pos, 0);\n              }\n          }\n\n          let pos = this.getGeoObjectTypePosition(\"ROOT\");\n          if (pos) {\n              this.geoObjectTypes.splice(pos, 1);\n          }\n\n          this.setHierarchies(response.hierarchies);\n\n          this.setNodesOnInit(desiredHierarchy);\n\n          this.updateViewDatastructures();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public setGeoObjectTypes(types: GeoObjectType[]): void {\n    // Set group parent types\n      this.setAbstractTypes(types);\n\n    // Set GeoObjectTypes that aren't part of a group.\n      types.forEach(type => {\n          if (!type.isAbstract) {\n              if (!type.superTypeCode) {\n                  this.geoObjectTypes.push(type);\n              }\n          }\n      });\n\n    // Sort aphabetically because all other types to add will be children in a group.\n      this.geoObjectTypes.sort((a, b) => {\n          if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n          else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n          else return 0;\n      });\n\n    // Add group children\n      types.forEach(type => {\n          if (!type.isAbstract) {\n              if (type.superTypeCode && type.superTypeCode.length > 0) {\n                  for (let i = 0; i < this.geoObjectTypes.length; i++) {\n                      let setType = this.geoObjectTypes[i];\n                      if (type.superTypeCode === setType.code) {\n                          this.geoObjectTypes.splice(i + 1, 0, type);\n                      }\n                  }\n              }\n          }\n      });\n  }\n\n  private setAbstractTypes(types: GeoObjectType[]): void {\n      types.forEach(type => {\n          if (type.isAbstract) {\n              this.geoObjectTypes.push(type);\n          }\n      });\n  }\n\n  public updateViewDatastructures(): void {\n      this.hierarchiesByOrg = [];\n      this.typesByOrg = [];\n\n      for (let i = 0; i < this.organizations.length; ++i) {\n          let org: Organization = this.organizations[i];\n\n          this.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n          this.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n      }\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n          got.canDrag = this.calculateCanDrag(got);\n          got.relatedHierarchies = this.calculateRelatedHierarchies(got);\n      });\n\n      this.onFilterChange();\n  }\n\n  public excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n      return (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n  }\n\n  public excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n      return (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n  }\n\n  private setNodesOnInit(desiredHierarchy: HierarchyType): void {\n      let index = -1;\n\n      if (desiredHierarchy != null) {\n          index = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n      } else if (this.hierarchies.length > 0) {\n          index = 0;\n      }\n\n      if (index > -1) {\n          const hierarchy = this.hierarchies[index];\n\n          this.setCurrentHierarchy(hierarchy);\n\n          this.renderTree();\n      }\n  }\n\n  private getHierarchy(hierarchyId: string): HierarchyType {\n      let target: HierarchyType = null;\n      this.hierarchies.forEach(hierarchy => {\n          if (hierarchyId === hierarchy.code) {\n              target = hierarchy;\n          }\n      });\n\n      return target;\n  }\n\n  private setHierarchies(data: HierarchyType[]): void {\n      let hierarchies: HierarchyType[] = [];\n      data.forEach((hierarchyType, index) => {\n          if (hierarchyType.rootGeoObjectTypes.length > 0) {\n              hierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n                  this.processHierarchyNodes(rootGeoObjectType);\n              });\n          }\n\n          hierarchies.push(hierarchyType);\n      });\n\n      this.hierarchies = hierarchies;\n\n      this.hierarchies.sort((a, b) => {\n          if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n          else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n          else return 0;\n      });\n  }\n\n  private processHierarchyNodes(node: HierarchyNode) {\n      if (node != null) {\n          node.label = this.getHierarchyLabel(node.geoObjectType);\n\n          node.children.forEach(child => {\n              this.processHierarchyNodes(child);\n          });\n      }\n  }\n\n  private getHierarchyLabel(geoObjectTypeCode: string): string {\n      let label: string = null;\n      this.geoObjectTypes.forEach(function(gOT) {\n          if (gOT.code === geoObjectTypeCode) {\n              label = gOT.label.localizedValue;\n          }\n      });\n\n      return label;\n  }\n\n  public handleOnMenu(node: any, $event: any): void {\n      if (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n          this.contextMenuService.show.next({\n              contextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n              event: $event,\n              item: node\n          });\n          $event.preventDefault();\n          $event.stopPropagation();\n      } else {\n          $event.preventDefault();\n          $event.stopPropagation();\n      }\n  }\n\n  public treeNodeOnClick(node: any, $event: any): void {\n      node.treeModel.setFocusedNode(node);\n\n      if (node.treeModel.isExpanded(node)) {\n          node.collapse();\n      } else {\n          node.treeModel.expandAll();\n      }\n  }\n\n  public hierarchyOnClick(event: any, item: HierarchyType) {\n      this.setCurrentHierarchy(item);\n      this.renderTree();\n  }\n\n  public createHierarchy(): void {\n      this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n\n      (<CreateHierarchyTypeModalComponent> this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n          this.hierarchies.push(data);\n\n          this.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n              let nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n              let nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n              if (nameA < nameB) {\n                  return -1; // nameA comes first\n              }\n\n              if (nameA > nameB) {\n                  return 1; // nameB comes first\n              }\n\n              return 0; // names must be equal\n          });\n\n          this.updateViewDatastructures();\n      });\n  }\n\n  public deleteHierarchyType(obj: HierarchyType): void {\n      this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true\n      });\n      this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n      this.bsModalRef.content.data = obj.code;\n      this.bsModalRef.content.type = \"DANGER\";\n      this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n      (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n          this.removeHierarchyType(data);\n      });\n  }\n\n  public editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n      this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n      this.bsModalRef.content.edit = true;\n      this.bsModalRef.content.readOnly = readOnly;\n      this.bsModalRef.content.hierarchyType = obj;\n      this.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n          let pos = this.getHierarchyTypePosition(data.code);\n\n          this.hierarchies[pos].label = data.label;\n          this.hierarchies[pos].description = data.description;\n          this.hierarchies[pos].progress = data.progress;\n          this.hierarchies[pos].acknowledgement = data.acknowledgement;\n          this.hierarchies[pos].disclaimer = data.disclaimer;\n          this.hierarchies[pos].useConstraints = data.useConstraints;\n          this.hierarchies[pos].accessConstraints = data.accessConstraints;\n          this.hierarchies[pos].contact = data.contact;\n          this.hierarchies[pos].phoneNumber = data.phoneNumber;\n          this.hierarchies[pos].email = data.email;\n\n          this.updateViewDatastructures();\n\n          if (this.currentHierarchy.code === data.code) {\n              this.setCurrentHierarchy(this.hierarchies[pos]);\n\n              this.renderTree();\n          }\n      });\n  }\n\n  setCurrentHierarchy(hierarchyType: HierarchyType): void {\n      this.currentHierarchy = hierarchyType;\n  }\n\n  isPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n    // return hierarchy.isPrimary;\n      return hierarchy.code === this.currentHierarchy.code;\n  }\n\n  public removeHierarchyType(code: string): void {\n      this.hierarchyService.deleteHierarchyType(code).then(response => {\n          let pos = this.getHierarchyTypePosition(code);\n          this.hierarchies.splice(pos, 1);\n          this.updateViewDatastructures();\n\n          if (this.hierarchies.length > 0) {\n              this.setCurrentHierarchy(this.hierarchies[0]);\n          } else {\n              this.currentHierarchy = null;\n          }\n\n          this.renderTree();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean, org: Organization): void {\n      this.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n      this.bsModalRef.content.init(org, this.geoObjectTypes, groupSuperType, isAbstract);\n\n      this.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n          data.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n          this.refreshAll(this.currentHierarchy);\n      });\n  }\n\n  public deleteGeoObjectType(obj: GeoObjectType): void {\n      this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true\n      });\n      this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n      this.bsModalRef.content.data = obj.code;\n      this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.bsModalRef.content.type = ModalTypes.danger;\n\n      (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n          this.removeGeoObjectType(data);\n      });\n  }\n\n  public removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n      this.registryService.deleteGeoObjectType(code).then(response => {\n          let pos = this.getGeoObjectTypePosition(code);\n          this.geoObjectTypes.splice(pos, 1);\n\n          this.refreshAll(this.currentHierarchy);\n      }).catch((err: HttpErrorResponse) => {\n          if (errCallback != null) {\n              errCallback(err);\n          }\n          this.error(err);\n      });\n  }\n\n  public manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n      this.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"manage-geoobjecttype-modal\"\n      });\n\n      geoObjectType.attributes.sort((a, b) => {\n          if (a.label.localizedValue < b.label.localizedValue) return -1;\n          else if (a.label.localizedValue > b.label.localizedValue) return 1;\n          else return 0;\n      });\n      this.bsModalRef.content.geoObjectType = geoObjectType;\n      this.bsModalRef.content.readOnly = readOnly;\n\n      (<ManageGeoObjectTypeModalComponent> this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n          if (data.isAbstract) {\n              this.refreshAll(this.currentHierarchy);\n          } else {\n              const position = this.getGeoObjectTypePosition(data.code);\n\n              if (position !== -1) {\n                  this.geoObjectTypes[position] = data;\n              }\n\n        // Update all of the hierarchies for the new geo object type\n              this.updateViewDatastructures();\n\n              this.hierarchies.forEach((hierarchyType: HierarchyType) => {\n                  this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n              });\n\n        // Update the current hierarchy view\n              if (this.currentHierarchy != null) {\n                  this.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n              }\n\n              this.renderTree();\n          }\n      });\n  }\n\n  private getHierarchyTypePosition(code: string): number {\n      for (let i = 0; i < this.hierarchies.length; i++) {\n          let obj = this.hierarchies[i];\n          if (obj.code === code) {\n              return i;\n          }\n      }\n  }\n\n  private getGeoObjectTypePosition(code: string): number {\n      for (let i = 0; i < this.geoObjectTypes.length; i++) {\n          let obj = this.geoObjectTypes[i];\n          if (obj.code === code) {\n              return i;\n          }\n      }\n\n      return null;\n  }\n\n  public refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n      this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchy = this.hierarchies[i];\n\n          if (hierarchy.code === hierarchyType.code) {\n              this.hierarchies[i] = hierarchyType;\n\n              this.setCurrentHierarchy(hierarchyType);\n          }\n      }\n\n      this.updateViewDatastructures();\n\n      this.renderTree();\n  }\n\n  public removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n      const that = this;\n\n      this.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n          let got = that.findGeoObjectTypeByCode(gotCode);\n\n          let index = null;\n          for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n              if (got.relatedHierarchies[i] === hierarchyType.code) {\n                  index = i;\n                  break;\n              }\n          }\n\n          if (index != null) {\n              got.relatedHierarchies.splice(index, 1);\n          }\n\n          that.refreshPrimaryHierarchy(hierarchyType);\n      }).catch((err: HttpErrorResponse) => {\n          if (errCallback != null) {\n              errCallback(err);\n          }\n\n          this.error(err);\n      });\n  }\n\n  public isActive(item: HierarchyType) {\n      return this.currentHierarchy === item;\n  }\n\n  onFilterChange(): void {\n      const label = this.filter.toLowerCase();\n\n      this.filteredHierarchiesByOrg = [];\n      this.filteredTypesByOrg = [];\n\n      this.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n          const filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n              const index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n              return (index !== -1);\n          });\n\n          this.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n      });\n\n      this.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n          const filtered = item.types.filter((type: GeoObjectType) => {\n              const index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n              return (index !== -1);\n          });\n\n          this.filteredTypesByOrg.push({ org: item.org, types: filtered });\n      });\n\n      setTimeout(() => { this.registerDragHandlers(); }, 500);\n  }\n\n  handleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n      this.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  handleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n      this.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public importTypes(): void {\n      this.bsModalRef = this.modalService.show(ImportTypesModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n\n      this.bsModalRef.content.init(this.organizations);\n\n      this.bsModalRef.content.onNodeChange.subscribe(data => {\n      // Reload the page\n          this.refreshAll(null);\n      });\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"type.permissions.includes('WRITE')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false, typeByOrg.org)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!type.permissions.includes('WRITE') && type.permissions.includes('READ')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': (currentHierarchy != null && hierarchy.code === currentHierarchy.code), 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n        <div *ngIf=\"isSRA\" style=\"text-align: center;padding: 10px 0;\">\n          <button (click)=\"importTypes()\" type=\"button\" class=\"btn btn-primary\" style=\"margin-bottom:20px;min-width:45%;\">\n            <localize key=\"hierarchy.sidebar.importTypes\"></localize>\n          </button>                \n        </div>                \n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\">\n                      <div *ngIf=\"isOrganizationRA(currentHierarchy.organizationCode, true)\" id=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n                      </div>\n                      <div *ngIf=\"!isOrganizationRA(currentHierarchy.organizationCode, true)\">\n                          <p class=\"upload-text\">\n                              <localize key=\"hierarchy.content.emptyHierarchy\"></localize>\n                          </p>\n                      </div>\n                    </div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"NodeTooltip\" class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-form\">\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                      <label>\n                        <localize key=\"hierarchy.nodeTooltip.hierarchy\"></localize>\n                      </label>\n                    </div>\n                    <div class=\"holder\">\n                      <label id=\"hierarchyLabel\"></label>\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from \"@angular/core\";\nimport { Classification } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { ClassificationFieldModalComponent } from \"./classification-field-modal.component\";\n\n@Component({\n    selector: \"classification-field\",\n    templateUrl: \"./classification-field.component.html\",\n    styleUrls: []\n})\nexport class ClassificationFieldComponent implements OnInit, OnDestroy {\n\n    @Input() classificationType: string;\n    @Input() rootCode: string;\n\n    @Input() name: string;\n    @Input() disabled: boolean = false;\n    @Input() customStyles: string = \"\";\n    @Input() classNames: string = \"\";\n    @Input() container: string = null;\n\n    @Input() value: { code: string, label: LocalizedValue } = null;\n\n    @Output() valueChange = new EventEmitter<{ code: string, label: LocalizedValue }>();\n\n    loading: boolean = false;\n    text: string = \"\";\n\n    typeahead: Observable<Object> = null;\n    subscription: Subscription = null;\n\n    constructor(\n        private modalService: BsModalService,\n        private service: ClassificationService) { }\n\n    ngOnInit(): void {\n        this.typeahead = new Observable((observer: Observer<Object>) => {\n            this.service.search(this.classificationType, this.rootCode, this.text).then(results => {\n                observer.next(results);\n            });\n        });\n\n        if (this.value != null) {\n            this.text = this.value.label.localizedValue;\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    typeaheadOnSelect(match: TypeaheadMatch): void {\n        if (match != null) {\n            const item: Classification = match.item;\n            this.text = item.displayLabel.localizedValue;\n\n            if (this.value == null || this.value.code !== item.code) {\n                this.setValue({ code: item.code, label: item.displayLabel });\n            }\n        } else if (this.value != null) {\n            this.setValue(null);\n        }\n    }\n\n    setValue(value: { code: string, label: LocalizedValue }): void {\n        this.value = value;\n        this.valueChange.emit(this.value);\n    }\n\n    onViewTree(): void {\n        const bsModalRef = this.modalService.show(ClassificationFieldModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = bsModalRef.content.init(this.classificationType, this.rootCode, this.disabled, this.value, classification => {\n            this.text = classification.displayLabel.localizedValue;\n            this.setValue({ code: classification.code, label: classification.displayLabel });\n        });\n    }\n\n    onTextChange(): void {\n        if (this.value != null && (this.text == null || this.text.length === 0)) {\n            this.setValue(null);\n        }\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.displayLabel.localizedValue }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"input-group\">\n\n  <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n    [style]=\"customStyles\" [name]=\"name\" [disabled]=\"disabled\" [(ngModel)]=\"text\"\n    [class]=\"classNames\"    \n    [typeaheadAsync]=\"true\"\n    [typeahead]=\"typeahead\"\n    (change)=\"onTextChange()\"\n    (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" (typeaheadLoading)=\"loading = $event\"\n    [ngClass]=\"{'inline-loading':loading}\" [typeaheadOptionsLimit]=\"7\"\n    [typeaheadItemTemplate]=\"customItemTemplate\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\"\n    [container]=\"container\"\n    >\n\n  <span class=\"input-group-addon clickable addon-alert\" (click)=\"onViewTree()\">\n    <i class=\"fa fa-ellipsis-v\" aria-hidden=\"true\"></i>\n  </span>\n</div>","import { ChangeType } from \"@registry/model/constants\";\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime, GeoObjectType, HierarchyOverTime, ValueOverTime } from \"@registry/model/registry\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { DateService, LocalizationService } from \"@shared/service\";\nimport { Subject } from \"rxjs\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\n\nexport class ChangeRequestEditor {\n\n    changeRequest: ChangeRequest;\n\n    // eslint-disable-next-line no-undef\n    attributeEditors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[];\n\n    geometryAttributeType: AttributeType;\n\n    parentAttributeType: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    geoObjectType: GeoObjectType;\n\n    hierarchies: HierarchyOverTime[];\n\n    private _isValid: boolean;\n\n    onChangeSubject : Subject<ChangeType> = new Subject<ChangeType>();\n\n    localizationService: LocalizationService;\n\n    dateService: DateService;\n\n    registryService: RegistryService;\n\n    geomService: GeometryService;\n\n    constructor(changeRequest: ChangeRequest, geoObject: GeoObjectOverTime, geoObjectType: GeoObjectType, hierarchies: HierarchyOverTime[], geometryAttributeType: AttributeType, parentAttributeType: AttributeType, localizationService: LocalizationService, dateService: DateService, registryService: RegistryService, geomService: GeometryService) {\n        this.changeRequest = changeRequest;\n        this.geoObject = geoObject;\n        this.geoObjectType = geoObjectType;\n        this.geometryAttributeType = geometryAttributeType;\n        this.parentAttributeType = parentAttributeType;\n        this.hierarchies = hierarchies;\n        this.localizationService = localizationService;\n        this.dateService = dateService;\n        this.registryService = registryService;\n        this.geomService = geomService;\n\n        this.attributeEditors = this.generateAttributeEditors();\n        this.validate();\n    }\n\n    private generateAttributeEditors() {\n        let geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n        let editors = [];\n\n        let attrs = this.geoObjectType.attributes.slice(); // intentionally a shallow copy\n        attrs = attrs.filter(attr => geoObjectAttributeExcludes.indexOf(attr.code) === -1);\n        attrs.push(this.geometryAttributeType);\n        attrs.push(this.parentAttributeType);\n\n        attrs.forEach(attr => {\n            if (attr.code !== \"_PARENT_\") {\n                if (attr.isChangeOverTime) {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, null);\n\n                    editors.push(editor);\n                } else {\n                    let editor = new StandardAttributeCRModel(attr, this.geoObject, this.changeRequest);\n\n                    editors.push(editor);\n                }\n            } else {\n                this.hierarchies.forEach(hierarchy => {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, hierarchy);\n\n                    editors.push(editor);\n                });\n            }\n        });\n\n        return editors;\n    }\n\n    public hasChanges(): boolean {\n        let hasChanges = false;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (attributeEditor.hasChanges()) {\n                hasChanges = true;\n            }\n        });\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    public validate(skipExists: boolean = false): boolean {\n        this._isValid = true;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (!skipExists || attributeEditor.attribute.code !== \"exists\") {\n                attributeEditor.validate(true);\n\n                if (!attributeEditor.isValid()) {\n                    this._isValid = false;\n                }\n            }\n        });\n\n        return this._isValid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.geoObject.attributes[attributeCode]) {\n            let index = this.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    findEditorForValueOverTime(oid: string): ChangeRequestChangeOverTimeAttributeEditor {\n        for (let i = 0; i < this.attributeEditors.length; ++i) {\n            let editor = this.attributeEditors[i];\n\n            if (editor instanceof ChangeRequestChangeOverTimeAttributeEditor && editor.getEditor(oid) != null) {\n                return editor;\n            }\n        }\n    }\n\n    public getEditorForAttribute(attribute: AttributeType, hierarchy: HierarchyOverTime = null): ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel {\n        let indexOf = this.attributeEditors.findIndex(editor => (!editor.attribute.isChangeOverTime || (hierarchy == null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy == null) || ((editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy != null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy.code === hierarchy.code)) && editor.attribute.code === attribute.code);\n\n        if (indexOf === -1) {\n            return null;\n        } else {\n            return this.attributeEditors[indexOf];\n        }\n    }\n\n    public getEditors(): (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] {\n        return this.attributeEditors;\n    }\n\n    public onChange(type: ChangeType) {\n        this.onChangeSubject.next(type);\n    }\n\n    public existsAtDate(date: string) {\n        let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.geoObjectType, \"exists\");\n        let existEditors = (this.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n\n        let valLen = existEditors.length;\n        for (let j = 0; j < valLen; ++j) {\n            let editor: ValueOverTimeCREditor = existEditors[j];\n\n            if (editor.startDate != null && editor.endDate != null && !editor.isDelete() && editor.value === true && this.dateService.between(date, editor.startDate, editor.endDate)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { DatePipe } from \"@angular/common\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError, ValueOverTime } from \"@registry/model/registry\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\n@Component({\n    selector: \"geoobject-editor\",\n    templateUrl: \"./geoobject-editor.component.html\",\n    styleUrls: [\"./geoobject-editor.component.css\"],\n    providers: [DatePipe]\n})\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    geoObject: GeoObjectOverTime;\n\n    //    /*\n    //     * GeoObject Geometry Editor\n    //     */\n    //    @ViewChild( \"geometryEditor\" ) geometryEditor;\n    //\n    //    areGeometriesValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    constructor(private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate(votArray: ValueOverTime[], startDate: string): any {\n        for (let i: number = 0; i < votArray.length; ++i) {\n            if (votArray[i].startDate === startDate) {\n                return votArray[i];\n            }\n        }\n\n        return null;\n    }\n\n    setMasterListId(id: string) {\n        this.masterListId = id;\n    }\n\n    setOnSuccessCallback(func: Function) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew(typeCode: string, dateStr: string, isGeometryEditable: boolean) {\n        this.isNewGeoObject = true;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.hierarchies = retJson.hierarchies;\n        });\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError(importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0) {\n            this.hierarchies = importError.object.parents;\n        } else {\n            this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n                this.hierarchies = retJson.hierarchies;\n            });\n        }\n\n        this.geoObject = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n\n        this.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n            let config = {\n                historyId: historyId,\n                importErrorId: importError.id,\n                resolution: \"APPLY_GEO_OBJECT\",\n                parentTreeNode: hierarchies,\n                geoObject: geoObject,\n                isNew: importError.object.isNew\n            };\n\n            this.registryService.submitErrorResolve(config)\n                .then(() => {\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n        };\n    }\n\n\n\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting(code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean): void {\n        this.isNewGeoObject = false;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject(code, typeCode);\n        this.fetchGeoObjectType(typeCode);\n        this.fetchHierarchies(code, typeCode);\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject(code: string, typeCode: string) {\n        this.registryService.getGeoObjectOverTime(code, typeCode).then(geoObject => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(geoObject)).attributes);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then(locales => {\n            this.localizeService.setLocales(locales);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchGeoObjectType(code: string) {\n        this.registryService.getGeoObjectTypes([code], null)\n            .then(geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n\n                if (this.geoObject != null) {\n                    this.geoObject.geoObjectType = this.geoObjectType;\n                }\n\n                if (!this.geoObjectType.isGeometryEditable) {\n                    //                    this.areGeometriesValid = true;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                // eslint-disable-next-line no-console\n                console.log(err);\n            });\n    }\n\n    private fetchHierarchies(code: string, typeTypeCode: string) {\n        this.registryService.getHierarchiesForGeoObject(code, typeTypeCode)\n            .then((hierarchies: any) => {\n                this.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    getTypeAheadObservable(text, typeCode) {\n        return Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(text, typeCode).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, ptn: ParentTreeNode): void {\n        this.registryService.getGeoObjectByCode(e.item.code, ptn.geoObject.properties.type)\n            .then(geoObject => {\n                ptn.geoObject = geoObject;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    canSubmit(): boolean {\n        return this.attributeEditor && this.attributeEditor.isValid() &&\n            (this.isNewGeoObject || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        this.bsModalRef.hide();\n\n        if (this.submitFunction == null) {\n            /*\n                this.registryService.applyGeoObjectEdit(this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes)\n                    .then(() => {\n    \n                        if (this.onSuccessCallback != null) {\n                            this.onSuccessCallback();\n                        }\n    \n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                    */\n        } else {\n            this.submitFunction(this.geoObject, this.hierarchies, this.attributeEditor);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\">\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"this.geoObjectType && geoObject && hierarchies\"\n            #attributeEditor \n            [geoObjectType]=\"this.geoObjectType\"\n            [postGeoObject]=\"this.geoObject\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isGeometryInlined]=\"true\"\n            [hierarchies]=\"hierarchies\"\n            [readOnly]=\"false\">\n        </geoobject-shared-attribute-editor>\n\n        <!--\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n        -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!canSubmit()\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Layer } from \"@registry/service/layer-data-source\";\nimport { LocalizedValue, PageResult } from \"@shared/model/core\";\nimport { GeoObject, GeoObjectType } from \"./registry\";\n\nexport class VersionMetadata {\n\n    master: boolean;\n    visibility: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n\n}\n\nexport class ListVersionMetadata {\n\n    oid?: string;\n    listMetadata?: VersionMetadata;\n    geospatialMetadata?: VersionMetadata;\n\n}\n\nexport class ListTypeVersion extends ListVersionMetadata {\n\n    displayLabel: string;\n    typeCode: string;\n    orgCode: string;\n    listEntry: string;\n    listType: string;\n    forDate: string;\n    createDate: string;\n    publishDate: string;\n    attributes: any[];\n    isGeometryEditable: boolean;\n    locales?: string[];\n    shapefile?: boolean;\n    isAbstract?: boolean;\n    superTypeCode?: string;\n    refreshProgress?: any;\n    working: boolean;\n    isMember?: boolean;\n    versionNumber: number;\n    subtypes?: { label: string, code: string }[];\n    collapsed?: boolean;\n    curation?: any;\n    period?: {\n        type: string,\n        value: any\n    };\n\n}\n\nexport class ListTypeEntry {\n\n    displayLabel: string;\n    oid: string;\n    typeCode: string;\n    orgCode: string;\n    listType: string;\n    forDate: string;\n    period?: {\n        type: string,\n        value: any\n    };\n\n    working: ListTypeVersion;\n    versions?: ListTypeVersion[];\n    showAll?: boolean;\n\n}\n\nexport class ListMetadata {\n\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n\n}\n\nexport class ListType {\n\n    oid?: string;\n    code: string;\n    organization: string;\n    listType: string;\n    write?: boolean;\n    read?: boolean;\n    exploratory?: boolean;\n    typeCode: string;\n    superTypeCode?: string;\n    typeLabel?: string;\n    typePrivate?: boolean;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n    subtypes?: { label: string, code: string }[];\n    subtypeHierarchies?: any[];\n    hierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n    includeLatLong?: boolean;\n\n    listMetadata: ListMetadata;\n    geospatialMetadata: ListMetadata;\n\n    // Attributes for the subtypes\n    validOn?: string;\n    publishingStartDate?: string;\n    frequency?: string;\n    intervalJson?: { startDate: string, endDate: string, readonly?: string, oid?: string }[]\n\n    entries?: ListTypeEntry[];\n    filter?: {\n        attribute: string,\n        operation: string,\n        value: any,\n        id: string\n    }[];\n\n}\n\nexport class ListTypeByType {\n\n    orgCode: string;\n    orgLabel: string;\n    typeCode: string;\n    typeLabel: string;\n    geometryType: string;\n    write: boolean;\n    private: boolean;\n    lists: ListType[];\n\n}\n\nexport class ContextLayer {\n\n    constructor(oid: string, dataSourceType: string, legendLabel: string, rendered: boolean, color: string, forDate?: string, versionNumber?: number) {\n        this.oid = oid;\n        this.dataSourceType = dataSourceType;\n        this.legendLabel = legendLabel;\n        this.rendered = rendered;\n        this.color = color;\n        this.forDate = forDate;\n        this.versionNumber = versionNumber;\n    }\n\n    oid: string;\n    dataSourceType: string;\n    legendLabel: string;\n    rendered: boolean;\n    color: string;\n    forDate?: string;\n    versionNumber?: number;\n\n}\n\nexport class ListVersion {\n\n    oid: string;\n    forDate: string;\n    versionNumber: number;\n    layer?: Layer;\n\n}\n\nexport class ContextList {\n\n    oid: string;\n    label: string;\n    versions: ListVersion[];\n    open?: boolean;\n\n}\n\nexport class ListTypeGroup {\n\n    typeCode: string;\n    typeLabel: LocalizedValue;\n    lists: ContextList[];\n\n}\n\nexport class ListOrgGroup {\n\n    orgCode: string;\n    orgLabel: LocalizedValue;\n    types: ListTypeGroup[];\n\n}\n\nexport class LayerRecord {\n\n    recordType: string;\n    edit: boolean;\n\n    // Attributes required for the geo object properties panel\n    type?: GeoObjectType;\n    typeCode?: string;\n    code?: string;\n    forDate?: string;\n\n    // Attributes required for the list row properties panel\n    typeLabel?: LocalizedValue;\n    version?: string;\n    attributes?: any[];\n    data?: any;\n\n    geoObject?: GeoObject;\n    bbox?: any;\n\n}\n\nexport class CurationProblem {\n\n    resolution: string;\n    historyId: string;\n    type: string;\n    id: string;\n    typeCode?: string;\n    goCode?: string;\n    goUid?: string;\n    selected?: boolean;\n\n}\n\nexport class CurationJob {\n\n    status: string;\n    lastRun: string;\n    lastRunBy: string;\n    historyId: string;\n    jobId: string;\n    workTotal: number;\n    workProgress: number;\n    exception?: {\n        type: string,\n        message: string\n    };\n\n    page?: PageResult<CurationProblem>\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { HierarchyType, HierarchyGroupedTypeView } from \"@registry/model/hierarchy\";\nimport { TreeEntity } from \"@registry/model/registry\";\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class HierarchyService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getHierarchyTypes(types: any): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"types\", JSON.stringify(types));\n\n        return this.http\n            .get<HierarchyType[]>(registry.contextPath + \"/cgr/hierarchytype/get-all\", { params: params })\n            .toPromise();\n    }\n\n    getHierarchyGroupedTypes(): Promise<HierarchyGroupedTypeView[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<HierarchyGroupedTypeView[]>(registry.contextPath + \"/hierarchy/groupedTypes\", { params: params })\n            .toPromise();\n    }\n\n    addChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/add\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/insertBetweenTypes\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/remove\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/create\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/update\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteHierarchyType(code: string): Promise<TreeEntity> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>(registry.contextPath + \"/cgr/hierarchytype/delete\", { code: code }, { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/setInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, inheritedHierarchyTypeCode: inheritedHierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/removeInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from \"@registry/model/io\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    importSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport(configuration: ImportConfiguration): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/cancel-import\", JSON.stringify({ configuration: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    importShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    listGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"includeAbstractTypes\", includeAbstractTypes.toString());\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>(registry.contextPath + \"/cgr/geoobjecttype/list-types\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean, includeChild: boolean = false): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        params = params.set(\"includeInheritedTypes\", includeInheritedTypes.toString());\r\n        params = params.set(\"includeChild\", includeChild.toString());\r\n\r\n        return this.http\r\n            .get<Location[]>(registry.contextPath + \"/cgr/geoobjecttype/get-ancestors\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-subtype-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/geo-synonym/createGeoEntitySynonym\", JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geo-synonym/deleteGeoEntitySynonym\", JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"mdAttributeId\", mdAttributeId);\r\n        params = params.set(\"text\", text);\r\n        params = params.set(\"limit\", limit);\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>(registry.contextPath + \"/uploader/getClassifierSuggestions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    createTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/uploader/createClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym(synonymId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ synonymId: synonymId });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/uploader/deleteClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from \"@shared/service\";\n\nimport { AllLocaleInfo } from \"@registry/model/localization-manager\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>(registry.contextPath + \"/localization/getNewLocaleInformation\")\n            .toPromise();\n    }\n\n    installLocale(language: string, country: string, variant: string): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if (language != null) {\n            params = params.set(\"language\", language);\n        }\n\n        if (country != null) {\n            params = params.set(\"country\", country);\n        }\n\n        if (variant != null) {\n            params = params.set(\"variant\", variant);\n        }\n\n        return this.http\n            .get<void>(registry.contextPath + \"/localization/installLocale\", { params: params })\n            .toPromise();\n    }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from \"@registry/model/registry\";\nimport { AttributeConfigInfo } from \"@registry/model/sync\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<SynchronizationConfig>>(registry.contextPath + \"/synchronization-config/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<SynchronizationConfig> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<AttributeConfigInfo[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalId\", externalId);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<AttributeConfigInfo[]>(registry.contextPath + \"/synchronization-config/get-custom-attr\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalSystemId\", externalSystemId);\n        params = params.set(\"hierarchyTypeCode\", hierarchyTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-config-for-es\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/apply\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {};\n\n        if (oid != null) {\n            params = { oid: oid };\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(registry.contextPath + \"/synchronization-config/edit\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    run(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/run\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJobs(oid: string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        //        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExportScheduledJob>>(registry.contextPath + \"/synchronization-config/get-jobs\", { params: params })\n            //            .pipe(finalize(() => {\n            //                this.eventService.complete();\n            //            }))\n            .toPromise();\n    }\n\n    getFhirExportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-export-implementations\", { params: params })\n            .toPromise();\n    }\n\n    getFhirImportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-import-implementations\", { params: params })\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";import { PageResult } from \"@shared/model/core\";\r\n declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    getMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"orderBy\", \"createDate\");\r\n        params = params.set(\"pageNum\", pageNum.toString());\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"whereStatus\", whereStatus);\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/tasks/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    completeTask(taskId: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/complete\", JSON.stringify({ id: taskId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setTaskStatus(taskId: string, status: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/setTaskStatus\", JSON.stringify({ id: taskId, status: status }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType, GeoObject } from \"./registry\";\nimport { HierarchyType } from \"./hierarchy\";\n\nexport class LocationInformation {\n    types: GeoObjectType[];\n    hierarchies: HierarchyType[];\n    hierarchy?: string;\n    entity?: GeoObject;\n    childType?: string;\n    geojson: {\n        type: string;\n        features: GeoObject[]\n    }\n}\n\nexport class ModalState {\n    SEARCH: number;\n    VIEW: number;\n}\n\nexport const PANEL_SIZE_STATE = {\n    MINIMIZED: 0,\n    WINDOWED: 1,\n    FULLSCREEN: 2\n};\n","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { AttributeType, AttributeTermType, AttributeDecimalType, ManageGeoObjectTypeModalState, AttributedType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { AttributeTypeService } from \"@registry/service\";\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"define-attribute-modal-content\",\n    templateUrl: \"./define-attribute-modal-content.component.html\",\n    styleUrls: [\"./define-attribute-modal-content.css\"]\n})\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: AttributedType;\n    @Input() service: AttributeTypeService;\n\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n    @Output() geoObjectTypeChange: EventEmitter<AttributedType> = new EventEmitter<AttributedType>();\n\n    message: string = null;\n    newAttribute: AttributeType = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.create.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.attributeInputComponent) {\n            this.attributeInputComponent.animate();\n        }\n    }\n\n    handleOnSubmit(): void {\n        this.service.addAttributeType(this.geoObjectType.code, this.newAttribute).then(data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setAttribute(type: string): void {\n        if (type === \"term\") {\n            this.newAttribute = new AttributeTermType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else if (type === \"float\") {\n            this.newAttribute = new AttributeDecimalType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else {\n            this.newAttribute = new AttributeType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        let isAttrValid: boolean = false;\n\n        if (this.attributeInputComponent) {\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n\n        if (isAttrValid) {\n            return true;\n        }\n\n        return false;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'classification'}\" (click)=\"setAttribute('classification')\">\n                                <localize key=\"data.type.label.classification\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [isNew]=\"true\" [excludeDescription]=\"false\" [type]=\"newAttribute.type\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState, AttributedType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { AttributeTypeService, RegistryService } from \"@registry/service\";\n\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"edit-attribute-modal-content\",\n    templateUrl: \"./edit-attribute-modal-content.component.html\",\n    styleUrls: [\"./edit-attribute-modal-content.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]]\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: AttributedType;\n    @Input() attribute: AttributeType = null;\n    @Input() service: AttributeTypeService;\n\n    @Output() geoObjectTypeChange: EventEmitter<AttributedType> = new EventEmitter<AttributedType>();\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.service.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n            for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n                let attr = this.geoObjectType.attributes[i];\n                if (attr.code === data.code) {\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.stateChange.emit(state);\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    back(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>:\n                        {{attribute.label.localizedValue}}\n                    </h1>\n\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.text\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.integer\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.float\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.boolean\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.date\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.term\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'classification'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.classification\"></localize>\n                    </h4>\n\n                </div>\n\n\n\n                <fieldset>\n\n                    <attribute-input [isNew]=\"false\"\n                        [excludeDescription]=\"attribute.type === 'term' ? true : false\" [type]=\"attribute.type\"\n                        [(attribute)]=\"attribute\">\n                    </attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\"\n                        [geoObjectType]=\"geoObjectType\" (stateChange)=\"onModalStateChange($event)\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <!-- <div class=\"label-holder\"> \n                        </div> -->\n                            <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"manage-term-options\",\n    templateUrl: \"./manage-term-options.component.html\",\n    styleUrls: [\"./manage-term-options.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                    style({ opacity: 0 }),\n                    animate(\"500ms\", style({ opacity: 1 }))\n                ]\n                ),\n                transition(\n                    \":leave\", [\n                    style({ opacity: 1 }),\n                    animate(\"0ms\", style({ opacity: 0 }))\n\n                ]\n                )]\n        )\n    ]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType;\n\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    termOption: Term;\n    state: string = \"none\";\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.termOption.code && this.termOption.code.length > 0) {\n            // If code has a space\n            if (this.termOption.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            // If label is only spaces\n            for (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n                if (this.termOption.label.localeValues[i].value.replace(/\\s/g, \"\").length === 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n            return false;\n        }\n\n        return false;\n    }\n\n    addTermOption(): void {\n        this.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            this.attribute.rootTerm.children.push(data);\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    deleteTermOption(termOption: Term): void {\n        this.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n            if (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n                this.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n            }\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    removeTermOption(termOption: Term): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + termOption.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteTermOption(termOption);\n        });\n    }\n\n    editTermOption(termOption: Term): void {\n        const state = {\n            state: GeoObjectTypeModalStates.editTermOption,\n            attribute: this.attribute,\n            termOption: JSON.parse(JSON.stringify(termOption))\n        };\n\n        this.stateChange.emit(state);\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from \"@shared/model/modal\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"edit-term-option-input\",\n    templateUrl: \"./edit-term-option-input.component.html\",\n    styleUrls: [],\n    animations: [\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                    style({ opacity: 0 }),\n                    animate(\"500ms\", style({ opacity: 1 }))\n                ]\n                ),\n                transition(\n                    \":leave\", [\n                    style({ opacity: 1 }),\n                    animate(\"0ms\", style({ opacity: 0 }))\n                ]\n                )]\n        )\n    ]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType = null;\n    @Input() termOption: Term;\n\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), active: true, enabled: true }\n\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService,\n                private localizeService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            // Update the term definition on the attribute\n            const index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n            if (index !== -1) {\n                this.attribute.rootTerm.children[index] = data;\n            }\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import * as d3 from \"d3\";\n\nexport function calculateTextWidth(text: string, fontSize: number): number {\n    let svg = d3.select(\"#svg\");\n\n    let textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n    let textEl = textCalcGroup.append(\"text\")\n        .attr(\"x\", -5000)\n        .attr(\"y\", -5000)\n        .attr(\"font-size\", fontSize)\n        .text(text);\n\n    let bbox = textEl.node().getBBox();\n\n    d3.select(\".g-text-calc\").remove();\n\n    return bbox.width + 2; // +2 is for padding. I caught this truncating just ever so slightly\n}\n\nexport function svgPoint(x: number, y: number) {\n    let svg: any = d3.select(\"#svg\").node();\n    let pt = svg.createSVGPoint();\n\n    pt.x = x;\n    pt.y = y;\n\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n    return point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) ||\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) &&\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n    return { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.code === 'invalid' ? false : attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component({\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n})\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() property: string = 'type';\n    @Input() includeChild: boolean = false;\n\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor(private service: IOService) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors(this.configuration[this.property].code, this.configuration.hierarchy, true, this.includeChild).then(locations => {\n            this.configuration.locations = locations;\n        });\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit(this.configuration);\n        this.stateChange.emit('NEXT');\n    }\n\n    onBack(): void {\n        this.stateChange.emit('BACK');\n    }\n\n    onCancel(): void {\n        this.stateChange.emit('CANCEL');\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component({\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n})\nexport class SpreadsheetModalComponent {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n    property: string;\n    includeChild: boolean;\n\n    constructor(private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router) {\n    }\n\n    init(configuration: ImportConfiguration, property: string = 'type', includeChild: boolean = false): void {\n        this.configuration = configuration;\n        this.property = property;\n        this.includeChild = includeChild;\n    }\n\n    onStateChange(event: string): void {\n        if (event === 'BACK') {\n            this.handleBack();\n        }\n        else if (event === 'NEXT') {\n            this.handleNext();\n        }\n        else if (event === 'CANCEL') {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if (this.state === 'LOCATION') {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if (this.state === 'MAP') {\n            if (!this.configuration.postalCode) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if (this.state === 'LOCATION') {\n            this.handleSubmit();\n        }\n        else if (this.state === 'LOCATION-PROBLEM') {\n\n            if (this.configuration.termProblems != null) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if (this.state === 'TERM-PROBLEM') {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet(this.configuration).then(config => {\n\n            if (config.locationProblems != null) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if (config.termProblems != null) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                });\n                this.bsModalRef.content.message = this.localizeService.decode(\"data.import.go.to.scheduled.jobs.confirm.message\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"data.import.go.to.scheduled.jobs.button\");\n\n                (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                });\n\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport(this.configuration).then(response => {\n            this.bsModalRef.hide()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" [property]=\"property\" [includeChild]=\"includeChild\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, DateService } from \"@shared/service\";\n\nimport * as ColorGen from \"color-generator\";\nimport { RegistryService, ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { GeoObjectType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { GeoObjectLayerDataSource } from \"@registry/service/layer-data-source\";\nimport { Router } from \"@angular/router\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\n\n@Component({\n    selector: \"submit-change-request\",\n    templateUrl: \"./submit-change-request.component.html\",\n    styleUrls: [\"./submit-change-request.css\"]\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    geoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    loading: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor(private modalService: BsModalService, private registryService: RegistryService, private geomService: GeometryService,\n        private changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService,\n        private router: Router, private dateService: DateService, private cacheService: RegistryCacheService) {\n        this.dataSource = Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    ngOnInit(): void {\n        this.cacheService.getTypeCache().waitOnTypes().then((types: GeoObjectType[]) => {\n        // this.registryService.getGeoObjectTypes([], null).then(types => {\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                const type = types[i];\n                const orgCode = type.organizationCode;\n                const typeCode = type.superTypeCode != null && type.superTypeCode !== \"\" ? type.superTypeCode : type.code;\n\n                if (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort((a, b) => {\n                if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n                else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n                else return 0;\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public handleDateChange() {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n        } else {\n            this.forDate = null;\n        }\n    }\n\n    public onValidChange(newValid: boolean) {\n        if (this.geoObject == null) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading(e: boolean): void {\n        this.loading = e;\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n            this.geoObject = geoObject;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onNewChangeRequest() {\n        let dataSource = new GeoObjectLayerDataSource(this.registryService, this.geoObject.attributes.code, this.geoObject.attributes.type, this.dateStr);\n\n        let displayLabel = (this.geoObject.attributes[\"displayLabel\"].values && this.geoObject.attributes[\"displayLabel\"].values.length > 0) ? this.geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : this.geoObject.attributes.code;\n        let typeLabel = this.geoObjectType.label.localizedValue;\n        let sDate = this.dateStr == null ? \"\" : \" \" + this.dateService.formatDateForDisplay(this.dateStr);\n        let label = displayLabel + \" \" + sDate + \"(\" + typeLabel + \")\";\n\n        let layer = dataSource.createLayer(label, true, ColorGen().hexString());\n\n        this.geomService.zoomOnReady(layer.getId());\n        let layers = this.geomService.getDataSourceFactory().serializeLayers([layer]);\n\n        const params: any = { layers: JSON.stringify(layers) };\n\n        params.attrPanelOpen = true;\n        params.objectType = \"GEOOBJECT\";\n        params.type = this.geoObjectType.code;\n        params.code = this.geoObject.attributes.code;\n        params.date = this.dateStr;\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.geoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div style=\"margin-top:50px;margin-bottom:50px;background:#f7f7f7;width:100%;padding:10px;\">\n      <h3 style=\"margin-bottom: 20px;\"><localize key=\"change.request.search.for.geoobject.header\"></localize></h3>\n      <div class=\"row\">\n\n        <div class=\"col-md-3\">\n          <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>\n          <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\" [(ngModel)]=\"geoObjectType\" required>\n            <option>  </option>\n            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n          </select>\n        </div>\n        \n        <div class=\"col-md-3\">\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"!geoObjectType\" \n            [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" customStyles=\"width:100%\"></date-field>\n        </div>\n        \n        <div class=\"col-md-4\">\n          <localize key=\"change.request.search.for.geoobject.search.label\"></localize>\n          <input type=\"text\" [ngClass]=\"{'inline-loading':loading}\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" (typeaheadLoading)=\"changeTypeaheadLoading($event)\" [placeholder]=\"('masterlist.search' | localize) + '...'\" class=\"form-control\" autocomplete=\"off\">\n        </div>\n        \n        <div class=\"col-md-2\">\n          <label></label>\n           <!-- We cannot use the dataset-location-manager here because it pulls the tiles from the dataset (list) and we don't have a dataset. -->\n           <!-- <a *ngIf=\"preGeoObject && forDate\" [routerLink]=\"['/registry/dataset-location-manager', '123', preGeoObject.attributes.type, 'false', dateStr, preGeoObject.attributes.code, 'true']\" -->\n          \n           <a *ngIf=\"geoObject\" (click)=\"onNewChangeRequest()\" [routerLink]=\"['/registry/location-manager']\" [queryParams]=\"{type:geoObject.attributes.type, code:geoObject.attributes.code, pageContext:'DATA'}\">\n            <button class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n          </a>\n          <button *ngIf=\"!(geoObject)\" disabled=\"true\" class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n        </div>\n\n      </div>\n      \n    </div>\n  </div>\n</div>","import { Component, Input } from \"@angular/core\";\n\nimport { Step, StepConfig } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"step-indicator\",\n    templateUrl: \"./step-indicator.component.html\",\n    styleUrls: [\"./step-indicator.css\"]\n})\nexport class StepIndicatorComponent {\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"steps\")\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n    constructor() {\n        this._stepConfig = { steps: [] };\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { BusinessObject, BusinessType } from \"@registry/model/business-type\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class BusinessObjectService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    get(businessTypeCode: string, code: string): Promise<BusinessObject> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"businessTypeCode\", businessTypeCode);\n        params = params.append(\"code\", code);\n\n        this.eventService.start();\n\n        return this.http.get<BusinessObject>(registry.contextPath + \"/business-object/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getTypeAndObject(businessTypeCode: string, code: string): Promise<{type:BusinessType, object: BusinessObject}> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"businessTypeCode\", businessTypeCode);\n        params = params.append(\"code\", code);\n\n        this.eventService.start();\n\n        return this.http.get<{type:BusinessType, object: BusinessObject}>(registry.contextPath + \"/business-object/get-type-and-object\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { AttributeType, GeoObjectType, PRESENT } from \"@registry/model/registry\";\nimport Utils from \"@registry/utility/Utils\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\n\n@Component({\n    selector: \"list-type-publish-modal\",\n    templateUrl: \"./publish-modal.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypePublishModalComponent implements OnInit {\n\n    currentDate: Date = new Date();\n    message: string = null;\n    onListTypeChange: Subject<ListType> = null;\n\n    list: ListType = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    tab: string = \"LIST\";\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    gap: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private iService: IOService,\n        private lService: LocalizationService,\n        private cacheService: RegistryCacheService,\n        private bsModalRef: BsModalRef,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    init(listByType: ListTypeByType, onListTypeChange: Subject<ListType>, list?: ListType): void {\n        this.onListTypeChange = onListTypeChange;\n        this.readonly = !listByType.write;\n\n        const cache = this.cacheService.getTypeCache();\n\n        cache.waitOnTypes().then(types => {\n            this.geoObjectType = cache.getTypeByCode(listByType.typeCode);\n        });\n\n        if (list == null) {\n            this.isNew = true;\n            this.list = {\n                oid: null,\n                listType: \"single\",\n                organization: \"\",\n                typeCode: \"\",\n                typeLabel: \"\",\n                displayLabel: this.lService.create(),\n                description: this.lService.create(),\n                code: listByType.typeCode + \"_\" + Math.floor(Math.random() * 999999),\n                hierarchies: [],\n                subtypeHierarchies: [],\n                listMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: \"\",\n                    collectionDate: \"\",\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: \"\",\n                    organization: \"\",\n                    telephoneNumber: \"\",\n                    email: \"\"\n                },\n                geospatialMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: \"\",\n                    collectionDate: \"\",\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: \"\",\n                    organization: \"\",\n                    telephoneNumber: \"\",\n                    email: \"\",\n                    topicCategories: \"\",\n                    placeKeywords: \"\",\n                    updateFrequency: \"\",\n                    lineage: \"\",\n                    languages: \"\",\n                    scaleResolution: \"\",\n                    spatialRepresentation: \"vector\",\n                    referenceSystem: \"EPSG4326\",\n                    reportSpecification: \"\",\n                    distributionFormat: \"SHAPEFILE\"\n                }\n\n            };\n\n            this.list.typeCode = listByType.typeCode;\n            this.list.typeLabel = listByType.typeLabel;\n            this.list.organization = listByType.orgCode;\n\n            if (listByType.geometryType === \"MULTIPOINT\" || listByType.geometryType === \"POINT\") {\n                this.list.includeLatLong = true;\n            }\n\n            this.iService.getHierarchiesForType(this.list.typeCode, true).then(hierarchies => {\n                this.list.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.iService.getHierarchiesForSubtypes(this.list.typeCode, false).then(hierarchies => {\n                this.list.subtypeHierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.list = list;\n            this.isNew = false;\n\n            if (this.list.listType === \"interval\") {\n                this.list.intervalJson.forEach(interval => {\n                    interval.readonly = interval.endDate !== PRESENT ? \"BOTH\" : \"START\";\n                    interval.oid = uuid();\n                });\n            }\n        }\n    }\n\n    getIsDisabled(event): boolean {\n        let elClasses = event.target.classList;\n        for (let i = 0; i < elClasses.length; i++) {\n            let c = elClasses[i];\n            if (c === \"disabled\") {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.list).then(response => {\n            this.onListTypeChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getAttributeForFilter(filter: { attribute: string, comparator: string, value: any }): AttributeType {\n        if (filter.attribute != null && filter.attribute !== \"\") {\n            const attributeType = this.geoObjectType.attributes.find(attributeType => attributeType.code === filter.attribute);\n\n            return attributeType;\n        }\n\n        return null;\n    }\n\n    onNewFilter(): void {\n        if (this.list.filter == null) {\n            this.list.filter = [];\n        }\n\n        this.list.filter.push({\n            attribute: \"\",\n            operation: \"EQ\",\n            value: null,\n            id: uuid()\n        });\n    }\n\n    removeFilter(index: number): void {\n        this.list.filter.splice(index, 1);\n    }\n\n    onNewInterval(): void {\n        if (this.list.intervalJson == null) {\n            this.list.intervalJson = [];\n        }\n\n        this.list.intervalJson.push({\n            startDate: \"\",\n            endDate: \"\",\n            oid: uuid()\n        });\n    }\n\n    removeInterval(index: number): void {\n        this.list.intervalJson.splice(index, 1);\n\n        this.handleDateChange();\n    }\n\n    handleDateChange(): void {\n        if (this.list.listType === \"single\") {\n            this.valid = (this.list.validOn != null && this.list.validOn.length > 0);\n        } else if (this.list.listType === \"incremental\") {\n            this.valid = (this.list.publishingStartDate != null && this.list.publishingStartDate.length > 0);\n        } else if (this.list.listType === \"interval\") {\n            this.valid = this.list.intervalJson.map(interval => {\n                return ((interval.startDate != null && interval.startDate.length > 0) &&\n                    (interval.endDate != null && interval.endDate.length > 0) &&\n                    !this.dateService.after(interval.startDate, interval.endDate));\n            }).reduce((a, b) => a && b);\n\n            // Sort the entries\n            this.list.intervalJson = this.list.intervalJson.sort((a, b) => {\n                const d1: Date = new Date(a.startDate);\n                const d2: Date = new Date(b.startDate);\n\n                return d1 < d2 ? 1 : -1;\n            });\n\n            // Check for overlaps\n            this.list.intervalJson.forEach((element, index) => {\n                if (index > 0) {\n                    const future = this.list.intervalJson[index - 1];\n\n                    if (future.startDate && future.endDate && element.startDate && element.endDate) {\n                        let s1: any = new Date(future.startDate);\n                        let e1: any = new Date(future.endDate);\n                        let s2: any = new Date(element.startDate);\n                        let e2: any = new Date(element.endDate);\n\n                        if (Utils.dateRangeOverlaps(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                            this.valid = false;\n                        }\n                    }\n                }\n            });\n\n            if (this.valid) {\n                // Check for gap\n                this.gap = false;\n\n                this.list.intervalJson.forEach((element, index) => {\n                    if (index > 0) {\n                        const future = this.list.intervalJson[index - 1];\n\n                        if (future.startDate && element.endDate) {\n                            let e1: any = new Date(element.endDate);\n                            let s2: any = new Date(future.startDate);\n\n                            if (Utils.hasGap(e1.getTime(), s2.getTime())) {\n                                this.gap = true;\n                            }\n                        }\n                    }\n                });\n            }\n        } else {\n            this.valid = true;\n        }\n    }\n\n    getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-type=\"type\">\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.metadata.title\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n<!--\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.collection.date\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <date-field [(value)]=\"metadata.collectionDate\" [classNames]=\"['form-control']\" label=\"\"\n                [inputName]=\"'collectionDate'\" [allowFutureDates]=\"false\" name=\"collectionDate\" [disable]=\"readonly\">\n            </date-field>\n        </div>\n    </div>\n-->    \n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"true\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"list != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <!--         <div class=\"heading text-center\"> -->\n        <!--             <h1 *ngIf=\"isNew\"> -->\n        <!--                 <localize key=\"type.publish.title\"></localize> -->\n        <!--             </h1> -->\n        <!--             <h1 *ngIf=\"!isNew\"> -->\n        <!--                 {{list.displayLabel.localizedValue}} -->\n        <!--                 <localize key=\"type.publish.view.title\"></localize> -->\n        <!--             </h1> -->\n        <!--         </div> -->\n\n        <div class=\"text-center\">\n            <h2>\n                <localize key=\"type.publish.configuration.header\"></localize>\n            </h2>\n            <hr>\n        </div>\n\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\" style=\"text-align: center;\">\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'single'\"\n                            [value]=\"'single'\" [(ngModel)]=\"list.listType\" name=\"single\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.single.date\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'incremental'\"\n                            [value]=\"'incremental'\" [(ngModel)]=\"list.listType\" name=\"incremental\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.incremental.series\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'interval'\"\n                            [value]=\"'interval'\" [(ngModel)]=\"list.listType\" name=\"interval\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.interval.series\"></localize>\n                        </span>\n                    </label>\n\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.metadata.title\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.listAbstract\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeLabel\" name=\"typeLabel\" type=\"text\" class=\"form-control\"\n                            disabled />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeCode\" name=\"typeCode\" type=\"text\" class=\"form-control\" disabled />\n                    </div>\n                </div>\n\n                <div *ngIf=\"list.includeLatLong !== undefined\" class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"list.type.includeLatLong\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <boolean-field [(value)]=\"list.includeLatLong\" label=\"\" [disable]=\"false\"></boolean-field>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.hierarchies.length > 0\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\">\n                        <localize key=\"masterlist.parents\"></localize>\n                    </div>\n                </div>\n\n                <div *ngFor=\"let hierarchy of list.hierarchies\">\n                    <ng-container *ngIf=\"hierarchy.parents.length > 0\">\n                        <div class=\"row-holder\">\n                            <div class=\"label-holder\">\n                                <label> {{hierarchy.label}} </label>\n                            </div>\n                            <div class=\"holder\">\n                                <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                                    <!-- <div class=\"holder\"> -->\n\n                                    <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                        <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                        <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\"\n                                            [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly}\"\n                                            style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                            <span></span>\n                                        </div>\n\n                                        <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                        <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                                    </div>\n                                    <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                                    <!-- </div> -->\n                                </div>\n                            </div>\n                        </div>\n                    </ng-container>\n                </div>\n\n                <div *ngIf=\"list.subtypeHierarchies.length > 0\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"listlist.subtypeHierarchies\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"row\" *ngFor=\"let hierarchy of list.subtypeHierarchies\">\n                                <!-- <div class=\"holder\"> -->\n\n                                <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                    <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                    <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\"\n                                        [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly}\"\n                                        style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                        <span></span>\n                                    </div>\n\n                                    <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.listType === 'single'\">\n                    <div class=\"label-holder\">\n                        <label for=\"validOn\">\n                            <localize key=\"list.type.valid.on\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <date-field [(value)]=\"list.validOn\" [classNames]=\"['form-control']\" label=\"\"\n                            [inputName]=\"'validOn'\" [allowFutureDates]=\"false\" name=\"listValidOn\" [required]=\"true\"\n                            [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n                    </div>\n                </div>\n\n                <ng-container *ngIf=\"list.listType === 'incremental'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.frequency\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"list.frequency\"\n                                [disabled]=\"readonly || !isNew\" required #frequency=\"ngModel\">\n                                <option></option>\n                                <option value=\"ANNUAL\">\n                                    <localize key=\"georegistry.frequency.annual\"></localize>\n                                </option>\n                                <option value=\"BIANNUAL\">\n                                    <localize key=\"georegistry.frequency.biannual\"></localize>\n                                </option>\n                                <option value=\"QUARTER\">\n                                    <localize key=\"georegistry.frequency.quarter\"></localize>\n                                </option>\n                                <option value=\"MONTHLY\">\n                                    <localize key=\"georegistry.frequency.monthly\"></localize>\n                                </option>\n                            </select>\n                            <div *ngIf=\"!list.frequency && (frequency.dirty)\" class=\"form-input-validation-error-message-wrapper\">\n                            \t<p class=\"error-message\">\n                                \t<localize key=\"list.change.frequency\"></localize>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.publishingStartDate\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                                <date-text [date]=\"list.publishingStartDate\"></date-text>\n                            </span>\n                            <date-field *ngIf=\"!readonly\" [(value)]=\"list.publishingStartDate\"\n                                [classNames]=\"['form-control']\" label=\"\" [inputName]=\"'publishingStartDate'\"\n                                [allowFutureDates]=\"false\" name=\"listPublishingStartDate\" [required]=\"true\"\n                                [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container *ngIf=\"list.listType === 'interval'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"list.type.intervals\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div *ngFor=\"let interval of list.intervalJson; let i = index;\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-5\">\n                                        <label>\n                                            <localize key=\"io.startDate\"></localize>\n                                        </label>\n                                    </div>\n                                    <div class=\"col-md-5\">\n                                        <label>\n                                            <localize key=\"io.endDate\"></localize>\n                                        </label>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-5\">\n                                        <date-field [(value)]=\"interval.startDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'startDate-' + interval.oid\"\n                                            [allowFutureDates]=\"false\" [required]=\"true\"\n                                            [disable]=\"readonly || (!isNew && interval.readonly != null)\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                    <div class=\"col-md-5\">\n                                        <date-field [(value)]=\"interval.endDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'endDate-' + interval.oid\" [allowInfinity]=\"true\"\n                                            [required]=\"true\"\n                                            [disable]=\"readonly || (!isNew && interval.readonly == 'BOTH')\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                    <div class=\"col-md-2\">\n                                        <i class=\"fa fa-times delete-btn clickable\"\n                                            *ngIf=\"(isNew || interval.readonly == null)\" (click)=\"removeInterval(i)\"\n                                            [title]=\"'button.delete.helptext' | localize\">\n                                        </i>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\" *ngIf=\"!readonly\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\" (click)=\"onNewInterval()\" class=\"btn btn-primary\"\n                                        role=\"button\" style=\"margin:15px 0;\">\n                                        <localize key=\"changeovertime.manageVersions.summaryKey.NEW\"></localize>\n                                    </button>\n                                    <div *ngIf=\"!valid\" style=\"float:none;\" class=\"error-message\">\n                                        <localize key=\"list.type.bad.interval.dates\"></localize>\n                                    </div>\n                                    <div *ngIf=\"gap\" style=\"float:none;\" class=\"warning-text\">\n                                        <localize key=\"manage.versions.gap.message\"></localize>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container\n                    *ngIf=\"geoObjectType != null && (isNew || (list.filter != null  && list.filter.length > 0))\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"button.filter.helptext\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div *ngFor=\"let filter of list.filter; let j = index;\">\n\n                                <div class=\"row\">\n                                    <div class=\"col-md-3\">\n                                        <select class=\"select-area\" [name]=\"'filter' + filter.id\"\n                                            [(ngModel)]=\"filter.attribute\" [disabled]=\"readonly || !isNew\" required>\n                                            <option></option>\n                                            <ng-container *ngFor=\"let attribute of geoObjectType.attributes;\">\n                                                <option *ngIf=\"attribute.isChangeOverTime && attribute.type !== 'local'\"\n                                                    [value]=\"attribute.code\">\n                                                    {{attribute.label.localizedValue}}\n                                                </option>\n                                            </ng-container>\n                                        </select>\n                                    </div>\n                                    <ng-container *ngIf=\"getAttributeForFilter(filter) as attributeType\">\n                                        <div class=\"col-md-3\">\n                                            <select class=\"select-area\" [name]=\"'filter-operation' + filter.id\"\n                                                [(ngModel)]=\"filter.operation\" [disabled]=\"readonly || !isNew\" required>\n                                                <option value=\"EQ\">\n                                                    <localize key=\"list.type.equals\"></localize>\n                                                </option>\n                                                <option *ngIf=\"attributeType.type === 'classification'\" value=\"EXACT\">\n                                                    <localize key=\"list.type.exact\"></localize>\n                                                </option>\n                                            </select>\n                                        </div>\n\n                                        <div class=\"col-md-4\">\n                                            <ng-container [ngSwitch]=\"attributeType.type\">\n                                                <ng-container *ngSwitchCase=\"'classification'\">\n                                                    <classification-field\n                                                        [classificationType]=\"attributeType.classificationType\"\n                                                        [name]=\"'filter-value' + filter.id\" container=\"body\"\n                                                        [(value)]=\"filter.value\" [disabled]=\"!isNew\">\n                                                    </classification-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'term'\">\n                                                    <select [name]=\"'filter-value' + filter.id\" class=\"select-area\"\n                                                        [(ngModel)]=\"filter.value\" [disabled]=\"!isNew\">\n                                                        <option value=\"\"></option>\n                                                        <option\n                                                            *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\"\n                                                            [value]=\"option.code\">{{option.label.localizedValue}}\n                                                        </option>\n                                                    </select>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'boolean'\">\n                                                    <boolean-field [disable]=\"!isNew\" [(value)]=\"filter.value\"\n                                                        localizeLabelKey=\"change.request.boolean.option.true\">\n                                                    </boolean-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'date'\">\n                                                    <date-field [(value)]=\"filter.value\" [classNames]=\"['form-control']\"\n                                                        label=\"\" [inputName]=\"'filter-value' + filter.id\"\n                                                        [disable]=\"!isNew\">\n                                                    </date-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'float'\">\n                                                    <input [(ngModel)]=\"filter.value\"\n                                                        [name]=\"'filter-value' + filter.id\" type=\"number\"\n                                                        class=\"form-control\" [disabled]=\"!isNew\" [required]=\"false\" />\n                                                </ng-container>\n                                                <ng-container *ngSwitchDefault>\n                                                    <input [(ngModel)]=\"filter.value\"\n                                                        [name]=\"'filter-value' + filter.id\" type=\"text\"\n                                                        class=\"form-control\" [disabled]=\"!isNew\" [required]=\"false\" />\n                                                </ng-container>\n\n                                            </ng-container>\n                                        </div>\n                                    </ng-container>\n                                    <div class=\"col-md-2\">\n                                        <i class=\"fa fa-times delete-btn clickable\" *ngIf=\"isNew\"\n                                            (click)=\"removeFilter(i)\" [title]=\"'button.delete.helptext' | localize\">\n                                        </i>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\" *ngIf=\"isNew && !readonly\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\" (click)=\"onNewFilter()\" class=\"btn btn-primary\" role=\"button\"\n                                        style=\"margin:15px 0;\">\n                                        <localize key=\"changeovertime.manageVersions.summaryKey.NEW\"></localize>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n\n                <div class=\"inner-col-content-wrapper\" *ngIf=\"isNew\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n\n                            <div class=\"text-center\">\n                                <h2>\n                                    <localize key=\"type.publish.metadata.header\"></localize>\n                                </h2>\n                                <hr>\n                            </div>\n\n                            <div class=\"label-holder\"></div>\n\n                            <div class=\"holder\">\n                                <div class=\"form-group\" style=\"text-align: center;\">\n\n                                    <div class=\"btn-group geobject-editor-tab-holder\">\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.list\"></localize>\n                                            </span>\n                                        </label>\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\"\n                                            (click)=\"handleTab('GEOSPATIAL')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.geospatial\"></localize>\n                                            </span>\n                                        </label>\n                                    </div>\n\n                                </div>\n                            </div>\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.listMetadata, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.geospatialMetadata, type:'geospatial'}\">\n                            </ng-container>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ErrorHandler } from '@shared/component';\nimport { Organization } from '@shared/model/core';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService, LocalizationService } from '@shared/service';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n  selector: 'import-types-modal',\n  templateUrl: './import-types-modal.component.html',\n  styleUrls: []\n})\nexport class ImportTypesModalComponent implements OnInit {\n\n  public organizations: Organization[] = [];\n  public orgCode: string;\n\n\n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n\n  @ViewChild('myFile')\n  fileRef: ElementRef;\n\n  message: string = null;\n\n  public onNodeChange: Subject<boolean>;\n\n  constructor(private eventService: EventService, private localizationService: LocalizationService, public bsModalRef: BsModalRef) {\n  }\n\n  ngOnInit(): void {\n    this.onNodeChange = new Subject();\n  }\n\n  init(organizations: Organization[]): void {\n    this.organizations = organizations;\n\n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/cgr/import-types'\n    };\n\n    this.uploader = new FileUploader(options);\n\n    this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n      form.append('orgCode', this.orgCode);\n    };\n    this.uploader.onBeforeUploadItem = (fileItem: any) => {\n      this.eventService.start();\n    };\n    this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n      this.fileRef.nativeElement.value = \"\";\n      this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n      this.onNodeChange.next(true);\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n      const error = JSON.parse(response)\n\n      this.error({ error: error });\n    }\n\n  }\n\n  onSelect(orgCode: string): void {\n    this.orgCode = orgCode;\n  }\n\n  onClick(): void {\n\n    if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error({\n        message: this.localizationService.decode('io.missing.file'),\n        error: {},\n      });\n    }\n  }\n\n\n  public error(err: any): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1> <localize key=\"hierarchy.sidebar.importTypes\"></localize> </h1>\n    </div> \n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"attribute.organization.label\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <select (change)=\"onSelect($event.target.value)\">\n              <option></option>\n              <option *ngFor=\"let organization of organizations\" value={{organization.code}}>{{organization.label.localizedValue}}</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"hierarchy.sidebar.xmlFile\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xml\" required /> \n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\"></div>\n          <div class=\"holder\">\n            <div class=\"button-holder\">\n              <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.cancel\"></localize>\n                </span>\n              </button>\n              <button type=\"submit\" (click)=\"onClick()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.ok\"></localize>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"create-hierarchy-type-modal\",\n    templateUrl: \"./create-hierarchy-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n\n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n    readOnly: boolean = false;\n\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            rootGeoObjectTypes: [],\n            organizationCode: \"\"\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n            // Filter out organizations they're not RA's of, unless we're readOnly.\n            if (!this.readOnly) {\n                this.organizations = [];\n\n                for (var i = 0; i < orgs.length; ++i) {\n                    if (this.auth.isOrganizationRA(orgs[i].code)) {\n                        this.organizations.push(orgs[i]);\n                    }\n                }\n            } else {\n                this.organizations = orgs;\n            }\n\n            if (!this.edit && this.organizations.length === 1) {\n                this.hierarchyType.organizationCode = this.organizations[0].code;\n                this.organizationLabel = this.organizations[0].label.localizedValue;\n            } else if (this.edit || this.readOnly) {\n                this.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getOrganizationLabelFromCode(orgCode: string) {\n        for (var i = 0; i < this.organizations.length; ++i) {\n            if (this.organizations[i].code === orgCode) {\n                return this.organizations[i].label.localizedValue;\n            }\n        }\n\n        console.log(\"Did not find org with code [\" + orgCode + \"]\");\n        return orgCode;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if (this.readOnly) {\n            this.bsModalRef.hide();\n            return;\n        }\n\n        if (this.edit) {\n            this.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize *ngIf=\"!edit\" key=\"hierarchy.management.create.hierarchy.title\"></localize>\n            <localize *ngIf=\"edit\" key=\"hierarchy.management.update.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> \n          <span  style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      \n      <localized-text [(value)]=\"hierarchyType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\" [disabled]=\"readOnly\"></localized-text>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.disclaimer\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.disclaimer\" name=\"disclaimer\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.accessConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.useConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      \n      <hr/>\n      \n      <div class=\"form-group\">\n        <h4>\n          <localize key=\"masterlist.contact\"></localize>\n        </h4>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.phoneNumber\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.phoneNumber\" name=\"phoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.email\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1 || form.invalid\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { GeoObjectLayerDataSource, GEO_OBJECT_DATA_SOURCE_TYPE, Layer, ListVectorLayerDataSource, LIST_VECTOR_SOURCE_TYPE, RelationshipVisualizionDataSource, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE, SearchLayerDataSource, SEARCH_DATASOURCE_TYPE, ValueOverTimeDataSource } from \"@registry/service/layer-data-source\";\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nexport class LayerGroup {\n\n    private groupName: string;\n\n    private label: string;\n\n    private layers: Layer[];\n\n    constructor(layers: Layer[], label: string) {\n        this.layers = layers;\n        this.label = label;\n    }\n\n    public getGroupName(): string {\n        return this.groupName;\n    }\n\n    public setGroupName(groupName: string) {\n        this.groupName = groupName;\n    }\n\n    public getLayers(): Layer[] {\n        return this.layers;\n    }\n\n    public setLayers(layers: Layer[]): void {\n        this.layers = layers;\n    }\n\n    public getLabel(): string {\n        return this.label;\n    }\n\n    public setLabel(label: string) {\n        this.label = label;\n    }\n\n}\n\nexport interface LayerSorter {\n\n    sortLayers(layers: Layer[]): Layer[];\n\n}\n\nexport class LayerGroupSorter implements LayerSorter {\n\n    private localService: LocalizationService;\n\n    public constructor(localService: LocalizationService) {\n        this.localService = localService;\n    }\n\n    public getLayerGroups(layers: Layer[]): LayerGroup[] {\n        let groups: LayerGroup[] = [];\n\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof SearchLayerDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.search\")));\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof GeoObjectLayerDataSource || l.dataSource instanceof ValueOverTimeDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.geoObject\")));\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof RelationshipVisualizionDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.relationship\")));\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof ListVectorLayerDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.list\")));\n\n        return groups.filter(g => g.getLayers().length > 0);\n    }\n\n    public sortLayers(layers: Layer[]): Layer[] {\n        let sorted = [];\n        let groups = this.getLayerGroups(layers);\n\n        groups.forEach(group => group.getLayers().forEach(l => sorted.push(l)));\n\n        return sorted;\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\n@Component({\n    selector: \"create-geoobjtype-modal\",\n    templateUrl: \"./create-geoobjtype-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organization: Organization = null;\n    message: string = null;\n    parents: GeoObjectType[];\n    hierarchyType: HierarchyType;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            geometryType: \"MULTIPOINT\",\n            isLeaf: false,\n            isGeometryEditable: true,\n            organizationCode: \"\",\n            attributes: []\n        };\n    }\n\n    init(organization: Organization, parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n        this.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\n        if (groupSuperType) {\n            this.geoObjectType.superTypeCode = groupSuperType.code;\n            this.geoObjectType.geometryType = groupSuperType.geometryType;\n            this.geoObjectType.isPrivate = groupSuperType.isPrivate;\n        }\n\n        // Filter out parents that are not abstract\n        this.parents = parents.filter(parent => parent.isAbstract);\n\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n        this.geoObjectType.organizationCode = this.organization.code;\n        this.organizationLabel = this.organization.label.localizedValue;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n            this.onGeoObjTypeCreate.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    toggleIsAbstract(): void {\n        this.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"geoObjectType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <label style=\"display: block;\">\n            <localize key=\"attribute.group.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n        \n          <label style=\"display: block;\">\n            <localize key=\"geoObjectType.attr.visibility.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"geoObjectType.superTypeCode != null\" [(value)]=\"geoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [disabled]=\"geoObjectType.superTypeCode != null && geoObjectType.superTypeCode != ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MIXED\">\n              <localize key=\"georegistry.geometry.mixed\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { ManageGeoObjectTypeModalState, GeoObjectType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-geoobjecttype-modal\",\n    templateUrl: \"./manage-geoobjecttype-modal.component.html\",\n    styleUrls: [\"./manage-geoobjecttype-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    message: string = null;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor(private service: RegistryService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the\n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next(data);\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\"\n    [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></geoobjecttype-input>\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\"\n    [service]=\"service\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\"\n    [attribute]=\"modalState.attribute\" [service]=\"service\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\">\n  </edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    (stateChange)=\"onModalStateChange($event)\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    [termOption]=\"modalState.termOption\" (stateChange)=\"onModalStateChange($event)\">\n  </edit-term-option-input>\n\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, AttributeType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"geoobjecttype-input\",\n    templateUrl: \"./geoobjecttype-input.component.html\",\n    styleUrls: [\"./geoobjecttype-input.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    \n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    editGeoObjectType: GeoObjectType;\n\n    organizationLabel: string;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"setGeoObjectType\")\n    set in(geoObjectType: GeoObjectType) {\n        if (geoObjectType) {\n            this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        }\n    }\n\n    message: string = null;\n\n    // modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizationService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\n        // this.geoObjectTypeManagementService.setModalState(this.modalState);\n\n        this.fetchOrganizationLabel();\n    }\n\n    defineAttributeModal(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    fetchOrganizationLabel(): void {\n        this.registryService.getOrganizations().then(orgs => {\n            for (let i = 0; i < orgs.length; ++i) {\n                if (orgs[i].code === this.editGeoObjectType.organizationCode) {\n                    this.organizationLabel = orgs[i].label.localizedValue;\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    manageAttributes(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageAttributes, attribute: \"\", termOption: \"\" });\n    }\n\n    // onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n    //     this.modalState = state;\n    // }\n\n    update(): void {\n        this.registryService.updateGeoObjectType(this.editGeoObjectType).then(geoObjectType => {\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n\n        // return false;\n\n        return true;\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"geoObjectType.attr.visibility.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"readOnly || geoObjectType.superTypeCode\" [(value)]=\"editGeoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MIXED\"><localize key=\"georegistry.geometry.mixed\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n<!--                             <ul class=\"list-group list-group-flush\"> -->\n<!--                                 <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li> -->\n<!--                             </ul> -->\n\n<!--                             <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\"> -->\n<!--                                 <localize key=\"modal.button.manageAttributes\"></localize> -->\n<!--                             </button> -->\n\n                        <div class=\"table-responsive\">\n                              <table class=\"table\">\n<!--                                   <thead> -->\n<!--                                       <tr> -->\n<!--                                           <th> -->\n<!--                                               <localize key=\"data.property.label.label\"></localize> -->\n<!--                                           </th> -->\n<!--                                           <th class=\"button-column-header\"> -->\n<!--                                               <localize key=\"data.property.label.actions\"></localize> -->\n<!--                                           </th> -->\n<!--                                       </tr> -->\n<!--                                   </thead> -->\n                                  <tbody>\n                                      <tr *ngFor=\"let attr of geoObjectType.attributes\" >\n                                          <td>{{attr.label.localizedValue}}</td>\n                                          <td class=\"button-column\" style=\"width: 60px;\">\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                                  [title]=\"'modal.button.edit' | localize\"></a>\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                                  [title]=\"'modal.button.remove' | localize\"></a>\n                                          </td>\n                                      </tr>\n                                  </tbody>\n                              </table>\n                          </div>\n                          \n                          <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                              <localize key=\"modal.button.add\"></localize>\n                          </i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Directive } from \"@angular/core\";\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from \"@angular/forms\";\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator(): ValidatorFn {\n    return (c: AbstractControl) => {\n        if (c.value) {\n            let isValid = c.value.indexOf(\" \") === -1;\n\n            if (isValid) {\n                return null;\n            } else {\n                return {\n                    geoObjectAttributeCode: {\n                        valid: false\n                    }\n                };\n            }\n        }\n    };\n}\n\n@Directive({\n    selector: \"[geoObjectAttributeCode][ngModel]\",\n    providers: [\n        // eslint-disable-next-line no-use-before-define\n        { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n    ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n\n    validator: ValidatorFn;\n\n    constructor() {\n        this.validator = validateGeoObjectAttributeCodeValidator();\n    }\n\n    validate(c: FormControl) {\n        return this.validator(c);\n    }\n\n}\n","import { Component, OnDestroy, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { TreeComponent, TreeNode } from \"@circlon/angular-tree-component\";\nimport { ContextMenuComponent, ContextMenuService } from \"ngx-contextmenu\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { Classification, ClassificationNode } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { PageResult } from \"@shared/model/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { timeout } from \"d3\";\n\nconst PAGE_SIZE: number = 100;\n\n// eslint-disable-next-line no-unused-vars\nenum NodeType {\n    // eslint-disable-next-line no-unused-vars\n    CLASSIFICATION = 0, LINK = 1\n}\n\nclass ClassificationTreeNode {\n\n    name: string;\n    code: string;\n    type: NodeType;\n    classification?: Classification;\n    hasChildren: boolean;\n    children?: ClassificationTreeNode[];\n    parent?: ClassificationTreeNode;\n    pageNumber?: number;\n\n}\n\n@Component({\n    selector: \"classification-field-modal\",\n    templateUrl: \"./classification-field-modal.component.html\",\n    styleUrls: []\n})\nexport class ClassificationFieldModalComponent implements OnDestroy {\n\n    message: string = null;\n\n    classificationType: string = null;\n    rootCode: string = null;\n\n    disabled: boolean = false;\n\n    select: Subject<Classification> = new Subject<Classification>();\n\n    nodes: ClassificationTreeNode[] = [];\n\n    /*\n     * Tree component\n     */\n    @ViewChild(TreeComponent)\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    options = {\n        idField: \"code\",\n        getChildren: (node: TreeNode) => {\n            return this.getChildren(node);\n        },\n        actionMapping: {\n            mouse: {\n                click: (tree: TreeComponent, node: TreeNode, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: TreeNode, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                }\n            }\n        },\n        allowDrag: false,\n        allowDrop: false,\n        animateExpand: true,\n        scrollOnActivate: true,\n        animateSpeed: 2,\n        animateAcceleration: 1.01\n    }\n\n    constructor(\n        private bsModalRef: BsModalRef,\n        private contextMenuService: ContextMenuService,\n        private service: ClassificationService\n    ) { }\n\n    init(classificationType: string, rootCode: string, disabled: boolean, value: { code: string }, observer: Observer<Classification>): Subscription {\n        this.classificationType = classificationType;\n        this.rootCode = rootCode;\n        this.disabled = disabled;\n\n        if (value != null) {\n            this.service.getAncestorTree(this.classificationType, this.rootCode, value.code, PAGE_SIZE).then(ancestor => {\n                this.nodes = [this.build(null, ancestor)];\n\n                timeout(() => {\n                    const node: TreeNode = this.tree.treeModel.getNodeById(value.code);\n\n                    if (node != null) {\n                        node.setActiveAndVisible();\n                    }\n                }, 100);\n            });\n        } else if (this.rootCode != null) {\n            this.service.get(this.classificationType, this.rootCode).then(classification => {\n                this.nodes = [{\n                    code: classification.code,\n                    name: classification.displayLabel.localizedValue,\n                    type: NodeType.CLASSIFICATION,\n                    classification: classification,\n                    hasChildren: true\n                }];\n            });\n        } else {\n            this.getChildren(null).then(nodes => {\n                this.nodes = nodes;\n            });\n        }\n\n        return this.select.subscribe(observer);\n    }\n\n    ngOnDestroy(): void {\n        this.select.unsubscribe();\n    }\n\n    getChildren(treeNode: TreeNode): Promise<ClassificationTreeNode[]> {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        const code = node != null ? node.classification.code : null;\n\n        return this.service.getChildren(this.classificationType, code, 1, PAGE_SIZE).then(page => {\n            const nodes = this.createNodes(node, page);\n\n            if (node != null) {\n                if (node.children == null) {\n                    node.children = [];\n                }\n\n                node.children.concat(nodes);\n            }\n\n            return nodes;\n        }).catch(ex => {\n            return [];\n        });\n    }\n\n    build(parent: ClassificationTreeNode, cNode: ClassificationNode): ClassificationTreeNode {\n        const node: ClassificationTreeNode = {\n            code: cNode.classification.code,\n            name: cNode.classification.displayLabel.localizedValue,\n            type: NodeType.CLASSIFICATION,\n            classification: cNode.classification,\n            hasChildren: true\n        };\n\n        if (cNode.children != null) {\n            const nodes: ClassificationTreeNode[] = cNode.children.resultSet.map(child => this.build(parent, child));\n\n            const page = cNode.children;\n\n            // Add page node if needed\n            if (page.count > page.pageNumber * page.pageSize) {\n                nodes.push({\n                    code: \"...\",\n                    name: \"...\",\n                    type: NodeType.LINK,\n                    hasChildren: false,\n                    pageNumber: page.pageNumber + 1,\n                    parent: parent\n                } as ClassificationTreeNode);\n            }\n\n            node.children = nodes;\n        }\n\n        return node;\n    }\n\n    createNodes(parent: ClassificationTreeNode, page: PageResult<Classification>): ClassificationTreeNode[] {\n        const nodes = page.resultSet.map(child => {\n            return {\n                code: child.code,\n                name: child.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: child,\n                hasChildren: true\n            } as ClassificationTreeNode;\n        });\n\n        // Add page node if needed\n        if (page.count > page.pageNumber * page.pageSize) {\n            nodes.push({\n                code: \"...\",\n                name: \"...\",\n                type: NodeType.LINK,\n                hasChildren: false,\n                pageNumber: page.pageNumber + 1,\n                parent: parent\n            } as ClassificationTreeNode);\n        }\n\n        return nodes;\n    }\n\n    handleOnMenu(node: TreeNode, $event: any): void {\n        if (!this.disabled) {\n            this.contextMenuService.show.next({\n                contextMenu: this.nodeMenuComponent,\n                event: $event,\n                item: node\n            });\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n    }\n\n    treeNodeOnClick(treeNode: TreeNode, $event: any): void {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        if (node != null && node.type === NodeType.LINK) {\n            if (treeNode.parent != null) {\n                const parentNode: ClassificationTreeNode = treeNode.parent.data;\n                const code = parentNode.classification.code;\n                const pageNumber = node.pageNumber;\n\n                this.service.getChildren(this.classificationType, code, pageNumber, PAGE_SIZE).then(page => {\n                    const nodes = this.createNodes(parentNode, page);\n\n                    parentNode.children = parentNode.children.filter(node => node.code !== \"...\");\n                    parentNode.children = parentNode.children.concat(nodes);\n\n                    this.tree.treeModel.update();\n                }).catch(ex => {\n                });\n            }\n        } else {\n            if (treeNode.isExpanded) {\n                treeNode.collapse();\n            } else {\n                treeNode.expand();\n            }\n\n            treeNode.setActiveAndVisible();\n        }\n    }\n\n    onSelect(treeNode: TreeNode): void {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        if (node.type === NodeType.CLASSIFICATION) {\n            this.select.next(node.classification);\n\n            this.bsModalRef.hide();\n        }\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<context-menu #nodeMenu menuClass=\"top-level\">\n    <ng-template contextMenuItem let-item (execute)=\"onSelect($event.item)\">\n        Select\n    </ng-template>\n</context-menu>\n\n<div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <tree-root #tree [options]=\"options\" [nodes]=\"nodes\"></tree-root>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"button-holder\">\n                    <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                        <localize key=\"io.back\"></localize>\n                    </button>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { AttributeTermType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"term-option-widget\",\n    templateUrl: \"./term-option-widget.component.html\",\n    styleUrls: [\"./term-option-widget.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType = null;\n\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    state: string = \"none\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n\n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n\n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" });\n    }\n\n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\n\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { SvgHierarchyNode } from \"./svg-hierarchy-node\";\nimport { calculateTextWidth } from \"./svg-util\";\nimport { INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL, HierarchyComponent, TREE_SCALE_FACTOR_X, TREE_SCALE_FACTOR_Y } from \"../hierarchy.component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nexport class SvgHierarchyType {\n\n    public static gotRectW: number = 150;\n    public static gotRectH: number = 25;\n    public static gotBodyFontSize: number = 8;\n    public static gotOptionsButtonFontSize: number = 12;\n\n    public static gotHeaderW: number = 150;\n    public static gotHeaderH: number = 14;\n    public static gotHeaderFontSize: number = 8;\n\n    public static MOUSE_HOVER_EVENT_ENTER = \"mouseenter\";\n\n    public static MOUSE_HOVER_EVENT_MOVE = \"mousemove\";\n\n    public static MOUSE_HOVER_EVENT_EXIT = \"mouseleave\";\n\n    hierarchyComponent: HierarchyComponent;\n\n    hierarchyType: HierarchyType;\n\n    svgEl: any;\n\n    d3Hierarchy: any;\n\n    d3Tree: any;\n\n    isPrimary: boolean;\n\n    tooltip: any;\n\n    public constructor(hierarchyComponent: HierarchyComponent, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        const hierarchyType = ht;\n\n        this.hierarchyComponent = hierarchyComponent;\n        this.hierarchyType = hierarchyType;\n        this.svgEl = svgEl;\n\n        this.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n        this.isPrimary = isPrimary;\n\n        this.d3Tree = d3.tree().nodeSize([SvgHierarchyType.gotRectW * TREE_SCALE_FACTOR_X, (SvgHierarchyType.gotRectH + SvgHierarchyType.gotHeaderH) * TREE_SCALE_FACTOR_Y]).separation((a, b) => 0.8)(this.d3Hierarchy);\n    }\n\n    public getD3Tree() {\n        return this.d3Tree;\n    }\n\n    public getCode(): string {\n        return this.hierarchyType.code;\n    }\n\n    public getNodeByCode(gotCode: string): SvgHierarchyNode {\n        let treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\n        if (treeNode == null) {\n            return null;\n        }\n\n        return new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService, this.authService);\n    }\n\n    public renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n        let bbox = hg.node().getBBox();\n\n        let colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        let headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        const headerFontSize: number = 10;\n        const iconWidth: number = 20;\n        const maxHierarchyLabelLength = 200;\n\n        let hierarchyLabelW: number = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize);\n        let hierarchyLabelH:number = headerFontSize * 2;\n        let hierarchyLabelY:number = bbox.y + headerFontSize * 1.6;\n        if (hierarchyLabelW > maxHierarchyLabelLength) {\n            hierarchyLabelW = maxHierarchyLabelLength;\n            hierarchyLabelH = headerFontSize * 3;\n            hierarchyLabelY = bbox.y + headerFontSize;\n        }\n\n        let lineWidth = bbox.width;\n        let textWidth = hierarchyLabelW + iconWidth;\n\n        if (textWidth > lineWidth) {\n            lineWidth = textWidth;\n        }\n\n        // Hierarchy icon (font awesome)\n        headerg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .style(\"font-family\", \"FontAwesome\")\n            .attr(\"fill\", \"grey\")\n            .attr(\"font-size\", 12)\n            .text(\"\\uf0e8\");\n\n        // Hierarchy display label\n        colHeader.append(\"foreignObject\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"x\", bbox.x + iconWidth)\n            .attr(\"y\", hierarchyLabelY)\n            .attr(\"width\", hierarchyLabelW)\n            .attr(\"height\", hierarchyLabelH)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"gray\")\n            // .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => this.hierarchyType.label.localizedValue);\n\n        // Line underneath the header\n        headerg.append(\"line\").classed(\"hierarchy-header-line\", true)\n            .attr(\"x1\", bbox.x)\n            .attr(\"y1\", bbox.y + headerFontSize)\n            .attr(\"x2\", bbox.x + lineWidth)\n            .attr(\"y2\", bbox.y + headerFontSize)\n            .attr(\"stroke\", \"grey\")\n            .attr(\"stroke-width\", .5);\n\n        let headerGBbox = headerg.node().getBBox();\n        headerg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n        // Col header label\n        colHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize + 2)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"grey\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .text(colHeaderLabel);\n\n        colHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n        return headerg;\n    }\n\n    getRelatedHierarchies(gotCode: string): string[] {\n        let got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n        if (got.relatedHierarchies == null) {\n            got.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n        }\n\n        let relatedHiers: string[] = got.relatedHierarchies;\n\n        let index = null;\n        for (let i = 0; i < relatedHiers.length; ++i) {\n            if (relatedHiers[i] === this.getCode()) {\n                index = i;\n            }\n        }\n\n        if (index != null) {\n            relatedHiers.splice(index, 1);\n        }\n\n        return relatedHiers;\n    }\n\n    private nodeMouseover(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 1);\n    }\n\n    private nodeMousemove(event: any, element: any, data:any) {\n        d3.select(\"#hierarchyLabel\").html(this.hierarchyType.label.localizedValue);\n        d3.select(\"#hierarchyCodeLabel\").html(this.hierarchyType.code);\n\n        d3.select(\"#geoObjectTypeLabel\").html(data.data.label);\n        d3.select(\"#geoObjectTypeCodeLabel\").html(data.data.geoObjectType);\n\n        d3.select(\"#hierarchyOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyType.organizationCode).label.localizedValue);\n        d3.select(\"#geoObjectTypeOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyComponent.findGeoObjectTypeByCode(data.data.geoObjectType).organizationCode).label.localizedValue);\n\n        let nodeTooltip: any = d3.select(\"#NodeTooltip\").node();\n        let nodeTooltipBbox: DOMRect = nodeTooltip.getBoundingClientRect();\n\n        let pos = { x: event.pageX, y: event.pageY };\n        const yPointerOffset: number = 50;\n        const xPointerOffset: number = 0;\n\n    // If overflow off bottom of page\n        if ((event.pageY + nodeTooltipBbox.height + yPointerOffset) > document.documentElement.scrollHeight) {\n      // render above mouse pointer\n            pos.y = event.pageY - nodeTooltipBbox.height - yPointerOffset;\n        }\n\n    // If overflow off right side of page\n        if ((event.pageX + nodeTooltipBbox.width + xPointerOffset) > document.documentElement.scrollWidth) {\n      // render to the left of the mouse pointer\n            pos.x = event.pageX - nodeTooltipBbox.width - xPointerOffset;\n        }\n\n        d3.select(\"#NodeTooltip\")\n            .style(\"left\", pos.x + \"px\")\n            .style(\"top\", pos.y + \"px\");\n    }\n\n    private nodeMouseleave(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 0)\n            .style(\"left\", \"-10000px\")\n            .style(\"top\", \"-10000px\");\n    }\n\n    public render() {\n        let that = this;\n        let descends: any = this.d3Tree.descendants();\n\n        d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").remove();\n        if (this.isPrimary) {\n            d3.select(\".g-hierarchy[data-primary=\\\"true\\\"]\").remove();\n        }\n\n        let hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n        hg.attr(\"font-family\", \"sans-serif\");\n\n        let gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n        // Edge\n        gtree.append(\"g\").classed(\"g-got-edge\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(this.d3Tree.links())\n            .join(\"path\")\n            // .attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n            .attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n                return \"M\" + d.source.x + \",\" + (d.source.y) +\n                    \"V\" + ((d.source.y + d.target.y) / 2) +\n                    \"H\" + d.target.x +\n                    \"V\" + (d.target.y);\n            });\n\n        // Header on square which denotes which hierarchy it's a part of\n        let gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n        gHeader.selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"rx\", 3)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) =>\n                d.data.inheritedHierarchyCode != null\n            )\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Write the name of the hierarchy on the header\n        gHeader.selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) =>\n                d.x - (SvgHierarchyType.gotHeaderW / 2)\n            )\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .style(\"text-align\", \"center\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"white\")\n            .style(\"height\", (SvgHierarchyType.gotHeaderH - 4) + \"px\")\n            .style(\"width\", SvgHierarchyType.gotHeaderW + \"px\")\n            .html(function(d: any) {\n                let name = d.data.inheritedHierarchyCode != null ? that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue : that.hierarchyType.label.localizedValue;\n                // eslint-disable-next-line no-unused-expressions\n                calculateTextWidth(name, SvgHierarchyType.gotHeaderFontSize) > (SvgHierarchyType.gotHeaderW - 5) ? name = name.substring(0, 34) + \"...\" : true;\n                return name;\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // GeoObjectType Body Square\n        gtree.append(\"g\").classed(\"g-got\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-body-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"rx\", 3)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .each(function(d: any) {\n                if (d.data.geoObjectType !== \"GhostNode\") {\n                    if (d.data.activeDropZones) {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n                    } else {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                    }\n                }\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Arrows on Edges\n        const arrowRectD = { height: 7, width: 10 };\n        let gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n        gArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-rect\", true)\n            .attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n            .attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n        gArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3)) +\n                \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n            );\n\n        // Ghost Drop Zone (Sibling) Backer\n        gtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-backer-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"white\");\n\n        // Ghost Drop Zone (Sibling) Body Rectangle\n        gtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-body-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#6BA542\")\n            .attr(\"stroke-width\", \"1\")\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType);\n\n        // GeoObjectType label\n        gtree.append(\"g\").classed(\"g-got-codelabel\", true)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", SvgHierarchyType.gotBodyFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .classed(\"svg-got-label-text\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n            .attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n            .attr(\"height\", SvgHierarchyType.gotRectH - 4)\n            // .filter(function(d: any) {\n            //     return calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n            // })\n            // .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => d.data.label)\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        let headerg;\n        if (this.isPrimary) {\n            gtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n                .selectAll(\"text\")\n                .data(descends)\n                .join(\"text\")\n                .filter(function(d: any) {\n                    return (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n                })\n                .classed(\"svg-got-relatedhiers-button\", true)\n                .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n                .attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - (SvgHierarchyType.gotOptionsButtonFontSize) - 3)\n                .attr(\"y\", (d: any) => d.y + (SvgHierarchyType.gotOptionsButtonFontSize * 0.8) - SvgHierarchyType.gotOptionsButtonFontSize / 2)\n                .style(\"font-family\", \"FontAwesome\")\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", \"#767676\")\n                .style(\"font-size\", SvgHierarchyType.gotOptionsButtonFontSize + \"px\")\n                .text(\"\\uf013\")\n                .on(\"click\", function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n            headerg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n        } else {\n            headerg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n        }\n\n\n        // let paddingTop = (headerg.node().getBBox().height + 20);\n        // gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n    }\n}\n","/* eslint-disable indent */\nimport { Component, OnInit, Output, EventEmitter } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { RelationshipVisualizationService } from \"@registry/service/relationship-visualization.service\";\nimport { Layout, Orientation } from \"@swimlane/ngx-graph\";\n\nimport { DagreNodesOnlyLayout } from \"./relationship-viz-layout\";\n\nimport * as shape from \"d3-shape\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport * as ColorGen from \"color-generator\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\nimport { GeometryService } from \"@registry/service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { LngLatBounds } from \"mapbox-gl\";\nimport { ObjectReference, RelatedType, Relationship, TreeData, Vertex } from \"@registry/model/graph\";\nimport { LocationManagerParams } from \"../location-manager/location-manager.component\";\nimport { Layer, RelationshipVisualizionDataSource, RelationshipVisualizionLayer, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE } from \"@registry/service/layer-data-source\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const SELECTED_NODE_COLOR: string = \"#4287f5\";\n\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\nexport const COLLAPSE_ANIMATION_TIME: number = 500; // in ms\n\nexport const DIMENSIONS = {\n    NODE: { WIDTH: 30, HEIGHT: 30 },\n    LABEL: { WIDTH: 100, HEIGHT: 60, FONTSIZE: 14 },\n    PADDING: {\n        BETWEEN_NODES: 0,\n        NODE_LABEL: 5,\n        NODE_EDGE: 5\n    }\n};\n\n@Component({\n\n    selector: \"relationship-visualizer\",\n    templateUrl: \"./relationship-visualizer.component.html\",\n    styleUrls: [\"./relationship-visualizer.css\"]\n})\nexport class RelationshipVisualizerComponent implements OnInit {\n\n    // Hack to allow the constant to be used in the html\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.VISUALIZER_PANEL,\n        ORIENTATION: Orientation\n    }\n\n    params: LocationManagerParams = {};\n\n    @Output() nodeSelect = new EventEmitter<Vertex>();\n\n    @Output() changeRelationship = new EventEmitter<string>();\n\n    public DIMENSIONS = DIMENSIONS;\n\n    public SELECTED_NODE_COLOR = SELECTED_NODE_COLOR;\n\n    public svgHeight: number = null;\n    public svgWidth: number = null;\n\n    panToNode$: Subject<string> = new Subject();\n\n    update$: Subject<boolean> = new Subject();\n\n    public layout: Layout = new DagreNodesOnlyLayout();\n\n    public curve = shape.curveLinear;\n\n    public typeLegend: { [key: string]: { label: string, color: string } } = {};\n\n    public typeCache: GeoObjectTypeCache;\n\n    relationship: Relationship = null;\n    relationships: Relationship[];\n\n    graphOid: string;\n\n    data: TreeData = null;\n\n    onFetchErrorSub: Subscription;\n\n    queryParamSub: Subscription;\n\n    panelOpen: boolean = true;\n\n    loading: boolean = true;\n\n    restrictToMapBounds: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService,\n        private spinner: NgxSpinnerService,\n        private vizService: RelationshipVisualizationService,\n        private cacheService: RegistryCacheService,\n        private geomService: GeometryService,\n        private router: Router,\n        private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        this.typeCache = this.cacheService.getTypeCache();\n\n        this.queryParamSub = this.route.queryParams.subscribe((params) => { this.queryParamChanges(params); });\n\n        // Angular keeps invoking our queryParamChanges in the early stages of component loading. We don't want to make expensive\n        // data requests unless we're certain that all the params are loaded.\n        window.setTimeout(() => {\n            this.loading = false;\n\n            this.queryParamChanges(this.params);\n        }, 10);\n    }\n\n    ngOnDestroy(): void {\n        this.queryParamSub.unsubscribe();\n    }\n\n    queryParamChanges(params) {\n        if (params.type == null || params.code == null) {\n            return;\n        }\n\n        let newParams = JSON.parse(JSON.stringify(params));\n        let oldParams = JSON.parse(JSON.stringify(this.params));\n        this.params = newParams;\n\n        this.panelOpen = newParams.graphPanelOpen === \"true\";\n\n        if (newParams.graphOid && newParams.graphOid !== oldParams.graphOid && this.relationships != null) {\n            this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.graphOid)];\n        }\n\n        if (!this.loading) {\n            if (this.relationships == null || this.relationship == null || newParams.objectType !== oldParams.objectType || newParams.type !== oldParams.type) {\n                this.relationships = null;\n                this.graphOid = null;\n                this.data = null;\n                this.fetchRelationships();\n            } else if (this.relationships != null && this.relationship && ((this.restrictToMapBounds && newParams.bounds !== oldParams.bounds) || newParams.code !== oldParams.code || newParams.date !== oldParams.date || newParams.uid !== oldParams.uid || newParams.graphOid !== oldParams.graphOid)) {\n                this.fetchData();\n            }\n        }\n\n        if (this.panelOpen) {\n            window.setTimeout(() => {\n                this.resizeDimensions();\n            }, 1);\n        }\n    }\n\n    resizeDimensions(): void {\n        let graphContainer = document.getElementById(\"graph-container\");\n\n        if (graphContainer) {\n            this.svgHeight = graphContainer.clientHeight - 50;\n            this.svgWidth = graphContainer.clientWidth;\n        }\n    }\n\n    // Thanks to https://stackoverflow.com/questions/52172067/create-svg-hexagon-points-with-only-only-a-length\n    public getHexagonPoints(node: { dimension: { width: number, height: number }, relation: string }): string {\n        let y = (this.DIMENSIONS.LABEL.HEIGHT / 2) - this.DIMENSIONS.NODE.HEIGHT / 2;\n        let x = (this.relationship.layout === \"VERTICAL\")\n            ? (node.relation === \"CHILD\" ? (this.DIMENSIONS.LABEL.WIDTH / 2) - this.DIMENSIONS.NODE.WIDTH / 2 : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 - this.DIMENSIONS.NODE.WIDTH / 2)\n            : node.relation === \"PARENT\" ? (this.DIMENSIONS.LABEL.WIDTH + this.DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.PADDING.NODE_EDGE) : 0;\n\n        let radius = this.DIMENSIONS.NODE.WIDTH / 2;\n        let height = this.DIMENSIONS.NODE.HEIGHT;\n        let width = this.DIMENSIONS.NODE.WIDTH;\n\n        let points = [0, 1, 2, 3, 4, 5, 6].map((n, i) => {\n            let angleDeg = 60 * i - 30;\n            let angleRad = Math.PI / 180 * angleDeg;\n            return [(width / 2 + radius * Math.cos(angleRad)) + x, (height / 2 + radius * Math.sin(angleRad)) + y];\n        }).map((p) => p.join(\",\"))\n            .join(\" \");\n\n        return points;\n    }\n\n    private fetchRelationships(): void {\n        if (this.params.type != null) {\n            this.relationships = [];\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.vizService.relationships(this.params.objectType, this.params.type).then(relationships => {\n                this.relationships = relationships;\n\n                if (this.relationships && this.relationships.length > 0) {\n                    if (!this.params.graphOid || this.relationships.findIndex(rel => rel.oid === this.params.graphOid) === -1) {\n                        // If we got here by selecting a business object from a GeoObject\n                        if (this.relationship != null && this.relationship.code === \"BUSINESS\" && this.params.objectType === \"BUSINESS\" && this.relationships.findIndex(rel => rel.code === \"GEOOBJECT\") !== -1) {\n                            // Then we can default to the \"Associated GeoObjects\" relationship\n                            this.relationship = this.relationships[this.relationships.findIndex(rel => rel.code === \"GEOOBJECT\")];\n                        } else if (this.relationship != null && this.relationship.code === \"GEOOBJECT\" && this.params.objectType === \"GEOOBJECT\" && this.relationships.findIndex(rel => rel.code === \"BUSINESS\") !== -1) {\n                            // Then we can default to the \"Associated Business Objects\" relationship\n                            this.relationship = this.relationships[this.relationships.findIndex(rel => rel.code === \"BUSINESS\")];\n                        } else {\n                            // We have no idea which relationship makes the most sense. Just pick the first one\n                            this.relationship = this.relationships[0];\n                        }\n\n                        this.graphOid = this.relationship.oid;\n                        this.onSelectRelationship(true);\n                    } else {\n                        this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.params.graphOid)];\n                        this.graphOid = this.params.graphOid;\n                        this.fetchData();\n                    }\n                } else {\n                    this.relationship = null;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n    }\n\n    private onSelectRelationship(updateUrl: boolean) {\n        this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.graphOid)];\n\n        //   this.fetchData();\n        this.changeRelationship.emit(this.graphOid);\n\n        if (updateUrl) {\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { graphOid: this.graphOid },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            });\n        }\n    }\n\n    private fetchData(): void {\n        if (this.relationship != null) {\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            let source = { code: this.params.code, typeCode: this.params.type, objectType: this.params.objectType } as Vertex;\n\n            this.vizService.tree(this.relationship.type, this.relationship.code, source, this.params.date, this.getBoundsAsWKT()).then(data => {\n                this.data = null;\n\n                window.setTimeout(() => {\n                    this.data = data;\n                    this.resizeDimensions();\n                    this.calculateTypeLegend(this.data.relatedTypes);\n                    this.addLayers(this.data.relatedTypes);\n                }, 0);\n\n                this.resizeDimensions();\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n    }\n\n    private addLayers(relatedTypes: RelatedType[]) {\n        if (this.relationship.type === \"BUSINESS\" || (this.params.objectType === \"BUSINESS\" && this.relationship.type !== \"GEOOBJECT\")) {\n            let layers: Layer[] = this.geomService.getLayers().filter(layer => layer.getPinned() || layer.dataSource.getDataSourceType() !== RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE);\n            this.geomService.setLayers(layers);\n            return;\n        }\n\n        let layers: Layer[] = this.geomService.getLayers();\n\n        let sourceObject = { code: this.params.code, typeCode: this.params.type, objectType: this.params.objectType } as ObjectReference;\n        let bounds = this.restrictToMapBounds ? this.params.bounds : null;\n        let dataSource = new RelationshipVisualizionDataSource(this.vizService, this.geomService, this.relationship.type, this.relationship.code, sourceObject, bounds, this.params.date);\n\n        // Remove any existing layer from map that is graph related that isn't part of this new data\n        layers = layers.filter(layer => layer.getPinned() ||\n            layer.dataSource.getDataSourceType() !== RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE ||\n            ((layer.dataSource as RelationshipVisualizionDataSource).getRelationshipCode() === this.relationship.code && (layer.dataSource as RelationshipVisualizionDataSource).getRelationshipType() === this.relationship.type &&\n              (relatedTypes.map(relatedType => relatedType.code).indexOf((layer as RelationshipVisualizionLayer).getRelatedTypeFilter()) !== -1)));\n\n        // If the type is already rendered at a specific position in the layer stack, we want to preserve that positioning and overwrite any layer currently in that position\n        let existingRelatedTypes: { [key: string]: { index: number, layer: Layer } } = {};\n        for (let i = 0; i < layers.length; ++i) {\n            if (layers[i].dataSource.getDataSourceType() === RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE) {\n                let layer: RelationshipVisualizionLayer = layers[i] as RelationshipVisualizionLayer;\n\n                existingRelatedTypes[layer.getRelatedTypeFilter()] = { index: i, layer: layer };\n            }\n        }\n\n        relatedTypes.forEach(relatedType => {\n            if (relatedType.objectType === \"GEOOBJECT\") {\n                let layer: RelationshipVisualizionLayer = dataSource.createLayer(this.relationship.label.localizedValue + \" \" + relatedType.label, true, this.typeLegend[relatedType.code].color) as RelationshipVisualizionLayer;\n                layer.setRelatedTypeFilter(relatedType.code);\n\n                 if (layers.findIndex(l => l.getKey() === layer.getKey()) === -1) {\n                //if (layers.findIndex(l => l.legendLabel === layer.legendLabel) === -1) {\n                    let existingRelatedType = existingRelatedTypes[relatedType.code];\n\n                    if (existingRelatedType == null || existingRelatedType.layer.getPinned()) {\n                        layers.push(layer);\n                    } else {\n                        layer.rendered = existingRelatedType.layer.rendered;\n                        layers.splice(existingRelatedType.index, 1, layer);\n                    }\n                    /*\n                } else {\n                    // TODO : This is definitely a hack. But I can't get zooming to work up and down rivers with the 'flows through'\n                    //        relationship without doing it this way since this way doesn't interrupt zooming behaviour\n                    window.setTimeout(() => {\n                        let existingLayer = layers[layers.findIndex(l => l.legendLabel === layer.legendLabel)] as RelationshipVisualizionLayer;\n\n                        dataSource.getLayerData().then((data) => {\n                            let map = this.geomService.getMap();\n\n                            if (map) {\n                                let source = map.getSource(existingLayer.dataSource.getId());\n\n                                if (source) {\n                                    (<any> source).setData(data);\n                                }\n                            }\n                        });\n                    }, 10);\n                    */\n                }\n            }\n        });\n\n        this.geomService.setLayers(layers);\n    }\n\n    private getBoundsAsWKT(): string {\n        let wktBounds: string = null;\n\n        if (this.params.bounds != null && this.restrictToMapBounds) {\n            const mapBounds = new LngLatBounds(JSON.parse(this.params.bounds));\n            wktBounds = this.convertBoundsToWKT(mapBounds);\n        }\n\n        return wktBounds;\n    }\n\n    private convertBoundsToWKT(bounds: LngLatBounds): string {\n        let se = bounds.getSouthEast();\n        let sw = bounds.getSouthWest();\n        let nw = bounds.getNorthWest();\n        let ne = bounds.getNorthEast();\n\n        return \"POLYGON ((\" +\n            se.lng + \" \" + se.lat + \",\" +\n            sw.lng + \" \" + sw.lat + \",\" +\n            nw.lng + \" \" + nw.lat + \",\" +\n            ne.lng + \" \" + ne.lat + \",\" +\n            se.lng + \" \" + se.lat +\n            \"))\";\n    }\n\n    calculateTypeLegend(relatedTypes: RelatedType[]) {\n        let oldTypeLegend = this.typeLegend;\n        this.typeLegend = {};\n\n        // If we already have layers which are using specific colors then we want to use those same colors\n        const layers = this.geomService.getLayers();\n\n        relatedTypes.forEach(relatedType => {\n            if (!this.typeLegend[relatedType.code]) {\n                let color: string;\n\n                let existingIndex = layers.findIndex(layer => layer instanceof RelationshipVisualizionLayer && (layer as RelationshipVisualizionLayer).getRelatedTypeFilter() === relatedType.code);\n\n                if (existingIndex !== -1) {\n                    color = layers[existingIndex].color;\n                } else if (oldTypeLegend != null && oldTypeLegend[relatedType.code] != null) {\n                    color = oldTypeLegend[relatedType.code].color;\n                } else {\n                    color = ColorGen().hexString();\n                }\n\n                this.typeLegend[relatedType.code] = { color: color, label: relatedType.label };\n            }\n        });\n\n        if (!this.typeLegend[this.params.type]) {\n            this.typeLegend[this.params.type] = { color: SELECTED_NODE_COLOR, label: this.params.type };\n        }\n    }\n\n    collapseAnimation(id: string): Promise<void> {\n        if (!this.params.type) { return new Promise<void>((resolve, reject) => { resolve(); }); }\n\n        let activeEl = document.getElementById(id) as unknown as SVGGraphicsElement;\n        if (!activeEl) { return new Promise<void>((resolve, reject) => { resolve(); }); }\n\n        let bbox = this.getBBox(activeEl, true);\n\n        let all = document.querySelectorAll(\"g.nodes > g\");\n\n        all.forEach((el: SVGGraphicsElement) => {\n            if (el.id !== activeEl.id) {\n                let bbox2 = this.getBBox(el, false);\n\n                // let translate = \"translate(\" + (bbox.x - bbox2.x) + \",\" + (bbox.y - bbox2.y) + \")\";\n                // el.setAttribute(\"transform\", translate);\n\n                let animateTransform = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animateTransform\") as unknown as SVGAnimateTransformElement;\n\n                animateTransform.setAttribute(\"attributeName\", \"transform\");\n                animateTransform.setAttribute(\"attributeType\", \"XML\");\n                animateTransform.setAttribute(\"type\", \"translate\");\n                animateTransform.setAttribute(\"fill\", \"freeze\");\n                // animateTransform.setAttribute(\"from\", 0 + \" \" + 0);\n                animateTransform.setAttribute(\"to\", (bbox.x - bbox2.x) + \" \" + (bbox.y - bbox2.y));\n                animateTransform.setAttribute(\"begin\", \"indefinite\");\n                animateTransform.setAttribute(\"additive\", \"replace\");\n                animateTransform.setAttribute(\"dur\", COLLAPSE_ANIMATION_TIME + \"ms\");\n                animateTransform.setAttribute(\"repeatCount\", \"0\");\n\n                el.appendChild(animateTransform);\n\n                (animateTransform as any).beginElement(); // Tells the element to animate now\n            }\n        });\n\n        document.querySelectorAll(\"g.links > g\").forEach(el => {\n            el.remove();\n        });\n\n        let promise = new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                all.forEach((el: SVGGraphicsElement) => {\n                    if (el.id !== activeEl.id) {\n                        el.remove();\n                    }\n                });\n\n                resolve();\n            }, COLLAPSE_ANIMATION_TIME);\n        });\n\n        return promise;\n    }\n\n    private getBBox(el: SVGGraphicsElement, includeTransform: boolean = true): DOMRect {\n        if (!includeTransform) {\n            return el.getBBox();\n        }\n\n        let cloned = el.cloneNode(true) as unknown as SVGGraphicsElement;\n\n        let newParent = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\") as unknown as SVGGraphicsElement;\n        document.querySelector(\"svg\").appendChild(newParent);\n\n        newParent.appendChild(cloned);\n        let bbox = newParent.getBBox();\n        cloned.remove();\n        newParent.remove();\n\n        return bbox;\n    }\n\n    /*\n     * We can't predict when the graph will be finished loading and it will be ready to pan. So we're just telling it to\n     * pan over and over again just in case it takes a little while to load. To my knowledge there is no way to fix this,\n     * because:\n     *  1. ngx graph does not provide any sort of \"on ready\" event we can listen to\n     *  2. Checking if the element exists first in the dom before we call pan to node does not work. The graph might still\n     *     not be ready, even if the element exists.\n     */\n    /*\n    private panToNode(uid: string, retryNum: number = 10) {\n        window.setTimeout(() => {\n            if (document.getElementById(\"g-\" + uid) != null) {\n                this.panToNode$.next(\"g-\" + uid);\n                this.update$.next(); // https://github.com/swimlane/ngx-graph/issues/319\n\n                if (retryNum > 0) {\n                    this.panToNode(uid, retryNum - 1);\n                }\n            }\n        }, 50);\n    }\n    */\n\n    public onClickNode(node: any): void {\n        if (node.code !== this.params.code ||\n            node.typeCode !== this.params.type) {\n            let doIt = (resolve) => {\n                this.collapseAnimation(node.id).then(() => {\n                    resolve();\n                });\n            };\n\n            this.nodeSelect.emit({ objectType: node.objectType, id: node.id.substring(2), code: node.code, typeCode: node.typeCode, label: node.label, selectAnimation: doIt } as any);\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div id=\"relationship-visualizer-root-node\" *ngIf=\"params.code\" style=\"height:100%; overflow:hidden;\">\n\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\">\n  </ngx-spinner>\n\n  <div>\n\n    <select *ngIf=\"relationships\" id=\"relationshipId\" name=\"relationshipId\" class=\"select-area\" [(ngModel)]=\"graphOid\"\n      (change)=\"onSelectRelationship(true)\" required style=\"margin:10px;width:auto;min-width:200px;\">\n      <option *ngIf=\"relationships.length === 0\"></option>\n      <option *ngFor=\"let loopRel of relationships\" [value]=\"loopRel.oid\">{{loopRel.label.localizedValue}}</option>\n    </select>\n\n    <div style=\"padding-top: 20px;\">\n      <boolean-field [(value)]=\"restrictToMapBounds\" (change)=\"fetchData()\" localizeLabelKey=\"graph.visualizer.restrictToMapBounds\"></boolean-field>\n    </div>\n\n    \n    <div class=\"legend\">\n      <div class=\"legend-item\" *ngFor=\"let item of typeLegend | keyvalue\">\n        <div class=\"square\" [ngStyle]=\"{ background: item.value.color }\"></div>\n        \n        <label>{{ item.value.label }}</label>\n      </div>\n    </div>\n\n    <div *ngIf=\"relationships\">\n      <div class=\"hierarchy-content\">\n        <div id=\"graph-container\">\n          <ngx-graph *ngIf=\"data\" class=\"chart-container\" [view]=\"[svgWidth, svgHeight]\" [links]=\"data.edges\"\n            [nodes]=\"data.verticies\" [animate]=\"false\" [autoZoom]=\"true\" [autoCenter]=\"true\" [layout]=\"layout\"\n            [layoutSettings]=\"{orientation: (relationship.layout === 'VERTICAL') ? CONSTANTS.ORIENTATION.TOP_TO_BOTTOM : CONSTANTS.ORIENTATION.LEFT_TO_RIGHT}\"\n            [curve]=\"curve\" [draggingEnabled]=\"false\" [panToNode$]=\"panToNode$\" [update$]=\"update$\"\n          >\n            <!-- Draw an arrow on relationships for directed graph types -->\n            <ng-template #defsTemplate>\n              <ng-container *ngIf=\"relationship.type !== 'UndirectedGraphType'\">\n                <svg:marker id=\"arrow\" viewBox=\"0 -5 10 10\" refX=\"8\" refY=\"0\" markerWidth=\"4\" markerHeight=\"4\" orient=\"auto\">\n                  <svg:path d=\"M0,-5L10,0L0,5\" class=\"arrow-head\" />\n                </svg:marker>\n              </ng-container>\n            </ng-template>\n\n            <!-- Node Template -->\n            <ng-template #nodeTemplate let-node>\n              <svg:g (click)=\"onClickNode(node)\" class=\"node\" [style.cursor]=\"node.relation === 'SELECTED' ? 'default' : 'pointer'\" >\n                <svg:polygon *ngIf=\"node.objectType === 'GEOOBJECT'\" [attr.points]=\"getHexagonPoints(node)\"\n                  [attr.fill]=\"params.code == null ? node.data.color : this.typeLegend[node.typeCode].color\"\n                  ></polygon>\n                <svg:rect *ngIf=\"node.objectType === 'BUSINESS'\" [attr.width]=\"DIMENSIONS.NODE.WIDTH\" [attr.height]=\"DIMENSIONS.NODE.HEIGHT\"\n                          [attr.y]=\"DIMENSIONS.NODE.HEIGHT/2\"\n                          [attr.x]=\"(this.relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? (this.DIMENSIONS.LABEL.WIDTH / 2 - this.DIMENSIONS.NODE.WIDTH / 2) : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 - this.DIMENSIONS.NODE.WIDTH / 2) : node.relation === 'PARENT' ? (this.DIMENSIONS.LABEL.WIDTH + this.DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.PADDING.NODE_EDGE) : this.DIMENSIONS.PADDING.NODE_EDGE\"\n                          [attr.fill]=\"params.code == null ? node.data.color : this.typeLegend[node.typeCode].color\"\n                ></svg:rect>\n\n                <foreignObject\n                  [attr.x]=\"(relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? 0 : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 + this.DIMENSIONS.NODE.WIDTH / 2 + this.DIMENSIONS.PADDING.NODE_LABEL) : (node.relation === 'PARENT' ? DIMENSIONS.PADDING.NODE_LABEL : (node.relation === 'SELECTED' ? (DIMENSIONS.NODE.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + DIMENSIONS.PADDING.NODE_EDGE) : (DIMENSIONS.NODE.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.PADDING.NODE_EDGE)))\"\n                  [attr.y]=\"(relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? DIMENSIONS.NODE.HEIGHT + DIMENSIONS.PADDING.NODE_LABEL: 0) : node.relation === 'SELECTED' ? 0 : 0\"\n                  [attr.width]=\"(relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? DIMENSIONS.LABEL.WIDTH : DIMENSIONS.LABEL.WIDTH) : (DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL*8)\" [attr.height]=\"DIMENSIONS.LABEL.HEIGHT\">\n                  <span [style]=\"'width:' + DIMENSIONS.LABEL.WIDTH + 'px; height:' + DIMENSIONS.LABEL.HEIGHT + 'px; overflow:hidden; display: inline-block;'\">\n                    <p xmlns=\"http://www.w3.org/1999/xhtml\" text-anchor=\"start\"\n                      [ngStyle]=\"{'text-align': (relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? 'center' : 'left') : node.relation === 'SELECTED' ? 'left' : (node.relation === 'PARENT' ? 'right' : 'left'), 'color': node.relation === 'SELECTED' ? SELECTED_NODE_COLOR : 'unset', 'font-weight': ('g-' + params.uid) === node.id ? 'bold' : 'unset'}\"\n                      [style]=\"'font-size: ' + DIMENSIONS.LABEL.FONTSIZE + 'px; display: table-cell; vertical-align: middle; height:' + DIMENSIONS.LABEL.HEIGHT + 'px; width:' + DIMENSIONS.LABEL.WIDTH + 'px; line-height:' + DIMENSIONS.LABEL.FONTSIZE + 'px;'\">\n                      {{node.label}}</p>\n                  </span>\n                </foreignObject>\n              </svg:g>\n            </ng-template>\n\n            <!-- Link Template -->\n            <ng-template #linkTemplate let-link>\n              <svg:g class=\"edge\">\n                <svg:path class=\"line\" stroke-width=\"2\" marker-end=\"url(#arrow)\"></svg:path>\n              </svg:g>\n            </ng-template>\n          </ngx-graph>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" property=\"type\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a> \n          <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> \n          <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> \n          <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span>\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"data-page\",\n    templateUrl: \"./data-page.component.html\",\n    styleUrls: [\"./data-page.css\"]\n})\nexport class DataPageComponent implements OnInit {\n\n    content: string = \"SPREADSHEET\";\n    pageTitle: string;\n    bsModalRef: BsModalRef;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n    }\n\n    ngOnInit(): void {\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n\n        if (content === \"SPREADSHEET\") {\n            this.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n        } else if (content === \"SHAPEFILE\") {\n            this.pageTitle = this.localizationService.decode(\"shapefile.title\");\n        } else if (content === \"EXPORT\") {\n            this.pageTitle = this.localizationService.decode(\"io.export.title\");\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">\n                      <localize key=\"import-spreadsheet-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">\n                      <localize key=\"import-shapefile-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ViewChildren, ElementRef, QueryList, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from \"@shared/service\";\nimport { HierarchyService, IOService } from \"@registry/service\";\nimport { ExternalSystem } from \"@shared/model/core\";\n\nimport { SpreadsheetModalComponent } from \"./modals/spreadsheet-modal.component\";\nimport { ShapefileModalComponent } from \"./modals/shapefile-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"dataimporter\",\n    templateUrl: \"./dataimporter.component.html\",\n    styleUrls: [\"./dataimporter.css\"]\n})\nexport class DataImporterComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray:QueryList<DateFieldComponent>;\n\n    currentDate : Date = new Date();\n\n    showImportConfig: boolean = false;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Start date\n     */\n    startDate: Date = null;\n\n    /*\n     * End date\n     */\n    endDate: Date | string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string; // Can be SHAPEFILE or EXCEL\n\n    isExternal: boolean = false;\n\n    /*\n     * List of available external systems (filtered based on user's org)\n     */\n    externalSystems: ExternalSystem[];\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    isLoading: boolean = true;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService,\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private authService: AuthService,\n        private sysService: ExternalSystemService,\n        private hierarchyService: HierarchyService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) { }\n\n    ngOnInit(): void {\n        this.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n            this.externalSystems = paginatedSystems.resultSet;\n\n            if (this.externalSystems.length === 0) {\n                this.isExternal = false;\n                this.showImportConfig = true; // Show the upload widget if there are no external systems registered\n            }\n\n            this.isLoading = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = registry.contextPath + \"/excel/get-configuration\";\n        if (this.format === \"SHAPEFILE\") {\n            getUrl = registry.contextPath + \"/shapefile/get-shapefile-configuration\";\n\n            // this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n        }\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.typeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.startDate != null) {\n                form.append(\"startDate\", this.startDate);\n            }\n            if (this.endDate != null) {\n                form.append(\"endDate\", this.endDate);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.isExternal = this.isExternal;\n            configuration.hierarchy = this.hierarchyCode;\n\n            let externalSystem: ExternalSystem = null;\n            for (let i = 0; i < this.externalSystems.length; ++i) {\n                let sys: ExternalSystem = this.externalSystems[i];\n\n                if (sys.oid === this.externalSystemId) {\n                    externalSystem = sys;\n                }\n            }\n\n            configuration.externalSystemId = this.externalSystemId;\n            configuration.externalSystem = externalSystem;\n\n            if (this.format === \"SHAPEFILE\") {\n                this.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true, ignoreBackdropClick: true });\n                this.bsModalRef.content.configuration = configuration;\n            } else {\n                this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n                this.bsModalRef.content.init(configuration);\n            }\n\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n\n        this.checkDates();\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    setImportSource(event, type): void {\n        if (type === \"EXTERNAL\") {\n            this.isExternal = true;\n        } else {\n            this.isExternal = false;\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n//    setInfinity(endDate: any): void {\n//\n//        if(endDate === PRESENT){\n//            this.endDate = null;\n//        }\n//        else{\n//            this.endDate = PRESENT;\n//        }\n//    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = this.checkDateFieldValidity();\n        }, 0);\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        let startDateField: DateFieldComponent;\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n\n            if (field.inputName === \"startDate\") {\n                // set startDateField so we can use it in the next check\n                startDateField = field;\n            }\n\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        if (this.startDate > this.endDate) {\n            startDateField.setInvalid(this.localizationService.decode(\"date.input.startdate.after.enddate.error.message\"));\n\n            this.changeDetectorRef.detectChanges();\n        }\n\n        return true;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\" autocomplete=\"off\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                <label class=\"col-md-2 text-right\" for=\"hierarchyCode\"> <localize key=\"io.modal.hierarchy\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\" [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                        <option></option>\n                        <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>{{view.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\" (change)=\"onSelectType()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>{{type.super ? type.super.label + \" : \" + type.label : type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" (change)=\"checkDates()\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"startDate\" label=\"\" [inputName]=\"'startDate'\" (change)=\"checkDates()\" [allowFutureDates]=\"true\"></date-field>\n                </div>\n                \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"endDate\"><localize key=\"io.endDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"endDate\" label=\"\" [inputName]=\"'endDate'\" (change)=\"checkDates()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" ></date-field>\n                </div>\n                                      \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                \n                <label class=\"col-md-2 text-right\" for=\"copyBlank\"><localize key=\"dataimporter.importblankcells\"></localize></label>\n                <div class=\"col-md-8\">\n                   <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n<!--                     <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\"> -->\n<!--                         <localize key=\"io.back\"></localize> -->\n<!--                     </button> -->\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, ViewEncapsulation, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Location } from \"@angular/common\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\n\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { GeoObjectOverTime } from \"@registry/model/registry\";\n\nimport { ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { LocalizationService, AuthService, EventService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"request-table\",\n    templateUrl: \"./request-table.component.html\",\n    styleUrls: [\"./request-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class RequestTableComponent {\n\n    today: Date = new Date();\n    todayString: string = this.dateService.getDateString(new Date());\n\n    objectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    requests: ChangeRequest[] = [];\n\n    actions: AbstractAction[];\n\n    columns: any[] = [];\n\n    @Input() toggleId: string;\n\n    uploadRequest: ChangeRequest;\n\n    filterCriteria: string = \"ALL\";\n\n    sort: any[] = [{ attribute: \"createDate\", ascending: false }];\n\n    hasBaseDropZoneOver: boolean = false;\n\n    // Restrict page to the specified oid\n    oid: string = null;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    isValid: boolean = true;\n\n    isEditing: boolean = false;\n\n    constructor(private service: ChangeRequestService, private geomService: GeometryService, private modalService: BsModalService, private authService: AuthService, private localizationService: LocalizationService,\n        private eventService: EventService, private route: ActivatedRoute, private router: Router, private dateService: DateService, private location: Location) {\n        this.columns = [\n            { name: localizationService.decode(\"change.request.user\"), prop: \"createdBy\", sortable: false },\n            { name: localizationService.decode(\"change.request.createDate\"), prop: \"createDate\", sortable: false, width: 195 },\n            { name: localizationService.decode(\"change.request.status\"), prop: \"approvalStatus\", sortable: false }\n        ];\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.route.paramMap.subscribe(params => {\n            this.oid = params.get(\"oid\");\n            this.refresh();\n        });\n\n        if (this.oid != null) {\n            this.toggleId = this.oid;\n        }\n\n        let getUrl = registry.contextPath + \"/changerequest/upload-file-cr\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"crOid\", this.uploadRequest.oid);\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: any, status: number, headers: any) => {\n            const doc = JSON.parse(response);\n\n            const index = this.requests.findIndex(request => request.oid === doc.requestId);\n\n            if (index !== -1) {\n                this.requests[index].documents.push(doc);\n            }\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n\n        this.refresh();\n    }\n\n    isSorting(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].attribute === attribute;\n    }\n\n    isAscending(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].ascending;\n    }\n\n    onSort(attribute: string) {\n        let index = this.sort.findIndex(item => item.attribute === attribute);\n\n        if (index !== -1) {\n            let item = this.sort[index];\n\n            item.ascending = !item.ascending;\n        } else {\n            this.sort = [{\n                attribute: attribute,\n                ascending: true\n            }];\n        }\n\n        this.refresh();\n    }\n\n    getGOTLabel(action: any): string {\n        if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.displayLabel && action.geoObjectJson.attributes.displayLabel.values &&\n            action.geoObjectJson.attributes.displayLabel.values[0] && action.geoObjectJson.attributes.displayLabel.values[0].value && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues &&\n            action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0] && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value) {\n            return action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value;\n        } else if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.code) {\n            return action.geoObjectJson.attributes.code;\n        } else {\n            return this.localizationService.decode(\"geoObject.label\");\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    onUpload(request: ChangeRequest): void {\n        this.uploadRequest = request;\n\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onDownloadFile(request: ChangeRequest, fileOid: string): void {\n        window.location.href = registry.contextPath + \"/changerequest/download-file-cr?crOid=\" + request.oid + \"&\" + \"vfOid=\" + fileOid;\n    }\n\n    onDeleteFile(request: ChangeRequest, fileOid: string): void {\n        this.service.deleteFile(request.oid, fileOid).then(() => {\n            const index = request.documents.findIndex(doc => doc.oid === fileOid);\n\n            if (index !== -1) {\n                request.documents.splice(index, 1);\n            }\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    public fileOverBase(e: any): void {\n        this.hasBaseDropZoneOver = e;\n    }\n\n    pageChange(pageNumber: number = 1): void {\n        this.oid = null;\n        this.refresh(pageNumber);\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, pageNumber, this.filterCriteria, this.sort, this.oid).then(requests => {\n            this.page = requests;\n            this.requests = requests.resultSet;\n\n            // Copying the Geo-Object to add consistency for template processing\n            this.requests.forEach((req) => {\n                if (!req.current.geoObject) {\n                    for (let i = 0; i < req.actions.length; i++) {\n                        if (req.actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                            // This is the state of the Geo-Object as the Registry Contributor configured it.\n                            req.current.geoObject = JSON.parse(JSON.stringify((req.actions[0] as CreateGeoObjectAction).geoObjectJson));\n                        }\n                    }\n                }\n            });\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    onSelect(selected: any): void {\n        // this.request = selected.selected;\n\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, 1, \"ALL\", this.sort, this.oid).then(requests => {\n            this.requests = requests.resultSet;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.implementDecisions(changeRequest).then(request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n\n                const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true\n                });\n\n                bsModalRef.content.submitText = this.localizationService.decode(\"change.requests.more.geoobject.updates.submit.btn\");\n                bsModalRef.content.cancelText = this.localizationService.decode(\"change.requests.more.geoobject.updates.cancel.btn\");\n                bsModalRef.content.message = this.localizationService.decode(\"change.requests.more.geoobject.updates.message\");\n\n                bsModalRef.content.onConfirm.subscribe(() => {\n                    const object = this.getFirstGeoObjectInActions(request);\n\n                    if (object != null) {\n                        this.router.navigate([\"/registry/location-manager\"], {\n                            queryParams: { text: object.attributes.code, date: this.todayString, type: object.geoObjectType.code, code: object.attributes.code, uid: object.attributes.uid, pageContext: 'DATA' }\n                        });\n                        // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, object.geoObjectType.code, this.todayString, true]);\n                    } else {\n                        let object = request.current.geoObject;\n                        let type = request.current.geoObjectType;\n\n                        if (object != null && type != null) {\n                            this.router.navigate([\"/registry/location-manager\"], {\n                                queryParams: { text: object.attributes.code, date: this.todayString, type: type.code, code: object.attributes.code, uid: object.attributes.uid, pageContext: 'DATA' }\n                            });\n\n                            // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, type.code, this.todayString, true]);\n                        }\n                    }\n                });\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    onReject(cr: ChangeRequest): void {\n        this.service.rejectChangeRequest(cr).then(() => {\n            // TODO: Determine if there is a way to update an individual record\n            // TODO : cr.statusLabel needs to be updated...\n            /*\n            cr.approvalStatus = \"REJECTED\";\n\n            let len = this.actions.length;\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n\n                action.approvalStatus = \"REJECTED\";\n            }\n            */\n\n            this.refresh();\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    getFirstGeoObjectInActions(request: ChangeRequest): GeoObjectOverTime {\n        for (let i = 0; i < request.actions.length; i++) {\n            let action = request.actions[i];\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (action.hasOwnProperty(\"geoObjectJson\")) {\n                return action[\"geoObjectJson\"];\n            }\n        }\n\n        return null;\n    }\n\n    onDelete(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            bsModalRef.content.type = \"danger\";\n            bsModalRef.content.submitText = this.localizationService.decode(\"change.request.delete.request.confirm.btn\");\n            bsModalRef.content.message = this.localizationService.decode(\"change.request.delete.request.message\");\n\n            bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.delete(changeRequest.oid).then(deletedRequestId => {\n                    let pos = -1;\n                    for (let i = 0; i < this.requests.length; i++) {\n                        let req = this.requests[i];\n                        if (req.oid === deletedRequestId) {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > -1) {\n                        this.requests.splice(pos, 1);\n                    }\n\n                    this.refresh();\n                }).catch((response: HttpErrorResponse) => {\n                    this.error(response);\n                });\n            });\n        }\n    }\n\n    onUpdate(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.update(changeRequest).then(request => {\n                this.refresh();\n\n                this.isEditing = false;\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    applyActionStatusProperties(action: any): void {\n        // var action = JSON.parse(JSON.stringify(this.action));\n        // action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        this.service.setActionStatus(action.oid, action.approvalStatus).then(response => {\n            action.decisionMaker = (action.approvalStatus !== \"PENDING\") ? this.authService.getUsername() : \"\";\n\n            // this.crtable.refresh()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    requestTrackBy(index: number, request: ChangeRequest) {\n        return request.oid;\n    }\n\n    toggle(event: any, oid: string): void {\n        this.location.replaceState(\"/registry/change-requests/\" + oid);\n\n        if (!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")) {\n            if (this.toggleId === oid) {\n                this.toggleId = null;\n            } else {\n                this.toggleId = oid;\n                //                this.onSelect({ selected: [{ oid: oid }] });\n                this.requests.forEach(req => {\n                    if (req.oid === oid) {\n                        this.actions = req.actions;\n                    }\n                });\n            }\n        }\n    }\n\n    filter(criteria: string): void {\n        this.filterCriteria = criteria;\n\n        this.refresh(1);\n    }\n\n    setActionStatus(action: CreateGeoObjectAction | UpdateAttributeAction, status: string): void {\n        const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        bsModalRef.content.onConfirm.subscribe(data => {\n            action.approvalStatus = status;\n\n            this.applyActionStatusProperties(action);\n        });\n    }\n\n    getActiveDetailComponent(action: CreateGeoObjectAction | UpdateAttributeAction): any {\n        // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n        if (action.actionType.endsWith(\"CreateGeoObjectAction\") || action.actionType.endsWith(\"UpdateGeoObjectAction\")) {\n            // return this.cuDetail;\n        }\n        //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n        //   {\n        //     return this.arDetail;\n        //   }\n\n        return action;\n    }\n\n    getUsername(): string {\n        return this.authService.getUsername();\n    }\n\n    isRequestTooOld(request: ChangeRequest): boolean {\n        if (request.actions && request.actions.length > 0) {\n            let firstAction = request.actions[0];\n\n            if (firstAction.actionType === ActionTypes.UPDATEGEOOBJECTACTION) {\n                return true;\n            } else if (firstAction.actionType === ActionTypes.CREATEGEOOBJECTACTION && !(firstAction as CreateGeoObjectAction).geoObjectJson.attributes[\"exists\"]) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    onEditAttributes(): void {\n        this.isEditing = !this.isEditing;\n    }\n\n    canEdit(request: ChangeRequest): boolean {\n        return (request.permissions.includes(\"WRITE_DETAILS\") && this.isEditing);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"form-group button-row\">\n\n      <a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" style=\"border-bottom: 1px solid;\" >\n        <localize key=\"change.request.all.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.pending.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.accepted.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PARTIAL')\" [ngClass]=\"filterCriteria === 'PARTIAL' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.partial.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.rejected.filter.link\"></localize>\n      </a>\n\n    </div>\n    <hr style=\"border-top:solid 3px #6BA542\" />\n\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <table class=\"table\">\n      <thead>\n        <tr style=\"height: 50px;color: grey;\">\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createdBy')\"><localize key=\"change.request.contributor.label\"></localize></a><i *ngIf=\"isSorting('createdBy')\" [ngClass]=\"isAscending('createdBy') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectTypeLabel')\"><localize key=\"geoObjectType.label\"></localize></a><i *ngIf=\"isSorting('geoObjectTypeLabel')\" [ngClass]=\"isAscending('geoObjectTypeLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectLabel')\"><localize key=\"geoObject.label\"></localize></a><i *ngIf=\"isSorting('geoObjectLabel')\" [ngClass]=\"isAscending('geoObjectLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createDate')\"><localize key=\"change.request.date.contributed.label\"></localize></a><i *ngIf=\"isSorting('createDate')\" [ngClass]=\"isAscending('createDate') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('approvalStatus')\"><localize key=\"change.request.status.label\"></localize></a><i *ngIf=\"isSorting('approvalStatus')\" [ngClass]=\"isAscending('approvalStatus') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('oid')\"><localize key=\"change.request.id.label\"></localize></a><i *ngIf=\"isSorting('oid')\" [ngClass]=\"isAscending('oid') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-template ngFor let-req [ngForOf]=\"requests | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" [ngForTrackBy]=\"requestTrackBy\">\n        \n          <tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n            <td class=\"col-md-1\">\n              <h5><strong>{{req.createdBy}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObjectType.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObject.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align: middle; color:grey;\">\n               <span class=\"date-string-display\">\n                 <date-text [date]=\"req.createDate\"></date-text>\n               </span>\n            </td>\n            <td class=\"col-md-1\">\n              <h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-partial':req.approvalStatus === 'PARTIAL', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n                 <strong>{{req.statusLabel}}</strong>\n              </h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.oid}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:right;padding-right:25px;\">\n              <i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n            </td>\n          </tr>\n          \n          <!-- Action panel only shows when activated with click -->\n          <tr [@fadeInOut] *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\" [ngClass]=\"{'status-pending-container':req.approvalStatus === 'PENDING', 'status-accepted-container':req.approvalStatus === 'ACCEPTED', 'status-partial-container':req.approvalStatus === 'PARTIAL', 'status-rejected-container':req.approvalStatus === 'REJECTED'}\">\n            \n            <td colspan=\"7\">\n              <div class=\"geoobject-panel-header\">\n              \n                    <div>\n                        <h3 style=\"margin-top: 10px;\">{{req.geoObject.label}}</h3>\n                        <h4 style=\"font-style: italic;\">{{req.geoObject.code}}</h4>\n                        \n                        <h4 *ngIf=\"req.type === 'UpdateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.update.geoobject.label\"></localize></h4>\n                        <h4 *ngIf=\"req.type === 'CreateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.create.geoobject.label\"></localize></h4>\n                    </div>\n              </div>\n                  \n              <div class=\"row\" style=\"margin:0;background: white;\">\n                <!-- <div class=\"col-md-1\"></div> -->\n                <div class=\"col-md-12\">\n                \n                  <div *ngIf=\"!isRequestTooOld(req) && req.approvalStatus === 'INVALID'\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.invalid\"></localize>\n                  </div>\n                  <div *ngIf=\"isRequestTooOld(req)\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.tooOld\"></localize>\n                  </div>\n                \n                  <div *ngIf=\"req.permissions.includes('READ_CONTRIBUTOR_NOTES')\" class=\"form-group\" style=\"margin-top:20px;\">\n                     <label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n                     <textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;\" [(ngModel)]=\"req.contributorNotes\" [disabled]=\"!req.permissions.includes('WRITE_DETAILS')\"></textarea>\n                  </div>  \n                  \n                  <div>\n                    <p><localize key=\"change.request.contributor.prefix.label\"></localize>&nbsp;<strong>{{req.createdBy}}</strong></p>\n                    <p><localize key=\"change.request.contributor.email.prefix.label\"></localize>&nbsp;<strong>{{req.email}}</strong></p>\n                    <p><localize key=\"change.request.contributor.phone.prefix.label\"></localize>&nbsp;<strong>{{req.phoneNumber}}</strong></p>\n                  </div>\n  \n                  <div *ngIf=\"req.approvalStatus !== 'INVALID' && !isRequestTooOld(req)\" class=\"cr-details\">\n\t                  <div class=\"action-card\" style=\"margin-bottom:10px; background-color:white;\"> \n\t                    <div class=\"row\" style=\"background: white;\">\n\t                      <div class=\"col-md-12\">\n\t                      \n\t                         <geoobject-shared-attribute-editor *ngIf=\"req\"\n\t                              #attributeEditor\n\t                              [readOnly]=\"!canEdit(req)\"  \n\t                              [geoObjectType]=\"req.current.geoObjectType\"\n                                [postGeoObject]=\"req.type == 'UpdateGeoObject' ? req.current.geoObject : req.actions[0].geoObjectJson\" \n\t                              [changeRequest]=\"req\"\n\t                              [hierarchies]=\"req.type == 'UpdateGeoObject' ? req.current.hierarchies : req.actions[0].parentJson\"\n\t                              [isGeometryInlined]=\"true\"\n                                [isNew]=\"req.type === 'CreateGeoObject'\"\n                                (valid)=\"setValid($event)\">\n\t                         </geoobject-shared-attribute-editor>\n\t                         \n\t                       </div>\n\t                    </div>\n\t  \n\t                    <div class=\"row\" style=\"border-top: 1px grey solid;margin:0;padding: 10px 0;\">\n\t                      <div class=\"col-md-6\" >\n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                          <label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t                          <textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;margin:0\" [(ngModel)]=\"req.maintainerNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\"></textarea>\n\t                        </div>  \n\t                        \n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                              <label for=\"additionalNotes-{{req.oid}}\"> <localize key=\"change.request.action.detail.additionalNotes\"></localize> </label>\n\t                              <input type=\"text\" id=\"additionalNotes-{{req.oid}}\" class=\"form-control\" style=\"width:100%;\" [(ngModel)]=\"req.additionalNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\">\n\t                        </div>  \n\t                      </div>\n\t                      \n\t                      <div class=\"col-md-6\" >\n\t                        <div>\n\t                          <label><localize key=\"change.request.reference.documents.label\"></localize></label>\n\t                          <div *ngIf=\"req.documents.length > 0\" style=\"border:1px solid #ccc;border-radius: 4px;\">\n\t                            <ul style=\"padding:10px;margin:0;\">\n\t                                <li *ngFor=\"let doc of req.documents\" class=\"list-group-item\" style=\"padding:0;font-size:inherit;\">\n\t                                  <a (click)=\"onDownloadFile(req, doc.oid)\" >{{doc.fileName}}</a>\n\t                                  <i (click)=\"onDeleteFile(req, doc.oid)\" class=\"fa fa-times ico-remove\" style=\"margin-left:10px;\" aria-hidden=\"true\"></i>\n\t                                </li>\n\t                            </ul>\n\t                          </div>\n\t                          <p *ngIf=\"req.documents.length === 0\" style=\"color:grey;font-style:italic;\">\n\t                            <localize key=\"change.request.no.documents.label\"></localize>\n\t                          </p>\n\t                        \n\t                          <div *ngIf=\"req.permissions.includes('WRITE_DOCUMENTS') && isEditing\" style=\"padding:10px 0;\">\n\t                              <!-- Limit file types with: accept=\".xls, .xlsx, .pdf, .doc\" -->\n\t                              <input class=\"ghost-input\" style=\"display:inline-block;padding:0;height:auto;border-radius:0;margin-top:10px;\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" required />\n\t                              \n\t                              <button class=\"btn btn-primary pull-right\" style=\"margin:0;\" (click)=\"onUpload(req)\" [title]=\"'change.request.upload.document.btn.hover' | localize\">\n\t                                <localize key=\"change.request.reference.document.upload\"></localize>\n\t                              </button>\n\t                          </div>\n\t                        </div>\n\t  \n\t                      </div>\n\t                    </div>\n\t                  </div> \n\t  \n\t  \n\t                  <div *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS') || req.permissions.includes('DELETE')\" class=\"button-holder\" style=\"margin-bottom:20px;min-height:40px;\">\n\t                    <span *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS')\">\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\" [title]=\"'change.request.implement.decisions.btn.hover' | localize\">\n\t                        <localize [key]=\"req.type === 'UpdateGeoObject' ? 'change.request.accept.changes.btn' : 'change.request.accept.newGeoObject.btn'\"></localize>\n\t                      </button>\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" *ngIf=\"req.type === 'CreateGeoObject'\" type=\"submit\" (click)=\"onReject(req)\" class=\"btn btn-danger\" style=\"margin:0 10px;\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\">\n                            <localize key=\"change.request.reject.all.btn\"></localize>\n                          </button>\n\t                    </span>\n\n                        <span *ngIf=\"isValid && req.permissions.includes('WRITE_DETAILS') && req.createdBy === getUsername()\">\n                          <button type=\"submit\" *ngIf=\"!isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                          </button>\n                          <button type=\"submit\" *ngIf=\"isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                          </button>\n                          <button type=\"submit\" role=\"button\" class=\"btn btn-primary\" *ngIf=\"isEditing\" (click)=\"onUpdate(req)\" [title]=\"'modal.button.update' | localize\" >\n                            <localize key=\"modal.button.update\"></localize>\n                          </button>\n                          \n                          <button type=\"submit\" role=\"button\" class=\"btn btn-danger pull-right\" [disabled]=\"!isEditing\" *ngIf=\"req.permissions.includes('DELETE') && req.createdBy === getUsername()\" (click)=\"onDelete(req)\" [title]=\"'change.request.delete.request.hover' | localize\" >\n                            <localize key=\"change.request.delete.request.btn\"></localize>\n                          </button>\n                        </span>\n\t                  </div>\n                  </div>\n                </div>\n                <!-- <div class=\"col-md-1\"></div> -->\n              </div>\n  \n            </td>\n          </tr> <!-- END Action panel -->\n          \n        </ng-template>\n      </tbody>\n    </table>\n    <div class=\"solid-table-footer\">\n\t    <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n        <pagination-controls (pageChange)=\"pageChange($event)\"></pagination-controls>\n\t    </div>\n    </div>\n  </div>   \n</div>\n","import { ActionTypes, ChangeType } from \"@registry/model/constants\";\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeOverTimeAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectType, HierarchyOverTime, HierarchyOverTimeEntry, ValueOverTime } from \"@registry/model/registry\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { v4 as uuid } from \"uuid\";\nimport { GeometryService } from \"@registry/service\";\nimport { Subject } from \"rxjs\";\n\nexport class ChangeRequestChangeOverTimeAttributeEditor {\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    attribute: AttributeType;\n\n    editAction: AbstractAction;\n\n    hierarchy: HierarchyOverTime;\n\n    editors: ValueOverTimeCREditor[];\n\n    private _isValid: boolean;\n\n    onChangeSubject: Subject<any> = new Subject<any>();\n\n    constructor(changeRequestEditor: ChangeRequestEditor, attribute: AttributeType, hierarchy: HierarchyOverTime) {\n        this.changeRequestEditor = changeRequestEditor;\n        this.attribute = attribute;\n        this.hierarchy = hierarchy;\n\n        this.getEditAction();\n\n        if (hierarchy != null) {\n            for (let j = 0; j < this.hierarchy.entries.length; j++) {\n                let hierarchyEntry = this.hierarchy.entries[j];\n\n                if (hierarchyEntry.parents == null) {\n                    hierarchyEntry.parents = {};\n                }\n                if (hierarchyEntry.loading == null) {\n                    hierarchyEntry.loading = {};\n                }\n\n                for (let i = 0; i < this.hierarchy.types.length; i++) {\n                    let current = this.hierarchy.types[i];\n\n                    if (hierarchyEntry.parents[current.code] == null) {\n                        hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n                    }\n                }\n            }\n        }\n\n        this.editors = this.generateEditors();\n    }\n\n    getEditAction() {\n        if (this.editAction == null) {\n            let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n            if (actions.length === 0) {\n                this.editAction = new UpdateAttributeOverTimeAction(this.attribute.code);\n\n                if (this.attribute.code === \"_PARENT_\") {\n                    (this.editAction as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchy.code;\n                }\n            } else {\n                this.editAction = actions[actions.length - 1];\n            }\n        }\n\n        return this.editAction;\n    }\n\n    onChange(type: ChangeType) {\n        // If our attribute action has changes it needs to be added to the ChangeRequest actions. Otherwise we can remove it.\n        let hasChanges: boolean = this.hasChanges();\n\n        let index = this.changeRequestEditor.changeRequest.actions.findIndex(action => this.editAction === action);\n\n        if (index !== -1 && !hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.splice(index, 1);\n        } else if (index === -1 && hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.push(this.editAction);\n        }\n\n        this.validate();\n\n        this.onChangeSubject.next(type);\n        this.changeRequestEditor.onChange(type);\n    }\n\n    hasChanges(): boolean {\n        let hasChanges: boolean = true;\n\n        if (this.editAction.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n            let updateAction: UpdateAttributeOverTimeAction = this.editAction as UpdateAttributeOverTimeAction;\n\n            if (updateAction.attributeDiff.valuesOverTime.length === 0) {\n                hasChanges = false;\n            }\n        }\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(skipExists: boolean = false): boolean {\n        let validEditors = this.validateEditors();\n        let hasTimeConflict = this.changeRequestEditor.dateService.checkRanges(this.attribute, this.editors);\n\n        let hasExistConflict = false;\n        if (this.attribute.code !== \"exists\") {\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existEditors = (this.changeRequestEditor.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n            hasExistConflict = this.changeRequestEditor.dateService.checkExistRanges(this.editors, existEditors);\n        } else if (!skipExists) {\n            this.changeRequestEditor.validate(true); // If the exists attribute has changed we must revalidate all other attributes\n        }\n\n        this._isValid = validEditors && !hasTimeConflict && !hasExistConflict;\n\n        return this._isValid;\n    }\n\n    private validateEditors(): boolean {\n        let valid: boolean = true;\n\n        this.editors.forEach(editor => {\n            if (!editor.validate()) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string) {\n        if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n            let index = this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestEditor.geoObject.attributes[this.attribute.code].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditor(oid: string) {\n        let matches = this.editors.filter(editor => editor.oid === oid);\n        return matches.length > 0 ? matches[0] : null;\n    }\n\n    public getEditors(includeUnmodified: boolean = true): ValueOverTimeCREditor[] {\n        return this.editors.filter(editor => includeUnmodified || editor.diff != null);\n    }\n\n    generateEditors(): ValueOverTimeCREditor[] {\n        let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n        let editors: ValueOverTimeCREditor[] = [];\n\n        // First, we have to create a view for every ValueOverTime object. This is done to simply display what's currently\n        // on the GeoObject\n        if (this.attribute.code === \"_PARENT_\") {\n            this.hierarchy.entries.forEach((entry: HierarchyOverTimeEntry) => {\n                let editor = new HierarchyCREditor(this, this.attribute, this.editAction, entry, this.hierarchy);\n\n                editors.push(editor);\n            });\n        } else {\n            if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n                this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.forEach((vot: ValueOverTime) => {\n                    let editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n\n                    editor.valueOverTime = vot;\n\n                    editors.push(editor);\n                });\n            }\n        }\n\n        // Next, we must apply all changes which may exist in the actions.\n        if (this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            let len = actions.length;\n            for (let i = 0; i < len; ++i) {\n                let updateAttrAction: UpdateAttributeOverTimeAction = actions[i] as UpdateAttributeOverTimeAction;\n\n                updateAttrAction.attributeDiff.valuesOverTime.forEach((votDiff: ValueOverTimeDiff) => {\n                    let index = editors.findIndex(editor => editor.oid === votDiff.oid);\n                    let editor = (index === -1) ? null : editors[index];\n\n                    if (editor == null) {\n                        if (this.attribute.code === \"_PARENT_\") {\n                            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n                        } else {\n                            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n                        }\n\n                        editor.diff = votDiff;\n\n                        editors.push(editor);\n                    } else {\n                        editor.diff = votDiff;\n\n                        if (this.attribute.code === \"_PARENT_\") {\n                            (editor as HierarchyCREditor).hierarchyEntry.parents = votDiff.parents;\n                        }\n                    }\n                });\n            }\n        }\n\n        return editors;\n    }\n\n    public createNewVersion(original?: ValueOverTimeCREditor): ValueOverTimeCREditor {\n        let editor: ValueOverTimeCREditor;\n\n        // Create an instance of the appropriate editor object\n        if (this.attribute.code === \"_PARENT_\") {\n            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n        } else {\n            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n        }\n\n        // If we're creating a new GeoObject, add it to that GeoObject\n        if (this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            if (this.attribute.code === \"_PARENT_\") {\n                (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n                (editor as HierarchyCREditor).hierarchyOverTime.entries.push((editor as HierarchyCREditor).hierarchyEntry);\n            } else {\n                let vot = new ValueOverTime();\n                vot.oid = uuid();\n\n                (this.editAction as CreateGeoObjectAction).geoObjectJson.attributes[this.attribute.code].values.push(vot);\n\n                editor.valueOverTime = vot;\n            }\n        } else {\n            editor.constructNewDiff(\"CREATE\");\n        }\n\n        // Set any default values\n        if (this.attribute.type === \"local\") {\n            editor.value = this.changeRequestEditor.localizationService.create();\n        } else if (this.attribute.type === \"geometry\") {\n            let editors = this.getEditors(true);\n\n            if (editors.length > 0) {\n                if (original != null) {\n                    editor.value = JSON.parse(JSON.stringify(original.value));\n                } else {\n                    editor.value = JSON.parse(JSON.stringify(editors[editors.length - 1].value));\n                }\n            } else {\n                editor.value = GeometryService.createEmptyGeometryValue(this.changeRequestEditor.geoObjectType.geometryType);\n            }\n        } else if (this.attribute.type === \"term\") {\n            let terms = GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.changeRequestEditor.geoObjectType, this.attribute.code);\n\n            if (terms && terms.length > 0) {\n                editor.value = terms[0].code;\n            }\n        } else if (this.attribute.code === \"_PARENT_\" && this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n        } else if (this.attribute.code !== \"_PARENT_\") {\n            editor.value = null;\n        }\n\n        this.editors.push(editor);\n\n        this.onChange(ChangeType.ADD);\n\n        return editor;\n    }\n\n    public remove(editor: ValueOverTimeCREditor) {\n        if ((editor.diff != null && editor.diff.action === \"CREATE\") || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            let index = this.editors.findIndex(find => find.oid === editor.oid);\n\n            if (index !== -1) {\n                this.editors.splice(index, 1);\n            }\n        }\n\n        editor.remove();\n\n        this.validate();\n    }\n\n}\n","import { ValueOverTime, AttributeType, TimeRangeEntry, ConflictMessage } from \"@registry/model/registry\";\nimport { CreateGeoObjectAction, UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\nimport bbox from \"@turf/bbox\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { Subject } from \"rxjs\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { LngLatBoundsLike } from \"mapbox-gl\";\nimport { GeoJsonLayer, Layer } from \"@registry/service/layer-data-source\";\n\nexport class ValueOverTimeCREditor implements TimeRangeEntry {\n\n    diff?: ValueOverTimeDiff; // Any existing diff which may be associated with this object.\n    valueOverTime?: ValueOverTime; // Represents a vot on an existing GeoObject. If this is set and the action is UpdateAttribute, we must be doing an UPDATE, and valueOverTime represents the original value in the DB.\n    action: AbstractAction;\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n    attr: AttributeType;\n    conflictMessages: Set<ConflictMessage>;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    _isValid: boolean = true;\n\n    constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction) {\n        this.attr = attr;\n        this.changeRequestAttributeEditor = changeRequestAttributeEditor;\n        this.action = action;\n    }\n\n    onChange(type: ChangeType) {\n        this.changeRequestAttributeEditor.onChange(type);\n        this.onChangeSubject.next(type);\n    }\n\n    getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n        return this.valueOverTime;\n    }\n\n    getValueFromGeoObjectForDiff(): any {\n        return this.valueOverTime.value;\n    }\n\n    validate(): boolean {\n        if (!this.conflictMessages) {\n            this.conflictMessages = new Set();\n        }\n\n        let dateService = this.changeRequestAttributeEditor.changeRequestEditor.dateService;\n        let start = dateService.validateDate(this.startDate == null ? null : dateService.getDateFromDateString(this.startDate), true, true);\n        let end = dateService.validateDate(this.endDate == null ? null : dateService.getDateFromDateString(this.endDate), true, true);\n        this._isValid = true;\n\n        if (!start.valid || !end.valid) {\n            this._isValid = false;\n        }\n\n        this.validateUpdateReference();\n\n        return this._isValid;\n    }\n\n    /**\n     * If we're referencing an existing value over time, that object should exist on our GeoObject (which represents the current state of the database)\n     */\n    validateUpdateReference() {\n        let missingReference = this.changeRequestAttributeEditor.changeRequestEditor.dateService.missingReference;\n\n        this.conflictMessages.delete(missingReference);\n\n        if (this.changeRequestAttributeEditor.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\" && this.diff != null && this.diff.action !== \"CREATE\") {\n            let existingVot = this.findExistingValueOverTimeByOid(this.diff.oid);\n\n            if (existingVot == null) {\n                this._isValid = false;\n\n                this.conflictMessages.add(missingReference);\n            }\n        }\n    }\n\n    findExistingValueOverTimeByOid(oid: string) {\n        if (this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[this.attr.code]) {\n            let index = this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[this.attr.code].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[this.attr.code].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    set oid(oid: string) {\n        if (this.diff != null) {\n            this.diff.oid = oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            this.getGeoObjectTimeRangeStorage().oid = oid;\n        }\n    }\n\n    get oid(): string {\n        if (this.diff != null) {\n            return this.diff.oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().oid;\n        }\n\n        return null;\n    }\n\n    get startDate(): string {\n        return this.getStartDate();\n    }\n\n    public getStartDate(): string {\n        if (this.diff != null && this.diff.newStartDate !== undefined) {\n            return this.diff.newStartDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldStartDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().startDate;\n        }\n\n        return null;\n    }\n\n    constructNewDiff(action: string): void {\n        this.diff = new ValueOverTimeDiff();\n        this.diff.action = action;\n        (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n\n        if (action === \"CREATE\") {\n            this.diff.oid = uuid();\n        } else {\n            let goRange = this.getGeoObjectTimeRangeStorage();\n\n            this.diff.oid = goRange.oid;\n            this.diff.oldStartDate = goRange.startDate;\n            this.diff.oldEndDate = goRange.endDate;\n        }\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        if (this.diff != null) {\n            this.diff.oldStartDate = oldStartDate;\n        }\n    }\n\n    get oldStartDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldStartDate;\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        return this.getEndDate();\n    }\n\n    public getEndDate(): string {\n        if (this.diff != null && this.diff.newEndDate !== undefined) {\n            return this.diff.newEndDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldEndDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().endDate;\n        }\n\n        return null;\n    }\n\n    set startDate(startDate: string) {\n        this.setStartDate(startDate);\n    }\n\n    public setStartDate(startDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.startDate === startDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (startDate === this.diff.oldStartDate) {\n                delete this.diff.newStartDate;\n            } else {\n                this.diff.newStartDate = startDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.startDate = startDate;\n        }\n\n        this.onChange(ChangeType.START_DATE);\n    }\n\n    set endDate(endDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (goRange == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.endDate === endDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (endDate === this.diff.oldEndDate) {\n                delete this.diff.newEndDate;\n            } else {\n                this.diff.newEndDate = endDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.endDate = endDate;\n        }\n\n        this.onChange(ChangeType.END_DATE);\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        if (this.diff != null) {\n            this.diff.oldEndDate = oldEndDate;\n        }\n    }\n\n    get oldEndDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldEndDate;\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        if (this.diff != null && this.diff.newValue !== undefined) {\n            return this.diff.newValue;\n        } else if (this.diff != null && this.diff.oldValue !== undefined) {\n            return this.diff.oldValue;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().value;\n        }\n\n        return null;\n    }\n\n    set value(value: any) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        if (value != null) {\n            if (this.attr.type === \"term\") {\n                value = [value];\n            } else if (this.attr.type === \"date\") {\n                value = new Date(value).getTime();\n            } else if (this.attr.type === \"geometry\") {\n                // Limit max precision for point geometries\n                let maxCoordinatePrecision = 6;\n\n                if (value.type === \"MultiPoint\") {\n                    for (let i = 0; i < value.coordinates.length; ++i) {\n                        let coordinate: number[] = value.coordinates[i];\n\n                        coordinate[0] = Number.parseFloat(coordinate[0].toFixed(maxCoordinatePrecision));\n                        coordinate[1] = Number.parseFloat(coordinate[1].toFixed(maxCoordinatePrecision));\n                    }\n                } else if (value.type === \"Point\") {\n                    value.coordinates = [Number.parseFloat(value.coordinates[0].toFixed(maxCoordinatePrecision)), Number.parseFloat(value.coordinates[1].toFixed(maxCoordinatePrecision))];\n                }\n            }\n        } else if (value == null) {\n            if (this.attr.type === \"geometry\") {\n                value = GeometryService.createEmptyGeometryValue(this.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType);\n            } else if (this.attr.type === \"character\") {\n                value = \"\";\n            }\n        }\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.oid = uuid();\n                    this.diff.action = \"CREATE\";\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                } else {\n                    if (this.areValuesEqual(this.valueOverTime.value, value)) {\n                        return;\n                    }\n\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.action = \"UPDATE\";\n                    this.diff.oid = this.getGeoObjectTimeRangeStorage().oid;\n                    this.diff.oldValue = this.valueOverTime.value;\n                    this.diff.oldStartDate = this.getGeoObjectTimeRangeStorage().startDate;\n                    this.diff.oldEndDate = this.getGeoObjectTimeRangeStorage().endDate;\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                }\n            }\n\n            if (this.diff.action !== \"CREATE\" && this.areValuesEqual(this.diff.oldValue, value)) {\n                delete this.diff.newValue;\n            } else {\n                this.diff.newValue = JSON.parse(JSON.stringify(value));\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            this.valueOverTime.value = value;\n        }\n\n        this.onChange(ChangeType.VALUE);\n    }\n\n    set oldValue(oldValue: any) {\n        if (this.diff != null) {\n            this.diff.oldValue = oldValue;\n        }\n    }\n\n    get oldValue(): any {\n        if (this.diff != null) {\n            return this.diff.oldValue;\n        }\n\n        return null;\n    }\n\n    public setLocalizedValue(localizedValue: LocalizedValue) {\n        this.value = JSON.parse(JSON.stringify(localizedValue));\n    }\n\n    removeEmptyDiff(): void {\n        if (this.diff != null && this.diff.newValue === undefined && this.diff.newStartDate === undefined && this.diff.newEndDate === undefined) {\n            const diffs = (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime;\n\n            const index = diffs.findIndex(d => d.oid === this.diff.oid);\n\n            if (index !== -1) {\n                diffs.splice(index, 1);\n            }\n\n            this.diff = null;\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attr.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (this.attr.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (this.attr.type === \"geometry\") {\n            return turf_booleanequal(val1, val2);\n        } else if (this.attr.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (this.attr.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return val1 === val2;\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public remove(): void {\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff != null && this.diff.action === \"CREATE\") {\n                // Its a new entry, just remove the diff from the diff array\n                let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n                const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n                if (index > -1) {\n                    updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n                }\n            } else if (this.diff != null) {\n                delete this.diff.newValue;\n                delete this.diff.newStartDate;\n                delete this.diff.newEndDate;\n                this.removeEmptyDiff();\n                this.onChange(ChangeType.REMOVE);\n                return;\n            } else if (this.valueOverTime != null && this.diff == null) {\n                this.diff = new ValueOverTimeDiff();\n                this.diff.action = \"DELETE\";\n                this.diff.oid = this.valueOverTime.oid;\n                this.diff.oldValue = this.valueOverTime.value;\n                this.diff.oldStartDate = this.valueOverTime.startDate;\n                this.diff.oldEndDate = this.valueOverTime.endDate;\n                (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n            }\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            let votc = (this.action as CreateGeoObjectAction).geoObjectJson.attributes[this.attr.code].values;\n\n            let index = votc.findIndex((vot) => { return vot.oid === this.valueOverTime.oid; });\n\n            if (index !== -1) {\n                votc.splice(index, 1);\n            }\n        }\n\n        this.onChange(ChangeType.REMOVE);\n    }\n\n    public isDelete() {\n        return this.diff != null && this.diff.action === \"DELETE\";\n    }\n\n    buildDataSource(type: string) {\n        let votEditor = this;\n        return {\n            setLayerData(data: any): void {\n                if (type === \"NEW\") {\n                    votEditor.value = data;\n                } else {\n                    // eslint-disable-next-line no-console\n                    console.log(\"ERROR. Cannot edit old geometry\");\n                }\n            },\n            getLayerData() {\n                if (type === \"NEW\") {\n                    return votEditor.value;\n                } else {\n                    return votEditor.oldValue;\n                }\n            },\n            buildMapboxSource() {\n                let geojson = this.getLayerData();\n\n                return {\n                    type: \"geojson\",\n                    data: geojson\n                };\n            },\n            getGeometryType(): string {\n                return votEditor.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType;\n            },\n            getDataSourceId(): string {\n                return type + \"_\" + votEditor.oid;\n            },\n            getDataSourceProviderId(): string {\n                return votEditor.changeRequestAttributeEditor.changeRequestEditor.changeRequest.oid;\n            },\n            createLayer(oid: string, legendLabel: string, rendered: boolean, color: string): Layer {\n                return new GeoJsonLayer(this, legendLabel, rendered, color);\n            },\n            getBounds(layer: Layer, registryService: RegistryService, listService: ListTypeService): Promise<LngLatBoundsLike> {\n                return new Promise((resolve, reject) => {\n                    resolve(bbox(this.getLayerData()) as LngLatBoundsLike);\n                });\n            }\n        };\n    }\n\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    SimpleChanges,\n    OnDestroy\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService, GeometryService, OLD_LAYER_COLOR } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { VersionDiffView } from \"./manage-versions-model\";\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport * as ColorGen from \"color-generator\";\nimport { CHANGE_REQUEST_SOURCE_TYPE_NEW, CHANGE_REQUEST_SOURCE_TYPE_OLD, GeoJsonLayer, GeoObjectLayerDataSource, Layer, ValueOverTimeDataSource } from \"@registry/service/layer-data-source\";\n\n@Component({\n    selector: \"manage-versions\",\n    templateUrl: \"./manage-versions.component.html\",\n    styleUrls: [\"./manage-versions.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class ManageVersionsComponent implements OnInit, OnDestroy {\n\n    // height (as number) in pixels\n    mapRowHeight: number;\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    message: string = null;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() isGeometryInlined: boolean = false;\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() hierarchy: HierarchyOverTime = null;\n\n    @Input() filterDate: string = null;\n\n    @Input() showAllInstances: boolean = true;\n\n    viewModels: VersionDiffView[] = [];\n\n    isRootOfHierarchy: boolean = false;\n\n    isInitialized: boolean = false;\n\n    layerChangeSub: Subscription;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public geomService: GeometryService, public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, this.hierarchy) as ChangeRequestChangeOverTimeAttributeEditor;\n\n        this.calculateViewModels();\n        this.isRootOfHierarchy = this.attributeType.type === \"_PARENT_\" && (this.hierarchy == null || this.hierarchy.types == null || this.hierarchy.types.length === 0);\n        this.isInitialized = true;\n\n        this.layerChangeSub = this.geomService.layersChange.subscribe(layers => {\n            if (this.viewModels) {\n                this.viewModels.forEach(view => {\n                    this.syncLayerReferences(layers, view);\n                });\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.isNew && this.attributeType.code === \"exists\" && this.viewModels.length === 0) {\n            this.onAddNewVersion();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isInitialized && changes.showAllInstances && changes.showAllInstances.previousValue !== changes.showAllInstances.currentValue) {\n            this.calculateViewModels();\n        }\n        if (changes.readonly && changes.readonly.previousValue !== changes.readonly.currentValue) {\n            this.viewModels.forEach(vm => {\n                vm.destroy(this);\n                if (vm.objectLayer != null) {\n                    this.geomService.removeLayer(vm.objectLayer.getId());\n                    vm.objectLayer = null;\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.viewModels.forEach(vm => vm.destroy(this));\n        this.layerChangeSub.unsubscribe();\n    }\n\n    setFilterDate(filterDate: string, refresh: boolean = true): void {\n        this.filterDate = filterDate;\n        if (refresh) {\n            this.calculateViewModels();\n        }\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasLocalizationChanged(viewModel: VersionDiffView, locale: string): boolean {\n        return viewModel.editor.oldValue != null && this.getValueAtLocale(viewModel.editor.oldValue, locale) !== this.getValueAtLocale(viewModel.editor.value, locale);\n    }\n\n    onDateChange(): any {\n        setTimeout(() => {\n            this.isValid = this.changeRequestAttributeEditor.validate() && this.checkDateFieldValidity();\n\n            this.isValidChange.emit(this.isValid);\n        }, 0);\n    }\n\n    remove(view: VersionDiffView): void {\n        if (this.geomService.isEditing()) {\n            this.geomService.stopEditing();\n        }\n\n        this.changeRequestAttributeEditor.remove(view.editor);\n\n        if (view.summaryKey === SummaryKey.NEW || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            const index = this.viewModels.findIndex(v => v.editor.oid === view.editor.oid);\n\n            if (index > -1) {\n                this.viewModels.splice(index, 1);\n            }\n        }\n\n        if (this.attributeType.type === \"geometry\") {\n            this.geomService.reload();\n        }\n    }\n\n    onAddNewVersion(original?: ValueOverTimeCREditor): void {\n        let editor = this.changeRequestAttributeEditor.createNewVersion(original);\n\n        if (this.isNew && this.changeRequestEditor.geoObject.attributes[\"exists\"]) {\n            let values = this.changeRequestEditor.geoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                editor.startDate = value.startDate;\n                editor.endDate = value.endDate;\n            }\n        }\n\n        this.viewModels.push(new VersionDiffView(this, editor));\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return lv == null ? null : new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    calculateViewModels(): void {\n        let viewModels: VersionDiffView[] = [];\n\n        this.viewModels.forEach(viewModel => viewModel.destroy(this));\n\n        let editors = this.changeRequestAttributeEditor.getEditors(this.showAllInstances);\n\n        let layers: Layer[];\n        if (this.attributeType.code === \"geometry\") {\n            layers = this.geomService.getLayers();\n        }\n\n        editors.forEach((editor: ValueOverTimeCREditor) => {\n            if (this.filterDate == null || this.dateService.between(this.filterDate, editor.startDate, editor.endDate)) {\n                let view = new VersionDiffView(this, editor);\n                viewModels.push(view);\n\n                if (this.attributeType.code === \"geometry\") {\n                    this.syncLayerReferences(layers, view);\n                }\n            }\n        });\n\n        this.viewModels = viewModels;\n    }\n\n    /*\n     * It is possible that somebody else may have already created a particular layer for this view. We want to find it, and make the view\n     *   aware that a layer already exists.\n     */\n    syncLayerReferences(layers: Layer[], view: VersionDiffView) {\n        // Object layer\n        let indexOL = layers.findIndex(layer => layer.dataSource instanceof GeoObjectLayerDataSource && (layer.dataSource as GeoObjectLayerDataSource).getCode() === this.changeRequestEditor.geoObject.attributes[\"code\"] && (layer.dataSource as GeoObjectLayerDataSource).getTypeCode() === this.changeRequestEditor.geoObjectType.code && this.dateService.between((layer.dataSource as GeoObjectLayerDataSource).getDate(), view.editor.startDate, view.editor.endDate));\n        if (indexOL !== -1) {\n            view.objectLayer = layers[indexOL];\n        } else {\n            delete view.objectLayer;\n        }\n\n        // Editing Layer\n        let keyEL = new ValueOverTimeDataSource(\"NEW\", view.editor).getKey();\n        let indexEL = layers.findIndex(l => l.dataSource.getKey() === keyEL);\n        if (indexEL !== -1) {\n            view.editingLayer = layers[indexEL] as GeoJsonLayer;\n        } else {\n            delete view.editingLayer;\n        }\n\n        // Old Layer\n        let keyOLD = new ValueOverTimeDataSource(\"OLD\", view.editor).getKey();\n        let indexOLD = layers.findIndex(l => l.dataSource.getKey() === keyOLD);\n        if (indexOLD !== -1) {\n            view.oldLayer = layers[indexOLD] as GeoJsonLayer;\n        } else {\n            delete view.oldLayer;\n        }\n    }\n\n    onApprove(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.PENDING).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    /**\n     * Hierarchy Editing\n     */\n\n    getTypeAheadObservable(editor: HierarchyCREditor, startDate: string, endDate: string, type: any, entry: any, index: number): Observable<any> {\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let parentTypeCode = null;\n        let hierarchyCode = null;\n\n        if (index > 0) {\n            let pType = editor.changeRequestAttributeEditor.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n                parentTypeCode = parent.geoObject.properties.type;\n            }\n        }\n\n        return new Observable((observer: Observer<Object>) => {\n            if (parentCode == null) {\n                let loopI = index;\n\n                while (parentCode == null && loopI > 0) {\n                    loopI = loopI - 1;\n\n                    let parent = entry.parents[editor.changeRequestAttributeEditor.hierarchy.types[loopI].code];\n\n                    if (parent != null) {\n                        if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                            parentCode = parent.geoObject.properties.code;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        } else if (parent.goCode != null) {\n                            parentCode = parent.goCode;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        }\n                    }\n                }\n            }\n\n            this.service.getGeoObjectSuggestions(entry.parents[type.code].text, geoObjectTypeCode, parentCode, parentTypeCode, hierarchyCode, startDate, endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(editor: HierarchyCREditor, e: TypeaheadMatch, type: any, entry: any, date: string): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        entry.parents[type.code].text = e.item.name + \" : \" + e.item.code;\n        entry.parents[type.code].goCode = e.item.code;\n\n        let parentTypes = [];\n\n        for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n            let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n\n            parentTypes.push(current.code);\n\n            if (current.code === type.code) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects(e.item.code, type.code, parentTypes, true, date).then(ancestors => {\n            // First filter the response for ancestors of only the correct hierarchy\n            ancestors.parents = ancestors.parents.filter(p => p.hierarchyType === editor.changeRequestAttributeEditor.hierarchy.code);\n\n            delete entry.parents[type.code].goCode;\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestors.geoObject.properties.code;\n\n            for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n                let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while (ancestor != null && ancestor.geoObject.properties.type !== current.code) {\n                    if (ancestor.parents.length > 0) {\n                        ancestor = ancestor.parents[0];\n                    } else {\n                        ancestor = null;\n                    }\n                }\n\n                if (ancestor != null) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestor.geoObject.properties.code;\n                }\n            }\n\n            editor.setParentValue(type, entry.parents);\n        });\n    }\n\n    /**\n     * GEOMETRY EDITING\n     */\n\n    toggleGeometryEditing(view: VersionDiffView) {\n        this.geomService.setEditing(!view.editingLayer.editing, view.editingLayer);\n\n        if (this.geoObjectType.geometryType === \"POINT\" || this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            view.coordinate = {};\n        }\n    }\n\n    toggleGeometryView(view: VersionDiffView) {\n        // Using setTimeout() to pull the calc out of the animation stack so the dom can finish mutating before getting final height.\n        setTimeout(() => {\n            this.mapRowHeight = this.elementRef.nativeElement.children[0].getElementsByClassName(\"attribute-element-wrapper\")[0].offsetHeight;\n        }, 0);\n\n        if (this.readonly && !this.isGeometryInlined) {\n            if (view.objectLayer) {\n                this.geomService.removeLayer(view.objectLayer.getId());\n                delete view.objectLayer;\n            } else {\n                let geoObject = this.changeRequestEditor.geoObject;\n                let displayLabel = (geoObject.attributes[\"displayLabel\"].values && geoObject.attributes[\"displayLabel\"].values.length > 0) ? geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : geoObject.attributes.code;\n                let typeLabel = this.changeRequestEditor.geoObjectType.label.localizedValue;\n                let label = displayLabel + \" \" + this.dateService.formatDateForDisplay(view.editor.startDate) + \" (\" + typeLabel + \")\";\n\n                let dataSource = new GeoObjectLayerDataSource(this.service, geoObject.attributes[\"code\"], this.changeRequestEditor.geoObjectType.code, view.editor.startDate);\n                view.objectLayer = dataSource.createLayer(label, true, ColorGen().hexString());\n\n                this.geomService.addOrUpdateLayer(view.objectLayer, 0);\n            }\n        } else {\n            if (view.editingLayer) {\n                if (view.editingLayer.editing) {\n                    this.geomService.stopEditing();\n                }\n                this.geomService.removeLayer(view.editingLayer.getId());\n                this.geomService.unregisterDataSource(CHANGE_REQUEST_SOURCE_TYPE_NEW);\n                delete view.editingLayer;\n            } else {\n                let geoObject = this.changeRequestEditor.geoObject;\n                let displayLabel = (geoObject.attributes[\"displayLabel\"].values && geoObject.attributes[\"displayLabel\"].values.length > 0) ? geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : geoObject.attributes.code;\n                let typeLabel = this.changeRequestEditor.geoObjectType.label.localizedValue;\n                let label = displayLabel + \"* \" + this.dateService.formatDateForDisplay(view.editor.startDate) + \" (\" + typeLabel + \")\";\n\n                let dataSource = new ValueOverTimeDataSource(\"NEW\", view.editor);\n                view.editingLayer = dataSource.createLayer(label, true, ColorGen().hexString()) as GeoJsonLayer;\n                this.geomService.registerDataSource(dataSource);\n\n                this.geomService.addOrUpdateLayer(view.editingLayer, 0);\n            }\n        }\n    }\n\n    toggleOldGeometryView(view: VersionDiffView) {\n        if (view.oldLayer != null) {\n            this.geomService.removeLayer(view.oldLayer.getId());\n            this.geomService.unregisterDataSource(CHANGE_REQUEST_SOURCE_TYPE_OLD);\n            delete view.oldLayer;\n        } else {\n            let geoObject = this.changeRequestEditor.geoObject;\n            let displayLabel = (geoObject.attributes[\"displayLabel\"].values && geoObject.attributes[\"displayLabel\"].values.length > 0) ? geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : geoObject.attributes.code;\n            let typeLabel = this.changeRequestEditor.geoObjectType.label.localizedValue;\n            let label = displayLabel + \" \" + this.dateService.formatDateForDisplay(view.editor.startDate) + \" (\" + typeLabel + \")\";\n\n            let dataSource = new ValueOverTimeDataSource(\"OLD\", view.editor);\n            view.oldLayer = dataSource.createLayer(label, true, OLD_LAYER_COLOR) as GeoJsonLayer;\n            this.geomService.registerDataSource(dataSource);\n\n            this.geomService.addOrUpdateLayer(view.oldLayer, 1);\n        }\n    }\n\n    manualCoordinateChange(view: VersionDiffView): void {\n        if (view.newCoordinateX || view.newCoordinateY) {\n            let newX = view.newCoordinateX;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newX = view.value.coordinates[0];\n            }\n            let newY = view.newCoordinateY;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newY = view.value.coordinates[1];\n            }\n            view.value.coordinates = [[newX || 0, newY || 0]];\n            delete view.newCoordinateX;\n            delete view.newCoordinateY;\n            return;\n        }\n\n        const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n        const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n        view.coordinate.latValid = isLatitude(view.value.coordinates[0][1]);\n        view.coordinate.longValid = isLongitude(view.value.coordinates[0][0]);\n\n        if (!view.coordinate.latValid || !view.coordinate.longValid) {\n            // outside EPSG bounds\n            this.isValid = false;\n            this.isValidChange.emit(this.isValid);\n            return;\n        }\n\n        this.geomService.setPointCoordinates(view.value.coordinates[0][1], view.value.coordinates[0][0]);\n    }\n\n}\n","<div>\n  <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n  </ng-template>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form name=\"manage-versions-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div [ngStyle]=\"{'width' : (isGeometryInlined && geomService.getLayers().length > 0) ? '45%' : '100%'}\" style=\"display:inline-block;\" class=\"col\">\n          <div *ngIf=\"changeRequestEditor.geoObject\" class=\"attribute-version-wrapper\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                <div *ngIf=\"attributeType\">\n                  <table class=\"table table-striped\">\n                    <tbody class=\"attribute-element-wrapper\" >\n                      <p class=\"message\" *ngIf=\"!isRootOfHierarchy && viewModels.length === 0\">\n                        <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize> \n                      </p>\n                      <div *ngIf=\"isRootOfHierarchy\">\n                        <localize key=\"changeovertime.manageVersions.rootOfHierarchy.message\"></localize>\n                      </div>\n                      \n                      <ng-container *ngIf=\"!isRootOfHierarchy\">\n                        <!-- TODO : Fade in out disabled because it doesn't work all that well with stability periods   @fadeInOut -->\n                        <tr  *ngFor=\"let viewModel of viewModels; let i = index;\" class=\"version-row\"\n                            [ngClass]=\"{ 'geometry-edit-active' : (viewModel.editingLayer && viewModel.editingLayer.editing) }\">\n                            <td class=\"version-column-wrapper\" [ngClass]=\"{'error-border': viewModel.hasError(),\n                            'warning-border': viewModel.hasWarning(),\n                            'warning' : viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'}\" >\n                            <div *ngIf=\"viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'\" class=\"version-column-indicator\">\n                                {{viewModel.summaryKeyLocalized}}\n                              </div>\n                            \n                            <table>\n                            \n                              <!-- \n                                Local Type \n                              -->\n                              <ng-container *ngIf=\"attributeType.type === 'local' && viewModel.value\">\n                               <tr *ngFor=\"let loc of viewModel.value.localeValues; let idx = index;\" class=\"attribute-value-row\">\n                                 <td colspan=\"2\">\n                                   <h5><convert-key-label [key]=\"loc.locale\"></convert-key-label></h5>\n                                   \n                                   <input [ngClass]=\"{'has-changed': (hasLocalizationChanged(viewModel, loc.locale) && !isNew)}\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"viewModel.editor.setLocalizedValue(viewModel.value)\" [required]=\"loc.locale === 'defaultLocale'\">\n                                   \n                                   <div class=\"form-input-validation-error-message-wrapper\">\n                                     <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">\n                                       <localize key=\"manage.versions.value.required.message\"></localize>\n                                     </p>\n                                   </div>\n                                   \n                                   <div *ngIf=\"hasLocalizationChanged(viewModel, loc.locale) && !isNew\">\n                                     <p class=\"warning-text display-current-value\" style=\"padding: 5px 0;margin-bottom:0;\">\n                                       <localize key=\"change.request.changed.value.prefix\"></localize>\n                                       {{ getValueAtLocale(viewModel.oldValue, loc.locale) }}\n                                     </p>\n                                   </div>\n                                 </td>\n                               </tr>\n                              </ng-container>\n\n                              <tr *ngIf=\"attributeType.type === 'geometry' || attributeType.type === '_PARENT_' || attributeType.type === 'term' || attributeType.type === 'classification' || attributeType.type === 'character' || attributeType.type === 'date' || attributeType.type === 'integer' || attributeType.type === 'float' || attributeType.type === 'boolean'\" class=\"attribute-value-row\">\n                               <td colspan=\"2\">\n                               \n                                 <div *ngIf=\"attributeType.type === 'term'\">\n                                   <select [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" id=\"mod-{{attributeType.code}}\" [name]=\"'mod-term-' + i + '-' + attributeType.code\" class=\"select-area\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                       <option value=\"\"></option>\n                                       <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\" [value]=\"option.code\">{{option.label.localizedValue}}</option>\n                                   </select>\n                                 </div>\n\n                                 <div *ngIf=\"attributeType.type === 'classification'\">\n                                   <classification-field\n                                    [classificationType]=\"attributeType.classificationType\"\n                                    [rootCode]=\"attributeType.rootTerm != null ? attributeType.rootTerm.code : null\"\n                                    [classNames]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"\n                                    [name]=\"'mod-term-' + i + '-' + attributeType.code\"\n                                    [(value)]=\"viewModel.value\" \n                                    [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                   </classification-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'character'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'date'\">\n                                   <date-field [customStyles]=\"(viewModel.oldValue && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.value\" label=\"\" [inputName]=\"'date-val-' + i\" [allowInfinity]=\"false\" [allowFutureDates]=\"true\" \n                                       [required]=\"true\" [placement]=\"'right'\" [(valid)]=\"isValid\" [disable]=\"readonly\" ></date-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'integer' || attributeType.type === 'float'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"number\" class=\"form-control\" [name]=\"'int-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'boolean'\">\n\t                                 <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t                                   <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === true\" [value]=\"true\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t                                 </label> \n\t                                 <label class=\"radio radio-inline\"> \n\t                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === false\" [value]=\"false\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t                                 </label>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === '_PARENT_'\">\n                                   <ng-container *ngIf=\"hierarchy != null && hierarchy.types != null && hierarchy.types.length > 0\">\n                                     <div style=\"float:left;width:100%;\" *ngFor=\"let type of hierarchy.types; let j = index\"> \n                                       {{type.label}}\n                                       <div class=\"input-group\">\n                                          <input style=\"width:100%;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"type.code + '-' + i\"\n                                            [disabled]=\"readonly || viewModel.summaryKey === 'DELETE' || viewModel.startDate == null || viewModel.startDate === ''\"\n                                            [(ngModel)]=\"viewModel.value.parents[type.code].text\" \n                                            [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(viewModel.editor, viewModel.startDate, viewModel.endDate, type, viewModel.value, j)\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect(viewModel.editor, $event, type, viewModel.value, viewModel.startDate)\" \n                                            (typeaheadLoading)=\"viewModel.value.loading[type.code] = $event\"\n                                            [ngClass]=\"{'inline-loading':viewModel.value.loading[type.code], 'has-changed': (viewModel.oldValue && !isNew)}\"                                                                \n                                            [typeaheadOptionsLimit]=\"7\"\n                                            [typeaheadItemTemplate]=\"customItemTemplate\" \n                                            [typeaheadMinLength]=\"0\"\n                                            [typeaheadWaitMs]=\"300\">\n                                          \n                                            <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\" (click)=\"viewModel.editor.removeType(type)\"> \n                                              <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                            </span>\n                                                  \n                                            <!-- Hack: This is needed for formatting  -->\n                                            <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\"> \n                                            </span>\n                                        </div>\n                                     </div>\n                                   </ng-container>\n                                 </div> \n                                 <div *ngIf=\"viewModel.oldValue && !isNew && attributeType.type !== 'geometry'\">\n                                   <p class=\"warning-text display-current-value\">\n                                     <localize key=\"change.request.changed.value.prefix\"></localize>\n                                     \n                                     <ng-container ng-switch=\"attributeType.type\">\n                                      <ng-container ng-switch-when=\"'boolean'\">\n                                        <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === false) : (viewModel.oldValue === true)\" style=\"padding-left:3px;\">\n                                          <localize key=\"change.request.boolean.option.true\"></localize>\n                                        </span>\n                                        <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === true) : (viewModel.oldValue === false)\" style=\"padding-left:3px;\">\n                                          <localize key=\"change.request.boolean.option.false\"></localize>\n                                        </span>\n                                      </ng-container> \n<!--\n\n  <ng-container ng-switch-when=\"'classification'\">\n    {{viewModel.oldValue}}\n  </ng-container> \n-->                                      \n                                      <ng-container ng-switch-default>\n                                        {{ viewModel.oldValue }}\n                                      </ng-container> \n                                     </ng-container>\n                                   </p>\n                                 </div>\n                                 \n                                 <table *ngIf=\"attributeType.type === 'geometry'\" style=\"padding:0;\">\n                                 <!-- \n                                    Geometry \n                                 -->\n<!--                                   <div *ngIf=\"attributeType.type === 'geometry'\"> -->\n  \n<!--                                     <td style=\"vertical-align: middle;padding-left:0;\"> -->\n                                      <tr>\n                                        <td colspan=\"2\" style=\"padding-left:0;\">\n                                        \n                                          <!-- Old Layer -->\n                                          <button *ngIf=\"viewModel.oldValue && viewModel.editingLayer\" class=\"btn btn-primary\" (click)=\"toggleOldGeometryView(viewModel)\" role=\"button\" [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                           <localize *ngIf=\"!viewModel.oldLayer || !viewModel.oldLayer.rendered\" key=\"changeovertime.manageVersions.geometry.viewOld\"></localize>\n                                           <localize *ngIf=\"viewModel.oldLayer && viewModel.oldLayer.rendered\" key=\"changeovertime.manageVersions.geometry.hideOld\"></localize>\n                                          </button>\n                                          <!-- Object Layer -->\n                                          <button class=\"btn btn-primary\" style=\"margin-left:0;\" (click)=\"toggleGeometryView(viewModel)\" role=\"button\"\n                                            [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"!((viewModel.objectLayer && viewModel.objectLayer.rendered) || (viewModel.editingLayer && viewModel.editingLayer.rendered))\" key=\"changeovertime.manageVersions.geometry.view\"></localize>\n                                            <localize *ngIf=\"((viewModel.objectLayer && viewModel.objectLayer.rendered) || (viewModel.editingLayer && viewModel.editingLayer.rendered))\" key=\"changeovertime.manageVersions.geometry.hide\"></localize>\n                                          </button>\n                                          <!-- Editing Layer -->\n                                          <button *ngIf=\"viewModel.editingLayer && viewModel.editingLayer.rendered && geoObjectType.isGeometryEditable\" class=\"btn btn-primary\" (click)=\"toggleGeometryEditing(viewModel)\" role=\"button\"\n                                            [disabled]=\"readonly || viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"viewModel.editingLayer && !viewModel.editingLayer.editing\" key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                            <localize *ngIf=\"viewModel.editingLayer && viewModel.editingLayer.editing\" key=\"changeovertime.manageVersions.geometry.save\"></localize>\n                                          </button>\n\n                                          <i *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"fa fa-copy clickable\" (click)=\"onAddNewVersion(viewModel.editor)\"></i>                                          \n                                        </td>\n                                      </tr>\n  \n                                      <tr *ngIf=\"(viewModel.editingLayer && viewModel.editingLayer.rendered) && (geoObjectType.geometryType === 'POINT' || geoObjectType.geometryType === 'MULTIPOINT') && viewModel.value && viewModel.value.coordinates && (viewModel.value.coordinates.length == 1 || viewModel.value.coordinates.length == 0)\">\n                                        \n                                        <td style=\"width:50%;padding-left:0;padding-right:5px;\" >\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.latitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][1]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateY\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLatitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n                                        <td style=\"width:50%;\">\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.longitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][0]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateX\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLongitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n  \n                                      </tr>\n<!--                                     </td> -->\n<!--                                   </div> -->\n                                  </table>\n                              </td>\n\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5>\n                              \n                                  <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldStartDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"true\" [required]=\"true\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate && !readonly ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                                  \n                                  <div *ngIf=\"viewModel.oldStartDate && !isNew\">\n                                    <p class=\"warning-text display-current-value\">\n                                      <localize key=\"change.request.changed.value.prefix\"></localize>\n                                      {{ viewModel.oldStartDate }}\n                                    </p>\n                                  </div>\n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                    <h5>\n                                      <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                    </h5>\n                                    <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldEndDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"viewModel.summaryKey !== 'DELETE' && !readonly\" [allowFutureDates]=\"true\" \n                                        [required]=\"true\" [placement]=\"'bottom'\" [oldDate]=\"(viewModel.oldEndDate && !isNew) ? viewModel.oldEndDate : null\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate != null ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                      \n                                    <!--\n                                    <div *ngIf=\"viewModel.oldEndDate && !isNew\">\n                                      <p class=\"warning-text\">\n                                        <localize key=\"change.request.changed.value.prefix\"></localize>\n                                        {{ viewModel.oldEndDate }}\n                                      </p>\n                                    </div>\n                                    -->\n                                  </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"viewModel.editor.conflictMessages && viewModel.editor.conflictMessages.size > 0\">\n                                <p *ngFor=\"let msg of viewModel.editor.conflictMessages\" [ngClass]=\"{'error-message': msg.severity === 'ERROR', 'warning-message': msg.severity === 'WARNING'}\" >\n                                  {{msg.message}}\n                                </p>\n                              </tr>\n                            </table>\n                            \n                          </td>\n                          \n                          \n<!--                             <td *ngIf=\"!readonly && (!this.isNew || attributeType.code !== 'exists') && (filterDate == null || (viewModel.summaryKey !== 'UNMODIFIED' && viewModel.summaryKey !== 'NEW'))\" (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" [title]=\"(viewModel.summaryKey === 'UNMODIFIED' ? 'changeovertime.manageVersions.remove.version' : 'changeovertime.manageVersions.revert.version') | localize\"> -->\n\n              \n                            <!-- Remove button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && (viewModel.summaryKey === 'UNMODIFIED' && viewModel.summaryKey !== 'NEW')\"\n                                [attr.disabled]=\"attributeType.code === 'exists' || filterDate != null\" \n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"(filterDate ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : 'changeovertime.manageVersions.remove.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-times\" ></i> \n                            </td>\n                            <!-- Revert button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && viewModel.summaryKey !== 'UNMODIFIED'\"\n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"('changeovertime.manageVersions.revert.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-undo\" ></i> \n                            </td>\n                        </tr>\n                      </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </li>\n              \n              <li *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"list-group-item\" style=\"text-align: left;\">\n                <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"> \n                  <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                </i>\n              </li>\n              \n            </ul>\n            \n            <!-- TODO : This code copy/pasted into standard-attribute-editor.component.html -->\n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject' && changeRequestEditor.changeRequest.approvalStatus === 'PENDING' && changeRequestEditor.changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.hasChanges()\" style=\"margin-left: 15px;\">\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'}\"\n                    type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n                <localize key=\"change.request.accept.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'}\" \n                    type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n                <localize key=\"change.request.reject.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'}\" \n                    type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n                <localize key=\"change.request.pending.btn\"></localize>\n              </button>\n            </div>              \n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.approvalStatus !== 'PENDING'\" style=\"margin-left:15px;\">\n              <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n                  <localize key=\"change.request.status.accepted\"></localize>\n              </strong>\n              <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n                  <localize key=\"change.request.status.rejected\"></localize>\n              </strong>\n            </div>\n            \n          </div>\n        </div>\n        <geoobject-editor-map style=\"width:55%;display:inline-block;vertical-align:top;margin-top:15px;\" *ngIf=\"isGeometryInlined && geomService.getLayers().length > 0\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" \n          [mapHeight]=\"mapRowHeight\" [readOnly]=\"!geoObjectType.isGeometryEditable && readonly\"\n          [bboxCode]=\"this.changeRequestEditor.geoObject.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"geomService.getLayers()[0].startDate\">\n        </geoobject-editor-map>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Component, OnInit, ViewChild, OnDestroy, Input } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService, MapService, GeometryService } from \"@registry/service\";\n\nimport { Map, NavigationControl } from \"mapbox-gl\";\n\n// eslint-disable-next-line no-unused-vars\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"geoobject-editor-map[geometryType]\",\n    templateUrl: \"./geoobject-editor-map.component.html\",\n    styleUrls: [\"./geoobject-editor-map.component.css\"]\n})\n\n/**\n * This component is used when viewing change requests\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    _mapHeight: number = 400;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set mapHeight(height: number) {\n        if (height > 400) {\n            this._mapHeight = height;\n        }\n    }\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mapDiv\") mapDiv;\n\n    map: Map;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private geomService: GeometryService, private registryService: RegistryService, private mapService: MapService) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.mapDiv.nativeElement.id = Math.floor(Math.random() * (899999)) + 100000;\n\n            this.map = new Map({\n                container: this.mapDiv.nativeElement.id,\n                style: \"mapbox://styles/mapbox/satellite-v9\",\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            });\n\n            this.map.on(\"load\", () => {\n                this.initMap();\n            });\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    getIsValid(): boolean {\n        return this.geomService.isValid();\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            // this.addLayers();\n            // this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n        });\n\n        this.geomService.initialize(this.map, this.geometryType, false);\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl());\n\n        this.zoomToBbox();\n    }\n\n    zoomToBbox(): void {\n        this.geomService.zoomToLayersExtent();\n    }\n\n    public error(err: HttpErrorResponse): void {\n        // TODO\n        console.log(\"ERROR\", err);\n    }\n\n}\n","<div class=\"geoobject-editor-map-wrapper\">\n  <div #mapDiv class=\"map-view-port-inline text-left\" [style.height.px]=\"_mapHeight\" style=\"width:calc(100% - 15px)\"></div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"change-request-page\",\n    templateUrl: \"./change-request-page.component.html\",\n    styleUrls: [\"./change-request-page.css\"]\n})\nexport class ChangeRequestPageComponent implements OnInit {\n\n  pageTitle: string;\n  bsModalRef: BsModalRef;\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n  isContributorOnly: boolean;\n\n  urlSubscriber: any;\n\n  highlightOid: string;\n\n  constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService, private route: ActivatedRoute) {\n      this.isAdmin = service.isAdmin();\n      this.isMaintainer = this.isAdmin || service.isMaintainer();\n      this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n      this.isContributorOnly = service.isContributerOnly();\n  }\n\n  ngOnInit(): void {\n      this.urlSubscriber = this.route.params.subscribe(params => {\n          this.highlightOid = params[\"oid\"];\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.urlSubscriber.unsubscribe();\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>{{pageTitle}}</h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <request-table [toggleId]=\"highlightOid\"></request-table>\n            \n            <submit-change-request *ngIf=\"isContributorOnly\"></submit-change-request>\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { interval } from \"rxjs\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob, ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"scheduled-jobs\",\n    templateUrl: \"./scheduled-jobs.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class ScheduledJobsComponent implements OnInit {\n\n    message: string = null;\n\n    activeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    isViewAllOpen: boolean = false;\n\n    constructor(public service: RegistryService,\n        private modalService: BsModalService,\n        private router: Router,\n        private localizeService: LocalizationService,\n        private ioService: IOService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.onActiveJobsPageChange(1);\n\n        this.pollingData = interval(1000).subscribe(() => {\n            this.activeTimeCounter++;\n            this.completeTimeCounter++;\n\n            if (this.isViewAllOpen) {\n                if (this.activeTimeCounter >= 4) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n                if (this.completeTimeCounter >= 7) {\n                    this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n                    this.completeTimeCounter = 0;\n                }\n            } else {\n                if (this.activeTimeCounter >= 2) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n        if (job.status === \"FEEDBACK\") {\n            return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PageResult<any>): void {\n        page.resultSet.forEach(job => {\n            let stepConfig = {\n                steps: [\n                    { label: this.localizeService.decode(\"scheduler.step.fileImport\"), status: \"COMPLETE\" },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.staging\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.validation\"),\n                        status: job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.databaseImport\"),\n                        status: job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n\n            job = job as ScheduledJobOverview;\n            job.stepConfig = stepConfig;\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    onViewAllCompleteJobs(): void {\n        this.onCompleteJobsPageChange(1);\n\n        this.isViewAllOpen = true;\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-history/\", code]);\n    }\n\n    onActiveJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCompleteJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(job.configuration).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.resultSet | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    <span class=\"date-string-display\">\n                                                      <date-text [date]=\"job.createDate\"></date-text>\n                                                    </span>\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.resultSet | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                              <span class=\"date-string-display\">\n                                <date-text [date]=\"job.createDate\"></date-text>\n                              </span>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <span class=\"date-string-display\">\n                              <date-text [date]=\"job.lastUpdateDate\"></date-text>\n                            </span>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from \"./conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./conflict-widgets/reupload-modal.component\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { Subscription } from \"rxjs\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./job.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class JobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n\n    page: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"IMPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n        for (let i = 0; i < this.page.resultSet.length; ++i) {\n            let pageConflict = this.page.resultSet[i];\n\n            if (pageConflict.id === problem.id) {\n                this.page.resultSet.splice(i, 1);\n            }\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (probType === \"net.geoprism.registry.geoobject.ImportOutOfRangeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.importOutOfRange\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: any): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n        this.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe(data => {\n            if (data.action === \"RESOLVED\") {\n                this.onProblemResolved(data.data);\n            }\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n            this.job = response;\n\n            if (this.job.stage === \"IMPORT_RESOLVE\") {\n                this.page = this.job.importErrors;\n            } else if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.page = this.job.problems;\n\n                for (let i = 0; i < this.page.resultSet.length; ++i) {\n                    let problem = this.page.resultSet[i];\n\n                    if (problem.type === \"RowValidationProblem\") {\n                        this.hasRowValidationProblem = true;\n                    }\n                }\n            }\n\n            if (response.exception) {\n                this.error(response.exception);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.resultSet.forEach(row => {\n            row.selected = this.allSelected;\n        });\n    }\n\n    onReuploadAndResume(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.job = this.job;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.router.navigate([\"/registry/scheduled-jobs\"]);\n        });\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n        if (this.page.resultSet.length === 0) {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n            } else {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n            }\n\n            this.bsModalRef.content.type = ModalTypes.danger;\n\n            this.bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.resolveScheduledJob(historyId).then(response => {\n                    this.router.navigate([\"/registry/scheduled-jobs\"]);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            });\n        }\n    }\n\n    onCancelScheduledJob(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(this.job.configuration).then(response => {\n                // this.bsModalRef.hide()\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              <span class=\"date-string-display\">\n                                <date-text [date]=\"job.createDate\"></date-text>\n                              </span>\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"job-conflict-modal\",\n    templateUrl: \"./job-conflict-modal.component.html\",\n    styleUrls: []\n})\nexport class JobConflictModalComponent implements OnInit {\n\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef) {\n        this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onProblemResolvedListener(problem: any): void {\n        this.onConflictAction.next({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJob, ImportError } from \"@registry/model/registry\";\n\nimport { GeoObjectEditorComponent } from \"../../geoobject-editor/geoobject-editor.component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"import-problem-widget\",\n    templateUrl: \"./import-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ImportProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId(null);\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolved.emit(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>:\n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div *ngIf=\"problem.object != null && problem.object.geoObject != null\" style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"parent-reference-problem-widget\",\n    templateUrl: \"./parent-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return new Observable((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.code, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"term-reference-problem-widget\",\n    templateUrl: \"./term-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(conflict: any): Observable<any> {\n        return Observable.create((observer: any) => {\n            this.iService.getTermSuggestions(conflict.mdAttributeId, this.searchLabel, \"20\").then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.termId = e.item.value;\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            classifierId: this.termId,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"row-validation-problem-widget\",\n    templateUrl: \"./row-validation-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class RowValidationProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return new Observable((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.code, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">{{errorMessage}}</div>\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <div>{{message}}</div>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\n\nimport { TaskService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"task-viewer\",\n    templateUrl: \"./task-viewer.component.html\",\n    styleUrls: [\"./task-viewer.component.css\"],\n    providers: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completedTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    isViewAllOpen: boolean = false;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private taskService: TaskService, private localizeService: LocalizationService, private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onInProgressTasksPageChange(1);\n    }\n\n    onInProgressTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, \"UNRESOLVED\").then(page => {\n            this.inProgressTasks = page;\n        });\n    }\n\n    onCompletedTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, \"RESOLVED\").then(page => {\n            this.completedTasks = page;\n        });\n    }\n\n    onCompleteTask(task: any): void {\n        // this.isViewAllOpen = true;\n\n        this.taskService.completeTask(task.id).then(() => {\n            const index = this.inProgressTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.inProgressTasks.resultSet.splice(index, 1);\n            }\n\n            if(this.isViewAllOpen) {\n                this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            }\n        });\n    }\n\n    onMoveTaskToInProgress(task: any): void {\n        this.isViewAllOpen = true;\n\n        this.taskService.setTaskStatus(task.id, \"UNRESOLVED\").then(() => {\n            const index = this.completedTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.completedTasks.resultSet.splice(index, 1);\n            }\n\n            this.completedTasks.resultSet.splice(index, 1);\n            this.inProgressTasks.resultSet.push(task);\n        });\n    }\n\n    onToggleCompletedTasks(): void {\n        this.isViewAllOpen = !this.isViewAllOpen;\n\n        if (this.isViewAllOpen) {\n            this.onCompletedTasksPageChange(1);\n        }\n    }\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n\n    <div class=\"row\" *ngIf=\"inProgressTasks.resultSet.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n          <div\n            *ngFor=\"let task of inProgressTasks.resultSet | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    <date-text [date]=\"task.createDate\"></date-text>\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked\n                      id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\"\n                      (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\"\n                      name=\"{{task.id}}-completed\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"inProgressTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <h2 class=\"col-md-9\">\n        <localize key=\"tasks.completedTasksTitle\"></localize>\n      </h2>\n      <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onToggleCompletedTasks()\"\n        class=\"btn btn-default pull-right\" role=\"button\">\n        <localize *ngIf=\"!isViewAllOpen\" key=\"tasks.viewCompletedTasksButton\"></localize>\n        <localize *ngIf=\"isViewAllOpen\" key=\"tasks.hideCompletedTasksButton\"></localize>\n      </button>\n    </div>\n    <hr>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.resultSet.length > 0\">\n          <div\n            *ngFor=\"let task of completedTasks.resultSet | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\" style=\"margin-right:30px;\">\n                    <date-text [date]=\"task.createDate\"></date-text>\n                  </span>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.completeDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    <date-text [date]=\"task.completedDate\"></date-text>\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\"\n                      (click)=\"onMoveTaskToInProgress(task)\" [id]=\"task.id+ '-inProgress'\" [name]=\"task.id+ '-inProgress'\"\n                      value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\"\n                    [id]=\"task.id+ '-completed'\" [name]=\"task.id+ '-completed'\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.resultSet.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\">\n            <localize key=\"tasks.no.completed.tasks.message\"></localize>\n          </p>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { ListTypeService } from '@registry/service/list-type.service';\nimport { ListTypeVersion } from '@registry/model/list-type';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-export-synchronization-config',\n  templateUrl: './fhir-export-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirExportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  subscription: Subscription = null;\n  versions: { [key: string]: ListTypeVersion[] } = {};\n  implementations: { className: string, label: string }[] = [];\n  lists: {label:string, oid:string}[] = [];\n\n  constructor(private service: SynchronizationConfigService, private rService: ListTypeService) { }\n\n  ngOnInit(): void {\n\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirExportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        levels: [],\n        hierarchy: null\n      }\n    }\n\n    if (this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        var level = this.config.configuration.levels[i];\n\n        // Get version options\n        this.onSelectMasterList(level);\n      }\n    }\n    else {\n      this.config.configuration.levels = [];\n    }\n\n    // Get \n    this.rService.getAllLists().then(response => {\n      this.lists = response;\n    });\n  }\n\n  onSelectMasterList(level: FhirSyncLevel): void {\n\n    if (level.masterListId != null && level.masterListId.length > 0) {\n\n      this.rService.getPublicVersions(level.masterListId).then(list => {\n        this.versions[level.masterListId] = list;\n      });\n    }\n    else {\n      this.versions[level.masterListId] = null;\n    }\n  }\n\n  addLevel(): void {\n    var level = {\n      masterListId: null,\n      versionId: null,\n      level: this.config.configuration.levels.length,\n    };\n\n    this.config.configuration.levels.push(level);\n  }\n\n  removeLevel(i: number): void {\n    this.config.configuration.levels.splice(i, 1);\n\n    // Reorder the level\n    if (this.config.configuration != null && this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        this.config.configuration.levels[i].level = i;\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.units\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 3%\">\n                            <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.field\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.forDate\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"synchronization.config.implementation\"></localize>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let level of config.configuration.levels; let i = index;\"\n                        [style.background-color]=\"'#F7F7F7'\">\n                        <td style=\"width: 3%\">\n                            <label style=\"padding: 10px 0; margin: 0;\">\n                                <localize key=\"sync.level.label\"></localize> {{level.level + 1}}\n                            </label>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.masterListId\" (change)=\"onSelectMasterList(level)\"\n                                [name]=\"'masterList' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let list of lists\" [value]=\"list.oid\">{{list.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select *ngIf=\"versions[level.masterListId] != null\" [(ngModel)]=\"level.versionId\"\n                                [name]=\"'version' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let version of versions[level.masterListId]\" [value]=\"version.oid\">\n                                    {{version.forDate}} (<localize key=\"list.type.version\"></localize> {{version.versionNumber}})\n                                </option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.implementation\" [name]=\"'implementation' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let implementation of implementations\"\n                                    [value]=\"implementation.className\">{{implementation.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <div>\n                                <a style=\"padding: 10px;\" (click)=\"removeLevel(i)\"\n                                    [title]=\"'button.delete.helptext' | localize\">\n                                    <i class=\"fa fa-trash-o ico-remove\"></i> <label\n                                        style=\"cursor: pointer; margin-left: 9px;\">\n                                        <localize key=\"sync.level.delete\"></localize>\n                                    </label>\n                                </a>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"button-column\"><a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\"\n                                (click)=\"addLevel()\"></a></td>\n                    </tr>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { AttributeConfigInfo, DHIS2AttributeMapping, SyncLevel } from \"@registry/model/sync\";\n\nlet DEFAULT_MAPPING_STRATEGY = \"net.geoprism.registry.etl.DHIS2AttributeMapping\";\n\nexport interface GOTAttributeConfig {\n  geoObjectTypeCode?: string;\n  mappings: DHIS2AttributeMapping[];\n  attrConfigInfos: AttributeConfigInfo[];\n}\nexport interface LevelRow {\n  isAttributeEditor: boolean;\n\n  level?: SyncLevel;\n  levelNum?: number;\n\n  attrCfg?: GOTAttributeConfig;\n}\n\n@Component({\n\n    selector: \"dhis2-synchronization-config\",\n    templateUrl: \"./dhis2-synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class Dhis2SynchronizationConfigComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() cOrg: OrgSyncInfo = null;\n\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  organizations: OrgSyncInfo[] = [];\n\n  types: GeoObjectType[] = [];\n\n  levelRows: LevelRow[] = [];\n\n  orgUnitGroups: any[] = [];\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    // Get the types\n    // this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n    //   this.types = types;\n    // });\n\n      if (this.config.configuration == null) {\n          this.config.configuration = {\n              levels: [],\n              hierarchyCode: null\n          };\n      }\n\n      this.levelRows = [];\n\n      if (this.config.configuration.levels != null) {\n          for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n              var level = this.config.configuration.levels[i];\n\n              var levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n              this.levelRows.push(levelRow);\n          }\n      } else {\n          this.config.configuration.levels = [];\n      }\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      this.fieldChange.subscribe(() => {\n          this.clearMappingData();\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.fieldChange.unsubscribe();\n  }\n\n  onChangeHierarchy(): void {\n      this.clearMappingData();\n  }\n\n  buildDefaultMappings(): DHIS2AttributeMapping[] {\n      return [\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"name\",\n              dhis2AttrName: \"name\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"shortName\",\n              dhis2AttrName: \"shortName\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"code\",\n              dhis2Id: \"code\",\n              externalId: null,\n              dhis2AttrName: \"code\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"openingDate\",\n              dhis2AttrName: \"openingDate\"\n          }\n          /*\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"created\",\n              dhis2AttrName: \"created\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"lastUpdateDate\",\n              externalId: null,\n              dhis2Id: \"lastUpdated\",\n              dhis2AttrName: \"lastUpdated\"\n          },\n          */\n      ];\n  }\n\n  clearMappingData(): void {\n      this.types = [];\n      this.levelRows = [];\n      this.config.configuration[\"levels\"] = [];\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      let lvl = {\n          type: null,\n          geoObjectType: null,\n          level: 0,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      this.config.configuration[\"levels\"] = [lvl];\n      this.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n  }\n\n  onSelectLevelType(levelRow: LevelRow): void {\n      if (levelRow.level.type === \"RELATIONSHIPS\") {\n          levelRow.attrCfg.mappings = [];\n          levelRow.level.mappings = [];\n\n          let editorIndex = this.getEditorIndex();\n          if (editorIndex !== -1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n      } else {\n          if (levelRow.attrCfg.mappings.length === 0) {\n              levelRow.attrCfg.mappings = this.buildDefaultMappings();\n              levelRow.level.mappings = levelRow.attrCfg.mappings;\n\n              let len = levelRow.level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = levelRow.level.mappings[i];\n\n                  levelRow.attrCfg.attrConfigInfos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n          }\n      }\n  }\n\n  deleteMapping(levelRow: LevelRow, index: number): void {\n      levelRow.attrCfg.mappings.splice(index, 1);\n  }\n\n  addNewMapping(levelRow: LevelRow): void {\n      levelRow.attrCfg.mappings.push({\n          attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n          cgrAttrName: null,\n          dhis2AttrName: null,\n          externalId: null,\n          terms: []\n      });\n  }\n\n  addLevel(): void {\n      var lvl = {\n          type: null,\n          geoObjectType: null,\n          level: this.config.configuration.levels.length,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      var len = this.config.configuration[\"levels\"].push(lvl);\n      this.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n  }\n\n  removeLevel(levelNum: number, levelRowIndex: number): void {\n      if (levelNum < this.config.configuration[\"levels\"].length) {\n          var editorIndex = this.getEditorIndex();\n          if (editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          this.levelRows.splice(levelRowIndex, 1);\n\n          var newLevelNum = 0;\n          for (var i = 0; i < this.levelRows.length; ++i) {\n              var levelRow: LevelRow = this.levelRows[i];\n\n              levelRow.levelNum = newLevelNum;\n\n              if (!levelRow.isAttributeEditor) {\n                  newLevelNum = newLevelNum + 1;\n              }\n          }\n\n          this.config.configuration[\"levels\"].splice(levelNum, 1);\n      }\n  }\n\n  getEditorIndex(): number {\n      for (var i = 0; i < this.levelRows.length; ++i) {\n          var levelRow = this.levelRows[i];\n\n          if (levelRow.isAttributeEditor) {\n              return i;\n          }\n      }\n\n      return -1;\n  }\n\n  configureAttributes(levelRow: any): void {\n      var editorIndex = this.getEditorIndex();\n\n      if (editorIndex !== -1) {\n          this.levelRows.splice(editorIndex, 1);\n\n          if (editorIndex === levelRow.levelNum + 1) {\n              return;\n          }\n      }\n\n      this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n  }\n\n  getTermOptions(info: AttributeConfigInfo, dhis2Id: string) {\n      for (var i = 0; i < info.dhis2Attrs.length; ++i) {\n          var dhis2Attr = info.dhis2Attrs[i];\n\n          if (dhis2Attr.dhis2Id === dhis2Id) {\n              return dhis2Attr.options;\n          }\n      }\n  }\n\n  onChangeDHIS2Attr(mapping: DHIS2AttributeMapping) {\n      if (mapping.dhis2Id == null || mapping.dhis2Id === \"\") {\n          if (mapping.terms != null) {\n              mapping.terms = {};\n          }\n\n          mapping.dhis2AttrName = null;\n\n          return;\n      }\n\n      mapping.terms = {};\n\n      let len = mapping.info.dhis2Attrs.length;\n      for (let i = 0; i < len; ++i) {\n          if (mapping.info.dhis2Attrs[i].dhis2Id === mapping.dhis2Id) {\n              if (mapping.info.dhis2Attrs[i].dhis2Id !== mapping.info.dhis2Attrs[i].name) {\n                  mapping.externalId = mapping.info.dhis2Attrs[i].dhis2Id;\n              } else {\n                  mapping.externalId = null;\n              }\n              mapping.dhis2AttrName = mapping.info.dhis2Attrs[i].name;\n          }\n      }\n  }\n\n  onSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n      if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n          var levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n          levelRow.attrCfg = null;\n          levelRow.level.mappings = [];\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          return;\n      }\n\n      var attrCfg = this.levelRows[levelRowIndex].attrCfg;\n      if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n          // Resume an editing session on attributes that we fetched previously\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex !== levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n\n              if (editorIndex < levelRowIndex) {\n                  levelRowIndex = levelRowIndex - 1;\n              }\n          }\n\n          this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n      } else {\n          this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((infos: AttributeConfigInfo[]) => {\n              var editorIndex = this.getEditorIndex();\n              var levelRow: LevelRow = this.levelRows[levelRowIndex];\n              var level = levelRow.level;\n\n              if (level.mappings == null) {\n                  level.mappings = [];\n              }\n\n              if (level.mappings.length === 0 || isDifferentGot) {\n                  level.mappings = this.buildDefaultMappings();\n              }\n\n              let len = level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = level.mappings[i];\n\n                  infos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n\n                  // mapping.dhis2Id is a derived field which only exists on the front-end. This is necessary because of the way DHIS2 separates built-in attributes from custom attributes.\n                  // Only custom attributes actually have ids. Standard attributes are referenced via their name.\n                  level.mappings.forEach((levelMapping) => {\n                      if (levelMapping.dhis2AttrName && levelMapping.dhis2AttrName === mapping.dhis2AttrName) {\n                          if (levelMapping.externalId) {\n                              mapping.dhis2Id = levelMapping.externalId;\n                          } else if (levelMapping.dhis2AttrName) {\n                              mapping.dhis2Id = levelMapping.dhis2AttrName;\n                          }\n                      }\n                  });\n              }\n\n              levelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, mappings: level.mappings, attrConfigInfos: infos };\n\n              if (editorIndex !== -1 && (editorIndex === levelRowIndex + 1 || infos.length > 0)) {\n                  this.levelRows.splice(editorIndex, 1);\n\n                  if (editorIndex < levelRowIndex) {\n                      levelRowIndex = levelRowIndex - 1;\n                  }\n              }\n\n              if (!isDifferentGot) {\n                  this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: levelRow.attrCfg, level: levelRow.level, levelNum: levelRow.levelNum });\n              }\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  mapCgrAttr(info: AttributeConfigInfo, mapping: DHIS2AttributeMapping) {\n      if (info == null) {\n          mapping.cgrAttrName = null;\n          mapping.info = null;\n          mapping.dhis2AttrName = null;\n          mapping.externalId = null;\n          mapping.terms = null;\n          mapping.isOrgUnitGroup = null;\n          return;\n      }\n\n      mapping.cgrAttrName = info.cgrAttr.name;\n      mapping.info = info;\n      mapping.dhis2AttrName = null;\n      mapping.externalId = null;\n      mapping.terms = {};\n      mapping.isOrgUnitGroup = false;\n      mapping.attributeMappingStrategy = info.attributeMappingStrategies[0];\n  }\n\n  onChangeTargetType(mapping: DHIS2AttributeMapping): void {\n      mapping.externalId = null;\n\n      for (const key in mapping.terms) {\n          if (mapping.terms.hasOwnProperty(key)) {\n              mapping.terms[key] = null;\n          }\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.onError.emit(err);\n  }\n\n}\n","      <div>\n        <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"select\">\n              <select type=\"text\" [(ngModel)]=\"config.configuration.hierarchyCode\" name=\"hierarchy\" (change)='onChangeHierarchy()' [disabled]=\"config.oid != null\" required>\n                <option></option>\n                <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n              </select>\n            </span>\n          </div>\n        </div>\n        \n        <div *ngIf=\"config.configuration.hierarchyCode != null\" class=\"row-holder\" >\n      \n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.units\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"list-table-wrapper\">\n              <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                  <tr>\n                    <th style=\"width:3%\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                    <th style=\"width:17%\">\n                      <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                    </th>\n                    <th style=\"width:25%; text-align: center;\">\n                      <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                    <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" (change)=\"onSelectLevelType(levelRow)\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                        <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                        <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                         <option value=\"NONE\"><localize key=\"synchronization.config.none\"></localize></option>\n                      </select>\n                    </td>\n                    <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                        <option></option>\n                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <div>\n                        <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n                          <i class=\"fa fa-trash-o ico-remove\"></i>\n                          <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n                        </a> \n                      </div>\n                      <div>\n                        <a *ngIf=\"levelRow.level.geoObjectType && (levelRow.level.type === 'ORG_UNITS' || levelRow.level.type === 'ALL')\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                          <i class=\"fa fa-edit\"></i>\n                          <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.attributes.editButton\"></localize></label>\n                        </a> \n                      </div>\n                    </td>\n                    <td colspan=\"5\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                      <h4><localize key=\"sync.attr.attributes.title\"></localize></h4>\n                      <table class=\"table table-bordered table-striped\" style=\"margin-left:80px; width: calc(100% - 80px)\">\n\n                        <colgroup>\n                          <col width=\"5%\">\n                          <col width=\"95%\">\n                        </colgroup>\n                        <tbody>\n                          <tr *ngFor=\"let mapping of levelRow.attrCfg.mappings; let mappingIndex = index;\">\n                            <td colspan=\"2\" class=\"row-holder\">\n                              <table style=\"width:80%; margin-top:15px; margin-bottom: 10px;\">\n                                <thead>\n                                <tr>\n                                  <th style=\"width:5%\"></th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\">\n                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                <tr>\n                                  <td style=\"width:5%\">\n                                    <i (click)=\"deleteMapping(levelRow, mappingIndex)\" class=\"fa fa-times\"></i>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <select style=\"width:95%\" [(ngModel)]=\"mapping.cgrAttrName\" (change)=\"mapCgrAttr($event.target.selectedIndex == 0 ? null : levelRow.attrCfg.attrConfigInfos[$event.target.selectedIndex-1], mapping)\" [name]=\"'sourceAttrSelect' + i + '-' + mappingIndex + (mapping.cgrAttrName ? mapping.cgrAttrName : '')\">\n                                      <option [ngValue]=\"null\"></option>\n                                      <option *ngFor=\"let info of levelRow.attrCfg.attrConfigInfos\" [ngValue]=\"info.cgrAttr.name\">\n                                        <label style=\"color:#999;\">{{info.cgrAttr.label}}</label>\n                                      </option>\n                                    </select>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\" style=\"color:#999;\">{{mapping.info.cgrAttr.typeLabel}}</label>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\" style=\"margin-right:20px; width:23%\">\n                                    <select style=\"width:95%\" *ngIf=\"mapping.info.cgrAttr.type === 'term'\" [(ngModel)]=\"mapping.isOrgUnitGroup\" (change)=\"onChangeTargetType(mapping)\" [name]=\"'isOrgUnitGroup' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"false\"><localize key=\"sync.attr.targetTypeOptionSet\"></localize></option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type !== 'term' && mapping.info.cgrAttr.name\" style=\"float:right; margin-right:20px; width:23%\">\n                                    <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n                                  </td>\n                                  <td style=\"width:23%\" *ngIf=\"mapping.info\">\n                                    <select *ngIf=\"mapping.info.dhis2Attrs.length > 0 && !mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.dhis2Id\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeDHIS2Attr(mapping)\">\n                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                      <option [ngValue]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of mapping.info.dhis2Attrs\">\n                                        {{dhis2Attr.name}}\n                                      </option>\n                                    </select>\n                                    <label *ngIf=\"mapping.info.dhis2Attrs.length == 0 && !mapping.isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n                                  </td>\n                                </tr>\n                              </tbody>\n                            </table>\n                            <div *ngIf=\"mapping.info && ((mapping.externalId != null && mapping.externalId.length > 0) || mapping.isOrgUnitGroup)\">\n                              <table *ngFor=\"let term of mapping.info.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n                                <thead>\n                                  <tr>\n                                    <th style=\"width:25%\">\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <!-- To -->\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label>\n                                        <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n                                        <localize *ngIf=\"mapping.isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n                                      </label>\n                                    </th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <tr>\n                                    <td></td>\n                                    <td><label style=\"color:#999;\">{{term.label}}</label></td>\n                                    <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n                                    <td>\n                                      <select *ngIf=\"!mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let option of getTermOptions(mapping.info, mapping.externalId)\" [value]=\"option.code\">\n                                          {{option.name}}\n                                        </option>\n                                      </select>\n                                      <select *ngIf=\"mapping.isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                                      </select>\n                                    </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td class=\"button-column\">\n                            <a class=\"fa fa-plus\" (click)=\"addNewMapping(levelRow)\" [title]=\"'sync.attr.attributes.add.tooltip' | localize\"></a>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>         \n        </div>\n      </div>\n    </div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { SynchronizationConfigModalComponent } from \"./synchronization-config-modal.component\";\n\n@Component({\n    selector: \"synchronization-config-manager\",\n    templateUrl: \"./synchronization-config-manager.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\n    message: string = null;\n\n    page: PageResult<SynchronizationConfig> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 20\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.service.getPage(pageNumber, this.page.pageSize).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    create(): void {\n        this.service.edit(null).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(null, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onEdit(config: SynchronizationConfig): void {\n        this.service.edit(config.oid).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(response.config, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onRemove(config: SynchronizationConfig): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + config.label.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(config.oid).then(() => {\n                this.onPageChange(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(config: SynchronizationConfig): void {\n        this.router.navigate([\"/registry/synchronization-config/\", config.oid]);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { SynchronizationConfig, OrgSyncInfo } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\n\n@Component({\n    selector: \"synchronization-config-modal\",\n    templateUrl: \"./synchronization-config-modal.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  config: SynchronizationConfig = {\n      organization: null,\n      system: null,\n      hierarchy: null,\n      isImport: false,\n      label: this.lService.create(),\n      configuration: {}\n  };\n\n  organizations: OrgSyncInfo[] = [];\n\n  cOrg: OrgSyncInfo = null;\n  cSystem: { label: string, oid: string, type: string } = null;\n\n  fieldChange: Subject<string>;\n\n  /*\n   * Observable subject for MasterList changes.  Called when an update is successful\n   */\n  onSuccess: Subject<SynchronizationConfig>;\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n      this.onSuccess = new Subject();\n      this.fieldChange = new Subject();\n  }\n\n  ngOnDestroy(): void {\n      this.onSuccess.unsubscribe();\n      this.fieldChange.unsubscribe();\n  }\n\n  init(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n      this.organizations = organizations;\n\n      if (config != null) {\n          this.config = config;\n\n          let oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n          if (oIndex !== -1) {\n              this.cOrg = this.organizations[oIndex];\n          }\n\n          let sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n          if (sIndex !== -1) {\n              this.cSystem = this.cOrg.systems[sIndex];\n          }\n      }\n  }\n\n  handleFieldChange(field: string): void {\n      this.fieldChange.next(field);\n  }\n\n  onOrganizationSelected(): void {\n      let index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n      if (index !== -1) {\n          this.cOrg = this.organizations[index];\n      } else {\n          this.cOrg = null;\n      }\n\n      this.cSystem = null;\n\n      this.handleFieldChange(\"organization\");\n  }\n\n  onChangeExternalSystem(): void {\n      let index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n      if (index !== -1) {\n          this.cSystem = this.cOrg.systems[index];\n      } else {\n          this.cSystem = null;\n      }\n\n      this.handleFieldChange(\"system\");\n  }\n\n  onSubmit(): void {\n    /*\n    let levelIndex = 0;\n    let len = this.levelRows.length;\n    for (let i = 0; i < len; ++i)\n    {\n      let levelRow: LevelRow = this.levelRows[i];\n\n      if (levelRow.isAttributeEditor)\n      {\n        continue;\n      }\n      else if (levelRow.attrCfg == null)\n      {\n        levelIndex++;\n        continue;\n      }\n\n      let mappings = this.config.configuration.levels[levelIndex].mappings;\n      let mappingsLen = levelRow.attrCfg.mappings.length;\n      for (let j = 0; j < mappingsLen; ++j)\n      {\n        let mapping = JSON.parse(JSON.stringify(levelRow.attrCfg.mappings[j]));\n        delete mapping.info;\n        mappings.push(mapping);\n      }\n\n      levelIndex++;\n    }\n    */\n\n      this.service.apply(this.config).then(cfg => {\n          this.onSuccess.next(cfg);\n          this.bsModalRef.hide();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  cancel(): void {\n      /*\n      if (this.config.oid != null) {\n          this.service.unlock(this.config.oid).then(() => {\n              this.bsModalRef.hide();\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      } else {\n          this.bsModalRef.hide();\n      }\n      */\n\n      this.bsModalRef.hide();\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      \n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n        <dhis2-synchronization-config [(config)]=\"config\" [cOrg]=\"cOrg\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></dhis2-synchronization-config>\n      </div>\n      <div *ngIf=\"cSystem != null && cSystem.type === 'FhirExternalSystem'\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>Synchronization Type</label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"col-md-3\" style=\"display: flex; align-items: center;\">\n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"!config.isImport\" name=\"isImport\" [value]=\"false\">\n                <span>Export</span>\n              </label>                \n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"config.isImport\" name=\"isImport\" [value]=\"true\">\n                <span>Import</span>\n              </label>                \n            </div>          \n          </div>\n        </div>\n      \n        <fhir-export-synchronization-config *ngIf=\"config.isImport !== true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-export-synchronization-config>\n        <fhir-import-synchronization-config *ngIf=\"config.isImport === true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-import-synchronization-config>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-import-synchronization-config',\n  templateUrl: './fhir-import-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirImportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n  subscription: Subscription = null;\n\n  implementations: { className: string, label: string }[] = [];\n\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirImportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        implementation: null\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.implementation\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <select [(ngModel)]=\"config.configuration.implementation\" name=\"implementation\" required>\n            <option></option>\n            <option *ngFor=\"let implementation of implementations\" [value]=\"implementation.className\">\n                {{implementation.label}}\n            </option>\n        </select>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { SynchronizationConfig, ExportScheduledJob } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component/error-handler/error-handler\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { Subscription } from \"rxjs\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"synchronization-config\",\n    templateUrl: \"./synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\n  message: string = null;\n\n  config: SynchronizationConfig = null;\n\n  page: PageResult<ExportScheduledJob> = {\n      pageSize: 10,\n      pageNumber: 1,\n      count: 1,\n      resultSet: []\n  };\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n  subscription: Subscription = null;\n\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n      const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n      this.service.get(oid).then(config => {\n          this.config = config;\n          this.onPageChange(1);\n      });\n\n      let baseUrl = WebSockets.buildBaseUrl();\n\n      this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n      this.subscription = this.notifier.subscribe(message => {\n          if (message.type === \"DATA_EXPORT_JOB_CHANGE\") {\n              this.onPageChange(this.page.pageNumber);\n          }\n      });\n  }\n\n  ngOnDestroy() {\n      if (this.subscription != null) {\n          this.subscription.unsubscribe();\n      }\n\n      if (this.notifier != null) {\n          this.notifier.complete();\n      }\n  }\n\n  onRun(): void {\n      this.message = null;\n\n      this.service.run(this.config.oid).then(() => {\n      // Refresh the page\n          this.onPageChange(this.page.pageNumber);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  onGenerateFile(): void {\n      window.open(registry.contextPath + \"/synchronization-config/generate-file?oid=\" + encodeURIComponent(this.config.oid));\n  }\n\n  onPageChange(pageNumber: number): void {\n      if (this.config != null) {\n          this.message = null;\n\n          this.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n              this.formatStepConfig(response);\n              this.page = response;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  formatJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"FEEDBACK\") {\n          return this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n      } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      } else if (job.status === \"QUEUED\") {\n          return this.lService.decode(\"etl.JobStatus.QUEUED\");\n      } else if (job.status === \"SUCCESS\") {\n          return this.lService.decode(\"etl.JobStatus.SUCCESS\");\n      } else if (job.status === \"CANCELED\") {\n          return this.lService.decode(\"etl.JobStatus.CANCELED\");\n      } else if (job.status === \"FAILURE\") {\n          return this.lService.decode(\"etl.JobStatus.FAILURE\");\n      } else {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      }\n  }\n\n  formatStepConfig(page: PageResult<ExportScheduledJob>): void {\n      page.resultSet.forEach((job: ExportScheduledJob) => {\n          const steps = [\n              {\n                  label: this.lService.decode(\"synchronization.step.Queued\"),\n                  status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n              },\n\n              {\n                  label: this.lService.decode(\"synchronization.step.Connecting\"),\n                  status: job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n              }\n          ];\n\n          const stepLabel = this.config.isImport ? \"Importing\" : this.lService.decode(\"synchronization.step.DatabaseExport\");\n\n          steps.push({\n              label: stepLabel,\n              status: job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n          });\n\n          job.stepConfig = {\n              steps: steps\n          };\n      });\n  }\n\n  getCompletedStatus(jobStage: string, targetStage: string): string {\n      let order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n      let jobPos = order.indexOf(jobStage);\n      let targetPos = order.indexOf(targetStage);\n\n      if (targetPos < jobPos) {\n          return \"COMPLETE\";\n      } else {\n          return \"\";\n      }\n  }\n\n  getJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n          return \"WORKING\";\n      } else if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n          return \"STUCK\";\n      }\n\n      return \"\";\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label>\n              <i class=\"fa\"\n                [ngClass]=\"{'fa-long-arrow-right' : !config.isImport, 'fa-long-arrow-left' : config.isImport}\"\n                aria-hidden=\"true\"\n                style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i>\n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-group text-right\" style=\"margin: 0;\">\n                <form>\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                  <button *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\"\n                    type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onGenerateFile()\" class=\"btn btn-secondary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.generateBundle\"></localize>\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.geoObjectType}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                      <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                      <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                      <localize *ngIf=\"level.type === 'NONE'\" key=\"synchronization.config.none\"></localize>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"masterlist.field\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"masterlist.forDate\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.typeLabel}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      {{level.forDate}}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\">\n                          <localize key=\"masterlist.jobs\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr\n                        *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\"\n                                style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator\n                              *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\"\n                              [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a\n                              [routerLink]=\"'/registry/sync/details/' + config.oid + '/' + job.historyId\"\n                              routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                          </div>\n                        </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService, IOService, SynchronizationConfigService } from \"@registry/service\";\nimport { ScheduledJob, SynchronizationConfig } from \"@registry/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./details.component.html\",\n    styleUrls: [\"./details.css\"]\n})\nexport class SyncDetailsComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    historyId: string = \"\";\n\n    config: SynchronizationConfig = null;\n\n    page: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    constructor(private configService: SynchronizationConfigService, public service: RegistryService, private route: ActivatedRoute, public ioService: IOService) {\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        const configOid = this.route.snapshot.paramMap.get(\"config\");\n\n        this.configService.get(configOid).then(config => {\n            this.config = config;\n\n            this.onPageChange(1);\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n            this.job = response;\n\n            this.page = this.job.exportErrors;\n\n            if (response.exception && response.exception.type && response.exception.type.indexOf(\"ExportJobHasErrors\") === -1) {\n                this.error(response.exception);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n                                    <span *ngIf=\"config == null || !config.isImport\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n                                    </span>\n                                    <span *ngIf=\"config != null && config.isImport\">Resource</span>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th *ngIf=\"config == null || !config.isImport\" class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td  *ngIf=\"config == null || !config.isImport\" class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, HostListener, Injector, ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Map, NavigationControl, AttributionControl, IControl, LngLatBounds, Popup } from \"mapbox-gl\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport * as ColorGen from \"color-generator\";\n\nimport { GeoObject, GeoObjectType, GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { ModalState, PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\n\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ConfirmModalComponent, SuccessModalComponent } from \"@shared/component\";\n\nimport { AuthService, DateService, LocalizationService } from \"@shared/service\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { timeout } from \"d3-timer\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { SelectTypeModalComponent } from \"./select-type-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { FeaturePanelComponent } from \"./feature-panel.component\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\nimport { RecordPopupComponent } from \"./record-popup.component\";\nimport { GEO_OBJECT_DATA_SOURCE_TYPE, Layer, ListVectorLayerDataSource, SearchLayerDataSource, LIST_VECTOR_SOURCE_TYPE, SEARCH_DATASOURCE_TYPE, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE, GeoObjectLayerDataSource, ValueOverTimeDataSource, RelationshipVisualizionDataSource } from \"@registry/service/layer-data-source\";\nimport { BusinessObject, BusinessType } from \"@registry/model/business-type\";\nimport { BusinessObjectService } from \"@registry/service/business-object.service\";\nimport { Vertex } from \"@registry/model/graph\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { debounce } from \"ts-debounce\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\nclass SelectedObject {\n\n    objectType: string;\n    code: string;\n\n    // If geo object\n    forDate?: string;\n\n    // If business object\n    businessObject?: BusinessObject;\n    businessType?: BusinessType;\n\n}\n\nexport interface LocationManagerParams {\n    layers?: string,\n    graphPanelOpen?: string,\n    graphOid?: string,\n    date?: string,\n    type?: string,\n    code?: string,\n    objectType?: \"BUSINESS\" | \"GEOOBJECT\",\n    bounds?: string,\n    text?: string,\n    layersPanelSize?: string,\n    pageContext?: string,\n    version?: string,\n    attrPanelOpen?: string,\n    uid?: string\n}\n\n@Component({\n    selector: \"location-manager\",\n    providers: [Location],\n    templateUrl: \"./location-manager.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    pageMode: string = \"\";\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE: ModalState = {\n        SEARCH: 0,\n        VIEW: 1\n    };\n\n    CONSTANTS = {\n        SEARCH_OVERLAY: OverlayerIdentifier.SEARCH_PANEL\n    };\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Search results from the server\n     */\n    data: GeoObject[] = [];\n\n    state: LocationManagerParams = { attrPanelOpen: \"true\" };\n\n    /*\n     * Currently selected record\n     */\n    current: SelectedObject;\n\n    requestedDate: string = null;\n\n    calculatedDate: string = null;\n\n    /*\n     * Currently highlighted feature\n     */\n    feature: any;\n\n    /*\n     * Flag denoting if an object is currently being editted\n     */\n    isEdit: boolean = false;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    /*\n     *  Mode used to determine what is being show on the left hand panel\n     */\n    mode: number = this.MODE.SEARCH;\n\n    graphPanelOpen: boolean = false;\n\n    /*\n    *  Flag to indicate if the left handle panel should be displayed or not\n     */\n    showPanel: boolean = true;\n\n    backReference: string;\n\n    urlParams: LocationManagerParams;\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n    ];\n\n    preventSingleClick: boolean = false;\n\n    /*\n     * Timer for determining double click vs single click\n     */\n    timer: any;\n\n    /*\n    * Subscription for changes to the URL parameters\n    */\n    subscription: Subscription;\n\n    // Flag denoting if the map in loaded and initialized\n    ready: boolean = false;\n\n    // Flag denoting if the search and results panel is enabled at all\n    searchEnabled: boolean = true;\n\n    graphVisualizerEnabled: boolean = false;\n\n    typeahead: Observable<any> = null;\n\n    typeCache: GeoObjectTypeCache;\n\n    public layersPanelSize: number = PANEL_SIZE_STATE.MINIMIZED;\n\n    @ViewChild(\"simpleEditControl\") simpleEditControl: IControl;\n\n    @ViewChild(\"FeaturePanel\") featurePanel: FeaturePanelComponent;\n\n    windowWidth: number;\n    windowHeight: number;\n\n    private mapBounds: LngLatBounds;\n\n    searchFieldText: string;\n\n    dateFieldValue: string;\n\n    updateState: (newState: any) => void;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private modalService: BsModalService,\n        private spinner: NgxSpinnerService,\n        private service: RegistryService,\n        private cacheService: RegistryCacheService,\n        private listService: ListTypeService,\n        private mapService: MapService,\n        private geomService: GeometryService,\n        private lService: LocalizationService,\n        private authService: AuthService,\n        private dateService: DateService,\n        private businessObjectService: BusinessObjectService,\n        private location: Location,\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector\n    ) {\n        this.location = location;\n        this.updateState = debounce(this._updateState, 50);\n    }\n\n    ngOnInit(): void {\n        this.windowWidth = window.innerWidth;\n        this.windowHeight = window.innerHeight;\n\n        this.subscription = this.route.queryParams.subscribe(params => {\n            this.urlParams = params;\n            this.handleStateChange(params);\n        });\n\n        this.searchEnabled = registry.searchEnabled && (this.authService.isRC(false) || this.authService.isRM() || this.authService.isRA());\n        this.graphVisualizerEnabled = registry.graphVisualizerEnabled || false;\n\n        this.typeCache = this.cacheService.getTypeCache();\n\n        this.geomService.dumpLayers();\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n        this.subscription.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n        this.initializeMap();\n    }\n\n    @HostListener(\"window:resize\", [\"$event\"])\n    resizeWindow() {\n        this.windowWidth = window.innerWidth;\n        this.windowHeight = window.innerHeight;\n    }\n\n    initializeMap() {\n        const layer = this.baseLayers[0];\n\n        const mapConfig: any = {\n            container: \"map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    mapbox: {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox\"\n                        // \"source-layer\": \"mapbox_satellite_full\"\n                    }\n                ]\n            },\n            attributionControl: false,\n            bounds: registry.defaultMapBounds\n        };\n\n        if (this.state.bounds != null && this.state.bounds.length > 0) {\n            mapConfig.bounds = new LngLatBounds(JSON.parse(this.state.bounds));\n        }\n\n        mapConfig.logoPosition = \"bottom-right\";\n\n        this.map = new Map(mapConfig);\n\n        this.map.on(\"load\", () => {\n            this.geomService.initialize(this.map, null, true);\n            this.ready = true;\n\n            this.initMap();\n        });\n\n        if (this.simpleEditControl) {\n            this.map.addControl(this.simpleEditControl);\n        }\n    }\n\n    _updateState(newState: LocationManagerParams): void {\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: newState,\n            queryParamsHandling: \"merge\"\n        });\n    }\n\n    onGraphNodeSelect(node: Vertex): void {\n        this.closeEditSessionSafeguard().then(() => {\n            (node as any).selectAnimation(() => {\n                if (node.objectType === \"GEOOBJECT\") {\n                    let mockGeo = {\n                        properties: {\n                            type: node.typeCode,\n                            uid: node.id,\n                            code: node.code,\n                            displayLabel: new LocalizedValue(node.label, [])\n                        }\n                    } as GeoObject;\n\n                    this.selectGeoObject(mockGeo);\n                } else if (node.objectType === \"BUSINESS\") {\n                    this.updateState({ type: node.typeCode, code: node.code, objectType: node.objectType, uid: null, version: null, text: null });\n                }\n            });\n        });\n    }\n\n    /**\n    *\n    * Method responsible for parsing the state from the URL parameters and determining if\n    * the model of the widget needs to be updated or not.\n    *\n    * */\n    handleStateChange(newState: LocationManagerParams): void {\n        newState = JSON.parse(JSON.stringify(newState));\n        let oldState = JSON.parse(JSON.stringify(this.state));\n\n        if (this.ready) {\n            this.state = newState;\n\n            let mode = this.MODE.SEARCH;\n            let showPanel = (newState.attrPanelOpen === \"true\" || newState.attrPanelOpen === undefined);\n\n            if (newState != null) {\n                // Handle parameters for searching for a geo object\n                if (newState.text != null) {\n                    if (newState.text !== oldState.text || newState.date !== oldState.date) {\n                        this.searchFieldText = newState.text;\n                        this.dateFieldValue = newState.date;\n\n                        this.loadSearchFromState();\n                    }\n\n                    showPanel = true;\n                }\n\n                // Handle parameters for selecting a geo object\n                if ((newState.objectType == null || newState.objectType === \"GEOOBJECT\") && newState.type != null && newState.code != null) {\n                    if (oldState.type !== newState.type || oldState.code !== newState.code) {\n                        this.loadGeoObjectFromState();\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                // Handle parameters for selecting a business object\n                if (newState.objectType != null && newState.objectType === \"BUSINESS\" && newState.type && newState.code) {\n                    if (this.current == null || this.current.businessObject == null || this.current.businessObject.code !== newState.code || this.current.businessType.code !== newState.type) {\n                        this.selectBusinessObject();\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                // Handle parameters for select a record from a context layer\n                if (newState.version != null && newState.uid != null) {\n                    if (this.current == null || this.feature == null || this.feature.version !== newState.version || this.feature.id !== newState.uid) {\n                        this.handleRecord(newState.version, newState.uid);\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                if (newState.pageContext) {\n                    this.pageMode = newState.pageContext;\n                }\n\n                if (newState.layersPanelSize) {\n                    this.layersPanelSize = Number.parseInt(newState.layersPanelSize);\n                } else {\n                    this.layersPanelSize = (this.pageMode === \"EXPLORER\") ? PANEL_SIZE_STATE.FULLSCREEN : this.layersPanelSize;\n                }\n\n                if (newState.attrPanelOpen != null) {\n                    showPanel = (newState.attrPanelOpen === \"true\");\n                }\n\n                if (newState.graphPanelOpen != null) {\n                    this.graphPanelOpen = newState.graphPanelOpen === \"true\";\n                }\n            }\n\n            this.changeMode(mode);\n            this.setPanel(showPanel);\n\n            if (newState.bounds != null && newState.bounds.length > 0 && !this.geomService.isMapZooming()) {\n                const bounds = JSON.parse(newState.bounds);\n\n                this.mapBounds = this.convertMapBounds(new LngLatBounds(bounds));\n                const llb = this.convertMapBounds(this.map.getBounds());\n\n                if (llb.toString() !== this.mapBounds.toString()) {\n                    this.map.fitBounds(this.mapBounds, { animate: false });\n                }\n            }\n        }\n    }\n\n    selectBusinessObject() {\n        this.businessObjectService.getTypeAndObject(this.state.type, this.state.code).then(resp => {\n            this.current = {\n                objectType: \"BUSINESS\",\n                code: this.state.code,\n                businessObject: resp.object,\n                businessType: resp.type\n            };\n\n            this.mode = this.MODE.VIEW;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        }).finally(() => {\n            this.spinner.hide(OverlayerIdentifier.FEATURE_PANEL);\n        });\n    }\n\n    setPanel(showPanel: boolean): void {\n        if ((this.state.attrPanelOpen === \"true\") !== showPanel) {\n            this.updateState({ attrPanelOpen: showPanel ? \"true\" : \"false\" });\n\n            timeout(() => {\n                this.map.resize();\n            }, 1);\n        }\n    }\n\n    togglePanel(): void {\n        this.setPanel(!(this.state.attrPanelOpen === \"true\"));\n    }\n\n    changeMode(mode: number): void {\n        if (mode !== this.mode) {\n            this.mode = mode;\n\n            if (this.isEdit) {\n                this.geomService.stopEditing();\n            }\n\n            if (this.mode === this.MODE.SEARCH) {\n                this.isEdit = false;\n\n                if (this.feature != null) {\n                    this.map.removeFeatureState(this.feature);\n                }\n\n                let layers = this.geomService.getLayers().filter(l =>\n                    l.getPinned() || // Always keep pinned layers\n                    (\n                        !(l.dataSource instanceof ValueOverTimeDataSource) && !(l.dataSource instanceof GeoObjectLayerDataSource) && // Remove All Geo-Object layers\n                        !(l.dataSource instanceof RelationshipVisualizionDataSource) // Remove all Relationship Visualization layers\n                    )\n                );\n                this.geomService.setLayers(layers);\n\n                this.addSearchLayer();\n\n                this.current = null;\n                this.feature = null;\n            } else if (this.mode === this.MODE.VIEW) {\n                // Remove any existing search layer\n                let layers = this.geomService.getLayers();\n                layers = layers.filter(layer => layer.getPinned() || (!(layer.dataSource instanceof SearchLayerDataSource) && !(layer.dataSource instanceof RelationshipVisualizionDataSource)));\n                this.geomService.setLayers(layers);\n            }\n        }\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n    }\n\n    initMap(): void {\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n        this.map.addControl(new NavigationControl({ visualizePitch: true }), \"bottom-right\");\n\n        this.map.on(\"click\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"moveend\", (event: any) => {\n            const mapBounds = this.convertMapBounds(this.map.getBounds());\n\n            if (this.mapBounds == null || this.mapBounds.toString() !== mapBounds.toString()) {\n                const array = mapBounds.toArray();\n\n                window.setTimeout(() => { // Force the route to have a chance to update since the url params can be very out of date here\n                    this._updateState({ bounds: JSON.stringify(array) });\n                }, 0);\n            }\n        });\n\n        this.handleStateChange(this.urlParams);\n    }\n\n    onCreate(layer: any): void {\n        if (layer.dataSource.dataSourceType === \"LISTVECT\") {\n            this.closeEditSessionSafeguard().then(() => {\n                this.listService.getVersion(layer.dataSource.versionId).then(version => {\n                    if (!version.isAbstract) {\n                        this.select({\n                            properties: {\n                                type: version.typeCode,\n                                code: \"__NEW__\"\n                            }\n                        }, null);\n                    } else {\n                        this.bsModalRef = this.modalService.show(SelectTypeModalComponent, {\n                            animated: true,\n                            backdrop: true,\n                            ignoreBackdropClick: true\n                        });\n                        this.bsModalRef.content.init(version, typeCode => {\n                            this.select({\n                                properties: {\n                                    type: typeCode,\n                                    code: \"__NEW__\"\n                                }\n                            }, null);\n                        });\n                    }\n                });\n            });\n        }\n    }\n\n    closeEditSessionSafeguard(): Promise<void> {\n        if (!this.isEdit) {\n            return new Promise((resolve, reject) => { resolve(); });\n        }\n\n        let confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        confirmBsModalRef.content.message = this.lService.decode(\"explorer.edit.loseAllChanges\");\n        confirmBsModalRef.content.data = {};\n        confirmBsModalRef.content.submitText = this.lService.decode(\"modal.button.ok\");\n        confirmBsModalRef.content.type = ModalTypes.danger;\n\n        let resolver = (subsription: Subscription, resolve: Function, result: void) => { this.cancelEditingSession(); resolve(result); subsription.unsubscribe(); };\n        let rejecter = (subsription: Subscription, reject: Function, error: any) => { reject(error); subsription.unsubscribe(); };\n\n        return new Promise((resolve, reject) => {\n            let subscription = confirmBsModalRef.content.onConfirm.subscribe(\n                result => { resolver(subscription, resolve, result); },\n                error => { rejecter(subscription, reject, error); }\n            );\n        });\n    }\n\n    handleMapClickEvent(e: any): void {\n        const features = this.map.queryRenderedFeatures(e.point);\n\n        if (features != null && features.length > 0) {\n            const feature = features[0];\n\n            if (feature.properties.uid != null) {\n                this.closeEditSessionSafeguard().then(() => {\n                    if (feature.layer) {\n                        let layer: Layer = this.geomService.getLayerFromMapboxLayer(feature.layer);\n\n                        if (layer) {\n                            if (layer.dataSource.getDataSourceType() === SEARCH_DATASOURCE_TYPE) {\n                                if ((this.current == null || feature.properties == null || this.state.code !== feature.properties.code || this.state.type !== feature.properties.type)) {\n                                    let geoObject: GeoObject = JSON.parse(JSON.stringify(feature));\n                                    geoObject.properties.displayLabel = feature.properties.displayLabel != null ? JSON.parse(feature.properties.displayLabel) : null;\n\n                                    this.selectGeoObject(geoObject);\n                                }\n                            } else {\n                                if (layer.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE) {\n                                    const versionId = (layer.dataSource as ListVectorLayerDataSource).getVersionId();\n\n                                    if (this.state.version == null || this.state.uid == null ||\n                                        this.state.version !== versionId ||\n                                        this.state.uid !== feature.properties.uid) {\n                                        this.updateState({ version: versionId, uid: feature.properties.uid });\n                                    } else {\n                                        this.handleRecord(versionId, feature.properties.uid);\n                                    }\n                                } else if (layer.dataSource.getDataSourceType() === GEO_OBJECT_DATA_SOURCE_TYPE) {\n                                    let geoObject: GeoObject = JSON.parse(JSON.stringify(feature));\n                                    geoObject.properties.displayLabel = feature.properties.displayLabel != null ? JSON.parse(feature.properties.displayLabel) : null;\n\n                                    this.selectGeoObject(geoObject);\n                                } else if (layer.dataSource.getDataSourceType() === RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE) {\n                                    let geoObject: GeoObject = JSON.parse(JSON.stringify(feature));\n                                    geoObject.properties.displayLabel = feature.properties.displayLabel != null ? JSON.parse(feature.properties.displayLabel) : null;\n\n                                    this.selectGeoObject(geoObject);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    onPanelCancel(): void {\n        this.clearRecord();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        if (applyInfo.isChangeRequest) {\n            if (this.backReference != null && this.backReference.length >= 2 && this.backReference.substring(0, 2) === \"CR\") {\n                this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n            } else {\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n                this.bsModalRef.content.cancelText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n                this.bsModalRef.content.onCancel.subscribe(() => {\n                    this.clearRecord();\n                });\n            }\n        } else {\n            this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n            this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n            this.bsModalRef.content.onConfirm.subscribe(() => {\n                this.onPanelCancel();\n            });\n        }\n    }\n\n    handleBasemapStyle(layer: any): void {\n        // this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n        this.baseLayers.forEach(baseLayer => {\n            baseLayer.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.map.setStyle({\n            version: 8,\n            name: layer.name,\n            metadata: {\n                \"mapbox:autocomposite\": true\n            },\n            sources: {\n                mapbox: {\n                    type: \"raster\",\n                    url: layer.url,\n                    tileSize: 256\n                }\n            },\n            sprite: layer.sprite,\n            glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n            layers: [\n                {\n                    id: layer.id,\n                    type: \"raster\",\n                    source: \"mapbox\"\n                    // \"source-layer\": \"mapbox_satellite_full\"\n                }\n            ]\n        });\n    }\n\n    getGeoObjectTypeLabel(geoObject: GeoObject) {\n        const type: GeoObjectType = this.typeCache.getTypeByCode(geoObject.properties.type);\n\n        return type == null ? \"\" : type.label.localizedValue;\n    }\n\n    search(): void {\n        this.updateState({ text: this.searchFieldText, date: this.dateFieldValue, type: null, code: null, version: null, uid: null });\n    }\n\n    loadSearchFromState(): void {\n        this.geomService.stopEditing();\n\n        this.addSearchLayer();\n    }\n\n    handleRecord(list: string, uid: string): void {\n        // Get the feature data from the server and populate the left-hand panel\n        this.listService.record(list, uid, false).then(record => {\n            if (this.feature != null) {\n                this.map.removeFeatureState(this.feature);\n\n                this.feature = null;\n            }\n\n            window.setTimeout(() => {\n                const index = this.geomService.getLayers().findIndex(lFind => lFind.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE && record.version === (lFind.dataSource as ListVectorLayerDataSource).getVersionId());\n\n                if (index !== -1) {\n                    const layer = this.geomService.getLayers()[index];\n\n                    if (this.map.getSource(layer.dataSource.getId()) != null) {\n                        // Highlight the feature on the map\n                        this.feature = {\n                            source: layer.dataSource.getId(),\n                            sourceLayer: \"context\",\n                            id: uid,\n                            version: list\n                        };\n\n                        this.map.setFeatureState(this.feature, {\n                            selected: true\n                        });\n                    }\n                }\n            }, 5);\n\n            if (record.recordType === \"LIST\") { // this happens when list type is NOT working\n                const bounds = record.bbox;\n\n                this.requestedDate = record.forDate === \"\" || record.forDate === undefined ? null : record.forDate;\n\n                if (bounds && Array.isArray(bounds)) {\n                    // 1. Create a component reference from the component\n                    const componentRef = this.componentFactoryResolver\n                        .resolveComponentFactory(RecordPopupComponent)\n                        .create(this.injector);\n\n                    componentRef.instance.record = record;\n                    componentRef.instance.edit.subscribe(() => {\n                        const code: string = record.data[\"code\"];\n                        // const uid: string = record.data[\"originalOid\"];\n\n                        // this.handleSelect(record.typeCode, code, uid);\n\n                        /*\n                        this.router.navigate([], {\n                            relativeTo: this.route,\n                            queryParams: { objectType: \"GEOOBJECT\", type: record.typeCode, code: code, uid: uid, version: record.version },\n                            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n                        });\n                        */\n\n                        this.selectGeoObject({\n                            properties: {\n                                type: record.typeCode,\n                                code: code,\n                                uid: uid,\n                                displayLabel: new LocalizedValue(record.data.displayLabelDefaultLocale, [])\n                            }\n                        } as GeoObject);\n                        // this.zoomToFeature(node, null);\n                    });\n\n                    // 2. Attach component to the appRef so that it's inside the ng component tree\n                    this.appRef.attachView(componentRef.hostView);\n\n                    // 3. Get DOM element from component\n                    const domElem = (componentRef.hostView as EmbeddedViewRef<any>)\n                        .rootNodes[0] as HTMLElement;\n\n                    // 4. Append DOM element to the body\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                    new Popup({ closeOnClick: true, closeButton: false })\n                        .setLngLat(llb.getCenter())\n                        .setDOMContent(domElem)\n                        .addTo(this.map);\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancelEditingSession() {\n        if (this.isEdit) {\n            this.geomService.stopEditing();\n        }\n\n        this.isEdit = false;\n\n        if (this.feature != null) {\n            this.map.removeFeatureState(this.feature);\n        }\n\n        this.featurePanel.setEditMode(false);\n        this.feature = null;\n    }\n\n    clearRecord() {\n        this.updateState({ type: null, code: null, version: null, uid: null });\n    }\n\n    featurePanelForDateChange(date: string) {\n        if (date !== null) {\n            this.geomService.stopEditing();\n\n            this.calculatedDate = date;\n        }\n    }\n\n    select(node: any, event: MouseEvent): void {\n        if (!this.isEdit) {\n            if (this.feature != null) {\n                this.map.removeFeatureState(this.feature);\n                this.feature = null;\n            }\n\n            this.updateState({ type: node.properties.type, code: node.properties.code, objectType: \"GEOOBJECT\", uid: node.properties.uid, version: null });\n\n            // this.zoomToFeature(node, null);\n        }\n    }\n\n    selectGeoObject(geoObject: GeoObject): void {\n        this.closeEditSessionSafeguard().then(() => {\n            this.addLayerForGeoObject(geoObject);\n\n            this.updateState({ type: geoObject.properties.type, code: geoObject.properties.code, objectType: \"GEOOBJECT\", uid: geoObject.properties.uid, version: null, text: null });\n        });\n    }\n\n    loadGeoObjectFromState(): void {\n        this.typeCache.waitOnTypes().then(() => {\n            const type: GeoObjectType = this.typeCache.getTypeByCode(this.state.type);\n\n            this.geomService.stopEditing();\n            this.geomService.setGeometryType(null);\n\n            this.geomService.setGeometryType(type.geometryType);\n\n            this.current = {\n                objectType: \"GEOOBJECT\",\n                code: this.state.code,\n                forDate: this.state.date === \"\" ? null : this.state.date\n            };\n\n            if (this.state.code !== \"__NEW__\") {\n                this.requestedDate = this.current.forDate === \"\" ? null : this.current.forDate;\n                // this.zoomToFeature(this.current.geoObject, null);\n            }\n        });\n    }\n\n    addSearchLayer(): void {\n        if (this.state.text == null) { return; }\n\n        let layers = this.geomService.getLayers();\n\n        // Check for an existing search layer with the same data\n        let index = layers.findIndex(layer => layer.dataSource instanceof SearchLayerDataSource);\n        if (index !== -1) {\n            let existingSearchLayer = layers[index];\n            let ds = existingSearchLayer.dataSource as SearchLayerDataSource;\n\n            if (ds.getText() === this.state.text && ds.getDate() === this.state.date) {\n                return;\n            }\n        }\n\n        let dataSource = new SearchLayerDataSource(this.mapService, this.state.text, this.state.date);\n\n        this.spinner.show(this.CONSTANTS.SEARCH_OVERLAY);\n\n        dataSource.getLayerData().then((data: any) => {\n            this.spinner.hide(this.CONSTANTS.SEARCH_OVERLAY);\n\n            if (this.mode === this.MODE.SEARCH) {\n                layers = this.geomService.getLayers();\n\n                // Remove any existing search layer(s)\n                layers = layers.filter(layer => layer.getPinned() ||\n                    (!(layer.dataSource instanceof SearchLayerDataSource) && !(layer.dataSource instanceof RelationshipVisualizionDataSource)) ||\n                    ((layer.dataSource instanceof SearchLayerDataSource) && (layer.dataSource as SearchLayerDataSource).getText() === this.state.text && (layer.dataSource as SearchLayerDataSource).getDate() === this.state.date)\n                );\n\n                if (layers.findIndex(layer => (layer.dataSource instanceof SearchLayerDataSource) && ((layer.dataSource as SearchLayerDataSource).getText() === this.state.text && (layer.dataSource as SearchLayerDataSource).getDate() === this.state.date)) === -1) {\n                    // Add our search layer\n                    let layer = dataSource.createLayer(this.lService.decode(\"explorer.search.layer\") + \" (\" + this.state.text + \")\", true, ColorGen().hexString());\n                    layers.splice(0, 0, layer);\n\n                    this.geomService.zoomOnReady(layer.getId());\n\n                    this.data = data.features;\n                }\n\n                this.geomService.setLayers(layers);\n            }\n        }).catch(() => {\n            this.spinner.hide(this.CONSTANTS.SEARCH_OVERLAY);\n            this.state.text = \"\";\n            this.state.date = \"\";\n        });\n    }\n\n    addLayerForGeoObject(geoObject: GeoObject): void {\n        this.typeCache.waitOnTypes().then(() => {\n            // this.service.getGeoObjectByCode(code, typeCode).then(geoObject => {\n\n            const type: GeoObjectType = this.typeCache.getTypeByCode(geoObject.properties.type);\n\n            // Add layer\n            let layers: Layer[] = this.geomService.getLayers();\n\n            let date = this.state == null ? null : this.state.date;\n            let dataSource = new GeoObjectLayerDataSource(this.service, geoObject.properties.code, geoObject.properties.type, date);\n\n            let displayLabel = geoObject.properties.displayLabel.localizedValue;\n            let typeLabel = type.label.localizedValue;\n            let sDate = date == null ? \"\" : \" \" + this.dateService.formatDateForDisplay(date);\n            let label = displayLabel + \" \" + sDate + \"(\" + typeLabel + \")\";\n\n            let layer = dataSource.createLayer(label, true, ColorGen().hexString());\n\n            // Remove any existing Geo-Object layer(s)\n            layers = layers.filter(l =>\n                !(l.dataSource instanceof GeoObjectLayerDataSource) ||\n                l.getKey() === layer.getKey() ||\n                l.getPinned()\n            );\n\n            if (layers.findIndex(l => l.getKey() === layer.getKey()) === -1) {\n                // Add our search layer\n                layers.splice(0, 0, layer);\n\n                this.geomService.zoomOnReady(layer.getId());\n\n                this.geomService.setLayers(layers);\n            }\n\n            this.geomService.setLayers(layers);\n        });\n    }\n\n    onFeatureSelect(event: any): void {\n        if (!this.isEdit) {\n            this.state.text = event.item.name;\n\n            const feature = event.item.feature;\n\n            if (feature.properties.uid != null) {\n                this.listService.getBounds(feature.version, feature.properties.uid).then(bounds => {\n                    if (bounds && Array.isArray(bounds)) {\n                        let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                        this.map.fitBounds(llb, { padding: 50, animate: true, maxZoom: 20 });\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n\n            if (feature.properties.uid != null) {\n                this.updateState({ type: null, code: null, version: feature.version, uid: feature.properties.uid });\n            }\n        }\n    }\n\n    toggleGraphPanel(): void {\n        this.graphPanelOpen = !this.graphPanelOpen;\n\n        // window.setTimeout(() => {\n        //     let graphContainer = document.getElementById(\"graph-container\");\n\n        //     if (graphContainer) {\n        //         this.svgHeight = graphContainer.clientHeight;\n        //         this.svgWidth = graphContainer.clientWidth;\n        //         // this.panToNode(this.geoObject.properties.uid);\n        //     }\n        // }, 10);\n\n        this.updateState({ graphPanelOpen: this.graphPanelOpen });\n    }\n\n    convertMapBounds(llb: LngLatBounds): LngLatBounds {\n        const ne = llb.getNorthEast();\n        const sw = llb.getSouthWest();\n\n        const bounds = LngLatBounds.convert([\n            [parseFloat(sw.lng.toFixed(10)), parseFloat(sw.lat.toFixed(10))],\n            [parseFloat(ne.lng.toFixed(10)), parseFloat(ne.lat.toFixed(10))]\n        ]);\n\n        return bounds;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n\t<h5>{{model.name }} : {{ model.code }}</h5>\n\t<h6>\n\t\t{{model.layer.label}} - {{ model.layer.forDate }} ( <span *ngIf=\"model.layer.versionNumber !== 0\"> <localize\n\t\t\t\tkey=\"list.type.version\"></localize> {{model.layer.versionNumber}}\n\t\t</span>\n\t\t<localize *ngIf=\"model.layer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n\t\t)\n\t</h6>\n</ng-template>\n\n\n<cgr-header></cgr-header>\n<loading-bar></loading-bar>\n\n\n<div id=\"app-container\" class=\"container-fluid\">\n\n\t<!-- Floating search panel-->\n\t<div style=\"position: absolute; top: 0; bottom: 0; left: 10px; right: 10px; height: 100%;\">\n\n\t\t<div class=\"row\" style=\"margin-top: 50px;\">\n\t\t\t<div class=\"col-md-4\" style=\"z-index: 999;\" [hidden]=\"!(state.attrPanelOpen === 'true')\">\n\t\t\t\t<div class=\"row\" *ngIf=\"searchEnabled\">\n\t\t\t\t\t<!-- \n                    \t\tSearch features from the working versions of lists\n                \t-->\n                \t<article class=\"panel-toggle\" [ngClass]=\"{'detached' : data.length === 0 && current == null}\">\n\t\t\t\t\t\t<ng-container>\n<!-- \t\t\t\t\t\t\t<div class=\"col-md-4\"> -->\n<!-- \t\t\t\t\t\t\t\t<date-field [(value)]=\"dateFieldValue\" label=\"\" [inputName]=\"'date'\" [allowInfinity]=\"false\" -->\n<!-- \t\t\t\t\t\t\t\t\t[allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" style=\"display:inline-grid;\"> </date-field> -->\n<!-- \t\t\t\t\t\t\t</div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\" >\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t\t\t\t  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.SEARCH_OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>\n\t\t\t\t\t\t\t\t  <date-field [(value)]=\"dateFieldValue\" label=\"\" [inputName]=\"'date'\" [allowInfinity]=\"false\"\n\t\t\t\t\t\t\t\t\t[allowFutureDates]=\"false\" [required]=\"false\" style=\"display:table-cell;vertical-align:middle;width:175px;\"> </date-field>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" [placeholder]=\"'explorer.search.placeholder' | localize\"\n\t\t\t\t\t\t\t\t\t\t(keyup.enter)=\"search()\" [(ngModel)]=\"searchFieldText\" name=\"text\"> <span class=\"input-group-btn\">\n\t\t\t\t\t\t\t\t\t\t<button [disabled]=\"isEdit\" class=\"btn btn-primary\" type=\"button\" (click)=\"search()\">\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</article>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<ng-container *ngIf=\"mode === MODE.SEARCH && searchEnabled\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-12\" [ngClass]=\"{'full-height-sidebar' : data.length > 0 }\">\n\t\t\t\t\t\t\t\t\t<div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"list-group\">\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t<div *ngFor=\"let node of data; let i = index\" class=\"list-group-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"card card-default\" (click)=\"selectGeoObject(node)\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t  <!--\n\t\t\t\t\t\t                              <i class=\"fa fa-map-marker clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\"\n\t\t\t\t\t\t                                (click)=\"zoomToFeature(node, $event)\" [title]=\"'explorer.zoom.label' | localize\"></i>\n\t\t\t\t\t\t                              <i class=\"fa fa-sitemap clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\" (click)=\"visualizeRelationships(node, VISUALIZE_MODE.GRAPH, $event)\" [title]=\"'hierarchyVisualizer.tooltip' | localize\"></i>\n\t\t\t\t\t\t                              -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"View Geo-Object details\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"card-footer\">{{node.properties.type}}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ng-container>\n\n\t\t\t            <ng-container *ngIf=\"mode === MODE.VIEW && current != null\">\n            \t\t\t\t<div class=\"row\">\n                  \t\t\t\t<div class=\"col-md-12\" [ngClass]=\"{'full-height-sidebar' : current != null, 'max-height' : !searchEnabled }\">\n                    \t\t\t\t<feature-panel *ngIf=\"current.objectType === 'GEOOBJECT' && typeCache.ready()\" #FeaturePanel [type]=\"typeCache.getTypeByCode(state.type)\" [code]=\"current.code\" [forDate]=\"current.forDate\"\n                      \t\t\t\t  (forDateChange)=\"featurePanelForDateChange($event)\" [readOnly]=\"false\"\n                      \t\t\t\t  (modeChange)=\"onModeChange($event)\" (panelCancel)=\"clearRecord()\"\n                      \t\t\t\t  (panelSubmit)=\"onPanelSubmit($event)\">\n\t\t\t\t                    </feature-panel>\n\n\t\t\t\t\t\t\t\t\t<business-object-panel *ngIf=\"current.objectType === 'BUSINESS'\" [type]=\"current.businessType\" [object]=\"current.businessObject\"\n  \t\t\t\t\t\t\t\t\t\t(close)=\"mode = MODE.VIEW\">\n\t\t\t\t\t\t\t\t  \t</business-object-panel>  \n                \t\t\t\t</div>\n\t\t\t                </div>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div> <!--  END sidebar panel -->\n\t\n\t\t\t<div [ngClass]=\"{'col-md-6':!(state.attrPanelOpen === 'true'), 'col-md-8':(state.attrPanelOpen === 'true')}\" style=\"z-index:4;padding-top:10px;\">\n\t\t\t\n\t\t\t\t<div style=\"z-index:999;padding-top:10px;overflow-y:auto;position:absolute;top:0;overflow:visible;\">\n\t\t\t\t\t<div *ngIf=\"searchEnabled || current != null\" class=\"map-button clickable\" style=\"padding-bottom: 5px;\" (click)=\"!isEdit && togglePanel()\">\n\t\t\t\t\t\t<div class=\"map-button-icon\">\n\t\t\t\t\t\t\t<span class=\"fa clickable\" style=\"font-size: 35px;\"\n\t\t\t\t\t\t\t\t[title]=\"((state.attrPanelOpen === 'true') ? 'explorer.resize.closeAttributePanel' : 'explorer.resize.openAttributePanel') | localize\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{'fa-angle-double-left': (state.attrPanelOpen === 'true'), 'fa-angle-double-right': !(state.attrPanelOpen === 'true')}\" aria-hidden=\"true\">\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span *ngIf=\"current != null && graphVisualizerEnabled\" class=\"map-button visualize-mode-toggle\"> \n\t\t\t\t\t\t<i style=\"margin-right: initial\" class=\"visualize-mode-hierarchy clickable fa fa-share-alt\" aria-hidden=\"true\"\n\t\t\t\t\t\t[title]=\"(graphPanelOpen ? 'explorer.resize.closeGraphViz' : 'explorer.resize.openGraphViz') | localize\"\n\t\t\t\t\t\t(click)=\"toggleGraphPanel()\"></i>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div *ngIf=\"graphPanelOpen && graphVisualizerEnabled && state.type && state.code\" id=\"graph-container\" style=\"height: calc(100vh - 74px);padding-left: 58px;\">\n\t\t\t\t\t<div style=\"background-color: white; opacity: 100%; width: 100%; height: 100%;\">\n              <relationship-visualizer\n                (nodeSelect)=\"onGraphNodeSelect($event)\">\n              </relationship-visualizer>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<!-- Full screen map-->\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<div class=\"row\">\n\t\t\t\t\n\t\t\t\t<article id=\"navigator-layer-panel\" class=\"base-layer-panel\"\n\t\t\t\t\t[ngClass]=\"{'second-map-button' : searchEnabled && !(state.attrPanelOpen === 'true')}\"\n\t\t\t\t\t[ngStyle]=\"{'max-width': layersPanelSize === 2 ? '50%' : 'unset', 'padding-left': layersPanelSize === 2 ? '10px' : 'unset'}\">\n\t\t\t\t\t<layer-panel (create)=\"onCreate($event)\" [panelSize]=\"layersPanelSize\"> </layer-panel>\n\t\t\t\t</article>\n\n\t\t\t\t<div id=\"map\" class=\"map-view-port\"></div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\n\n\n@Component({\n    selector: \"select-type-modal\",\n    templateUrl: \"./select-type-modal.component.html\",\n    styleUrls: []\n})\nexport class SelectTypeModalComponent implements OnInit, OnDestroy {\n\n    version: ListTypeVersion;\n\n    type: string;\n\n    /*\n     * Called on confirm\n     */\n    onCreate: Subject<string>;\n\n    subscription: Subscription;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onCreate = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.onCreate.unsubscribe();\n    }\n\n    init(version: ListTypeVersion, observer: Observer<string>): void {\n        this.version = version;\n        this.subscription = this.onCreate.subscribe(observer);\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onCreate.next(this.type);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>                        \n        </h1>\n    </div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" name=\"export-form\">\n        <fieldset *ngIf=\"version != null\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n\n                    <select id=\"type\" name=\"type\" class=\"select-area\" [(ngModel)]=\"type\" required>\n                        <option></option>\n                        <option *ngFor=\"let subtype of version.subtypes\" [value]=\"subtype.code\">\n                            {{subtype.label}}                            \n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"form.invalid\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { CreateGeoObjectAction } from \"@registry/model/crtable\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"feature-panel\",\n    templateUrl: \"./feature-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class FeaturePanelComponent implements OnInit, OnChanges {\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\",\n        GEOMETRY: \"GEOMETRY\"\n    };\n\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.FEATURE_PANEL\n    };\n\n    @Input() datasetId: string;\n\n    @Input() type: GeoObjectType;\n\n    @Input() forDate: Date = new Date();\n\n    @Output() forDateChange = new EventEmitter<string>();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() code: string;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @Output() featureChange = new EventEmitter<GeoObjectOverTime>();\n    @Output() modeChange = new EventEmitter<boolean>();\n    @Output() panelCancel = new EventEmitter<void>();\n    @Output() panelSubmit = new EventEmitter<{ isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }>();\n\n    _isValid: boolean = true;\n\n    bsModalRef: BsModalRef;\n\n    mode: string = null;\n\n    isMaintainer: boolean;\n\n    // The current state of the GeoObject in the GeoRegistry\n    preGeoObject: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    postGeoObject: GeoObjectOverTime;\n\n    attribute: AttributeType = null;\n\n    isNew: boolean = false;\n\n    isEdit: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    hierarchy: HierarchyOverTime = null;\n\n    // Flag indicating if the component is communicating with the server\n    // inProgress: number = 0;\n\n    reason: string = \"\";\n\n    constructor(\n        public service: RegistryService,\n        private spinner: NgxSpinnerService,\n        private modalService: BsModalService,\n        private authService: AuthService,\n        private geometryService: GeometryService) { }\n\n    ngOnInit(): void {\n        this.isMaintainer = this.authService.isSRA() || this.authService.isOrganizationRA(this.type.organizationCode) || this.authService.isGeoObjectTypeOrSuperRM(this.type);\n        this.mode = \"ATTRIBUTES\";\n\n        //        this.isEdit = !this.readOnly;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.type != null || changes.code != null) {\n            this.refresh();\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this._isValid = valid;\n    }\n\n    isValid(): boolean {\n        return this._isValid && this.attributeEditor && this.attributeEditor.isValid();\n    }\n\n    updateCode(code: string): void {\n        this.code = code;\n    }\n\n    refresh(): void {\n        this.postGeoObject = null;\n        this.preGeoObject = null;\n        this.hierarchies = null;\n\n        if (this.code != null && this.type != null) {\n            if (this.code !== \"__NEW__\") {\n                this.isNew = false;\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.getGeoObjectOverTime(this.code, this.type.code).then(geoObject => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(geoObject)).attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.getHierarchiesForGeoObject(this.code, this.type.code, false).then((hierarchies: HierarchyOverTime[]) => {\n                    this.hierarchies = hierarchies;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n            } else {\n                this.isNew = true;\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.newGeoObjectOverTime(this.type.code, false).then(retJson => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, retJson.geoObject.attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n\n                    this.hierarchies = retJson.hierarchies;\n                    this.setEditMode(true);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n            }\n        }\n    }\n\n    editorForDateChange(date: string) {\n        this.forDateChange.emit(date);\n    }\n\n    onCancelInternal(): void {\n        this.panelCancel.emit();\n\n        // if (this.code === '__NEW__') {\n        //    this.updateCode(null);\n        // }\n        // else {\n        //    this.updateCode(this.code);\n        // }\n    }\n\n    canSubmit(): boolean {\n        return this.isValid() &&\n            (this.isMaintainer || (this.reason && this.reason.trim().length > 0)) &&\n            (this.isNew || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    onSubmit(): void {\n        if (this.isNew) {\n            const action: CreateGeoObjectAction = this.attributeEditor.getActions()[0];\n\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.service.applyGeoObjectCreate(action.parentJson, action.geoObjectJson, this.isNew, this.datasetId, this.reason, false).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n\n            // this.service.applyGeoObjectCreate(this.hierarchies, this.postGeoObject, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n            //     if (!applyInfo.isChangeRequest) {\n            //         this.featureChange.emit(this.postGeoObject);\n            //     }\n            //     this.panelSubmit.emit(applyInfo);\n            // }).catch((err: HttpErrorResponse) => {\n            //     this.error(err);\n            // });\n        } else {\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.service.applyGeoObjectEdit(this.postGeoObject.attributes.code, this.type.code, this.attributeEditor.getActions(), this.datasetId, this.reason, false).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n\n        this.geometryService.stopEditing();\n    }\n\n    onManageAttributeVersion(attribute: AttributeType): void {\n        this.attribute = attribute;\n        this.mode = this.MODE.VERSIONS;\n    }\n\n    onManageHiearchyVersion(hierarchy: HierarchyOverTime): void {\n        this.hierarchy = hierarchy;\n        this.mode = this.MODE.HIERARCHY;\n    }\n\n    onEditAttributes(): void {\n        this.setEditMode(!this.isEdit);\n\n        // window.document.getElementById(\"navigator-left-sidebar\").scroll({\n        //     top: 0,\n        //     behavior: \"smooth\"\n        // });\n    }\n\n    setEditMode(value: boolean): void {\n        this.isEdit = value;\n        this.reason = null;\n\n        this.modeChange.emit(this.isEdit);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div *ngIf=\"type\">\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>  \n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{type.label.localizedValue}}</h3>\n    </div>      \n  </div>\n  <div *ngIf=\"mode == MODE.ATTRIBUTES && postGeoObject != null\">\n    <!-- Attributes tab -->\n    <geoobject-shared-attribute-editor  *ngIf=\"hierarchies && postGeoObject\"\n      #attributeEditor \n      [geoObjectType]=\"type\" \n      [postGeoObject]=\"postGeoObject\" \n      [isNew]=\"isNew\" \n      [isGeometryInlined]=\"false\"\n      [hierarchies]=\"hierarchies\"\n      [readOnly]=\"!isEdit\"\n      (valid)=\"setValid($event)\"\n      [requestedDate]=\"forDate\"\n      (calculatedDateChange)=\"editorForDateChange($event)\"\n      [forDate]=\"forDate\"\n      [datasetId]=\"datasetId\"\n      > \n    </geoobject-shared-attribute-editor>\n    \n    <div *ngIf=\"isEdit && !isMaintainer\" class=\"form-group\" style=\"z-index: 0;\">\n      <label> \n        <localize key=\"change.request.reason.label\"></localize>\n      </label>\n      <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" class=\"form-control\" name=\"reason-input\" required></textarea>\n    </div>\n\n    <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    \n      <button *ngIf=\"!readOnly && !isEdit\" type=\"submit\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n        <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n      </button>\n      \n      <button *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-default\" (click)=\"onCancelInternal()\">\n        <localize key=\"modal.button.cancel\"></localize>\n      </button>\n      <button *ngIf=\"isEdit\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!canSubmit()\">\n        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n      </button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LayerRecord } from \"@registry/model/list-type\";\n\n@Component({\n    selector: \"record-popup\",\n    templateUrl: \"./record-popup.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class RecordPopupComponent {\n\n    @Input() public record: LayerRecord;\n    @Input() public canEdit: boolean = false;\n\n    @Output() public edit = new EventEmitter<void>();\n\n    onEdit(): void {\n        this.edit.emit();\n    }\n\n}\n","<div *ngIf=\"record && record.data\">\n\n  <h3>{{record.data['code']}} ({{record.typeLabel.localizedValue}})</h3>\n\n  <hr />\n\n  <ng-container *ngFor=\"let attr of record.attributes let i = index\">\n\n    <div *ngIf=\"attr.name !== 'code' && record.data[attr.name] != null && record.data[attr.name].length > 0\">\n      <span style=\"font-weight: bold;\">{{attr.label}}</span>\n      -\n      {{record.data[attr.name]}}\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"record.edit\" class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    <hr>\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onEdit()\">\n      <localize key=\"modal.button.edit\"></localize>\n    </button>\n  </div>\n\n</div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventModalComponent } from \"./transition-event-modal.component\";\nimport { AuthService, DateService, LocalizationService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\n@Component({\n\n    selector: \"transition-event-table\",\n    templateUrl: \"./transition-event-table.component.html\",\n    styleUrls: [\"./transition-event-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class TransitionEventTableComponent {\n\n    page: PageResult<TransitionEvent> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    attrConditions: any = [];\n\n    dateCondition = {\n        attribute: \"eventDate\",\n        startDate: \"\",\n        endDate: \"\"\n    };\n\n    beforeTypeCondition = {\n        attribute: \"beforeTypeCode\",\n        value: \"\"\n    };\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[] = [];\n\n    bsModalRef: BsModalRef;\n\n    readOnly: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private modalService: BsModalService, private iService: IOService, public dateService: DateService, private authService: AuthService, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.readOnly = !this.authService.isSRA() && !this.authService.isRA() && !this.authService.isRM();\n        this.refresh();\n\n        this.attrConditions.push(this.dateCondition);\n        this.attrConditions.push(this.beforeTypeCondition);\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            this.types = this.filterTypesBasedOnMyOrg(types);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    filterTypesBasedOnMyOrg(types) {\n        let isSRA = this.authService.isSRA();\n        let myOrgTypes = [];\n        let myOrgs: string[] = this.authService.getMyOrganizations();\n\n        for (let i = 0; i < types.length; ++i) {\n            const type = types[i];\n            const orgCode = type.orgCode;\n            let myOrgIndex = myOrgs.indexOf(orgCode);\n\n            if (myOrgIndex !== -1 || isSRA) {\n                myOrgTypes.push(type);\n            }\n        }\n\n        return myOrgTypes;\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getPage(this.page.pageSize, pageNumber, this.attrConditions).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    filterChange(): void {\n        this.refresh(this.page.pageNumber);\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(false);\n        this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n            this.refresh(this.page.pageNumber);\n        });\n    }\n\n    deleteEvent(jsEvent, transitionEvent: TransitionEvent): void {\n        jsEvent.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + transitionEvent.eventId + \"]\";\n        this.bsModalRef.content.data = transitionEvent;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.service.delete(transitionEvent).then(response => {\n                this.refresh(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(event: TransitionEvent): void {\n        this.service.getDetails(event.oid).then(response => {\n            this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(false, response);\n            this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n                this.refresh(this.page.pageNumber);\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n\n<div>\n  <div class=\"row\" style=\"padding-top:10px; padding-bottom: 10px;\">\n    <span class=\"col-md-4\">\n      <label for=\"beforeTypeFilter\">\n        <localize key=\"transition.event.beforeType\"></localize>\n      </label>\n      <select id=\"beforeTypeFilter\" name=\"beforeTypeFilter\" class=\"select-area\" [(ngModel)]=\"beforeTypeCondition.value\"\n        (change)=\"filterChange()\">\n        <option></option>\n        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n      </select>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"startDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.startDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'startDateFilter'\" [allowFutureDates]=\"false\" name=\"startDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\">\n      </date-field>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"endDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.endDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'endDateFilter'\" [allowFutureDates]=\"false\" name=\"endDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\"></date-field>\n    </span>\n  </div>\n  <div class=\"row\">\n    <span class=\"col-md-4\"></span>\n    <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(dateCondition.startDate, dateCondition.endDate)\">\n      <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n    </span>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.actions\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.date\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.id\"></localize>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-event\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:left;\">\n                <a *ngIf=\"event.permissions.includes('READ')\" (click)=\"onView(event)\" [ngClass]=\"{'fa-pencil' : event.permissions.indexOf('WRITE') !== -1, 'fa-eye' : event.permissions.indexOf('WRITE') === -1}\" class=\"fa\" aria-hidden=\"true\"></a>\n                <a *ngIf=\"event.permissions.includes('DELETE')\" (click)=\"deleteEvent($event, event)\" class=\"fa fa-trash\" aria-hidden=\"true\"></a>\n              </td>\n              <td class=\"col-md-1\">\n                <h5><strong><date-text [date]=\"event.eventDate\"></date-text></strong></h5>\n              </td>\n              <td class=\"col-md-4\">\n                <h5><strong>{{event.description.localizedValue}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.beforeTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.afterTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.eventId}}</strong></h5>\n              </td>\n            </tr>\n          </ng-template>\n        </tbody>\n      </table>\n      <div *ngIf=\"!this.readOnly\" style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n          <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n            <localize key=\"hierarchy.management.button.create\"></localize>\n          </button>\n        </div>\n      </div>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","/* eslint-disable indent */\n/* eslint-disable quotes */\nimport { Component, OnDestroy, OnInit, ViewChild, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observable, Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { IOService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Transition, TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\n\nimport { DndDropEvent } from \"ngx-drag-drop\";\nimport * as uuid from \"uuid\";\n\n/* D3 Stuffs */\nimport * as d3 from \"d3\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const VIEWPORT_SCALE_FACTOR_X: number = 1.0;\nexport const VIEWPORT_SCALE_FACTOR_Y: number = 1.0;\n\nexport const GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR: string = \"#6BA542\"; // #3E2A5A or \"purple\"\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\n@Component({\n    selector: \"transition-event-modal\",\n    templateUrl: \"./transition-event-modal.component.html\",\n    styleUrls: [\"./transition-event-modal.component.css\"]\n})\nexport class TransitionEventModalComponent implements OnInit, OnDestroy {\n\n    @ViewChild(\"typeaheadParent\") typeaheadParent;\n\n    message: string = null;\n\n    event: TransitionEvent = null;\n\n    activeTransition: Transition = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onEventChange: Subject<TransitionEvent>;\n\n    afterTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    beforeTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    valid: boolean = false;\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: true\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private changeDetector: ChangeDetectorRef, public rService: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onEventChange = new Subject();\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            let myOrgs: string[] = this.authService.getMyOrganizations();\n            let myOrgTypes = [];\n            let afterTypes = [];\n            let isSRA = this.authService.isSRA();\n            for (let i = 0; i < types.length; ++i) {\n                const orgCode = types[i].orgCode;\n                const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                let myOrgIndex = myOrgs.indexOf(orgCode);\n\n                if (myOrgIndex !== -1 || isSRA) {\n                    afterTypes.push(types[i]);\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n            }\n            this.beforeTypes = myOrgTypes;\n            this.afterTypes = afterTypes;\n\n            this.readonly = this.readonly || this.event.permissions.indexOf(\"WRITE\") === -1;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.onEventChange.unsubscribe();\n    }\n\n    init(readonly: boolean, event?: TransitionEvent): void {\n        this.readonly = readonly;\n\n        if (event != null) {\n            this.event = event;\n        } else {\n            this.event = {\n                beforeTypeCode: \"\",\n                afterTypeCode: \"\",\n                eventDate: \"\",\n                permissions: [\"WRITE\", \"READ\", \"DELETE\", \"CREATE\"],\n                description: this.lService.create(),\n                transitions: []\n            };\n        }\n\n        setTimeout(() => {\n            this.onChange();\n        }, 0);\n    }\n\n    setActiveTransition(transition: Transition) {\n        let highlight = (active: boolean, trans: Transition) => {\n            let colorable = d3.selectAll('#svgHolder p[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],p[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            colorable.style(\"color\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_GO_LABEL_COLOR);\n\n            let fillable = d3.selectAll('#svgHolder circle[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],circle[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            fillable.attr(\"fill\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_CIRCLE_FILL);\n\n            let strokeable = d3.selectAll('#svgHolder path[data-transOid=\"' + trans.oid + '\"]');\n            strokeable.attr(\"stroke\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_LINE_COLOR);\n        };\n\n        if (this.activeTransition != null) {\n            highlight(false, this.activeTransition);\n        }\n\n        this.activeTransition = transition;\n\n        if (transition != null) {\n            highlight(true, transition);\n        }\n    }\n\n    onCreate(): void {\n        this.event.transitions.push({\n            oid: uuid.v4(),\n            isNew: true,\n            sourceCode: \"\",\n            sourceType: \"\",\n            targetCode: \"\",\n            targetType: \"\",\n            transitionType: \"\",\n            impact: \"\",\n            order: this.event.transitions.length\n        });\n    }\n\n    onChange(): void {\n        this.calculateDerivedAttributes();\n        this.renderVisual();\n\n        // Register highlight event listeners\n        let that = this;\n\n        setTimeout(() => {\n            d3.selectAll(\".transition\").on(\"mouseover\", function(mouseEvent) {\n                let d3This: any = this;\n                let transitionOid = d3This.getAttribute(\"data-transOid\");\n\n                let index = that.event.transitions.findIndex(trans => trans.oid === transitionOid);\n\n                that.setActiveTransition(that.event.transitions[index]);\n            });\n            d3.select(\"#transition-container\").on(\"mouseleave\", function(mouseEvent) {\n                that.setActiveTransition(null);\n            });\n        }, 0);\n\n        this.validChange();\n    }\n\n    getTypeAheadObservable(isSource: boolean, transition: Transition, typeCode: string, property: string): Observable<any> {\n        let date = isSource ? this.dateService.addDay(-1, this.event.eventDate) : this.event.eventDate;\n        return new Observable((observer: any) => {\n            this.rService.getGeoObjectSuggestions(transition[property], typeCode, null, null, null, date, date).then(results => {\n                let filtered = results.filter(result => {\n                  let pair = {\n                    sourceCode: isSource ? result.code : transition.sourceCode,\n                    targetCode: isSource ? transition.targetCode : result.code\n                  };\n\n                  for (let i = 0; i < this.event.transitions.length; ++i) {\n                      let transition = this.event.transitions[i];\n\n                      if (transition.sourceCode === pair.sourceCode && transition.targetCode === pair.targetCode) {\n                          return false;\n                      }\n                  }\n\n                  return true;\n                });\n\n                observer.next(filtered);\n            });\n        });\n    }\n\n    typeaheadOnSelect(selection: any, transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = selection.item.code;\n            transition.targetType = selection.item.typeCode;\n            transition.targetText = selection.item.name + \" (\" + selection.item.code + \")\";\n        } else {\n            transition.sourceCode = selection.item.code;\n            transition.sourceType = selection.item.typeCode;\n            transition.sourceText = selection.item.name + \" (\" + selection.item.code + \")\";\n        }\n\n        this.onChange();\n    }\n\n    clear(transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = \"\";\n            transition.targetType = \"\";\n            transition.targetText = \"\";\n        } else {\n            transition.sourceCode = \"\";\n            transition.sourceType = \"\";\n            transition.sourceText = \"\";\n        }\n\n        this.onChange();\n    }\n\n    localizeTransitionImpact(impact: string): string {\n        return this.lService.decode(\"transition.event.\" + impact.toLowerCase());\n    }\n\n    localizeTransitionType(type: string): string {\n        return type == null ? null : this.lService.decode(\"transition.event.type.\" + type.toLowerCase());\n    }\n\n    validChange() {\n        setTimeout(() => {\n            this.valid = (this.event.eventDate != null && this.event.eventDate.length > 0) &&\n                this.event.transitions.length > 0 &&\n                this.event.afterTypeCode != null &&\n                this.event.beforeTypeCode != null;\n        }, 0);\n    }\n\n    remove(index: number): void {\n        this.event.transitions.splice(index, 1);\n        this.onChange();\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.event).then(response => {\n            this.onEventChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    calculateDerivedAttributes(): void {\n        let stats = {};\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                if (stats[trans.sourceCode] == null) {\n                    stats[trans.sourceCode] = {\n                        source: 1,\n                        target: 0\n                    };\n                } else {\n                    stats[trans.sourceCode].source++;\n                }\n\n                if (stats[trans.targetCode] == null) {\n                    stats[trans.targetCode] = {\n                        source: 0,\n                        target: 1\n                    };\n                } else {\n                    stats[trans.targetCode].target++;\n                }\n            }\n        });\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let sourceStats = stats[trans.sourceCode];\n                let targetStats = stats[trans.targetCode];\n\n                let updown = \"UPGRADE\";\n                if (trans.transitionType != null && trans.transitionType.indexOf(\"DOWNGRADE\") !== -1) {\n                    updown = \"DOWNGRADE\";\n                }\n\n                if (sourceStats.source === 1 && targetStats.target === 1) {\n                    trans.transitionType = \"REASSIGN\";\n                    trans.impact = \"FULL\";\n                } else if (sourceStats.source > 1) {\n                    trans.impact = \"PARTIAL\";\n\n                    if (targetStats.target > 1) {\n                        trans.transitionType = \"MERGE\";\n                    } else {\n                        trans.transitionType = \"SPLIT\";\n                    }\n                } else if (targetStats.target > 1) {\n                    trans.impact = \"FULL\";\n                    trans.transitionType = \"MERGE\";\n                }\n\n                if (trans.sourceType !== trans.targetType) {\n                    if (trans.transitionType === \"REASSIGN\") {\n                        trans.typeUpdown = updown;\n                        delete trans.typePart;\n                        trans.transitionType = trans.typeUpdown;\n                    } else {\n                        trans.typeUpdown = updown;\n                        trans.typePart = trans.transitionType;\n                        trans.transitionType = trans.typeUpdown + \"_\" + trans.typePart;\n                    }\n                } else {\n                    delete trans.typePart;\n                }\n            }\n        });\n    }\n\n    onChangeTypeUpdown(transition: any): void {\n        if (transition.typePart) {\n            transition.transitionType = transition.typeUpdown + \"_\" + transition.typePart;\n        } else {\n            transition.transitionType = transition.typeUpdown;\n        }\n    }\n\n    /* Drag Drop Transitions */\n    onDragStart(event:DragEvent) {\n        // console.log(\"drag started\", JSON.stringify(event, null, 2));\n    }\n\n    onDragEnd(event:DragEvent) {\n        // console.log(\"drag ended\", JSON.stringify(event, null, 2));\n    }\n\n    onDragged(item: any, type: string) {\n        // console.log(\"onDragged\", item, type);\n    }\n\n    onDraggableCopied(event:DragEvent) {\n        // console.log(\"draggable copied\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableLinked(event:DragEvent) {\n        // console.log(\"draggable linked\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableMoved(event:DragEvent) {\n        // console.log(\"draggable moved\", JSON.stringify(event, null, 2));\n    }\n\n    onDragCanceled(event:DragEvent) {\n        // console.log(\"drag cancelled\", JSON.stringify(event, null, 2));\n    }\n\n    onDragover(event:DragEvent) {\n        // console.log(\"dragover\", JSON.stringify(event, null, 2));\n    }\n\n    onDrop(event:DndDropEvent) {\n        let transition: Transition = event.data;\n        let index: number = event.index;\n\n        // Remove from array\n        this.event.transitions.splice(transition.order, 1);\n\n        // Calculate new index, which may have shifted due to us removing the transition.\n        let newIndex = (index > transition.order) ? index - 1 : index;\n\n        // Insert us back into the array at newIndex\n        this.event.transitions.splice(newIndex, 0, transition);\n\n        // Update order for all transitions as elements have shifted\n        for (let i = 0; i < this.event.transitions.length; ++i) {\n            this.event.transitions[i].order = i;\n        }\n\n        window.setTimeout(() => { this.onChange(); }, 0);\n    }\n\n    /* D3 Stuff */\n    private renderVisual(): void {\n        if (this.event.transitions == null || this.event.transitions.length === 0) {\n            d3.select(\"#svg\").remove();\n            return;\n        }\n        d3.select(\"#svg\").remove();\n\n        let svg = d3.select(\"#svg\");\n\n        if (svg.node() == null) {\n            svg = d3.select(\"#svgHolder\").append(\"svg\");\n            svg.attr(\"id\", \"svg\");\n        }\n\n        let appData = this.generateAppData();\n        let renderingData = this.generateRenderingData(appData);\n\n        /*\n        let autoBox = function autoBox() {\n            document.body.appendChild(this);\n            const { x, y, width, height } = svg.node().getBBox();\n            document.body.removeChild(this);\n            return [x, y, width, height];\n        };\n        */\n\n        let chart = () => {\n            const root = renderingData.d3;\n\n            let links = svg.append(\"g\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", GRAPH_LINE_COLOR)\n                .attr(\"stroke-opacity\", 0.4)\n                .attr(\"stroke-width\", 0.4 * DRAW_SCALE_MULTIPLIER);\n            links.selectAll(\"path\")\n                .data(root.links())\n                .join(\"path\")\n                    .style(\"display\", function(d: any) {\n                        return d.source.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"d\", (d: any) => `\n                      M${d.target.y},${d.target.x}\n                       ${d.source.y},${d.source.x}\n                    `)\n                    .attr(\"data-transOid\", (d: any) => d.source.data.name === \"root\" ? null : appData.linkDataMappings[d.source.data.code + \":\" + d.target.data.code]);\n\n            svg.append(\"g\")\n                .selectAll(\"circle\")\n                .data(root.descendants())\n                .join(\"circle\")\n                    .style(\"display\", function(d: any) {\n                        return d.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"cx\", (d: any) => d.y)\n                    .attr(\"cy\", (d: any) => d.x)\n                    .attr(\"fill\", (d: any) => GRAPH_CIRCLE_FILL)\n                    .attr(\"r\", 0.9 * DRAW_SCALE_MULTIPLIER)\n                    .attr(\"data-goCode\", (d: any) => d.data.code)\n                    .attr(\"data-depth\", (d: any) => d.depth);\n\n            svg.append(\"g\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-size\", 2 * DRAW_SCALE_MULTIPLIER)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"stroke-width\", 3)\n              .selectAll(\"foreignObject\")\n              .data(root.descendants())\n              .join(\"foreignObject\")\n                .style(\"display\", function(d: any) {\n                    return d.depth === 0 ? \"none\" : null;\n                })\n                .attr(\"x\", (d: any) => (d.y + ((d.depth === 1) ? -13 : 1)))\n                .attr(\"y\", (d: any) => (d.x) + ((d.depth === 1) ? -2 : -3))\n                .attr(\"font-size\", \"0.7em\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"width\", 12)\n                .attr(\"height\", 8)\n              .append(\"xhtml:p\")\n                .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n                .attr(\"data-goCode\", (d: any) => d.data.code)\n                .attr(\"data-depth\", (d: any) => d.depth)\n                .style(\"margin\", \"0.5px\")\n                .style(\"vertical-align\", \"middle\")\n                .style(\"line-height\", 1.5)\n                .style(\"color\", GRAPH_GO_LABEL_COLOR)\n                .style(\"padding-left\", \"0.4px\")\n                .style(\"padding-top\", \"0.2px\")\n                .html((d: any) => d.data.name)\n              .filter((d: any) => d.depth === 1)\n                .style(\"text-align\", \"right\");\n\n            renderingData.multipleParentLinks.forEach(function(link) {\n                links.append(\"path\")\n                    .attr(\"d\", () => `\n                      M${link.parent.y},${link.parent.x}\n                       ${link.child.y},${link.child.x}\n                    `)\n                    .attr(\"data-transOid\", () => link.oid);\n            });\n\n            // return svg.attr(\"viewBox\", autoBox).node();\n        };\n\n        chart();\n\n        this.calculateSvgViewBox();\n    }\n\n    generateRenderingData(appData: any): any {\n        let width = 100;\n\n        const root: any = d3.hierarchy(appData.d3Data).sort((a, b) => d3.ascending(a.data.order, b.data.order));\n        root.dx = 5 * DRAW_SCALE_MULTIPLIER;\n        root.dy = width / (root.height + 1);\n        let d3RenderingData = d3.tree().nodeSize([root.dx, root.dy]).separation(() => 1.5)(root);\n\n        let multipleParentLinks = [];\n        appData.multipleParentLinks.forEach(function(link) {\n            let parentNode = root.find(node => node.data.isSource && node.data.code === link.parent.code);\n            let childNode = root.find(node => !node.data.isSource && node.data.code === link.child.code);\n\n            if (parentNode != null && childNode != null) {\n                multipleParentLinks.push({\n                    parent: parentNode,\n                    child: childNode,\n                    oid: link.oid\n                });\n            }\n        });\n\n        return {\n            d3: d3RenderingData,\n            multipleParentLinks: multipleParentLinks\n        };\n    }\n\n    generateAppData(): any {\n        let children = [];\n        let multipleParentLinks = []; // D3 can't handle multiple parents so we have to draw them ourselves.\n        let linkDataMappings = {}; // D3 doesn't allow us to put data on the link itself. Our link needs an oid. So this is a hack to store data on a link.\n\n        let isChildOfOtherNode = (code: string) => {\n            for (let i = 0; i < children.length; ++i) {\n                let child = children[i];\n\n                if (child.children) {\n                    for (let j = 0; j < child.children.length; ++j) {\n                        let grandChild = child.children[j];\n\n                        if (grandChild.code === code) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let index = children.findIndex(child => child.code === trans.sourceCode);\n                linkDataMappings[trans.sourceCode + \":\" + trans.targetCode] = trans.oid;\n\n                let childExists = isChildOfOtherNode(trans.targetCode);\n                let grandChild = null;\n                if (!childExists) {\n                    grandChild = {\n                        name: trans.targetText,\n                        code: trans.targetCode,\n                        isSource: false,\n                        children: []\n                    };\n                } else {\n                    multipleParentLinks.push({\n                        oid: trans.oid,\n                        child: {\n                            code: trans.targetCode,\n                            text: trans.targetText,\n                            type: trans.targetType\n                        },\n                        parent: {\n                            code: trans.sourceCode,\n                            text: trans.sourceText,\n                            type: trans.sourceType\n                        }\n                    });\n                }\n\n                if (index !== -1) {\n                    let child = children[index];\n\n                    let index2 = child.children.findIndex(child => child.code === trans.targetCode);\n\n                    if (index2 != null && grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n                } else {\n                    let child: any = {\n                        name: trans.sourceText,\n                        code: trans.sourceCode,\n                        children: [],\n                        isSource: true\n                    };\n\n                    if (grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n\n                    children.push(child);\n                }\n            }\n        });\n\n        return {\n            d3Data: {\n                name: \"root\",\n                children: children\n            },\n            multipleParentLinks: multipleParentLinks,\n            linkDataMappings: linkDataMappings\n        };\n    }\n\n    calculateSvgViewBox(): void {\n        let svg: any = d3.select(\"#svg\");\n        let svgNode: any = svg.node();\n\n        let { x, y, width, height } = svgNode.getBBox();\n\n        const xPadding = 0;\n        const yPadding = 2;\n        svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X + \" \" + (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y);\n\n        // width = (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X;\n        // height = (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y;\n\n        // d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n        // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"modal-body row\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset *ngIf=\"event != null\">\n            <div class=\"col-md-6\">\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label>\n\t\t                        <localize key=\"transition.event.date\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                            <date-text [date]=\"event.eventDate\"></date-text>                            \n\t\t                    </span>\n\t\t                    <date-field *ngIf=\"!readonly\" [(value)]=\"event.eventDate\" [classNames]=\"['form-control']\" label=\"\"\n\t\t                        [inputName]=\"'eventDate'\" [allowFutureDates]=\"false\" name=\"eventDate\" [required]=\"true\" (validChange)=\"validChange($event)\"\n\t\t                        [disable]=\"readonly || event.transitions.length > 0\"></date-field>\n\t\t                </div>\n\t\t            </div>\n\t\t        \n\t\t            <div class=\"row-holder\" *ngFor=\"let localeValue of event.description.localeValues\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label> <localize style=\"display:block;\" key=\"transition.event.description\"></localize>\n\t\t                        <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n\t\t                            </convert-key-label>)</span>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n\t\t                        class=\"form-control\" [disabled]=\"readonly\"\n\t\t                        [required]=\"false\" />\n\t\t                </div>\n\t\t            </div>\n\t\t\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"beforeTypeCode\">\n\t\t                        <localize key=\"transition.event.beforeType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && beforeTypes != null\" class=\"holder\">\n\t\t                    <select id=\"beforeTypeCode\" name=\"beforeTypeCode\" class=\"select-area\" [(ngModel)]=\"event.beforeTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of beforeTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.beforeTypeLabel\" name=\"beforeType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n\t\t            \n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"afterTypeCode\">\n\t\t                        <localize key=\"transition.event.afterType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && afterTypes != null\" class=\"holder\">\n\t\t                    <select id=\"afterTypeCode\" name=\"afterTypeCode\" class=\"select-area\" [(ngModel)]=\"event.afterTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of afterTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.afterTypeLabel\" name=\"afterType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n            </div>\n            \n            <div class=\"col-md-6\">\n\t\t\t\t      <div class=\"row\" style=\"text-align: center;\">\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.before\"></localize></label>\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.after\"></localize></label>\n\t\t\t\t      </div>\n\t\t\t\t    \n\t\t\t\t      <div style=\"margin-top: 10px;\" id=\"svgHolder\"></div>\n\t\t\t\t    </div>\n\t\t\t\t    \n            <div class=\"row-holder\" *ngIf=\"event.beforeTypeCode != null && event.beforeTypeCode !== '' && event.afterTypeCode != null && event.afterTypeCode !== '' && event.eventDate != null && event.eventDate !== ''\">\n                    <table class=\"table\" style=\"border-collapse: separate;\">\n                        <thead>\n\t                        <tr style=\"height: 50px;color: grey;\">\n\t\t                        <th *ngIf=\"!readonly\"></th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.before\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.impact\"></localize> </th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.after\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.type\"></localize> </th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\"></th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\" *ngIf=\"!readonly\"></th>\n\t                        </tr>\n                        </thead>\n                        <tbody class=\"dndList\" id=\"transition-container\"\n                          [dndDropzone]=\"readonly ? null : true\"\n                          [dndEffectAllowed]=\"readonly ? null : 'copyMove'\"\n                          (dndDrop)=\"readonly ? null : onDrop($event)\"\n                        >\n                            <tr *ngIf=\"!readonly\" class=\"dndPlaceholder\" dndPlaceholderRef>\n                              <td colspan=\"7\"></td>\n                            </tr>\n                        \n                            <tr *ngFor=\"let transition of event.transitions; let i = index;\" class=\"transition\" style=\"height: 50px;\" [attr.data-transOid]=\"transition.oid\"\n                                [dndDraggable]=\"readonly ? null : transition\"\n                                [dndEffectAllowed]=\"readonly ? null : draggable.effectAllowed\"\n                                [dndDisableIf]=\"readonly ? null : draggable.disable\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndStart)=\"readonly ? null : onDragStart($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCopied)=\"readonly ? null : onDraggableCopied($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndLinked)=\"readonly ? null : onDraggableLinked($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndMoved)=\"readonly ? null : onDraggableMoved($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCanceled)=\"readonly ? null : onDragCanceled($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndEnd)=\"readonly ? null : onDragEnd($event)\"\n                            >\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle; text-align: center;\">\n                                  <a style=\"font-size:25px; color: #969696; cursor: move;\" class=\"fa fa-bars\"></a>\n                                </td>\n                                <td>\n                                    <div class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.source-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.sourceText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(true, transition, this.event.beforeTypeCode, 'sourceText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'sourceText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentS-' + i\">\n\n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentS-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'sourceText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td style=\"vertical-align:middle;\">\n                                    <label>{{localizeTransitionImpact(transition.impact)}}</label>\n                                </td>\n                                <td>\n                                    <div  class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.target-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.targetText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(false, transition, this.event.afterTypeCode, 'targetText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'targetText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentT-' + i\">\n                                        \n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentT-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'targetText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td *ngIf=\"transition.typePart || !transition.typeUpdown\" style=\"vertical-align:middle;\">\n                                    <label *ngIf=\"!transition.typeUpdown\">{{localizeTransitionType(transition.transitionType)}}</label>\n                                    <label *ngIf=\"transition.typePart\" style=\"min-width:80px;\">{{localizeTransitionType(transition.typePart)}}</label>\n                                </td>\n                                <td *ngIf=\"transition.typeUpdown\">\n                                    <select style=\"min-width:80px;\" *ngIf=\"transition.typeUpdown\" [name]=\"'transition.transitionType-updown-' + transition.oid + '-' + i\" class=\"select-area\"\n                                        [(ngModel)]=\"transition.typeUpdown\" (change)=\"onChangeTypeUpdown(transition)\" [disabled]=\"readonly\" required>\n                                        <option value=\"UPGRADE\"><localize key=\"transition.event.type.upgrade\"></localize></option>\n                                        <option value=\"DOWNGRADE\"><localize key=\"transition.event.type.downgrade\"></localize></option>\n                                    </select>\n                                </td>\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle;\">\n                                    <span class=\"clickable\" (click)=\"remove(i)\">\n                                        <a class=\"fa fa-trash\" style=\"font-size:30px;\" aria-hidden=\"true\"></a>\n                                    </span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"!readonly\" style=\"margin-left: 6px; margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                        <div class=\"col-md-6\">\n                            <i class=\"fa fa-plus clickable\" (click)=\"onCreate()\"> \n                                <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                            </i>\n                        </div>\n                    </div>\n\n                </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                            role=\"button\" [disabled]=\"form.invalid || !valid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType, BusinessTypeByOrg } from \"@registry/model/business-type\";\nimport { CreateBusinessTypeModalComponent } from \"./modals/create-business-type-modal.component\";\nimport { ManageBusinessTypeModalComponent } from \"./modals/manage-business-type-modal.component\";\n\n@Component({\n    selector: \"business-type-manager\",\n    templateUrl: \"./business-type-manager.component.html\",\n    styleUrls: [\"./business-type-manager.css\"]\n})\nexport class BusinessTypeManagerComponent implements OnInit {\n\n    message: string = null;\n    orgs: BusinessTypeByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: BusinessTypeService, private modalService: BsModalService, private router: Router, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.service.getByOrganization().then(orgs => {\n            this.orgs = orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(org: BusinessTypeByOrg): void {\n        this.bsModalRef = this.modalService.show(CreateBusinessTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(org);\n        this.bsModalRef.content.onBusinessTypeChange.subscribe((type: BusinessType) => {\n            org.types.push(type);\n        });\n    }\n\n    onView(type: BusinessType): void {\n        this.service.edit(type.oid).then(t => {\n            this.bsModalRef = this.modalService.show(ManageBusinessTypeModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(t, true);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onEdit(org: BusinessTypeByOrg, type: BusinessType): void {\n        this.service.edit(type.oid).then(t => {\n            this.bsModalRef = this.modalService.show(ManageBusinessTypeModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(t, false);\n\n            this.bsModalRef.content.onBusinessTypeChange.subscribe(t => {\n                const index = org.types.findIndex((tt) => type.code === tt.code);\n\n                if (index !== -1) {\n                    org.types[index] = t;\n                }\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDelete(org: BusinessTypeByOrg, type: BusinessType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + type.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.remove(type).then(() => {\n                org.types = org.types.filter((t) => {\n                    return t.code !== type.code;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"settings.organizations.heading\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.types && org.types.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"business.data.noTypes\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.types && org.types.length > 0\" class=\"type-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"business.data.types\"></localize></th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let type of org.types; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/business-type/' + type.oid\" routerLinkActive=\"active\">\n                                    {{type.displayLabel.localizedValue}}\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(type)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(org, type)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"modal.button.edit\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onDelete(org, type)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType } from \"@registry/model/business-type\";\n\n@Component({\n    selector: \"create-business-type-modal\",\n    templateUrl: \"./create-business-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateBusinessTypeModalComponent implements OnInit {\n\n    type: BusinessType;\n    organization: Organization = null;\n    message: string = null;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onBusinessTypeChange: Subject<BusinessType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: BusinessTypeService, private lService: LocalizationService, public bsModalRef: BsModalRef) {\n        this.onBusinessTypeChange = new Subject<BusinessType>();\n    }\n\n    ngOnInit(): void {\n        this.type = {\n            code: \"\",\n            organization: \"\",\n            displayLabel: this.lService.create(),\n            description: this.lService.create(),\n            attributes: [],\n            labelAttribute: \"\"\n        };\n    }\n\n    init(organization: any) {\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n\n        this.type.organization = this.organization.code;\n        this.type.organizationLabel = this.organization.label;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply(this.type).then(data => {\n            this.onBusinessTypeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"business.data.type\"></localize>\n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"type.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of type.displayLabel.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"type.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n            \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"type.organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"manage-business-type-modal\",\n    templateUrl: \"./manage-business-type-modal.component.html\",\n    styleUrls: [\"./manage-business-type-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageBusinessTypeModalComponent implements OnInit {\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    message: string = null;\n    type: BusinessType;\n    public onBusinessTypeChange: Subject<BusinessType>;\n    readOnly: boolean = false;\n\n    constructor(private service: BusinessTypeService, private localizationService: LocalizationService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.onBusinessTypeChange = new Subject();\n    }\n\n    init(type: BusinessType, readOnly: boolean) {\n        this.type = type;\n        this.readOnly = readOnly;\n    }\n\n    createAttribute(): void {\n        this.onModalStateChange({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.onModalStateChange({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        let confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.type };\n        confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        confirmBsModalRef.content.type = ModalTypes.danger;\n\n        confirmBsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteAttributeType(this.type.code, attr.code).then(() => {\n                this.type.attributes.splice(this.type.attributes.indexOf(attr), 1);\n\n                this.onBusinessTypeChange.next(this.type);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    onTypeChange(data: BusinessType): void {\n        this.onBusinessTypeChange.next(data);\n    }\n\n    update(): void {\n        this.service.apply(this.type).then(type => {\n            this.onBusinessTypeChange.next(type);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        if (this.type.oid != null) {\n            this.service.unlock(this.type.oid).then(() => {\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef.hide();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n\n  <!--\n    <modal-step-indicator></modal-step-indicator>\n  -->\n\n  <ng-container *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"type\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n      <div class=\"heading text-center\">\n        <h1>\n          <localize *ngIf=\"readOnly\" key=\"business.data.view.type\"></localize>\n          <localize *ngIf=\"!readOnly\" key=\"business.data.edit.type\"></localize>\n          : {{type.displayLabel.localizedValue}}\n        </h1>\n      </div>\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"type.code\" name=\"code\" disabled required>\n            </span>\n          </div>\n        </div>\n\n        <localized-input [disabled]=\"readOnly\" [(value)]=\"type.displayLabel\" key=\"data.property.label.label\">\n        </localized-input>\n        <!--  \n  <localized-text [disabled]=\"readOnly\" [(value)]=\"type.description\" key=\"data.property.label.description\"></localized-text>\n-->\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"attribute.organization.label\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"type.organizationLabel\" name=\"organization\" disabled required>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"attribute.labelAttribute.label\"></localize>                            \n            </label>\n          </div>\n          <div class=\"holder\">\n            <select class=\"select-area\" name=\"labelAttribute\" [(ngModel)]=\"type.labelAttribute\" [disabled]=\"readOnly\">\n              <option *ngFor=\"let attr of type.attributes\" [value]=\"attr.code\">\n                {{attr.label.localizedValue}}\n              </option>\n            </select>\n          </div>\n        </div>\n\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"panel panel-default\">\n              <div class=\"panel-body\">\n\n                <div class=\"table-responsive\">\n                  <table class=\"table\">\n                    <tbody>\n                      <tr *ngFor=\"let attr of type.attributes\">\n                        <td>{{attr.label.localizedValue}}</td>\n                        <td class=\"button-column\" style=\"width: 60px;\">\n                          <ng-container *ngIf=\"!readOnly && !attr.isDefault\">\n                            <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                              [title]=\"'modal.button.edit' | localize\"></a>\n                            <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\"\n                              (click)=\"removeAttributeType(attr, $event)\"\n                              [title]=\"'modal.button.remove' | localize\"></a>\n                          </ng-container>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\"\n                  aria-hidden=\"true\" (click)=\"createAttribute()\">\n                  <localize key=\"modal.button.add\"></localize>\n                </i>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"form.invalid\"\n              (click)=\"update()\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n  </ng-container>\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"type\"\n    [service]=\"service\" (geoObjectTypeChange)=\"onTypeChange($event)\" (stateChange)=\"onModalStateChange($event)\">\n  </define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"type\"\n    [attribute]=\"modalState.attribute\" [service]=\"service\" (geoObjectTypeChange)=\"onTypeChange($event)\"\n    (stateChange)=\"onModalStateChange($event)\">\n  </edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    (stateChange)=\"onModalStateChange($event)\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    [termOption]=\"modalState.termOption\" (stateChange)=\"onModalStateChange($event)\">\n  </edit-term-option-input>\n\n</div>","import { Component, OnInit } from \"@angular/core\";\n\nimport { ActivatedRoute } from \"@angular/router\";\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from \"@shared/model/generic-table\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"business-table\",\n    templateUrl: \"./business-table.component.html\",\n    styles: []\n})\nexport class BusinessTableComponent implements OnInit {\n\n    message: string = null;\n\n    businessType: BusinessType;\n\n    config: GenericTableConfig = null;\n    cols: GenericTableColumn[] = [];\n\n    constructor(private service: BusinessTypeService, private localizationService: LocalizationService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.get(oid).then(businessType => {\n            this.businessType = businessType;\n\n            this.cols = [];\n\n            this.businessType.attributes.forEach(attribute => {\n                let type = \"TEXT\";\n                let sortable = true;\n\n                if (attribute.type === \"integer\" || attribute.type === \"decimal\") {\n                    type = \"NUMBER\";\n                } else if (attribute.type === \"boolean\") {\n                    type = \"BOOLEAN\";\n                } else if (attribute.type === \"term\") {\n                    sortable = false;\n                } else if (attribute.type === \"date\") {\n                    type = \"DATE\";\n                }\n\n                this.cols.push({ header: attribute.label.localizedValue, field: attribute.code, type: type, sortable: sortable, filter: sortable });\n            });\n            // this.cols.push({\n            //     header: this.localizationService.decode(\"dropdown.select.geoobject.label\"),\n            //     field: \"geoObject\",\n            //     type: \"TEXT\",\n            //     sortable: true\n            // });\n\n            // this.cols.push({ header: \"\", type: \"ACTIONS\", sortable: false });\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: false,\n                create: false,\n                label: this.businessType.displayLabel.localizedValue,\n                sort: { field: \"code\", order: 1 }\n            };\n        });\n    }\n\n    onClick(event: TableEvent): void {\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <ng-container *ngIf=\"businessType != null\">\n            <h2>{{businessType.displayLabel.localizedValue}}</h2>\n            <generic-table [cols]=\"cols\" [config]=\"config\" [pageConfig]=\"{typeCode: businessType.code}\" (click)=\"onClick($event)\"></generic-table>\t\t\n        </ng-container>\n    </div>\n</div>\n\n","import { Component, OnInit, Input, ViewChild, ElementRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, EventService } from \"@shared/service\";\nimport { HierarchyService } from \"@registry/service\";\n\nimport { SpreadsheetModalComponent } from \"@registry/component/importer/modals/spreadsheet-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"business-importer\",\n    templateUrl: \"./business-importer.component.html\",\n    styleUrls: [\"./business-importer.css\"]\n})\nexport class BusinessImporterComponent implements OnInit {\n\n    currentDate: Date = new Date();\n\n    showImportConfig: boolean = true;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    businessTypes: BusinessType[] = [];\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    businessTypeCode: string = null;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Date\n     */\n    date: Date = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string = \"EXCEL\";\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private hierarchyService: HierarchyService,\n        private businessService: BusinessTypeService\n    ) { }\n\n    ngOnInit(): void {\n        this.businessService.getAll().then(businessTypes => {\n            this.businessTypes = businessTypes;\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = registry.contextPath + \"/excel/get-business-config\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.businessTypeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.date != null) {\n                form.append(\"date\", this.date);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.hierarchy = this.hierarchyCode;\n            configuration.geoObjectType = { code: this.typeCode };\n\n            this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            this.bsModalRef.content.init(configuration, \"geoObjectType\", true);\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n            <div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\n                <div class=\"heading\">\n                    <h2>\n                        <localize key=\"business.data.import\"></localize>\n                    </h2>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n                    <div *ngIf=\"!showImportConfig\">\n                        <div>\n                            <div class=\"row\">\n\n                                <div class=\"col-xs-1\"></div>\n                                <div class=\"col-xs-9 radio-btn-wrapper\">\n\n                                    <label class=\"radio\">\n                                        <input type=\"checkbox\" [value]=\"true\" [checked]=\"true\"\n                                            (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                                        <span [ngClass]=\"{'active' : true}\">\n                                            <localize key=\"importer.import.from-file.label\"></localize>\n                                        </span>\n                                        <p class=\"radio-label-description\">\n                                            <localize key=\"importer.import.from-file.description\"></localize>\n                                        </p>\n                                    </label>\n\n                                    <div class=\"button-holder\">\n                                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                                            <localize key=\"io.next\"></localize>\n                                        </button>\n                                    </div>\n                                </div>\n                                <div class=\"col-xs-2\"></div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"showImportConfig\">\n                        <div>\n                            <form #form=\"ngForm\" autocomplete=\"off\">\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"businessTypeCode\"> <localize key=\"business.data.type\"></localize></label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"businessTypeCode\" name=\"businessTypeCode\" class=\"select-area\"\n                                            [(ngModel)]=\"businessTypeCode\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let businessType of businessTypes\"\n                                                value={{businessType.code}}>{{businessType.displayLabel.localizedValue}}\n                                            </option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                                    <label class=\"col-md-2 text-right\" for=\"hierarchyCode\">\n                                        <localize key=\"io.modal.hierarchy\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\"\n                                            [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>\n                                                {{view.label}}</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                                    <label class=\"col-md-2 text-right\" for=\"code\">\n                                        <localize key=\"io.geoObjectType\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\"\n                                            (change)=\"onSelectType()\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>\n                                                {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n                                            </option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"strategy\">\n                                        <localize *ngIf=\"this.format === 'EXCEL'\"\n                                            key=\"spreadsheet.import.import.strategy\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"strategy\" name=\"strategy\" class=\"select-area\"\n                                            [(ngModel)]=\"importStrategy\" required>\n                                            <option *ngFor=\"let strategy of importStrategies\"\n                                                value={{strategy.strategy}}>{{strategy.label}}</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"date\">Date</label>\n                                    <div class=\"col-md-8\">\n                                        <date-field #dateFieldComponents [(value)]=\"date\" label=\"\" [inputName]=\"'date'\"\n                                            [allowFutureDates]=\"false\"></date-field>\n                                    </div>\n\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n\n                                    <label class=\"col-md-2 text-right\" for=\"copyBlank\">\n                                        <localize key=\"dataimporter.importblankcells\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"file\">\n                                        <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\"\n                                            type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xls, .xlsx\"\n                                            required />\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n\n                                <div class=\"form-group row\">\n                                    <div class=\"col-md-2\"></div>\n                                    <div class=\"button-holder col-md-8 text-right\">\n                                        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\"\n                                            (click)=\"onClick()\">\n                                            <localize key=\"io.submit\"></localize>\n                                        </button>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n    </div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse, HttpParams } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { HistoricalRow } from \"@registry/model/transition-event\";\nimport { AuthService, DateService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"historical-report\",\n    templateUrl: \"./historical-report.component.html\",\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class HistoricalReportComponent {\n\n    message: string = null;\n\n    page: PageResult<HistoricalRow> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    data = {\n        type: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    }\n\n    types: { label: string, code: string }[] = [];\n\n    isValid: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private iService: IOService, private authService: AuthService,\n        public dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.iService.listGeoObjectTypes(true).then(types => {\n            this.types = types;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getHistoricalReport(this.data.type, this.data.startDate, this.data.endDate, this.page.pageSize, pageNumber).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    exportToExcel(): void {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", this.data.type.toString());\n        params = params.set(\"startDate\", this.data.startDate.toString());\n        params = params.set(\"endDate\", this.data.endDate.toString());\n\n        window.location.href = registry.contextPath + \"/transition-event/export-excel?\" + params.toString();\n    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = (this.data.startDate != null && this.data.endDate != null && !this.dateService.after(this.data.startDate, this.data.endDate));\n        }, 0);\n    }\n\n    public error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n  <form #form=\"ngForm\" autocomplete=\"off\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"code\">\n        <localize key=\"io.geoObjectType\"></localize>\n      </label>\n      <div class=\"col-md-8\">\n        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"data.type\" required>\n          <option></option>\n          <option *ngFor=\"let type of types\" [value]=\"type.code\">\n            {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n          </option>\n        </select>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"startDate\">\n        <localize key=\"io.startDate\"></localize>\n      </label>\n      <div class=\"col-md-2\">\n        <date-field #dateFieldComponents [(value)]=\"data.startDate\" label=\"\" [inputName]=\"'startDate'\"\n          [allowFutureDates]=\"false\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n        <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(data.startDate, data.endDate)\">\n\t        <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n\t      </span>\n      </div>\n\n      <label class=\"col-md-2 text-right\" for=\"endDate\">\n        <localize key=\"io.endDate\"></localize>\n      </label>\n      <div class=\"col-md-4\">\n        <date-field #dateFieldComponents [(value)]=\"data.endDate\" label=\"\" [inputName]=\"'endDate'\"\n          [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"button-holder col-md-8 text-right\">\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"refresh()\">\n          <localize key=\"io.submit\"></localize>\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"exportToExcel()\">\n          <localize key=\"io.export\"></localize>\n        </button>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n  </form>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventId\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventDate\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeLabel\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterLabel\"></localize>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-row\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td>\n                {{row.eventId}}\n              </td>\n              <td>\n                <date-text [date]=\"row.eventDate\"></date-text>\n              </td>\n              <td>\n                {{row.eventType}}\n              </td>\n              <td>\n                {{row.description.localizedValue}}\n              </td>\n              <td>\n                {{row.beforeType}}\n              </td>\n              <td>\n                {{row.beforeCode}}\n              </td>\n              <td>\n                {{row.beforeLabel.localizedValue}}\n              </td>\n              <td>\n                {{row.afterType}}\n              </td>\n              <td>\n                {{row.afterCode}}\n              </td>\n              <td>\n                {{row.afterLabel.localizedValue}}\n              </td>\n            </tr>\n\n          </ng-template>\n        </tbody>\n      </table>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"historical-event-module\",\n    templateUrl: \"./historical-event-module.component.html\",\n    styleUrls: []\n})\nexport class HistoricalEventModuleComponent {\n\n    tab: string = \"HISTORICAL-EVENT\";\n\n    readOnly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.readOnly = this.authService.isRC(true);\n        this.tab = this.readOnly ? \"HISTORICAL-REPORT\" : \"HISTORICAL-EVENT\";\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>\n              <localize *ngIf=\"tab === 'HISTORICAL-EVENT'\" key=\"transition.event.events\"></localize>\n              <localize *ngIf=\"tab === 'HISTORICAL-REPORT'\" key=\"historical.row.report\"></localize>\n            </h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <div *ngIf=\"!readOnly\" class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"form-group button-row\">\n\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-EVENT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-EVENT' ? 'cr-filter-link-active' : ''\"\n                    style=\"border-bottom: 1px solid;\">\n                    <localize key=\"transition.event.events\"></localize> \n                  </a>\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-REPORT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-REPORT' ? 'cr-filter-link-active' : ''\"\n                    style=\"margin-left: 5px;border-bottom:1px solid;\">\n                    <localize key=\"historical.row.report\"></localize>\n                  </a>\n\n                </div>\n                <hr style=\"border-top:solid 3px #6BA542\" />\n\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <transition-event-table *ngIf=\"tab === 'HISTORICAL-EVENT'\"></transition-event-table>\n                <historical-report *ngIf=\"tab === 'HISTORICAL-REPORT'\"></historical-report>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit, ViewChildren, QueryList } from \"@angular/core\";\nimport { ActivatedRoute, Params } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { Organization } from \"@shared/model/core\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { Subscription } from \"rxjs\";\nimport Utils from \"@registry/utility/Utils\";\n\n@Component({\n    selector: \"list-type-manager\",\n    templateUrl: \"./list-type-manager.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeManagerComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n    listByType: ListTypeByType = null;\n    current: ListType = null;\n\n    subscription: Subscription = null;\n\n    noQueryParams = false;\n\n    @ViewChildren(\"typesByOrgIter\") typesByOrgIterEls: QueryList<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private registryService: RegistryService,\n        private route: ActivatedRoute,\n        private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.subscription = this.route.queryParams.subscribe((params: Params) => {\n            const typeCode = params.typeCode;\n            const listId = params.listId;\n\n            if (listId != null && listId.length > 0) {\n                this.service.entries(listId).then(current => {\n                    this.current = current;\n                    this.listByType = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else if (typeCode != null && typeCode.length > 0) {\n                this.service.listForType(typeCode).then(listByType => {\n                    this.listByType = listByType;\n                    this.current = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else {\n                this.noQueryParams = true;\n            }\n\n            // this.refresh();\n        });\n\n        if (this.typesByOrg.length === 0) {\n            this.registryService.init().then(response => {\n                this.typesByOrg = [];\n\n                //\n                // Order alphabetically\n                // TODO: sort these on the server\n                //\n                response.organizations.sort((a, b) => {\n                    if (a.label.localizedValue < b.label.localizedValue) {\n                        return -1;\n                    }\n                    if (a.label.localizedValue > b.label.localizedValue) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                //\n                // End sort\n\n                // put org of the user on top\n                if (!this.authService.isSRA()) {\n                    let pos = null;\n                    let myorg = this.authService.getMyOrganizations();\n                    pos = response.organizations.findIndex(org => {\n                        return org.code === myorg[0];\n                    });\n\n                    if (pos >= 0) {\n                        Utils.arrayMove(response.organizations, pos, 0);\n                    }\n                }\n\n                response.organizations.forEach((org, index) => {\n                    //\n                    // Post processing to better handle groups in the frontend\n                    //\n                    let orgTypes = response.types.filter(t => t.organizationCode === org.code);\n                    let orgTypesNoGroupMembers = orgTypes.filter(t => !t.superTypeCode);\n\n                    orgTypesNoGroupMembers.sort((a, b) => {\n                        if (a.label.localizedValue < b.label.localizedValue) {\n                            return -1;\n                        }\n                        if (a.label.localizedValue > b.label.localizedValue) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n\n                    let groupTypes = [];\n                    let groups = orgTypesNoGroupMembers.filter(gType => gType.isAbstract);\n                    groups.forEach(group => {\n                        let groupType = { group: group, members: [] };\n                        orgTypes.forEach(t => {\n                            if (t.superTypeCode === group.code) {\n                                groupType.members.push(t);\n                            }\n                        });\n                        groupTypes.push(groupType);\n                    });\n\n                    groupTypes.forEach(grpT => {\n                        let index = orgTypesNoGroupMembers.findIndex(grp => grpT.group.code === grp.code);\n                        if (index !== -1) {\n                            orgTypesNoGroupMembers.splice(index + 1, 0, ...grpT.members);\n                        }\n                    });\n                    //\n                    // End post processing\n                    //\n\n                    this.typesByOrg.push({ org: org, types: orgTypesNoGroupMembers });\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        this.typesByOrgIterEls.changes.subscribe(t => {\n            // Select the first type on load if no URL type params\n            if (this.noQueryParams && t.length > 0) {\n                let els = document.getElementsByClassName(\"got-li-item\");\n                if (els && els.length > 0) {\n                    let el = els[0].firstChild as HTMLElement;\n                    el.click();\n                }\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n\n            <nav class=\"col-md-3 list-sidebar\">\n                <div class=\"sidebar-section-content\">\n                    <ul *ngFor=\"let typeByOrg of typesByOrg;\" class=\"list-group\">\n                        <div>\n\n                            <div class=\"got-org-label-wrapper\">\n                                <h3>{{typeByOrg.org.label.localizedValue}}</h3>\n                            </div>\n\n                            <li class=\"list-group-item got-li-item\" [ngClass]=\"{'got-group-child' : type.superTypeCode}\" *ngFor=\"let type of typeByOrg.types\"\n                                [id]=\"type.code\" #typesByOrgIter>\n                                <a [routerLink]=\"'/registry/master-lists'\"\n                                    [queryParams]=\"{typeCode:type.code}\" routerLinkActive=\"active\">\n                                    {{type.label.localizedValue}}\n                                </a>\n                            </li>\n                        </div>\n                    </ul>\n                </div>\n            </nav>\n            <div class=\"col-md-9 list-type-content\">\n                <div id=\"overflow-div\">\n                    <lists-for-type *ngIf=\"listByType != null\" [listByType]=\"listByType\" (error)=\"error($event)\">\n                    </lists-for-type>\n\n                    <list-type *ngIf=\"current != null\" [list]=\"current\" (error)=\"error($event)\"></list-type>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ListTypePublishModalComponent } from \"./publish-modal.component\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"lists-for-type\",\n    templateUrl: \"./lists-for-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListsForTypeComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() listByType: ListTypeByType = null;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n\n    groups = {\n        single: [],\n        interval: [],\n        incremental: []\n    };\n\n    /*\n     * Observable subject for ListType changes.  Called when an update is successful\n     */\n    onListTypeChange: Subject<ListType>;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.onListTypeChange = new Subject();\n        this.onListTypeChange.subscribe(() => {\n            // Refresh\n            this.service.listForType(this.listByType.typeCode).then(listByType => {\n                this.listByType = listByType;\n\n                this.createGroups(this.listByType);\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.onListTypeChange.unsubscribe();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.listByType != null) {\n            this.createGroups(changes.listByType.currentValue);\n        }\n    }\n\n    createGroups(listByType: ListTypeByType): void {\n        this.groups = {\n            single: [],\n            interval: [],\n            incremental: []\n        };\n\n        listByType.lists.forEach(list => {\n            if (list.listType === \"single\") {\n                this.groups.single.push(list);\n            } else if (list.listType === \"interval\") {\n                this.groups.interval.push(list);\n            } else if (list.listType === \"incremental\") {\n                this.groups.incremental.push(list);\n            }\n        });\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange);\n    }\n\n    onEdit(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange, list);\n    }\n\n    onDelete(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + list.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.remove(list).then(response => {\n                this.listByType.lists = this.listByType.lists.filter((value, index, arr) => {\n                    return value.oid !== list.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n}\n","<ng-template #groupDetail let-lists='lists' let-listByType=\"listByType\">\n    <div *ngFor=\"let list of lists; let i = index;\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-7\" style=\"vertical-align:middle;line-height:40px;\">\n                            <i *ngIf=\"list.listType === 'single'\" class=\"fa fa-table\" aria-hidden=\"true\"></i>\n                            <span *ngIf=\"list.listType !== 'single'\" class=\"fa-stack fa-lg\">\n                                <i class=\"fa fa-table fa-stack-2x\"></i>\n                                <i class=\"fa fa-table fa-stack-1x second-stacked-el\"\n                                    style=\"margin-left:8px;margin-top:-4px;\"></i>\n                            </span>\n\n                            <a [routerLink]=\"'/registry/master-lists'\"\n                                [queryParams]=\"{typeCode:listByType.typeCode, listId: list.oid}\"\n                                routerLinkActive=\"active\" style=\"font-size:18px;\">\n                                {{list.displayLabel.localizedValue}}\n                            </a>\n                        </div>\n                        <div class=\"col-md-5\" style=\"text-align: right;\">\n                            <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                <localize key=\"masterlist.button.configuration\"></localize>\n                            </button>\n                            <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(list)\" class=\"btn btn-danger\"\n                                role=\"button\">\n                                <localize key=\"modal.button.delete\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'single'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"list.type.valid.on\"></localize>:\n                                    <date-text [date]=\"list.validOn\"></date-text>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'incremental'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"data.property.label.publishingStartDate\"></localize>:\n                                    <date-text [date]=\"list.publishingStartDate\"></date-text>\n                                </li>\n                                <li>\n                                    <localize key=\"data.property.label.frequency\"></localize>: {{list.frequency}}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'interval'\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.valid.on\"></localize>:\n                            <ul class=\"unstyled-list\">\n                                <li *ngFor=\"let interval of list.intervalJson\">\n                                    <date-text [date]=\"interval.startDate\"></date-text>\n                                    -\n                                    <date-text [date]=\"interval.endDate\"></date-text>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <p style=\"color: #707070;\">{{list.description.localizedValue}}</p>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    </div>\n\n</ng-template>\n\n\n<ng-container>\n    <div class=\"heading\">\n        <h2>\n            {{listByType.orgLabel}} : {{listByType.typeLabel}}\n        </h2>\n    </div>\n    <div class=\"subheading\">\n        <h3>\n            <localize key=\"list.type.heading\"></localize>\n        </h3>\n    </div>\n    <hr />\n    <div *ngIf=\"listByType.write\" style=\"margin-top:30px;margin-bottom:30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n            <div>\n                <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"list.type.button.create\"></localize>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"groups.single.length > 0\">\n        <h3>\n            <localize key=\"list.type.single.date\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.single, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"groups.incremental.length > 0\">\n        <h3>\n            <localize key=\"list.type.incremental.series\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.incremental, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"groups.interval.length > 0\">\n        <h3>\n            <localize key=\"list.type.interval.series\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.interval, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"listByType.lists.length === 0\" style=\"font-style:italic;\">\n        <localize key=\"list.type.no.lists.message\"></localize>\n    </div>\n\n</ng-container>","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { AuthService, LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeEntry, ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypePublishModalComponent } from \"./publish-modal.component\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { PublishVersionComponent } from \"./publish-version.component\";\nimport { Router } from \"@angular/router\";\nimport { LngLatBounds } from \"mapbox-gl\";\nimport * as ColorGen from \"color-generator\";\nimport { Layer, ListVectorLayerDataSource } from \"@registry/service/layer-data-source\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\n\n@Component({\n    selector: \"list-type\",\n    templateUrl: \"./list-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeComponent implements OnInit, OnDestroy {\n\n    @Input() list: ListType;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n    isRC: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private router: Router,\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService,\n        private geomService: GeometryService,\n        private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.isRC = this.authService.isGeoObjectTypeOrSuperRC({\n            organizationCode: this.list.organization,\n            code: this.list.typeCode,\n            superTypeCode: this.list.superTypeCode\n        });\n\n        // Expand the most recent version by default\n        this.list.entries.filter(entry => {\n            return (entry.versions != null && entry.versions.length > 0);\n        }).forEach(entry => {\n            entry.versions[0].collapsed = true;\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    toggleVersions(entry: ListTypeEntry) {\n        entry.showAll = !entry.showAll;\n    }\n\n    onCreate(entry: ListTypeEntry): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry);\n    }\n\n    onCreateEntries(): void {\n        // Expand the most recent version by default\n        this.service.createEntries(this.list.oid).then(list => {\n            list.entries.forEach(entry => {\n                if (this.list.entries.findIndex(e => e.oid === entry.oid) === -1) {\n                    this.list.entries.push(entry);\n                }\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error.emit(err);\n        });\n    }\n\n    onEdit(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry, version);\n    }\n\n    onViewConfiguration(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(list, null, list);\n    }\n\n    onDelete(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" Version [\" + version.versionNumber + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.removeVersion(version).then(response => {\n                const index = entry.versions.findIndex(v => v.oid === version.oid);\n\n                if (index !== -1) {\n                    entry.versions.splice(index, 1);\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    layerFromVersion(version: ListTypeVersion): any {\n        let dataSource = new ListVectorLayerDataSource(this.service, version.oid);\n        let layer = dataSource.createLayer(version.displayLabel, true, ColorGen().hexString());\n        this.geomService.zoomOnReady(layer.getId());\n        return this.geomService.getDataSourceFactory().serializeLayers([layer]);\n    }\n\n    onGotoMap(version: ListTypeVersion): void {\n        this.service.getBounds(version.oid).then(bounds => {\n            const queryParams: any = {\n                layers: JSON.stringify(this.layerFromVersion(version))\n            };\n\n            if (bounds && Array.isArray(bounds)) {\n                let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n                const array = llb.toArray();\n\n                queryParams.bounds = JSON.stringify(array);\n            }\n\n            this.router.navigate([\"/registry/location-manager\"], {\n                queryParams: queryParams\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error.emit(err);\n        });\n    }\n\n}\n","<ng-template #versionDetail let-version='version' let-entry=\"entry\">\n    <div class=\"row\" style=\"margin-bottom:5px;line-height:40px;\">\n        <div class=\"col-md-7\" style=\"vertical-align: middle;\">\n\n            <span class=\"clickable\" (click)=\"version.collapsed = !version.collapsed\"\n                [attr.aria-expanded]=\"!version.collapsed\">\n\n                <i class=\"fa fa-chevron-right\"\n                    [ngClass]=\"{'fa-chevron-down' : version.collapsed, 'fa-chevron-right' : !version.collapsed}\"\n                    style=\"font-size:14px;\"></i>\n\n                <span class=\"h4\" *ngIf=\"!version.working\">\n                    <localize key=\"list.type.version\"></localize> {{version.versionNumber}}\n                </span>\n                <span class=\"h4\" *ngIf=\"version.working\">\n                    <localize key=\"list.type.working.version\"></localize>\n                </span>\n                <span style=\"margin-left:10px;color:grey;\">\n                    <localize key=\"list.type.date.generated\"></localize>: {{version.createDate}}\n                </span>\n            </span>\n        </div>\n        <div class=\"col-md-5\" style=\"text-align: right;\">\n            <button type=\"submit\" (click)=\"onEdit(entry, version)\" class=\"btn btn-default\" role=\"button\">\n                <localize *ngIf=\"version.working\" key=\"masterlist.button.metadata\"></localize>\n                <localize *ngIf=\"!version.working\" key=\"masterlist.snapshot.button.metadata\"></localize>\n            </button>\n            <button *ngIf=\"list.write && !version.working\" type=\"submit\" (click)=\"onDelete(entry, version)\"\n                class=\"btn btn-danger\" role=\"button\">\n                <localize key=\"modal.button.delete\"></localize>\n            </button>\n        </div>\n\n    </div>\n\n    <div class=\"row\" style=\"margin-bottom:5px;\" [collapse]=\"!version.collapsed\">\n        <ul style=\"list-style:none;\">\n            <li>\n                <a *ngIf=\"(version.isMember || version.listMetadata.visibility === 'PUBLIC')\"\n                    [routerLink]=\"'/registry/master-list/' + version.oid\" routerLinkActive=\"active\">\n                    <localize key=\"list.type.list\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.listMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.list\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.listMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.listMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n            </li>\n            <li>\n                <a *ngIf=\"(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\"\n                    (click)=\"onGotoMap(version)\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.geospatialMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.geospatialMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n\n            </li>\n        </ul>\n    </div>\n</ng-template>\n\n\n<ng-container>\n\n    <div class=\"heading\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h2>\n                    {{list.displayLabel.localizedValue}}\n                </h2>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-12\" style=\"padding: 20px 15px;\">\n            <button type=\"submit\" (click)=\"onViewConfiguration(list)\" class=\"btn btn-default\" style=\"padding-right: 10px;\"\n                role=\"button\">\n                <localize key=\"masterlist.button.configuration\"></localize>\n            </button>\n\n            <button *ngIf=\"list.listType === 'incremental'\" type=\"submit\" (click)=\"onCreateEntries()\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\">\n                <localize key=\"list.type.create.entries\"></localize>\n            </button>\n        </div>\n    </div>\n\n\n    <div *ngFor=\"let entry of list.entries\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <h3>\n                                <ng-container *ngIf=\"entry.period.type === 'text'\">\n                                    {{entry.period.value}}\n                                </ng-container>\n                                <ng-container *ngIf=\"entry.period.type === 'date'\">\n                                    <date-text [date]=\"entry.period.value\"></date-text>\n                                </ng-container>\n                                <ng-container *ngIf=\"entry.period.type === 'range'\">\n                                    <date-text [date]=\"entry.period.value.startDate\"></date-text>\n                                    -\n                                    <date-text [date]=\"entry.period.value.endDate\"></date-text>\n                                </ng-container>\n\n                            </h3>\n                        </div>\n                    </div>\n\n\n                    <ng-container *ngIf=\"entry.versions.length > 0 && entry.versions[entry.versions.length - 1].working\"\n                        [ngTemplateOutlet]=\"versionDetail\"\n                        [ngTemplateOutletContext]=\"{entry:entry, version:entry.versions[entry.versions.length - 1]}\">\n                    </ng-container>\n\n                    <hr style=\"border-color:lightgrey;\">\n\n                    <h4 style=\"margin-top:20px;\">\n                        <localize key=\"list.type.published.versions.header\"></localize>\n                    </h4>\n\n\n                    <div>\n                        <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onCreate(entry)\" class=\"btn btn-primary\"\n                            style=\"margin:0;\" role=\"button\">\n                            <localize key=\"list.type.new.version\"></localize>\n                        </button>\n\n                        <button *ngIf=\"entry.versions.length > 2\" type=\"submit\" (click)=\"toggleVersions(entry)\"\n                            class=\"btn btn-default\" role=\"button\">\n                            <localize *ngIf=\"!entry.showAll\" key=\"list.type.see.versions\"></localize>\n                            <localize *ngIf=\"entry.showAll\" key=\"list.type.hide.versions\"></localize>\n                        </button>\n                    </div>\n\n                    <ng-container *ngIf=\"entry.versions.length > 1\">\n                        <ng-container *ngFor=\"let version of entry.versions; let j = index;\">\n                            <ng-container *ngIf=\"j === 0 || (entry.showAll && j !== (entry.versions.length -1))\"\n                                [ngTemplateOutlet]=\"versionDetail\"\n                                [ngTemplateOutletContext]=\"{entry:entry, version:version}\">\n                            </ng-container>\n                        </ng-container>\n                        <!--                         <div class=\"row\" style=\"margin-bottom: 5px;\"> -->\n                        <!--                             <div class=\"col-md-12\" style=\"text-align: left;\"> -->\n                        <!--                                 <button *ngIf=\"entry.versions.length > 2\" type=\"submit\" (click)=\"toggleVersions(entry)\" -->\n                        <!--                                     class=\"btn btn-default\" role=\"button\"> -->\n                        <!--                                     <localize *ngIf=\"!entry.showAll\" key=\"list.type.see.versions\"></localize> -->\n                        <!--                                     <localize *ngIf=\"entry.showAll\" key=\"list.type.hide.versions\"></localize> -->\n                        <!--                                 </button> -->\n                        <!--                             </div> -->\n                        <!--                         </div> -->\n                    </ng-container>\n\n                    <div class=\"row\" *ngIf=\"entry.versions.length === 1\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.no.versions\" style=\"color:grey;font-style:italic;\"></localize>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</ng-container>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { ListType, ListTypeEntry, ListTypeVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"publish-version\",\n    templateUrl: \"./publish-version.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class PublishVersionComponent implements OnInit {\n\n    message: string = null;\n\n    list: ListType = null;\n    entry: ListTypeEntry = null;\n\n    metadata: ListVersionMetadata = null;\n\n    tab: string = \"LIST\";\n\n    readonly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    init(list: ListType, entry: ListTypeEntry, version?: ListTypeVersion): void {\n        this.list = list;\n        this.entry = entry;\n        this.readonly = !list.write;\n\n        if (version == null) {\n            const working: ListTypeVersion = entry.versions[entry.versions.length - 1];\n\n            this.metadata = {\n                listMetadata: {\n                    visibility: \"PRIVATE\",\n                    master: false,\n                    ...JSON.parse(JSON.stringify(working.listMetadata))\n                },\n                geospatialMetadata: {\n                    visibility: \"PRIVATE\",\n                    master: false,\n                    ...JSON.parse(JSON.stringify(working.geospatialMetadata))\n                }\n            };\n        } else {\n            this.metadata = version;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.metadata.oid != null) {\n            this.service.applyVersion(this.metadata).then(version => {\n                if (this.entry.versions != null) {\n                    const index = this.entry.versions.findIndex(v => v.oid === version.oid);\n\n                    version.collapsed = this.entry.versions[index].collapsed;\n\n                    this.entry.versions[index] = version;\n                }\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.service.createVersion(this.entry, this.metadata).then(version => {\n                this.entry.versions.unshift(version);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-list=\"list\" let-type=\"type\">\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.ismaster\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <boolean-field [disable]=\"readonly\" [(value)]=\"metadata.master\" label=\"\"></boolean-field>\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.visibility\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"metadata.visibility\" [disabled]=\"readonly\"\n                required>\n                <option value=\"PRIVATE\">\n                    <localize key=\"masterlist.private\"></localize>\n                </option>\n                <option *ngIf=\"!list.typePrivate\" value=\"PUBLIC\">\n                    <localize key=\"masterlist.public\"></localize>\n                </option>\n            </select>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.label\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"true\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"metadata != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n<!--         <div class=\"heading text-center\"> -->\n<!--             <h1> -->\n<!--                 <localize key=\"list.type.versionMetadata\"></localize> -->\n<!--             </h1> -->\n<!--         </div> -->\n\n\t\t<div class=\"text-center\">\n\t\t\t<h2>\n\t\t\t\t<localize key=\"type.publish.metadata.header\"></localize>\n\t\t\t</h2>\n\t\t\t<hr>\n\t    </div>\n\t\t\t\t\t        \n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <div class=\"label-holder\"></div>\n                        \n                            <div class=\"holder\">\n                              <div class=\"form-group\" style=\"text-align: center;\">\n\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('LIST')\" -->\n<!--                                     [ngClass]=\"tab === 'LIST' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"border-bottom: 1px solid;\"> -->\n<!--                                     <localize key=\"list.type.list\"></localize> -->\n<!--                                 </a> -->\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('GEOSPATIAL')\" -->\n<!--                                     [ngClass]=\"tab === 'GEOSPATIAL' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"margin-left: 5px;border-bottom:1px solid;\"> -->\n<!--                                     <localize key=\"list.type.geospatial\"></localize> -->\n<!--                                 </a> -->\n                                \n                                <div class=\"btn-group geobject-editor-tab-holder\">\n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.list\"></localize></span>\n                                    </label> \n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\" (click)=\"handleTab('GEOSPATIAL')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.geospatial\"></localize></span>\n                                    </label> \n                                  </div>\n                                  \n                                </div>\n                              </div>\n\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.listMetadata, list:list, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.geospatialMetadata, list:list, type:'geospatial'}\">\n                            </ng-container>\n\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"!form.valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LazyLoadEvent, FilterMetadata } from \"primeng/api\";\n\nimport { Subject, Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\nimport * as ColorGen from \"color-generator\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { AuthService, ProgressService } from \"@shared/service\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ExportFormatModalComponent } from \"./export-format-modal.component\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from \"@shared/model/generic-table\";\nimport { LngLatBounds } from \"mapbox-gl\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { ListVectorLayerDataSource } from \"@registry/service/layer-data-source\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"list\",\n    templateUrl: \"./list.component.html\",\n    styleUrls: [\"./list.component.css\"]\n})\nexport class ListComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    list: ListTypeVersion = null;\n    current: string = \"\";\n    isRefreshing: boolean = false;\n    isWritable: boolean = false;\n    isRM: boolean = false;\n    isSRA: boolean = false;\n\n    orgCode: string;\n    userOrgCodes: string[];\n\n    config: GenericTableConfig = null;\n    cols: GenericTableColumn[] = null;\n    refresh: Subject<void>;\n\n    filters: { [s: string]: FilterMetadata; } = null;\n\n    showInvalid = false;\n\n    historyOid: string = null;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    progressNotifier: WebSocketSubject<{ type: string, content: any }>;\n    progressSubscription: Subscription = null;\n\n    jobNotifier: WebSocketSubject<{ type: string, message: string }>;\n    jobSubscription: Subscription = null;\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private modalService: BsModalService,\n        private service: ListTypeService,\n        private pService: ProgressService,\n        private geomService: GeometryService,\n        private authService: AuthService) {\n        this.userOrgCodes = this.authService.getMyOrganizations();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.getVersion(oid).then(version => {\n            this.list = version;\n            this.orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(this.orgCode, typeCode);\n            this.isRM = this.authService.isGeoObjectTypeRM(this.orgCode, typeCode);\n            this.isSRA = this.authService.isSRA();\n\n            this.refreshColumns();\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: true,\n                create: false,\n                label: this.list.displayLabel,\n                sort: { field: \"code\", order: 1 }\n            };\n\n            if (version.refreshProgress != null) {\n                this.handleProgressChange(version.refreshProgress);\n            }\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.progressNotifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.progressSubscription = this.progressNotifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(message);\n            }\n        });\n\n        this.jobNotifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.jobSubscription = this.jobNotifier.subscribe(message => {\n            this.handleJobChange();\n        });\n\n        this.refresh = new Subject<void>();\n    }\n\n    ngOnDestroy() {\n        if (this.refresh != null) {\n            this.refresh.unsubscribe();\n        }\n\n        if (this.progressSubscription != null) {\n            this.progressSubscription.unsubscribe();\n        }\n\n        this.progressNotifier.complete();\n\n        if (this.jobSubscription != null) {\n            this.jobSubscription.unsubscribe();\n        }\n\n        this.jobNotifier.complete();\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === \"view\") {\n            this.onGotoMap(event.row);\n        }\n        //  else if (event.type === \"remove\") {\n        //     this.onRemove(event.row as Sensor);\n        // } else if (event.type === \"create\") {\n        //     this.newInstance();\n        // }\n    }\n\n    refreshColumns(): void {\n        this.cols = [];\n\n        if (this.list.isMember || this.list.geospatialMetadata.visibility === \"PUBLIC\") {\n            this.cols.push({ header: \"\", type: \"ACTIONS\", sortable: false });\n        }\n\n        //\n        // Order list columns\n        // mdAttributes don't currently define the difference between hierarchy or custom attributes.\n        // This ordering is a best attempt given these constraints.\n        //\n        let orderedArray = [];\n        let code = this.list.attributes.filter(obj => {\n            return obj.name === \"code\";\n        });\n        let label = this.list.attributes.filter(obj => {\n            return obj.name.includes(\"displayLabel\");\n        });\n\n        orderedArray.push(code[0], ...label);\n\n        let customAttrs = [];\n        let otherAttrs = [];\n        this.list.attributes.forEach(attr => {\n            if (attr.type === \"input\" && attr.name !== \"latitude\" && attr.name !== \"longitude\") {\n                customAttrs.push(attr);\n            } else if (attr.name !== \"code\" && !attr.name.includes(\"displayLabel\") && attr.name !== \"latitude\" && attr.name !== \"longitude\") {\n                otherAttrs.push(attr);\n            }\n        });\n\n        orderedArray.push(...customAttrs, ...otherAttrs);\n\n        let coords = this.list.attributes.filter(obj => {\n            return obj.name === \"latitude\" || obj.name === \"longitude\";\n        });\n\n        if (coords.length === 2) {\n            orderedArray.push(...coords);\n        }\n\n        orderedArray.forEach(attribute => {\n            if (this.showInvalid || attribute.name !== \"invalid\") {\n                let column: GenericTableColumn = {\n                    header: attribute.label,\n                    field: attribute.name,\n                    type: \"TEXT\",\n                    sortable: true,\n                    filter: true\n                };\n\n                if (attribute.type === \"date\") {\n                    column.type = \"DATE\";\n                } else if (attribute.name === \"invalid\" || attribute.type === \"boolean\") {\n                    column.type = \"BOOLEAN\";\n                } else if (attribute.type === \"number\") {\n                    column.type = \"NUMBER\";\n                } else if (attribute.type === \"list\") {\n                    column.type = \"AUTOCOMPLETE\";\n                    column.text = \"\";\n                    column.onComplete = () => {\n                        this.service.values(this.list.oid, column.text, attribute.name, this.filters).then(options => {\n                            column.results = options;\n                        }).catch((err: HttpErrorResponse) => {\n                            this.error(err);\n                        });\n                    };\n                }\n\n                this.cols.push(column);\n            }\n        });\n    }\n\n    handleShowInvalidChange(): void {\n        this.refreshColumns();\n        this.refresh.next();\n    }\n\n    handleProgressChange(progress: any): void {\n        this.isRefreshing = (progress.current < progress.total);\n\n        this.pService.progress(progress);\n\n        if (!this.isRefreshing && this.refresh != null) {\n            // Refresh the resultSet\n            // this.onPageChange(1);\n            this.refresh.next();\n        }\n    }\n\n    handleJobChange(): void {\n        if (this.historyOid != null) {\n            this.service.getJob(this.historyOid).then(job => {\n                if (job != null) {\n                    if (job.status === \"SUCCESS\" || job.status === \"FAILURE\") {\n                        this.handleProgressChange({ current: 1, total: 1 });\n\n                        this.historyOid = null;\n                    }\n\n                    if (job.status === \"FAILURE\" && job.exception != null) {\n                        this.message = job.exception.message;\n                    }\n                }\n            });\n        }\n    }\n\n    onEdit(data): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        editModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            // this.onPageChange(this.page.pageNumber);\n            this.refresh.next();\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishList(this.list.oid).toPromise().then((result: { jobOid: string }) => {\n            this.isRefreshing = true;\n            this.list.curation = {};\n            this.historyOid = result.jobOid;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onNewGeoObject(type: string = null): void {\n        if (!type) {\n            type = this.list.typeCode;\n        }\n\n        const params: any = {\n            layers: JSON.stringify(this.layerFromVersion(this.list)),\n            type: type,\n            code: \"__NEW__\"\n        };\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    onExport(): void {\n        const criteria = {\n            filters: this.filters != null ? { ...this.filters } : {}\n        };\n\n        if (!this.showInvalid) {\n            criteria.filters[\"invalid\"] = { value: false, matchMode: \"equals\" };\n        }\n\n        this.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.onFormat.subscribe(format => {\n            if (format === \"SHAPEFILE\") {\n                window.location.href = registry.contextPath + \"/list-type/export-shapefile?oid=\" + this.list.oid + \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n            } else if (format === \"EXCEL\") {\n                window.location.href = registry.contextPath + \"/list-type/export-spreadsheet?oid=\" + this.list.oid + \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n            }\n        });\n    }\n\n    onWheel(event: WheelEvent): void {\n        let tableEl = (<Element>event.target).parentElement.closest(\"table\").parentElement;\n\n        tableEl.scrollLeft += event.deltaY;\n        event.preventDefault();\n    }\n\n    layerFromVersion(version: ListTypeVersion): any {\n        let dataSource = new ListVectorLayerDataSource(this.service, version.oid);\n        let layer = dataSource.createLayer(version.displayLabel, true, ColorGen().hexString());\n        this.geomService.zoomOnReady(layer.getId());\n        return this.geomService.getDataSourceFactory().serializeLayers([layer]);\n    }\n\n    onGotoMap(result: any): void {\n        const params: any = { layers: JSON.stringify(this.layerFromVersion(this.list)) };\n\n        if (result != null) {\n            params.version = this.list.oid;\n            params.uid = result.uid;\n            params.pageContext = \"DATA\";\n\n            this.router.navigate([\"/registry/location-manager\"], {\n                queryParams: params\n            });\n        } else {\n            this.service.getBounds(this.list.oid).then(bounds => {\n                if (bounds && Array.isArray(bounds)) {\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n                    const array = llb.toArray();\n\n                    params.bounds = JSON.stringify(array);\n                }\n\n                this.router.navigate([\"/registry/location-manager\"], {\n                    queryParams: params\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    onRunCuration(): void {\n        this.service.createCurationJob(this.list).then(job => {\n            this.router.navigate([\"/registry/curation-job\", this.list.oid]);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onFilter(event: LazyLoadEvent): void {\n        this.filters = null;\n\n        if (event.filters != null) {\n            this.filters = event.filters;\n        }\n    }\n\n    isListInOrg(): boolean {\n        if (this.userOrgCodes && this.userOrgCodes.length > 0 && this.userOrgCodes.indexOf(this.orgCode) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar *ngIf=\"isRefreshing\"></progress-bar>\n\n    <div *ngIf=\"list != null\" id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row\">\n\n            <div class=\"col-md-4\">\n\n                <h4>\n                    <span *ngIf=\"!list.working\">\n                        <localize *ngIf=\"!list.working\" key=\"list.type.version\"></localize>&nbsp;{{list.versionNumber}}\n                    </span>\n                    <span *ngIf=\"list.working\">\n                        <localize key=\"list.type.working.version\"></localize>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlist.list.visibility\"></localize> :\n                    <span class=\"date-string-display\">\n                        <localize *ngIf=\"list.listMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\"></localize>\n                        <localize *ngIf=\"list.listMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\"></localize>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlists.list.authoritativeness\"></localize> :\n                    <span class=\"date-string-display\">\n                        <localize *ngIf=\"list.listMetadata.master\" key=\"list.type.master\"></localize>\n                        <localize *ngIf=\"!list.listMetadata.master\" key=\"list.type.non.master\"></localize>\n                    </span>\n                </h4>\n            </div>\n            <div class=\"col-md-8\">\n                <h4>\n                    <localize key=\"masterlist.generatedDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        <date-text [date]=\"list.publishDate\"></date-text>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        <date-text [date]=\"list.forDate\"></date-text>\n                    </span>\n                </h4>\n            </div>\n        </div>\n\n        <div class=\"row\" style=\"margin-bottom:10px;\">\n            <div class=\"col-md-4\">\n                <div *ngIf=\"list.working && (isRM || isRA || isSRA)\" class=\"button-holder pull-left\">\n                    <button type=\"submit\" class=\"btn btn-primary\" role=\"button\" (click)=\"onRunCuration()\"\n                        style=\"margin-left:0;\">\n                        <localize key=\"list.type.run.curation\"></localize>\n                    </button>\n                    <span\n                        style=\"vertical-align:middle;display:inline-block;font-style: italic;margin-left: 5px;color: grey;\">\n                        <span *ngIf=\"list.curation.lastRun == null\" class=\"date-string-display\">\n                            <localize key=\"list.type.run.na\"></localize>\n                        </span>\n                        <a *ngIf=\"list.curation.lastRun != null\" [routerLink]=\"['/registry/curation-job', list.oid]\"\n                            routerLinkActive=\"active\">\n                            <localize key=\"list.type.last.validation.date\"></localize>\n                            <date-text [date]=\"list.curation.lastRun\"></date-text>\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"button-holder pull-right\">\n\n                    <span *ngIf=\"isWritable\" class=\"clickable\"\n                        style=\"vertical-align:middle;display:inline-block;line-height:0;\">\n                        <boolean-field [(value)]=\"showInvalid\" (change)=\"handleShowInvalidChange()\"\n                            [localizeLabelKey]=\"'masterlist.showInvalid'\"></boolean-field>\n                    </span>\n\n                    <span *ngIf=\"list.working\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true}\"\n                            style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n                    <button *ngIf=\"list.isMember || list.geospatialMetadata.visibility === 'PUBLIC'\" type=\"submit\"\n                        (click)=\"onGotoMap(null)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.viewOnMap\"></localize>\n                    </button>\n\n                    <button *ngIf=\"list.working && isWritable && !list.isAbstract\" type=\"submit\"\n                        (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.newGeoObject\"></localize>\n                    </button>\n\n                    <span dropdown #dropdown=\"bs-dropdown\" class=\"dropdown\" *ngIf=\"list.working && isWritable && list.isAbstract\">\n                        <button dropdownToggle class=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\"\n                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                            <span class=\"caret\"></span>\n                        </button>\n                        <ul *dropdownMenu class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n<!--                             <li> -->\n<!--                                 <localize style=\"padding-left:10px;\" key=\"masterlist.newGeoObject.selectASubtype\"> -->\n<!--                                 </localize> -->\n<!--                             </li> -->\n<!--                             <li role=\"separator\" class=\"divider\"></li> -->\n                            <li *ngFor=\"let subtype of list.subtypes\"><a\n                                    (click)=\"onNewGeoObject(subtype.code)\">{{subtype.label}}</a></li>\n                        </ul>\n                    </span>\n\n                    <button *ngIf=\"list.listMetadata.visibility === 'PUBLIC' || list.geospatialMetadata.visibility === 'PUBLIC' || isListInOrg() || isSRA\"\n                     type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"filters == null\" key=\"io.export.allrows\"></localize>\n                        <localize *ngIf=\"filters != null\" key=\"io.export.filteredrows\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\" style=\"max-height:calc(100vh - 460px); min-height:calc(100vh - 460px);\">\n\n                <ng-container *ngIf=\"cols != null && config != null\">\n                    <generic-table [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\"\n                        [pageConfig]=\"{oid: list.oid, showInvalid: showInvalid}\" (click)=\"onClick($event)\"\n                        (onFilter)=\"onFilter($event)\"></generic-table>\n                </ng-container>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\n\n@Component({\n    selector: \"export-format-modal\",\n    templateUrl: \"./export-format-modal.component.html\",\n    styleUrls: []\n})\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next(this.format);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            Export\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"export.option.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"export.option.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { Subscription } from \"rxjs\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"curation-job\",\n    templateUrl: \"./curation-job.component.html\",\n    styleUrls: []\n})\nexport class CurationJobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    version: ListTypeVersion;\n    job: CurationJob;\n\n    page: PageResult<CurationProblem> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(private router: Router, public service: ListTypeService, private modalService: BsModalService,\n        private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params[\"oid\"];\n        this.service.getVersion(oid).then(version => {\n            this.version = version;\n\n            this.onPageChange(1);\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"CURATION_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: CurationProblem): void {\n        const index = this.page.resultSet.findIndex(p => p.id === problem.id);\n\n        if (index !== -1) {\n            this.page.resultSet.splice(index, 1);\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.no.geometry\");\n        } else if (probType === \"INVALID_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.invalid.geometry\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: CurationProblem): void {\n        // this.bsModalRef = this.modalService.show(CurationProblemModalComponent, {\n        //     animated: true,\n        //     backdrop: true,\n        //     ignoreBackdropClick: true\n        // });\n        // this.bsModalRef.content.init(this.version, problem, this.job, (result: any) => {\n        //     // if (result.action === \"RESOLVED\") {\n        //     // this.onProblemResolved(result.data);\n        //     // }\n        // });\n\n        const params: any = {\n            layers: JSON.stringify([this.version.oid]),\n            version: this.version.oid,\n            uid: problem.goUid,\n            pageContext: 'DATA'\n        };\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    toggleResolution(problem: CurationProblem): void {\n        const resolution = (problem.resolution == null || problem.resolution.length === 0 || problem.resolution === \"UNRESOLVED\")\n            ? \"APPLY_GEO_OBJECT\"\n            : \"UNRESOLVED\";\n\n        this.service.setResolution(problem, resolution).then(() => {\n            problem.resolution = resolution;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        if (this.version != null) {\n            this.message = null;\n\n            this.service.getCurationInfo(this.version, false, pageNumber, this.page.pageSize).then(response => {\n                this.job = response;\n\n                if (this.job.status === \"SUCCESS\") {\n                    this.page = this.job.page;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"py-5\">\n      <h2>\n        <localize key=\"curation.job.title\"></localize>\n      </h2>\n    </div>\n    <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n      <div class=\"col-md-4 order-md-1\">\n        <div class=\"wrapper\">\n\n          <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n          <p style=\"padding-left: 60px;\">\n            <span style=\"display: block;\">\n              <strong>{{version.label}}</strong>\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"list.type.job.started.by\"></localize>\n              {{job.lastRunBy}}\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"scheduledjobs.job.started.label\"></localize>\n              <span class=\"date-string-display\">\n                <date-text [date]=\"job.lastRun\"></date-text>\n              </span>\n            </span>\n          </p>\n\n        </div>\n      </div>\n      <div class=\"col-md-3 order-md-1\">\n        <div>\n\n          <h5><b>{{job.workProgress}}\n            <localize key=\"list.type.validated.out.of\"></localize>\n              {{job.workTotal}}\n              <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n            </b></h5>\n          <h5>{{job.workTotal - job.workProgress}} <localize key=\"scheduledjobs.job.remaining.label\"></localize>\n          </h5>\n\n        </div>\n      </div>\n      <div class=\"col-md-5 order-md-1\">\n      </div>\n    </div>\n    <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n\n        <ul class=\"list-group\">\n\n          <table class=\"list-table table table-bordered table-striped\">\n            <thead>\n              <tr>\n                <th class=\"label-column\">\n                  <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n                </th>\n                <th class=\"label-column\">\n                  <localize key=\"data.property.label.code\"></localize>\n                </th>\n                <th class=\"label-column\">\n\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{getFriendlyProblemType(row.type)}}</p>\n                </td>\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{row.goCode}}</p>\n                </td>\n                <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                  <button *ngIf=\"row.resolution !=='APPLY_GEO_OBJECT' \" type=\"submit\" (click)=\"onEdit(row)\"\n                    class=\"btn btn-link\" role=\"button\">\n                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                  </button>\n                  <boolean-field [value]=\"row.resolution === 'APPLY_GEO_OBJECT'\" (change)=\"toggleResolution(row)\"\n                    [label]=\"'list.type.problem.resolved' | localize\" style=\"vertical-align:middle;line-height:0;\"></boolean-field>\n\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div class=\"solid-table-footer\">\n            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n              <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n          </div>\n        </ul>\n      </div>\n    </div>\n    <div *ngIf=\"job && job.status === 'SUCCESS' && page && page.resultSet.length === 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <localize key=\"list.type.validation.empty\"></localize>\n      </div>\n    </div>\n\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\nimport { PageResult } from \"@shared/model/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\nimport { Subscription } from \"rxjs\";\nimport { ClassificationTypePublishModalComponent } from \"./classification-type-publish-modal.component\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\n@Component({\n    selector: \"classification-type-manager\",\n    templateUrl: \"./classification-type-manager.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypeManagerComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    page: PageResult<ClassificationType> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    querySubscription: Subscription = null;\n\n    subscription: Subscription = null;\n\n    classificationType: ClassificationType = null;\n\n    /*\n    * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private service: ClassificationTypeService,\n        private lService: LocalizationService,\n        private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.querySubscription = this.route.queryParams.subscribe((params: Params) => {\n            const typeCode = params.typeCode;\n\n            if (typeCode != null && typeCode.length > 0) {\n                if (this.classificationType == null || this.classificationType.code !== typeCode) {\n                    this.classificationType = null;\n\n                    this.service.get(typeCode).then(classificationType => {\n                        this.classificationType = classificationType;\n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                }\n            } else {\n                this.classificationType = null;\n            }\n        });\n\n        this.refresh();\n    }\n\n    ngOnDestroy(): void {\n        if (this.querySubscription != null) {\n            this.querySubscription.unsubscribe();\n        }\n\n        this.querySubscription = null;\n\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.subscription = null;\n    }\n\n    onCreate(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(() => this.refresh());\n    }\n\n    onEdit(type: ClassificationType): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(() => this.refresh(), type);\n    }\n\n    onDelete(type: ClassificationType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + type.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(type).then(() => {\n                const index = this.page.resultSet.findIndex(t => t.oid === type.oid);\n\n                if (index !== -1) {\n                    this.page.resultSet.splice(index, 1);\n                }\n\n                if (this.classificationType != null && type.code === this.classificationType.code) {\n                    this.router.navigate([], {\n                        relativeTo: this.route,\n                        queryParams: { typeCode: null }\n                    });\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    refresh(): void {\n        this.service.page({}).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n\n            <nav class=\"col-md-3 list-sidebar\">\n                <div class=\"sidebar-section-content\" style=\"padding-top:20px;\">\n                    <ul class=\"list-group\">\n\n\n                        <li class=\"list-group-item got-li-item\" *ngFor=\"let type of page.resultSet\" [id]=\"type.code\">\n                            <a [routerLink]=\"'/registry/classification-type'\" [queryParams]=\"{typeCode:type.code}\"\n                                routerLinkActive=\"active\">\n                                {{type.displayLabel.localizedValue}}\n                            </a>\n\n                            <span\n                                style=\"position:absolute;right:10px;top:50%;transform:translateY(-50%);\">\n\n                                <a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(type)\"\n                                    [title]=\"'modal.button.edit' | localize\"></a>\n                                <a class=\"fa fa-trash-o ico-remove\" (click)=\"onDelete(type)\"\n                                    [title]=\"'button.delete.helptext' | localize\"></a>\n                            </span>\n\n                        </li>\n                        <li class=\"list-group-item got-li-item\">\n                            <hr class=\"bottom\">\n                            <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <div class=\"col-md-9 hierarchy-content\">\n                <div id=\"overflow-div\">\n                    <classification-type *ngIf=\"classificationType != null\" [classificationType]=\"classificationType\"></classification-type>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\n\n@Component({\n    selector: \"classification-type-publish-modal\",\n    templateUrl: \"./classification-type-publish-modal.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypePublishModalComponent implements OnInit, OnDestroy {\n\n    currentDate: Date = new Date();\n    message: string = null;\n    onClassificationTypeChange: Subject<ClassificationType> = null;\n\n    type: ClassificationType = null;\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ClassificationTypeService,\n        private lService: LocalizationService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onClassificationTypeChange = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.onClassificationTypeChange != null) {\n            this.onClassificationTypeChange.unsubscribe();\n        }\n    }\n\n    init(observer: Observer<ClassificationType>, type?: ClassificationType): Subscription {\n        if (type == null) {\n            this.isNew = true;\n            this.type = {\n                oid: null,\n                displayLabel: this.lService.create(),\n                description: this.lService.create(),\n                code: \"\"\n            };\n        } else {\n            this.type = type;\n            this.isNew = false;\n        }\n\n        return this.onClassificationTypeChange.subscribe(observer);\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.type).then(response => {\n            this.onClassificationTypeChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    stringify(obj: any): string {\n        return JSON.stringify(obj);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"type != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1 *ngIf=\"isNew\">\n                <localize key=\"data.type.create.classification\"></localize>                \n            </h1>\n            <h1 *ngIf=\"!isNew\">\n                {{type.displayLabel.localizedValue}}\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"type.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of type.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.label\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of type.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.description\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, Input, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subscription } from \"rxjs\";\nimport { TreeComponent, TreeModel, TreeNode, TREE_ACTIONS } from \"@circlon/angular-tree-component\";\nimport { ContextMenuComponent, ContextMenuService } from \"ngx-contextmenu\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { Classification, ClassificationType } from \"@registry/model/classification-type\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { ClassificationPublishModalComponent } from \"./classification-publish-modal.component\";\nimport { PageResult } from \"@shared/model/core\";\n\nconst PAGE_SIZE: number = 100;\n\n// eslint-disable-next-line no-unused-vars\nenum NodeType {\n    // eslint-disable-next-line no-unused-vars\n    CLASSIFICATION = 0, LINK = 1\n}\n\nclass ClassificationNode {\n\n    name: string;\n    code: string;\n    type: NodeType;\n    classification?: Classification;\n    hasChildren: boolean;\n    children?: ClassificationNode[];\n    parent?: ClassificationNode;\n    pageNumber?: number;\n\n}\n\n@Component({\n    selector: \"classification-type\",\n    templateUrl: \"./classification-type.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypeComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    @Input() classificationType: ClassificationType = null;\n\n    nodes: ClassificationNode[] = null;\n\n    subscription: Subscription = null;\n\n    /*\n    * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild(TreeComponent)\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    options = {\n        idField: \"code\",\n        getChildren: (node: TreeNode) => {\n            return this.getChildren(node);\n        },\n        actionMapping: {\n            mouse: {\n                click: (tree: TreeComponent, node: TreeNode, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: TreeNode, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                },\n                drop: (tree: TreeModel, node: TreeNode, $event: any, obj: {\n                    from: any;\n                    to: any;\n                }) => {\n                    this.onMoveNode(tree, node, $event, obj);\n                }\n            }\n        },\n        allowDrag: (node: TreeNode) => {\n            if (node.data.type === NodeType.CLASSIFICATION) {\n                const code = node.data.classification.code;\n\n                return this.nodes.findIndex(root => root.classification.code === code) === -1;\n            }\n\n            return false;\n        },\n        allowDrop: (node: TreeNode, event: { parent: TreeNode, index: number }) => {\n            if (event != null && event.parent != null) {\n                return event.parent.data.type === NodeType.CLASSIFICATION;\n            }\n\n            return false;\n        },\n        animateExpand: true,\n        scrollOnActivate: true,\n        animateSpeed: 2,\n        animateAcceleration: 1.01\n    }\n\n    constructor(\n        private contextMenuService: ContextMenuService,\n        private modalService: BsModalService,\n        private service: ClassificationService,\n        private lService: LocalizationService\n    ) { }\n\n    ngOnInit(): void {\n        this.getChildren(null).then(nodes => {\n            this.nodes = nodes;\n\n            if (this.nodes.length > 0) {\n                window.setTimeout(() => {\n                    this.tree.treeModel.getFirstRoot().expand();\n                }, 50);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.subscription = null;\n    }\n\n    getChildren(treeNode: TreeNode): Promise<ClassificationNode[]> {\n        const node: ClassificationNode = treeNode != null ? treeNode.data : null;\n\n        const code = node != null ? node.classification.code : null;\n\n        return this.service.getChildren(this.classificationType.code, code, 1, PAGE_SIZE).then(page => {\n            const nodes = this.createNodes(node, page);\n\n            if (node != null) {\n                if (node.children == null) {\n                    node.children = [];\n                }\n\n                node.children.concat(nodes);\n            }\n\n            return nodes;\n        }).catch(ex => {\n            return [];\n        });\n    }\n\n    createNodes(parent: ClassificationNode, page: PageResult<Classification>): ClassificationNode[] {\n        const nodes = page.resultSet.map(child => {\n            return {\n                code: child.code,\n                name: child.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: child,\n                hasChildren: true\n            } as ClassificationNode;\n        });\n\n        // Add page node if needed\n        if (page.count > page.pageNumber * page.pageSize) {\n            nodes.push({\n                code: \"...\",\n                name: \"...\",\n                type: NodeType.LINK,\n                hasChildren: false,\n                pageNumber: page.pageNumber + 1,\n                parent: parent\n            } as ClassificationNode);\n        }\n\n        return nodes;\n    }\n\n    handleOnMenu(node: TreeNode, $event: any): void {\n        this.contextMenuService.show.next({\n            contextMenu: this.nodeMenuComponent,\n            event: $event,\n            item: node\n        });\n        $event.preventDefault();\n        $event.stopPropagation();\n    }\n\n    treeNodeOnClick(treeNode: TreeNode, $event: any): void {\n        const node: ClassificationNode = treeNode != null ? treeNode.data : null;\n\n        if (node != null && node.type === NodeType.LINK) {\n            if (treeNode.parent != null) {\n                const parentNode: ClassificationNode = treeNode.parent.data;\n                const code = parentNode.classification.code;\n                const pageNumber = node.pageNumber;\n\n                this.service.getChildren(this.classificationType.code, code, pageNumber, PAGE_SIZE).then(page => {\n                    const nodes = this.createNodes(parentNode, page);\n\n                    parentNode.children = parentNode.children.filter(node => node.code !== \"...\");\n                    parentNode.children = parentNode.children.concat(nodes);\n\n                    this.tree.treeModel.update();\n                }).catch(ex => {\n                });\n            }\n        } else {\n            if (treeNode.isExpanded) {\n                treeNode.collapse();\n            } else {\n                treeNode.expand();\n            }\n\n            treeNode.setActiveAndVisible();\n        }\n    }\n\n    onCreate(parentNode: TreeNode): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        const parent: ClassificationNode = parentNode != null ? parentNode.data : null;\n\n        this.bsModalRef = this.modalService.show(ClassificationPublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(classification => {\n            const node: ClassificationNode = {\n                code: classification.code,\n                name: classification.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: classification,\n                hasChildren: true\n            };\n\n            if (parentNode != null) {\n                parent.children.push(node);\n            } else {\n                this.nodes.push(node);\n            }\n\n            this.tree.treeModel.update();\n        }, this.classificationType, (parent != null ? parent.classification : null));\n    }\n\n    onEdit(node: TreeNode): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationPublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(classification => {\n            const classificationNode: ClassificationNode = node.data;\n            classificationNode.classification = classification;\n            classificationNode.name = classification.displayLabel.localizedValue;\n\n            this.tree.treeModel.update();\n        }, this.classificationType, null, node.data.classification);\n    }\n\n    onRemove(node: TreeNode): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + node.data.classification.code + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.removeTreeNode(node);\n        });\n    }\n\n    onMoveNode(tree: TreeModel, node: TreeNode, $event: any, obj: {\n        from: any;\n        to: any;\n    }): void {\n        const parent: Classification = node.data.classification;\n        const classification: Classification = obj.from.data.classification;\n        const parentCode = parent.code;\n        const code = classification.code;\n\n        let message = this.lService.decode(\"classification.move.message\");\n        message = message.replace(\"{0}\", classification.displayLabel.localizedValue);\n        message = message.replace(\"{1}\", parent.displayLabel.localizedValue);\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.message = null;\n\n            this.service.move(this.classificationType.code, code, parentCode).then(() => {\n                TREE_ACTIONS.MOVE_NODE(tree, node, $event, obj);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    removeTreeNode(node: TreeNode): void {\n        this.message = null;\n\n        this.service.remove(this.classificationType.code, node.data.classification.code).then(() => {\n            if (node.parent.data.classification == null) {\n                this.nodes = [];\n            }\n\n            const parent: TreeNode = node.parent;\n            const children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter((n: any) => n.id !== node.data.id);\n\n            if (parent.data.children.length === 0) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    /*\n\n    refresh(): void {\n    this.service.page({}).then(page => {\n        this.page = page;\n    }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n    });\n    }\n    */\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<context-menu #nodeMenu>\n    <ng-template contextMenuItem let-item (execute)=\"onEdit($event.item)\">\n        <localize key=\"modal.button.edit\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"onRemove($event.item)\">\n        <localize key=\"modal.button.delete\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"onCreate($event.item)\">\n        <localize key=\"hierarchy.content.addChild\"></localize>\n    </ng-template>\n</context-menu>\n\n<ng-container>\n\n    <div class=\"heading\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" style=\"margin-top: 5px;\" role=\"alert\">{{message}}</div>\n\n                <h2>\n                    {{classificationType.displayLabel.localizedValue}}\n                </h2>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"classificationType != null && nodes != null\" class=\"row\">\n        <div class=\"col-md-12\">\n            <ng-container *ngIf=\"nodes.length === 0\">\n                <button type=\"submit\" (click)=\"onCreate(null)\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"classification.set.root\"></localize>\n                </button>\n            </ng-container>\n            <div>\n                <tree-root *ngIf=\"nodes.length > 0\" #tree [options]=\"options\" [nodes]=\"nodes\">\n                </tree-root>\n            </div>\n        </div>\n    </div>\n\n</ng-container>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { Classification, ClassificationType } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\n\n@Component({\n    selector: \"classification-publish-modal\",\n    templateUrl: \"./classification-publish-modal.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationPublishModalComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    onClassificationChange: Subject<Classification> = null;\n\n    classificationType: ClassificationType = null;\n\n    parent: Classification = null;\n\n    classification: Classification = null;\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ClassificationService,\n        private lService: LocalizationService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onClassificationChange = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.onClassificationChange != null) {\n            this.onClassificationChange.unsubscribe();\n        }\n    }\n\n    init(observer: Observer<ClassificationType>, classificationType: ClassificationType, parent: Classification, classification?: Classification): Subscription {\n        this.classificationType = classificationType;\n        this.parent = parent;\n\n        if (classification == null) {\n            this.isNew = true;\n            this.classification = {\n                code: \"\",\n                displayLabel: this.lService.create(),\n                description: this.lService.create()\n            };\n        } else {\n            this.classification = classification;\n            this.isNew = false;\n        }\n\n        return this.onClassificationChange.subscribe(observer);\n    }\n\n    onSubmit(): void {\n        const classificationType = this.classificationType.code;\n        const parentCode = this.parent != null ? this.parent.code : null;\n\n        // classificationType: string, parentCode: string, classification: Classification, isNew: boolean\n        this.service.apply(classificationType, parentCode, this.classification, this.isNew).then(response => {\n            this.onClassificationChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"classification != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1 *ngIf=\"isNew\">\n                <localize key=\"data.type.create.classification\"></localize>                \n            </h1>\n            <h1 *ngIf=\"!isNew\">\n                {{classificationType.displayLabel.localizedValue}}\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"classification.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of classification.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.label\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of classification.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.description\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Layer } from \"./layer-data-source\";\n\nexport class LayerDiff {\n\n    type: \"LAYER_REORDER\" | \"REMOVE_LAYER\" | \"NEW_LAYER\" | \"COLOR_CHANGE\" | \"RENDERED_CHANGE\"\n    newLayer: Layer;\n    newLayerIndex: number;\n    oldLayer: Layer;\n    oldLayerIndex: number;\n\n    constructor(type: \"LAYER_REORDER\" | \"REMOVE_LAYER\" | \"NEW_LAYER\" | \"COLOR_CHANGE\" | \"RENDERED_CHANGE\", newLayer: Layer, newLayerIndex: number, oldLayer: Layer, oldLayerIndex: number) {\n        this.type = type;\n        this.newLayer = newLayer;\n        this.newLayerIndex = newLayerIndex;\n        this.oldLayer = oldLayer;\n        this.oldLayerIndex = oldLayerIndex;\n    }\n\n    equals(obj: any) {\n        if (!(obj instanceof LayerDiff)) {\n            return false;\n        }\n\n        return this.type === obj.type &&\n               this.newLayerIndex === obj.newLayerIndex && this.oldLayerIndex === obj.oldLayerIndex &&\n               ((this.newLayer == null && obj.newLayer == null) || (this.newLayer != null && obj.newLayer != null && this.newLayer.getId() === obj.newLayer.getId())) &&\n               ((this.oldLayer == null && obj.oldLayer == null) || (this.oldLayer != null && obj.oldLayer != null && this.oldLayer.getId() === obj.oldLayer.getId()));\n    }\n\n}\n\nexport class LayerDiffingStrategy {\n\n    private newLayers: Layer[];\n\n    private oldLayers: Layer[];\n\n    private diffs: LayerDiff[] = [];\n\n    constructor(newLayers: Layer[], oldLayers: Layer[]) {\n        this.newLayers = newLayers;\n        this.oldLayers = oldLayers;\n        this.calculateDiffs();\n    }\n\n    public getDiffs(): LayerDiff[] {\n        return this.diffs;\n    }\n\n    private calculateDiffs(): void {\n        this.diffs = [];\n\n        let iterations = Math.max(this.newLayers.length, this.oldLayers.length);\n        for (let i = 0; i < iterations; ++i) {\n            let newLayer: Layer = null;\n            let oldLayer: Layer = null;\n            let newLayerIndex: number = -1;\n            let oldLayerIndex: number = -1;\n\n            if (i < this.newLayers.length) {\n                newLayer = this.newLayers[i];\n                newLayerIndex = i;\n\n                oldLayerIndex = this.oldLayers.findIndex(findLayer => findLayer.getId() === newLayer.getId());\n                if (oldLayerIndex !== -1) {\n                    oldLayer = this.oldLayers[oldLayerIndex];\n                }\n\n                this.diffLayers(newLayer, newLayerIndex, oldLayer, oldLayerIndex);\n            }\n\n            newLayer = null;\n            oldLayer = null;\n            newLayerIndex = -1;\n            oldLayerIndex = -1;\n\n            if (i < this.oldLayers.length) {\n                oldLayer = this.oldLayers[i];\n                oldLayerIndex = i;\n\n                newLayerIndex = this.newLayers.findIndex(findLayer => findLayer.getId() === oldLayer.getId());\n                if (newLayerIndex !== -1) {\n                    newLayer = this.newLayers[newLayerIndex];\n                }\n\n                this.diffLayers(newLayer, newLayerIndex, oldLayer, oldLayerIndex);\n            }\n        }\n    }\n\n    private addDiff(diff: LayerDiff) {\n        if (this.diffs.findIndex(search => search.equals(diff)) === -1) {\n            this.diffs.push(diff);\n        }\n    }\n\n    private diffLayers(newLayer: Layer, newLayerIndex: number, oldLayer: Layer, oldLayerIndex: number): void {\n        if (newLayer != null && oldLayer != null) {\n            if (newLayerIndex !== oldLayerIndex) {\n                this.addDiff(new LayerDiff(\"LAYER_REORDER\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n            }\n\n            if (newLayer.rendered !== oldLayer.rendered) {\n                this.addDiff(new LayerDiff(\"RENDERED_CHANGE\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n            }\n            if (newLayer.color !== oldLayer.color) {\n                this.addDiff(new LayerDiff(\"COLOR_CHANGE\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n            }\n        } else if (newLayer != null && oldLayer == null) {\n            this.addDiff(new LayerDiff(\"NEW_LAYER\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n        } else if (newLayer == null && oldLayer != null) {\n            this.addDiff(new LayerDiff(\"REMOVE_LAYER\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n        }\n    }\n\n}\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\nimport { calculateTextWidth } from \"./svg-util\";\n\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\nimport { SvgHierarchyType } from \"./svg-hierarchy-type\";\nimport { HierarchyComponent, RELATED_NODE_BANNER_COLOR } from \"../hierarchy.component\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nexport class SvgHierarchyNode {\n\n    private hierarchyComponent: HierarchyComponent;\n\n    private svgHierarchyType: SvgHierarchyType;\n\n    private geoObjectType: GeoObjectType;\n\n    private treeNode: any;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    constructor(hierarchyComponent: HierarchyComponent, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n        public localizeService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        this.hierarchyComponent = hierarchyComponent;\n        this.svgHierarchyType = svgHierarchyType;\n        this.geoObjectType = geoObjectType;\n        this.treeNode = treeNode;\n    }\n\n    getCode(): string {\n        return this.geoObjectType.code;\n    }\n\n    setPos(x: number, y: number, dragging: boolean) {\n        let bbox = this.getBbox();\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + 5)\n            .attr(\"y\", y + 1);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + bbox.width - 20)\n            .attr(\"y\", y + 17);\n\n        // Move inherit and uninherit buttons with the node they're moving\n\n        let inheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (inheritNode != null) {\n            const heritX = (x + bbox.width - 60);\n            const heritY = (y + bbox.height - 24);\n            let inheritBbox = inheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n        }\n\n        let uninheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (uninheritNode != null) {\n            const heritX = (x + bbox.width - 71);\n            const heritY = (y + bbox.height - 24);\n            let uninheritBbox = uninheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n        }\n    }\n\n    getPos() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n    }\n\n    getBbox() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n    }\n\n    getTreeNode() {\n        return this.treeNode;\n    }\n\n    hideRelatedHierarchy(): string {\n        let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n        if (existingSecondary.node() != null) {\n            existingSecondary.remove();\n            this.hierarchyComponent.calculateSvgViewBox();\n\n            let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n            return existingSecondaryCode;\n        }\n    }\n\n    renderRelatedHierarchiesMenu() {\n        let that = this;\n        let existingMenu = d3.select(\".g-context-menu\");\n\n        if (existingMenu.node() == null) {\n            //let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n            let parent = d3.select(\"#svg\");\n\n            let contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n            let relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n            const hasActionsPermissions = this.authService.isSRA() || this.authService.isOrganizationRA(this.svgHierarchyType.hierarchyType.organizationCode);\n\n            let bbox = this.getBbox();\n            let x = bbox.x + bbox.width - 5;\n            let y = bbox.y + bbox.height / 2 - 8;\n            const height = 20;\n            const fontSize = 8;\n            const widthPadding = 10;\n            const borderColor = \"#aaaaaa\";\n            const dividerColor = \"#e4e4e4\";\n            const fontFamily = \"sans-serif\";\n            const titleFontSize = 9;\n\n            const titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n            const actionsTitle = this.hierarchyComponent.localize(\"hierarchy.content.actionsTitle\");\n            const removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n            const noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n            const hideRelatedHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.hideRelatedHierarchy\");\n            const uninheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n            const inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\n            let isSecondaryHierarchyRendered = (d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node() != null);\n\n            let numActions = hasActionsPermissions ? (isSecondaryHierarchyRendered ? 2 : 1) : 0;\n\n            // Calculate the width of our title\n            let width = calculateTextWidth(titleLabel, titleFontSize);\n\n            // Calculate with of remove text\n            let removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n            width = removeWidth > width ? removeWidth : width;\n\n            if (isSecondaryHierarchyRendered) {\n              // Calculate width of \"hide related hierarchy\" label\n                let hideRelatedWidth = calculateTextWidth(hideRelatedHierarchyLabel, fontSize);\n                width = hideRelatedWidth > width ? hideRelatedWidth : width;\n            }\n\n            if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                let uninheritWidth = calculateTextWidth(uninheritLabel, fontSize);\n                width = uninheritWidth > width ? uninheritWidth : width;\n                numActions++;\n            } else {\n                let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                if (existingSecondary.node() != null) {\n                    let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                    let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                    let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                    let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                    if (this.treeNode.parent == null && relatedGotHasParents) {\n                        let inheritWidth = calculateTextWidth(inheritLabel, fontSize);\n                        width = inheritWidth > width ? inheritWidth : width;\n                        numActions++;\n                    }\n                }\n            }\n\n            // Calculate the width of our context menu, which is based on how long the text inside it will be.\n            // We don't know how long text is until we render it. So we'll need to loop over all the text and\n            // render and destroy all of it.\n            if (relatedHierarchies.length > 0) {\n                relatedHierarchies.forEach((relatedHierarchyCode: string) => {\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    let textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n\n                    if (textWidth > width) {\n                        width = textWidth;\n                    }\n                });\n            } else {\n                let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n                width = noHierLabelWidth > width ? noHierLabelWidth : width;\n            }\n\n            width = width + widthPadding;\n\n            let heightAdditions: number = relatedHierarchies.length > 0 ? (numActions + 2) : (numActions + 3);\n\n            // Background rectangle with border\n            contextMenuGroup.append(\"rect\")\n                .classed(\"contextmenu-relatedhiers-background\", true)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"rx\", 5)\n                .attr(\"width\", width)\n                .attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", .5)\n                .attr(\"stroke\", borderColor);\n\n            // Related Hierarchies Title\n            contextMenuGroup.append(\"text\")\n                .classed(\"contextmenu-relatedhiers-title\", true)\n                .attr(\"x\", x + widthPadding / 2)\n                .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                .attr(\"font-size\", titleFontSize)\n                .attr(\"font-family\", fontFamily)\n                .attr(\"font-weight\", \"bold\")\n                .text(titleLabel);\n\n            y = y + height;\n\n            // Dividing line at the bottom\n            contextMenuGroup.append(\"line\")\n                .classed(\"contextmenu-relatedhiers-divider\", true)\n                .attr(\"x1\", x)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x + width)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", borderColor)\n                .attr(\"stroke-width\", .5);\n\n\n            if (relatedHierarchies.length > 0) {\n                // Loop over all related hierarchies and draw them as list items\n                for (let i = 0; i < relatedHierarchies.length; ++i) {\n                    let relatedHierarchyCode = relatedHierarchies[i];\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    // Text that says the hierarchy's display label\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"data-hierCode\", relatedHierarchyCode)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(relatedHierarchyLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n                    y = y + height;\n\n                    // Dividing line at the bottom\n                    if (i < relatedHierarchies.length) {\n                        contextMenuGroup.append(\"line\")\n                            .classed(\"contextmenu-relatedhiers-divider\", true)\n                            .attr(\"data-hierCode\", relatedHierarchyCode)\n                            .attr(\"x1\", x + 5)\n                            .attr(\"y1\", y)\n                            .attr(\"x2\", x + width - 5)\n                            .attr(\"y2\", y)\n                            .attr(\"stroke\", dividerColor)\n                            .attr(\"stroke-width\", .5);\n                    }\n                }\n            } else {\n                // Text that says \"No related Hierarchies\"\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(noRelatedHierLabel);\n\n                y = y + height;\n\n                    // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x + 5)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width - 5)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", dividerColor)\n                    .attr(\"stroke-width\", .5);\n            }\n\n      // Actions Section\n            if (hasActionsPermissions) {\n              // Actions Title\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-title\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                    .attr(\"font-size\", titleFontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .attr(\"font-weight\", \"bold\")\n                    .text(actionsTitle);\n\n                y = y + height;\n\n              // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n        // \"Remove from hierarchy\" button\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"data-remove\", \"REPLACE---gotCode\")\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(removeFromHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) { that.removeGotFromHierarchy(); });\n\n                y = y + height;\n\n            // Inherit / Uninherit buttons\n                if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                    contextMenuGroup.append(\"line\")\n                        .classed(\"contextmenu-relatedhiers-divider\", true)\n                        .attr(\"x1\", x)\n                        .attr(\"y1\", y)\n                        .attr(\"x2\", x + width)\n                        .attr(\"y2\", y)\n                        .attr(\"stroke\", borderColor)\n                        .attr(\"stroke-width\", .5);\n\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(uninheritLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.onClickUninheritHierarchy(); });\n\n                    y = y + height;\n                } else {\n                    let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                    if (existingSecondary.node() != null) {\n                        let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                        let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                        let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                        let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                        if (this.treeNode.parent == null && relatedGotHasParents) {\n                            contextMenuGroup.append(\"line\")\n                                .classed(\"contextmenu-relatedhiers-divider\", true)\n                                .attr(\"x1\", x)\n                                .attr(\"y1\", y)\n                                .attr(\"x2\", x + width)\n                                .attr(\"y2\", y)\n                                .attr(\"stroke\", borderColor)\n                                .attr(\"stroke-width\", .5);\n\n                            contextMenuGroup.append(\"text\")\n                                .classed(\"contextmenu-relatedhiers-text\", true)\n                                .attr(\"x\", x + widthPadding / 2)\n                                .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-family\", fontFamily)\n                                .text(inheritLabel)\n                                .style(\"cursor\", \"pointer\")\n                                .on(\"click\", function(event, node) { that.onClickInheritHierarchy(secondaryHierarchy); });\n\n                            y = y + height;\n                        }\n                    }\n                }\n            }\n\n            if (isSecondaryHierarchyRendered) {\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(hideRelatedHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) {\n                        that.hideRelatedHierarchy();\n\n                        let existingMenu = d3.select(\".g-context-menu\");\n                        if (existingMenu.node() != null) {\n                            existingMenu.remove();\n                        }\n\n                        d3.select(\".g-hierarchy-got-connector\").remove();\n                    });\n            }\n\n            this.hierarchyComponent.calculateSvgViewBox();\n        } else {\n            existingMenu.remove();\n        }\n    }\n\n    removeGotFromHierarchy() {\n        let svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n        let obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        let message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.data = obj.code;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            let treeNode = svgGot.getTreeNode();\n            let parent = null;\n            if (treeNode.parent == null) {\n                parent = \"ROOT\";\n            } else {\n                if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                    parent = \"ROOT\";\n                } else {\n                    parent = treeNode.parent.data.geoObjectType;\n                }\n            }\n\n            this.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err); });\n        });\n    }\n\n    renderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let myBbox = this.getBbox();\n        let svg = d3.select(\"#svg\");\n\n        // Remove any secondary hierarchy that may already be rendered\n        if (this.hideRelatedHierarchy() === relatedHierarchy.code) {\n            return;\n        }\n\n        // Get the bounding box for our primary hierarchy\n        let primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n        // Render the secondary hierarchy\n        let svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService, this.authService);\n        svgHt.render();\n        let gSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n\n        // Translate the secondary hierarchy to the right of the primary hierarchy\n        let gHierarchy: any = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node();\n        let bbox = gHierarchy.getBBox();\n        let paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n        gSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n        // Draw dotted line between the shared node in the hierarchies\n        let secondaryGot = d3.select(\".g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n        let secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n        secondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n        d3.select(\".g-hierarchy-got-connector\").remove();\n        let gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n        gConnector.append(\"path\")\n            .classed(\"hierarchy-got-connector\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\n                \"d\",\n                \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width) +\n                \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2) +\n                \"H\" + secondaryGotBbox.x\n            );\n\n        // Draw arrow for dotted line\n        const arrowRectD = { height: 10, width: 7 };\n        let gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n        gArrow.append(\"rect\")\n            .classed(\"hierarchy-got-connector-arrow-rect\", true)\n            .attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n            .attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n        gArrow.append(\"path\")\n            .classed(\"hierarchy-got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\",\n                \"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n            );\n\n        // Recalculate the viewbox (should probably be the last thing that happens)\n        this.hierarchyComponent.calculateSvgViewBox();\n    }\n\n    onClickInheritHierarchy(hierarchy: HierarchyType) {\n        this.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n    }\n\n    onClickUninheritHierarchy() {\n        this.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n    }\n\n}\n","/* eslint-disable indent */\n/* eslint-disable no-unused-vars */\n/* eslint-disable quotes */\n\nimport { Graph, Layout, Edge } from '@swimlane/ngx-graph';\nimport { DIMENSIONS } from \"./relationship-visualizer.component\";\nimport * as dagre from 'dagre';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport interface DagreNodesOnlySettings extends DagreSettings {\n  curveDistance?: number;\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nexport class DagreNodesOnlyLayout implements Layout {\n\n  defaultSettings: DagreNodesOnlySettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 0,\n    marginY: 0,\n    edgePadding: DIMENSIONS.PADDING.BETWEEN_NODES,\n    rankPadding: 100,\n    nodePadding: DIMENSIONS.PADDING.BETWEEN_NODES,\n    curveDistance: 0,\n    multigraph: false,\n    compound: true\n  };\n\n  settings: DagreNodesOnlySettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  public constructor() {\n\n  }\n\n  public run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  public updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n    // determine new arrow position\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [rankAxis]: sourceNode.position[rankAxis] + (targetNode.position[rankAxis] - sourceNode.position[rankAxis]) / 2,\n        [orderAxis]: startingPoint[orderAxis]\n      },\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: sourceNode.position[rankAxis] + (targetNode.position[rankAxis] - sourceNode.position[rankAxis]) / 2\n      },\n      endingPoint\n    ];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n    return graph;\n  }\n\n  public createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n    let linkId: number = 1;\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = linkId;\n        linkId++;\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { TreeNode } from \"@circlon/angular-tree-component\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\n\n\n@Component({\n    selector: \"add-child-to-hierarchy-modal\",\n    templateUrl: \"./add-child-to-hierarchy-modal.component.html\",\n    styleUrls: []\n})\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n    /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n    public hierarchyType: HierarchyType;\n    public nodes: HierarchyNode[];\n    public allGeoObjectTypes: GeoObjectType[];\n    public selectedGeoObjectType: GeoObjectType;\n    private toRoot: boolean = false;\n    selectUndefinedOptionValue: any;\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n\n    onSelect(value: string): void {\n        this.allGeoObjectTypes.forEach(gObj => {\n            if (gObj.code === value) {\n                this.selectedGeoObjectType = gObj;\n            }\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy(this.hierarchyType.code, parent, this.selectedGeoObjectType.code).then(data => {\n            this.onNodeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-attributes-modal\",\n    templateUrl: \"./manage-attributes-modal.component.html\",\n    styleUrls: [\"./manage-attributes-modal.css\"]\n})\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageAttributes, attribute: this.attribute, termOption: \"\" };\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy() {\n        this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            this.onDeleteAttribute.next(data);\n\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            [title]=\"'modal.button.edit' | localize\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            [title]=\"'modal.button.remove' | localize\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyOverTimeEntry, GeoObject, HierarchyOverTimeEntryParent, HierarchyOverTime, AttributeType, TimeRangeEntry } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nexport class HierarchyCREditor extends ValueOverTimeCREditor {\n\n  hierarchyOverTime: HierarchyOverTime;\n\n  hierarchyEntry: HierarchyOverTimeEntry;\n\n  existRangeStale: boolean = false;\n\n  constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction, hierarchyEntry: HierarchyOverTimeEntry, hierarchyOverTime: HierarchyOverTime) {\n      super(changeRequestAttributeEditor, attr, action);\n      this.hierarchyEntry = hierarchyEntry;\n      this.hierarchyOverTime = hierarchyOverTime;\n\n      if (this.hierarchyEntry != null) {\n          this.hierarchyEntry.loading = {};\n      }\n  }\n\n  // @Override\n  getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n      return this.hierarchyEntry;\n  }\n\n  // @Override\n  getValueFromGeoObjectForDiff(): any {\n      let immediateParent: GeoObject = this.hierarchyEntry == null ? null : this.hierarchyEntry.parents[this.hierarchyOverTime.types[this.hierarchyOverTime.types.length - 1].code].geoObject;\n      let goVal: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n      return goVal;\n  }\n\n  // @Override\n  onChange(type: ChangeType) {\n      if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n          this.existRangeStale = true;\n      }\n\n      super.onChange(type);\n  }\n\n  // @Override\n  validate(): boolean {\n      super.validate();\n\n      if (this._isValid && this.hierarchyEntry != null) {\n          let invalidParent = this.changeRequestAttributeEditor.changeRequestEditor.dateService.invalidParent;\n          let parentDoesNotExist = this.changeRequestAttributeEditor.changeRequestEditor.dateService.parentDoesNotExist;\n          let service = this.changeRequestAttributeEditor.changeRequestEditor.registryService;\n\n          let len = this.hierarchyOverTime.types.length;\n          for (let i = len - 1; i >= 0; --i) {\n              let type = this.hierarchyOverTime.types[i];\n\n              if (Object.prototype.hasOwnProperty.call(this.hierarchyEntry.parents, type.code) && this.hierarchyEntry.parents[type.code].geoObject) {\n                  let goParent = this.hierarchyEntry.parents[type.code].geoObject;\n\n                  if (!this.existRangeStale) {\n                      if (goParent.properties.invalid) {\n                          this._isValid = false;\n                          this.conflictMessages.add(invalidParent);\n                      }\n                      if (!goParent.properties.exists) {\n                          this._isValid = false;\n                          this.conflictMessages.add(parentDoesNotExist);\n                      }\n                  } else {\n                      service.doesGeoObjectExistAtRange(this.startDate, this.endDate, type.code, goParent.properties.code).then(stats => {\n                          goParent.properties.invalid = stats.invalid;\n                          goParent.properties.exists = stats.exists;\n\n                          this.conflictMessages.delete(invalidParent);\n                          this.conflictMessages.delete(parentDoesNotExist);\n\n                          if (goParent.properties.invalid) {\n                              this._isValid = false;\n                              this.conflictMessages.add(invalidParent);\n                          }\n                          if (!goParent.properties.exists) {\n                              this._isValid = false;\n                              this.conflictMessages.add(parentDoesNotExist);\n                          }\n                      }).catch((err: HttpErrorResponse) => {\n                      // eslint-disable-next-line no-console\n                          console.log(err);\n                      });\n                  }\n              }\n          }\n\n          this.existRangeStale = false;\n      }\n\n      return this._isValid;\n  }\n\n  // @Override\n  validateUpdateReference() {\n      // We could potentially try to check for this, but it won't be easy. So for now we're doing nothing.\n  }\n\n  setParentValue(type: {code: string, label: string}, parents: { [k: string]: HierarchyOverTimeEntryParent }) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      let directParent: GeoObject = null;\n      if (type != null) {\n          directParent = parents[type.code].geoObject;\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  // let currentDirectParent: GeoObject = this.hierarchyEntry.parents[type.code].geoObject;\n                  let currentDirectParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n                  let oldValue: string = currentDirectParent == null ? null : currentDirectParent.properties.type + \"_~VST~_\" + currentDirectParent.properties.code;\n\n                  if (\n                      (currentDirectParent == null && directParent == null) ||\n                      ((currentDirectParent != null && directParent != null) &&\n                      currentDirectParent.properties.code === directParent.properties.code)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldParents = JSON.parse(JSON.stringify(this.hierarchyEntry.parents));\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          let newValueStrConcat: string = null;\n          if (directParent != null) {\n              newValueStrConcat = directParent.properties.type + \"_~VST~_\" + directParent.properties.code;\n          }\n\n          if (newValueStrConcat === this.diff.oldValue) {\n              delete this.diff.newValue;\n          } else {\n              this.diff.newValue = newValueStrConcat;\n          }\n\n          this.diff.parents = parents;\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.parents = parents;\n      }\n\n      this.onChange(ChangeType.VALUE);\n  }\n\n  public getLowestLevelFromHierarchyEntry(parents: any): {geoObject: GeoObject, text: string} {\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(parents, type.code) && parents[type.code].geoObject) {\n              return parents[type.code];\n          }\n      }\n\n      return null;\n  }\n\n  set value(val: any) {\n      throw new Error(\"Invoke setParentValue instead\");\n  }\n\n  get value() {\n      if (this.diff != null && this.diff.parents !== undefined) {\n          return this.diff;\n      } else if (this.hierarchyEntry != null) {\n          return this.hierarchyEntry;\n      }\n\n      return null;\n  }\n\n  public removeType(type): void {\n      // this.value.parents[type.code] = { text: \"\", geoObject: null };\n\n      let newParents = JSON.parse(JSON.stringify(this.value.parents));\n      newParents[type.code] = { text: \"\", geoObject: null };\n\n      // Set the value to be the next existing ancestor.\n      let entry = this.value;\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let parentType = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(entry.parents, parentType.code) && entry.parents[parentType.code].geoObject) {\n              this.setParentValue(parentType, newParents);\n              return;\n          }\n      }\n\n      // If we do not have a next existing ancestor, then we must set the value to null.\n      this.setParentValue(null, newParents);\n  }\n\n  createEmptyHierarchyEntry(): HierarchyOverTimeEntry {\n      let hierarchyEntry = new HierarchyOverTimeEntry();\n      hierarchyEntry.loading = {};\n      hierarchyEntry.oid = uuid();\n\n      hierarchyEntry.parents = {};\n\n      if (this.hierarchyOverTime) {\n          for (let i = 0; i < this.hierarchyOverTime.types.length; i++) {\n              let current = this.hierarchyOverTime.types[i];\n\n              hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n\n              hierarchyEntry.loading = {};\n          }\n      }\n\n      return hierarchyEntry;\n  }\n\n  public remove(): void {\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.onChange(ChangeType.REMOVE);\n              return;\n          } else if (this.hierarchyEntry != null && this.diff == null) {\n              let currentImmediateParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n              let oldValue: string = currentImmediateParent == null ? null : currentImmediateParent.properties.type + \"_~VST~_\" + currentImmediateParent.properties.code;\n\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.hierarchyEntry.oid;\n              this.diff.oldValue = oldValue;\n              this.diff.oldStartDate = this.hierarchyEntry.startDate;\n              this.diff.oldEndDate = this.hierarchyEntry.endDate;\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let index = this.hierarchyOverTime.entries.findIndex(vot => vot.oid === this.hierarchyEntry.oid);\n\n          if (index !== -1) {\n              this.hierarchyOverTime.entries.splice(index, 1);\n          }\n      }\n\n      this.onChange(ChangeType.REMOVE);\n  }\n\n}\n","\nimport { ChangeRequest, AbstractAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ActionTypes } from \"@registry/model/constants\";\n\nexport class StandardAttributeCRModel {\n\n    changeRequest: ChangeRequest;\n\n    diff: { oldValue?: any, newValue?: any };\n\n    attribute: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    editAction: AbstractAction;\n\n    code: string;\n\n    private _isValid: boolean = true;\n\n    constructor(attr: AttributeType, geoObject: GeoObjectOverTime, cr: ChangeRequest) {\n        this.attribute = attr;\n        this.geoObject = geoObject;\n        this.changeRequest = cr;\n        this.initialize();\n    }\n\n    initialize(): void {\n        let actions = this.changeRequest.actions;\n\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            if (actions.length > 0 && actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                this.editAction = actions[0];\n            }\n        } else {\n            actions.forEach((action: AbstractAction) => {\n                if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (this.attribute.code === updateAttrAction.attributeName) {\n                        this.editAction = action;\n                    }\n                }\n            });\n\n            if (this.editAction == null) {\n                this.editAction = new UpdateAttributeAction(this.attribute.code);\n            }\n        }\n\n        let len = this.changeRequest.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let action: AbstractAction = actions[i];\n\n            if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                if (this.attribute.code === updateAttrAction.attributeName) {\n                    this.diff = updateAttrAction.attributeDiff;\n                }\n            } else if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n              // Nothing to do here. Create actions don't have diffs.\n            } else {\n                console.log(\"Unexpected action : \" + action.actionType, action);\n            }\n        }\n    }\n\n    public hasChanges(): boolean {\n        return this.diff != null;\n    }\n\n    isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(): boolean {\n        return this._isValid;\n    }\n\n    set value(val: any) {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            this.geoObject.attributes[this.attribute.code] = val;\n        } else {\n            if (this.diff != null) {\n                if (this.areValuesEqual(this.diff.oldValue, val)) {\n                    delete (this.editAction as UpdateAttributeAction).attributeDiff;\n                    this.diff = null;\n\n                    let index = this.changeRequest.actions.findIndex(findAction => findAction === this.editAction);\n                    if (index !== -1) {\n                        this.changeRequest.actions.splice(index, 1);\n                    }\n                } else {\n                    this.diff.newValue = val;\n                }\n            } else {\n                this.diff = { oldValue: this.geoObject.attributes[this.attribute.code], newValue: val };\n\n                (this.editAction as UpdateAttributeAction).attributeDiff = this.diff;\n                this.changeRequest.actions.push(this.editAction);\n            }\n        }\n    }\n\n    get value(): any {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            return this.geoObject.attributes[this.attribute.code];\n        } else {\n            if (this.diff != null) {\n                return this.diff.newValue;\n            } else {\n                return this.geoObject.attributes[this.attribute.code];\n            }\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attribute.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        return val1 === val2;\n    }\n\n}\n","\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeTermType, Term } from \"@registry/model/registry\";\nimport { GeoJsonLayer, Layer } from \"@registry/service/layer-data-source\";\n\n/*\n * This class exists purely for the purpose of storing what data to be rendered to the front-end. Any storage or submission of this data to the back-end must be translated\n * using the editor.\n */\nexport class VersionDiffView {\n\n    component: ManageVersionsComponent;\n    summaryKeyData: SummaryKey;\n    summaryKeyLocalized: string; // If we try to localize this in the html with a localize element then it won't update as frequently as we need so we're doing stuff manually here.\n    objectLayer: Layer = null;\n    editingLayer: GeoJsonLayer = null;\n    oldLayer: GeoJsonLayer = null;\n    coordinate?: any;\n    newCoordinateX?: any;\n    newCoordinateY?: any;\n    editor: ValueOverTimeCREditor;\n\n    // We must track our own value, so that they can be diffed when setting.\n    _value: any;\n\n    constructor(component: ManageVersionsComponent, editor: ValueOverTimeCREditor) {\n        this.component = component;\n        this.editor = editor;\n\n        this.populate(editor);\n        this.editor.onChangeSubject.subscribe(() => {\n            this.populate(this.editor);\n        });\n    }\n\n    populate(editor: ValueOverTimeCREditor) {\n        if (this.component.attributeType.type === \"local\" && this._value != null && this.editor.value != null) {\n            // The front-end glitches out if we swap to a new object. We have to update the existing object to be the same\n            LocalizedValue.populate(this._value, this.editor.value);\n        } else if (this.component.attributeType.code === \"_PARENT_\" && this._value != null && this.editor.value != null && this.editor.value.parents != null) {\n            for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n                let current = this.component.hierarchy.types[i];\n\n                this._value.parents[current.code].text = this.editor.value.parents[current.code].text;\n                this._value.parents[current.code].geoObject = this.editor.value.parents[current.code].geoObject;\n            }\n        } else if (this.component.attributeType.code === \"_PARENT_\") {\n            this._value = JSON.parse(JSON.stringify(this.editor.value));\n        } else {\n            this._value = this.convertValueForDisplay(this.editor.value == null ? null : JSON.parse(JSON.stringify(this.editor.value)));\n        }\n\n        if (this.component.attributeType.code === \"_PARENT_\") {\n            this._value.loading = {};\n        }\n\n        this.calculateSummaryKey();\n    }\n\n    set oid(oid: string) {\n        this.editor.oid = oid;\n    }\n\n    get oid(): string {\n        return this.editor.oid;\n    }\n\n    get startDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return this.editor.oldStartDate;\n        }\n\n        return this.editor.startDate;\n    }\n\n    set startDate(startDate: string) {\n        this.editor.startDate = startDate;\n        this.calculateSummaryKey();\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        this.editor.oldStartDate = oldStartDate;\n    }\n\n    get oldStartDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newStartDate != null && this.editor.oldStartDate !== undefined) {\n            return this.convertDateForDisplay(this.editor.oldStartDate);\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return this.editor.oldEndDate;\n        }\n\n        return this.editor.endDate;\n    }\n\n    set endDate(endDate: string) {\n        this.editor.endDate = endDate;\n        this.calculateSummaryKey();\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        this.editor.oldEndDate = oldEndDate;\n    }\n\n    get oldEndDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newEndDate != null && this.editor.oldEndDate !== undefined) {\n            return this.convertDateForDisplay(this.editor.oldEndDate);\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.editor.value = value;\n    }\n\n    set oldValue(oldValue: any) {\n        this.editor.oldValue = oldValue;\n    }\n\n    get oldValue(): any {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newValue != null && this.editor.oldValue !== undefined) {\n            return this.convertOldValueForDisplay(this.editor.oldValue);\n        }\n\n        return null;\n    }\n\n    convertDateForDisplay(date: string): string {\n        return (date == null || date.length === 0) ? null : this.component.dateService.formatDateForDisplay(date);\n    }\n\n    convertOldValueForDisplay(val: any): any {\n        if (this.component.attributeType.type === \"date\") {\n            return this.component.dateService.formatDateForDisplay(new Date(val));\n        } else if (this.component.attributeType.code === \"_PARENT_\" && val.includes(\"_~VST~_\")) {\n            let split = val.split(\"_~VST~_\");\n            // let parentTypeCode = split[0];\n            let parentCode = split[1];\n\n            return parentCode;\n        } else if (this.component.attributeType.type === \"term\") {\n            let code = val;\n            if (code instanceof Array) {\n                code = val[0];\n            }\n\n            let attrOpts = (this.component.attributeType as AttributeTermType).rootTerm.children;\n\n            let index = attrOpts.findIndex((term: Term) => term.code === code);\n\n            if (index !== -1) {\n                return attrOpts[index].label.localizedValue;\n            } else {\n                return val;\n            }\n        } else if (this.component.attributeType.type === \"classification\") {\n            return val.label.localizedValue;\n        }\n\n        return val;\n    }\n\n    convertValueForDisplay(val: any): any {\n        if (val == null) {\n            return null;\n        }\n\n        return val;\n    }\n\n    calculateSummaryKey() {\n        if (this.editor.diff == null) {\n            this.summaryKey = SummaryKey.UNMODIFIED;\n            return;\n        }\n\n        if (this.editor.diff.action === \"CREATE\") {\n            this.summaryKey = SummaryKey.NEW;\n            return;\n        } else if (this.editor.diff.action === \"DELETE\") {\n            this.summaryKey = SummaryKey.DELETE;\n            return;\n        }\n\n        let hasTime = this.editor.diff.newStartDate != null || this.editor.diff.newEndDate != null;\n        let hasValue = Object.prototype.hasOwnProperty.call(this.editor.diff, \"newValue\");\n\n        if (hasTime && hasValue) {\n            this.summaryKey = SummaryKey.UPDATE;\n        } else if (hasTime) {\n            this.summaryKey = SummaryKey.TIME_CHANGE;\n        } else if (hasValue) {\n            this.summaryKey = SummaryKey.VALUE_CHANGE;\n        } else {\n            this.summaryKey = SummaryKey.UNMODIFIED;\n        }\n    }\n\n    set summaryKey(newKey: SummaryKey) {\n        this.summaryKeyData = newKey;\n        this.localizeSummaryKey();\n    }\n\n    get summaryKey(): SummaryKey {\n        return this.summaryKeyData;\n    }\n\n    private localizeSummaryKey(): void {\n        this.summaryKeyLocalized = this.component.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + this.summaryKeyData);\n    }\n\n    private conflictMessagesHasSeverity(severity: string) {\n        let has = false;\n\n        this.editor.conflictMessages.forEach(msg => {\n            if (msg.severity === severity) {\n                has = true;\n            }\n        });\n\n        return has;\n    }\n\n    hasError(): boolean {\n        return this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"ERROR\");\n    }\n\n    hasWarning(): boolean {\n        return !this.hasError() && this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"WARNING\");\n    }\n\n    destroy(component: ManageVersionsComponent): void {\n        let removeLayers = [];\n\n        if (this.editingLayer != null) {\n            removeLayers.push(this.editingLayer.getId());\n            this.editingLayer = null;\n        }\n        if (this.oldLayer != null) {\n            removeLayers.push(this.oldLayer.getId());\n            this.oldLayer = null;\n        }\n\n        component.geomService.removeLayers(removeLayers);\n    }\n\n}\n","import { Input, Component, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectOverTime, GeoObjectType } from \"@registry/model/registry\";\nimport { AbstractAction } from \"@registry/model/crtable\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\n\nimport { AuthService } from \"@shared/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { ActionDetailComponent } from \"../action-detail-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\ndeclare var $: any;\n\n@Component({\n\n    selector: \"crtable-detail-create-geo-object\",\n    templateUrl: \"./detail.component.html\",\n    styleUrls: [\"./crtable-detail-create-geo-object.css\"],\n    encapsulation: ViewEncapsulation.None\n})\n// export class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\nexport class CreateUpdateGeoObjectDetailComponent implements ActionDetailComponent {\n\n    isMaintainer: boolean = false;\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    @Input() readOnly: boolean;\n\n    isEditing: boolean = false;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    constructor(private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService,\n        private authService: AuthService) {\n\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if (this.isNew()) {\n\n            this.preGeoObject = this.postGeoObject;\n\n        }\n\n        this.onSelect(this.action);\n\n    }\n\n    isNew(): boolean {\n\n        return (this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\");\n\n    }\n\n    handleDateChange(): void {\n\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n    }\n\n    applyAction() {\n\n        // var action = JSON.parse( JSON.stringify( this.action ) );\n        let action = this.action;\n\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if (this.geometryEditor != null) {\n\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n\n        }\n\n        /*\n        this.changeRequestService.applyAction(action).then(response => {\n\n            this.endEdit();\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n        */\n\n    }\n\n    onSelect(action: AbstractAction) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n\n            this.registryService.getGeoObjectOverTime(this.postGeoObject.attributes.code, this.geoObjectType.code).then(geoObject => {\n\n                this.preGeoObject = geoObject;\n\n            }).catch((err: HttpErrorResponse) => {\n\n                this.error(err);\n\n            });\n\n        }\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    // @HostListener( 'window:beforeunload' )\n    // canDeactivate(): Observable<boolean> | boolean {\n    //    if ( this.isEditing ) {\n    //        //event.preventDefault();\n    //        //event.returnValue = 'Are you sure?';\n    //        //return 'Are you sure?';\n//\n     //       return false;\n     //   }\n//\n    //    return true;\n    // }\n\n    // afterDeactivate( isDeactivating: boolean ) {\n    //    if ( isDeactivating && this.isEditing ) {\n    //        this.unlockActionSync();\n    //    }\n    // }\n\n    startEdit(): void {\n\n        //this.lockAction();\n\n    }\n\n    public endEdit(): void {\n\n        //this.unlockAction();\n\n    }\n/*\n    lockAction() {\n\n        this.changeRequestService.lockAction(this.action.oid).then(response => {\n\n            this.isEditing = true;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(true);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    unlockAction() {\n\n        this.changeRequestService.unlockAction(this.action.oid).then(response => {\n\n            this.isEditing = false;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(false);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n\n        $.ajax({\n            url: registry.contextPath + \"/changerequest/unlockAction\",\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function(a) {\n\n            },\n            async: false\n        });\n\n    }\n*/\n    getUsername(): string {\n\n        return this.authService.getUsername();\n\n    }\n\n    public error(err: HttpErrorResponse): void {\n\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading text-center\">\n        <h1 class=\"action-detail-header\">{{action.actionLabel}}</h1>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <h4>\n        <localize key=\"io.geoObjectType\"></localize>: {{action.geoObjectType.code}}\n      </h4>\n    \n      <div style=\"margin: 20px 0;\">\n        <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\"></localize></span>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n\n<!--         <geoobject-shared-attribute-editor  -->\n<!--           #attributeEditor -->\n<!--           *ngIf=\"preGeoObject\" -->\n<!--           [readOnly]=\"!isEditing\"   -->\n<!--           [geoObjectType]=\"geoObjectType\" -->\n<!--           [postGeoObject]=\"postGeoObject\" -->\n<!--           [preGeoObject]=\"preGeoObject\" -->\n<!--           [forDate]=\"forDate\" -->\n<!--           [isGeometryInlined]=\"true\"> -->\n<!--         </geoobject-shared-attribute-editor> -->\n        \n        <geoobject-shared-attribute-editor \n            #attributeEditor\n            *ngIf=\"action\"\n            [readOnly]=\"readOnly\"  \n            [geoObjectType]=\"geoObjectType\"\n            [geoObjectData]=\"{'geoObject':postGeoObject, 'actions': [action]}\"\n            [forDate]=\"forDate\"\n            [readOnly]=\"false\"\n            [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\" [disabled]=\"!isEditing\"></textarea>\n        </div>\n\n        <div class=\"button-holder text-right\" style=\"margin:40px 0 20px 0;\">\n          <button *ngIf=\"!readOnly && !isEditing\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { TimeRangeEntry } from \"@registry/model/registry\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./geoobject-shared-attribute-editor.component\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { ChangeType } from \"@registry/model/constants\";\n\nexport interface DateBoundary { date: string; isStart: boolean; isEnd: boolean }\n\nexport interface TimelineEntry { width: number, x: number, period: TimeRangeEntry }\n\nexport interface DataTimeSpan {startDay: number, startDate: string, displayStartDate: string, endDay: number, endDate: string, displayEndDate: string, span: number}\n\n/*\n * This component is shared between:\n * -\n *\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\n@Component({\n    selector: \"stability-period\",\n    templateUrl: \"./stability-period.component.html\",\n    styleUrls: [\"./stability-period.component.css\"],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"1000ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"1000ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class StabilityPeriodComponent implements OnInit {\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    @Input() sharedAttributeEditor: GeoObjectSharedAttributeEditorComponent;\n\n    @Input() filterDate: string;\n\n    @Input() forDate: string;\n\n    @Input() context: string;\n\n    @Input() latestPeriodIsActive: boolean = false;\n\n    periods: TimeRangeEntry[] = [];\n\n    timelines: [TimelineEntry[]];\n\n    activeEntry: TimelineEntry = null;\n\n    forDateEntry: TimelineEntry = null;\n\n    private infinityDayPadding: number = 15;\n\n    dataTimeSpan: DataTimeSpan = null;\n\n    _showHint: boolean = false;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set showHint(val: boolean) {\n        this._showHint = val;\n\n        setTimeout(() => {\n            this.showHint = false;\n        }, 10000);\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public dateService: DateService) {}\n\n    ngOnInit(): void {\n        this.generate();\n\n        this.changeRequestEditor.onChangeSubject.subscribe((type: ChangeType) => {\n            if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n                this.generate();\n            }\n        });\n\n        let timeline = this.timelines[0];\n        if (timeline && timeline.length > 1) {\n            if (this.filterDate != null) {\n                let index = timeline.findIndex(entry => this.dateService.between(this.filterDate, entry.period.startDate, entry.period.endDate));\n\n                if (index !== -1) {\n                    this.activeEntry = timeline[index];\n                }\n            } else if (this.latestPeriodIsActive) {\n                this.setActiveTimelineEntry(timeline[timeline.length - 1]);\n            }\n\n            if (this.forDate != null) {\n                let forDateIndex = timeline.findIndex(entry => this.dateService.between(this.forDate, entry.period.startDate, entry.period.endDate));\n\n                if (forDateIndex !== -1) {\n                    this.forDateEntry = timeline[forDateIndex];\n                }\n            }\n        }\n    }\n\n    navigateRelative(amount: number) {\n        let timeline: TimelineEntry[] = this.timelines[0];\n        if (timeline == null || timeline.length === 0) { return; }\n\n        if (this.activeEntry == null) {\n            this.setActiveTimelineEntry(timeline[0]);\n            return;\n        }\n\n        let index = timeline.findIndex(entry => entry.period.startDate === this.activeEntry.period.startDate);\n\n        if (index !== -1) {\n            let nextIndex = index + amount;\n\n            if (nextIndex < 0) {\n                nextIndex = timeline.length - 1;\n            } else if (nextIndex >= timeline.length) {\n                nextIndex = 0;\n            }\n\n            this.setActiveTimelineEntry(timeline[nextIndex]);\n        }\n    }\n\n    setActiveTimelineEntry(entry: TimelineEntry, refresh: boolean = true) {\n        if (this.periods.length <= 1) {\n            entry = null;\n        }\n\n        if (this.activeEntry && entry && entry.period.startDate === this.activeEntry.period.startDate) {\n            entry = null;\n        }\n\n        this.activeEntry = entry;\n        this.sharedAttributeEditor.setFilterDate(entry == null ? null : entry.period.startDate, refresh);\n    }\n\n    generate() {\n        this.generatePeriods();\n        this.generateTimelines();\n    }\n\n    calculateDataTimeSpan(): void {\n        let startDate: string = null;\n        let endDate: string = null;\n        let endDay: number = null;\n        let startDay: number = null;\n\n        if (this.periods.length > 0) {\n            startDate = this.periods[0].startDate;\n            endDate = this.periods[this.periods.length - 1].endDate;\n\n            startDay = this.dateService.getDateFromDateString(startDate).getTime() / (1000 * 60 * 60 * 24);\n\n            if (endDate === \"5000-12-31\") {\n                if (this.periods.length > 1) {\n                    endDay = this.dateService.getDateFromDateString(this.periods[this.periods.length - 1].startDate).getTime() / (1000 * 60 * 60 * 24);\n                    this.infinityDayPadding = (endDay - startDay) * 0.05;\n                    endDay = this.infinityDayPadding + endDay;\n                } else {\n                    endDay = startDay + this.infinityDayPadding;\n                }\n            } else {\n                endDay = this.dateService.getDateFromDateString(endDate).getTime() / (1000 * 60 * 60 * 24);\n            }\n        }\n\n        this.dataTimeSpan = { startDay: startDay, startDate: startDate, displayStartDate: this.dateService.formatDateForDisplay(startDate), endDay: endDay, endDate: endDate, displayEndDate: this.dateService.formatDateForDisplay(endDate), span: (endDay - startDay) };\n    }\n\n    generateTimelines() {\n        this.timelines = [] as any;\n\n        if (this.periods.length === 0) {\n            return;\n        } else if (this.periods.length === 1) {\n            this.setActiveTimelineEntry(null, false);\n        }\n\n        this.calculateDataTimeSpan();\n\n        let currentTimeline: any = [];\n        this.timelines.push(currentTimeline);\n        let daysLeft = this.dataTimeSpan.span;\n\n        let len = this.periods.length;\n        for (let i = 0; i < len; ++i) {\n            let period = this.periods[i];\n\n            let start: Date = this.dateService.getDateFromDateString(period.startDate);\n            let end: Date = this.dateService.getDateFromDateString(period.endDate);\n\n            let startDay = start.getTime() / (1000 * 60 * 60 * 24);\n            let endDay = end.getTime() / (1000 * 60 * 60 * 24);\n            if (period.endDate === \"5000-12-31\") {\n                endDay = startDay + this.infinityDayPadding;\n            }\n\n            let daysInPeriod: number = (endDay - startDay);\n            if (daysLeft - daysInPeriod < 0) {\n                let daysInFirstEntry = daysLeft;\n                let timelineEntry1: TimelineEntry = { width: (daysInFirstEntry / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry1);\n\n                currentTimeline = [];\n                this.timelines.push(currentTimeline);\n                daysLeft = this.dataTimeSpan.span;\n\n                let timelineEntry2: TimelineEntry = { width: ((daysInPeriod - daysInFirstEntry) / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry2);\n            } else {\n                let timelineEntry: TimelineEntry = { width: (daysInPeriod / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry);\n                daysLeft = daysLeft - daysInPeriod;\n\n                if (daysLeft === 0) {\n                    currentTimeline = [];\n                    this.timelines.push(currentTimeline);\n                    daysLeft = this.dataTimeSpan.span;\n                }\n            }\n        }\n\n        // console.log(this.timelines);\n    }\n\n    generatePeriods() {\n        let boundaries: DateBoundary[] = [];\n\n        // Create an array which contains all the unique start and end dates\n        let editors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] = this.changeRequestEditor.getEditors();\n        let len = editors.length;\n\n        for (let i = 0; i < len; ++i) {\n            if (editors[i] instanceof ChangeRequestChangeOverTimeAttributeEditor) {\n                let editor: ChangeRequestChangeOverTimeAttributeEditor = editors[i] as ChangeRequestChangeOverTimeAttributeEditor;\n                let values = editor.getEditors();\n\n                let valLen = values.length;\n                for (let j = 0; j < valLen; ++j) {\n                    let period: ValueOverTimeCREditor = values[j];\n\n                    if (period.startDate != null && period.endDate != null && !period.isDelete()) {\n                        let startIndex = boundaries.findIndex(boundary => period.startDate === boundary.date);\n                        if (startIndex !== -1) {\n                            boundaries[startIndex].isStart = true;\n                        } else {\n                            boundaries.push({ date: period.startDate, isStart: true, isEnd: false });\n                        }\n\n                        let endIndex = boundaries.findIndex(boundary => period.endDate === boundary.date);\n                        if (endIndex !== -1) {\n                            boundaries[endIndex].isEnd = true;\n                        } else {\n                            boundaries.push({ date: period.endDate, isStart: false, isEnd: true });\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sort the date boundaries\n        boundaries.sort(function(a, b) {\n            if (a.date == null || a.date === \"\") {\n                return 1;\n            } else if (b.date == null || b.date === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.date);\n            let next: any = new Date(b.date);\n            return first - next;\n        });\n\n        // Loop over the boundaries and create versions between all the boundaries, but only if there is data between them\n        this.periods = [];\n        let dlen = boundaries.length;\n        for (let i = 0; i < dlen; ++i) {\n            let current: DateBoundary = boundaries[i];\n            let next: DateBoundary = i + 1 > dlen ? null : boundaries[i + 1];\n\n            if (current.isStart && current.isEnd) {\n                this.periods.push({ startDate: current.date, endDate: current.date });\n            }\n            if (current.isEnd && (next != null && next.isStart && this.dateService.addDay(1, current.date) === next.date)) {\n                continue;\n            }\n\n            let startDate = (current.isEnd ? this.dateService.addDay(1, current.date) : current.date);\n\n            if (next != null && this.changeRequestEditor.existsAtDate(startDate)) {\n                let endDate = (!next.isStart ? next.date : this.dateService.addDay(-1, next.date));\n\n                this.periods.push({ startDate: startDate, endDate: endDate });\n            }\n        }\n\n        this.dateService.sort(this.periods);\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div *ngIf=\"dataTimeSpan\" style=\"margin-bottom:10px;\">\n    <span style=\"margin-left:20px;\">\n      <localize key=\"manage.versions.historyTitle\"></localize>\n      \n      <span>\n        <a *ngIf=\"activeEntry\" (click)=\"setActiveTimelineEntry(null)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewAll\"></localize>)</a>\n        <div [@fadeInOut] *ngIf=\"_showHint\" id=\"time-hint\">\n            <localize key=\"changeovertime.manageVersions.time.hint.message\"></localize>\n        </div>\n        \n        <a *ngIf=\"!activeEntry && forDate && context === 'LIST'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewListPeriod\"></localize>)</a>\n        <a *ngIf=\"!activeEntry && forDate && context === 'EXPLORER'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewExplorerPeriod\"></localize>)</a>\n        <span *ngIf=\"!activeEntry && !forDate\" class=\"view-all\">\n          (<localize key=\"manage.versions.history.viewingAll\"></localize>)\n        </span>\n      </span>\n\n    </span>\n    <span style=\"float:right;color:#6ba542;margin-right:20px;\">\n      <ng-container *ngIf=\"activeEntry\">\n\t\t      {{activeEntry.period.startDate}}\n\t\t      -\n\t\t      {{dateService.formatDateForDisplay(activeEntry.period.endDate)}}\n      </ng-container>\n      <ng-container *ngIf=\"!activeEntry\">\n          {{dataTimeSpan.displayStartDate}}\n          -\n          {{dataTimeSpan.displayEndDate}}\n      </ng-container>\n    </span>\n\t  \n    <div style=\"padding: 0 20px;\">\n        <div *ngFor=\"let timeline of timelines\" class=\"timeline\">\n\t      <a *ngFor=\"let entry of timeline\" class=\"timeline-entry\" [ngClass]=\"{'active-timeline-entry': this.activeEntry == null || (this.activeEntry != null && entry.period.startDate === this.activeEntry.period.startDate), 'not-clickable': periods.length <= 1}\" (click)=\"setActiveTimelineEntry(entry)\" [ngStyle]=\"{'width': entry.width + '%', 'left': entry.x + '%'}\">\n\t      </a>\n\t    </div>\n        \n        <div class=\"timeline-nav-btn-wrapper\">\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(-1)\" style=\"\"><i class=\"fa fa-chevron-left \"></i></a>\n<!--           </div> -->\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(1)\" style=\"\"><i class=\"fa fa-chevron-right \"></i></a> \n<!--           </div> -->\n        </div>\n    </div>\n\n<!-- \t  <div *ngIf=\"periods.length > 1\" class=\"navigation-controls\" style=\"padding-top:5px;\"> -->\n<!-- \t    <a (click)=\"navigateRelative(-1)\" style=\"float:left;\"><i class=\"fa fa-chevron-left\"></i></a> -->\n<!-- \t    <a (click)=\"navigateRelative(1)\" style=\"float:right;\"><i class=\"fa fa-chevron-right\"></i></a> -->\n<!-- \t  </div> -->\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\n\n@Component({\n    selector: \"standard-attribute-editor\",\n    templateUrl: \"./standard-attribute-editor.component.html\",\n    styleUrls: [\"./standard-attribute-editor.component.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class StandardAttributeEditorComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    message: string = null;\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObject: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    view: {\n        summaryKey: SummaryKey;\n        summaryKeyLocalized: string;\n        oldValue?: any;\n        value: any;\n        attributeCode: string;\n    };\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: StandardAttributeCRModel;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, null) as StandardAttributeCRModel;\n        this.calculateView();\n    }\n\n    ngAfterViewInit() {\n    }\n\n    calculateView(): void {\n        let diff = this.changeRequestAttributeEditor.diff;\n\n        if (diff != null) {\n            let newVal = diff.newValue == null ? null : JSON.parse(JSON.stringify(diff.newValue));\n            this.view = {\n                value: newVal,\n                summaryKey: SummaryKey.VALUE_CHANGE,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.VALUE_CHANGE),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n\n            if (diff.oldValue !== null && diff.oldValue !== undefined) {\n                this.view.oldValue = JSON.parse(JSON.stringify(diff.oldValue));\n            }\n        } else {\n            this.view = {\n                value: this.changeRequestAttributeEditor.value,\n                summaryKey: SummaryKey.UNMODIFIED,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.UNMODIFIED),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n        }\n    }\n\n    onValueChange(): void {\n        this.calculateView();\n    }\n\n    onApprove(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.PENDING).then(results => {\n            editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div @fadeInOut class=\"value-box\">\n    <div *ngIf=\"view\" class=\"value-box-wrapper\" [ngClass]=\"{'warning' : view.summaryKey && view.summaryKey !== 'UNMODIFIED'}\" >\n      <div *ngIf=\"view.summaryKey && view.summaryKey !== 'UNMODIFIED'\" class=\"value-box-indicator\">\n        {{view.summaryKeyLocalized}}\n      </div>\n      \n      <div class=\"inner-value\">\n        <div *ngIf=\"attributeType.type === 'boolean'\">\n          <div>\n\t          <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? view.value === false : (view.value === true)\" [value]=\"view.attributeCode === 'invalid' ? false : true\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-true\" name=\"mod-{{geoObjectType.code}}-true\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize></span>\n\t          </label> \n\t          <label class=\"radio radio-inline\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? changeRequestAttributeEditor.value === true : changeRequestAttributeEditor.value === false\" [value]=\"view.attributeCode === 'invalid' ? true : false\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-false\" name=\"mod-{{geoObjectType.code}}-false\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize></span>\n\t          </label>\n\t        </div>\n        </div>\n        \n        <div *ngIf=\"(view.oldValue !== null && view.oldValue !== undefined) && !isNew\">\n          <p style=\"color: var(--theme-text-dark);\" class=\"warning-text display-current-value\">\n            <localize key=\"change.request.changed.value.prefix\"></localize>&nbsp;\n            \n            <span *ngIf=\"attributeType.type === 'boolean'\">\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === false) : (view.oldValue === true)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize>\n\t            </span>\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === true) : (view.oldValue === false)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize>\n\t            </span>\n            </span>\n            \n            <span *ngIf=\"attributeType.type !== 'boolean'\">\n                {{ view.oldValue }}\n            </span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  <!-- TODO : This code copy/pasted from manage-versions.component.html -->\n  <div *ngIf=\"changeRequest && !changeRequest.isNew\" class=\"cr-maintainer-options\">\n    <div *ngIf=\"changeRequest.approvalStatus === 'PENDING' && changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.editAction && changeRequestAttributeEditor.diff\">\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n        <localize key=\"change.request.accept.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n        <localize key=\"change.request.reject.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n        <localize key=\"change.request.pending.btn\"></localize>\n      </button>\n    </div>              \n    <div *ngIf=\"changeRequest.approvalStatus !== 'PENDING'\">\n      <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n          <localize key=\"change.request.status.accepted\"></localize>\n      </strong>\n      <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n          <localize key=\"change.request.status.rejected\"></localize>\n      </strong>\n    </div>\n  </div>\n</div>\n","\nimport { Component, ElementRef, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: \"simple-edit-control\",\n    templateUrl: \"./simple-edit-control.component.html\",\n    styleUrls: [\"./simple-edit-control.css\"]\n})\nexport class SimpleEditControl {\n\n    elRef: ElementRef\n\n    @Output() editEmitter = new EventEmitter<void>();\n\n    @Input() visible: boolean = true;\n    @Input() editSessionEnabled: boolean = false;\n    @Input() save: boolean = false;\n\n    constructor(elRef: ElementRef) {\n        this.elRef = elRef;\n    }\n\n    onAdd(map): any {\n        return this.elRef.nativeElement;\n    }\n\n    onRemove(map): void {\n        this.elRef.nativeElement.remove();\n    }\n\n    onClick(): void {\n        this.editEmitter.emit();\n    }\n}\n","<div (click)=\"this.onClick();\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button *ngIf=\"editSessionEnabled\" \n    class=\"fa\" \n    [ngClass]=\"{'fa-pencil-square-o':!save, 'fa-save':save}\" \n    style=\"color: black; font-size: 18px;\" \n    [title]=\"'changeovertime.manageVersions.button.label' | localize\" \n    >\n  </button>\n  <div *ngIf=\"editSessionEnabled\" class=\"map-button-info-hint-wrapper\">\n    <div class=\"map-button-info-hint\">\n      <localize key=\"map.button.info.hint\"></localize>\n    </div>\n    <div class=\"map-button-pointer\"></div>\n  </div>\n</div>","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\n@Component({\n\n    selector: \"cascading-geo-selector\",\n    templateUrl: \"./cascading-geo-selector.html\"\n})\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mainForm\") mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() customEvent: boolean = false;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach(hierarchy => {\n            const object = {};\n            object[\"label\"] = hierarchy.label;\n            object[\"code\"] = hierarchy.code;\n\n            this.isValid = this.isValid && (this.hierarchies.length > 0);\n\n            hierarchy.entries.forEach(pot => {\n                const startDate = Date.parse(pot.startDate);\n                const endDate = Date.parse(pot.endDate);\n\n                if (time >= startDate && time <= endDate) {\n                    let parents = [];\n\n                    hierarchy.types.forEach(type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if (pot.parents[type.code] != null) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push(parent);\n                    });\n\n                    object[\"parents\"] = parents;\n                }\n            });\n\n            this.cHierarchies.push(object);\n        });\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions(code: string): void {\n        const hierarchy = this.hierarchies.find(h => h.code === code);\n\n        if (this.customEvent) {\n            this.onManageVersion.emit(hierarchy);\n        } else {\n/*\n            this.bsModalRef = this.modalService.show(ManageParentVersionsModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            });\n            this.bsModalRef.content.init(hierarchy);\n            this.bsModalRef.content.onVersionChange.subscribe(hierarchy => {\n                this.calculate();\n            });\n            */\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\" *ngIf=\"!readOnly\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, Input, EventEmitter, Output, SimpleChanges } from \"@angular/core\";\nimport { IActionMapping, ITreeOptions } from \"@circlon/angular-tree-component\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\n\n@Component({\n\n    selector: \"tree-geo-selector\",\n    templateUrl: \"./tree-geo-selector.html\",\n    styleUrls: [\"./tree-geo-selector.css\"]\n})\nexport class TreeGeoSelector {\n\n    @Input() hierarchy: HierarchyOverTime;\n\n    @Input() readOnly: boolean = false;\n\n    @Input() forDate: Date = null;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    nodes: any[] = [];\n\n    actionMapping: IActionMapping = {\n        mouse: {\n            click: null\n        }\n    }\n\n    options: ITreeOptions = {\n        displayField: \"name\",\n        isExpandedField: \"expanded\",\n        idField: \"code\",\n        actionMapping: this.actionMapping\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        let time = null;\n\n        if (this.forDate != null) {\n            time = this.forDate.getTime();\n        }\n\n        let nodes = [];\n        let current = null;\n\n        this.hierarchy.entries.forEach(pot => {\n            const startDate = Date.parse(pot.startDate);\n            const endDate = Date.parse(pot.endDate);\n\n            // eslint-disable-next-line no-mixed-operators\n            if (time == null || time >= startDate && time <= endDate) {\n                this.hierarchy.types.forEach(type => {\n                    let node: any = {\n                        code: type.code,\n                        label: type.label,\n                        children: [],\n                        expanded: false\n                    };\n\n                    if (pot.parents[type.code] != null) {\n                        node.name = pot.parents[type.code].text;\n\n                        if (time == null) {\n                            node.name = node.name + \" (\" + pot.startDate + \" -> \" + pot.endDate + \")\";\n                        }\n\n                        node.geoObject = pot.parents[type.code].geoObject;\n                    }\n\n                    if (current == null) {\n                        nodes.push(node);\n                    } else {\n                        current.children.push(node);\n                        current.expanded = true;\n                    }\n\n                    current = node;\n                });\n            }\n\n            current = null;\n        });\n\n        this.nodes = nodes;\n    }\n\n    onEdit(): void {\n        this.onManageVersion.emit(this.hierarchy);\n    }\n\n}\n","<div>\n\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 style=\"margin: 0;\">{{hierarchy.label}}</h4>\n    </div>\n    <div class=\"panel-body\">\n\n<!--       <div class=\"input-group\"> -->\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\" >\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n<!--         <span *ngIf=\"!readOnly\" class=\"input-group-addon\">  -->\n<!--           <i class=\"fa fa-pencil clickable\" (click)=\"onEdit()\" aria-hidden=\"true\"></i> -->\n<!--         </span> -->\n<!--       </div> -->\n      \n      <button class=\"btn btn-primary\" style=\"width:100%;margin-top:10px;\" *ngIf=\"!readOnly\" (click)=\"onEdit()\"><localize key=\"modal.button.edit\"></localize></button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component({\n    selector: \"action-detail-modal\",\n    templateUrl: \"./action-detail-modal.component.html\",\n    styleUrls: []\n})\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    readonly: boolean;\n\n    @ViewChild(\"cuDetail\") cuDetail: ActionDetailComponent;\n    @ViewChild(\"arDetail\") arDetail: ActionDetailComponent;\n    @ViewChild(\"spDetail\") spDetail: ActionDetailComponent;\n\n    @Input()\n    curAction(action: any, readonly: boolean) {\n        this.action = action;\n        this.readonly = readonly;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if (this.cuDetail != null) {\n            this.cuDetail.endEdit();\n        }\n\n        if (this.arDetail != null) {\n            this.arDetail.endEdit();\n        }\n\n        if (this.spDetail != null) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { IOService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"data-export\",\n    templateUrl: \"./data-export.component.html\",\n    styleUrls: []\n})\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService, private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes(true).then(types => {\n            // this.types = types;\n\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                if (this.authService.isOrganizationRA(types[i].orgCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.types = myOrgTypes;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onChange(code: string): void {\n        if (code != null && code.length > 0) {\n            this.service.getHierarchiesForType(code, false).then(hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n    }\n\n    onExport(): void {\n        if (this.format === \"SHAPEFILE\") {\n            window.location.href = registry.contextPath + \"/shapefile/export-shapefile?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        } else if (this.format === \"EXCEL\") {\n            window.location.href = registry.contextPath + \"/excel/export-spreadsheet?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"export.option.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"export.option.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\nimport { ContextList, ListOrgGroup, ListVersion } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport * as ColorGen from \"color-generator\";\nimport { Subscription } from \"rxjs\";\n\nimport { CdkDragDrop, moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport { PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\nimport { GEO_OBJECT_DATA_SOURCE_TYPE, Layer, ListVectorLayerDataSource, LIST_VECTOR_SOURCE_TYPE, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE, SEARCH_DATASOURCE_TYPE } from \"@registry/service/layer-data-source\";\nimport { RegistryService } from \"@registry/service/registry.service\";\nimport { RelationshipVisualizationService } from \"@registry/service/relationship-visualization.service\";\nimport { LayerGroup, LayerGroupSorter } from \"./layer-group\";\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nexport interface BaseLayer {\n    name: string,\n    label: string,\n    id: string,\n    sprite: string,\n    url: string,\n    selected: boolean\n}\n\n@Component({\n    selector: \"layer-panel\",\n    templateUrl: \"./layer-panel.component.html\",\n    styleUrls: [\"./location-manager.css\", \"./layer-panel.css\"]\n})\nexport class LayerPanelComponent implements OnInit, OnDestroy {\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: false\n    };\n\n    // Hack to allow the constant to be used in the html\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.LAYER_PANEL,\n        SEARCH_DATASOURCE_TYPE: SEARCH_DATASOURCE_TYPE,\n        GEO_OBJECT_DATA_SOURCE_TYPE: GEO_OBJECT_DATA_SOURCE_TYPE,\n        RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE: RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE,\n        LIST_VECTOR_SOURCE_TYPE: LIST_VECTOR_SOURCE_TYPE\n    }\n\n    @Input() filter: string[] = [];\n    @Input() includeSearchLayer: boolean = false;\n    @Input() visualizeMode: number;\n\n    @Output() baseLayerChange = new EventEmitter<BaseLayer>();\n    @Output() create = new EventEmitter<Layer>();\n\n    @Input() panelSize: number = PANEL_SIZE_STATE.MINIMIZED;\n    @Output() panelSizeChange = new EventEmitter<number>();\n\n    listOrgGroups: ListOrgGroup[] = [];\n\n    layers: Layer[] = [];\n    layerGroups: LayerGroup[] = [];\n\n    versionMap: { [key: string]: ListVersion } = {};\n\n    graphList: ContextList = null;\n\n    form: { startDate: string, currentStartDate: string, endDate: string, currentEndDate: string } = {\n        startDate: \"\",\n        currentStartDate: \"\",\n        endDate: \"\",\n        currentEndDate: \"\"\n    };\n\n    /*\n     * List of base layers\n     */\n    baseLayers: BaseLayer[] = [\n        {\n            name: \"Satellite\",\n            label: \"baselayer.satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        //         {\n        //             name: 'Streets',\n        //             label: 'baselayer.streets',\n        //             id: 'streets-v11',\n        //             sprite: 'mapbox://sprites/mapbox/streets-v11',\n        //             url: 'mapbox://styles/mapbox/streets-v11'\n        //         }\n    ];\n\n    subscription: Subscription;\n\n    params: Params = null;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private spinner: NgxSpinnerService,\n        private service: ListTypeService,\n        private geomService: GeometryService,\n        private registryService: RegistryService,\n        private vizService: RelationshipVisualizationService,\n        private localService: LocalizationService,\n        private listService: ListTypeService) { }\n\n    ngOnInit(): void {\n        this.subscription = this.geomService.layersChange.subscribe((layers: Layer[]) => {\n            this.layersChange(layers);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    setPanelSize(size: number) {\n        this.panelSize = size;\n\n        if (this.layers.length === 0 && this.panelSize === PANEL_SIZE_STATE.WINDOWED) {\n            this.panelSize = PANEL_SIZE_STATE.FULLSCREEN;\n        }\n        if (this.panelSize > PANEL_SIZE_STATE.FULLSCREEN) {\n            this.panelSize = 0;\n        }\n\n        this.panelSizeChange.emit(this.panelSize);\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { layersPanelSize: this.panelSize },\n            queryParamsHandling: \"merge\"\n        });\n    }\n\n    togglePanelOpen() {\n        this.setPanelSize(this.panelSize === 0 ? 1 : 0);\n    }\n\n    layersChange(layers: Layer[]): void {\n        this.layers = this.geomService.getLayers();\n        this.layerGroups = new LayerGroupSorter(this.localService).getLayerGroups(layers);\n\n        let layersWithoutVersions = this.layers.filter(layer => this.versionMap[layer.getId()] == null && layer.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE).map(layer => (layer.dataSource as ListVectorLayerDataSource).getVersionId());\n        if (layersWithoutVersions.length > 0) {\n            this.service.fetchVersionsAsListVersion(layersWithoutVersions).then((versions: ListVersion[]) => {\n                versions.forEach(version => {\n                    let layerIndex = this.layers.findIndex(l => l.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE && (l.dataSource as ListVectorLayerDataSource).getVersionId() === version.oid);\n                    if (layerIndex !== -1) {\n                        let layer = this.layers[layerIndex];\n                        version.layer = layer;\n                        this.versionMap[layer.getId()] = version;\n                    }\n                });\n            });\n        }\n\n        this.refreshListLayerReferences();\n    }\n\n/*\n    private convertLayerToContextLayer(layer: Layer): ContextLayer {\n        let cLayer: ContextLayer = new ContextLayer(layer.getId(), layer.dataSource.getDataSourceType(), layer.legendLabel, layer.rendered, layer.color);\n        return cLayer;\n    }\n\n    private convertContextLayerToLayer(cLayer: ContextLayer): Layer {\n        let serializedLayer: any = cLayer;\n        delete serializedLayer.dataSourceType;\n        serializedLayer.dataSource = { dataSourceType: cLayer.dataSourceType };\n\n        return new DataSourceFactory(this.geomService, this.registryService, this.vizService).deserializeLayer();\n    }\n    */\n\n    handleSearch(): Promise<ListOrgGroup[]> {\n        this.spinner.show(this.CONSTANTS.OVERLAY);\n\n        return this.service.getGeospatialVersions(this.form.startDate, this.form.endDate).then(listOrgGroups => {\n            this.form.currentStartDate = this.form.startDate;\n            this.form.currentEndDate = this.form.endDate;\n\n            this.listOrgGroups = listOrgGroups;\n\n            this.refreshListLayerReferences();\n\n            return listOrgGroups;\n        }).finally(() => {\n            this.spinner.hide(this.CONSTANTS.OVERLAY);\n        });\n    }\n\n    private refreshListLayerReferences() {\n        this.listOrgGroups.forEach(listOrgGroup => {\n            listOrgGroup.types.forEach(listTypeGroup => {\n                listTypeGroup.lists.forEach(list => {\n                    list.versions = list.versions.filter(v => this.filter.indexOf(v.oid) === -1);\n\n                    for (let i = 0; i < list.versions.length; ++i) {\n                        let version = list.versions[i];\n\n                        let layerIndex = this.layers.findIndex(l => l.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE && (l.dataSource as ListVectorLayerDataSource).getVersionId() === version.oid);\n                        if (layerIndex !== -1) {\n                            let layer = this.layers[layerIndex];\n                            version.layer = layer;\n                            this.versionMap[layer.getId()] = version;\n                        }\n                    }\n                });\n            });\n        });\n\n        for (const [layerId, ver] of Object.entries(this.versionMap)) {\n            let version: ListVersion = ver as ListVersion;\n\n            let layerIndex = this.layers.findIndex(l => l.getId() === layerId);\n            if (layerIndex !== -1) {\n                let layer = this.layers[layerIndex];\n                version.layer = layer;\n            }\n        }\n    }\n\n    clickToggleLayerRendered(layer: Layer, list: ContextList) {\n        this.toggleLayerRendered(layer);\n    }\n\n    toggleLayerRendered(layer: Layer): void {\n        layer.rendered = !layer.rendered;\n\n        this.geomService.addOrUpdateLayer(layer);\n    }\n\n    onGotoBounds(layer: Layer): void {\n        let layers = this.geomService.getLayers().filter(l => l.getId() === layer.getId());\n\n        if (layers.length > 0) {\n            this.geomService.zoomToLayer(layers[0]);\n        }\n    }\n\n    togglePinned(layer: Layer): void {\n        let layers = this.geomService.getLayers();\n        let layerIndex = this.geomService.getLayers().findIndex(l => l.getId() === layer.getId());\n\n        if (layerIndex !== -1) {\n            let layer = layers[layerIndex];\n\n            layer.setPinned(!layer.getPinned());\n            this.geomService.setLayers(layers);\n        }\n    }\n\n    onCreate(layer: Layer): void {\n        this.create.emit(layer);\n    }\n\n    toggleVersionLayer(version: ListVersion, list: ContextList): void {\n        if (!version.layer) {\n            let dataSource = new ListVectorLayerDataSource(this.listService, version.oid);\n            version.layer = dataSource.createLayer(list.label, true, ColorGen().hexString());\n            this.versionMap[version.layer.getId()] = version;\n            this.geomService.addOrUpdateLayer(version.layer);\n        } else {\n            this.geomService.removeLayer(version.layer.getId());\n            delete this.versionMap[version.layer.getId()];\n            delete version.layer;\n        }\n    }\n\n    removeLayer(layer: Layer): void {\n        this.geomService.removeLayer(layer.getId());\n\n        let version = this.versionMap[layer.getId()];\n        if (version) {\n            delete this.versionMap[version.layer.getId()];\n            delete version.layer;\n        }\n    }\n\n    toggleBaseLayer(layer: BaseLayer): void {\n        this.baseLayers.forEach(bl => {\n            bl.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.baseLayerChange.emit(layer);\n    }\n\n    drop(event: CdkDragDrop<string[]>, group: LayerGroup) {\n        moveItemInArray(group.getLayers(), event.previousIndex, event.currentIndex);\n\n        let layers = [];\n        this.layerGroups.forEach(group => group.getLayers().forEach(l => layers.push(l)));\n\n        this.geomService.setLayers(layers);\n    }\n\n}\n","<ng-template #versionDetail let-versionOrLayer='versionOrLayer'>\n  (\n  <a *ngIf=\"versionOrLayer.versionNumber !== 0\" [routerLink]=\"'/registry/master-list/' + versionOrLayer.oid\" routerLinkActive=\"active\">\n    <localize key=\"list.type.version\"></localize>\n    {{versionOrLayer.versionNumber}}\n  </a>\n  \n  <a *ngIf=\"versionOrLayer.versionNumber === 0\" [routerLink]=\"'/registry/master-list/' + versionOrLayer.oid\" routerLinkActive=\"active\">\n    <localize *ngIf=\"versionOrLayer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n  </a>\n  )\n</ng-template>\n\n<ng-template #listView let-list='list'>\n  <div *ngIf=\"list.versions.length > 0\" class=\"list-group-item\" style=\"border: none; padding-top:0; padding-bottom:0;\">\n    <h4><a (click)=\"list.open = !list.open\"><i class=\"fa fa-chevron-right\" [ngClass]=\"{'fa-chevron-down' : list.open, 'fa-chevron-right' : !list.open}\" style=\"font-size:14px;\"></i>{{ list.label }}</a></h4>\n  \n    <div *ngIf=\"list.open\" class=\"list-group\">\n      <div *ngFor=\"let version of list.versions\">\n        <div class=\"layer-toggle-wrapper\">\n\t\t\t      <a class=\"fa\" style=\"padding-right: 10px;\" [ngClass]='{\"fa-minus\" : version.layer, \"fa-plus\" : !version.layer}' [title]=\"(version.layer ? 'explorer.layerPanel.removeFromLegend' : 'explorer.layerPanel.addToLegend') | localize\" (click)=\"toggleVersionLayer(version, list)\"></a>\n\t\t\t      <boolean-field *ngIf=\"version.layer\" [value]=\"version.layer.rendered\" label=\"\" [disable]=\"false\" (change)=\"clickToggleLayerRendered(version.layer, list)\" style=\"line-height:0;\"></boolean-field>\n\t\t\t  \n\t\t\t      <div class=\"label-wrapper\">\n              \t\t<date-text [date]=\"version.forDate\"></date-text>\n\t\t\t\t        (\n\t\t\t\t\t\t\t  <a *ngIf=\"version.versionNumber !== 0\" [routerLink]=\"'/registry/master-list/' + version.oid\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t    <localize key=\"list.type.version\"></localize>\n\t\t\t\t\t\t\t    {{version.versionNumber}}\n\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  <a *ngIf=\"version.versionNumber === 0\" [routerLink]=\"'/registry/master-list/' + version.oid\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t    <localize *ngIf=\"version.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t  )\n\t\t\t\t        \n\t\t\t\t        <div *ngIf=\"version.color != null\" class=\"layer-legend-square\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"\n\t\t\t          [ngStyle]=\"{'background-color': version.color}\"> </div>\n\t\t\t      </div>\n\t\t\t  </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n<div class=\"layer-toggle\">\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>  \n\n  <div class=\"row\">\n  \t<div class=\"col-md-12\">\n      <span [title]=\"(panelSize === 0 ? 'explorer.resize.openLayerPanel' : 'explorer.resize.closeLayerPanel') | localize\" class=\"clickable\" style=\"width:27px; height:27px; float: right;margin:5px;\" (click)=\"togglePanelOpen()\">\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 122.88 105.02\" style=\"enable-background:new 0 0 122.88 105.02\" xml:space=\"preserve\"><g><path d=\"M97.25,40.58l23.85,10.28c1.48,0.64,2.17,2.36,1.53,3.85c-0.32,0.75-0.93,1.3-1.63,1.57l-23.19,9.39l23.29,10.04 c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57l-58.52,23.69c-0.73,0.3-1.52,0.27-2.2,0L1.83,81.05 c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67l22.97-9.96l-23.12-9.4c-1.5-0.61-2.22-2.31-1.61-3.81 c0.33-0.82,0.99-1.4,1.76-1.67l23.53-10.21L1.83,30.9c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67L60.02,0.24 c0.77-0.33,1.6-0.31,2.31,0l0-0.01l58.77,25.32c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57L97.25,40.58 L97.25,40.58z M112.36,53.47l-22.73-9.79L62.49,54.66c-0.73,0.3-1.52,0.27-2.2,0L33.08,43.6L10.47,53.4L61.39,74.1L112.36,53.47 L112.36,53.47z M90.19,68.75l-27.7,11.21c-0.73,0.3-1.52,0.27-2.2,0L32.52,68.68l-22.05,9.56l50.92,20.69l50.97-20.63L90.19,68.75 L90.19,68.75z M61.17,6.1l-50.7,21.99l50.92,20.69l50.97-20.63L61.17,6.1L61.17,6.1z\"/></g></svg>\n      </span>\n      \n      <i *ngIf=\"(panelSize === 2 && this.layers.length > 0) || (panelSize === 1)\" (click)=\"setPanelSize( (panelSize === 2 ? 1 : 2) )\" class=\"clickable fa\" [ngClass]=\"{'fa-compress' : panelSize === 2, 'fa-expand' : panelSize === 1}\" \n      \t\t[title]=\"(panelSize === 2 ? 'explorer.resize.collapseLayerPanel' : 'explorer.resize.expandLayerPanel') | localize\" style=\"width:30px;height:30px;margin-right:5px;font-size:25px;padding:5px;\"></i>\n  \t</div>\n  </div>\n\n  <div *ngIf=\"panelSize !== 0 && layers.length > 0\">\n    <div style=\"margin-bottom: 10px;\">\n      <!--\n      <h4>\n        <localize key=\"explorer.layers\"></localize>\n      </h4>\n      -->\n      <div *ngFor=\"let layerGroup of layerGroups\">\n          <label style=\"font-weight: bold;\">{{layerGroup.getLabel()}}</label>\n      \n\t\t      <div class=\"list-group\" cdkDropList (cdkDropListDropped)=\"drop($event, layerGroup)\">\n\t\t\t        <div *ngFor=\"let layer of layerGroup.getLayers()\" class=\"list-group-item\" style=\"padding:5px;\" cdkDrag>\n\t\t\t\n\t\t\t            <div class=\"layer-toggle-wrapper\" style=\"cursor:move;\">\n\t\t\t            \n\t\t\t              <div class=\"custom-placeholder\" *cdkDragPlaceholder></div>\n\t\t\t              \n\t\t\t              <!-- <i class=\"fa fa-arrows\" style=\"font-size:15px;color: grey;margin-right: 3px;\" aria-hidden=\"true\"></i> -->\n\t\t\t              <boolean-field [value]=\"layer.rendered\" label=\"\" [disable]=\"false\" (change)=\"toggleLayerRendered(layer)\" style=\"line-height:0;\" ></boolean-field>\n\t\t\t              \n\t\t\t              <div class=\"label-wrapper\">\n\t\t\t                {{layer.legendLabel}}\n\t\t\t                <span *ngIf=\"versionMap[layer.getId()]\">- {{ versionMap[layer.getId()].forDate }}</span>\n\t\t\t                \n\t\t\t                <ng-container *ngIf=\"versionMap[layer.getId()] != null\">\n\t\t\t\t\t                (\n\t\t\t\t\t\t\t\t\t\t\t\t  <a *ngIf=\"versionMap[layer.getId()].versionNumber !== 0\" [routerLink]=\"'/registry/master-list/' + layer.dataSource.getVersionId()\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <localize key=\"list.type.version\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t    {{versionMap[layer.getId()].versionNumber}}\n\t\t\t\t\t\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  <a *ngIf=\"versionMap[layer.getId()].versionNumber === 0\" [routerLink]=\"'/registry/master-list/' + layer.dataSource.getVersionId()\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <localize *ngIf=\"versionMap[layer.getId()].versionNumber === 0\" key=\"list.type.working.version\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t  </ng-container>\n\t\t\t                \n\t\t\t                <div class=\"layer-legend-square\" [ngStyle]=\"{'background-color': layer.color}\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"> </div>\n\t\t\t<!--                 <i class=\"fa fa-arrow-up\" aria-hidden=\"true\" (click)=\"moveLayer(layer, -1)\"></i> -->\n\t\t\t<!--                 <i class=\"fa fa-arrow-down\" aria-hidden=\"true\" (click)=\"moveLayer(layer, 1)\"></i> -->\n\t\t\t                <i [title]=\"'explorer.layerPanel.zoomToFeature' | localize\" class=\"fa fa-eye\" aria-hidden=\"true\" (click)=\"onGotoBounds(layer)\"></i>\n\t\t\t                <i [title]=\"'explorer.layerPanel.pin' | localize\" *ngIf=\"!(layer.dataSource.getDataSourceType() === CONSTANTS.LIST_VECTOR_SOURCE_TYPE)\" [ngClass]=\"layer.getPinned() ? 'active' : 'not-active' \" class=\"fa fa-thumb-tack clickable\" aria-hidden=\"true\" (click)=\"togglePinned(layer)\"></i>\n\t\t\t                <i [title]=\"'explorer.layerPanel.addNewGeoObject' | localize\" *ngIf=\"versionMap[layer.getId()] && versionMap[layer.getId()].versionNumber === 0\" class=\"fa fa-plus\" aria-hidden=\"true\" (click)=\"onCreate(layer)\"></i>\n\t\t\t                <i [title]=\"'explorer.layerPanel.removeLayer' | localize\" class=\"fa fa-times\" aria-hidden=\"true\" (click)=\"removeLayer(layer)\"></i>\n\t\t\t              </div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t      </div>\n      </div>\n      \n    </div>\n  </div>\n\n  <div *ngIf=\"panelSize === 2\" style=\"margin-top: 10px;\">\n\n    <div *ngIf=\"baseLayers.length > 1\" style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.base.layers.label\"></localize>\n      </h4>\n      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n        <input class=\"layer-toggle-input\" type='radio' name='baselayers' [value]='baseLayer.id'\n          [checked]=\"baseLayer.selected\" (change)=\"toggleBaseLayer(baseLayer)\">\n        <label class=\"layer-toggle-label\">\n          <localize [key]=\"baseLayer.label\"></localize>\n        </label>\n      </div>\n    </div>\n    \n    <form class=\"modal-form\" name=\"export-form\" style=\"overflow:visible;\">\n    \n      <fieldset style=\"padding:10px;\">\n        <div class=\"row\">\n          <div class=\"col-md-4\" style=\"padding-left:10px;padding-right:0;\">\n            <label><localize key=\"io.startDate\"></localize></label>\n          </div>\n          <div class=\"col-md-4\" style=\"padding-left:5px;padding-right:0;\">\n            <label><localize key=\"io.endDate\"></localize></label>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-4\" style=\"padding-left:10px;padding-right:0;\">\n            <date-field [(value)]=\"form.startDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"startDate\"\n              [allowFutureDates]=\"false\" name=\"startDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\" style=\"padding-left:5px;padding-right:0;\">\n            <date-field [(value)]=\"form.endDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"endDate\"\n              [allowFutureDates]=\"false\" name=\"endDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\" style=\"text-align:center;padding-left:5px;\">\n            <button type=\"button\" (click)=\"handleSearch()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n              <span>\n                <localize key=\"explorer.find.layers.by.date.range.button\"></localize>\n              </span>\n            </button>\n          </div>\n        </div>\n        <!--\n        <div *ngIf=\"listOrgGroups.length > 0\" class=\"row\">\n          <div class=\"col-md-12\">\n            <p style=\"font-style:italic;color:grey;\"><localize key=\"explorer.search.note\"></localize></p>\n          </div>\n        </div>\n        -->\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <!--\n            <h3>\n              <localize key=\"explorer.layers\"></localize>\n            </h3>\n            -->\n            \n            <p *ngIf=\"listOrgGroups.length < 1\" style=\"font-style: italic; color: grey;\"><localize key=\"explorer.find.layers.no.layers.found.message\"></localize></p>\n            \n            <div class=\"list-group\">\n              <ng-container *ngIf=\"graphList\" [ngTemplateOutlet]=\"listView\"\n                [ngTemplateOutletContext]=\"{list:graphList}\">\n              </ng-container>\n            \n              <div *ngFor=\"let listOrgGroup of listOrgGroups\">\n                <div *ngIf=\"listOrgGroup.types.length > 0\" class=\"list-group-item\" style=\"border: none;\">\n                \n                  <h3>{{ listOrgGroup.orgLabel.localizedValue }}</h3>\n                  \n                  <div *ngFor=\"let listTypeGroup of listOrgGroup.types\">\n                    <div *ngIf=\"listTypeGroup.lists.length > 0\" class=\"list-group-item\" style=\"border: none;\">\n                    \n                      <h4>{{ listTypeGroup.typeLabel.localizedValue }}</h4>\n                      \n                      <div *ngFor=\"let list of listTypeGroup.lists\">\n                        <ng-container *ngIf=\"list\" [ngTemplateOutlet]=\"listView\"\n                          [ngTemplateOutletContext]=\"{list:list}\">\n                        </ng-container>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n\n  </div>\n  </div>\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, PRESENT } from \"@registry/model/registry\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport * as moment from \"moment\";\n\n@Component({\n    selector: \"geometry-panel\",\n    templateUrl: \"./geometry-panel.component.html\",\n    styleUrls: [\"./geometry-panel.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeometryPanelComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n\n    isVersionForHighlight: number;\n\n    message: string = null;\n\n    readonly: boolean = false;\n\n    hasConflict: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Output() onCloneGeometry = new EventEmitter<any>();\n\n    @Output() onEdit = new EventEmitter<ValueOverTime>();\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    geoObjectOverTime: GeoObjectOverTime;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set geoObjectOverTimeInput(value: GeoObjectOverTime) {\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value));\n        this.geoObjectOverTime = value;\n    }\n\n    @Input() isNewGeoObject: boolean = false;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public changeDetectorRef: ChangeDetectorRef, private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    onDateChange(): any {\n        this.hasConflict = false;\n\n        this.isValid = this.checkDateFieldValidity();\n\n        let vAttributes = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        this.hasConflict = this.dateService.checkRanges(null, vAttributes);\n    }\n\n    edit(vot: ValueOverTime, isVersionForHighlight: number): void {\n        this.onEdit.emit(vot);\n\n        this.isVersionForHighlight = isVersionForHighlight;\n    }\n\n    onAddNewVersion(geometry: ValueOverTime): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null; // Utils.formatDateString(new Date());\n        vot.endDate = null; // Utils.formatDateString(new Date());\n\n        if (geometry && geometry.value) {\n            vot.value = geometry.value;\n        } else {\n            vot.value = { type: this.geoObjectType.geometryType, coordinates: [] };\n        }\n\n        if (this.geoObjectType.geometryType === \"MULTIPOLYGON\") {\n            vot.value.type = \"MultiPolygon\";\n        } else if (this.geoObjectType.geometryType === \"POLYGON\") {\n            vot.value.type = \"Polygon\";\n        } else if (this.geoObjectType.geometryType === \"POINT\") {\n            vot.value.type = \"Point\";\n        } else if (this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            vot.value.type = \"MultiPoint\";\n        } else if (this.geoObjectType.geometryType === \"LINE\") {\n            vot.value.type = \"Line\";\n        } else if (this.geoObjectType.geometryType === \"MULTILINE\") {\n            vot.value.type = \"MultiLine\";\n        } else if (this.geoObjectType.geometryType === \"MIXED\") {\n            vot.value.type = \"Mixed\";\n        }\n\n        votArr.push(vot);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    setDateAttribute(vot: ValueOverTime, val: string): void {\n        vot.value = new Date(val).getTime().toString();\n    }\n\n    remove(version: any): void {\n        let val = this.geoObjectOverTime.attributes[\"geometry\"];\n\n        let position = -1;\n        for (let i = 0; i < val.values.length; i++) {\n            let vals = val.values[i];\n\n            if (vals.startDate === version.startDate) {\n                position = i;\n            }\n        }\n\n        if (position > -1) {\n            val.values.splice(position, 1);\n        }\n    }\n\n    formatDate(date: string) {\n        let localeData = moment.localeData(date);\n        let format = localeData.longDateFormat(\"L\");\n        return moment().format(format);\n    }\n\n    setInfinity(vAttribute, attributes): void {\n        if (vAttribute.endDate === PRESENT) {\n            vAttribute.endDate = new Date();\n        } else {\n            vAttribute.endDate = PRESENT;\n        }\n\n        this.onDateChange();\n    }\n\n    sort(votArr: ValueOverTime[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    onCloneGeometryToNewVersion(geometry: ValueOverTime): void {\n        this.onAddNewVersion(geometry);\n    }\n\n    onSubmit(): void {\n        this.onChange.emit(this.geoObjectOverTime);\n    }\n\n    onCancel(): void {\n        this.onChange.emit(this.originalGeoObjectOverTime);\n    }\n\n}\n","<div>\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #versionsform=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"col-md-12\">\n          <div class=\"attribute-version-wrapper\" *ngIf=\"geoObjectOverTime\">\n\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                    <table class=\"table table-striped\">\n\n                      <tbody class=\"attribute-element-wrapper\">\n                        <p class=\"message\" *ngIf=\"geoObjectOverTime.attributes['geometry'].values.length === 0\">\n                          <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize>\n                        </p>\n\n                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\" [ngClass]=\"{'error-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'ERROR', 'warning-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'WARNING'}\">\n                          <td [ngClass]=\"{'active' : i === isVersionForHighlight}\">\n                            <table>\n                              <tr class=\"attribute-value-row\" *ngIf=\"geoObjectType.isGeometryEditable\">\n                                <td colspan=\"2\">\n                                  <button class=\"btn btn-primary\" (click)=\"edit(vAttribute, i)\" role=\"button\">\n                                    <localize key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                  </button>\n                                  <button type=\"submit\" (click)=\"onCloneGeometryToNewVersion(vAttribute)\" class=\"btn btn-default\" role=\"button\">\n                                      <localize key=\"changeovertime.manageVersions.copy.geometry.button\"></localize>\n                                    </button>\n                                </td>\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5> \n                                  \n                                  <date-field #dateFieldComponents [(value)]=\"vAttribute.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" ></date-field>\n                                  \n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                      <h5>\n                                        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                      </h5>\n                                      \n                                      <date-field #dateFieldComponents [(value)]=\"vAttribute.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" [placement]=\"'bottom'\"></date-field>\n                                      \n                                    </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0\">\n<!--                                   <p class=\"error-message\"> -->\n<!--                                     <localize key=\"manage.versions.overlap.message\"></localize> -->\n<!--                                   </p> -->\n                                  <p *ngFor=\"let msg of vAttribute.conflictMessage\" [ngClass]=\"{'error-message': msg.type === 'ERROR', 'warning-message': msg.type === 'WARNING'}\">\n                                    {{msg.message}}\n                                  </p>\n                              </tr>    \n                            </table>\n                          </td>\n                          <td style=\"vertical-align: middle;\" class=\"manage-version-button clickable\" [title]=\"'changeovertime.manageVersions.remove.version' | localize\" (click)=\"remove(vAttribute)\">\n                            <i class=\"fa fa-times\"></i>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </li>\n\n                  <li class=\"list-group-item\" style=\"text-align: left;\">\n                    <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion(null)\"> <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                    </i>\n                  </li>\n                </ul>\n              </div>\n        </div>\n\n      </div>\n\n      <div class=\"row-holder\">\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"holder\" style=\"border: none; width: 100%;\">\n          <div class=\"button-holder pull-right\">\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n              <localize key=\"io.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || !versionsform.valid\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\n@Pipe({\n    name: \"geoobjecttype\",\n    pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n\n    transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        let unassignedGeoObjTypes: string[] = [];\n        this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n\n        // filter items array, items which match and return true will be\n        // kept, false will be filtered out\n        return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n    }\n\n    buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void {\n        filter.forEach(f => {\n            this.processHierarchyNodes(f, unassignedGeoObjTypes);\n        })\n    }\n\n    processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]) {\n        unassignedGeoObjTypes.push(node.geoObjectType)\n\n        node.children.forEach(child => {\n            this.processHierarchyNodes(child, unassignedGeoObjTypes);\n        })\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"geoObjectAttributeExcludesFilter\",\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"toEpochDateTime\",\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n\n    transform(date: string): any {\n        if (!date) {\n            return date;\n        }\n\n        return new Date(date).getTime();\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from \"../shared/service/guard.service\";\nimport { BusinessTypeManagerComponent } from \"./component/business-type/business-type-manager.component\";\nimport { BusinessImporterComponent } from \"./component/business-importer/business-importer.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\nimport { BusinessTableComponent } from \"./component/business-table/business-table.component\";\nimport { ClassificationTypeManagerComponent } from \"./component/classification-type/classification-type-manager.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"hierarchies\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"data\",\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-requests\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"change-requests/:oid\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"master-lists\",\n        component: ListTypeManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"master-list/:oid\",\n        component: ListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"scheduled-jobs\",\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"job/:oid\",\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-request\",\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"tasks\",\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"synchronization-configs\",\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"synchronization-config/:oid\",\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"sync/details/:config/:oid\",\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"curation-job/:oid\",\n        component: CurationJobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"historical-events\",\n        component: HistoricalEventModuleComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"business-types\",\n        component: BusinessTypeManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"business-importer\",\n        component: BusinessImporterComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"business-type/:oid\",\n        component: BusinessTableComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"classification-type\",\n        component: ClassificationTypeManagerComponent,\n        canActivate: [AuthGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n})\nexport class RegistryRoutingModule { }\n","import { LocalizedValue, PageResult } from \"@shared/model/core\";\n\nexport class ClassificationType {\n\n    oid?: string;\n    code: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n\n}\n\nexport class Classification {\n\n    code: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n\n}\n\nexport class ClassificationNode {\n\n    classification:Classification;\n    children: PageResult<ClassificationNode>;\n\n}\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LayerRecord } from \"@registry/model/list-type\";\n\n@Component({\n    selector: \"record-panel\",\n    templateUrl: \"./record-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class RecordPanelComponent {\n\n    @Input() record: LayerRecord\n    @Output() close = new EventEmitter<void>();\n\n    onClose(): void {\n        this.close.emit();\n    }\n\n}\n","<div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{record.typeLabel.localizedValue}}</h3>\n    </div>      \n  </div>\n\n  <form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of record.attributes let i = index\" class=\"list-group-item\"\n              style=\"text-align:left;border:none;padding:0;\">\n              <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span>\n                      {{attr.label}}\n                    </span>\n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <input type=\"text\" [(ngModel)]=\"record.data[attr.name]\" [name]=\"'mod-' + attr.name\" disabled=\"true\">\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n  <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n      <localize key=\"modal.button.cancel\"></localize>\n    </button>\n  </div>\n\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\nimport { DateService } from \"@shared/service\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"curation-problem-modal\",\n    templateUrl: \"./curation-problem-modal.component.html\",\n    styleUrls: []\n})\nexport class CurationProblemModalComponent {\n\n    message: string = null;\n    version: ListTypeVersion;\n    problem: CurationProblem;\n    job: CurationJob;\n    callback: Function;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public service: ListTypeService, public bsModalRef: BsModalRef, private modalService: BsModalService, private dateService: DateService) {\n    }\n\n    init(version: ListTypeVersion, problem: CurationProblem, job: CurationJob, callback: Function): void {\n        this.version = version;\n        this.problem = problem;\n        this.job = job;\n        this.callback = callback;\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            // return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n            return \"Missing geometry\";\n        }\n\n        return probType;\n    }\n\n    onEditGeoObject(): void {\n        const editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureAsExisting(this.problem.goCode, this.problem.typeCode, this.version.forDate, true);\n        editModal.content.setMasterListId(this.version.oid);\n        editModal.content.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n            // THERE HAS TO BE A BETTER WAY TO DO THIS\n            if (attributeEditor.changeRequest != null) {\n                const changeRequest = attributeEditor.changeRequest;\n\n                let config = {\n                    historyId: this.job.historyId,\n                    problemId: this.problem.id,\n                    resolution: \"APPLY_GEO_OBJECT\",\n                    code: this.problem.goCode,\n                    typeCode: this.problem.typeCode,\n                    actions: changeRequest.actions\n                };\n\n                this.service.submitErrorResolve(config).then(() => {\n                    this.callback({ action: \"RESOLVED\", data: this.problem });\n                    editModal.hide();\n                }).catch((err: HttpErrorResponse) => {\n                    editModal.content.error(err);\n                });\n            }\n        };\n\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolvedListener(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    onProblemResolvedListener(problem: CurationProblem): void {\n        this.callback({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\" *ngIf=\"problem != null\">\n\n        <fieldset>\n\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n                <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n                <!-- <div class=\"row\">\n            \n                    <h2>\n                        Review: {{job.fileName}} problem\n                    </h2>\n                </div> -->\n                <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                                    border-radius: 10px;\n                                                    margin-bottom: 20px;\n                                                    margin-top: 20px;\n                                                    padding: 10px;\">\n                    <div class=\"col-md-6\">\n                        <div class=\"wrapper\">\n\n                            <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.lastRunBy}}\n                                </span>\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.started.date.label\"></localize>:\n                                    <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                                        <date-text [date]=\"job.lastRun\"></date-text>\n                                    </span>\n                                </span>\n                            </p>\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-6\"></div>\n                </div>\n\n                <div class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n                    <div class=\"col-md-12\">\n\n                        <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                            <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                                <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                                    <h4><strong>\n                                            <localize key=\"etl.problem.header.problem\"></localize>\n                                        </strong></h4>\n                                    <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.type)}}\n                                    </p>\n\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                                <div\n                                    style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                                    <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\"\n                                        class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BusinessObject, BusinessType } from \"@registry/model/business-type\";\n\n@Component({\n    selector: \"business-object-panel\",\n    templateUrl: \"./business-object-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class BusinessObjectPanelComponent {\n\n    @Input() type: BusinessType;\n    @Input() object: BusinessObject;\n\n    @Output() close = new EventEmitter<void>();\n\n    onClose(): void {\n        this.close.emit();\n    }\n\n}\n","<div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{type.displayLabel.localizedValue}}</h3>\n    </div>\n  </div>\n\n  <form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <ng-container *ngFor=\"let attributeType of type.attributes\">\n              <li *ngIf=\"object.data[attributeType.code] != null\" class=\"list-group-item\"\n                style=\"text-align:left;border:none;padding:0;\">\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-heading\">\n                    <h4 style=\"margin:0;\">\n                      <span>\n                        {{attributeType.label.localizedValue}}\n                      </span>\n                    </h4>\n                  </div>\n\n                  <div class=\"panel-body\">\n                    <ng-container ng-switch=\"attributeType.type\">\n                      <ng-container ng-switch-when=\"'date'\">\n                        <date-text [value]=\"object.data[attributeType.code]\"></date-text>\n                      </ng-container>\n                      <ng-container ng-switch-default>\n                        {{ object.data[attributeType.code] }}\n                      </ng-container>\n                    </ng-container>\n                  </div>\n                </div>\n              </li>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n<!--\n\n  <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n      <localize key=\"modal.button.cancel\"></localize>\n    </button>\n  </div>\n-->  \n\n</div>","import { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeDecimalType, AttributedType, AttributeTermType, AttributeType } from \"./registry\";\n\nexport class BusinessType implements AttributedType {\n\n    oid?: string;\n    code: string;\n    organization: string;\n    organizationLabel?: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n    attributes?: Array<AttributeType | AttributeTermType | AttributeDecimalType>;\n    labelAttribute?: string;\n\n}\n\nexport class BusinessTypeByOrg {\n\n    oid: string;\n    code: string;\n    label: string;\n    types: BusinessType[];\n\n}\n\nexport class BusinessObject {\n\n    code: string;\n    label: string;\n    data: {\n        [key: string]: string | number;\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule, DatePipe } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\nimport { DndModule } from \"ngx-drag-drop\";\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\nimport { NgxSpinnerModule } from \"ngx-spinner\";\n\nimport { ImportTypesModalComponent } from \"./component/hierarchy/modals/import-types-modal.component\";\nimport { LocalizedInputComponent } from \"./component/form-fields/localized-input/localized-input.component\";\nimport { LocalizedTextComponent } from \"./component/form-fields/localized-text/localized-text.component\";\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { RelationshipVisualizerComponent } from \"./component/relationship-visualizer/relationship-visualizer.component\";\nimport { CreateHierarchyTypeModalComponent } from \"./component/hierarchy/modals/create-hierarchy-type-modal.component\";\nimport { AddChildToHierarchyModalComponent } from \"./component/hierarchy/modals/add-child-to-hierarchy-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./component/hierarchy/modals/create-geoobjtype-modal.component\";\nimport { ManageAttributesModalComponent } from \"./component/hierarchy/geoobjecttype-management/manage-attributes-modal.component\";\nimport { DefineAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component\";\nimport { EditAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component\";\nimport { ShapefileModalComponent } from \"./component/importer/modals/shapefile-modal.component\";\nimport { AttributesPageComponent } from \"./component/importer/modals/attributes-page.component\";\nimport { LocationPageComponent } from \"./component/importer/modals/location-page.component\";\nimport { LocationProblemPageComponent } from \"./component/importer/modals/location-problem-page.component\";\nimport { LocationProblemComponent } from \"./component/importer/modals/location-problem.component\";\nimport { TermProblemPageComponent } from \"./component/importer/modals/term-problem-page.component\";\nimport { TermProblemComponent } from \"./component/importer/modals/term-problem.component\";\nimport { SpreadsheetModalComponent } from \"./component/importer/modals/spreadsheet-modal.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { TermOptionWidgetComponent } from \"./component/hierarchy/geoobjecttype-management/term-option-widget.component\";\nimport { AttributeInputComponent } from \"./component/hierarchy/geoobjecttype-management/attribute-input.component\";\nimport { EditTermOptionInputComponent } from \"./component/hierarchy/geoobjecttype-management/edit-term-option-input.component\";\nimport { ManageTermOptionsComponent } from \"./component/hierarchy/geoobjecttype-management/manage-term-options.component\";\nimport { GeoObjectTypeInputComponent } from \"./component/hierarchy/geoobjecttype-management/geoobjecttype-input.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./component/hierarchy/modals/manage-geoobjecttype-modal.component\";\nimport { RequestTableComponent } from \"./component/crtable/request-table.component\";\nimport { CreateUpdateGeoObjectDetailComponent } from \"./component/crtable/action-detail/create-update-geo-object/detail.component\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component\";\nimport { StabilityPeriodComponent } from \"./component/geoobject-shared-attribute-editor/stability-period.component\";\nimport { ManageVersionsComponent } from \"./component/geoobject-shared-attribute-editor/manage-versions.component\";\nimport { StandardAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/standard-attribute-editor.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { GeoObjectEditorComponent } from \"./component/geoobject-editor/geoobject-editor.component\";\nimport { GeoObjectEditorMapComponent } from \"./component/geoobject-editor-map/geoobject-editor-map.component\";\nimport { SimpleEditControl } from \"./component/geoobject-editor-map/simple-edit-control/simple-edit-control.component\";\nimport { CascadingGeoSelector } from \"./component/cascading-geo-selector/cascading-geo-selector\";\nimport { TreeGeoSelector } from \"./component/tree-geo-selector/tree-geo-selector\";\nimport { ActionDetailModalComponent } from \"./component/crtable/action-detail/action-detail-modal.component\";\nimport { DataImporterComponent } from \"./component/importer/dataimporter.component\";\nimport { DataExportComponent } from \"./component/data-export/data-export.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { JobConflictModalComponent } from \"./component/scheduled-jobs/conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./component/scheduled-jobs/conflict-widgets/reupload-modal.component\";\nimport { ParentReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component\";\nimport { TermReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component\";\nimport { RowValidationProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component\";\nimport { StepIndicatorComponent } from \"./component/scheduled-jobs/step-indicator.component\";\nimport { ImportProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/import-problem-widget.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { FhirExportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-export-synchronization-config.component\";\nimport { Dhis2SynchronizationConfigComponent } from \"./component/synchronization-config/dhis2-synchronization-config.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigModalComponent } from \"./component/synchronization-config/synchronization-config-modal.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\n\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { LayerPanelComponent } from \"./component/location-manager/layer-panel.component\";\nimport { FeaturePanelComponent } from \"./component/location-manager/feature-panel.component\";\nimport { GeometryPanelComponent } from \"./component/location-manager/geometry-panel.component\";\n\nimport { GeoObjectAttributeCodeValidator } from \"./factory/form-validation.factory\";\n\nimport { GeoObjectTypePipe } from \"./pipe/geoobjecttype.pipe\";\nimport { GeoObjectAttributeExcludesPipe } from \"./pipe/geoobject-attribute-excludes.pipe\";\nimport { ToEpochDateTimePipe } from \"./pipe/to-epoch-date-time.pipe\";\nimport { RegistryService } from \"./service/registry.service\";\nimport { TaskService } from \"./service/task.service\";\nimport { HierarchyService } from \"./service/hierarchy.service\";\nimport { RelationshipVisualizationService } from \"./service/relationship-visualization.service\";\nimport { SynchronizationConfigService } from \"./service/synchronization-config.service\";\nimport { LocalizationManagerService } from \"./service/localization-manager.service\";\nimport { ChangeRequestService } from \"./service/change-request.service\";\nimport { IOService } from \"./service/io.service\";\nimport { MapService } from \"./service/map.service\";\nimport { FhirImportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-import-synchronization-config.component\";\nimport { TransitionEventService } from \"./service/transition-event.service\";\nimport { TransitionEventTableComponent } from \"./component/transition-event/transition-event-table.component\";\nimport { TransitionEventModalComponent } from \"./component/transition-event/transition-event-modal.component\";\nimport { BusinessTypeManagerComponent } from \"./component/business-type/business-type-manager.component\";\nimport { BusinessTableComponent } from \"./component/business-table/business-table.component\";\nimport { BusinessTypeService } from \"./service/business-type.service\";\nimport { CreateBusinessTypeModalComponent } from \"./component/business-type/modals/create-business-type-modal.component\";\nimport { ManageBusinessTypeModalComponent } from \"./component/business-type/modals/manage-business-type-modal.component\";\nimport { BusinessImporterComponent } from \"./component/business-importer/business-importer.component\";\nimport { HistoricalReportComponent } from \"./component/historical-report/historical-report.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\n\nimport { RegistryRoutingModule } from \"./registry-routing.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { AccordionModule } from \"ngx-bootstrap/accordion\";\n\nimport \"../rxjs-extensions\";\n\nimport { NgxGraphModule } from \"@swimlane/ngx-graph\";\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListTypePublishModalComponent } from \"./component/list-type/publish-modal.component\";\nimport { ListTypeService } from \"./service/list-type.service\";\nimport { ListsForTypeComponent } from \"./component/list-type/lists-for-type.component\";\nimport { ListTypeComponent } from \"./component/list-type/list-type.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { PublishVersionComponent } from \"./component/list-type/publish-version.component\";\nimport { ExportFormatModalComponent } from \"./component/list-type/export-format-modal.component\";\nimport { RecordPanelComponent } from \"./component/location-manager/record-panel.component\";\nimport { RecordPopupComponent } from \"./component/location-manager/record-popup.component\";\nimport { SelectTypeModalComponent } from \"./component/location-manager/select-type-modal.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\nimport { CurationProblemModalComponent } from \"./component/curation/curation-problem-modal.component\";\nimport { ClassificationTypeManagerComponent } from \"./component/classification-type/classification-type-manager.component\";\nimport { ClassificationTypeService } from \"./service/classification-type.service\";\nimport { ClassificationTypePublishModalComponent } from \"./component/classification-type/classification-type-publish-modal.component\";\nimport { ClassificationTypeComponent } from \"./component/classification-type/classification-type.component\";\nimport { ClassificationPublishModalComponent } from \"./component/classification-type/classification-publish-modal.component\";\nimport { ClassificationService } from \"./service/classification.service\";\nimport { ClassificationFieldComponent } from \"./component/form-fields/classification-field/classification-field.component\";\nimport { ClassificationFieldModalComponent } from \"./component/form-fields/classification-field/classification-field-modal.component\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\n\nimport { RegistryCacheService } from \"./service/registry-cache.service\";\nimport { BusinessObjectPanelComponent } from \"./component/location-manager/business-object-panel.component\";\nimport { BusinessObjectService } from \"./service/business-object.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        TabsModule,\n        CollapseModule,\n        NgxPaginationModule,\n        SharedModule,\n        RegistryRoutingModule,\n        DndModule,\n        NgxGraphModule,\n        DragDropModule,\n        AccordionModule.forRoot(),\n        NgxSpinnerModule\n    ],\n    declarations: [\n        HierarchyComponent,\n        RelationshipVisualizerComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        ImportTypesModalComponent,\n        FhirExportSynchronizationConfigComponent,\n        FhirImportSynchronizationConfigComponent,\n        Dhis2SynchronizationConfigComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        StabilityPeriodComponent,\n        ManageVersionsComponent,\n        StandardAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        TreeGeoSelector,\n        ActionDetailModalComponent,\n        DataImporterComponent,\n        DataExportComponent,\n        // Scheduled jobs\n        ExportFormatModalComponent,\n        ScheduledJobsComponent,\n        JobComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        ParentReferenceProblemWidgetComponent,\n        TermReferenceProblemWidgetComponent,\n        RowValidationProblemWidgetComponent,\n        StepIndicatorComponent,\n        ImportProblemWidgetComponent,\n        TaskViewerComponent,\n        // Synchronization Config\n        SynchronizationConfigManagerComponent,\n        SynchronizationConfigModalComponent,\n        SynchronizationConfigComponent,\n        SyncDetailsComponent,\n        // Location manager\n        LocationManagerComponent,\n        LayerPanelComponent,\n        FeaturePanelComponent,\n        GeometryPanelComponent,\n        TransitionEventTableComponent,\n        TransitionEventModalComponent,\n        RecordPanelComponent,\n        RecordPopupComponent,\n        BusinessObjectPanelComponent,\n        // Business Type components\n        BusinessTypeManagerComponent,\n        CreateBusinessTypeModalComponent,\n        ManageBusinessTypeModalComponent,\n        BusinessImporterComponent,\n        BusinessTableComponent,\n        // Historical report components\n        HistoricalReportComponent,\n        HistoricalEventModuleComponent,\n        SelectTypeModalComponent,\n        // List type\n        ListTypeManagerComponent,\n        ListTypePublishModalComponent,\n        ListsForTypeComponent,\n        ListTypeComponent,\n        ListComponent,\n        PublishVersionComponent,\n        // Curation\n        CurationJobComponent,\n        CurationProblemModalComponent,\n        // Classification\n        ClassificationTypeManagerComponent,\n        ClassificationTypePublishModalComponent,\n        ClassificationTypeComponent,\n        ClassificationPublishModalComponent,\n        ClassificationFieldComponent,\n        ClassificationFieldModalComponent\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        RelationshipVisualizationService,\n        LocalizationManagerService,\n        ChangeRequestService,\n        IOService,\n        RegistryService,\n        RegistryCacheService,\n        TaskService,\n        DatePipe,\n        ToEpochDateTimePipe,\n        StepIndicatorComponent,\n        SynchronizationConfigService,\n        TransitionEventService,\n        BusinessTypeService,\n        BusinessObjectService,\n        ListTypeService,\n        ClassificationTypeService,\n        ClassificationService,\n        GeometryService\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        StepIndicatorComponent,\n        SynchronizationConfigModalComponent,\n        CreateBusinessTypeModalComponent,\n        ManageBusinessTypeModalComponent,\n        TransitionEventModalComponent,\n        ListTypePublishModalComponent,\n        PublishVersionComponent,\n        SelectTypeModalComponent,\n        CurationProblemModalComponent,\n        ClassificationTypePublishModalComponent,\n        ClassificationPublishModalComponent,\n        ClassificationFieldModalComponent,\n        RecordPopupComponent\n    ]\n})\nexport class RegistryModule { }\n"],"sourceRoot":""}