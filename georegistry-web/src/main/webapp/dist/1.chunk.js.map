{"version":3,"sources":["webpack:///./src/app/registry/service/geometry.service.ts","webpack:///./src/app/registry/registry.module.ts","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/transition-event.service.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-editor.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/location-manager/layer-panel.component.ts","webpack:///./src/app/registry/component/location-manager/layer-panel.component.html","webpack:///./src/app/registry/component/location-manager/feature-panel.component.ts","webpack:///./src/app/registry/component/location-manager/feature-panel.component.html","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.html","webpack:///./src/app/registry/component/master-list/export-system-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-system-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-change-over-time-attribute-editor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.ts","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.html","webpack:///./src/app/registry/component/location-manager/dataset-location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/dataset-location-manager.component.html","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.ts","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.html","webpack:///./src/app/registry/component/historical-report/historical-report.component.ts","webpack:///./src/app/registry/component/historical-report/historical-report.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/HierarchyCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/StandardAttributeCRModel.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-model.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.ts","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.ts","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["layers","editingControl","simpleEditControl","geometryChange","EventEmitter","ngOnInit","window","onbeforeunload","destroy","initialize","map","geometryType","readOnly","this","addLayers","on","saveEdits","destroyMap","removeControl","remove","removeLayers","forEach","layer","isEditing","isRendering","editingLayer","startEditing","stopEditing","enableEditing","addEditingLayers","rerender","deleteAll","setPointCoordinates","lat","long","set","type","features","id","oid","properties","geometry","coordinates","changeMode","featureIds","isValid","getAll","length","geoJson","getDrawGeometry","editPropagator","value","reload","setEditing","setRendering","addLayer","newLayer","existingIndex","findIndex","findLayer","splice","push","sort","a","b","zindex","getLayers","getRenderedLayers","filter","setLayers","controls","point","line_string","polygon","trash","combine_features","uncombine_features","userProperties","styles","paint","getSource","addControl","add","removeSource","prefix","sourceName","getLayer","removeLayer","len","i","renderGeometryAsLayer","geojson","color","finalSourceName","addSource","data","source","layout","setData","featureCollection","polygons","feature","j","points","lines","createEmptyGeometryValue","zoomToLayersExtent","coords","LngLatBounds","coord","extend","center","getCenter","pt","LngLat","lng","flyTo","zoom","essential","polys","subpoly","fitBounds","padding","subline","GeometryService","Injectable","Output","RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","TransitionEventService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","DndModule","AccordionModule","forRoot","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","ImportTypesModalComponent","ExportSystemModalComponent","FhirExportSynchronizationConfigComponent","FhirImportSynchronizationConfigComponent","Dhis2SynchronizationConfigComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","StabilityPeriodComponent","ManageVersionsComponent","StandardAttributeEditorComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","TreeGeoSelector","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","LocationManagerComponent","DatasetLocationManagerComponent","ContextLayerModalComponent","LayerPanelComponent","FeaturePanelComponent","GeometryPanelComponent","TransitionEventTableComponent","TransitionEventModalComponent","HistoricalReportComponent","HistoricalEventModuleComponent","NgModule","imports","declarations","providers","entryComponents","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","services","SummaryKey","Document","Geometry","ValueOverTimeDiff","AbstractAction","actionType","ActionTypes","CREATEGEOOBJECTACTION","CreateGeoObjectAction","attributeName","UPDATEATTRIBUTETACTION","attributeDiff","valuesOverTime","UpdateAttributeOverTimeAction","UpdateAttributeAction","ChangeRequestCurrentObject","UpdateChangeRequestCurrentObject","isNew","getActionsForAttribute","cr","hierarchyCode","actions","newActions","action","updateAttrAction","ChangeRequest","GovernanceStatus","PageEvent","http","eventService","implementDecisions","request","headers","HttpHeaders","start","post","acp","JSON","stringify","pipe","finalize","complete","toPromise","update","setActionStatus","actionOid","status","getAllRequests","pageSize","pageNumber","params","HttpParams","toString","get","rejectChangeRequest","delete","requestId","deleteFile","crOid","fileId","vfOid","getPage","attrConditions","getDetails","apply","event","eventId","getHistoricalReport","typeCode","startDate","endDate","ImportSheet","Location","Term","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","changeRequestEditor","lService","geomService","authService","dateService","registryService","postGeoObject","showAllInstances","tabIndex","attributeExcludes","isGeometryInlined","modifiedTermOption","currentTermOption","filterDate","forDate","datasetId","geoObjectAttributeExcludes","showStabilityPeriods","geometryAttributeType","getAttribute","AttributeType","LocalizedValue","parentAttributeType","changeRequest","createNewChangeRequest","ChangeRequestEditor","geoObjectType","hierarchies","shouldForceSetExist","changePage","got","current","orgCode","organizationCode","isSRA","isOrganizationRA","isGeoObjectTypeOrSuperRM","isGeoObjectTypeOrSuperRC","setFilterDate","date","refresh","manageVersions","manageVersion","getChangeRequestEditor","approvalStatus","createAction","geoObjectJson","parentJson","attributes","values","undefined","name","nextPage","hasChanges","hasErrors","attributeEditors","getEditors","filteredEditors","editor","indexOf","attribute","hierarchy","getEditorForAttribute","invalid","existsAttribute","GeoObjectType","existsEditor","prototype","hasOwnProperty","call","allValid","att","validate","getActions","trigger","transition","style","opacity","animate","state","left","Component","selector","templateUrl","styleUrls","animations","Input","attributeForm","ViewChild","ViewChildren","key","disabled","inlinelayout","valueChange","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","next","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","message","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","unique","onAnimationDone","label","localeValues","precision","scale","service","iService","bsModalRef","currentDate","Date","readonly","edit","originalPublishStartDate","onMasterListChange","master","listGeoObjectTypes","then","types","myOrgTypes","superTypeCode","isGeoObjectTypeRM","catch","err","error","displayLabel","create","representativityDate","publishingStartDate","publishDate","descriptionLocal","processLocal","progressLocal","accessConstraintsLocal","useConstraintsLocal","acknowledgementsLocal","disclaimerLocal","contactName","organization","telephoneNumber","email","subtypeHierarchies","leaf","frequency","isMaster","visibility","ngAfterContentInit","init","org","getIsDisabled","elClasses","target","classList","onChange","getHierarchiesForType","getHierarchiesForSubtypes","onSubmit","createMasterList","response","hide","obj","onCancel","unsubscribe","formatDate","formatDateForDisplay","ErrorHandler","getMessageFromError","TREE_SCALE_FACTOR_X","TREE_SCALE_FACTOR_Y","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","modalService","contextMenuService","localizeService","userOrganization","currentHierarchy","instance","geoObjectTypes","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","nativeElement","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","subscribe","localize","decode","renderTree","rootGeoObjectTypes","d3","select","canDrag","overflowDiv","scrollLeft","scrollRight","svg","append","attr","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","calculateCanDrag","getBBox","x","y","width","height","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","calculateRelatedHierarchies","relatedHiers","hierarchyType","descendants","find","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","addChild","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","isPointWithin","dropZoneBbox","activeDropZones","parent","gotRectW","gotRectH","clearGhostNodes","isDragGroup","classed","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","parseInt","dropElY","childW","childH","dzg","dropTargetHasChildren","children","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","text","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","insertBetweenTypes","ghostNode","drag","rect","getBoundingClientRect","top","selThis","document","elementFromPoint","selectAll","each","sidebarDragHandler","registerSvgHandlers","startPoint","svgGot","getPos","setPos","split","svgDragHandler","findHierarchyByCode","ht","findOrganizationByCode","organizations","parentGeoObjectTypeCode","childGeoObjectTypeCode","addChildToHierarchy","index","relatedHierarchies","refreshPrimaryHierarchy","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","isRA","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","setLocales","locales","setGeoObjectTypes","pos","getGeoObjectTypePosition","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","localizedValue","toLowerCase","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","h","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","geoObjectTypeCode","gOT","show","childType","nodeMenuComponent","leafMenuComponent","item","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","animated","backdrop","ignoreBackdropClick","content","onHierarchytTypeCreate","nameA","toUpperCase","nameB","deleteHierarchyType","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","description","progress","acknowledgement","disclaimer","useConstraints","accessConstraints","contact","phoneNumber","isPrimaryHierarchy","createGeoObjectType","groupSuperType","onGeoObjTypeCreate","deleteGeoObjectType","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","onGeoObjectTypeSubmitted","position","removeFromHierarchy","parentGotCode","gotCode","isActive","filtered","setTimeout","handleInheritHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","setInheritedHierarchy","handleUninheritHierarchy","removeInheritedHierarchy","importTypes","onNodeChange","showErrorAsDialog","static","geoObject","localizationService","onChangeSubject","generateAttributeEditors","editors","attrs","slice","isChangeOverTime","ChangeRequestChangeOverTimeAttributeEditor","StandardAttributeCRModel","attributeEditor","_isValid","skipExists","findExistingValueOverTimeByOid","attributeCode","vot","existsAtDate","existEditors","valLen","isDelete","between","getHierarchyTypes","getHierarchyGroupedTypes","createHierarchyType","htJSON","updateHierarchyType","importSpreadsheet","configuration","json","cancelImport","importShapefile","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","includeTypes","getGeoObjectSuggestions","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","parentTermCode","termJSON","removeTerm","termCode","getNewLocaleInfo","installLocale","language","country","variant","mapboxgl","accessToken","roots","search","getGeoObjectTypes","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","doesGeoObjectExistAtRange","newGeoObjectInstance","gtJSON","updateGeoObjectType","addAttributeType","geoObjTypeId","attributeType","updateAttributeType","deleteAttributeType","addAttributeTermTypeOption","term","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","getGeoObject","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","getExportDetails","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","versionType","getAllMasterListVersions","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","newGeoObjectOverTime","setAttributeVersions","collection","list","createMasterListVersion","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","masterListId","notes","applyGeoObjectCreate","parentTreeNode","prop","val","getTime","valueAttribute","publishShapefile","getMasterListsByOrg","getPublishMasterListJobs","getDatasetBounds","getOrganizations","exportToFhir","systemId","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","unlock","run","getJobs","getFhirExportImplementations","getFhirImportImplementations","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","bbox","fontSize","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","configurationChange","stateChange","onNext","emit","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","exclusion","termProblems","changeRequestService","geoObjectId","reason","dateStr","loading","dataSource","Observable","observer","results","isGeoObjectTypeRC","handleDateChange","parse","onValidChange","newValid","geometryEditor","getIsValid","changeTypeaheadLoading","typeaheadOnSelect","cancel","_stepConfig","steps","layerChange","baseLayerChange","baselayerIconHover","lists","baseLayers","sprite","url","selected","contextLayerGroups","updateContextGroups","changes","currentValue","previousValue","contextGroup","contextLayers","versions","version","thisContextLayer","active","enabled","groupHasEnabledContextLayers","group","hasEnabled","cLayerGroup","cLayer","hasEnabledContextLayers","toggleContextLayer","removeContextLayer","addContextLayerModal","toggleBaseLayer","bl","geometryService","MODE","VERSIONS","ATTRIBUTES","HIERARCHY","GEOMETRY","_code","featureChange","modeChange","panelCancel","panelSubmit","mode","isEdit","updateCode","isMaintainer","setValid","valid","preGeoObject","GeoObjectOverTime","retJson","setEditMode","onCancelInternal","canSubmit","trim","applyInfo","isChangeRequest","onManageAttributeVersion","onManageHiearchyVersion","onEditAttributes","getElementById","scroll","behavior","queueLimit","removeAfterUpload","uploader","FileUploader","onBuildItemForm","fileItem","form","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","onErrorItem","onSelect","onClick","queue","uploadAll","externalSystemService","systems","system","onSystemSet","getExternalSystems","resultSet","sys","confirm","auth","orgs","organizationLabel","getOrganizationLabelFromCode","console","log","isLeaf","isGeometryEditable","parents","isPrivate","toggleIsLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","geoObjectTypeManagementService","GeoObjectTypeModalStates","termOption","modalStateSubscription","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","fetchOrganizationLabel","defineAttributeModal","defineAttribute","manageAttributes","editAttribute","removeAttributeType","in","newAttribute","setAttribute","attributeInputComponent","AttributeTermType","AttributeDecimalType","isFormValid","isAttrValid","validator","c","geoObjectAttributeCode","provide","NG_VALIDATORS","useExisting","multi","Directive","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","replace","addTermOption","rootTerm","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","t","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","getCode","treeNode","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","hierarchyLabelW","hierarchyLabelH","headerFontSize","hierarchyLabelY","lineWidth","textWidth","html","d","headerGBbox","getRelatedHierarchies","nodeMouseover","element","nodeMousemove","nodeTooltipBbox","documentElement","scrollHeight","scrollWidth","nodeMouseleave","descends","insert","gtree","links","join","gHeader","gotHeaderW","MOUSE_HOVER_EVENT_ENTER","MOUSE_HOVER_EVENT_MOVE","MOUSE_HOVER_EVENT_EXIT","gotHeaderFontSize","substring","arrowRectD","gArrow","gotBodyFontSize","gotOptionsButtonFontSize","renderRelatedHierarchiesMenu","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","isAdmin","isContributor","isContributer","renderContent","pageTitle","sysService","changeDetectorRef","showImportConfig","importStrategies","strategy","ImportStrategy","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","copyBlank","paginatedSystems","externalSystems","views","allHierarchyViews","allTypeViews","len0","view","len2","len9","view2","findType","findHier","filteredHierarchyViews","filteredTypeViews","getUrl","format","importStrategy","externalSystem","onSelectHierarchy","onSelectType","checkDates","setImportSource","checkDateFieldValidity","startDateField","dateFields","dateFieldComponentsArray","toArray","field","inputName","setInvalid","onCreate","createDate","lastUpdateDate","write","read","onView","onEdit","pair","ret","onDelete","arr","onFormat","route","location","today","todayString","getDateString","objectKeys","page","count","requests","columns","filterCriteria","ascending","hasBaseDropZoneOver","sortable","snapshot","paramMap","toggleId","uploadRequest","doc","documents","isSorting","onSort","getGOTLabel","onUpload","onDownloadFile","fileOid","href","onDeleteFile","fileOverBase","pageChange","onExecute","object","getFirstGeoObjectInActions","uid","onReject","deletedRequestId","onUpdate","applyActionStatusProperties","decisionMaker","getUsername","requestTrackBy","toggle","replaceState","parentElement","className","includes","criteria","getActiveDetailComponent","endsWith","isRequestTooOld","firstAction","UPDATEGEOOBJECTACTION","canEdit","permissions","encapsulation","ViewEncapsulation","None","getEditAction","entries","hierarchyEntry","generateEditors","editAction","validEditors","validateEditors","hasTimeConflict","checkRanges","hasExistConflict","checkExistRanges","includeUnmodified","diff","entry","HierarchyCREditor","ValueOverTimeCREditor","valueOverTime","votDiff","createNewVersion","original","createEmptyHierarchyEntry","hierarchyOverTime","ValueOverTime","constructNewDiff","terms","getGeoObjectTypeTermAttributeOptions","ChangeType","ADD","changeRequestAttributeEditor","getGeoObjectTimeRangeStorage","getValueFromGeoObjectForDiff","conflictMessages","Set","validateDate","getDateFromDateString","end","validateUpdateReference","missingReference","getStartDate","setStartDate","newStartDate","oldStartDate","goRange","oldEndDate","getEndDate","oldValue","newEndDate","removeEmptyDiff","END_DATE","START_DATE","newValue","coordinate","Number","parseFloat","toFixed","areValuesEqual","VALUE","setLocalizedValue","diffs","val1","val2","localeValue","lv2","getValueAtLocale","locale","lv1","lv","getValue","updateAction","REMOVE","votc","requestService","elementRef","isValidChange","viewModels","isRootOfHierarchy","isInitialized","calculateViewModels","onAddNewVersion","hasLocalizationChanged","viewModel","onDateChange","summaryKey","NEW","v","VersionDiffView","termAttributeCode","onApprove","ACCEPTED","REJECTED","onPending","PENDING","getTypeAheadObservable","pType","loopI","goCode","ancestors","p","ancestor","setParentValue","toggleGeometryEditing","toggleGeometryView","mapRowHeight","getElementsByClassName","offsetHeight","getOrCreateLayer","toggleOldGeometryView","context","Layer","LayerColor","oldLayer","OLD","manualCoordinateChange","newCoordinateX","newCoordinateY","newX","newY","num","latValid","isFinite","Math","abs","longValid","isLongitude","ControlContainer","NgForm","host","viewProviders","isContributorOnly","isContributerOnly","urlSubscriber","highlightOid","isNewGeoObject","submitFunction","findVotWithStartDate","votArray","setMasterListId","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","fetchGeoObjectType","fetchLocales","configureFromImportError","importError","importErrorId","resolution","configureAsExisting","fetchGeoObject","fetchHierarchies","typeTypeCode","ptn","submit","pService","order","isPublished","isRefreshing","isWritable","showInvalid","searchPlaceholder","setList","onPageChange","refreshProgress","handleProgressChange","baseUrl","hostname","port","notifier","webSocket","_list","listAttrs","calculateListAttributes","onShowInvalidChange","getFilter","clearFilters","toggleFilter","isCollapsed","newFilter","getTypeaheadDataObservable","base","unshift","total","f","s","handleInputChange","handleListChange","isFilterable","dependency","onPublish","historyOid","onExport","encodeURIComponent","onWheel","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onExportToFhir","onDownloadShapefile","isForDateValid","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","interval","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","onResolveScheduledJob","allSelected","timeCounter","isPolling","hasRowValidationProblem","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onProblemResolvedListener","onEditGeoObject","editModal","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onToggleCompletedTasks","rService","subscription","implementations","reset","fieldChange","levels","level","onSelectMasterList","addLevel","versionId","removeLevel","DEFAULT_MAPPING_STRATEGY","cOrg","levelRows","orgUnitGroups","levelRow","levelNum","isAttributeEditor","esConfig","clearMappingData","onChangeHierarchy","buildDefaultMappings","attributeMappingStrategy","isOrgUnitGroup","cgrAttrName","dhis2Id","dhis2AttrName","lvl","mappings","orgUnitGroupId","onSelectLevelType","attrCfg","editorIndex","getEditorIndex","mapping","attrConfigInfos","info","cgrAttr","deleteMapping","addNewMapping","levelRowIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Attrs","dhis2Attr","onChangeDHIS2Attr","isDifferentGot","infos","mapCgrAttr","attributeMappingStrategies","onChangeTargetType","onSuccess","onRemove","isImport","cSystem","oIndex","sIndex","handleFieldChange","onOrganizationSelected","onChangeExternalSystem","implementation","onRun","onGenerateFile","open","stepLabel","configService","configOid","exportErrors","mapService","longitude","latitude","SEARCH","VIEW","editSessionEnabled","displayDateRequiredError","vectorLayers","preventSingleClick","hideSearchOptions","geoObjectUid","backReference","geoObj","Map","container","metadata","sources","mapbox","tileSize","glyphs","protocol","attributionControl","initMap","onModeChange","NavigationControl","visualizePitch","AttributionControl","compact","handleMapClickEvent","fc","zoomToFeature","showOriginalGeometry","addVectorLayer","hideOriginalGeometry","removeVectorLayer","onPanelCancel","onPanelSubmit","SuccessModalComponent","class","changeRequestId","handleBasemapStyle","baseLayer","setStyle","timer","bounds","maxZoom","onContextLayerChange","tiles","navigator","groupHasContextLayers","hasCLayers","toolsIconHover","editOnly","published","GenericModalComponent","buttons","shouldClose","llb","vLayer","prevLayer","onFeatureChange","setFilter","onNewGeoObject","tab","isRC","handleTab","dateCondition","beforeTypeCondition","isRM","filterTypesBasedOnMyOrg","myOrgs","getMyOrganizations","filterChange","onEventChange","deleteEvent","jsEvent","transitionEvent","DRAW_SCALE_MULTIPLIER","VIEWPORT_SCALE_FACTOR_X","VIEWPORT_SCALE_FACTOR_Y","GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR","GRAPH_GO_LABEL_COLOR","GRAPH_CIRCLE_FILL","GRAPH_LINE_COLOR","changeDetector","activeTransition","afterTypes","beforeTypes","draggable","effectAllowed","disable","handle","beforeTypeCode","afterTypeCode","eventDate","transitions","setActiveTransition","highlight","trans","sourceCode","targetCode","uuid","v4","sourceType","targetType","transitionType","impact","calculateDerivedAttributes","renderVisual","mouseEvent","transitionOid","validChange","isSource","property","addDay","result","targetText","sourceText","clear","localizeTransitionImpact","localizeTransitionType","stats","sourceStats","targetStats","updown","typeUpdown","typePart","onChangeTypeUpdown","onDragStart","onDragEnd","onDragged","onDraggableCopied","onDraggableLinked","onDraggableMoved","onDragCanceled","onDragover","newIndex","root","appData","generateAppData","renderingData","generateRenderingData","depth","linkDataMappings","multipleParentLinks","link","d3Data","dx","dy","d3RenderingData","parentNode","childNode","grandChild","isChildOfOtherNode","typeaheadParent","exportToExcel","after","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","hideRelatedHierarchy","existingSecondary","existingMenu","contextMenuGroup","hasActionsPermissions","titleLabel","actionsTitle","removeFromHierarchyLabel","noRelatedHierLabel","hideRelatedHierarchyLabel","uninheritLabel","inheritLabel","isSecondaryHierarchyRendered","numActions","removeWidth","hideRelatedWidth","uninheritWidth","existingSecondaryCode","secondaryHierarchy","relatedGotHasParents","inheritWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","onClickUninheritHierarchy","onClickInheritHierarchy","myBbox","primaryHierBbox","gSecondary","paddingLeft","secondaryGot","secondaryGotBbox","gConnector","toRoot","allGeoObjectTypes","gObj","selectedGeoObjectType","onDeleteAttribute","existRangeStale","immediateParent","invalidParent","parentDoesNotExist","exists","directParent","currentDirectParent","getLowestLevelFromHierarchyEntry","oldParents","newValueStrConcat","removeType","newParents","parentType","HierarchyOverTimeEntry","currentImmediateParent","findAction","component","populate","_value","convertValueForDisplay","calculateSummaryKey","convertDateForDisplay","convertOldValueForDisplay","Array","attrOpts","hasTime","hasValue","UPDATE","TIME_CHANGE","VALUE_CHANGE","UNMODIFIED","DELETE","summaryKeyData","newKey","localizeSummaryKey","summaryKeyLocalized","conflictMessagesHasSeverity","severity","has","msg","hasError","size","hasWarning","day","getUTCDate","getUTCFullYear","getUTCMonth","applyAction","saveDraw","startEdit","endEdit","latestPeriodIsActive","periods","activeEntry","forDateEntry","infinityDayPadding","dataTimeSpan","_showHint","showHint","generate","timeline","timelines","period","setActiveTimelineEntry","forDateIndex","navigateRelative","amount","nextIndex","sharedAttributeEditor","generatePeriods","generateTimelines","calculateDataTimeSpan","endDay","startDay","displayStartDate","displayEndDate","span","currentTimeline","daysLeft","daysInPeriod","daysInFirstEntry","timelineEntry1","timelineEntry2","timelineEntry","boundaries","startIndex","boundary","isStart","isEnd","endIndex","dlen","calculateView","newVal","onValueChange","_mapHeight","mapDiv","floor","random","zoomToBbox","mapHeight","bboxCode","bboxType","bboxDate","elRef","editEmitter","visible","save","onAdd","customEvent","onManageVersion","cHierarchies","parentMap","calculate","time","pot","getHierarchies","onManageVersions","mainForm","nodes","isExpandedField","idField","expanded","curAction","cuDetail","arDetail","spDetail","hasConflict","onCloneGeometry","hasDuplicateDate","originalGeoObjectOverTime","geoObjectOverTime","vAttributes","isVersionForHighlight","votArr","getVersionData","vAttribute","getDefaultLocaleVal","defVal","locVal","setDateAttribute","moment","localeData","longDateFormat","setInfinity","PRESENT","onCloneGeometryToNewVersion","geoObjectOverTimeInput","transform","items","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","Pipe","pure","routes","path","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"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","file":"1.chunk.js","sourcesContent":["import { Injectable, Output, EventEmitter } from \"@angular/core\";\n\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { Map, LngLat, LngLatBounds } from \"mapbox-gl\";\n\nimport { Layer } from \"../component/geoobject-shared-attribute-editor/manage-versions-model\";\n\n// eslint-disable-next-line no-unused-vars\ndeclare let acp: any;\n\n/**\n * This is a generic service used for rendering layers from ValueOverTime objects\n */\n@Injectable()\nexport class GeometryService {\n\n    map: Map;\n\n    layers: Layer[] = [];\n\n    geometryType: String;\n\n    readOnly: boolean;\n\n    // @Output() layersChange: EventEmitter<VersionOverTimeLayer[]> = new EventEmitter();\n\n    editingControl: any = null;\n\n    simpleEditControl: any = null;\n\n    editingLayer: Layer;\n\n    @Output() geometryChange = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    ngOnInit() {\n        window.onbeforeunload = () => this.destroy();\n    }\n\n    initialize(map: Map, geometryType: String, readOnly: boolean) {\n        this.map = map;\n        this.geometryType = geometryType;\n        // this.editingControl = null;\n\n        this.addLayers();\n\n        this.map.on(\"draw.create\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.delete\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.update\", () => {\n            this.saveEdits();\n        });\n    }\n\n    destroy(destroyMap: boolean = true): void {\n        if (this.editingControl != null) {\n            this.map.removeControl(this.editingControl);\n            this.editingControl = null;\n        }\n\n        if (this.map != null && destroyMap) {\n            this.map.remove();\n            this.map = null;\n        } else if (this.map != null) {\n            this.removeLayers();\n        }\n\n        if (this.layers != null) {\n            this.layers.forEach(layer => {\n                layer.isEditing = false;\n                layer.isRendering = false;\n            });\n        }\n\n        this.editingLayer = null;\n        this.layers = [];\n    }\n\n    startEditing(layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        this.editingLayer = layer;\n        this.editingLayer.isEditing = true;\n\n        if (!this.readOnly) {\n            this.enableEditing();\n        }\n\n        this.addEditingLayers();\n    }\n\n    stopEditing(rerender: boolean = true) {\n        if (this.isEditing()) {\n            this.saveEdits(rerender);\n\n            this.editingLayer.isEditing = false;\n            this.editingLayer = null;\n\n            this.editingControl.deleteAll();\n            this.map.removeControl(this.editingControl);\n\n            this.editingControl = null;\n        }\n    }\n\n    isEditing(): boolean {\n        return this.editingLayer != null;\n    }\n\n    setPointCoordinates(lat: any, long: any) {\n        if (this.editingLayer != null) {\n            this.editingControl.set({\n                type: \"FeatureCollection\",\n                features: [{\n                    id: this.editingLayer.oid,\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: { type: \"Point\", coordinates: [long, lat] }\n                }]\n            });\n\n            this.editingControl.changeMode(\"simple_select\", { featureIds: this.editingLayer.oid });\n\n            this.saveEdits();\n\n            /*\n            this.editingLayer.value = {\n              type: 'FeatureCollection',\n              features: [{\n              id: this.editingLayer.oid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ long, lat ] }\n              }]\n            };\n            */\n\n            /*\n            this.editingLayer.value.coordinates = [ -97.4870830718814, 41.84836050415993 ];\n\n            this.editingControl.set(this.editingLayer.value);\n\n            this.removeLayers();\n            this.addLayers();\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.editingLayer.oid } );\n            */\n        }\n    }\n\n    isValid(): boolean {\n        if (!this.readOnly) {\n            let isValid: boolean = false;\n\n            if (this.editingControl != null) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if (featureCollection.features.length > 0) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    saveEdits(rerender: boolean = true): void {\n        if (this.editingLayer != null) {\n            let geoJson = this.getDrawGeometry();\n\n            this.editingLayer.editPropagator.value = geoJson;\n\n            if (rerender) {\n                this.removeLayers();\n                this.addLayers();\n            }\n        }\n    }\n\n    public reload(): void {\n        if (this.map != null) {\n            this.removeLayers();\n            this.addLayers();\n\n            if (this.editingControl != null) {\n                this.editingControl.deleteAll();\n            }\n\n            this.addEditingLayers();\n        }\n    }\n\n    setEditing(isEditing: boolean, layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        layer.isEditing = isEditing;\n\n        if (isEditing) {\n            this.startEditing(layer);\n        }\n    }\n\n    setRendering(isRendering: boolean, layer: Layer) {\n        layer.isRendering = isRendering;\n        this.addLayer(layer);\n    }\n\n    addLayer(newLayer: Layer) {\n        let existingIndex = this.layers.findIndex((findLayer: Layer) => { return findLayer.oid === newLayer.oid; });\n\n        if (existingIndex !== -1) {\n            this.layers.splice(existingIndex, 1);\n            this.layers.push(newLayer);\n        } else {\n            this.layers.push(newLayer);\n        }\n\n        if (newLayer.isEditing) {\n            this.startEditing(newLayer);\n        }\n\n        this.layers = this.layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.removeLayers();\n        this.addLayers();\n    }\n\n    getLayers(): Layer[] {\n        return this.layers;\n    }\n\n    getRenderedLayers(): Layer[] {\n        return this.layers.filter(layer => layer.isRendering);\n    }\n\n    setLayers(layers: Layer[]): void {\n        this.removeLayers();\n\n        this.layers = layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.addLayers();\n    }\n\n    enableEditing(): void {\n        if (this.editingControl == null) {\n            if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: false,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n                this.editingControl = new MapboxDraw({\n                    userProperties: true,\n                    controls: {\n                        point: true,\n                        line_string: false,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    },\n                    styles: [\n                        {\n                            id: \"highlight-active-points\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"true\"]],\n                            paint: {\n                                \"circle-radius\": 13,\n                                \"circle-color\": \"#33FFF9\",\n                                \"circle-stroke-width\": 4,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        },\n                        {\n                            id: \"points-are-blue\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"false\"]],\n                            paint: {\n                                \"circle-radius\": 10,\n                                \"circle-color\": \"#800000\",\n                                \"circle-stroke-width\": 2,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        }\n                    ]\n                });\n            } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: true,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            }\n\n            if (this.map.getSource(\"mapbox-gl-draw-cold\") == null) {\n                this.map.addControl(this.editingControl);\n            }\n        }\n    }\n\n    addEditingLayers(): void {\n        if (this.editingLayer != null && this.editingControl != null) {\n            let val = this.editingLayer.editPropagator.value;\n\n            if (val) {\n                this.editingControl.add(this.editingLayer.editPropagator.value);\n            }\n        }\n    }\n\n    removeSource(prefix: string): void {\n        if (!this.map) {\n            return;\n        }\n\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            if (this.map.getLayer(sourceName + \"-polygon\") != null) {\n                this.map.removeLayer(sourceName + \"-polygon\");\n            }\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            if (this.map.getLayer(sourceName + \"-point\") != null) {\n                this.map.removeLayer(sourceName + \"-point\");\n            }\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\") {\n            if (this.map.getLayer(sourceName + \"-line\") != null) {\n                this.map.removeLayer(sourceName + \"-line\");\n            }\n        }\n\n        if (this.map.getSource(sourceName) != null) {\n            this.map.removeSource(sourceName);\n        }\n    }\n\n    removeLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n                this.removeSource(layer.oid);\n            }\n        }\n    }\n\n    addLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n\n                if (layer.isRendering) {\n                    this.renderGeometryAsLayer(layer.editPropagator == null ? layer.geojson : layer.editPropagator.value, layer.oid, layer.color);\n                }\n            }\n        }\n    }\n\n    renderGeometryAsLayer(geometry: any, sourceName: string, color: string) {\n        let finalSourceName: string = sourceName + \"-geoobject\";\n\n        if (!this.map) {\n            return;\n        }\n        if (!geometry) {\n            return;\n        }\n\n        this.map.addSource(finalSourceName, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            // Polygon Layer\n            this.map.addLayer({\n                id: finalSourceName + \"-polygon\",\n                type: \"fill\",\n                source: finalSourceName,\n                paint: {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7\n                }\n            });\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            // Point layer\n            this.map.addLayer({\n                id: finalSourceName + \"-point\",\n                type: \"circle\",\n                source: finalSourceName,\n                paint: {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                }\n            });\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n            this.map.addLayer({\n                id: finalSourceName + \"-line\",\n                source: finalSourceName,\n                type: \"line\",\n                layout: {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                paint: {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            });\n        }\n\n        (<any> this.map.getSource(finalSourceName)).setData(geometry);\n    }\n\n    getDrawGeometry(): any {\n        if (this.editingControl != null) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if (featureCollection.features.length > 0) {\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if (this.geometryType === \"MULTIPOLYGON\") {\n                    let polygons = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPolygon\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                polygons.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            polygons.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: \"MultiPolygon\"\n                    };\n                } else if (this.geometryType === \"MULTIPOINT\") {\n                    let points = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPoint\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                points.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            points.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: \"MultiPoint\"\n                    };\n                } else if (this.geometryType === \"MULTILINE\") {\n                    let lines = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiLineString\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                lines.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            lines.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: \"MultiLineString\"\n                    };\n                } else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static createEmptyGeometryValue(geometryType: String): any {\n        let value = { type: geometryType, coordinates: [] };\n\n        if (geometryType === \"MULTIPOLYGON\") {\n            value.type = \"MultiPolygon\";\n        } else if (geometryType === \"POLYGON\") {\n            value.type = \"Polygon\";\n        } else if (geometryType === \"POINT\") {\n            value.type = \"Point\";\n        } else if (geometryType === \"MULTIPOINT\") {\n            value.type = \"MultiPoint\";\n        } else if (geometryType === \"LINE\") {\n            value.type = \"Line\";\n        } else if (geometryType === \"MULTILINE\") {\n            value.type = \"MultiLine\";\n        }\n\n        return value;\n    }\n\n    zoomToLayersExtent(): void {\n        this.layers.forEach(layer => {\n            if (layer.geojson != null) {\n                if (this.geometryType === \"MULTIPOINT\" || this.geometryType === \"POINT\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(coord => {\n                            bounds.extend(coord);\n                        });\n\n                        let center = bounds.getCenter();\n                        let pt = new LngLat(center.lng, center.lat);\n\n                        this.map.flyTo({\n                            center: pt,\n                            zoom: 9,\n                            essential: true\n                        });\n                    }\n                } else if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(polys => {\n                            polys.forEach(subpoly => {\n                                subpoly.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(lines => {\n                            lines.forEach(subline => {\n                                subline.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule, DatePipe } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\nimport { ImportTypesModalComponent } from './component/hierarchy/modals/import-types-modal.component';\nimport { ExportSystemModalComponent } from './component/master-list/export-system-modal.component';\nimport { LocalizedInputComponent } from \"./component/form-fields/localized-input/localized-input.component\";\nimport { LocalizedTextComponent } from \"./component/form-fields/localized-text/localized-text.component\";\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { CreateHierarchyTypeModalComponent } from \"./component/hierarchy/modals/create-hierarchy-type-modal.component\";\nimport { AddChildToHierarchyModalComponent } from \"./component/hierarchy/modals/add-child-to-hierarchy-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./component/hierarchy/modals/create-geoobjtype-modal.component\";\nimport { ManageAttributesModalComponent } from \"./component/hierarchy/geoobjecttype-management/manage-attributes-modal.component\";\nimport { DefineAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component\";\nimport { EditAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component\";\nimport { ShapefileModalComponent } from \"./component/importer/modals/shapefile-modal.component\";\nimport { AttributesPageComponent } from \"./component/importer/modals/attributes-page.component\";\nimport { LocationPageComponent } from \"./component/importer/modals/location-page.component\";\nimport { LocationProblemPageComponent } from \"./component/importer/modals/location-problem-page.component\";\nimport { LocationProblemComponent } from \"./component/importer/modals/location-problem.component\";\nimport { TermProblemPageComponent } from \"./component/importer/modals/term-problem-page.component\";\nimport { TermProblemComponent } from \"./component/importer/modals/term-problem.component\";\nimport { SpreadsheetModalComponent } from \"./component/importer/modals/spreadsheet-modal.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { TermOptionWidgetComponent } from \"./component/hierarchy/geoobjecttype-management/term-option-widget.component\";\nimport { AttributeInputComponent } from \"./component/hierarchy/geoobjecttype-management/attribute-input.component\";\nimport { EditTermOptionInputComponent } from \"./component/hierarchy/geoobjecttype-management/edit-term-option-input.component\";\nimport { ManageTermOptionsComponent } from \"./component/hierarchy/geoobjecttype-management/manage-term-options.component\";\nimport { GeoObjectTypeInputComponent } from \"./component/hierarchy/geoobjecttype-management/geoobjecttype-input.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./component/hierarchy/modals/manage-geoobjecttype-modal.component\";\nimport { MasterListManagerComponent } from \"./component/master-list/master-list-manager.component\";\nimport { PublishModalComponent } from \"./component/master-list/publish-modal.component\";\nimport { ExportFormatModalComponent } from \"./component/master-list/export-format-modal.component\";\nimport { RequestTableComponent } from \"./component/crtable/request-table.component\";\nimport { CreateUpdateGeoObjectDetailComponent } from \"./component/crtable/action-detail/create-update-geo-object/detail.component\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component\";\nimport { StabilityPeriodComponent } from \"./component/geoobject-shared-attribute-editor/stability-period.component\";\nimport { ManageVersionsComponent } from \"./component/geoobject-shared-attribute-editor/manage-versions.component\";\nimport { StandardAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/standard-attribute-editor.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { GeoObjectEditorComponent } from \"./component/geoobject-editor/geoobject-editor.component\";\nimport { GeoObjectEditorMapComponent } from \"./component/geoobject-editor-map/geoobject-editor-map.component\";\nimport { SimpleEditControl } from \"./component/geoobject-editor-map/simple-edit-control/simple-edit-control.component\";\nimport { CascadingGeoSelector } from \"./component/cascading-geo-selector/cascading-geo-selector\";\nimport { TreeGeoSelector } from \"./component/tree-geo-selector/tree-geo-selector\";\nimport { ActionDetailModalComponent } from \"./component/crtable/action-detail/action-detail-modal.component\";\nimport { DataImporterComponent } from \"./component/importer/dataimporter.component\";\nimport { DataExportComponent } from \"./component/data-export/data-export.component\";\nimport { MasterListComponent } from \"./component/master-list/master-list.component\";\nimport { PublishedMasterListHistoryComponent } from \"./component/master-list/published-master-list-history.component\";\nimport { MasterListHistoryComponent } from \"./component/master-list/master-list-history.component\";\nimport { MasterListViewComponent } from \"./component/master-list/master-list-view.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { JobConflictModalComponent } from \"./component/scheduled-jobs/conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./component/scheduled-jobs/conflict-widgets/reupload-modal.component\";\nimport { ParentReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component\";\nimport { TermReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component\";\nimport { RowValidationProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component\";\nimport { StepIndicatorComponent } from \"./component/scheduled-jobs/step-indicator.component\";\nimport { ImportProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/import-problem-widget.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { FhirExportSynchronizationConfigComponent } from './component/synchronization-config/fhir-export-synchronization-config.component';\nimport { Dhis2SynchronizationConfigComponent } from './component/synchronization-config/dhis2-synchronization-config.component';\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigModalComponent } from \"./component/synchronization-config/synchronization-config-modal.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\n\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { DatasetLocationManagerComponent } from \"./component/location-manager/dataset-location-manager.component\";\nimport { ContextLayerModalComponent } from \"./component/location-manager/context-layer-modal.component\";\nimport { LayerPanelComponent } from \"./component/location-manager/layer-panel.component\";\nimport { FeaturePanelComponent } from \"./component/location-manager/feature-panel.component\";\nimport { GeometryPanelComponent } from \"./component/location-manager/geometry-panel.component\";\n\nimport { GeoObjectAttributeCodeValidator } from \"./factory/form-validation.factory\";\n\nimport { GeoObjectTypePipe } from \"./pipe/geoobjecttype.pipe\";\nimport { GeoObjectAttributeExcludesPipe } from \"./pipe/geoobject-attribute-excludes.pipe\";\nimport { ToEpochDateTimePipe } from \"./pipe/to-epoch-date-time.pipe\";\nimport { RegistryService } from \"./service/registry.service\";\nimport { TaskService } from \"./service/task.service\";\nimport { HierarchyService } from \"./service/hierarchy.service\";\nimport { SynchronizationConfigService } from \"./service/synchronization-config.service\";\nimport { LocalizationManagerService } from \"./service/localization-manager.service\";\nimport { ChangeRequestService } from \"./service/change-request.service\";\nimport { IOService } from \"./service/io.service\";\nimport { MapService } from \"./service/map.service\";\nimport { GeoObjectTypeManagementService } from \"./service/geoobjecttype-management.service\";\n\nimport { RegistryRoutingModule } from \"./registry-routing.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { AccordionModule } from \"ngx-bootstrap/accordion\";\n\nimport \"../rxjs-extensions\";\nimport { FhirImportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-import-synchronization-config.component\";\nimport { TransitionEventService } from \"./service/transition-event.service\";\nimport { TransitionEventTableComponent } from \"./component/transition-event/transition-event-table.component\";\nimport { TransitionEventModalComponent } from \"./component/transition-event/transition-event-modal.component\";\nimport { HistoricalReportComponent } from \"./component/historical-report/historical-report.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\n\nimport { DndModule } from \"ngx-drag-drop\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        TabsModule,\n        CollapseModule,\n        NgxPaginationModule,\n        SharedModule,\n        RegistryRoutingModule,\n        DndModule,\n        AccordionModule.forRoot()\n    ],\n    declarations: [\n        HierarchyComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        ImportTypesModalComponent,\n        ExportSystemModalComponent,\n        FhirExportSynchronizationConfigComponent,\n        FhirImportSynchronizationConfigComponent,\n        Dhis2SynchronizationConfigComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        StabilityPeriodComponent,\n        ManageVersionsComponent,\n        StandardAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        TreeGeoSelector,\n        ActionDetailModalComponent,\n        HierarchyComponent,\n        DataImporterComponent,\n        DataExportComponent,\n        // Master List screens\n        MasterListManagerComponent,\n        MasterListComponent,\n        MasterListHistoryComponent,\n        PublishedMasterListHistoryComponent,\n        PublishModalComponent,\n        MasterListViewComponent,\n        // Scheduled jobs\n        ExportFormatModalComponent,\n        ScheduledJobsComponent,\n        JobComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        ParentReferenceProblemWidgetComponent,\n        TermReferenceProblemWidgetComponent,\n        RowValidationProblemWidgetComponent,\n        StepIndicatorComponent,\n        ImportProblemWidgetComponent,\n        TaskViewerComponent,\n        // Synchronization Config\n        SynchronizationConfigManagerComponent,\n        SynchronizationConfigModalComponent,\n        SynchronizationConfigComponent,\n        SyncDetailsComponent,\n        // Location manager\n        LocationManagerComponent,\n        DatasetLocationManagerComponent,\n        ContextLayerModalComponent,\n        LayerPanelComponent,\n        FeaturePanelComponent,\n        GeometryPanelComponent,\n        TransitionEventTableComponent,\n        TransitionEventModalComponent,\n        HistoricalReportComponent,\n        HistoricalEventModuleComponent\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        LocalizationManagerService,\n        ChangeRequestService,\n        IOService,\n        GeoObjectTypeManagementService,\n        RegistryService,\n        TaskService,\n        DatePipe,\n        ToEpochDateTimePipe,\n        StepIndicatorComponent,\n        SynchronizationConfigService,\n        TransitionEventService\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        PublishModalComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        StepIndicatorComponent,\n        SynchronizationConfigModalComponent,\n        ContextLayerModalComponent,\n        ExportSystemModalComponent,\n        TransitionEventModalComponent\n    ]\n})\nexport class RegistryModule { }\n","var map = {\n\t\"./af\": 381,\n\t\"./af.js\": 381,\n\t\"./ar\": 382,\n\t\"./ar-dz\": 383,\n\t\"./ar-dz.js\": 383,\n\t\"./ar-kw\": 384,\n\t\"./ar-kw.js\": 384,\n\t\"./ar-ly\": 385,\n\t\"./ar-ly.js\": 385,\n\t\"./ar-ma\": 386,\n\t\"./ar-ma.js\": 386,\n\t\"./ar-sa\": 387,\n\t\"./ar-sa.js\": 387,\n\t\"./ar-tn\": 388,\n\t\"./ar-tn.js\": 388,\n\t\"./ar.js\": 382,\n\t\"./az\": 389,\n\t\"./az.js\": 389,\n\t\"./be\": 390,\n\t\"./be.js\": 390,\n\t\"./bg\": 391,\n\t\"./bg.js\": 391,\n\t\"./bm\": 392,\n\t\"./bm.js\": 392,\n\t\"./bn\": 393,\n\t\"./bn-bd\": 394,\n\t\"./bn-bd.js\": 394,\n\t\"./bn.js\": 393,\n\t\"./bo\": 395,\n\t\"./bo.js\": 395,\n\t\"./br\": 396,\n\t\"./br.js\": 396,\n\t\"./bs\": 397,\n\t\"./bs.js\": 397,\n\t\"./ca\": 398,\n\t\"./ca.js\": 398,\n\t\"./cs\": 399,\n\t\"./cs.js\": 399,\n\t\"./cv\": 400,\n\t\"./cv.js\": 400,\n\t\"./cy\": 401,\n\t\"./cy.js\": 401,\n\t\"./da\": 402,\n\t\"./da.js\": 402,\n\t\"./de\": 403,\n\t\"./de-at\": 404,\n\t\"./de-at.js\": 404,\n\t\"./de-ch\": 405,\n\t\"./de-ch.js\": 405,\n\t\"./de.js\": 403,\n\t\"./dv\": 406,\n\t\"./dv.js\": 406,\n\t\"./el\": 407,\n\t\"./el.js\": 407,\n\t\"./en-au\": 408,\n\t\"./en-au.js\": 408,\n\t\"./en-ca\": 409,\n\t\"./en-ca.js\": 409,\n\t\"./en-gb\": 410,\n\t\"./en-gb.js\": 410,\n\t\"./en-ie\": 411,\n\t\"./en-ie.js\": 411,\n\t\"./en-il\": 412,\n\t\"./en-il.js\": 412,\n\t\"./en-in\": 413,\n\t\"./en-in.js\": 413,\n\t\"./en-nz\": 414,\n\t\"./en-nz.js\": 414,\n\t\"./en-sg\": 415,\n\t\"./en-sg.js\": 415,\n\t\"./eo\": 416,\n\t\"./eo.js\": 416,\n\t\"./es\": 417,\n\t\"./es-do\": 418,\n\t\"./es-do.js\": 418,\n\t\"./es-mx\": 419,\n\t\"./es-mx.js\": 419,\n\t\"./es-us\": 420,\n\t\"./es-us.js\": 420,\n\t\"./es.js\": 417,\n\t\"./et\": 421,\n\t\"./et.js\": 421,\n\t\"./eu\": 422,\n\t\"./eu.js\": 422,\n\t\"./fa\": 423,\n\t\"./fa.js\": 423,\n\t\"./fi\": 424,\n\t\"./fi.js\": 424,\n\t\"./fil\": 425,\n\t\"./fil.js\": 425,\n\t\"./fo\": 426,\n\t\"./fo.js\": 426,\n\t\"./fr\": 427,\n\t\"./fr-ca\": 428,\n\t\"./fr-ca.js\": 428,\n\t\"./fr-ch\": 429,\n\t\"./fr-ch.js\": 429,\n\t\"./fr.js\": 427,\n\t\"./fy\": 430,\n\t\"./fy.js\": 430,\n\t\"./ga\": 431,\n\t\"./ga.js\": 431,\n\t\"./gd\": 432,\n\t\"./gd.js\": 432,\n\t\"./gl\": 433,\n\t\"./gl.js\": 433,\n\t\"./gom-deva\": 434,\n\t\"./gom-deva.js\": 434,\n\t\"./gom-latn\": 435,\n\t\"./gom-latn.js\": 435,\n\t\"./gu\": 436,\n\t\"./gu.js\": 436,\n\t\"./he\": 437,\n\t\"./he.js\": 437,\n\t\"./hi\": 438,\n\t\"./hi.js\": 438,\n\t\"./hr\": 439,\n\t\"./hr.js\": 439,\n\t\"./hu\": 440,\n\t\"./hu.js\": 440,\n\t\"./hy-am\": 441,\n\t\"./hy-am.js\": 441,\n\t\"./id\": 442,\n\t\"./id.js\": 442,\n\t\"./is\": 443,\n\t\"./is.js\": 443,\n\t\"./it\": 444,\n\t\"./it-ch\": 445,\n\t\"./it-ch.js\": 445,\n\t\"./it.js\": 444,\n\t\"./ja\": 446,\n\t\"./ja.js\": 446,\n\t\"./jv\": 447,\n\t\"./jv.js\": 447,\n\t\"./ka\": 448,\n\t\"./ka.js\": 448,\n\t\"./kk\": 449,\n\t\"./kk.js\": 449,\n\t\"./km\": 450,\n\t\"./km.js\": 450,\n\t\"./kn\": 451,\n\t\"./kn.js\": 451,\n\t\"./ko\": 452,\n\t\"./ko.js\": 452,\n\t\"./ku\": 453,\n\t\"./ku.js\": 453,\n\t\"./ky\": 454,\n\t\"./ky.js\": 454,\n\t\"./lb\": 455,\n\t\"./lb.js\": 455,\n\t\"./lo\": 456,\n\t\"./lo.js\": 456,\n\t\"./lt\": 457,\n\t\"./lt.js\": 457,\n\t\"./lv\": 458,\n\t\"./lv.js\": 458,\n\t\"./me\": 459,\n\t\"./me.js\": 459,\n\t\"./mi\": 460,\n\t\"./mi.js\": 460,\n\t\"./mk\": 461,\n\t\"./mk.js\": 461,\n\t\"./ml\": 462,\n\t\"./ml.js\": 462,\n\t\"./mn\": 463,\n\t\"./mn.js\": 463,\n\t\"./mr\": 464,\n\t\"./mr.js\": 464,\n\t\"./ms\": 465,\n\t\"./ms-my\": 466,\n\t\"./ms-my.js\": 466,\n\t\"./ms.js\": 465,\n\t\"./mt\": 467,\n\t\"./mt.js\": 467,\n\t\"./my\": 468,\n\t\"./my.js\": 468,\n\t\"./nb\": 469,\n\t\"./nb.js\": 469,\n\t\"./ne\": 470,\n\t\"./ne.js\": 470,\n\t\"./nl\": 471,\n\t\"./nl-be\": 472,\n\t\"./nl-be.js\": 472,\n\t\"./nl.js\": 471,\n\t\"./nn\": 473,\n\t\"./nn.js\": 473,\n\t\"./oc-lnc\": 474,\n\t\"./oc-lnc.js\": 474,\n\t\"./pa-in\": 475,\n\t\"./pa-in.js\": 475,\n\t\"./pl\": 476,\n\t\"./pl.js\": 476,\n\t\"./pt\": 477,\n\t\"./pt-br\": 478,\n\t\"./pt-br.js\": 478,\n\t\"./pt.js\": 477,\n\t\"./ro\": 479,\n\t\"./ro.js\": 479,\n\t\"./ru\": 480,\n\t\"./ru.js\": 480,\n\t\"./sd\": 481,\n\t\"./sd.js\": 481,\n\t\"./se\": 482,\n\t\"./se.js\": 482,\n\t\"./si\": 483,\n\t\"./si.js\": 483,\n\t\"./sk\": 484,\n\t\"./sk.js\": 484,\n\t\"./sl\": 485,\n\t\"./sl.js\": 485,\n\t\"./sq\": 486,\n\t\"./sq.js\": 486,\n\t\"./sr\": 487,\n\t\"./sr-cyrl\": 488,\n\t\"./sr-cyrl.js\": 488,\n\t\"./sr.js\": 487,\n\t\"./ss\": 489,\n\t\"./ss.js\": 489,\n\t\"./sv\": 490,\n\t\"./sv.js\": 490,\n\t\"./sw\": 491,\n\t\"./sw.js\": 491,\n\t\"./ta\": 492,\n\t\"./ta.js\": 492,\n\t\"./te\": 493,\n\t\"./te.js\": 493,\n\t\"./tet\": 494,\n\t\"./tet.js\": 494,\n\t\"./tg\": 495,\n\t\"./tg.js\": 495,\n\t\"./th\": 496,\n\t\"./th.js\": 496,\n\t\"./tk\": 497,\n\t\"./tk.js\": 497,\n\t\"./tl-ph\": 498,\n\t\"./tl-ph.js\": 498,\n\t\"./tlh\": 499,\n\t\"./tlh.js\": 499,\n\t\"./tr\": 500,\n\t\"./tr.js\": 500,\n\t\"./tzl\": 501,\n\t\"./tzl.js\": 501,\n\t\"./tzm\": 502,\n\t\"./tzm-latn\": 503,\n\t\"./tzm-latn.js\": 503,\n\t\"./tzm.js\": 502,\n\t\"./ug-cn\": 504,\n\t\"./ug-cn.js\": 504,\n\t\"./uk\": 505,\n\t\"./uk.js\": 505,\n\t\"./ur\": 506,\n\t\"./ur.js\": 506,\n\t\"./uz\": 507,\n\t\"./uz-latn\": 508,\n\t\"./uz-latn.js\": 508,\n\t\"./uz.js\": 507,\n\t\"./vi\": 509,\n\t\"./vi.js\": 509,\n\t\"./x-pseudo\": 510,\n\t\"./x-pseudo.js\": 510,\n\t\"./yo\": 511,\n\t\"./yo.js\": 511,\n\t\"./zh-cn\": 512,\n\t\"./zh-cn.js\": 512,\n\t\"./zh-hk\": 513,\n\t\"./zh-hk.js\": 513,\n\t\"./zh-mo\": 514,\n\t\"./zh-mo.js\": 514,\n\t\"./zh-tw\": 515,\n\t\"./zh-tw.js\": 515\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 517;","import { ChangeRequestService } from './change-request.service';\nimport { GeoObjectTypeManagementService } from './geoobjecttype-management.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\nimport { GeometryService} from './geometry.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tGeoObjectTypeManagementService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService,\n\tGeometryService\n];\n\nexport * from './change-request.service';\nexport * from './geoobjecttype-management.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';\nexport * from './geometry.service';","/* eslint-disable no-unused-vars */\n/* eslint-disable padded-blocks */\nimport { GeoObjectOverTime, HierarchyOverTime, GeoObjectType, AttributeType } from \"./registry\";\nimport { ActionTypes } from \"./constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\nexport enum SummaryKey {\n    NEW = \"NEW\",\n    UNMODIFIED = \"UNMODIFIED\",\n    DELETE = \"DELETE\",\n    UPDATE = \"UPDATE\",\n    TIME_CHANGE = \"TIME_CHANGE\",\n    VALUE_CHANGE = \"VALUE_CHANGE\",\n}\n\nexport class Document {\n    fileName: string;\n    oid: string;\n}\n\nexport class Geometry {\n    type: string;\n    coordinates: number[][] | number[];\n}\n\nexport class ValueOverTimeDiff {\n    oid: string;\n    action: string; // Can be one of DELETE, UPDATE, CREATE\n    oldValue: any;\n    newValue: any;\n    newStartDate: string;\n    newEndDate: string;\n    oldStartDate: string;\n    oldEndDate: string;\n    parents?: any;\n    oldParents?: any;\n}\n\n// export class AbstractAction {\n//    approvalStatus: string;\n//    createActionDate: Date;\n//    label: string;\n//    oid: string;\n//    actionType: string;\n//    actionLabel: string;\n//    decisionMaker?: string;\n//    documents: Document[];\n// }\n\nexport class AbstractAction {\n    oid: string;\n    actionType: ActionTypes;\n    actionLabel: string;\n    createActionDate: string;\n    contributorNotes?: string;\n    maintainerNotes?: string;\n    additionalNotes?: string;\n    approvalStatus: string;\n    statusLabel: string;\n    createdBy: string;\n    documents: any[];\n    permissions: string[];\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n    geoObjectJson: GeoObjectOverTime;\n    parentJson: HierarchyOverTime[];\n\n    constructor() {\n        super();\n        this.actionType = ActionTypes.CREATEGEOOBJECTACTION;\n    }\n}\n\nexport class UpdateAttributeOverTimeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { \"valuesOverTime\": ValueOverTimeDiff[], hierarchyCode?: string };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = { valuesOverTime: [] };\n    }\n}\n\nexport class UpdateAttributeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { oldValue?: any, newValue?: any };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = {};\n    }\n}\n\nexport class ChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n}\n\nexport class UpdateChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n    geoObject: GeoObjectOverTime;\n}\n\nexport class ChangeRequest {\n    oid: string;\n    createdBy: string;\n    createDate: Date;\n    approvalStatus: string;\n    total: number;\n    pending: number;\n    documents: Document[];\n    actions: AbstractAction[];\n    current?: ChangeRequestCurrentObject & UpdateChangeRequestCurrentObject;\n    type: string; // Can be one of [\"CreateGeoObject\", \"UpdateGeoObject\"]\n    statusLabel?: string;\n    phoneNumber?: string;\n    email?: string;\n    permissions?: string[];\n    isNew?: boolean;\n\n    constructor() {\n        this.isNew = true;\n    }\n\n    public static getActionsForAttribute(cr: ChangeRequest, attributeName: string, hierarchyCode: string): AbstractAction[] {\n        if (cr.type === \"CreateGeoObject\") {\n            return cr.actions;\n        } else {\n            let newActions = [];\n\n            for (let i = 0; i < cr.actions.length; ++i) {\n                let action = cr.actions[i];\n\n                if (action.actionType === \"UpdateAttributeAction\") {\n                    let updateAttrAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === attributeName &&\n                      (attributeName !== \"_PARENT_\" || updateAttrAction.attributeDiff.hierarchyCode === hierarchyCode)) {\n                        newActions.push(cr.actions[i]);\n                    }\n                }\n            }\n\n            return newActions;\n        }\n    }\n}\n\n// export class UpdateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class CreateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class AddChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyTypeCode: string;\n//    contributorNotes: string;\n//    maintainerNotes: string;\n//    createdBy: string;\n// }\n\n// export class RemoveChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyCode: string;\n// }\n\n// export class SetParentAction extends AbstractAction {\n//    childCode: string;\n//    childTypeCode: string;\n//    json: HierarchyOverTime[];\n// }\n\nexport class GovernanceStatus {\n    key: string;\n    label: string;\n}\n\nexport class PageEvent {\n    type: string;\n    data: any;\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { ImportConfiguration } from \"@registry/model/io\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    implementDecisions(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(acp + \"/changerequest/implement-decisions\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    update(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(acp + \"/changerequest/update\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setActionStatus(actionOid: String, status: String): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + \"/changerequest/set-action-status\", JSON.stringify({ actionOid: actionOid, status: status }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAllRequests(pageSize: number, pageNumber: number, filter: string, sort: any[], oid:string): Promise<PageResult<ChangeRequest>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"filter\", filter);\n        params = params.set(\"sort\", JSON.stringify(sort));\n\n        if (oid != null) {\n            params = params.set(\"oid\", oid);\n        }\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<ChangeRequest>>(acp + \"/changerequest/get-all-requests\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    rejectChangeRequest(request: ChangeRequest): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<void>(acp + \"/changerequest/reject\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(requestId: string): Promise<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<string>(acp + \"/changerequest/delete\", JSON.stringify({ requestId: requestId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteFile(crOid: string, fileId: string): Promise<ImportConfiguration> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ImportConfiguration>(acp + \"/changerequest/delete-file-cr\", JSON.stringify({ crOid: crOid, vfOid: fileId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { HistoricalRow, TransitionEvent } from \"@registry/model/transition-event\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class TransitionEventService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageSize: number, pageNumber: number, attrConditions: any): Promise<PageResult<TransitionEvent>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"attrConditions\", JSON.stringify(attrConditions));\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<TransitionEvent>>(acp + \"/transition-event/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getDetails(oid: string): Promise<TransitionEvent> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<TransitionEvent>(acp + \"/transition-event/get-details\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(acp + \"/transition-event/apply\", JSON.stringify({ event: event }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(acp + \"/transition-event/delete\", JSON.stringify({ eventId: event.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getHistoricalReport(typeCode: string, startDate: string, endDate: string, pageSize: number, pageNumber: number): Promise<PageResult<HistoricalRow>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode.toString());\n        params = params.set(\"startDate\", startDate.toString());\n        params = params.set(\"endDate\", endDate.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<HistoricalRow>>(acp + \"/transition-event/historical-report\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType } from \"./registry\";\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\n    matchStrategy: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    formatType: string;\n    objectType: string;\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n    isExternal: string;\n    externalSystemId: string;\n    externalSystem?: any;\n    revealGeometryColumn?: any;\n    onValidChange: any;\n    externalIdAttributeTarget: string;\n}\n\n","import { Component, OnInit, ViewChild, Input, ViewChildren, QueryList } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, Term, HierarchyOverTime } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, CreateGeoObjectAction, ChangeRequest } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\n\n@Component({\n    selector: \"geoobject-shared-attribute-editor\",\n    templateUrl: \"./geoobject-shared-attribute-editor.component.html\",\n    styleUrls: [\"./geoobject-shared-attribute-editor.css\"],\n    providers: [DatePipe],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"slide\", [\n                state(\"left\", style({ left: 0 })),\n                state(\"right\", style({ left: \"100%\" })),\n                transition(\"* => *\", animate(200))\n            ])\n        ]]\n})\n\n/**\n * IMPORTANT\n * This component is shared between:\n * - crtable (request-table.component.ts)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget (feature-panel.component.ts)\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    // The changed state of the GeoObject in the GeoRegistry\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    showAllInstances: boolean = false;\n\n    tabIndex: number = 0;\n\n    // The current state of the GeoObject in the GeoRegistry\n//    @Input() action: Action = null;\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isGeometryInlined = false;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n\n    @Input() filterDate: string = null;\n\n    // used in context of a list where reference back to the list forDate is needed\n    @Input() forDate: string = null;\n    @Input() datasetId: string = null;\n\n    // TODO : This was copy / pasted into manage-versions.component::onDateChange and ChangeRequestEditor::generateAttributeEditors\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"invalid\", \"exists\"];\n\n    @ViewChild(\"attributeForm\") attributeForm;\n\n    @ViewChildren(ManageVersionsComponent) manageVersions: QueryList<any>;\n\n    public parentAttributeType: AttributeType;\n\n    public geometryAttributeType: AttributeType;\n\n    showStabilityPeriods = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private geomService: GeometryService, private authService: AuthService, private dateService: DateService, private registryService: RegistryService) {\n\n    }\n\n    ngOnInit(): void {\n        if (this.attributeExcludes != null) {\n            this.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n            if (!this.isGeometryInlined) {\n                this.geoObjectAttributeExcludes.push(\"geometry\");\n            }\n        }\n\n        this.geometryAttributeType = this.getAttribute(\"geometry\");\n        if (this.geometryAttributeType == null) {\n            this.geometryAttributeType = new AttributeType(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n        }\n\n        this.parentAttributeType = new AttributeType(\"_PARENT_\", \"_PARENT_\", new LocalizedValue(\"Parents\", null), new LocalizedValue(\"Parents\", null), true, false, false, true);\n\n        if (this.changeRequest == null) {\n            this.changeRequest = this.createNewChangeRequest();\n        } else {\n            if (!this.changeRequest.actions) {\n                this.changeRequest.actions = [];\n            }\n\n            if (this.changeRequest.actions.length === 0 && this.isNew) {\n                this.changeRequest.actions = this.createNewChangeRequest().actions;\n            }\n        }\n\n        this.changeRequestEditor = new ChangeRequestEditor(this.changeRequest, this.postGeoObject, this.geoObjectType, this.hierarchies, this.geometryAttributeType, this.parentAttributeType, this.lService, this.dateService, this.registryService);\n\n        if (this.shouldForceSetExist()) {\n            this.changePage(3);\n        }\n\n        if (this.isNew) {\n            this.filterDate = null;\n        }\n\n        let got = this.changeRequest.current ? this.changeRequest.current.geoObjectType : this.postGeoObject.geoObjectType;\n        let orgCode = got.organizationCode;\n\n        // Don't show the stability bar on the Change Requests page.\n        // Change Requests don't have oid when the page is loaded for non-change request use cases.\n        if (!this.changeRequest.oid) {\n            this.showStabilityPeriods = (this.authService.isSRA() || this.authService.isOrganizationRA(orgCode) || this.authService.isGeoObjectTypeOrSuperRM(got) || this.authService.isGeoObjectTypeOrSuperRC(got));\n        }\n\n        this.showAllInstances = (this.changeRequestEditor.changeRequest.isNew || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\");\n    }\n\n    setFilterDate(date: string, refresh: boolean = true) {\n        this.filterDate = date;\n\n        if (this.manageVersions != null) {\n            this.manageVersions.forEach(manageVersion => manageVersion.setFilterDate(this.filterDate, refresh));\n        }\n    }\n\n    getChangeRequestEditor(): ChangeRequestEditor {\n        return this.changeRequestEditor;\n    }\n\n    createNewChangeRequest(): ChangeRequest {\n        let cr = new ChangeRequest();\n        cr.approvalStatus = \"PENDING\";\n        cr.actions = [];\n\n        if (this.isNew) {\n            cr.type = \"CreateGeoObject\";\n\n            let createAction: CreateGeoObjectAction = new CreateGeoObjectAction();\n            createAction.geoObjectJson = this.postGeoObject;\n            createAction.parentJson = this.hierarchies;\n            cr.actions[0] = createAction;\n        } else {\n            cr.type = \"UpdateGeoObject\";\n        }\n\n        return cr;\n    }\n\n    shouldForceSetExist() {\n        let isNew = this.changeRequestEditor.changeRequest.isNew;\n\n        if (isNew && !this.readOnly && this.postGeoObject.attributes[\"exists\"]) {\n            let values = this.postGeoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n            }\n        }\n\n        return isNew && !this.readOnly;\n    }\n\n    getAttribute(name: string): AttributeType {\n        if (name === \"_PARENT_\") {\n            return this.parentAttributeType;\n        } else if (name === \"geometry\") {\n            return this.geometryAttributeType;\n        }\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            if (this.geoObjectType.attributes[i].code === name) {\n                return this.geoObjectType.attributes[i];\n            }\n        }\n\n        return null;\n    }\n\n    changePage(nextPage: number): void {\n        if (this.shouldForceSetExist() && nextPage !== 3) {\n            return;\n        }\n\n        this.geomService.destroy(false);\n\n        this.tabIndex = nextPage;\n    }\n\n    hasChanges(tabIndex: number) {\n        let len = this.changeRequest.actions.length;\n\n        if (len > 0) {\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.changeRequest.actions[i];\n\n                if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                    return false;\n                } else if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeOverTimeAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === \"_PARENT_\" && tabIndex === 1) {\n                        return true;\n                    } else if (updateAttrAction.attributeName === \"geometry\" && tabIndex === 2) {\n                        return true;\n                    } else if ((updateAttrAction.attributeName === \"invalid\" || updateAttrAction.attributeName === \"exists\") && tabIndex === 3) {\n                        return true;\n                    } else if (tabIndex === 0 && updateAttrAction.attributeName !== \"_PARENT_\" && updateAttrAction.attributeName !== \"geometry\" && updateAttrAction.attributeName !== \"exists\" && updateAttrAction.attributeName !== \"invalid\") {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    hasErrors(tabIndex: number) {\n        let attributeEditors = this.changeRequestEditor.getEditors();\n\n        if (tabIndex === 0) {\n            let filter = [\"invalid\", \"exists\", \"_PARENT_\", \"geometry\"];\n            let filteredEditors = attributeEditors.filter(editor => filter.indexOf(editor.attribute.code) === -1);\n\n            for (let i = 0; i < filteredEditors.length; ++i) {\n                let editor = filteredEditors[i];\n\n                if (!editor.isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 1) {\n            for (let i = 0; i < this.hierarchies.length; ++i) {\n                let hierarchy = this.hierarchies[i];\n\n                if (!this.changeRequestEditor.getEditorForAttribute(this.parentAttributeType, hierarchy).isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 2) {\n            return !this.changeRequestEditor.getEditorForAttribute(this.geometryAttributeType).isValid();\n        } else if (tabIndex === 3) {\n            let invalid = this.getAttribute(\"invalid\");\n\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existsEditor = this.changeRequestEditor.getEditorForAttribute(existsAttribute);\n\n            return (Object.prototype.hasOwnProperty.call(invalid, \"isValid\") && !invalid.isValid) ||\n            !existsEditor.isValid();\n        }\n\n        return false;\n    }\n\n    public isValid(): boolean {\n        let allValid:boolean = true;\n\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.isValid != null && !att.isValid) {\n                allValid = false;\n            }\n        });\n\n        if (this.parentAttributeType.isValid != null && !this.parentAttributeType.isValid) {\n            allValid = false;\n        }\n\n        if (this.geometryAttributeType.isValid != null && !this.geometryAttributeType.isValid) {\n            allValid = false;\n        }\n\n        return allValid && this.changeRequestEditor.validate();\n    }\n\n    public getActions(): AbstractAction[] {\n        return this.changeRequestEditor.changeRequest.actions;\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <stability-period *ngIf=\"showStabilityPeriods\" [showHint]=\"!readOnly\" [changeRequestEditor]=\"changeRequestEditor\" [sharedAttributeEditor]=\"this\" [forDate]=\"forDate\" [context]=\"datasetId == null ? 'EXPLORER' : 'LIST'\" [filterDate]=\"filterDate\" [latestPeriodIsActive]=\"filterDate == null && changeRequestEditor.changeRequest.isNew\"></stability-period>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <boolean-field *ngIf=\"changeRequestEditor && !changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject'\" [(value)]=\"showAllInstances\" label=\"Show all instances\" [disable]=\"false\"></boolean-field>\n  </div>\n</div>\n\n<div class=\"row\">\n  <!-- <div class=\"label-holder\"></div> -->\n  <div class=\"col-md-12\">\n    <div class=\"btn-group geobject-editor-tab-holder\">\n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 0, disabled: shouldForceSetExist()}\" (click)=\"changePage(0);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabZero\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(0)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(0)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 1, disabled: shouldForceSetExist()}\" (click)=\"changePage(1);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabOne\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(1)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(1)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 2, disabled: shouldForceSetExist()}\" (click)=\"changePage(2);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabTwo\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(2)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(2)\" class=\"tabHasChanges\"></span></span>\n      </label>\n      <label class=\"btn full-width-radio-button settings\" [ngClass]=\"{active: tabIndex === 3}\" (click)=\"changePage(3);\"> \n        <span style=\"display:inline-block; width:90%;\"><i class=\"fa fa-cog\"></i></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(3)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(3)\" class=\"tabHasChanges\"></span></span>\n      </label>\n    </div>\n  </div>\n</div>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n  <fieldset>\n    <!-- <div class=\"col-md-12\"> -->\n    <div *ngIf=\"changeRequestEditor && changeRequestEditor.geoObject\">\n      <div *ngIf=\"tabIndex === 0\" class=\"row\">\n        <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    \n        <div class=\"col-md-12\">\n\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes; let i = index\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n              <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(attr).hasChanges()\" class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span *ngIf=\"attr.code === 'code'\"> \n                      <localize key=\"geoobject.code.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code === 'displayLabel'\"> \n                      <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                    </span>\n                    <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\"> {{attr.label.localizedValue}} </span> \n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <div *ngIf=\"attr.code !== 'code' && attr.isChangeOverTime\">\n                    <manage-versions\n                        [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"attr\"\n                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\" >\n                    </manage-versions>\n                  </div>\n\n                  <div *ngIf=\"!attr.isChangeOverTime\">\n                    <input *ngIf=\"changeRequestEditor.geoObject && attr.code === 'code'\" type=\"text\" [(ngModel)]=\"changeRequestEditor.getEditorForAttribute(attr).value\" id=\"mod-{{attr.code}}\" \n                        name=\"mod-{{attr.code}}\" [disabled]=\"readOnly || (attr.code === 'code' && !isNew)\" [style]=\"(readOnly || (attr.code === 'code' && !isNew)) ? '' : 'color:#333'\" required>\n\n                    <div *ngIf=\"attr.code !== 'code'\">\n                        <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"attr\" [geoObject]=\"changeRequestEditor.geoObject\"\n                          [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div *ngIf=\"tabIndex === 1\" class=\"row\">\n        <div class=\"col-md-12\">\n\t        <ul class=\"list-group\">\n\t\t        <li *ngFor=\"let hierarchy of hierarchies\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n\t\t          <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(parentAttributeType, hierarchy).hasChanges()\" class=\"panel panel-default\">\n\t              <div class=\"panel-heading\">\n\t                <h4 style=\"margin:0;\">\n\t                  <span> {{hierarchy.label}} </span> \n\t                </h4>\n\t              </div>\n\t\t\t\t      \n\t\t\t\t        <div class=\"panel-body\">\n\t\t\t\t          <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"parentAttributeType\"\n\t                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"filterDate\" [hierarchy]=\"hierarchy\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n\t\t\t\t        </div>\n\t\t\t        </div>\n\t\t        </li>\n\t        </ul>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 2\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(geometryAttributeType).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span> <localize key=\"shared.attributes.attribute.geometry.label\"></localize> </span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"geometryAttributeType\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 3\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('exists')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span>{{getAttribute('exists').label.localizedValue}}</span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"getAttribute('exists')\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('invalid')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <!-- <span>{{getAttribute('invalid').label.localizedValue}}</span>  -->\n                <localize key=\"geoobject.invalid.alternate.label\"></localize>\n              \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"getAttribute('invalid')\" [geoObject]=\"changeRequestEditor.geoObject\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- </div> -->\n  </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-text\",\n    templateUrl: \"./localized-text.component.html\",\n    styleUrls: [\"./localized-text.css\"],\n})\nexport class LocalizedTextComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Input() public inlinelayout: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","\n<div *ngFor=\"let localeValue of value.localeValues\">\n  <div [ngClass]=\"{'row' : inlinelayout, 'row-holder' : !inlinelayout}\" >\n    <div [ngClass]=\"{'col-md-12' : inlinelayout}\">\n      <div class=\"form-group\">\n        <div [ngClass]=\"{'label-holder' : !inlinelayout}\" >\n          <label>\n            <localize [key]=\"key\"></localize>\n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n        </div>\n        <div [ngClass]=\"{'holder' : !inlinelayout}\">\n          <span class=\"text\">\n            <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\nimport { ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n\r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { GeoObjectType, AttributeType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"attribute-input\",\n    templateUrl: \"./attribute-input.component.html\",\n    styleUrls: [\"./attribute-input.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\"))\n            // transition('show => none', animate('100ms'))\n        ])\n    ]\n})\nexport class AttributeInputComponent implements OnInit {\n\n    @Input() disableCodeField: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() isDecimal: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType;\n    @Output() attributeChange = new EventEmitter<AttributeType>();\n    message: string = null;\n\n    state: string = \"none\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges() {\n\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    toggleIsUnique(): void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.attribute.code) {\n            // if code has a space\n            if (this.attribute.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            if (this.attribute.label.localeValues[0].value.length === 0) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == \"\")) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == \"\")) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterList, MasterListByOrg } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"publish-modal\",\n    templateUrl: \"./publish-modal.component.html\",\n    styleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\n    currentDate: Date = new Date();\n    message: string = null;\n\n    master: MasterList;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onMasterListChange: Subject<MasterList>;\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n    edit: boolean = false;\n\n    isNew: boolean = false;\n\n    originalPublishStartDate: string = null;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) {}\n\n    ngOnInit(): void {\n        this.onMasterListChange = new Subject();\n\n        if (!this.master || !this.readonly) {\n            this.iService.listGeoObjectTypes(true).then(types => {\n                let myOrgTypes = [];\n                for (let i = 0; i < types.length; ++i) {\n                    const orgCode = types[i].orgCode;\n                    const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n                this.types = myOrgTypes;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.master = {\n                oid: null,\n                typeCode: \"\",\n                displayLabel: this.lService.create(),\n                code: \"\",\n                representativityDate: null,\n                publishingStartDate: null,\n                publishDate: null,\n                descriptionLocal: this.lService.create(),\n                processLocal: this.lService.create(),\n                progressLocal: this.lService.create(),\n                accessConstraintsLocal: this.lService.create(),\n                useConstraintsLocal: this.lService.create(),\n                acknowledgementsLocal: this.lService.create(),\n                disclaimerLocal: this.lService.create(),\n                contactName: \"\",\n                organization: \"\",\n                telephoneNumber: \"\",\n                email: \"\",\n                hierarchies: [],\n                subtypeHierarchies: [],\n                leaf: false,\n                frequency: \"ANNUAL\",\n                isMaster: null,\n                visibility: null\n            };\n        }\n    }\n\n    ngAfterContentInit() {\n\n    }\n\n    init(org: MasterListByOrg): void {\n        this.master.organization = org.oid;\n    }\n\n    getIsDisabled(event): boolean {\n        let elClasses = event.target.classList;\n        for (let i = 0; i < elClasses.length; i++) {\n            let c = elClasses[i];\n            if (c === \"disabled\") {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onChange(): void {\n        if (this.master.typeCode != null && this.master.typeCode.length > 0) {\n            this.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n                this.master.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.iService.getHierarchiesForSubtypes(this.master.typeCode, false).then(hierarchies => {\n                this.master.subtypeHierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.master.hierarchies = [];\n        }\n    }\n\n    onSubmit(): void {\n        this.service.createMasterList(this.master).then(response => {\n            this.onMasterListChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    stringify(obj: any): string {\n        return JSON.stringify(obj);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    ngOnDestroy() {\n        this.onMasterListChange.unsubscribe();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n        <h1 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h1>\n        <h1 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h1>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && (readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                  <input [(ngModel)]=\"master.typeLabel.localizedValue\" name=\"typeCode\" type=\"text\" class=\"form-control\" disabled />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"BIANNUAL\"><localize key=\"georegistry.frequency.biannual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.publishingStartDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                              {{formatDate(master.publishingStartDate)}}\n                    </span>\n                    <date-field *ngIf=\"!readonly\" [(value)]=\"master.publishingStartDate\" [classNames]=\"['form-control']\" label=\"\" [inputName]=\"'publishingStartDate'\" \n                        [allowFutureDates]=\"false\" name=\"masterPublishingStartDate\" [required]=\"false\" [disable]=\"readonly\"></date-field>\n                    <small *ngIf=\"(edit && !isNew && originalPublishStartDate != master.publishingStartDate)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.descriptionLocal.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.processLocal.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.progressLocal.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.accessConstraintsLocal.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.useConstraintsLocal.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.acknowledgementsLocal.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.disclaimerLocal.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div *ngIf=\"master.subtypeHierarchies.length > 0\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> <localize key=\"masterlist.subtypeHierarchies\"></localize> </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let hierarchy of master.subtypeHierarchies\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\" [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-input\",\n    templateUrl: \"./localized-input.component.html\",\n    styleUrls: []\n})\nexport class LocalizedInputComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from 'rxjs';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\nimport * as d3 from 'd3';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal'\n\nimport { HierarchyType, HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\nimport { Organization } from '@shared/model/core';\nimport { RegistryService, HierarchyService } from '@registry/service';\n\nimport { SvgHierarchyType } from './d3/svg-hierarchy-type';\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection } from './d3/svg-util';\nimport { SvgHierarchyNode } from './d3/svg-hierarchy-node';\nimport { ImportTypesModalComponent } from './modals/import-types-modal.component';\n\nexport const TREE_SCALE_FACTOR_X: number = 1.8;\nexport const TREE_SCALE_FACTOR_Y: number = 1.8;\n\nexport const DEFAULT_NODE_FILL = '#e6e6e6';\nexport const DEFAULT_NODE_BANNER_COLOR = '#A29BAB';\nexport const INHERITED_NODE_FILL = '#d4d4d4';\nexport const INHERITED_NODE_BANNER_COLOR = '#a0a0a0';\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n  active: boolean;\n  label: string;\n}\n\nexport interface DropTarget {\n  dropSelector: string;\n  onDrag(dragEl: Element, dropEl: Element, event: any): void;\n  onDrop(dragEl: Element, event: any): void;\n  [others: string]: any;\n}\n\n@Component({\n\n  selector: 'hierarchies',\n  templateUrl: './hierarchy.component.html',\n  styleUrls: ['./hierarchy.css']\n})\nexport class HierarchyComponent implements OnInit {\n\n  userOrganization: string = null;\n\n  primarySvgHierarchy: SvgHierarchyType;\n  currentHierarchy: HierarchyType = null;\n\n  instance: Instance = new Instance();\n  hierarchies: HierarchyType[];\n  organizations: Organization[];\n  geoObjectTypes: GeoObjectType[] = [];\n\n  hierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n  filter: string = '';\n  filteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  filteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n  @ViewChild('searchInput', { static: true }) searchInput: ElementRef;\n\n  hierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n  geoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n  _opened: boolean = false;\n\n  /*\n   * Reference to the modal current showing\n  */\n  private bsModalRef: BsModalRef;\n\n  /*\n   * Template for tree node menu\n   */\n  @ViewChild('nodeMenu') public nodeMenuComponent: ContextMenuComponent;\n\n  /*\n   * Template for leaf menu\n   */\n  @ViewChild('leafMenu') public leafMenuComponent: ContextMenuComponent;\n\n  /* \n   * Currently clicked on id for delete confirmation modal \n   */\n  current: any;\n\n  isSRA: boolean = false;\n\n  hierarchyService: HierarchyService;\n\n  localizeService: LocalizationService;\n\n  options = {\n    //      allowDrag: (any) => node.isLeaf,\n    //      allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n    // return true / false based on element, to.parent, to.index. e.g.\n    //          return parent.hasChildren;\n    //        },\n    displayField: \"label\",\n    actionMapping: {\n      mouse: {\n        click: (tree: any, node: any, $event: any) => {\n          this.treeNodeOnClick(node, $event);\n        },\n        contextMenu: (tree: any, node: any, $event: any) => {\n          this.handleOnMenu(node, $event);\n        }\n      }\n    },\n    mouse: {\n      //              drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n      //                console.log('drag', from, to); // from === {name: 'first'}\n      //                // Add a node to `to.parent` at `to.index` based on the data in `from`\n      //                // Then call tree.update()\n      //              }\n    }\n  };\n\n\n\n  constructor(hierarchyService: HierarchyService, private modalService: BsModalService,\n    private contextMenuService: ContextMenuService,\n    localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n\n    this.isSRA = authService.isSRA();\n\n    this.hierarchyService = hierarchyService;\n    this.localizeService = localizeService;\n  }\n\n  ngOnInit(): void {\n    this.refreshAll(null);\n\n    fromEvent(this.searchInput.nativeElement, 'keyup').pipe(\n\n      // get value\n      filter(Boolean),\n      debounceTime(500),\n      distinctUntilChanged(),\n      tap(() => {\n        this.onFilterChange();\n      })\n      // subscription for response\n    ).subscribe();\n  }\n\n  localize(key: string): string {\n    return this.localizeService.decode(key);\n  }\n\n  private renderTree(): void {\n    if (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length == 0) {\n      d3.select(\"#svg\").remove();\n\n      let canDrag = false;\n      if (this.currentHierarchy != null) {\n        canDrag = (this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode));\n      }\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n        got.canDrag = canDrag;\n      });\n      return;\n    }\n\n    d3.select(\".g-context-menu\").remove();\n    d3.select(\".hierarchy-inherit-button\").remove();\n    d3.select(\".g-hierarchy-got-connector\").remove();\n\n    let overflowDiv: any = d3.select(\"#overflow-div\").node();\n    let scrollLeft = overflowDiv.scrollLeft;\n    let scrollRight = overflowDiv.scrollRight;\n\n    let svg = d3.select(\"#svg\");\n\n    if (svg.node() == null) {\n      svg = d3.select(\"#svgHolder\").append(\"svg\");\n      svg.attr(\"id\", \"svg\");\n    }\n\n    this.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService, this.authService);\n    this.primarySvgHierarchy.render();\n\n    this.calculateSvgViewBox();\n\n    let overflowDiv2: any = d3.select(\"#overflow-div\").node();\n    overflowDiv2.scrollLeft = scrollLeft;\n    overflowDiv2.scrollRight = scrollRight;\n\n    //this.registerSvgHandlers();\n\n    this.geoObjectTypes.forEach((got: GeoObjectType) => {\n      got.canDrag = this.calculateCanDrag(got);\n    });\n  }\n\n  calculateSvgViewBox(): void {\n    let svg: any = d3.select(\"#svg\");\n    let svgNode: any = svg.node();\n\n    let { x, y, width, height } = svgNode.getBBox();\n\n    const xPadding = 30;\n    const yPadding = 40;\n    svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n    width = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n    height = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n    d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n    //d3.select(\"#svgHolder\").style(\"height\", height + \"px\"); \n  }\n\n  calculateCanDrag(got: GeoObjectType): boolean {\n    let hierarchyComponent = this;\n\n    if (this.primarySvgHierarchy != null) {\n      // Check permissions against GOT and Hierarchy org\n      if (!(this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode))) {\n        return false;\n      }\n\n      // If the child is already on the graph, they cannot drag.\n      if (this.primarySvgHierarchy.getNodeByCode(got.code) != null) {\n        return false;\n      }\n\n      // If we are abstract, and one of our children is on the graph, they cannot drag.\n      if (got.isAbstract) {\n        let isChildOnGraph = false;\n\n        this.geoObjectTypes.forEach((child: GeoObjectType) => {\n          if (child.superTypeCode === got.code) {\n            if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null) {\n              isChildOnGraph = true;\n            }\n          }\n        });\n\n        if (isChildOnGraph) {\n          return false;\n        }\n      }\n      // If we are a child of an abstract type, and our abstract type is on the graph, we cannot drag.\n      else if (got.superTypeCode != null) {\n        if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null) {\n          return false;\n        }\n      }\n    }\n    else {\n      // If there is no selected hierarchy, they cannot drag.\n      return false;\n    }\n\n    return true;\n  }\n\n  calculateRelatedHierarchies(got: GeoObjectType): string[] {\n    let relatedHiers = [];\n\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let hierarchyType = this.hierarchies[i];\n\n      if (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n        let d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n        let found = d3Hierarchy.find((node) => {\n          return node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n        });\n\n        if (found) {\n          relatedHiers.push(hierarchyType.code);\n        }\n      }\n    }\n\n    return relatedHiers;\n  }\n\n  private registerDragHandlers(): any {\n    let that = this;\n\n    let dropTargets: DropTarget[] = [];\n\n    // Empty Hierarchy Drop Zone\n    dropTargets.push({\n      dropSelector: \".drop-box-container\", onDrag: function(dragEl: Element, dropEl: Element) {\n        if (this.dropEl != null) {\n          this.dropEl.style(\"border-color\", null);\n          this.dropEl = null;\n        }\n\n        if (dropEl != null) {\n          let emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n          if (emptyHierarchyDropZone != null) {\n            this.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n          }\n        }\n      }, onDrop: function(dragEl: Element) {\n        if (this.dropEl != null) {\n          this.dropEl.style(\"border-color\", null);\n          that.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n          this.dropEl = null;\n        }\n      }\n    });\n\n    // SVG GeoObjectType Drop Zone\n    dropTargets.push({\n      dropSelector: \".svg-got-body-rect\", onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n        this.clearDropZones();\n\n        let lastDropEl = this.dropEl;\n\n        // translate page to SVG co-ordinate\n        let svg: any = d3.select(\"#svg\").node();\n\n        if (svg == null) {\n          return;\n        }\n        let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        // Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n        // we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones. \n        that.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n          if (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n            this.dropEl = d3.select('.g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\"' + node.data.geoObjectType + '\"]');\n            node.data.activeDropZones = true;\n\n            if (node.parent == null) {\n              node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n            }\n          }\n          else {\n            node.data.activeDropZones = false;\n\n            if (node.parent == null) {\n              node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n            }\n          }\n        });\n\n        if (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") != this.dropEl.attr(\"data-gotCode\"))) {\n          this.clearGhostNodes(true);\n        }\n\n        if (this.dropEl != null) {\n          let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n          const gotCode = this.dropEl.attr(\"data-gotCode\");\n          let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n          let isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n          this.dropEl.attr(\"stroke\", \"blue\");\n\n          const dropElX = parseInt(this.dropEl.attr(\"x\"));\n          const dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n          // Add drop zones\n          const childW: number = SvgHierarchyType.gotRectW;\n          const childH: number = SvgHierarchyType.gotRectH;\n\n          let dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n          // Render Child Drop Zone\n          let dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length == 0);\n          let isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n          if (isChildDZActive) {\n            this.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"white\")\n\n            this.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"none\")\n              .attr(\"stroke\", \"black\")\n              .attr(\"stroke-width\", \"1\")\n              .attr(\"stroke-dasharray\", \"5,5\");\n\n            let addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n            this.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 10)\n              .attr(\"fill\", \"black\")\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n              .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n              .text(addChildLabel);\n          }\n\n          // Render Parent Drop Zone\n          if (!isDragGroup) // Don't render it if we're a group\n          {\n            this.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"white\")\n\n            this.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n              .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n              .attr(\"width\", childW)\n              .attr(\"height\", childH)\n              .attr(\"fill\", \"none\")\n              .attr(\"stroke\", \"black\")\n              .attr(\"stroke-width\", \"1\")\n              .attr(\"stroke-dasharray\", \"5,5\");\n\n            d3.select(\".svg-got-parent-dz-text\").remove();\n            let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n            this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n              .attr(\"font-family\", \"sans-serif\")\n              .attr(\"font-size\", 10)\n              .attr(\"fill\", \"black\")\n              .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n              .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n              .text(addParentLabel);\n          }\n\n          // Render Sibling Drop Zone\n          if (this.ghostCode != gotCode) {\n\n\n            if (this.ghostCode != null) {\n              this.clearGhostNodes(dropNode.parent == null);\n            }\n\n            if (dropNode.parent != null) {\n              let parentIndex = null;\n              for (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n                let hn: any = dropNode.parent.data.children[i];\n\n                if (hn.geoObjectType === gotCode) {\n                  parentIndex = i + 1;\n                }\n              };\n\n              let addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n              dropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n              that.renderTree();\n              this.ghostCode = gotCode;\n            }\n          }\n\n          let siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n          if (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n            this.parentDz.attr(\"stroke\", \"blue\");\n            this.parentDzText.attr(\"fill\", \"blue\");\n            isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n            isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n            siblingGhostBody.attr(\"stroke\", \"black\");\n            this.activeDz = this.parentDz;\n          }\n          else if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n            !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n            !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n            this.childDz.attr(\"stroke\", \"blue\");\n            this.childDzText.attr(\"fill\", \"blue\");\n            siblingGhostBody.attr(\"stroke\", \"black\");\n            this.activeDz = this.childDz;\n          }\n          else if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n            !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n            !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n            isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n            isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n            siblingGhostBody.attr(\"stroke\", \"blue\");\n            this.activeDz = \"sibling\";\n          }\n        }\n      }, onDrop: function(dragEl: Element) {\n        if (this.dropEl != null && this.activeDz != null) {\n          let dropGot = this.dropEl.attr(\"data-gotCode\");\n          let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n          let dragGot = d3.select(dragEl).attr(\"id\");\n\n          if (this.activeDz === this.childDz) {\n            if (dropNode.data.children.length == 0) {\n              that.addChild(that.currentHierarchy.code, dropGot, dragGot);\n            }\n            else {\n              let youngest = \"\";\n\n              for (let i = 0; i < dropNode.data.children.length; ++i) {\n                youngest = youngest + dropNode.data.children[i].geoObjectType;\n\n                if (i < dropNode.data.children.length - 1) {\n                  youngest = youngest + \",\";\n                }\n              }\n\n              that.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n            }\n          }\n          else if (this.activeDz === this.parentDz) {\n            if (dropNode.parent == null) {\n              that.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n            }\n            else {\n              that.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n            }\n          }\n          else if (this.activeDz === \"sibling\") {\n            that.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n          }\n        }\n        this.clearDropZones();\n        this.clearGhostNodes(true);\n      }, clearDropZones: function() {\n        if (this.dropEl != null) {\n          this.dropEl.attr(\"stroke\", null);\n        }\n\n        this.dropEl = null;\n        this.activeDz = null;\n\n        this.childDz = null;\n        this.parentDz = null;\n\n        d3.select(\".svg-dropZone-g\").remove();\n\n      }, clearGhostNodes: function(renderTree: boolean) {\n        if (this.ghostCode != null) {\n          let ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n          if (ghostNode != null) {\n            let parentIndex = null;\n            for (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n              let hn: any = ghostNode.parent.data.children[i];\n\n              if (hn.ghostingCode === this.ghostCode) {\n                parentIndex = i;\n              }\n            };\n\n            if (parentIndex != null) {\n              ghostNode.parent.data.children.splice(parentIndex, 1);\n              if (renderTree) {\n                that.renderTree();\n              }\n            }\n          }\n\n          this.ghostCode = null;\n        }\n      }\n    });\n\n    // GeoObjectTypes and Hierarchies\n    let deltaX: number, deltaY: number, width: number;\n    let sidebarDragHandler = d3.drag()\n      .on(\"start\", function(event: any) {\n        let canDrag = d3.select(this).attr(\"data-candrag\");\n        if (canDrag === \"false\") {\n          return;\n        }\n\n        let rect = this.getBoundingClientRect();\n        deltaX = rect.left - event.sourceEvent.pageX;\n        deltaY = rect.top - event.sourceEvent.pageY;\n        width = rect.width;\n      })\n      .on(\"drag\", function(event: any) {\n        let canDrag = d3.select(this).attr(\"data-candrag\");\n        if (canDrag === \"false\") {\n          return;\n        }\n\n        d3.select(\".g-context-menu\").remove();\n\n        let selThis = d3.select(this);\n\n        // Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n        selThis.style(\"display\", \"none\");\n\n        let target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        selThis.style(\"display\", null);\n\n        for (let i = 0; i < dropTargets.length; ++i) {\n          dropTargets[i].onDrag(this, target, event);\n        }\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        selThis\n          .classed(\"dragging\", true)\n          .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n          .style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n          .style(\"width\", width + \"px\");\n\n        // If they are moving a GOT group then we have to move the children as well \n        if (selThis.classed(\"got-group-parent\")) {\n          let index = 1;\n          d3.selectAll('.got-group-child[data-superTypeCode=\"' + selThis.attr(\"id\") + '\"]').each(function() {\n            let li: any = this;\n            let child = d3.select(li);\n\n            child\n              .classed(\"dragging\", true)\n              .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n              .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2) * index) + \"px\")\n              .style(\"width\", width + \"px\");\n\n            index++;\n          });\n        }\n      }).on(\"end\", function(event: any) {\n        let selThis = d3.select(this)\n          .classed(\"dragging\", false)\n          .style(\"left\", null)\n          .style(\"top\", null)\n          .style(\"width\", null);\n\n        // If they are moving a GOT group then we have to reset the children as well \n        if (selThis.classed(\"got-group-parent\")) {\n          d3.selectAll('.got-group-child[data-superTypeCode=\"' + selThis.attr(\"id\") + '\"]').each(function() {\n            let child = d3.select(this);\n\n            child\n              .classed(\"dragging\", false)\n              .style(\"left\", null)\n              .style(\"top\", null)\n              .style(\"width\", null);\n          });\n        }\n\n        for (let i = 0; i < dropTargets.length; ++i) {\n          dropTargets[i].onDrop(this, event);\n        }\n      });\n\n    sidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n  }\n\n  private registerSvgHandlers(): void {\n    let hierarchyComponent = this;\n\n    // SVG Drag Handler\n    let deltaX: number, deltaY: number, width: number;\n    let startPoint: any;\n    let svgGot: SvgHierarchyNode;\n    let svgDragHandler = d3.drag()\n      .on(\"start\", function(event: any) {\n        let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n        // let select = d3.select(this);\n\n        svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n\n\n        // d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        //   d3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        // d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     console.log(\"no --> \",a.data.geoObjectType)\n        //     return -1\n        //   }\n        //   else {\n        //     console.log(\"yes --> \",a.data.geoObjectType)\n        //     return 1\n        //   }\n        // });\n\n        startPoint = svgGot.getPos();\n\n        deltaX = startPoint.x - svgMousePoint.x;\n        deltaY = startPoint.y - svgMousePoint.y;\n      })\n      .on(\"drag\", function(event: any) {\n\n        d3.select(\".g-context-menu\").remove();\n\n        let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n        svgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n\n      }).on(\"end\", function(event: any) {\n\n        let bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n\n        svgGot.setPos(startPoint.x, startPoint.y, false);\n\n        // if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n        //   if (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n        //     let obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        //     hierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n        //       animated: true,\n        //       backdrop: true,\n        //       ignoreBackdropClick: true,\n        //     });\n\n        //     let message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        //     message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        //     hierarchyComponent.bsModalRef.content.message = message;\n        //     hierarchyComponent.bsModalRef.content.data = obj.code;\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n        //       let treeNode = svgGot.getTreeNode();\n        //       let parent = null;\n        //       if (treeNode.parent == null) {\n        //         parent = \"ROOT\";\n        //       }\n        //       else {\n        //         if (treeNode.parent.data.inheritedHierarchyCode != null) {\n        //           parent = \"ROOT\";\n        //         }\n        //         else {\n        //           parent = treeNode.parent.data.geoObjectType;\n        //         }\n        //       }\n\n        //       hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n        //     });\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n        //       svgGot.setPos(startPoint.x, startPoint.y, false);\n        //     });\n        //   }\n        //   else {\n        //     svgGot.setPos(startPoint.x, startPoint.y, false);\n        //   }\n\n        // }\n        // else {\n        //   svgGot.setPos(startPoint.x, startPoint.y, false);\n        // }\n\n      });\n\n    svgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n  }\n\n  public findGeoObjectTypeByCode(code: string): GeoObjectType {\n    for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n      let got: GeoObjectType = this.geoObjectTypes[i];\n\n      if (got.code === code) {\n        return got;\n      }\n    }\n  }\n\n  public findHierarchyByCode(code: string): HierarchyType {\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let ht: HierarchyType = this.hierarchies[i];\n\n      if (ht.code === code) {\n        return ht;\n      }\n    }\n  }\n\n  public findOrganizationByCode(code: string): Organization {\n    for (let i = 0; i < this.organizations.length; ++i) {\n      let org: Organization = this.organizations[i];\n\n      if (org.code === code) {\n        return org;\n      }\n    }\n  }\n\n  private addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n    this.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n      let got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n      let index = null;\n      for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n        if (got.relatedHierarchies[i] === hierarchyCode) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index == null) {\n        got.relatedHierarchies.push(hierarchyCode);\n      }\n\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  private insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n    this.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  isRA(): boolean {\n    return this.authService.isRA();\n  }\n\n  isOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n    return this.isSRA || this.authService.isOrganizationRA(orgCode);\n  }\n\n  getTypesByOrg(org: Organization): GeoObjectType[] {\n    let orgTypes: GeoObjectType[] = [];\n\n    for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n      let geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n      if (geoObjectType.organizationCode === org.code) {\n        orgTypes.push(geoObjectType);\n      }\n    }\n\n    return orgTypes;\n  }\n\n  getHierarchiesByOrg(org: Organization): HierarchyType[] {\n    let orgHierarchies: HierarchyType[] = [];\n\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let hierarchy: HierarchyType = this.hierarchies[i];\n\n      if (hierarchy.organizationCode === org.code) {\n        orgHierarchies.push(hierarchy);\n      }\n    }\n\n    return orgHierarchies;\n  }\n\n  public refreshAll(desiredHierarchy: HierarchyType) {\n\n    // Clear the types to then refresh\n    this.geoObjectTypes = [];\n\n    this.registryService.init().then(response => {\n      this.localizeService.setLocales(response.locales);\n\n      this.setGeoObjectTypes(response.types);\n\n      this.organizations = response.organizations;\n\n      this.organizations.forEach(org => {\n        if (this.isOrganizationRA(org.code)) {\n          this.userOrganization = org.code;\n        }\n      })\n\n      let pos = this.getGeoObjectTypePosition(\"ROOT\");\n      if (pos) {\n        this.geoObjectTypes.splice(pos, 1);\n      }\n\n      this.setHierarchies(response.hierarchies);\n\n      this.setNodesOnInit(desiredHierarchy);\n\n      this.updateViewDatastructures();\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  public setGeoObjectTypes(types: GeoObjectType[]): void {\n\n    // Set group parent types\n    this.setAbstractTypes(types);\n\n    // Set GeoObjectTypes that aren't part of a group.\n    types.forEach(type => {\n      if (!type.isAbstract) {\n        if (!type.superTypeCode) {\n          this.geoObjectTypes.push(type);\n        }\n      }\n    });\n\n    // Sort aphabetically because all other types to add will be children in a group.\n    this.geoObjectTypes.sort((a, b) => {\n      if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n      else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n      else return 0;\n    });\n\n    // Add group children\n    types.forEach(type => {\n      if (!type.isAbstract) {\n        if (type.superTypeCode && type.superTypeCode.length > 0) {\n\n          for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let setType = this.geoObjectTypes[i];\n            if (type.superTypeCode === setType.code) {\n              this.geoObjectTypes.splice(i + 1, 0, type);\n            }\n          }\n\n        }\n      }\n    });\n\n  }\n\n  private setAbstractTypes(types: GeoObjectType[]): void {\n    types.forEach(type => {\n      if (type.isAbstract) {\n        this.geoObjectTypes.push(type);\n      }\n    });\n  }\n\n  public updateViewDatastructures(): void {\n    this.hierarchiesByOrg = [];\n    this.typesByOrg = [];\n\n    for (let i = 0; i < this.organizations.length; ++i) {\n      let org: Organization = this.organizations[i];\n\n      this.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n      this.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n    }\n\n    this.geoObjectTypes.forEach((got: GeoObjectType) => {\n      got.canDrag = this.calculateCanDrag(got);\n      got.relatedHierarchies = this.calculateRelatedHierarchies(got);\n    });\n\n    this.onFilterChange();\n  }\n\n  public excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n    return (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n  }\n\n  public excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n    return (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n  }\n\n  private setNodesOnInit(desiredHierarchy: HierarchyType): void {\n\n    let index = -1;\n\n    if (desiredHierarchy != null) {\n      index = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n    }\n    else if (this.hierarchies.length > 0) {\n      index = 0;\n    }\n\n    if (index > -1) {\n      const hierarchy = this.hierarchies[index];\n\n      this.setCurrentHierarchy(hierarchy);\n\n      this.renderTree();\n    }\n  }\n\n  private getHierarchy(hierarchyId: string): HierarchyType {\n    let target: HierarchyType = null;\n    this.hierarchies.forEach(hierarchy => {\n      if (hierarchyId === hierarchy.code) {\n        target = hierarchy;\n      }\n    });\n\n    return target;\n  }\n\n  private setHierarchies(data: HierarchyType[]): void {\n    let hierarchies: HierarchyType[] = [];\n    data.forEach((hierarchyType, index) => {\n\n      if (hierarchyType.rootGeoObjectTypes.length > 0) {\n        hierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n          this.processHierarchyNodes(rootGeoObjectType);\n        })\n      }\n\n      hierarchies.push(hierarchyType);\n\n    });\n\n    this.hierarchies = hierarchies\n\n    this.hierarchies.sort((a, b) => {\n      if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n      else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n      else return 0;\n    });\n  }\n\n  private processHierarchyNodes(node: HierarchyNode) {\n    if (node != null) {\n      node.label = this.getHierarchyLabel(node.geoObjectType);\n\n      node.children.forEach(child => {\n        this.processHierarchyNodes(child);\n      })\n    }\n  }\n\n  private getHierarchyLabel(geoObjectTypeCode: string): string {\n    let label: string = null;\n    this.geoObjectTypes.forEach(function(gOT) {\n      if (gOT.code === geoObjectTypeCode) {\n        label = gOT.label.localizedValue;\n      }\n    });\n\n    return label;\n  }\n\n  public handleOnMenu(node: any, $event: any): void {\n    if (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n      this.contextMenuService.show.next({\n        contextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n        event: $event,\n        item: node,\n      });\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n    else {\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n  }\n\n  public treeNodeOnClick(node: any, $event: any): void {\n\n    node.treeModel.setFocusedNode(node);\n\n    if (node.treeModel.isExpanded(node)) {\n      node.collapse();\n    }\n    else {\n      node.treeModel.expandAll();\n    }\n  }\n\n  public hierarchyOnClick(event: any, item: HierarchyType) {\n    this.setCurrentHierarchy(item);\n    this.renderTree();\n  }\n\n  public createHierarchy(): void {\n    this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n\n    (<CreateHierarchyTypeModalComponent>this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n\n      this.hierarchies.push(data);\n\n      this.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n        var nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n        var nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n        if (nameA < nameB) {\n          return -1; //nameA comes first\n        }\n\n        if (nameA > nameB) {\n          return 1; // nameB comes first\n        }\n\n        return 0;  // names must be equal\n      });\n\n      this.updateViewDatastructures();\n    });\n  }\n\n  public deleteHierarchyType(obj: HierarchyType): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n    this.bsModalRef.content.data = obj.code;\n    this.bsModalRef.content.type = \"DANGER\";\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n    (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n      this.removeHierarchyType(data);\n    });\n  }\n\n  public editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n\n    this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n    this.bsModalRef.content.edit = true;\n    this.bsModalRef.content.readOnly = readOnly;\n    this.bsModalRef.content.hierarchyType = obj;\n    this.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n      let pos = this.getHierarchyTypePosition(data.code);\n\n      this.hierarchies[pos].label = data.label;\n      this.hierarchies[pos].description = data.description;\n      this.hierarchies[pos].progress = data.progress;\n      this.hierarchies[pos].acknowledgement = data.acknowledgement;\n      this.hierarchies[pos].disclaimer = data.disclaimer;\n      this.hierarchies[pos].useConstraints = data.useConstraints;\n      this.hierarchies[pos].accessConstraints = data.accessConstraints;\n      this.hierarchies[pos].contact = data.contact;\n      this.hierarchies[pos].phoneNumber = data.phoneNumber;\n      this.hierarchies[pos].email = data.email;\n\n      this.updateViewDatastructures();\n\n      if (this.currentHierarchy.code === data.code) {\n        this.setCurrentHierarchy(this.hierarchies[pos]);\n\n        this.renderTree();\n      }\n    });\n  }\n\n  setCurrentHierarchy(hierarchyType: HierarchyType): void {\n    this.currentHierarchy = hierarchyType;\n  }\n\n  isPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n    // return hierarchy.isPrimary;\n    return hierarchy.code === this.currentHierarchy.code;\n  }\n\n  public removeHierarchyType(code: string): void {\n    this.hierarchyService.deleteHierarchyType(code).then(response => {\n\n      let pos = this.getHierarchyTypePosition(code);\n      this.hierarchies.splice(pos, 1);\n      this.updateViewDatastructures();\n\n      if (this.hierarchies.length > 0) {\n        this.setCurrentHierarchy(this.hierarchies[0]);\n      }\n      else {\n        this.currentHierarchy = null;\n      }\n\n      this.renderTree();\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  public createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean, org: Organization): void {\n    this.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n    this.bsModalRef.content.init(org, this.geoObjectTypes, groupSuperType, isAbstract);\n\n    this.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n\n      data.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n      this.refreshAll(this.currentHierarchy);\n\n    });\n  }\n\n  public deleteGeoObjectType(obj: GeoObjectType): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n    this.bsModalRef.content.data = obj.code;\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n    this.bsModalRef.content.type = ModalTypes.danger;\n\n    (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n      this.removeGeoObjectType(data);\n    });\n  }\n\n  public removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n    this.registryService.deleteGeoObjectType(code).then(response => {\n\n      let pos = this.getGeoObjectTypePosition(code);\n      this.geoObjectTypes.splice(pos, 1);\n\n      this.refreshAll(this.currentHierarchy);\n\n    }).catch((err: HttpErrorResponse) => {\n      if (errCallback != null) {\n        errCallback(err);\n      }\n      this.error(err);\n    });\n  }\n\n  public manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n\n    this.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'manage-geoobjecttype-modal'\n    });\n\n    geoObjectType.attributes.sort((a, b) => {\n      if (a.label.localizedValue < b.label.localizedValue) return -1;\n      else if (a.label.localizedValue > b.label.localizedValue) return 1;\n      else return 0;\n    });\n    this.bsModalRef.content.geoObjectType = geoObjectType;\n    this.bsModalRef.content.readOnly = readOnly;\n\n    (<ManageGeoObjectTypeModalComponent>this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n\n      if (data.isAbstract) {\n        this.refreshAll(this.currentHierarchy);\n      }\n      else {\n        const position = this.getGeoObjectTypePosition(data.code);\n\n        if (position !== -1) {\n          this.geoObjectTypes[position] = data;\n        }\n\n        // Update all of the hierarchies for the new geo object type\n        this.updateViewDatastructures();\n\n        this.hierarchies.forEach((hierarchyType: HierarchyType) => {\n          this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n        });\n\n        // Update the current hierarchy view\n        if (this.currentHierarchy != null) {\n          this.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n        }\n\n        this.renderTree();\n      }\n    });\n  }\n\n  private getHierarchyTypePosition(code: string): number {\n    for (let i = 0; i < this.hierarchies.length; i++) {\n      let obj = this.hierarchies[i];\n      if (obj.code === code) {\n        return i;\n      }\n    }\n  }\n\n  private getGeoObjectTypePosition(code: string): number {\n    for (let i = 0; i < this.geoObjectTypes.length; i++) {\n      let obj = this.geoObjectTypes[i];\n      if (obj.code === code) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  public refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n    this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n    for (let i = 0; i < this.hierarchies.length; ++i) {\n      let hierarchy = this.hierarchies[i];\n\n      if (hierarchy.code === hierarchyType.code) {\n        this.hierarchies[i] = hierarchyType;\n\n        this.setCurrentHierarchy(hierarchyType);\n      }\n    }\n\n    this.updateViewDatastructures();\n\n    this.renderTree();\n  }\n\n  public removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n    const that = this;\n\n    this.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n\n      let got = that.findGeoObjectTypeByCode(gotCode);\n\n      let index = null;\n      for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n        if (got.relatedHierarchies[i] === hierarchyType.code) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index != null) {\n        got.relatedHierarchies.splice(index, 1);\n      }\n\n      that.refreshPrimaryHierarchy(hierarchyType);\n\n    }).catch((err: HttpErrorResponse) => {\n      if (errCallback != null) {\n        errCallback(err);\n      }\n\n      this.error(err);\n    });\n  }\n\n  public isActive(item: HierarchyType) {\n    return this.currentHierarchy === item;\n  };\n\n  onFilterChange(): void {\n    const label = this.filter.toLowerCase();\n\n    this.filteredHierarchiesByOrg = [];\n    this.filteredTypesByOrg = [];\n\n    this.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n\n      const filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n        const index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n        return (index !== -1);\n      });\n\n      this.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n    });\n\n    this.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n\n      const filtered = item.types.filter((type: GeoObjectType) => {\n        const index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n        return (index !== -1);\n      });\n\n      this.filteredTypesByOrg.push({ org: item.org, types: filtered });\n    });\n\n    setTimeout(() => { this.registerDragHandlers(); }, 500);\n  }\n\n  handleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n    this.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  handleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n    this.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n      this.refreshPrimaryHierarchy(ht);\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  public importTypes(): void {\n    this.bsModalRef = this.modalService.show(ImportTypesModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n      'class': 'upload-modal'\n    });\n\n    this.bsModalRef.content.init(this.organizations);\n\n    this.bsModalRef.content.onNodeChange.subscribe(data => {\n      // Reload the page\n      this.refreshAll(null);\n    });\n  }\n\n\n\n  public error(err: HttpErrorResponse): void {\n    this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"type.permissions.includes('WRITE')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false, typeByOrg.org)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!type.permissions.includes('WRITE') && type.permissions.includes('READ')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': (currentHierarchy != null && hierarchy.code === currentHierarchy.code), 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n        <div *ngIf=\"isSRA\" style=\"text-align: center;padding: 10px 0;\">\n          <button (click)=\"importTypes()\" type=\"button\" class=\"btn btn-primary\" style=\"margin-bottom:20px;min-width:45%;\">\n            <localize key=\"hierarchy.sidebar.importTypes\"></localize>\n          </button>                \n        </div>                \n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\">\n                      <div *ngIf=\"isOrganizationRA(currentHierarchy.organizationCode, true)\" id=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n                      </div>\n                      <div *ngIf=\"!isOrganizationRA(currentHierarchy.organizationCode, true)\">\n                          <p class=\"upload-text\">\n                              <localize key=\"hierarchy.content.emptyHierarchy\"></localize>\n                          </p>\n                      </div>\n                    </div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"NodeTooltip\" class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-form\">\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                      <label>\n                        <localize key=\"hierarchy.nodeTooltip.hierarchy\"></localize>\n                      </label>\n                    </div>\n                    <div class=\"holder\">\n                      <label id=\"hierarchyLabel\"></label>\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","import { ChangeType } from \"@registry/model/constants\";\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime, GeoObjectType, HierarchyOverTime, ValueOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService, LocalizationService } from \"@shared/service\";\nimport { Subject } from \"rxjs\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\n\nexport class ChangeRequestEditor {\n\n    changeRequest: ChangeRequest;\n\n    // eslint-disable-next-line no-undef\n    attributeEditors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[];\n\n    geometryAttributeType: AttributeType;\n\n    parentAttributeType: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    geoObjectType: GeoObjectType;\n\n    hierarchies: HierarchyOverTime[];\n\n    private _isValid: boolean;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    localizationService: LocalizationService;\n\n    dateService: DateService;\n\n    registryService: RegistryService;\n\n    constructor(changeRequest: ChangeRequest, geoObject: GeoObjectOverTime, geoObjectType: GeoObjectType, hierarchies: HierarchyOverTime[], geometryAttributeType: AttributeType, parentAttributeType: AttributeType, localizationService: LocalizationService, dateService: DateService, registryService: RegistryService) {\n        this.changeRequest = changeRequest;\n        this.geoObject = geoObject;\n        this.geoObjectType = geoObjectType;\n        this.geometryAttributeType = geometryAttributeType;\n        this.parentAttributeType = parentAttributeType;\n        this.hierarchies = hierarchies;\n        this.localizationService = localizationService;\n        this.dateService = dateService;\n        this.registryService = registryService;\n\n        this.attributeEditors = this.generateAttributeEditors();\n        this.validate();\n    }\n\n    private generateAttributeEditors() {\n        let geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n        let editors = [];\n\n        let attrs = this.geoObjectType.attributes.slice(); // intentionally a shallow copy\n        attrs = attrs.filter(attr => geoObjectAttributeExcludes.indexOf(attr.code) === -1);\n        attrs.push(this.geometryAttributeType);\n        attrs.push(this.parentAttributeType);\n\n        attrs.forEach(attr => {\n            if (attr.code !== \"_PARENT_\") {\n                if (attr.isChangeOverTime) {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, null);\n\n                    editors.push(editor);\n                } else {\n                    let editor = new StandardAttributeCRModel(attr, this.geoObject, this.changeRequest);\n\n                    editors.push(editor);\n                }\n            } else {\n                this.hierarchies.forEach(hierarchy => {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, hierarchy);\n\n                    editors.push(editor);\n                });\n            }\n        });\n\n        return editors;\n    }\n\n    public hasChanges(): boolean {\n        let hasChanges = false;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (attributeEditor.hasChanges()) {\n                hasChanges = true;\n            }\n        });\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    public validate(skipExists: boolean = false): boolean {\n        this._isValid = true;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (!skipExists || attributeEditor.attribute.code !== \"exists\") {\n                attributeEditor.validate(true);\n\n                if (!attributeEditor.isValid()) {\n                    this._isValid = false;\n                }\n            }\n        });\n\n        return this._isValid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.geoObject.attributes[attributeCode]) {\n            let index = this.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditorForAttribute(attribute: AttributeType, hierarchy: HierarchyOverTime = null): ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel {\n        let indexOf = this.attributeEditors.findIndex(editor => (!editor.attribute.isChangeOverTime || (hierarchy == null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy == null) || ((editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy != null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy.code === hierarchy.code)) && editor.attribute.code === attribute.code);\n\n        if (indexOf === -1) {\n            return null;\n        } else {\n            return this.attributeEditors[indexOf];\n        }\n    }\n\n    public getEditors(): (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] {\n        return this.attributeEditors;\n    }\n\n    public onChange(type: ChangeType) {\n        this.onChangeSubject.next(type);\n    }\n\n    public existsAtDate(date: string) {\n        let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.geoObjectType, \"exists\");\n        let existEditors = (this.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n\n        let valLen = existEditors.length;\n        for (let j = 0; j < valLen; ++j) {\n            let editor: ValueOverTimeCREditor = existEditors[j];\n\n            if (editor.startDate != null && editor.endDate != null && !editor.isDelete() && editor.value === true && this.dateService.between(date, editor.startDate, editor.endDate)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { HierarchyType, HierarchyGroupedTypeView } from \"@registry/model/hierarchy\";\nimport { TreeEntity } from \"@registry/model/registry\";\nimport { EventService } from \"@shared/service\";\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getHierarchyTypes(types: any): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"types\", JSON.stringify(types));\n\n        return this.http\n            .get<HierarchyType[]>(acp + \"/cgr/hierarchytype/get-all\", { params: params })\n            .toPromise();\n    }\n\n    getHierarchyGroupedTypes(): Promise<HierarchyGroupedTypeView[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<HierarchyGroupedTypeView[]>(acp + \"/hierarchy/groupedTypes\", { params: params })\n            .toPromise();\n    }\n\n    addChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/add\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/insertBetweenTypes\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/remove\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/create\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/update\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteHierarchyType(code: string): Promise<TreeEntity> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>(acp + \"/cgr/hierarchytype/delete\", { code: code }, { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/setInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, inheritedHierarchyTypeCode: inheritedHierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/removeInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from \"@registry/model/io\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    importSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(acp + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport(configuration: ImportConfiguration): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/etl/cancel-import\", JSON.stringify({ configuration: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    importShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(acp + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    listGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"includeAbstractTypes\", includeAbstractTypes.toString());\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>(acp + \"/cgr/geoobjecttype/list-types\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        params = params.set(\"includeInheritedTypes\", includeInheritedTypes.toString());\r\n\r\n        return this.http\r\n            .get<Location[]>(acp + \"/cgr/geoobjecttype/get-ancestors\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + \"/cgr/geoobjecttype/get-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + \"/cgr/geoobjecttype/get-subtype-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>(acp + \"/geo-synonym/createGeoEntitySynonym\", JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geo-synonym/deleteGeoEntitySynonym\", JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"mdAttributeId\", mdAttributeId);\r\n        params = params.set(\"text\", text);\r\n        params = params.set(\"limit\", limit);\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>(acp + \"/uploader/getClassifierSuggestions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    createTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n        return this.http\r\n            .post<Synonym>(acp + \"/uploader/createClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym(synonymId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ synonymId: synonymId });\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/uploader/deleteClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/addterm\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from \"@shared/service\";\n\nimport { AllLocaleInfo } from \"@registry/model/localization-manager\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>(acp + \"/localization/getNewLocaleInformation\")\n            .toPromise();\n    }\n\n    installLocale(language: string, country: string, variant: string): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if (language != null) {\n            params = params.set(\"language\", language);\n        }\n\n        if (country != null) {\n            params = params.set(\"country\", country);\n        }\n\n        if (variant != null) {\n            params = params.set(\"variant\", variant);\n        }\n\n        return this.http\n            .get<void>(acp + \"/localization/installLocale\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\nimport * as mapboxgl from \"mapbox-gl\";\r\n\r\nimport { LocationInformation } from \"@registry/model/location-manager\";\r\nimport { EventService } from \"@shared/service\";\r\nimport { GeoObject } from \"@registry/model/registry\";\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) {\r\n        (mapboxgl as any).accessToken = \"pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNWE5bWkwazYwNGFtb3loOGxsbjR1In0.ZNEwT-pBnGookEb-BF_jQQ\";\r\n    }\r\n\r\n    roots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (typeCode != null) {\r\n            params = params.set(\"typeCode\", typeCode);\r\n        }\r\n\r\n        if (hierarchyCode != null) {\r\n            params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        }\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<LocationInformation>(acp + \"/registrylocation/roots\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    search(text: string, date: string): Promise<{ type: string, features: GeoObject[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"text\", text);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ type: string, features: GeoObject[] }>(acp + \"/registrylocation/search\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport {\r\n    GeoObject, GeoObjectType, AttributeType, Term, MasterList, MasterListVersion, ParentTreeNode,\r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage,\r\n    MasterListByOrg\r\n} from \"@registry/model/registry\";\r\n\r\nimport { HierarchyType } from \"@registry/model/hierarchy\";\r\nimport { Progress } from \"@shared/model/progress\";\r\n\r\nimport { Organization, LocaleView } from \"@shared/model/core\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }>(acp + \"/cgr/init\")\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (types != null) {\r\n            params = params.set(\"types\", JSON.stringify(types));\r\n        }\r\n\r\n        if (hierarchies != null) {\r\n            params = params.set(\"hierarchies\", JSON.stringify(hierarchies));\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>(acp + \"/cgr/geoobjecttype/get-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects(childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"childId\", childId);\r\n        params = params.set(\"childTypeCode\", childTypeCode);\r\n        params = params.set(\"parentTypes\", JSON.stringify(parentTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>(acp + \"/cgr/geoobject/get-parent-geoobjects\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getChildGeoObjects(parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"parentId\", parentId);\r\n        params = params.set(\"parentTypeCode\", parentTypeCode);\r\n        params = params.set(\"childrenTypes\", JSON.stringify(childrenTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>(acp + \"/cgr/geoobject/getchildren\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    doesGeoObjectExistAtRange(startDate: string, endDate: string, typeCode: string, code: string): Promise<{exists: boolean, invalid: boolean}> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"startDate\", startDate);\r\n        params = params.set(\"endDate\", endDate);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"code\", code);\r\n\r\n        return this.http\r\n            .get<{exists: boolean, invalid: boolean}>(acp + \"/geoobject/exists-at-range\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(acp + \"/cgr/geoobjecttype/create\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(acp + \"/cgr/geoobjecttype/update\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType(code: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/cgr/geoobjecttype/delete\", JSON.stringify({ code: code }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/addattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/updateattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<boolean>(acp + \"/cgr/geoobjecttype/deleteattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeName: attributeName }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/addterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: term }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/updateterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: termJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject(id: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"id\", id);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(acp + \"/cgr/geoobject/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/cgr/geoobject/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"date\", date);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/cgr/geoobject-time/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(acp + \"/cgr/geoobject/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject(code: string, typeCode: string): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>(acp + \"/cgr/geoobject/get-hierarchies-over-time\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, parentTypeCode: string, hierarchy: string, startDate: string, endDate: string): Promise<{id: string, code: string, name: string, typeCode: string, uid: string}[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if (parentTypeCode != null) {\r\n            params.parentTypeCode = parentTypeCode;\r\n        }\r\n\r\n        if (startDate != null && endDate != null) {\r\n            params.startDate = startDate;\r\n            params.endDate = endDate;\r\n        }\r\n\r\n        return this.http\r\n            .post<{id: string, code: string, name: string, typeCode: string, uid: string}[]>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/etl/get-active\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/etl/get-completed\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(acp + \"/etl/get-import-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(acp + \"/etl/get-export-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/etl/import-resolve\", JSON.stringify({ historyId: historyId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitValidationResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/etl/validation-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitErrorResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/etl/error-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>(acp + \"/master-list/list-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListHistory(oid: string, versionType: string): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n        params = params.set(\"versionType\", versionType);\r\n\r\n        return this.http\r\n            .get<MasterList>(acp + \"/master-list/versions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getAllMasterListVersions(): Promise<MasterList[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<MasterList[]>(acp + \"/master-list/list-all-versions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListVersion(oid: string): Promise<MasterListVersion> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<MasterListVersion>(acp + \"/master-list/version\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<LocaleView[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<LocaleView[]>(acp + \"/localization/get-locales\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", geoObjectCode);\r\n        params = params.set(\"typeCode\", geoObjectTypeCode);\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>(acp + \"/cgr/geoobject-time/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectOverTime(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject-time/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>(acp + \"/cgr/geoobject/setAttributeVersions\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterList(list: MasterList): Promise<MasterList> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/master-list/create\", JSON.stringify({ list: list }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterListVersion(oid: string, forDate: string): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterListVersion>(acp + \"/master-list/create-version\", JSON.stringify({ oid: oid, forDate: forDate }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterListVersions(oid: string): Promise<{ job: string }> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<{ job: string }>(acp + \"/master-list/publish-versions\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterList(oid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/master-list/remove\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterListVersion(oid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/master-list/remove-version\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterList(oid: string): Observable<string> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http.post<string>(acp + \"/master-list/publish\", JSON.stringify({ oid: oid }), { headers: headers });\r\n    }\r\n\r\n    getMasterList(oid: string): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<MasterList>(acp + \"/master-list/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit(geoObjectCode: string, geoObjectTypeCode: string, actions: string, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n\t  // TODO\r\n\t\t// Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n\t\t// This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n\t\t// for(const prop in geoObject.attributes) {\r\n\t\t//\tlet attr = geoObject.attributes[prop];\r\n \t\t//\tif(attr.type === \"date\"){\r\n\t\t//\t\tattr.values.forEach( val => {\r\n\t\t//\t\t\tval.value = new Date(val.value).getTime().toString();\r\n\t\t//\t\t})\r\n\t\t//\t}\r\n\t\t// }\r\n\r\n        let params = { geoObjectCode: geoObjectCode, geoObjectTypeCode: geoObjectTypeCode, actions: actions };\r\n\r\n        if (masterListId != null) {\r\n            params[\"masterListId\"] = masterListId;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geoobject-editor/updateGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n    * Not really part of the RegistryService\r\n    */\r\n    applyGeoObjectCreate(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n    // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n    // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        for (const prop in geoObject.attributes) {\r\n            let attr = geoObject.attributes[prop];\r\n            if (attr.type === \"date\") {\r\n                attr.values.forEach(val => {\r\n                    val.value = new Date(val.value).getTime().toString();\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = { geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if (parentTreeNode != null) {\r\n            params[\"parentTreeNode\"] = parentTreeNode;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geoobject-editor/createGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    data(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid,\r\n            sort: sort\r\n        } as any;\r\n\r\n        if (pageNumber != null) {\r\n            params.pageNumber = pageNumber;\r\n        }\r\n\r\n        if (pageSize != null) {\r\n            params.pageSize = pageSize;\r\n        }\r\n\r\n        if (filter.length > 0) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/master-list/data\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    values(oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[]): Promise<{ label: string, value: string }[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid,\r\n            attributeName: attributeName,\r\n            valueAttribute: valueAttribute\r\n        } as any;\r\n\r\n        if (filter.length > 0) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        if (value != null && value.length > 0) {\r\n            params.value = value;\r\n        }\r\n\r\n        return this.http\r\n            .post<{ label: string, value: string }[]>(acp + \"/master-list/values\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    publishShapefile(oid: string): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<MasterListVersion>(acp + \"/master-list/generate-shapefile\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    progress(oid: string): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<Progress>(acp + \"/master-list/progress\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListsByOrg(): Promise<{ orgs: MasterListByOrg[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + \"/master-list/list-org\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/master-list/get-publish-jobs\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getDatasetBounds(oid: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/master-list/bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n\tgetOrganizations(): Promise<Organization[]> {\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Organization[]>(acp + '/cgr/organizations/get-all')\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n  exportToFhir(oid: string, systemId: string): Promise<MasterListVersion> {\r\n    let headers = new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    });\r\n\r\n    let params = {\r\n      oid: oid,\r\n      systemId: systemId\r\n    } as any;\r\n\r\n    return this.http\r\n      .post<MasterListVersion>(acp + '/master-list/export-to-fhir', JSON.stringify(params), { headers: headers })\r\n      .toPromise();\r\n  }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from \"@registry/model/registry\";\nimport { AttributeConfigInfo } from \"@registry/model/sync\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<SynchronizationConfig>>(acp + \"/synchronization-config/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<SynchronizationConfig> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<SynchronizationConfig>(acp + \"/synchronization-config/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<AttributeConfigInfo[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalId\", externalId);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<AttributeConfigInfo[]>(acp + \"/synchronization-config/get-custom-attr\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalSystemId\", externalSystemId);\n        params = params.set(\"hierarchyTypeCode\", hierarchyTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<any[]>(acp + \"/synchronization-config/get-config-for-es\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SynchronizationConfig>(acp + \"/synchronization-config/apply\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {};\n\n        if (oid != null) {\n            params = { oid: oid };\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(acp + \"/synchronization-config/edit\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    run(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/run\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJobs(oid: string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        //        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExportScheduledJob>>(acp + \"/synchronization-config/get-jobs\", { params: params })\n            //            .pipe(finalize(() => {\n            //                this.eventService.complete();\n            //            }))\n            .toPromise();\n    }\n\n    getFhirExportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(acp + \"/synchronization-config/get-fhir-export-implementations\", { params: params })\n            .toPromise();\n    }\n\n    getFhirImportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(acp + \"/synchronization-config/get-fhir-import-implementations\", { params: params })\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { PaginationPage } from \"@registry/model/registry\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    getMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PaginationPage> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"orderBy\", \"createDate\");\r\n        params = params.set(\"pageNum\", pageNum.toString());\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"whereStatus\", whereStatus);\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/tasks/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    completeTask(taskId: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/tasks/complete\", JSON.stringify({ id: taskId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setTaskStatus(taskId: string, status: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/tasks/setTaskStatus\", JSON.stringify({ id: taskId, status: status }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","import * as d3 from \"d3\";\n\nexport function calculateTextWidth(text: string, fontSize: number): number {\n    let svg = d3.select(\"#svg\");\n\n    let textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n    let textEl = textCalcGroup.append(\"text\")\n        .attr(\"x\", -5000)\n        .attr(\"y\", -5000)\n        .attr(\"font-size\", fontSize)\n        .text(text);\n\n    let bbox = textEl.node().getBBox();\n\n    d3.select(\".g-text-calc\").remove();\n\n    return bbox.width + 2; // +2 is for padding. I caught this truncating just ever so slightly\n}\n\nexport function svgPoint(x: number, y: number) {\n    let svg: any = d3.select(\"#svg\").node();\n    let pt = svg.createSVGPoint();\n\n    pt.x = x;\n    pt.y = y;\n\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n    return point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) ||\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) &&\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n    return { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.code === 'invalid' ? false : attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy, true ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\nimport { GeoObjectType, GeoObjectOverTime } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"submit-change-request\",\n    templateUrl: \"./submit-change-request.component.html\",\n    styleUrls: [\"./submit-change-request.css\"]\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    geoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    loading: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor(private modalService: BsModalService, private registryService: RegistryService,\n        private changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.dataSource = Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes([], null).then(types => {\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                const type = types[i];\n                const orgCode = type.organizationCode;\n                const typeCode = type.superTypeCode != null && type.superTypeCode != \"\" ? type.superTypeCode : type.code;\n\n                if (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort((a, b) => {\n                if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n                else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n                else return 0;\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public handleDateChange() {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n        } else {\n            this.forDate = null;\n        }\n    }\n\n    public onValidChange(newValid: boolean) {\n        if (this.geoObject == null) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading(e: boolean): void {\n        this.loading = e;\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n            this.geoObject = geoObject;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.geoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div style=\"margin-top:50px;margin-bottom:50px;background:#f7f7f7;width:100%;padding:10px;\">\n      <h3 style=\"margin-bottom: 20px;\"><localize key=\"change.request.search.for.geoobject.header\"></localize></h3>\n      <div class=\"row\">\n\n        <div class=\"col-md-3\">\n          <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>\n          <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\" [(ngModel)]=\"geoObjectType\" required>\n            <option>  </option>\n            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n          </select>\n        </div>\n        \n        <div class=\"col-md-3\">\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"!geoObjectType\" \n            [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" customStyles=\"width:100%\"></date-field>\n        </div>\n        \n        <div class=\"col-md-4\">\n          <localize key=\"change.request.search.for.geoobject.search.label\"></localize>\n          <input type=\"text\" [ngClass]=\"{'inline-loading':loading}\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" (typeaheadLoading)=\"changeTypeaheadLoading($event)\" [placeholder]=\"('masterlist.search' | localize) + '...'\" class=\"form-control\" autocomplete=\"off\">\n        </div>\n        \n        <div class=\"col-md-2\">\n          <label></label>\n           <!-- We cannot use the dataset-location-manager here because it pulls the tiles from the dataset (list) and we don't have a dataset. -->\n           <!-- <a *ngIf=\"preGeoObject && forDate\" [routerLink]=\"['/registry/dataset-location-manager', '123', preGeoObject.attributes.type, 'false', dateStr, preGeoObject.attributes.code, 'true']\" -->\n          \n           <a *ngIf=\"geoObject && forDate\" [routerLink]=\"['/registry/location-manager', geoObject.attributes.uid, geoObject.attributes.type, dateStr, 'true', 'CR']\">\n            <button class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n          </a>\n          <button *ngIf=\"!(geoObject && forDate)\" disabled=\"true\" class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n        </div>\n\n      </div>\n      \n    </div>\n  </div>\n</div>","import { Component, Input } from \"@angular/core\";\n\nimport { Step, StepConfig } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"step-indicator\",\n    templateUrl: \"./step-indicator.component.html\",\n    styleUrls: [\"./step-indicator.css\"]\n})\nexport class StepIndicatorComponent {\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"steps\")\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n    constructor() {\n        this._stepConfig = { steps: [] };\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ContextLayer, ContextLayerGroup, MasterList } from \"@registry/model/registry\";\nimport { ContextLayerModalComponent } from \"./context-layer-modal.component\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"layer-panel\",\n    templateUrl: \"./layer-panel.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LayerPanelComponent implements OnInit, OnChanges {\n\n    @Input() filter: string[] = [];\n    @Output() layerChange = new EventEmitter<ContextLayer>();\n    @Output() baseLayerChange = new EventEmitter<any>();\n\n    baselayerIconHover = false;\n\n    lists: MasterList[] = [];\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"baselayer.satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n//         {\n//             name: 'Streets',\n//             label: 'baselayer.streets',\n//             id: 'streets-v11',\n//             sprite: 'mapbox://sprites/mapbox/streets-v11',\n//             url: 'mapbox://styles/mapbox/streets-v11'\n//         }\n    ];\n\n    contextLayerGroups: ContextLayerGroup[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, public service: RegistryService) { }\n\n    ngOnInit(): void {\n        this.service.getAllMasterListVersions().then(lists => {\n            this.lists = lists;\n\n            this.updateContextGroups();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.filter.currentValue !== changes.filter.previousValue) {\n            this.updateContextGroups();\n        }\n    }\n\n    updateContextGroups(): void {\n        this.lists.forEach(list => {\n            let contextGroup = { oid: list.oid, displayLabel: list.displayLabel.localizedValue, contextLayers: [] };\n\n            list.versions.forEach(version => {\n                const index = this.filter.indexOf(version.oid);\n\n                if (index === -1) {\n                    let thisContextLayer = { oid: version.oid, displayLabel: version.forDate, active: false, enabled: false };\n\n                    contextGroup.contextLayers.push(thisContextLayer);\n                }\n            });\n\n            if (contextGroup.contextLayers.length > 0) {\n                this.contextLayerGroups.push(contextGroup);\n            }\n        });\n    }\n\n    groupHasEnabledContextLayers(group: string): boolean {\n        let hasEnabled = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            if (cLayerGroup.oid === group) {\n                cLayerGroup.contextLayers.forEach(cLayer => {\n                    if (cLayer.enabled) {\n                        hasEnabled = true;\n                    }\n                });\n            }\n        });\n\n        return hasEnabled;\n    }\n\n    hasEnabledContextLayers(): boolean {\n        let hasEnabled = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            cLayerGroup.contextLayers.forEach(cLayer => {\n                if (cLayer.enabled) {\n                    hasEnabled = true;\n                }\n            });\n        });\n\n        return hasEnabled;\n    }\n\n    toggleContextLayer(layer: ContextLayer): void {\n        layer.active = !layer.active;\n\n        this.layerChange.emit(layer);\n    }\n\n    removeContextLayer(layer: ContextLayer): void {\n        layer.active = false;\n        layer.enabled = false;\n\n        this.layerChange.emit(layer);\n    }\n\n    addContextLayerModal(): void {\n        let bsModalRef = this.modalService.show(ContextLayerModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            // eslint-disable-next-line quote-props\n            \"class\": \"context-layer-modal\"\n        });\n        bsModalRef.content.contextLayerGroups = this.contextLayerGroups;\n\n        //        bsModalRef.content.onSubmit.subscribe(() => {\n        //\n        //            this.contextLayerGroups.forEach(cLayerGroup => {\n        //                cLayerGroup.contextLayers.forEach(cLayer => {\n        //\n        //                    console.log(\"Emitting event\", cLayer);\n        //                    this.layerChange.emit(cLayer);\n        //                });\n        //            })\n        //\n        //        });\n    }\n\n    toggleBaseLayer(layer: any): void {\n        this.baseLayers.forEach(bl => {\n            bl.active = false;\n        });\n\n        layer.active = true;\n\n        this.baseLayerChange.emit(layer);\n    }\n\n}\n","\n<div class=\"layer-toggle\" (mouseenter)=\"baselayerIconHover = true\" (mouseleave)=\"baselayerIconHover = false\">\n\n  <i class=\"fa fa-bars\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n  <div [hidden]=\"!baselayerIconHover\">\n\n    <div style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.base.layers.label\"></localize>\n      </h4>\n      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n        <input class=\"layer-toggle-input\" type='radio' name='baselayers' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"toggleBaseLayer(baseLayer)\">\n        <label class=\"layer-toggle-label\"><localize [key]=\"baseLayer.label\"></localize></label>\n      </div>\n    </div>\n    <div>\n      <div *ngIf=\"hasEnabledContextLayers()\">\n        <h4>\n          <localize key=\"explorer.context.layers.label\"></localize>\n        </h4>\n        <div class=\"list-group\">\n          <div *ngFor=\"let cLayerGroup of contextLayerGroups;\">\n            <div *ngIf=\"groupHasEnabledContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n              <label>{{ cLayerGroup.displayLabel }}</label>\n              <div class=\"list-group\">\n                <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                  <div class=\"list-group-item\" style=\"border: none;\" *ngIf=\"cLayer.enabled\">\n                    <input type=\"checkbox\" [checked]=\"cLayer.active\" (click)=\"toggleContextLayer(cLayer)\"> {{ cLayer.displayLabel }} <i class=\"fa fa-times delete-btn clickable\" aria-hidden=\"true\" (click)=\"removeContextLayer(cLayer)\"></i>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n      <button class=\"btn btn-primary\" (click)=\"addContextLayerModal()\">+ <localize key=\"explorer.add.context.layer.button.label\"></localize></button>\n    </div>\n\n  </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\nimport { ErrorModalComponent, ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"feature-panel\",\n    templateUrl: \"./feature-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class FeaturePanelComponent implements OnInit {\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\",\n        GEOMETRY: \"GEOMETRY\"\n    }\n\n    @Input() datasetId: string;\n\n    @Input() type: GeoObjectType;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set code(value: string) {\n        this.updateCode(value);\n    }\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    _code: string = null;\n\n    @Output() featureChange = new EventEmitter<GeoObjectOverTime>();\n    @Output() modeChange = new EventEmitter<boolean>();\n    @Output() panelCancel = new EventEmitter<void>();\n    @Output() panelSubmit = new EventEmitter<{isChangeRequest:boolean, geoObject?: any, changeRequestId?: string}>();\n\n    _isValid: boolean = true;\n\n    bsModalRef: BsModalRef;\n\n    mode: string = null;\n\n    isMaintainer: boolean;\n\n    // The current state of the GeoObject in the GeoRegistry\n    preGeoObject: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    postGeoObject: GeoObjectOverTime;\n\n    attribute: AttributeType = null;\n\n    isNew: boolean = false;\n\n    isEdit: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    hierarchy: HierarchyOverTime = null;\n\n    reason: string = \"\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private modalService: BsModalService, private authService: AuthService, private geometryService: GeometryService) { }\n\n    ngOnInit(): void {\n        this.isMaintainer = this.authService.isSRA() || this.authService.isOrganizationRA(this.type.organizationCode) || this.authService.isGeoObjectTypeOrSuperRM(this.type);\n        this.mode = \"ATTRIBUTES\";\n\n//        this.isEdit = !this.readOnly;\n    }\n\n    setValid(valid: boolean): void {\n        this._isValid = valid;\n    }\n\n    isValid(): boolean {\n        return this._isValid && this.attributeEditor && this.attributeEditor.isValid();\n    }\n\n    updateCode(code: string): void {\n        this._code = code;\n        this.postGeoObject = null;\n        this.preGeoObject = null;\n        this.hierarchies = null;\n\n        if (code != null && this.type != null) {\n            if (code !== \"__NEW__\") {\n                this.isNew = false;\n\n                this.service.getGeoObjectOverTime(code, this.type.code).then(geoObject => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(geoObject)).attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n\n                this.service.getHierarchiesForGeoObject(code, this.type.code).then((hierarchies: HierarchyOverTime[]) => {\n                    this.hierarchies = hierarchies;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else {\n                this.isNew = true;\n\n                this.service.newGeoObjectOverTime(this.type.code).then(retJson => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, retJson.geoObject.attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n\n                    this.hierarchies = retJson.hierarchies;\n                    this.setEditMode(true);\n                });\n            }\n        }\n    }\n\n    onCancelInternal(): void {\n        this.panelCancel.emit();\n\n        // if (this._code === '__NEW__') {\n        //    this.updateCode(null);\n        // }\n        // else {\n        //    this.updateCode(this._code);\n        // }\n    }\n\n    canSubmit(): boolean {\n        return this.isValid() &&\n          (this.isMaintainer || (this.reason && this.reason.trim().length > 0)) &&\n          (this.isNew || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    onSubmit(): void {\n        if (this.isNew) {\n            this.service.applyGeoObjectCreate(this.hierarchies, this.postGeoObject, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                    this.updateCode(this._code);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.service.applyGeoObjectEdit(this.postGeoObject.attributes.code, this.type.code, this.attributeEditor.getActions(), this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                    this.updateCode(this._code);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n\n        this.geometryService.stopEditing();\n    }\n\n    onManageAttributeVersion(attribute: AttributeType): void {\n        this.attribute = attribute;\n        this.mode = this.MODE.VERSIONS;\n    }\n\n    onManageHiearchyVersion(hierarchy: HierarchyOverTime): void {\n        this.hierarchy = hierarchy;\n        this.mode = this.MODE.HIERARCHY;\n    }\n\n    onEditAttributes(): void {\n        this.setEditMode(!this.isEdit);\n\n        window.document.getElementById(\"navigator-left-sidebar\").scroll({\n            top: 0,\n            behavior: \"smooth\"\n        });\n    }\n\n    setEditMode(value: boolean): void {\n        this.isEdit = value;\n        this.reason = null;\n\n        this.modeChange.emit(this.isEdit);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div *ngIf=\"mode == MODE.ATTRIBUTES && postGeoObject != null\">\n    <!-- Attributes tab -->\n    <geoobject-shared-attribute-editor  *ngIf=\"hierarchies\"\n      #attributeEditor \n      [geoObjectType]=\"type\" \n      [postGeoObject]=\"postGeoObject\" \n      [isNew]=\"isNew\" \n      [isGeometryInlined]=\"false\"\n      [hierarchies]=\"hierarchies\"\n      [readOnly]=\"!isEdit\"\n      (valid)=\"setValid($event)\"\n      [filterDate]=\"forDate\"\n      [forDate]=\"forDate\"\n      [datasetId]=\"datasetId\"\n      > \n    </geoobject-shared-attribute-editor>\n    \n    <div *ngIf=\"isEdit && !isMaintainer\" class=\"form-group\" style=\"z-index: 0;\">\n      <label> \n        <localize key=\"change.request.reason.label\"></localize>\n      </label>\n      <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" class=\"form-control\" name=\"reason-input\" required></textarea>\n    </div>\n\n    <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    \n      <button *ngIf=\"!readOnly && !isEdit\" type=\"submit\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n        <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n      </button>\n      \n      <button *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-default\" (click)=\"onCancelInternal()\">\n        <localize key=\"modal.button.cancel\"></localize>\n      </button>\n      <button *ngIf=\"isEdit\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!canSubmit()\">\n        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n      </button>\n\n    </div>\n  </div>\n</div>","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ErrorHandler } from '@shared/component';\nimport { Organization } from '@shared/model/core';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService, LocalizationService } from '@shared/service';\n\ndeclare var acp: string;\n\n@Component({\n  selector: 'import-types-modal',\n  templateUrl: './import-types-modal.component.html',\n  styleUrls: []\n})\nexport class ImportTypesModalComponent implements OnInit {\n\n  public organizations: Organization[] = [];\n  public orgCode: string;\n\n\n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n\n  @ViewChild('myFile')\n  fileRef: ElementRef;\n\n  message: string = null;\n\n  public onNodeChange: Subject<boolean>;\n\n  constructor(private eventService: EventService, private localizationService: LocalizationService, public bsModalRef: BsModalRef) {\n  }\n\n  ngOnInit(): void {\n    this.onNodeChange = new Subject();\n  }\n\n  init(organizations: Organization[]): void {\n    this.organizations = organizations;\n\n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/cgr/import-types'\n    };\n\n    this.uploader = new FileUploader(options);\n\n    this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n      form.append('orgCode', this.orgCode);\n    };\n    this.uploader.onBeforeUploadItem = (fileItem: any) => {\n      this.eventService.start();\n    };\n    this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n      this.fileRef.nativeElement.value = \"\";\n      this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n      this.onNodeChange.next(true);\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n      const error = JSON.parse(response)\n\n      this.error({ error: error });\n    }\n\n  }\n\n  onSelect(orgCode: string): void {\n    this.orgCode = orgCode;\n  }\n\n  onClick(): void {\n\n    if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error({\n        message: this.localizationService.decode('io.missing.file'),\n        error: {},\n      });\n    }\n  }\n\n\n  public error(err: any): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1> <localize key=\"hierarchy.sidebar.importTypes\"></localize> </h1>\n    </div> \n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"attribute.organization.label\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <select (change)=\"onSelect($event.target.value)\">\n              <option></option>\n              <option *ngFor=\"let organization of organizations\" value={{organization.code}}>{{organization.label.localizedValue}}</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"hierarchy.sidebar.xmlFile\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xml\" required /> \n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\"></div>\n          <div class=\"holder\">\n            <div class=\"button-holder\">\n              <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.cancel\"></localize>\n                </span>\n              </button>\n              <button type=\"submit\" (click)=\"onClick()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.ok\"></localize>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n</div>\n","import { Component   } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { ExternalSystemService } from '@shared/service';\nimport { ExternalSystem } from '@shared/model/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'export-system-modal',\n  templateUrl: './export-system-modal.component.html',\n  styleUrls: []\n})\nexport class ExportSystemModalComponent {\n\n  systems: ExternalSystem[] = [];\n\n  system: string = null;\n\n  /*\n   * Called on confirm\n   */\n  public onSystemSet: Subject<string>;\n\n  constructor(public bsModalRef: BsModalRef, private externalSystemService: ExternalSystemService) { }\n\n  ngOnInit(): void {\n    this.onSystemSet = new Subject();\n\n    this.externalSystemService.getExternalSystems(1, 1000).then(systems => {\n      this.systems = systems.resultSet.filter(sys => sys.type === 'FhirExternalSystem');\n    }).catch((err: HttpErrorResponse) => {\n    });\n\n  }\n\n  confirm(): void {\n    this.bsModalRef.hide();\n    this.onSystemSet.next(this.system);\n  }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"export-fhir-modal.title\"></localize>\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label> <localize key=\"export-fhir-modal.system\"></localize>\n                    </label> <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"system\" required>\n                        <option></option>\n                        <option *ngFor=\"let system of systems\" [value]=\"system.oid\">{{system.label.localizedValue}}</option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"system == null || system == ''\" class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"create-hierarchy-type-modal\",\n    templateUrl: \"./create-hierarchy-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n\n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n    readOnly: boolean = false;\n\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            rootGeoObjectTypes: [],\n            organizationCode: \"\"\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n            // Filter out organizations they're not RA's of, unless we're readOnly.\n            if (!this.readOnly) {\n                this.organizations = [];\n\n                for (var i = 0; i < orgs.length; ++i) {\n                    if (this.auth.isOrganizationRA(orgs[i].code)) {\n                        this.organizations.push(orgs[i]);\n                    }\n                }\n            } else {\n                this.organizations = orgs;\n            }\n\n            if (!this.edit && this.organizations.length === 1) {\n                this.hierarchyType.organizationCode = this.organizations[0].code;\n                this.organizationLabel = this.organizations[0].label.localizedValue;\n            } else if (this.edit || this.readOnly) {\n                this.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getOrganizationLabelFromCode(orgCode: string) {\n        for (var i = 0; i < this.organizations.length; ++i) {\n            if (this.organizations[i].code === orgCode) {\n                return this.organizations[i].label.localizedValue;\n            }\n        }\n\n        console.log(\"Did not find org with code [\" + orgCode + \"]\");\n        return orgCode;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if (this.readOnly) {\n            this.bsModalRef.hide();\n            return;\n        }\n\n        if (this.edit) {\n            this.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize *ngIf=\"!edit\" key=\"hierarchy.management.create.hierarchy.title\"></localize>\n            <localize *ngIf=\"edit\" key=\"hierarchy.management.update.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> \n          <span  style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      \n      <localized-text [(value)]=\"hierarchyType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\" [disabled]=\"readOnly\"></localized-text>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.disclaimer\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.disclaimer\" name=\"disclaimer\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.accessConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.useConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      \n      <hr/>\n      \n      <div class=\"form-group\">\n        <h4>\n          <localize key=\"masterlist.contact\"></localize>\n        </h4>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.phoneNumber\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.phoneNumber\" name=\"phoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.email\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1 || form.invalid\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\n@Component({\n    selector: \"create-geoobjtype-modal\",\n    templateUrl: \"./create-geoobjtype-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organization: Organization = null;\n    message: string = null;\n    parents: GeoObjectType[];\n    hierarchyType: HierarchyType;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            geometryType: \"MULTIPOINT\",\n            isLeaf: false,\n            isGeometryEditable: true,\n            organizationCode: \"\",\n            attributes: []\n        };\n    }\n\n    init(organization: Organization, parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n        this.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\n        if (groupSuperType) {\n            this.geoObjectType.superTypeCode = groupSuperType.code;\n            this.geoObjectType.geometryType = groupSuperType.geometryType;\n            this.geoObjectType.isPrivate = groupSuperType.isPrivate;\n        }\n\n        // Filter out parents that are not abstract\n        this.parents = parents.filter(parent => parent.isAbstract);\n\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n        this.geoObjectType.organizationCode = this.organization.code;\n        this.organizationLabel = this.organization.label.localizedValue;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n            this.onGeoObjTypeCreate.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    toggleIsAbstract(): void {\n        this.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"geoObjectType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <label style=\"display: block;\">\n            <localize key=\"attribute.group.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n        \n          <label style=\"display: block;\">\n            <localize key=\"geoObjectType.attr.visibility.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"geoObjectType.superTypeCode != null\" [(value)]=\"geoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [disabled]=\"geoObjectType.superTypeCode != null && geoObjectType.superTypeCode != ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { ManageGeoObjectTypeModalState, GeoObjectType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-geoobjecttype-modal\",\n    templateUrl: \"./manage-geoobjecttype-modal.component.html\",\n    styleUrls: [\"./manage-geoobjecttype-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, geoObjectTypeManagementService: GeoObjectTypeManagementService) {\n        this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe(modalState => {\n            this.modalState = modalState;\n        });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy() {\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the\n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next(data);\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form>\n\n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n\n<!--   @Deprecate -->\n<!--   <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></manage-attributes-modal> -->\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\"></edit-term-option-input>\n\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, AttributeType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"geoobjecttype-input\",\n    templateUrl: \"./geoobjecttype-input.component.html\",\n    styleUrls: [\"./geoobjecttype-input.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n\n    organizationLabel: string;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"setGeoObjectType\")\n    set in(geoObjectType: GeoObjectType) {\n        if (geoObjectType) {\n            this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        }\n    }\n\n    message: string = null;\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizationService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n\n        this.fetchOrganizationLabel();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    fetchOrganizationLabel(): void {\n        this.registryService.getOrganizations().then(orgs => {\n            for (let i = 0; i < orgs.length; ++i) {\n                if (orgs[i].code === this.editGeoObjectType.organizationCode) {\n                    this.organizationLabel = orgs[i].label.localizedValue;\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageAttributes, attribute: \"\", termOption: \"\" });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType(this.editGeoObjectType).then(geoObjectType => {\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n\n        // return false;\n\n        return true;\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"geoObjectType.attr.visibility.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"readOnly || geoObjectType.superTypeCode\" [(value)]=\"editGeoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n<!--                             <ul class=\"list-group list-group-flush\"> -->\n<!--                                 <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li> -->\n<!--                             </ul> -->\n\n<!--                             <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\"> -->\n<!--                                 <localize key=\"modal.button.manageAttributes\"></localize> -->\n<!--                             </button> -->\n\n                        <div class=\"table-responsive\">\n                              <table class=\"table\">\n<!--                                   <thead> -->\n<!--                                       <tr> -->\n<!--                                           <th> -->\n<!--                                               <localize key=\"data.property.label.label\"></localize> -->\n<!--                                           </th> -->\n<!--                                           <th class=\"button-column-header\"> -->\n<!--                                               <localize key=\"data.property.label.actions\"></localize> -->\n<!--                                           </th> -->\n<!--                                       </tr> -->\n<!--                                   </thead> -->\n                                  <tbody>\n                                      <tr *ngFor=\"let attr of geoObjectType.attributes\" >\n                                          <td>{{attr.label.localizedValue}}</td>\n                                          <td class=\"button-column\" style=\"width: 60px;\">\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                                  [title]=\"'modal.button.edit' | localize\"></a>\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                                  [title]=\"'modal.button.remove' | localize\"></a>\n                                          </td>\n                                      </tr>\n                                  </tbody>\n                              </table>\n                          </div>\n                          \n                          <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                              <localize key=\"modal.button.add\"></localize>\n                          </i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, AttributeTermType, AttributeDecimalType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"define-attribute-modal-content\",\n    templateUrl: \"./define-attribute-modal-content.component.html\",\n    styleUrls: [\"./define-attribute-modal-content.css\"]\n})\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    newAttribute: AttributeType = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.create.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.attributeInputComponent) {\n            this.attributeInputComponent.animate();\n        }\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.addAttributeType(this.geoObjectType.code, this.newAttribute).then(data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setAttribute(type: string): void {\n        if (type === \"term\") {\n            this.newAttribute = new AttributeTermType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else if (type === \"float\") {\n            this.newAttribute = new AttributeDecimalType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else {\n            this.newAttribute = new AttributeType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        let isAttrValid: boolean = false;\n\n        if (this.attributeInputComponent) {\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n\n        if (isAttrValid) {\n            return true;\n        }\n\n        return false;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Directive } from \"@angular/core\";\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from \"@angular/forms\";\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator(): ValidatorFn {\n    return (c: AbstractControl) => {\n        if (c.value) {\n            let isValid = c.value.indexOf(\" \") === -1;\n\n            if (isValid) {\n                return null;\n            } else {\n                return {\n                    geoObjectAttributeCode: {\n                        valid: false\n                    }\n                };\n            }\n        }\n    };\n}\n\n@Directive({\n    selector: \"[geoObjectAttributeCode][ngModel]\",\n    providers: [\n        // eslint-disable-next-line no-use-before-define\n        { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n    ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n\n    validator: ValidatorFn;\n\n    constructor() {\n        this.validator = validateGeoObjectAttributeCodeValidator();\n    }\n\n    validate(c: FormControl) {\n        return this.validator(c);\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"edit-attribute-modal-content\",\n    templateUrl: \"./edit-attribute-modal-content.component.html\",\n    styleUrls: [\"./edit-attribute-modal-content.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]]\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n            for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n                let attr = this.geoObjectType.attributes[i];\n                if (attr.code === data.code) {\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    back(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, AttributeTermType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { GeoObjectTypeManagementService } from \"@registry/service/geoobjecttype-management.service\";\n\n@Component({\n    selector: \"term-option-widget\",\n    templateUrl: \"./term-option-widget.component.html\",\n    styleUrls: [\"./term-option-widget.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    state: string = \"none\";\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n\n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n\n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" });\n    }\n\n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { GeoObjectType, AttributeTermType, Term } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"manage-term-options\",\n    templateUrl: \"./manage-term-options.component.html\",\n    styleUrls: [\"./manage-term-options.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    termOption: Term;\n    state: string = \"none\";\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: true }\n        ]\r\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.termOption.code && this.termOption.code.length > 0) {\n            // If code has a space\n            if (this.termOption.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            // If label is only spaces\n            for (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n                if (this.termOption.label.localeValues[i].value.replace(/\\s/g, \"\").length === 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n            return false;\n        }\n\n        return false;\n    }\n\n    addTermOption(): void {\n        this.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            this.attribute.rootTerm.children.push(data);\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    deleteTermOption(termOption: Term): void {\n        this.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n            if (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n                this.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n            }\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    removeTermOption(termOption: Term): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + termOption.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteTermOption(termOption);\n        });\n    }\n\n    editTermOption(termOption: Term): void {\n        const state = {\n            state: GeoObjectTypeModalStates.editTermOption,\n            attribute: this.attribute,\n            termOption: JSON.parse(JSON.stringify(termOption))\n        };\n\n        this.geoObjectTypeManagementService.setModalState(state);\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from \"@shared/model/modal\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"edit-term-option-input\",\n    templateUrl: \"./edit-term-option-input.component.html\",\n    styleUrls: [],\n    animations: [\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n                    ]\n                )]\n        )\n    ]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Input() termOption: Term;\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), active: true, enabled: true }\n\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            // Update the term definition on the attribute\n            const index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n            if (index !== -1) {\n                this.attribute.rootTerm.children[index] = data;\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: null });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\n\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { SvgHierarchyNode } from \"./svg-hierarchy-node\";\nimport { calculateTextWidth } from \"./svg-util\";\nimport { INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL, HierarchyComponent, TREE_SCALE_FACTOR_X, TREE_SCALE_FACTOR_Y } from \"../hierarchy.component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nexport class SvgHierarchyType {\n\n    public static gotRectW: number = 150;\n    public static gotRectH: number = 25;\n    public static gotBodyFontSize: number = 8;\n    public static gotOptionsButtonFontSize: number = 12;\n\n    public static gotHeaderW: number = 150;\n    public static gotHeaderH: number = 14;\n    public static gotHeaderFontSize: number = 8;\n\n    public static MOUSE_HOVER_EVENT_ENTER = \"mouseenter\";\n\n    public static MOUSE_HOVER_EVENT_MOVE = \"mousemove\";\n\n    public static MOUSE_HOVER_EVENT_EXIT = \"mouseleave\";\n\n    hierarchyComponent: HierarchyComponent;\n\n    hierarchyType: HierarchyType;\n\n    svgEl: any;\n\n    d3Hierarchy: any;\n\n    d3Tree: any;\n\n    isPrimary: boolean;\n\n    tooltip: any;\n\n    public constructor(hierarchyComponent: HierarchyComponent, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        const hierarchyType = ht;\n\n        this.hierarchyComponent = hierarchyComponent;\n        this.hierarchyType = hierarchyType;\n        this.svgEl = svgEl;\n\n        this.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n        this.isPrimary = isPrimary;\n\n        this.d3Tree = d3.tree().nodeSize([SvgHierarchyType.gotRectW * TREE_SCALE_FACTOR_X, (SvgHierarchyType.gotRectH + SvgHierarchyType.gotHeaderH) * TREE_SCALE_FACTOR_Y]).separation((a, b) => 0.8)(this.d3Hierarchy);\n    }\n\n    public getD3Tree() {\n        return this.d3Tree;\n    }\n\n    public getCode(): string {\n        return this.hierarchyType.code;\n    }\n\n    public getNodeByCode(gotCode: string): SvgHierarchyNode {\n        let treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\n        if (treeNode == null) {\n            return null;\n        }\n\n        return new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService, this.authService);\n    }\n\n    public renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n        let bbox = hg.node().getBBox();\n\n        let colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        let headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        const headerFontSize: number = 10;\n        const iconWidth: number = 20;\n        const maxHierarchyLabelLength = 200;\n\n        let hierarchyLabelW: number = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize);\n        let hierarchyLabelH:number = headerFontSize * 2;\n        let hierarchyLabelY:number = bbox.y + headerFontSize * 1.6;\n        if (hierarchyLabelW > maxHierarchyLabelLength) {\n            hierarchyLabelW = maxHierarchyLabelLength;\n            hierarchyLabelH = headerFontSize * 3;\n            hierarchyLabelY = bbox.y + headerFontSize;\n        }\n\n        let lineWidth = bbox.width;\n        let textWidth = hierarchyLabelW + iconWidth;\n\n        if (textWidth > lineWidth) {\n            lineWidth = textWidth;\n        }\n\n        // Hierarchy icon (font awesome)\n        headerg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .style(\"font-family\", \"FontAwesome\")\n            .attr(\"fill\", \"grey\")\n            .attr(\"font-size\", 12)\n            .text(\"\\uf0e8\");\n\n        // Hierarchy display label\n        colHeader.append(\"foreignObject\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"x\", bbox.x + iconWidth)\n            .attr(\"y\", hierarchyLabelY)\n            .attr(\"width\", hierarchyLabelW)\n            .attr(\"height\", hierarchyLabelH)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"gray\")\n            // .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => this.hierarchyType.label.localizedValue);\n\n        // Line underneath the header\n        headerg.append(\"line\").classed(\"hierarchy-header-line\", true)\n            .attr(\"x1\", bbox.x)\n            .attr(\"y1\", bbox.y + headerFontSize)\n            .attr(\"x2\", bbox.x + lineWidth)\n            .attr(\"y2\", bbox.y + headerFontSize)\n            .attr(\"stroke\", \"grey\")\n            .attr(\"stroke-width\", .5);\n\n        let headerGBbox = headerg.node().getBBox();\n        headerg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n        // Col header label\n        colHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize + 2)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"grey\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .text(colHeaderLabel);\n\n        colHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n        return headerg;\n    }\n\n    getRelatedHierarchies(gotCode: string): string[] {\n        let got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n        if (got.relatedHierarchies == null) {\n            got.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n        }\n\n        let relatedHiers: string[] = got.relatedHierarchies;\n\n        let index = null;\n        for (let i = 0; i < relatedHiers.length; ++i) {\n            if (relatedHiers[i] === this.getCode()) {\n                index = i;\n            }\n        }\n\n        if (index != null) {\n            relatedHiers.splice(index, 1);\n        }\n\n        return relatedHiers;\n    }\n\n    private nodeMouseover(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 1);\n    }\n\n    private nodeMousemove(event: any, element: any, data:any) {\n        d3.select(\"#hierarchyLabel\").html(this.hierarchyType.label.localizedValue);\n        d3.select(\"#hierarchyCodeLabel\").html(this.hierarchyType.code);\n\n        d3.select(\"#geoObjectTypeLabel\").html(data.data.label);\n        d3.select(\"#geoObjectTypeCodeLabel\").html(data.data.geoObjectType);\n\n        d3.select(\"#hierarchyOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyType.organizationCode).label.localizedValue);\n        d3.select(\"#geoObjectTypeOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyComponent.findGeoObjectTypeByCode(data.data.geoObjectType).organizationCode).label.localizedValue);\n\n        let nodeTooltip: any = d3.select(\"#NodeTooltip\").node();\n        let nodeTooltipBbox: DOMRect = nodeTooltip.getBoundingClientRect();\n\n        let pos = { x: event.pageX, y: event.pageY };\n        const yPointerOffset: number = 50;\n        const xPointerOffset: number = 0;\n\n    // If overflow off bottom of page\n        if ((event.pageY + nodeTooltipBbox.height + yPointerOffset) > document.documentElement.scrollHeight) {\n      // render above mouse pointer\n            pos.y = event.pageY - nodeTooltipBbox.height - yPointerOffset;\n        }\n\n    // If overflow off right side of page\n        if ((event.pageX + nodeTooltipBbox.width + xPointerOffset) > document.documentElement.scrollWidth) {\n      // render to the left of the mouse pointer\n            pos.x = event.pageX - nodeTooltipBbox.width - xPointerOffset;\n        }\n\n        d3.select(\"#NodeTooltip\")\n            .style(\"left\", pos.x + \"px\")\n            .style(\"top\", pos.y + \"px\");\n    }\n\n    private nodeMouseleave(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 0)\n            .style(\"left\", \"-10000px\")\n            .style(\"top\", \"-10000px\");\n    }\n\n    public render() {\n        let that = this;\n        let descends: any = this.d3Tree.descendants();\n\n        d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").remove();\n        if (this.isPrimary) {\n            d3.select(\".g-hierarchy[data-primary=\\\"true\\\"]\").remove();\n        }\n\n        let hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n        hg.attr(\"font-family\", \"sans-serif\");\n\n        let gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n        // Edge\n        gtree.append(\"g\").classed(\"g-got-edge\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(this.d3Tree.links())\n            .join(\"path\")\n            // .attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n            .attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n                return \"M\" + d.source.x + \",\" + (d.source.y) +\n                    \"V\" + ((d.source.y + d.target.y) / 2) +\n                    \"H\" + d.target.x +\n                    \"V\" + (d.target.y);\n            });\n\n        // Header on square which denotes which hierarchy it's a part of\n        let gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n        gHeader.selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"rx\", 3)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) =>\n                d.data.inheritedHierarchyCode != null\n            )\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Write the name of the hierarchy on the header\n        gHeader.selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) =>\n                d.x - (SvgHierarchyType.gotHeaderW / 2)\n            )\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .style(\"text-align\", \"center\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"white\")\n            .style(\"height\", (SvgHierarchyType.gotHeaderH - 4) + \"px\")\n            .style(\"width\", SvgHierarchyType.gotHeaderW + \"px\")\n            .html(function(d: any) {\n                let name = d.data.inheritedHierarchyCode != null ? that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue : that.hierarchyType.label.localizedValue;\n                // eslint-disable-next-line no-unused-expressions\n                calculateTextWidth(name, SvgHierarchyType.gotHeaderFontSize) > (SvgHierarchyType.gotHeaderW - 5) ? name = name.substring(0, 34) + \"...\" : true;\n                return name;\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // GeoObjectType Body Square\n        gtree.append(\"g\").classed(\"g-got\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-body-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"rx\", 3)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .each(function(d: any) {\n                if (d.data.geoObjectType !== \"GhostNode\") {\n                    if (d.data.activeDropZones) {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n                    } else {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                    }\n                }\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Arrows on Edges\n        const arrowRectD = { height: 7, width: 10 };\n        let gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n        gArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-rect\", true)\n            .attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n            .attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n        gArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3)) +\n                \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n            );\n\n        // Ghost Drop Zone (Sibling) Backer\n        gtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-backer-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"white\");\n\n        // Ghost Drop Zone (Sibling) Body Rectangle\n        gtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-body-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#6BA542\")\n            .attr(\"stroke-width\", \"1\")\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType);\n\n        // GeoObjectType label\n        gtree.append(\"g\").classed(\"g-got-codelabel\", true)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", SvgHierarchyType.gotBodyFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .classed(\"svg-got-label-text\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n            .attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n            .attr(\"height\", SvgHierarchyType.gotRectH - 4)\n            // .filter(function(d: any) {\n            //     return calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n            // })\n            // .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => d.data.label)\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        let headerg;\n        if (this.isPrimary) {\n            gtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n                .selectAll(\"text\")\n                .data(descends)\n                .join(\"text\")\n                .filter(function(d: any) {\n                    return (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n                })\n                .classed(\"svg-got-relatedhiers-button\", true)\n                .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n                .attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - (SvgHierarchyType.gotOptionsButtonFontSize) - 3)\n                .attr(\"y\", (d: any) => d.y + (SvgHierarchyType.gotOptionsButtonFontSize * 0.8) - SvgHierarchyType.gotOptionsButtonFontSize / 2)\n                .style(\"font-family\", \"FontAwesome\")\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", \"#767676\")\n                .style(\"font-size\", SvgHierarchyType.gotOptionsButtonFontSize + \"px\")\n                .text(\"\\uf013\")\n                .on(\"click\", function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n            headerg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n        } else {\n            headerg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n        }\n\n\n        // let paddingTop = (headerg.node().getBBox().height + 20);\n        // gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n    }\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a> \n          <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> \n          <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> \n          <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span>\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"data-page\",\n    templateUrl: \"./data-page.component.html\",\n    styleUrls: [\"./data-page.css\"]\n})\nexport class DataPageComponent implements OnInit {\n\n    content: string = \"SPREADSHEET\";\n    pageTitle: string;\n    bsModalRef: BsModalRef;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n    }\n\n    ngOnInit(): void {\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n\n        if (content === \"SPREADSHEET\") {\n            this.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n        } else if (content === \"SHAPEFILE\") {\n            this.pageTitle = this.localizationService.decode(\"shapefile.title\");\n        } else if (content === \"EXPORT\") {\n            this.pageTitle = this.localizationService.decode(\"io.export.title\");\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">\n                      <localize key=\"import-spreadsheet-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">\n                      <localize key=\"import-shapefile-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ViewChildren, ElementRef, QueryList, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from \"@shared/service\";\nimport { HierarchyService, IOService } from \"@registry/service\";\nimport { ExternalSystem } from \"@shared/model/core\";\n\nimport { SpreadsheetModalComponent } from \"./modals/spreadsheet-modal.component\";\nimport { ShapefileModalComponent } from \"./modals/shapefile-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"dataimporter\",\n    templateUrl: \"./dataimporter.component.html\",\n    styleUrls: [\"./dataimporter.css\"]\n})\nexport class DataImporterComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray:QueryList<DateFieldComponent>;\n\n    currentDate : Date = new Date();\n\n    showImportConfig: boolean = false;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Start date\n     */\n    startDate: Date = null;\n\n    /*\n     * End date\n     */\n    endDate: Date | string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string; // Can be SHAPEFILE or EXCEL\n\n    isExternal: boolean = false;\n\n    /*\n     * List of available external systems (filtered based on user's org)\n     */\n    externalSystems: ExternalSystem[];\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    isLoading: boolean = true;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService,\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private authService: AuthService,\n        private sysService: ExternalSystemService,\n        private hierarchyService: HierarchyService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) { }\n\n    ngOnInit(): void {\n        this.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n            this.externalSystems = paginatedSystems.resultSet;\n\n            if (this.externalSystems.length === 0) {\n                this.isExternal = false;\n                this.showImportConfig = true; // Show the upload widget if there are no external systems registered\n            }\n\n            this.isLoading = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = acp + \"/excel/get-configuration\";\n        if (this.format === \"SHAPEFILE\") {\n            getUrl = acp + \"/shapefile/get-shapefile-configuration\";\n\n            // this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n        }\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.typeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.startDate != null) {\n                form.append(\"startDate\", this.startDate);\n            }\n            if (this.endDate != null) {\n                form.append(\"endDate\", this.endDate);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.isExternal = this.isExternal;\n            configuration.hierarchy = this.hierarchyCode;\n\n            let externalSystem: ExternalSystem = null;\n            for (let i = 0; i < this.externalSystems.length; ++i) {\n                let sys: ExternalSystem = this.externalSystems[i];\n\n                if (sys.oid === this.externalSystemId) {\n                    externalSystem = sys;\n                }\n            }\n\n            configuration.externalSystemId = this.externalSystemId;\n            configuration.externalSystem = externalSystem;\n\n            if (this.format === \"SHAPEFILE\") {\n                this.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            } else {\n                this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            }\n\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n\n        this.checkDates();\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    setImportSource(event, type): void {\n        if (type === \"EXTERNAL\") {\n            this.isExternal = true;\n        } else {\n            this.isExternal = false;\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n//    setInfinity(endDate: any): void {\n//\n//        if(endDate === PRESENT){\n//            this.endDate = null;\n//        }\n//        else{\n//            this.endDate = PRESENT;\n//        }\n//    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = this.checkDateFieldValidity();\n        }, 0);\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        let startDateField: DateFieldComponent;\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n\n            if (field.inputName === \"startDate\") {\n                // set startDateField so we can use it in the next check\n                startDateField = field;\n            }\n\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        if (this.startDate > this.endDate) {\n            startDateField.setInvalid(this.localizationService.decode(\"date.input.startdate.after.enddate.error.message\"));\n\n            this.changeDetectorRef.detectChanges();\n        }\n\n        return true;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\" autocomplete=\"off\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                <label class=\"col-md-2 text-right\" for=\"hierarchyCode\"> <localize key=\"io.modal.hierarchy\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\" [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                        <option></option>\n                        <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>{{view.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\" (change)=\"onSelectType()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>{{type.super ? type.super.label + \" : \" + type.label : type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" (change)=\"checkDates()\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"startDate\" label=\"\" [inputName]=\"'startDate'\" (change)=\"checkDates()\" [allowFutureDates]=\"false\"></date-field>\n                </div>\n                \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"endDate\"><localize key=\"io.endDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"endDate\" label=\"\" [inputName]=\"'endDate'\" (change)=\"checkDates()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" ></date-field>\n                </div>\n                                      \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                \n                <label class=\"col-md-2 text-right\" for=\"copyBlank\"><localize key=\"dataimporter.importblankcells\"></localize></label>\n                <div class=\"col-md-8\">\n                   <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n<!--                     <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\"> -->\n<!--                         <localize key=\"io.back\"></localize> -->\n<!--                     </button> -->\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterListByOrg } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"master-list-manager\",\n    templateUrl: \"./master-list-manager.component.html\",\n    styleUrls: [\"./master-list-manager.css\"]\n})\nexport class MasterListManagerComponent implements OnInit {\n\n    message: string = null;\n    orgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.service.getMasterListsByOrg().then(response => {\n            this.orgs = response.orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(org: MasterListByOrg): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(org);\n        this.bsModalRef.content.isNew = true;\n        this.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n            const obj = {\n                label: list.displayLabel.localizedValue,\n                oid: list.oid,\n                createDate: list.createDate,\n                lastUpdateDate: list.lastUpdateDate,\n                isMaster: list.isMaster,\n                write: list.write,\n                read: list.read,\n                visibility: list.visibility\n            };\n\n            org.lists.push(obj);\n        });\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-view/\", code])\n    }\n\n    onEdit(pair: { label: string, oid: string, visibility: string }): void {\n        this.service.getMasterList(pair.oid).then(list => {\n            this.bsModalRef = this.modalService.show(PublishModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.edit = true;\n            this.bsModalRef.content.readonly = !list.write;\n            this.bsModalRef.content.master = list;\n            this.bsModalRef.content.originalPublishStartDate = list.publishingStartDate;\n            this.bsModalRef.content.isNew = false;\n\n            this.bsModalRef.content.onMasterListChange.subscribe(ret => {\n                pair.label = ret.displayLabel.localizedValue;\n                pair.visibility = ret.visibility;\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + list.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterList(list.oid).then(response => {\n                org.lists = org.lists.filter((value, index, arr) => {\n                    return value.oid !== list.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                    <span>\n                                      (\n                                      <localize *ngIf=\"list.visibility === 'PUBLIC'\" key=\"masterlist.public\"></localize>\n                                      <localize *ngIf=\"list.visibility === 'PRIVATE'\" key=\"masterlist.private\"></localize>\n                                      )\n                                    </span>                                    \n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\n\n@Component({\n    selector: \"export-format-modal\",\n    templateUrl: \"./export-format-modal.component.html\",\n    styleUrls: []\n})\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next(this.format);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"export-modal.title\"></localize>\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, ViewEncapsulation, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Location } from \"@angular/common\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\n\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { GeoObjectOverTime } from \"@registry/model/registry\";\n\nimport { ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { LocalizationService, AuthService, EventService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\ndeclare var acp: string;\n\n@Component({\n\n    selector: \"request-table\",\n    templateUrl: \"./request-table.component.html\",\n    styleUrls: [\"./request-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class RequestTableComponent {\n\n    today: Date = new Date();\n    todayString: string = this.dateService.getDateString(new Date());\n\n    objectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    requests: ChangeRequest[] = [];\n\n    actions: AbstractAction[];\n\n    columns: any[] = [];\n\n    @Input() toggleId: string;\n\n    uploadRequest: ChangeRequest;\n\n    filterCriteria: string = \"ALL\";\n\n    sort: any[] = [{ attribute: \"createDate\", ascending: false }];\n\n    hasBaseDropZoneOver: boolean = false;\n\n    // Restrict page to the specified oid\n    oid: string = null;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    isValid: boolean = true;\n\n    isEditing: boolean = false;\n\n    constructor(private service: ChangeRequestService, private geomService: GeometryService, private modalService: BsModalService, private authService: AuthService, private localizationService: LocalizationService,\n        private eventService: EventService, private route: ActivatedRoute, private router: Router, private dateService: DateService, private location: Location) {\n        this.columns = [\n            { name: localizationService.decode(\"change.request.user\"), prop: \"createdBy\", sortable: false },\n            { name: localizationService.decode(\"change.request.createDate\"), prop: \"createDate\", sortable: false, width: 195 },\n            { name: localizationService.decode(\"change.request.status\"), prop: \"approvalStatus\", sortable: false }\n        ];\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.route.paramMap.subscribe(params => {\n            this.oid = params.get(\"oid\");\n            this.refresh();\n        });\n\n        if (this.oid != null) {\n            this.toggleId = this.oid;\n        }\n\n        let getUrl = acp + \"/changerequest/upload-file-cr\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"crOid\", this.uploadRequest.oid);\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: any, status: number, headers: any) => {\n            const doc = JSON.parse(response);\n\n            const index = this.requests.findIndex(request => request.oid === doc.requestId);\n\n            if (index !== -1) {\n                this.requests[index].documents.push(doc);\n            }\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n\n        this.refresh();\n    }\n\n    isSorting(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].attribute === attribute;\n    }\n\n    isAscending(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].ascending;\n    }\n\n    onSort(attribute: string) {\n        let index = this.sort.findIndex(item => item.attribute === attribute);\n\n        if (index !== -1) {\n            let item = this.sort[index];\n\n            item.ascending = !item.ascending;\n        } else {\n            this.sort = [{\n                attribute: attribute,\n                ascending: true\n            }];\n        }\n\n        this.refresh();\n    }\n\n    getGOTLabel(action: any): string {\n        if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.displayLabel && action.geoObjectJson.attributes.displayLabel.values &&\n            action.geoObjectJson.attributes.displayLabel.values[0] && action.geoObjectJson.attributes.displayLabel.values[0].value && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues &&\n            action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0] && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value) {\n            return action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value;\n        } else if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.code) {\n            return action.geoObjectJson.attributes.code;\n        } else {\n            return this.localizationService.decode(\"geoObject.label\");\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    onUpload(request: ChangeRequest): void {\n        this.uploadRequest = request;\n\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onDownloadFile(request: ChangeRequest, fileOid: string): void {\n        window.location.href = acp + \"/changerequest/download-file-cr?crOid=\" + request.oid + \"&\" + \"vfOid=\" + fileOid;\n    }\n\n    onDeleteFile(request: ChangeRequest, fileOid: string): void {\n        this.service.deleteFile(request.oid, fileOid).then(() => {\n            const index = request.documents.findIndex(doc => doc.oid === fileOid);\n\n            if (index !== -1) {\n                request.documents.splice(index, 1);\n            }\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    public fileOverBase(e: any): void {\n        this.hasBaseDropZoneOver = e;\n    }\n\n    pageChange(pageNumber: number = 1): void {\n        this.oid = null;\n        this.refresh(pageNumber);\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, pageNumber, this.filterCriteria, this.sort, this.oid).then(requests => {\n            this.page = requests;\n            this.requests = requests.resultSet;\n\n            // Copying the Geo-Object to add consistency for template processing\n            this.requests.forEach((req) => {\n                if (!req.current.geoObject) {\n                    for (let i = 0; i < req.actions.length; i++) {\n                        if (req.actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                            // This is the state of the Geo-Object as the Registry Contributor configured it.\n                            req.current.geoObject = JSON.parse(JSON.stringify((req.actions[0] as CreateGeoObjectAction).geoObjectJson));\n                        }\n                    }\n                }\n            });\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    onSelect(selected: any): void {\n        // this.request = selected.selected;\n\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, 1, \"ALL\", this.sort, this.oid).then(requests => {\n            this.requests = requests.resultSet;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.implementDecisions(changeRequest).then(request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n\n                const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true\n                });\n\n                bsModalRef.content.submitText = this.localizationService.decode(\"change.requests.more.geoobject.updates.submit.btn\");\n                bsModalRef.content.cancelText = this.localizationService.decode(\"change.requests.more.geoobject.updates.cancel.btn\");\n                bsModalRef.content.message = this.localizationService.decode(\"change.requests.more.geoobject.updates.message\");\n\n                bsModalRef.content.onConfirm.subscribe(() => {\n                    const object = this.getFirstGeoObjectInActions(request);\n\n                    if (object != null) {\n                        this.router.navigate([\"/registry/location-manager\", object.attributes.uid, object.geoObjectType.code, this.todayString, true]);\n                    } else {\n                        let object = request.current.geoObject;\n                        let type = request.current.geoObjectType;\n\n                        if (object != null && type != null) {\n                            this.router.navigate([\"/registry/location-manager\", object.attributes.uid, type.code, this.todayString, true]);\n                        }\n                    }\n                });\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    onReject(cr: ChangeRequest): void {\n        this.service.rejectChangeRequest(cr).then(() => {\n            // TODO: Determine if there is a way to update an individual record\n            // TODO : cr.statusLabel needs to be updated...\n            /*\n            cr.approvalStatus = \"REJECTED\";\n\n            let len = this.actions.length;\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n\n                action.approvalStatus = \"REJECTED\";\n            }\n            */\n\n            this.refresh();\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    getFirstGeoObjectInActions(request: ChangeRequest): GeoObjectOverTime {\n        for (let i = 0; i < request.actions.length; i++) {\n            let action = request.actions[i];\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (action.hasOwnProperty(\"geoObjectJson\")) {\n                return action[\"geoObjectJson\"];\n            }\n        }\n\n        return null;\n    }\n\n    onDelete(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            bsModalRef.content.type = \"danger\";\n            bsModalRef.content.submitText = this.localizationService.decode(\"change.request.delete.request.confirm.btn\");\n            bsModalRef.content.message = this.localizationService.decode(\"change.request.delete.request.message\");\n\n            bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.delete(changeRequest.oid).then(deletedRequestId => {\n                    let pos = -1;\n                    for (let i = 0; i < this.requests.length; i++) {\n                        let req = this.requests[i];\n                        if (req.oid === deletedRequestId) {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > -1) {\n                        this.requests.splice(pos, 1);\n                    }\n\n                    this.refresh();\n                }).catch((response: HttpErrorResponse) => {\n                    this.error(response);\n                });\n            });\n        }\n    }\n\n    onUpdate(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.update(changeRequest).then(request => {\n                this.refresh();\n\n                this.isEditing = false;\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    applyActionStatusProperties(action: any): void {\n        // var action = JSON.parse(JSON.stringify(this.action));\n        // action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        this.service.setActionStatus(action.oid, action.approvalStatus).then(response => {\n            action.decisionMaker = (action.approvalStatus !== \"PENDING\") ? this.authService.getUsername() : \"\";\n\n            // this.crtable.refresh()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    requestTrackBy(index: number, request: ChangeRequest) {\n        return request.oid;\n    }\n\n    toggle(event: any, oid: string): void {\n        this.location.replaceState(\"/registry/change-requests/\" + oid);\n\n        if (!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")) {\n            if (this.toggleId === oid) {\n                this.toggleId = null;\n            } else {\n                this.toggleId = oid;\n                //                this.onSelect({ selected: [{ oid: oid }] });\n                this.requests.forEach(req => {\n                    if (req.oid === oid) {\n                        this.actions = req.actions;\n                    }\n                });\n            }\n        }\n    }\n\n    filter(criteria: string): void {\n        this.filterCriteria = criteria;\n\n        this.refresh(1);\n    }\n\n    setActionStatus(action: CreateGeoObjectAction | UpdateAttributeAction, status: string): void {\n        const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        bsModalRef.content.onConfirm.subscribe(data => {\n            action.approvalStatus = status;\n\n            this.applyActionStatusProperties(action);\n        });\n    }\n\n    getActiveDetailComponent(action: CreateGeoObjectAction | UpdateAttributeAction): any {\n        // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n        if (action.actionType.endsWith(\"CreateGeoObjectAction\") || action.actionType.endsWith(\"UpdateGeoObjectAction\")) {\n            // return this.cuDetail;\n        }\n        //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n        //   {\n        //     return this.arDetail;\n        //   }\n\n        return action;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    getUsername(): string {\n        return this.authService.getUsername();\n    }\n\n    isRequestTooOld(request: ChangeRequest): boolean {\n        if (request.actions && request.actions.length > 0) {\n            let firstAction = request.actions[0];\n\n            if (firstAction.actionType === ActionTypes.UPDATEGEOOBJECTACTION) {\n                return true;\n            } else if (firstAction.actionType === ActionTypes.CREATEGEOOBJECTACTION && !(firstAction as CreateGeoObjectAction).geoObjectJson.attributes[\"exists\"]) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    onEditAttributes(): void {\n        this.isEditing = !this.isEditing;\n    }\n\n    canEdit(request: ChangeRequest) : boolean {\n        return (request.permissions.includes(\"WRITE_DETAILS\") && this.isEditing);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"form-group button-row\">\n\n      <a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" style=\"border-bottom: 1px solid;\" >\n        <localize key=\"change.request.all.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.pending.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.accepted.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PARTIAL')\" [ngClass]=\"filterCriteria === 'PARTIAL' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.partial.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.rejected.filter.link\"></localize>\n      </a>\n\n    </div>\n    <hr style=\"border-top:solid 3px #6BA542\" />\n\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <table class=\"table\">\n      <thead>\n        <tr style=\"height: 50px;color: grey;\">\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createdBy')\"><localize key=\"change.request.contributor.label\"></localize></a><i *ngIf=\"isSorting('createdBy')\" [ngClass]=\"isAscending('createdBy') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectTypeLabel')\"><localize key=\"geoObjectType.label\"></localize></a><i *ngIf=\"isSorting('geoObjectTypeLabel')\" [ngClass]=\"isAscending('geoObjectTypeLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectLabel')\"><localize key=\"geoObject.label\"></localize></a><i *ngIf=\"isSorting('geoObjectLabel')\" [ngClass]=\"isAscending('geoObjectLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createDate')\"><localize key=\"change.request.date.contributed.label\"></localize></a><i *ngIf=\"isSorting('createDate')\" [ngClass]=\"isAscending('createDate') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('approvalStatus')\"><localize key=\"change.request.status.label\"></localize></a><i *ngIf=\"isSorting('approvalStatus')\" [ngClass]=\"isAscending('approvalStatus') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('oid')\"><localize key=\"change.request.id.label\"></localize></a><i *ngIf=\"isSorting('oid')\" [ngClass]=\"isAscending('oid') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-template ngFor let-req [ngForOf]=\"requests | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" [ngForTrackBy]=\"requestTrackBy\">\n        \n          <tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n            <td class=\"col-md-1\">\n              <h5><strong>{{req.createdBy}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObjectType.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObject.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align: middle; color:grey;\">\n               <span class=\"date-string-display\">\n                  {{formatDate(req.createDate)}}\n               </span>\n            </td>\n            <td class=\"col-md-1\">\n              <h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-partial':req.approvalStatus === 'PARTIAL', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n                 <strong>{{req.statusLabel}}</strong>\n              </h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.oid}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:right;padding-right:25px;\">\n              <i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n            </td>\n          </tr>\n          \n          <!-- Action panel only shows when activated with click -->\n          <tr [@fadeInOut] *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\" [ngClass]=\"{'status-pending-container':req.approvalStatus === 'PENDING', 'status-accepted-container':req.approvalStatus === 'ACCEPTED', 'status-partial-container':req.approvalStatus === 'PARTIAL', 'status-rejected-container':req.approvalStatus === 'REJECTED'}\">\n            \n            <td colspan=\"7\">\n              <div class=\"geoobject-panel-header\">\n              \n                    <div>\n                        <h3 style=\"margin-top: 10px;\">{{req.geoObject.label}}</h3>\n                        <h4 style=\"font-style: italic;\">{{req.geoObject.code}}</h4>\n                        \n                        <h4 *ngIf=\"req.type === 'UpdateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.update.geoobject.label\"></localize></h4>\n                        <h4 *ngIf=\"req.type === 'CreateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.create.geoobject.label\"></localize></h4>\n                    </div>\n              </div>\n                  \n              <div class=\"row\" style=\"margin:0;background: white;\">\n                <!-- <div class=\"col-md-1\"></div> -->\n                <div class=\"col-md-12\">\n                \n                  <div *ngIf=\"!isRequestTooOld(req) && req.approvalStatus === 'INVALID'\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.invalid\"></localize>\n                  </div>\n                  <div *ngIf=\"isRequestTooOld(req)\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.tooOld\"></localize>\n                  </div>\n                \n                  <div *ngIf=\"req.permissions.includes('READ_CONTRIBUTOR_NOTES')\" class=\"form-group\" style=\"margin-top:20px;\">\n                     <label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n                     <textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;\" [(ngModel)]=\"req.contributorNotes\" [disabled]=\"!req.permissions.includes('WRITE_DETAILS')\"></textarea>\n                  </div>  \n                  \n                  <div>\n                    <p><localize key=\"change.request.contributor.prefix.label\"></localize>&nbsp;<strong>{{req.createdBy}}</strong></p>\n                    <p><localize key=\"change.request.contributor.email.prefix.label\"></localize>&nbsp;<strong>{{req.email}}</strong></p>\n                    <p><localize key=\"change.request.contributor.phone.prefix.label\"></localize>&nbsp;<strong>{{req.phoneNumber}}</strong></p>\n                  </div>\n  \n                  <div *ngIf=\"req.approvalStatus !== 'INVALID' && !isRequestTooOld(req)\" class=\"cr-details\">\n\t                  <div class=\"action-card\" style=\"margin-bottom:10px; background-color:white;\"> \n\t                    <div class=\"row\" style=\"background: white;\">\n\t                      <div class=\"col-md-12\">\n\t                      \n\t                         <geoobject-shared-attribute-editor *ngIf=\"req\"\n\t                              #attributeEditor\n\t                              [readOnly]=\"!canEdit(req)\"  \n\t                              [geoObjectType]=\"req.current.geoObjectType\"\n                                [postGeoObject]=\"req.type == 'UpdateGeoObject' ? req.current.geoObject : req.actions[0].geoObjectJson\" \n\t                              [changeRequest]=\"req\"\n\t                              [hierarchies]=\"req.type == 'UpdateGeoObject' ? req.current.hierarchies : req.actions[0].parentJson\"\n\t                              [isGeometryInlined]=\"true\"\n                                [isNew]=\"req.type === 'CreateGeoObject'\"\n                                (valid)=\"setValid($event)\">\n\t                         </geoobject-shared-attribute-editor>\n\t                         \n\t                       </div>\n\t                    </div>\n\t  \n\t                    <div class=\"row\" style=\"border-top: 1px grey solid;margin:0;padding: 10px 0;\">\n\t                      <div class=\"col-md-6\" >\n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                          <label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t                          <textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;margin:0\" [(ngModel)]=\"req.maintainerNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\"></textarea>\n\t                        </div>  \n\t                        \n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                              <label for=\"additionalNotes-{{req.oid}}\"> <localize key=\"change.request.action.detail.additionalNotes\"></localize> </label>\n\t                              <input type=\"text\" id=\"additionalNotes-{{req.oid}}\" class=\"form-control\" style=\"width:100%;\" [(ngModel)]=\"req.additionalNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\">\n\t                        </div>  \n\t                      </div>\n\t                      \n\t                      <div class=\"col-md-6\" >\n\t                        <div>\n\t                          <label><localize key=\"change.request.reference.documents.label\"></localize></label>\n\t                          <div *ngIf=\"req.documents.length > 0\" style=\"border:1px solid #ccc;border-radius: 4px;\">\n\t                            <ul style=\"padding:10px;margin:0;\">\n\t                                <li *ngFor=\"let doc of req.documents\" class=\"list-group-item\" style=\"padding:0;font-size:inherit;\">\n\t                                  <a (click)=\"onDownloadFile(req, doc.oid)\" >{{doc.fileName}}</a>\n\t                                  <i (click)=\"onDeleteFile(req, doc.oid)\" class=\"fa fa-times ico-remove\" style=\"margin-left:10px;\" aria-hidden=\"true\"></i>\n\t                                </li>\n\t                            </ul>\n\t                          </div>\n\t                          <p *ngIf=\"req.documents.length === 0\" style=\"color:grey;font-style:italic;\">\n\t                            <localize key=\"change.request.no.documents.label\"></localize>\n\t                          </p>\n\t                        \n\t                          <div *ngIf=\"req.permissions.includes('WRITE_DOCUMENTS') && isEditing\" style=\"padding:10px 0;\">\n\t                              <!-- Limit file types with: accept=\".xls, .xlsx, .pdf, .doc\" -->\n\t                              <input class=\"ghost-input\" style=\"display:inline-block;padding:0;height:auto;border-radius:0;margin-top:10px;\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" required />\n\t                              \n\t                              <button class=\"btn btn-primary pull-right\" style=\"margin:0;\" (click)=\"onUpload(req)\" [title]=\"'change.request.upload.document.btn.hover' | localize\">\n\t                                <localize key=\"change.request.reference.document.upload\"></localize>\n\t                              </button>\n\t                          </div>\n\t                        </div>\n\t  \n\t                      </div>\n\t                    </div>\n\t                  </div> \n\t  \n\t  \n\t                  <div *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS') || req.permissions.includes('DELETE')\" class=\"button-holder\" style=\"margin-bottom:20px;min-height:40px;\">\n\t                    <span *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS')\">\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\" [title]=\"'change.request.implement.decisions.btn.hover' | localize\">\n\t                        <localize [key]=\"req.type === 'UpdateGeoObject' ? 'change.request.accept.changes.btn' : 'change.request.accept.newGeoObject.btn'\"></localize>\n\t                      </button>\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" *ngIf=\"req.type === 'CreateGeoObject'\" type=\"submit\" (click)=\"onReject(req)\" class=\"btn btn-danger\" style=\"margin:0 10px;\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\">\n                            <localize key=\"change.request.reject.all.btn\"></localize>\n                          </button>\n\t                    </span>\n\n                        <span *ngIf=\"isValid && req.permissions.includes('WRITE_DETAILS') && req.createdBy === getUsername()\">\n                          <button type=\"submit\" *ngIf=\"!isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                          </button>\n                          <button type=\"submit\" *ngIf=\"isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                          </button>\n                          <button type=\"submit\" role=\"button\" class=\"btn btn-primary\" *ngIf=\"isEditing\" (click)=\"onUpdate(req)\" [title]=\"'modal.button.update' | localize\" >\n                            <localize key=\"modal.button.update\"></localize>\n                          </button>\n                          \n                          <button type=\"submit\" role=\"button\" class=\"btn btn-danger pull-right\" [disabled]=\"!isEditing\" *ngIf=\"req.permissions.includes('DELETE') && req.createdBy === getUsername()\" (click)=\"onDelete(req)\" [title]=\"'change.request.delete.request.hover' | localize\" >\n                            <localize key=\"change.request.delete.request.btn\"></localize>\n                          </button>\n                        </span>\n\t                  </div>\n                  </div>\n                </div>\n                <!-- <div class=\"col-md-1\"></div> -->\n              </div>\n  \n            </td>\n          </tr> <!-- END Action panel -->\n          \n        </ng-template>\n      </tbody>\n    </table>\n    <div class=\"solid-table-footer\">\n\t    <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n        <pagination-controls (pageChange)=\"pageChange($event)\"></pagination-controls>\n\t    </div>\n    </div>\n  </div>   \n</div>\n","import { ActionTypes, ChangeType } from \"@registry/model/constants\";\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeOverTimeAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectType, HierarchyOverTime, HierarchyOverTimeEntry, ValueOverTime } from \"@registry/model/registry\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { v4 as uuid } from \"uuid\";\nimport { GeometryService } from \"@registry/service\";\nimport { Subject } from \"rxjs\";\n\nexport class ChangeRequestChangeOverTimeAttributeEditor {\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    attribute: AttributeType;\n\n    editAction: AbstractAction;\n\n    hierarchy: HierarchyOverTime;\n\n    editors: ValueOverTimeCREditor[];\n\n    private _isValid: boolean;\n\n    onChangeSubject: Subject<any> = new Subject<any>();\n\n    constructor(changeRequestEditor: ChangeRequestEditor, attribute: AttributeType, hierarchy: HierarchyOverTime) {\n        this.changeRequestEditor = changeRequestEditor;\n        this.attribute = attribute;\n        this.hierarchy = hierarchy;\n\n        this.getEditAction();\n\n        if (hierarchy != null) {\n            for (let j = 0; j < this.hierarchy.entries.length; j++) {\n                let hierarchyEntry = this.hierarchy.entries[j];\n\n                if (hierarchyEntry.parents == null) {\n                    hierarchyEntry.parents = {};\n                }\n                if (hierarchyEntry.loading == null) {\n                    hierarchyEntry.loading = {};\n                }\n\n                for (let i = 0; i < this.hierarchy.types.length; i++) {\n                    let current = this.hierarchy.types[i];\n\n                    if (hierarchyEntry.parents[current.code] == null) {\n                        hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n                    }\n                }\n            }\n        }\n\n        this.editors = this.generateEditors();\n    }\n\n    getEditAction() {\n        if (this.editAction == null) {\n            let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n            if (actions.length === 0) {\n                this.editAction = new UpdateAttributeOverTimeAction(this.attribute.code);\n\n                if (this.attribute.code === \"_PARENT_\") {\n                    (this.editAction as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchy.code;\n                }\n            } else {\n                this.editAction = actions[actions.length - 1];\n            }\n        }\n\n        return this.editAction;\n    }\n\n    onChange(type: ChangeType) {\n        // If our attribute action has changes it needs to be added to the ChangeRequest actions. Otherwise we can remove it.\n        let hasChanges: boolean = this.hasChanges();\n\n        let index = this.changeRequestEditor.changeRequest.actions.findIndex(action => this.editAction === action);\n\n        if (index !== -1 && !hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.splice(index, 1);\n        } else if (index === -1 && hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.push(this.editAction);\n        }\n\n        this.validate();\n\n        this.onChangeSubject.next(type);\n        this.changeRequestEditor.onChange(type);\n    }\n\n    hasChanges(): boolean {\n        let hasChanges: boolean = true;\n\n        if (this.editAction.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n            let updateAction: UpdateAttributeOverTimeAction = this.editAction as UpdateAttributeOverTimeAction;\n\n            if (updateAction.attributeDiff.valuesOverTime.length === 0) {\n                hasChanges = false;\n            }\n        }\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(skipExists: boolean = false): boolean {\n        let validEditors = this.validateEditors();\n        let hasTimeConflict = this.changeRequestEditor.dateService.checkRanges(this.attribute, this.editors);\n\n        let hasExistConflict = false;\n        if (this.attribute.code !== \"exists\") {\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existEditors = (this.changeRequestEditor.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n            hasExistConflict = this.changeRequestEditor.dateService.checkExistRanges(this.editors, existEditors);\n        } else if (!skipExists) {\n            this.changeRequestEditor.validate(true); // If the exists attribute has changed we must revalidate all other attributes\n        }\n\n        this._isValid = validEditors && !hasTimeConflict && !hasExistConflict;\n\n        return this._isValid;\n    }\n\n    private validateEditors(): boolean {\n        let valid: boolean = true;\n\n        this.editors.forEach(editor => {\n            if (!editor.validate()) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditors(includeUnmodified: boolean = true): ValueOverTimeCREditor[] {\n        return this.editors.filter(editor => includeUnmodified || editor.diff != null);\n    }\n\n    generateEditors(): ValueOverTimeCREditor[] {\n        let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n        let editors: ValueOverTimeCREditor[] = [];\n\n        // First, we have to create a view for every ValueOverTime object. This is done to simply display what's currently\n        // on the GeoObject\n        if (this.attribute.code === \"_PARENT_\") {\n            this.hierarchy.entries.forEach((entry: HierarchyOverTimeEntry) => {\n                let editor = new HierarchyCREditor(this, this.attribute, this.editAction, entry, this.hierarchy);\n\n                editors.push(editor);\n            });\n        } else {\n            if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n                this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.forEach((vot: ValueOverTime) => {\n                    let editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n\n                    editor.valueOverTime = vot;\n\n                    editors.push(editor);\n                });\n            }\n        }\n\n        // Next, we must apply all changes which may exist in the actions.\n        if (this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            let len = actions.length;\n            for (let i = 0; i < len; ++i) {\n                let updateAttrAction: UpdateAttributeOverTimeAction = actions[i] as UpdateAttributeOverTimeAction;\n\n                updateAttrAction.attributeDiff.valuesOverTime.forEach((votDiff: ValueOverTimeDiff) => {\n                    let index = editors.findIndex(editor => editor.oid === votDiff.oid);\n                    let editor = (index === -1) ? null : editors[index];\n\n                    if (editor == null) {\n                        if (this.attribute.code === \"_PARENT_\") {\n                            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n                        } else {\n                            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n                        }\n\n                        editor.diff = votDiff;\n\n                        editors.push(editor);\n                    } else {\n                        editor.diff = votDiff;\n\n                        if (this.attribute.code === \"_PARENT_\") {\n                            (editor as HierarchyCREditor).hierarchyEntry.parents = votDiff.parents;\n                        }\n                    }\n                });\n            }\n        }\n\n        return editors;\n    }\n\n    public createNewVersion(original?: ValueOverTimeCREditor): ValueOverTimeCREditor {\n        let editor: ValueOverTimeCREditor;\n\n        // Create an instance of the appropriate editor object\n        if (this.attribute.code === \"_PARENT_\") {\n            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n        } else {\n            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n        }\n\n        // If we're creating a new GeoObject, add it to that GeoObject\n        if (this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            if (this.attribute.code === \"_PARENT_\") {\n                (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n                (editor as HierarchyCREditor).hierarchyOverTime.entries.push((editor as HierarchyCREditor).hierarchyEntry);\n            } else {\n                let vot = new ValueOverTime();\n                vot.oid = uuid();\n\n                (this.editAction as CreateGeoObjectAction).geoObjectJson.attributes[this.attribute.code].values.push(vot);\n\n                editor.valueOverTime = vot;\n            }\n        } else {\n            editor.constructNewDiff(\"CREATE\");\n        }\n\n        // Set any default values\n        if (this.attribute.type === \"local\") {\n            editor.value = this.changeRequestEditor.localizationService.create();\n        } else if (this.attribute.type === \"geometry\") {\n            let editors = this.getEditors(true);\n\n            if (editors.length > 0) {\n\n                if (original != null) {\n                    editor.value = JSON.parse(JSON.stringify(original.value));\n                }\n                else {\n                    editor.value = JSON.parse(JSON.stringify(editors[editors.length - 1].value));\n                }\n            } else {\n                editor.value = GeometryService.createEmptyGeometryValue(this.changeRequestEditor.geoObjectType.geometryType);\n            }\n        } else if (this.attribute.type === \"term\") {\n            let terms = GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.changeRequestEditor.geoObjectType, this.attribute.code);\n\n            if (terms && terms.length > 0) {\n                editor.value = terms[0].code;\n            }\n        } else if (this.attribute.code === \"_PARENT_\" && this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n        } else if (this.attribute.code !== \"_PARENT_\") {\n            editor.value = null;\n        }\n\n        this.editors.push(editor);\n\n        this.onChange(ChangeType.ADD);\n\n        return editor;\n    }\n\n    public remove(editor: ValueOverTimeCREditor) {\n        if ((editor.diff != null && editor.diff.action === \"CREATE\") || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            let index = this.editors.findIndex(find => find.oid === editor.oid);\n\n            if (index !== -1) {\n                this.editors.splice(index, 1);\n            }\n        }\n\n        editor.remove();\n\n        this.validate();\n    }\n\n}\n","import { ValueOverTime, AttributeType, TimeRangeEntry, ConflictMessage } from \"@registry/model/registry\";\nimport { CreateGeoObjectAction, UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GeometryService } from \"@registry/service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { Subject } from \"rxjs\";\nimport { ChangeType, ConflictType } from \"@registry/model/constants\";\n\nexport class ValueOverTimeCREditor implements TimeRangeEntry {\n\n    diff?: ValueOverTimeDiff; // Any existing diff which may be associated with this object.\n    valueOverTime?: ValueOverTime; // Represents a vot on an existing GeoObject. If this is set and the action is UpdateAttribute, we must be doing an UPDATE, and valueOverTime represents the original value in the DB.\n    action: AbstractAction;\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n    attr: AttributeType;\n    conflictMessages: Set<ConflictMessage>;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    _isValid: boolean = true;\n\n    constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction) {\n        this.attr = attr;\n        this.changeRequestAttributeEditor = changeRequestAttributeEditor;\n        this.action = action;\n    }\n\n    onChange(type: ChangeType) {\n        this.changeRequestAttributeEditor.onChange(type);\n        this.onChangeSubject.next(type);\n    }\n\n    getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n        return this.valueOverTime;\n    }\n\n    getValueFromGeoObjectForDiff(): any {\n        return this.valueOverTime.value;\n    }\n\n    validate(): boolean {\n        if (!this.conflictMessages) {\n            this.conflictMessages = new Set();\n        }\n\n        let dateService = this.changeRequestAttributeEditor.changeRequestEditor.dateService;\n        let start = dateService.validateDate(this.startDate == null ? null : dateService.getDateFromDateString(this.startDate), true, true);\n        let end = dateService.validateDate(this.endDate == null ? null : dateService.getDateFromDateString(this.endDate), true, true);\n        this._isValid = true;\n\n        if (!start.valid || !end.valid) {\n            this._isValid = false;\n        }\n\n        this.validateUpdateReference();\n\n        return this._isValid;\n    }\n\n    /**\n     * If we're referencing an existing value over time, that object should exist on our GeoObject (which represents the current state of the database)\n     */\n    validateUpdateReference() {\n        let missingReference = this.changeRequestAttributeEditor.changeRequestEditor.dateService.missingReference;\n\n        this.conflictMessages.delete(missingReference);\n\n        if (this.changeRequestAttributeEditor.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\" && this.diff != null && this.diff.action !== \"CREATE\") {\n            let existingVot = this.findExistingValueOverTimeByOid(this.diff.oid, this.attr.code);\n\n            if (existingVot == null) {\n                this._isValid = false;\n\n                this.conflictMessages.add(missingReference);\n            }\n        }\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    set oid(oid: string) {\n        if (this.diff != null) {\n            this.diff.oid = oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            this.getGeoObjectTimeRangeStorage().oid = oid;\n        }\n    }\n\n    get oid(): string {\n        if (this.diff != null) {\n            return this.diff.oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().oid;\n        }\n\n        return null;\n    }\n\n    get startDate(): string {\n        return this.getStartDate();\n    }\n\n    public getStartDate(): string {\n        if (this.diff != null && this.diff.newStartDate !== undefined) {\n            return this.diff.newStartDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldStartDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().startDate;\n        }\n\n        return null;\n    }\n\n    constructNewDiff(action: string): void {\n        this.diff = new ValueOverTimeDiff();\n        this.diff.action = action;\n        (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n\n        if (action === \"CREATE\") {\n            this.diff.oid = uuid();\n        } else {\n            let goRange = this.getGeoObjectTimeRangeStorage();\n\n            this.diff.oid = goRange.oid;\n            this.diff.oldStartDate = goRange.startDate;\n            this.diff.oldEndDate = goRange.endDate;\n        }\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        if (this.diff != null) {\n            this.diff.oldStartDate = oldStartDate;\n        }\n    }\n\n    get oldStartDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldStartDate;\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        return this.getEndDate();\n    }\n\n    public getEndDate(): string {\n        if (this.diff != null && this.diff.newEndDate !== undefined) {\n            return this.diff.newEndDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldEndDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().endDate;\n        }\n\n        return null;\n    }\n\n    set startDate(startDate: string) {\n        this.setStartDate(startDate);\n    }\n\n    public setStartDate(startDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.startDate === startDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (startDate === this.diff.oldStartDate) {\n                delete this.diff.newStartDate;\n            } else {\n                this.diff.newStartDate = startDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.startDate = startDate;\n        }\n\n        this.onChange(ChangeType.START_DATE);\n    }\n\n    set endDate(endDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (goRange == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.endDate === endDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (endDate === this.diff.oldEndDate) {\n                delete this.diff.newEndDate;\n            } else {\n                this.diff.newEndDate = endDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.endDate = endDate;\n        }\n\n        this.onChange(ChangeType.END_DATE);\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        if (this.diff != null) {\n            this.diff.oldEndDate = oldEndDate;\n        }\n    }\n\n    get oldEndDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldEndDate;\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        if (this.diff != null && this.diff.newValue !== undefined) {\n            return this.diff.newValue;\n        } else if (this.diff != null && this.diff.oldValue !== undefined) {\n            return this.diff.oldValue;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().value;\n        }\n\n        return null;\n    }\n\n    set value(value: any) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        if (value != null) {\n            if (this.attr.type === \"term\") {\n                value = [value];\n            } else if (this.attr.type === \"date\") {\n                value = new Date(value).getTime();\n            } else if (this.attr.type === \"geometry\") {\n                // Limit max precision for point geometries\n                let maxCoordinatePrecision = 6;\n\n                if (value.type === \"MultiPoint\") {\n                    for (let i = 0; i < value.coordinates.length; ++i) {\n                        let coordinate: number[] = value.coordinates[i];\n\n                        coordinate[0] = Number.parseFloat(coordinate[0].toFixed(maxCoordinatePrecision));\n                        coordinate[1] = Number.parseFloat(coordinate[1].toFixed(maxCoordinatePrecision));\n                    }\n                } else if (value.type === \"Point\") {\n                    value.coordinates = [Number.parseFloat(value.coordinates[0].toFixed(maxCoordinatePrecision)), Number.parseFloat(value.coordinates[1].toFixed(maxCoordinatePrecision))];\n                }\n            }\n        } else if (value == null) {\n            if (this.attr.type === \"geometry\") {\n                value = GeometryService.createEmptyGeometryValue(this.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType);\n            } else if (this.attr.type === \"character\") {\n                value = \"\";\n            }\n        }\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.oid = uuid();\n                    this.diff.action = \"CREATE\";\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                } else {\n                    if (this.areValuesEqual(this.valueOverTime.value, value)) {\n                        return;\n                    }\n\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.action = \"UPDATE\";\n                    this.diff.oid = this.getGeoObjectTimeRangeStorage().oid;\n                    this.diff.oldValue = this.valueOverTime.value;\n                    this.diff.oldStartDate = this.getGeoObjectTimeRangeStorage().startDate;\n                    this.diff.oldEndDate = this.getGeoObjectTimeRangeStorage().endDate;\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                }\n            }\n\n            if (this.diff.action !== \"CREATE\" && this.areValuesEqual(this.diff.oldValue, value)) {\n                delete this.diff.newValue;\n            } else {\n                this.diff.newValue = JSON.parse(JSON.stringify(value));\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            this.valueOverTime.value = value;\n        }\n\n        this.onChange(ChangeType.VALUE);\n    }\n\n    set oldValue(oldValue: any) {\n        if (this.diff != null) {\n            this.diff.oldValue = oldValue;\n        }\n    }\n\n    get oldValue(): any {\n        if (this.diff != null) {\n            return this.diff.oldValue;\n        }\n\n        return null;\n    }\n\n    public setLocalizedValue(localizedValue: LocalizedValue) {\n        this.value = JSON.parse(JSON.stringify(localizedValue));\n    }\n\n    removeEmptyDiff(): void {\n        if (this.diff != null && this.diff.newValue === undefined && this.diff.newStartDate === undefined && this.diff.newEndDate === undefined) {\n            const diffs = (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime;\n\n            const index = diffs.findIndex(d => d.oid === this.diff.oid);\n\n            if (index !== -1) {\n                diffs.splice(index, 1);\n            }\n\n            this.diff = null;\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attr.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (this.attr.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (this.attr.type === \"geometry\") {\n            return turf_booleanequal(val1, val2);\n        } else if (this.attr.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (this.attr.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return val1 === val2;\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public remove(): void {\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff != null && this.diff.action === \"CREATE\") {\n                // Its a new entry, just remove the diff from the diff array\n                let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n                const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n                if (index > -1) {\n                    updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n                }\n            } else if (this.diff != null) {\n                delete this.diff.newValue;\n                delete this.diff.newStartDate;\n                delete this.diff.newEndDate;\n                this.removeEmptyDiff();\n                this.onChange(ChangeType.REMOVE);\n                return;\n            } else if (this.valueOverTime != null && this.diff == null) {\n                this.diff = new ValueOverTimeDiff();\n                this.diff.action = \"DELETE\";\n                this.diff.oid = this.valueOverTime.oid;\n                this.diff.oldValue = this.valueOverTime.value;\n                this.diff.oldStartDate = this.valueOverTime.startDate;\n                this.diff.oldEndDate = this.valueOverTime.endDate;\n                (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n            }\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            let votc = (this.action as CreateGeoObjectAction).geoObjectJson.attributes[this.attr.code].values;\n\n            let index = votc.findIndex((vot) => { return vot.oid === this.valueOverTime.oid; });\n\n            if (index !== -1) {\n                votc.splice(index, 1);\n            }\n        }\n\n        this.onChange(ChangeType.REMOVE);\n    }\n\n    public isDelete() {\n        return this.diff != null && this.diff.action === \"DELETE\";\n    }\n\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    SimpleChanges\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GovernanceStatus, LayerColor } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { VersionDiffView, Layer } from \"./manage-versions-model\";\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { Observable } from \"rxjs\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\n\n@Component({\n    selector: \"manage-versions\",\n    templateUrl: \"./manage-versions.component.html\",\n    styleUrls: [\"./manage-versions.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class ManageVersionsComponent implements OnInit {\n\n    // height (as number) in pixels\n    mapRowHeight: number;\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    message: string = null;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() isGeometryInlined: boolean = false;\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() hierarchy: HierarchyOverTime = null;\n\n    @Input() filterDate: string = null;\n\n    @Input() showAllInstances: boolean = true;\n\n    viewModels: VersionDiffView[] = [];\n\n    isRootOfHierarchy: boolean = false;\n\n    isInitialized: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public geomService: GeometryService, public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, this.hierarchy) as ChangeRequestChangeOverTimeAttributeEditor;\n\n        this.calculateViewModels();\n        this.isRootOfHierarchy = this.attributeType.type === \"_PARENT_\" && (this.hierarchy == null || this.hierarchy.types == null || this.hierarchy.types.length === 0);\n        this.isInitialized = true;\n    }\n\n    ngAfterViewInit() {\n        if (this.isNew && this.attributeType.code === \"exists\" && this.viewModels.length === 0) {\n            this.onAddNewVersion();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isInitialized && changes.showAllInstances && changes.showAllInstances.previousValue !== changes.showAllInstances.currentValue) {\n            this.calculateViewModels();\n        }\n    }\n\n    setFilterDate(filterDate: string, refresh: boolean = true): void {\n        this.filterDate = filterDate;\n        if (refresh) {\n            this.calculateViewModels();\n        }\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasLocalizationChanged(viewModel: VersionDiffView, locale: string): boolean {\n        return viewModel.editor.oldValue != null && this.getValueAtLocale(viewModel.editor.oldValue, locale) !== this.getValueAtLocale(viewModel.editor.value, locale);\n    }\n\n    onDateChange(): any {\n        setTimeout(() => {\n            this.isValid = this.changeRequestAttributeEditor.validate() && this.checkDateFieldValidity();\n\n            this.isValidChange.emit(this.isValid);\n        }, 0);\n    }\n\n    remove(view: VersionDiffView): void {\n        if (this.geomService.isEditing()) {\n            this.geomService.stopEditing();\n        }\n\n        this.changeRequestAttributeEditor.remove(view.editor);\n\n        if (view.summaryKey === SummaryKey.NEW || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            const index = this.viewModels.findIndex(v => v.editor.oid === view.editor.oid);\n\n            if (index > -1) {\n                this.viewModels.splice(index, 1);\n            }\n        }\n\n        if (this.attributeType.type === \"geometry\") {\n            this.geomService.reload();\n        }\n    }\n\n    onAddNewVersion(original?: ValueOverTimeCREditor): void {\n        let editor = this.changeRequestAttributeEditor.createNewVersion(original);\n\n        if (this.isNew && this.changeRequestEditor.geoObject.attributes[\"exists\"]) {\n            let values = this.changeRequestEditor.geoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                editor.startDate = value.startDate;\n                editor.endDate = value.endDate;\n            }\n        }\n\n        this.viewModels.push(new VersionDiffView(this, editor));\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return lv == null ? null : new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    calculateViewModels(): void {\n        let viewModels: VersionDiffView[] = [];\n\n        let editors = this.changeRequestAttributeEditor.getEditors(this.showAllInstances);\n        editors.forEach((editor: ValueOverTimeCREditor) => {\n            if (this.filterDate == null || this.dateService.between(this.filterDate, editor.startDate, editor.endDate)) {\n                let view = new VersionDiffView(this, editor);\n                viewModels.push(view);\n            }\n        });\n\n        this.viewModels = viewModels;\n    }\n\n    onApprove(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.PENDING).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    /**\n     * Hierarchy Editing\n     */\n\n    getTypeAheadObservable(editor: HierarchyCREditor, startDate: string, endDate: string, type: any, entry: any, index: number): Observable<any> {\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let parentTypeCode = null;\n        let hierarchyCode = null;\n\n        if (index > 0) {\n            let pType = editor.changeRequestAttributeEditor.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n                parentTypeCode = parent.geoObject.properties.type;\n            }\n        }\n\n        return Observable.create((observer: any) => {\n            if (parentCode == null) {\n                let loopI = index;\n\n                while (parentCode == null && loopI > 0) {\n                    loopI = loopI - 1;\n\n                    let parent = entry.parents[editor.changeRequestAttributeEditor.hierarchy.types[loopI].code];\n\n                    if (parent != null) {\n                        if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                            parentCode = parent.geoObject.properties.code;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        } else if (parent.goCode != null) {\n                            parentCode = parent.goCode;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        }\n                    }\n                }\n            }\n\n            this.service.getGeoObjectSuggestions(entry.parents[type.code].text, geoObjectTypeCode, parentCode, parentTypeCode, hierarchyCode, startDate, endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(editor: HierarchyCREditor, e: TypeaheadMatch, type: any, entry: any, date: string): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        entry.parents[type.code].text = e.item.name + \" : \" + e.item.code;\n        entry.parents[type.code].goCode = e.item.code;\n\n        let parentTypes = [];\n\n        for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n            let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n\n            parentTypes.push(current.code);\n\n            if (current.code === type.code) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects(e.item.uid, type.code, parentTypes, true, date).then(ancestors => {\n            // First filter the response for ancestors of only the correct hierarchy\n            ancestors.parents = ancestors.parents.filter(p => p.hierarchyType === editor.changeRequestAttributeEditor.hierarchy.code);\n\n            delete entry.parents[type.code].goCode;\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestors.geoObject.properties.code;\n\n            for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n                let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while (ancestor != null && ancestor.geoObject.properties.type !== current.code) {\n                    if (ancestor.parents.length > 0) {\n                        ancestor = ancestor.parents[0];\n                    } else {\n                        ancestor = null;\n                    }\n                }\n\n                if (ancestor != null) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestor.geoObject.properties.code;\n                }\n            }\n\n            editor.setParentValue(type, entry.parents);\n        });\n    }\n\n    /**\n     * GEOMETRY EDITING\n     */\n\n    toggleGeometryEditing(view: VersionDiffView) {\n        this.geomService.setEditing(!view.newLayer.isEditing, view.newLayer);\n\n        if (this.geoObjectType.geometryType === \"POINT\" || this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            view.coordinate = {};\n        }\n    }\n\n    toggleGeometryView(view: VersionDiffView) {\n        // Using setTimeout() to pull the calc out of the animation stack so the dom can finish mutating before getting final height.\n        setTimeout(() => {\n            this.mapRowHeight = this.elementRef.nativeElement.children[0].getElementsByClassName(\"attribute-element-wrapper\")[0].offsetHeight;\n        }, 0);\n\n        let layer: Layer = this.getOrCreateLayer(view, \"NEW\");\n\n        if (layer.isEditing) {\n            this.geomService.stopEditing();\n        }\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    toggleOldGeometryView(view: VersionDiffView) {\n        let layer: Layer = this.getOrCreateLayer(view, \"OLD\");\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    getOrCreateLayer(view: VersionDiffView, context: string): Layer {\n        if (context === \"NEW\") {\n            if (view.newLayer != null) {\n                return view.newLayer;\n            }\n\n            view.newLayer = new Layer();\n            view.newLayer.oid = \"NEW_\" + view.editor.oid;\n            view.newLayer.isEditing = false;\n            view.newLayer.isRendering = false;\n            view.newLayer.zindex = 1;\n            view.newLayer.color = LayerColor.NEW;\n            view.newLayer.geojson = view.editor.value;\n            view.newLayer.editPropagator = view.editor;\n\n            return view.newLayer;\n        } else {\n            if (view.oldLayer != null) {\n                return view.oldLayer;\n            }\n\n            view.oldLayer = new Layer();\n            view.oldLayer.oid = \"OLD_\" + view.editor.oid;\n            view.oldLayer.isEditing = false;\n            view.oldLayer.isRendering = false;\n            view.oldLayer.zindex = 0;\n            view.oldLayer.color = LayerColor.OLD;\n            view.oldLayer.geojson = view.editor.oldValue;\n            view.oldLayer.editPropagator = null;\n\n            return view.oldLayer;\n        }\n    }\n\n    manualCoordinateChange(view: VersionDiffView): void {\n        if (view.newCoordinateX || view.newCoordinateY) {\n            let newX = view.newCoordinateX;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newX = view.value.coordinates[0];\n            }\n            let newY = view.newCoordinateY;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newY = view.value.coordinates[1];\n            }\n            view.value.coordinates = [[newX || 0, newY || 0]];\n            delete view.newCoordinateX;\n            delete view.newCoordinateY;\n            return;\n        }\n\n        const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n        const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n        view.coordinate.latValid = isLatitude(view.value.coordinates[0][1]);\n        view.coordinate.longValid = isLongitude(view.value.coordinates[0][0]);\n\n        if (!view.coordinate.latValid || !view.coordinate.longValid) {\n            // outside EPSG bounds\n            this.isValid = false;\n            this.isValidChange.emit(this.isValid);\n            return;\n        }\n\n        this.geomService.setPointCoordinates(view.value.coordinates[0][1], view.value.coordinates[0][0]);\n    }\n\n}\n","<div>\n  <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n  </ng-template>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form name=\"manage-versions-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div [ngStyle]=\"{'width' : (isGeometryInlined && geomService.getRenderedLayers().length > 0) ? '45%' : '100%'}\" style=\"display:inline-block;\" class=\"col\">\n          <div *ngIf=\"changeRequestEditor.geoObject\" class=\"attribute-version-wrapper\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                <div *ngIf=\"attributeType\">\n                  <table class=\"table table-striped\">\n                    <tbody class=\"attribute-element-wrapper\" >\n                      <p class=\"message\" *ngIf=\"!isRootOfHierarchy && viewModels.length === 0\">\n                        <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize> \n                      </p>\n                      <div *ngIf=\"isRootOfHierarchy\">\n                        <localize key=\"changeovertime.manageVersions.rootOfHierarchy.message\"></localize>\n                      </div>\n                      \n                      <ng-container *ngIf=\"!isRootOfHierarchy\">\n                        <!-- TODO : Fade in out disabled because it doesn't work all that well with stability periods   @fadeInOut -->\n                        <tr  *ngFor=\"let viewModel of viewModels; let i = index;\" class=\"version-row\"\n                            [ngClass]=\"{ 'geometry-edit-active' : (viewModel.newLayer && viewModel.newLayer.isEditing) }\">\n                            <td class=\"version-column-wrapper\" [ngClass]=\"{'error-border': viewModel.hasError(),\n                            'warning-border': viewModel.hasWarning(),\n                            'warning' : viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'}\" >\n                            <div *ngIf=\"viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'\" class=\"version-column-indicator\">\n                                {{viewModel.summaryKeyLocalized}}\n                              </div>\n                            \n                            <table>\n                            \n                              <!-- \n                                Local Type \n                              -->\n                              <ng-container *ngIf=\"attributeType.type === 'local' && viewModel.value\">\n                               <tr *ngFor=\"let loc of viewModel.value.localeValues; let idx = index;\" class=\"attribute-value-row\">\n                                 <td colspan=\"2\">\n                                   <h5><convert-key-label [key]=\"loc.locale\"></convert-key-label></h5>\n                                   \n                                   <input [ngClass]=\"{'has-changed': (hasLocalizationChanged(viewModel, loc.locale) && !isNew)}\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"viewModel.editor.setLocalizedValue(viewModel.value)\" [required]=\"loc.locale === 'defaultLocale'\">\n                                   \n                                   <div class=\"form-input-validation-error-message-wrapper\">\n                                     <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">\n                                       <localize key=\"manage.versions.value.required.message\"></localize>\n                                     </p>\n                                   </div>\n                                   \n                                   <div *ngIf=\"hasLocalizationChanged(viewModel, loc.locale) && !isNew\">\n                                     <p class=\"warning-text display-current-value\" style=\"padding: 5px 0;margin-bottom:0;\">\n                                       <localize key=\"change.request.changed.value.prefix\"></localize>\n                                       {{ getValueAtLocale(viewModel.oldValue, loc.locale) }}\n                                     </p>\n                                   </div>\n                                 </td>\n                               </tr>\n                              </ng-container>\n                              <tr *ngIf=\"attributeType.type === 'geometry' || attributeType.type === '_PARENT_' || attributeType.type === 'term' || attributeType.type === 'character' || attributeType.type === 'date' || attributeType.type === 'integer' || attributeType.type === 'float' || attributeType.type === 'boolean'\" class=\"attribute-value-row\">\n                               <td colspan=\"2\">\n                               \n                                 <div *ngIf=\"attributeType.type === 'term'\">\n                                   <select [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" id=\"mod-{{attributeType.code}}\" [name]=\"'mod-term-' + i + '-' + attributeType.code\" class=\"select-area\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                       <option value=\"\"></option>\n                                       <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\" [value]=\"option.code\">{{option.label.localizedValue}}</option>\n                                   </select>\n                                 </div>\n                                 <div *ngIf=\"attributeType.type === 'character'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'date'\">\n                                   <date-field [customStyles]=\"(viewModel.oldValue && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.value\" label=\"\" [inputName]=\"'date-val-' + i\" [allowInfinity]=\"false\" [allowFutureDates]=\"true\" \n                                       [required]=\"true\" [placement]=\"'right'\" [(valid)]=\"isValid\" [disable]=\"readonly\" ></date-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'integer' || attributeType.type === 'float'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"number\" class=\"form-control\" [name]=\"'int-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'boolean'\">\n\t                                 <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t                                   <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === true\" [value]=\"true\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t                                 </label> \n\t                                 <label class=\"radio radio-inline\"> \n\t                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === false\" [value]=\"false\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t                                 </label>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === '_PARENT_'\">\n                                   <ng-container *ngIf=\"hierarchy != null && hierarchy.types != null && hierarchy.types.length > 0\">\n                                     <div style=\"float:left;width:100%;\" *ngFor=\"let type of hierarchy.types; let j = index\"> \n                                       {{type.label}}\n                                       <div class=\"input-group\">\n                                          <input style=\"width:100%;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"type.code + '-' + i\"\n                                            [disabled]=\"readonly || viewModel.summaryKey === 'DELETE' || viewModel.startDate == null || viewModel.startDate === ''\"\n                                            [(ngModel)]=\"viewModel.value.parents[type.code].text\" \n                                            [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(viewModel.editor, viewModel.startDate, viewModel.endDate, type, viewModel.value, j)\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect(viewModel.editor, $event, type, viewModel.value, viewModel.startDate)\" \n                                            (typeaheadLoading)=\"viewModel.value.loading[type.code] = $event\"\n                                            [ngClass]=\"{'inline-loading':viewModel.value.loading[type.code], 'has-changed': (viewModel.oldValue && !isNew)}\"                                                                \n                                            [typeaheadOptionsLimit]=\"7\"\n                                            [typeaheadItemTemplate]=\"customItemTemplate\" \n                                            [typeaheadMinLength]=\"0\"\n                                            [typeaheadWaitMs]=\"300\">\n                                          \n                                            <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\" (click)=\"viewModel.editor.removeType(type)\"> \n                                              <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                            </span>\n                                                  \n                                            <!-- Hack: This is needed for formatting  -->\n                                            <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\"> \n                                            </span>\n                                        </div>\n                                     </div>\n                                   </ng-container>\n                                 </div> \n                                 <div *ngIf=\"viewModel.oldValue && !isNew && attributeType.type !== 'geometry'\">\n                                   <p class=\"warning-text display-current-value\">\n                                     <localize key=\"change.request.changed.value.prefix\"></localize>\n                                     \n                                     <ng-container *ngIf=\"attributeType.type !== 'boolean'\">\n                                       {{ viewModel.oldValue }}\n                                     </ng-container>\n                                     <ng-container *ngIf=\"attributeType.type === 'boolean'\">\n                                       <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === false) : (viewModel.oldValue === true)\" style=\"padding-left:3px;\">\n                                         <localize key=\"change.request.boolean.option.true\"></localize>\n                                       </span>\n                                       <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === true) : (viewModel.oldValue === false)\" style=\"padding-left:3px;\">\n                                         <localize key=\"change.request.boolean.option.false\"></localize>\n                                       </span>\n                                     </ng-container>\n                                   </p>\n                                 </div>\n                                 \n                                 <table *ngIf=\"attributeType.type === 'geometry'\" style=\"padding:0;\">\n                                 <!-- \n                                    Geometry \n                                 -->\n<!--                                   <div *ngIf=\"attributeType.type === 'geometry'\"> -->\n  \n<!--                                     <td style=\"vertical-align: middle;padding-left:0;\"> -->\n                                      <tr>\n                                        <td colspan=\"2\" style=\"padding-left:0;\">\n                                        \n                                          <button *ngIf=\"viewModel.oldValue && viewModel.newLayer\" class=\"btn btn-primary\" (click)=\"toggleOldGeometryView(viewModel)\" role=\"button\" [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                           <localize *ngIf=\"!viewModel.oldLayer || !viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.viewOld\"></localize>\n                                           <localize *ngIf=\"viewModel.oldLayer && viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hideOld\"></localize>\n                                          </button>\n                                          <button class=\"btn btn-primary\" style=\"margin-left:0;\" (click)=\"toggleGeometryView(viewModel)\" role=\"button\"\n                                            [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"!viewModel.newLayer || !viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.view\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hide\"></localize>\n                                          </button>\n                                          <button *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering && geoObjectType.isGeometryEditable\" class=\"btn btn-primary\" (click)=\"toggleGeometryEditing(viewModel)\" role=\"button\"\n                                            [disabled]=\"readonly || viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"viewModel.newLayer && !viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.save\"></localize>\n                                          </button>\n\n                                          <i *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"fa fa-copy clickable\" (click)=\"onAddNewVersion(viewModel.editor)\"></i>                                          \n                                        </td>\n                                      </tr>\n  \n                                      <tr *ngIf=\"(viewModel.newLayer && viewModel.newLayer.isRendering) && (geoObjectType.geometryType === 'POINT' || geoObjectType.geometryType === 'MULTIPOINT') && viewModel.value && viewModel.value.coordinates && (viewModel.value.coordinates.length == 1 || viewModel.value.coordinates.length == 0)\">\n                                        \n                                        <td style=\"width:50%;padding-left:0;padding-right:5px;\" >\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.latitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][1]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateY\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLatitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n                                        <td style=\"width:50%;\">\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.longitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][0]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateX\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLongitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n  \n                                      </tr>\n<!--                                     </td> -->\n<!--                                   </div> -->\n                                  </table>\n                              </td>\n\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5>\n                              \n                                  <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldStartDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate && !readonly ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                                  \n                                  <div *ngIf=\"viewModel.oldStartDate && !isNew\">\n                                    <p class=\"warning-text display-current-value\">\n                                      <localize key=\"change.request.changed.value.prefix\"></localize>\n                                      {{ viewModel.oldStartDate }}\n                                    </p>\n                                  </div>\n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                    <h5>\n                                      <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                    </h5>\n                                    <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldEndDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"viewModel.summaryKey !== 'DELETE' && !readonly\" [allowFutureDates]=\"true\" \n                                        [required]=\"true\" [placement]=\"'bottom'\" [oldDate]=\"(viewModel.oldEndDate && !isNew) ? viewModel.oldEndDate : null\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate != null ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                      \n                                    <!--\n                                    <div *ngIf=\"viewModel.oldEndDate && !isNew\">\n                                      <p class=\"warning-text\">\n                                        <localize key=\"change.request.changed.value.prefix\"></localize>\n                                        {{ viewModel.oldEndDate }}\n                                      </p>\n                                    </div>\n                                    -->\n                                  </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"viewModel.editor.conflictMessages && viewModel.editor.conflictMessages.size > 0\">\n                                <p *ngFor=\"let msg of viewModel.editor.conflictMessages\" [ngClass]=\"{'error-message': msg.severity === 'ERROR', 'warning-message': msg.severity === 'WARNING'}\" >\n                                  {{msg.message}}\n                                </p>\n                              </tr>\n                            </table>\n                            \n                          </td>\n                          \n                          \n<!--                             <td *ngIf=\"!readonly && (!this.isNew || attributeType.code !== 'exists') && (filterDate == null || (viewModel.summaryKey !== 'UNMODIFIED' && viewModel.summaryKey !== 'NEW'))\" (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" [title]=\"(viewModel.summaryKey === 'UNMODIFIED' ? 'changeovertime.manageVersions.remove.version' : 'changeovertime.manageVersions.revert.version') | localize\"> -->\n\n              \n                            <!-- Remove button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && (viewModel.summaryKey === 'UNMODIFIED' && viewModel.summaryKey !== 'NEW')\"\n                                [attr.disabled]=\"attributeType.code === 'exists' || filterDate != null\" \n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"(filterDate ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : 'changeovertime.manageVersions.remove.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-times\" ></i> \n                            </td>\n                            <!-- Revert button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && viewModel.summaryKey !== 'UNMODIFIED'\"\n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"('changeovertime.manageVersions.revert.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-undo\" ></i> \n                            </td>\n                        </tr>\n                      </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </li>\n              \n              <li *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"list-group-item\" style=\"text-align: left;\">\n                <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"> \n                  <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                </i>\n              </li>\n              \n            </ul>\n            \n            <!-- TODO : This code copy/pasted into standard-attribute-editor.component.html -->\n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject' && changeRequestEditor.changeRequest.approvalStatus === 'PENDING' && changeRequestEditor.changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.hasChanges()\" style=\"margin-left: 15px;\">\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n                <localize key=\"change.request.accept.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n                <localize key=\"change.request.reject.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n                <localize key=\"change.request.pending.btn\"></localize>\n              </button>\n            </div>              \n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.approvalStatus !== 'PENDING'\" style=\"margin-left:15px;\">\n              <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n                  <localize key=\"change.request.status.accepted\"></localize>\n              </strong>\n              <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n                  <localize key=\"change.request.status.rejected\"></localize>\n              </strong>\n            </div>\n            \n          </div>\n        </div>\n        <geoobject-editor-map style=\"width:55%;display:inline-block;vertical-align:top;margin-top:15px;\" *ngIf=\"isGeometryInlined && geomService.getRenderedLayers().length > 0\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" \n          [mapHeight]=\"mapRowHeight\" [readOnly]=\"!geoObjectType.isGeometryEditable && readonly\"\n          [bboxCode]=\"this.changeRequestEditor.geoObject.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"geomService.getRenderedLayers()[0].startDate\">\n        </geoobject-editor-map>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"change-request-page\",\n    templateUrl: \"./change-request-page.component.html\",\n    styleUrls: [\"./change-request-page.css\"]\n})\nexport class ChangeRequestPageComponent implements OnInit {\n\n  pageTitle: string;\n  bsModalRef: BsModalRef;\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n  isContributorOnly: boolean;\n\n  urlSubscriber: any;\n\n  highlightOid: string;\n\n  constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService, private route: ActivatedRoute) {\n      this.isAdmin = service.isAdmin();\n      this.isMaintainer = this.isAdmin || service.isMaintainer();\n      this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n      this.isContributorOnly = service.isContributerOnly();\n  }\n\n  ngOnInit(): void {\n      this.urlSubscriber = this.route.params.subscribe(params => {\n          this.highlightOid = params[\"oid\"];\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.urlSubscriber.unsubscribe();\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>{{pageTitle}}</h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <request-table [toggleId]=\"highlightOid\"></request-table>\n            \n            <submit-change-request *ngIf=\"isContributorOnly\"></submit-change-request>\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { DatePipe } from \"@angular/common\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError, ValueOverTime } from \"@registry/model/registry\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\n@Component({\n    selector: \"geoobject-editor\",\n    templateUrl: \"./geoobject-editor.component.html\",\n    styleUrls: [\"./geoobject-editor.component.css\"],\n    providers: [DatePipe]\n})\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    geoObject: GeoObjectOverTime;\n\n    //    /*\n    //     * GeoObject Geometry Editor\n    //     */\n    //    @ViewChild( \"geometryEditor\" ) geometryEditor;\n    //\n    //    areGeometriesValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    constructor(private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate(votArray: ValueOverTime[], startDate: string): any {\n        for (let i: number = 0; i < votArray.length; ++i) {\n            if (votArray[i].startDate === startDate) {\n                return votArray[i];\n            }\n        }\n\n        return null;\n    }\n\n    setMasterListId(id: string) {\n        this.masterListId = id;\n    }\n\n    setOnSuccessCallback(func: Function) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew(typeCode: string, dateStr: string, isGeometryEditable: boolean) {\n        this.isNewGeoObject = true;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.hierarchies = retJson.hierarchies;\n        });\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError(importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0) {\n            this.hierarchies = importError.object.parents;\n        } else {\n            this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n                this.hierarchies = retJson.hierarchies;\n            });\n        }\n\n        this.geoObject = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n\n        this.submitFunction = () => {\n            let config = {\n                historyId: historyId,\n                importErrorId: importError.id,\n                resolution: \"APPLY_GEO_OBJECT\",\n                parentTreeNode: this.hierarchies,\n                geoObject: this.geoObject,\n                isNew: importError.object.isNew\n            };\n\n            this.registryService.submitErrorResolve(config)\n                .then(() => {\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n        };\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting(code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean): void {\n        this.isNewGeoObject = false;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject(code, typeCode);\n        this.fetchGeoObjectType(typeCode);\n        this.fetchHierarchies(code, typeCode);\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject(code: string, typeCode: string) {\n        this.registryService.getGeoObjectOverTime(code, typeCode).then(geoObject => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(geoObject)).attributes);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then(locales => {\n            this.localizeService.setLocales(locales);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchGeoObjectType(code: string) {\n        this.registryService.getGeoObjectTypes([code], null)\n            .then(geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n\n                if (this.geoObject != null) {\n                    this.geoObject.geoObjectType = this.geoObjectType;\n                }\n\n                if (!this.geoObjectType.isGeometryEditable) {\n                    //                    this.areGeometriesValid = true;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                // eslint-disable-next-line no-console\n                console.log(err);\n            });\n    }\n\n    private fetchHierarchies(code: string, typeTypeCode: string) {\n        this.registryService.getHierarchiesForGeoObject(code, typeTypeCode)\n            .then((hierarchies: any) => {\n                this.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    getTypeAheadObservable(text, typeCode) {\n        return Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(text, typeCode).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, ptn: ParentTreeNode): void {\n        this.registryService.getGeoObjectByCode(e.item.code, ptn.geoObject.properties.type)\n            .then(geoObject => {\n                ptn.geoObject = geoObject;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    canSubmit(): boolean {\n        return this.attributeEditor && this.attributeEditor.isValid() &&\n            (this.isNewGeoObject || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        this.bsModalRef.hide();\n\n        if (this.submitFunction == null) {\n        /*\n            this.registryService.applyGeoObjectEdit(this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes)\n                .then(() => {\n\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n                */\n        } else {\n            this.submitFunction();\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\">\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"this.geoObjectType && geoObject && hierarchies\"\n            #attributeEditor \n            [geoObjectType]=\"this.geoObjectType\"\n            [postGeoObject]=\"this.geoObject\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isGeometryInlined]=\"true\"\n            [hierarchies]=\"hierarchies\"\n            [readOnly]=\"false\">\n        </geoobject-shared-attribute-editor>\n\n        <!--\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n        -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!canSubmit()\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { Observable } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { MasterListVersion } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ExportFormatModalComponent } from \"./export-format-modal.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, ProgressService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n    selector: \"master-list\",\n    templateUrl: \"./master-list.component.html\",\n    styleUrls: [\"./master-list.component.css\"]\n})\nexport class MasterListComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    list: MasterListVersion = null;\n    p: number = 1;\n    current: string = \"\";\n    filter: { attribute: string, value: string, label: string }[] = [];\n    selected: string[] = [];\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 100,\n        results: []\n    };\n\n    sort = { attribute: \"code\", order: \"ASC\" };\n    isPublished: boolean = true;\n    isRefreshing: boolean = false;\n    isWritable: boolean = false;\n    listAttrs: any[];\n\n    showInvalid = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    public searchPlaceholder = \"\";\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n\n    constructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private dateService: DateService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n        this.isPublished = (this.route.snapshot.paramMap.get(\"published\") === \"true\");\n\n        this.service.getMasterListVersion(oid).then(version => {\n            this.setList(version);\n            const orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(orgCode, typeCode);\n\n            this.onPageChange(1);\n\n            if (version.refreshProgress != null) {\n                this.handleProgressChange(version.refreshProgress);\n            }\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.notifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(message);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.notifier.complete();\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    setList(_list: MasterListVersion): void {\n        this.list = _list;\n        this.listAttrs = this.calculateListAttributes();\n    }\n\n    onShowInvalidChange() {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.message = null;\n\n        this.service.data(this.list.oid, pageNumber, this.page.pageSize, this.getFilter(), this.sort).then(page => {\n            this.page = page;\n            this.listAttrs = this.calculateListAttributes();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onSort(attribute: { name: string, label: string }): void {\n        if (this.sort.attribute === attribute.name) {\n            this.sort.order = (this.sort.order === \"ASC\" ? \"DESC\" : \"ASC\");\n        } else {\n            this.sort = { attribute: attribute.name, order: \"ASC\" };\n        }\n\n        this.onPageChange(1);\n    }\n\n    clearFilters(): void {\n        this.list.attributes.forEach(attr => {\n            attr.search = null;\n        });\n\n        this.filter = [];\n        this.showInvalid = false;\n        this.selected = [];\n\n        this.onPageChange(1);\n    }\n\n    toggleFilter(attribute: any): void {\n        attribute.isCollapsed = !attribute.isCollapsed;\n    }\n\n    getFilter(): { attribute: string, value: string, label: string }[] {\n        let newFilter = JSON.parse(JSON.stringify(this.filter));\n\n        if (!this.showInvalid) {\n            newFilter.push({ attribute: \"invalid\", value: \"false\" });\n        }\n\n        return newFilter;\n    }\n\n    calculateListAttributes() {\n        let attrs: any[];\n\n        if (this.showInvalid) {\n            attrs = this.list.attributes;\n        } else {\n            attrs = JSON.parse(JSON.stringify(this.list.attributes));\n\n            let index = attrs.findIndex(attr => attr.name === \"invalid\");\n\n            if (index !== -1) {\n                attrs.splice(index, 1);\n            }\n        }\n\n        attrs.forEach(attribute => {\n            attribute.isCollapsed = true;\n        });\n\n        return attrs;\n    }\n\n    getTypeaheadDataObservable(attribute: any): void {\n        return Observable.create((observer: any) => {\n            this.message = null;\n\n            // Get the valid values\n            this.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.getFilter()).then(options => {\n                options.unshift({ label: \"[\" + this.localizeService.decode(\"masterlist.nofilter\") + \"]\", value: null });\n\n                observer.next(options);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    handleProgressChange(progress: any): void {\n        this.isRefreshing = (progress.current < progress.total);\n\n        this.pService.progress(progress);\n\n        if (!this.isRefreshing) {\n            // Refresh the resultSet\n            this.onPageChange(1);\n        }\n    }\n\n    handleDateChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && ((attribute.value.start != null && attribute.value.start !== \"\") || (attribute.value.end != null && attribute.value.end !== \"\"))) {\n            let label = \"[\" + attribute.label + \"] : [\";\n\n            if (attribute.value.start != null) {\n                label += attribute.value.start;\n            }\n\n            if (attribute.value.start != null && attribute.value.end != null) {\n                label += \" - \";\n            }\n\n            if (attribute.value.end != null) {\n                label += attribute.value.end;\n            }\n\n            label += \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleInputChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && attribute.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleListChange(e: TypeaheadMatch, attribute: any): void {\n        attribute.value = e.item;\n        attribute.isCollapsed = true;\n\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        this.list.attributes.forEach(attr => {\n            if (attr.base === attribute.base) {\n                attr.search = \"\";\n            }\n        });\n\n        if (attribute.value.value != null && attribute.value.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value.label + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n            this.selected.push(attribute.base);\n            attribute.search = e.item.label;\n        } else {\n            this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n            attribute.search = \"\";\n        }\n\n        this.onPageChange(1);\n    }\n\n    isFilterable(attribute: any): boolean {\n        return attribute.type !== \"none\" && attribute.name !== \"invalid\" && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishMasterList(this.list.oid).toPromise()\n            .then((historyOid: string) => {\n                this.isRefreshing = true;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n        // this.list = list;\n        // this.list.attributes.forEach(attribute => {\n        //  attribute.isCollapsed = true;\n        // });\n\n        // Refresh the resultSet\n        // this.onPageChange(1);\n    }\n\n    onExport(): void {\n        this.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.onFormat.subscribe(format => {\n            if (format === \"SHAPEFILE\") {\n                window.location.href = acp + \"/master-list/export-shapefile?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.getFilter()));\n            } else if (format === \"EXCEL\") {\n                window.location.href = acp + \"/master-list/export-spreadsheet?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.getFilter()));\n            }\n        });\n    }\n\n    changeTypeaheadLoading(attribute: any, loading: boolean): void {\n        attribute.loading = loading;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onWheel(event: WheelEvent): void {\n        let tableEl = (<Element>event.target).parentElement.closest(\"table\").parentElement;\n\n        tableEl.scrollLeft += event.deltaY;\n        event.preventDefault();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar *ngIf=\"isRefreshing\"></progress-bar>\n    \n    <!--\n    <div *ngIf=\"isRefreshing\" class=\"version-busy-overlay\">\n      This Master List Version is currently refreshing...\n      ...Please wait... ?\n    </div>\n    -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-3\">\n                <h4>\n                    <localize key=\"masterlist.generatedDate\"></localize>\n                    : <span class=\"date-string-display\">\n                          {{formatDate(list.publishDate)}}\n                      </span>\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : <span class=\"date-string-display\">\n                          {{formatDate(list.forDate)}}\n                      </span>\n                </h4>\n            </div>\n            <div *ngIf=\"filter.length > 0\" class=\"col-md-6\">\n\t\t            <div class=\"col-md-12 table-responsive\" style=\"\">\n\t\t                <localize key=\"masterlist.filters\"></localize>\n\t\t                <ol>\n\t\t                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n\t\t                </ol>\n\t\t            </div>\n\t\t        </div>\n        </div>\n<!--         <div class=\"row\"> -->\n<!--             <div *ngIf=\"list\" class=\"col-md-12\"> -->\n<!--               <a [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, (!isWritable || list.isAbstract), list.forDate]\" routerLinkActive=\"active\"> -->\n<!--                 <localize key=\"masterlist.gotoMap\"></localize> -->\n<!--               </a> -->\n                \n<!--             </div> -->\n<!--         </div> -->\n\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder pull-right\">\n            \n                    <span *ngIf=\"isWritable\" class=\"clickable\" style=\"vertical-align:middle;display:inline-block;\">\n                        <boolean-field [(value)]=\"showInvalid\" (change)=\"onShowInvalidChange()\" [localizeLabelKey]=\"'masterlist.showInvalid'\" ></boolean-field>\n                    </span>\n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true}\" style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n\n                        <button *ngIf=\"isWritable && !list.isAbstract\" type=\"submit\"\n                           [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, !isWritable, list.forDate, '__NEW__', (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\"\n                         class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                        </button>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"dropdown\" *ngIf=\"isWritable && list.isAbstract\">\n\t\t\t\t\t\t\t\t\t\t\t\t  <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <localize key=\"masterlist.newGeoObject\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t    <span class=\"caret\"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t  </button>\n\t\t\t\t\t\t\t\t\t\t\t\t  <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <li><localize style=\"padding-left:10px;\" key=\"masterlist.newGeoObject.selectASubtype\"></localize></li>\n\t\t\t\t\t\t\t\t\t\t\t\t    <li role=\"separator\" class=\"divider\"></li>\n\t\t\t\t\t\t\t\t\t\t\t\t    <li *ngFor=\"let subtype of list.subtypes\"><a [routerLink]=\"['/registry/dataset-location-manager', list.oid, subtype.code, !isWritable, list.forDate, '__NEW__', (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\">{{subtype.label}}</a></li>\n\t\t\t\t\t\t\t\t\t\t\t\t  </ul>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n                        <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\"  class=\"col-md-12 table-responsive text-nowrap\" id=\"list-view-table\" style=\"max-height:calc(100vh - 439px); min-height:calc(100vh - 439px);\">\n                <table class=\"list-table table table-bordered table-striped\"  >\n                    <thead style=\"position: sticky;top: 0;background: #ececec;\">\n                        <tr>\n                          <th style=\"width: 3%;position: sticky;top: 0;\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                          <th style=\"position: sticky;top: 0\" *ngFor=\"let attribute of listAttrs\" class=\"label-column\">\n\n                            <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n\t                            <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t                          <i style=\"font-size: 20px;\" class=\"fa fa-filter\" [title]=\"'button.filter.helptext' | localize\"></i>\n\t                            </a>\n\t\t\t\t\t\t\t\t            </div> \n\t\t\t\t\t\t\t\t            <a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            </a>\n\n                            <div *ngIf=\"isFilterable(attribute)\">\n                                <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a> -->\n                                <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n\t                                <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n\t                                <div *ngIf=\"attribute.type === 'date'\">\n\t<!--                                             <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />  -->\n\t<!--                                             <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> -->\n\t                                    <date-field [(value)]=\"attribute.value.start\" label=\"\" [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'Start'\" (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\"></date-field>\n\t                                    <date-field [(value)]=\"attribute.value.end\" label=\"\" [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'End'\" (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\"></date-field>\n\t                                </div>\n\t                                <input *ngIf=\"attribute.type === 'list'\" \n\t                                  type=\"text\" \n\t                                  [placeholder]=\"('masterlist.search' | localize) + '...'\" \n\t                                  [name]=\"attribute.name\"\n\t                                  [(ngModel)]=\"attribute.search\"\n\t                                  [typeaheadAsync]=\"true\"\n\t                                  [typeahead]=\"getTypeaheadDataObservable(attribute)\"\n\t                                  (typeaheadOnSelect)=\"handleListChange($event, attribute)\"\n\t                                  [typeaheadOptionsLimit]=\"100\"\n\t                                  [typeaheadMinLength]=\"0\"\n\t                                  [typeaheadWaitMs]=\"300\"\n\t                                  [ngClass]=\"{'inline-loading':attribute.loading}\"    \n\t                                  (typeaheadLoading)=\"changeTypeaheadLoading(attribute, $event)\"                                      \n\t                                  typeaheadOptionField=\"label\"\n\t                                  class=\"form-control\" autocomplete=\"off\" container=\"body\">\n\n                                </div>\n                            </div>\n                          </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td style=\"width: 3%; text-align: center;\" class=\"label-column\">\n                              <a class=\"fa\" style=\"padding:3px;\" [ngClass]=\"isWritable ? 'fa fa-pencil' : 'fa fa-eye'\" [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, !isWritable, list.forDate, result.code, (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\"></a>\n                            </td>\n                            <td *ngFor=\"let attribute of listAttrs\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"display:inline-block;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                <span style=\"display:inline-block;margin-left:20px;vertical-align:middle;color:#cacaca;font-weight:bold;\">\n                  <localize key=\"masterlist.pagination.showing\"></localize>\n                  &nbsp;{{(page.pageNumber-1)*page.pageSize}} \n                  -&nbsp;{{page.pageNumber*page.pageSize}} \n                  &nbsp;<localize key=\"masterlist.pagination.of\"></localize>&nbsp;{{page.count}}\n                </span> \n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { ExportFormatModalComponent } from './export-format-modal.component';\nimport { MasterList, MasterListVersion } from '@registry/model/registry';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { RegistryService } from '@registry/service';\nimport { DateService } from '@shared/service/date.service';\nimport { AuthService, LocalizationService } from '@shared/service';\nimport { ExportSystemModalComponent } from './export-system-modal.component';\n\ndeclare var acp: any;\n\n@Component({\n  selector: 'published-master-list-history',\n  templateUrl: './published-master-list-history.component.html',\n  styleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit, OnDestroy {\n  message: string = null;\n  list: MasterList = null;\n  page: any = {\n    pageSize: 10,\n    pageNumber: 1,\n    count: 1,\n    results: []\n  };\n\n  @Input() oid: string;\n\n  /*\n   * Reference to the modal current showing\n  */\n  bsModalRef: BsModalRef;\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n\n  isAdmin: boolean;\n\n\n  constructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService, private localizeService: LocalizationService,\n    private dateService: DateService) {\n\n    this.isAdmin = authService.isAdmin();\n  }\n\n  ngOnInit(): void {\n    this.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n      this.list = list;\n\n      this.onPageChange(1);\n    });\n\n    let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n    this.notifier = webSocket(baseUrl + '/websocket/notify');\n    this.notifier.subscribe(message => {\n      if (message.type === 'PUBLISH_JOB_CHANGE') {\n        this.onPageChange(this.page.pageNumber);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.notifier.complete();\n  }\n\n  //isGeoObjectTypeRM(type: string): boolean {\n  //  return this.authService.isGeoObjectTypeRM(type);\n  //}\n\n  onDeleteMasterListVersion(version: MasterListVersion): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n    this.bsModalRef.content.onConfirm.subscribe(data => {\n      this.service.deleteMasterListVersion(version.oid).then(response => {\n        this.updateList();\n\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n    });\n  }\n\n  updateList(): void {\n    // update the list of versions. \n    this.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n      this.list = list;\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  onPublish(): void {\n    this.message = null;\n\n    this.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n      // Refresh the page\n      this.onPageChange(this.page.pageNumber);\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  onPageChange(pageNumber: number): void {\n    if (this.list != null) {\n\n      this.message = null;\n\n      this.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n        this.page = response;\n\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n\n      this.updateList();\n    }\n  }\n\n  onViewMetadata(): void {\n    this.bsModalRef = this.modalService.show(PublishModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.readonly = true;\n    this.bsModalRef.content.master = this.list;\n    this.bsModalRef.content.isNew = false;\n  }\n\n\n  onView(version: MasterListVersion): void {\n    this.router.navigate(['/registry/master-list/', version.oid, true])\n  }\n\n  onPublishShapefile(version: MasterListVersion): void {\n\n    this.service.publishShapefile(version.oid).then(() => {\n\n      this.onPageChange(this.page.pageNumber);\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  onExportToFhir(version: MasterListVersion): void {\n    this.bsModalRef = this.modalService.show(ExportSystemModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n    this.bsModalRef.content.onSystemSet.subscribe(systemId => {\n      this.service.exportToFhir(version.oid, systemId).then(() => {\n\n        this.onPageChange(this.page.pageNumber);\n\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n    });\n  }\n\n  onDownloadShapefile(version: MasterListVersion): void {\n    window.location.href = acp + '/master-list/download-shapefile?oid=' + version.oid;\n  }\n\n  formatDate(date: string): string {\n    return this.dateService.formatDateForDisplay(date);\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n     <div *ngIf=\"list && ((list.write))\" style=\"margin-bottom: 10px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" \n                    [title]=\"'masterList.publish.help.text' | localize\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.publishDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onExportToFhir(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.export-to-fhir\"></localize>                                    \n                                </button>                                \n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version )\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.forDate)}}\n                          </span>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.publishDate)}}\n                          </span>\n                        </td>\n                        \n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <div class=\"row\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span>\n                                            <span style=\"display: block;\"> {{job.author}} </span>\n                                            <span style=\"display: block;\"> {{job.type}} </span>\n                                            <span style=\"display: block;\"> {{job.status}} </span>\n                                            <span *ngIf=\"job.exception\" style=\"display: block;\"> {{job.exception.message}} </span>\n                                            <span *ngIf=\"job.message\" style=\"display: block;\"> {{job.message}} </span>                                            \n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterList, MasterListVersion } from \"@registry/model/registry\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"master-list-history\",\n    templateUrl: \"./master-list-history.component.html\",\n    styleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\n    message: string = null;\n    list: MasterList = null;\n    forDate: string = \"\";\n    isForDateValid: boolean = true;\n\n    @Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private router: Router, private modalService: BsModalService, private localizeService: LocalizationService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n            this.list = list;\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n            this.list.versions.push(version);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewMetadata(): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.originalPublishStartDate = this.list.publishingStartDate;\n        this.bsModalRef.content.isNew = false;\n    }\n\n    onView(version: MasterListVersion): void {\n        this.router.navigate([\"/registry/master-list/\", version.oid, false]);\n    }\n\n    onDelete(version: MasterListVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + version.forDate + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterListVersion(version.oid).then(response => {\n                this.list.versions = this.list.versions.filter((value, index, arr) => {\n                    return value.oid !== version.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && list.exploratory\" style=\"margin-bottom: 10px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\" style=\"margin-left: 10px;\" autocomplete=\"off\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> \n\n                    <date-field [(value)]=\"forDate\" [(valid)]=\"isForDateValid\" label=\"\" style=\"display:inline-grid;\" [inputName]=\"'forDate'\" \n                        [allowFutureDates]=\"false\" [required]=\"true\" [placement]=\"'right'\"></date-field>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid || !isForDateValid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.generatedDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.forDate)}}\n                          </span>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.createDate)}}\n                          </span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { MasterList } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\n@Component({\n\n    selector: \"master-list-view\",\n    templateUrl: \"./master-list-view.component.html\",\n    styleUrls: [\"./master-list-view.component.css\"]\n})\nexport class MasterListViewComponent implements OnInit {\n\n    content: string = \"\";\n    list: MasterList = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        if (oid != null) {\n            this.content = \"PUB\";\n        }\n\n        this.service.getMasterList(oid).then(list => {\n            this.list = list;\n\n            if (list.read) {\n                this.content = \"EXP\";\n            }\n        });\n    }\n\n    onViewMetadata(event: any): void {\n        event.preventDefault();\n\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.isNew = false;\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a *ngIf=\"list && list.read\" style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\"><localize key=\"lists.exploratory.link.label\"></localize></a>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\"><localize key=\"lists.published.link.label\"></localize></a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { interval } from \"rxjs\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\n@Component({\n    selector: \"scheduled-jobs\",\n    templateUrl: \"./scheduled-jobs.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class ScheduledJobsComponent implements OnInit {\n\n    message: string = null;\n\n    activeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    completeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    isViewAllOpen: boolean = false;\n\n    constructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.onActiveJobsPageChange(1);\n\n        this.pollingData = interval(1000).subscribe(() => {\n            this.activeTimeCounter++;\n            this.completeTimeCounter++;\n\n            if (this.isViewAllOpen) {\n                if (this.activeTimeCounter >= 4) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n                if (this.completeTimeCounter >= 7) {\n                    this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n                    this.completeTimeCounter = 0;\n                }\n            } else {\n                if (this.activeTimeCounter >= 2) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n        if (job.status === \"FEEDBACK\") {\n            return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PaginationPage): void {\n        page.results.forEach(job => {\n            let stepConfig = {\n                steps: [\n                    { label: this.localizeService.decode(\"scheduler.step.fileImport\"), status: \"COMPLETE\" },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.staging\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.validation\"),\n                        status: job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.databaseImport\"),\n                        status: job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n\n            job = job as ScheduledJobOverview;\n            job.stepConfig = stepConfig;\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    onViewAllCompleteJobs(): void {\n        this.onCompleteJobsPageChange(1);\n\n        this.isViewAllOpen = true;\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-history/\", code]);\n    }\n\n    onActiveJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCompleteJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(job.configuration).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n                    let activeJob = this.activeJobsPage.results[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.results.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n                    let activeJob = this.activeJobsPage.results[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.results.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    <span class=\"date-string-display\">\n                                                        {{formatDate(job.createDate)}}\n                                                    </span>\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                              <span class=\"date-string-display\">\n                                {{formatDate(job.createDate)}}\n                              </span>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <span class=\"date-string-display\">\n                                {{formatDate(job.lastUpdateDate)}}\n                            </span>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from \"./conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./conflict-widgets/reupload-modal.component\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\ndeclare let acp: any;\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./job.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class JobComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n\n    constructor(public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.notifier.subscribe(message => {\n            if (message.type === \"IMPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n        for (let i = 0; i < this.page.results.length; ++i) {\n            let pageConflict = this.page.results[i];\n\n            if (pageConflict.id === problem.id) {\n                this.page.results.splice(i, 1);\n            }\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n        \n        if (probType === \"net.geoprism.registry.geoobject.ImportOutOfRangeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.importOutOfRange\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: any): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n        this.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe(data => {\n            if (data.action === \"RESOLVED\") {\n                this.onProblemResolved(data.data);\n            }\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n            this.job = response;\n\n            if (this.job.stage === \"IMPORT_RESOLVE\") {\n                this.page = this.job.importErrors;\n            } else if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.page = this.job.problems;\n\n                for (let i = 0; i < this.page.results.length; ++i) {\n                    let problem = this.page.results[i];\n\n                    if (problem.type === \"RowValidationProblem\") {\n                        this.hasRowValidationProblem = true;\n                    }\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.results.forEach(row => {\n            row.selected = this.allSelected;\n        });\n    }\n\n    onReuploadAndResume(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.job = this.job;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.router.navigate([\"/registry/scheduled-jobs\"]);\n        });\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n        if (this.page.results.length === 0) {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n            } else {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n            }\n\n            this.bsModalRef.content.type = ModalTypes.danger;\n\n            this.bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.resolveScheduledJob(historyId).then(response => {\n                    this.router.navigate([\"/registry/scheduled-jobs\"]);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            });\n        }\n    }\n\n    onCancelScheduledJob(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(this.job.configuration).then(response => {\n                // this.bsModalRef.hide()\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              <span class=\"date-string-display\">\n                                    {{formatDate(job.createDate)}}\n                              </span>\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"job-conflict-modal\",\n    templateUrl: \"./job-conflict-modal.component.html\",\n    styleUrls: []\n})\nexport class JobConflictModalComponent implements OnInit {\n\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef) {\n        this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onProblemResolvedListener(problem: any): void {\n        this.onConflictAction.next({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJob, ImportError } from \"@registry/model/registry\";\n\nimport { GeoObjectEditorComponent } from \"../../geoobject-editor/geoobject-editor.component\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"import-problem-widget\",\n    templateUrl: \"./import-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ImportProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId(null);\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolved.emit(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>:\n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div *ngIf=\"problem.object != null && problem.object.geoObject != null\" style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"parent-reference-problem-widget\",\n    templateUrl: \"./parent-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"term-reference-problem-widget\",\n    templateUrl: \"./term-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(conflict: any): Observable<any> {\n        return Observable.create((observer: any) => {\n            this.iService.getTermSuggestions(conflict.mdAttributeId, this.searchLabel, \"20\").then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.termId = e.item.value;\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            classifierId: this.termId,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"row-validation-problem-widget\",\n    templateUrl: \"./row-validation-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class RowValidationProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">{{errorMessage}}</div>\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <div>{{message}}</div>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\n\nimport { TaskService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectType, PaginationPage } from \"@registry/model/registry\";\n\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"task-viewer\",\n    templateUrl: \"./task-viewer.component.html\",\n    styleUrls: [\"./task-viewer.component.css\"],\n    providers: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    completedTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    isViewAllOpen: boolean = false;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private taskService: TaskService, private localizeService: LocalizationService, private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onInProgressTasksPageChange(1);\n    }\n\n    onInProgressTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, \"UNRESOLVED\").then(page => {\n            this.inProgressTasks = page;\n        });\n    }\n\n    onCompletedTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, \"RESOLVED\").then(page => {\n            this.completedTasks = page;\n        });\n    }\n\n    onCompleteTask(task: any): void {\n        // this.isViewAllOpen = true;\n\n        this.taskService.completeTask(task.id).then(() => {\n            const index = this.inProgressTasks.results.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.inProgressTasks.results.splice(index, 1);\n            }\n\n            if(this.isViewAllOpen) {\n                this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            }\n        });\n    }\n\n    onMoveTaskToInProgress(task: any): void {\n        this.isViewAllOpen = true;\n\n        this.taskService.setTaskStatus(task.id, \"UNRESOLVED\").then(() => {\n            const index = this.completedTasks.results.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.completedTasks.results.splice(index, 1);\n            }\n\n            this.completedTasks.results.splice(index, 1);\n            this.inProgressTasks.results.push(task);\n        });\n    }\n\n    onToggleCompletedTasks(): void {\n        this.isViewAllOpen = !this.isViewAllOpen;\n\n        if (this.isViewAllOpen) {\n            this.onCompletedTasksPageChange(1);\n        }\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n\n    <div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n          <div\n            *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    {{formatDate(task.createDate)}}\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked\n                      id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\"\n                      (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\"\n                      name=\"{{task.id}}-completed\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <h2 class=\"col-md-9\">\n        <localize key=\"tasks.completedTasksTitle\"></localize>\n      </h2>\n      <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onToggleCompletedTasks()\"\n        class=\"btn btn-default pull-right\" role=\"button\">\n        <localize *ngIf=\"!isViewAllOpen\" key=\"tasks.viewCompletedTasksButton\"></localize>\n        <localize *ngIf=\"isViewAllOpen\" key=\"tasks.hideCompletedTasksButton\"></localize>\n      </button>\n    </div>\n    <hr>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div\n            *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\" style=\"margin-right:30px;\">\n                    {{formatDate(task.createDate)}}\n                  </span>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.completeDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    {{formatDate(task.completedDate)}}\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\"\n                      (click)=\"onMoveTaskToInProgress(task)\" [id]=\"task.id+ '-inProgress'\" [name]=\"task.id+ '-inProgress'\"\n                      value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\"\n                    [id]=\"task.id+ '-completed'\" [name]=\"task.id+ '-completed'\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\">\n            <localize key=\"tasks.no.completed.tasks.message\"></localize>\n          </p>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig, MasterList, MasterListView } from '@registry/model/registry';\nimport { RegistryService, SynchronizationConfigService } from '@registry/service';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-export-synchronization-config',\n  templateUrl: './fhir-export-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirExportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  subscription: Subscription = null;\n  versions: { [key: string]: MasterList } = {};\n  implementations: { className: string, label: string }[] = [];\n  lists: MasterListView[] = [];\n\n  constructor(private service: SynchronizationConfigService, private rService: RegistryService) { }\n\n  ngOnInit(): void {\n\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirExportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        levels: [],\n        hierarchy: null\n      }\n    }\n\n    if (this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        var level = this.config.configuration.levels[i];\n\n        // Get version options\n        this.onSelectMasterList(level);\n      }\n    }\n    else {\n      this.config.configuration.levels = [];\n    }\n\n    // Get \n    this.rService.getMasterListsByOrg().then(response => {\n\n      this.lists = [];\n\n      response.orgs.forEach(org => {\n        org.lists.forEach(view => {\n          if (view.read) {\n            this.lists.push(view);\n          }\n        });\n      })\n    });\n  }\n\n  onSelectMasterList(level: FhirSyncLevel): void {\n\n    if (level.masterListId != null) {\n\n      this.rService.getMasterListHistory(level.masterListId, 'PUBLISHED').then(list => {\n        this.versions[level.masterListId] = list;\n      });\n    }\n    else {\n      this.versions[level.masterListId] = null;\n    }\n  }\n\n  addLevel(): void {\n    var level = {\n      masterListId: null,\n      versionId: null,\n      level: this.config.configuration.levels.length,\n    };\n\n    this.config.configuration.levels.push(level);\n  }\n\n  removeLevel(i: number): void {\n    this.config.configuration.levels.splice(i, 1);\n\n    // Reorder the level\n    if (this.config.configuration != null && this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        this.config.configuration.levels[i].level = i;\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.units\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 3%\">\n                            <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.field\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.forDate\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"synchronization.config.implementation\"></localize>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let level of config.configuration.levels; let i = index;\"\n                        [style.background-color]=\"'#F7F7F7'\">\n                        <td style=\"width: 3%\">\n                            <label style=\"padding: 10px 0; margin: 0;\">\n                                <localize key=\"sync.level.label\"></localize> {{level.level + 1}}\n                            </label>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.masterListId\" (change)=\"onSelectMasterList(level)\"\n                                [name]=\"'masterList' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let list of lists\" [value]=\"list.oid\">{{list.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select *ngIf=\"versions[level.masterListId] != null\" [(ngModel)]=\"level.versionId\"\n                                [name]=\"'version' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let version of versions[level.masterListId].versions\"\n                                    [value]=\"version.oid\">{{version.forDate}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.implementation\" [name]=\"'implementation' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let implementation of implementations\"\n                                    [value]=\"implementation.className\">{{implementation.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <div>\n                                <a style=\"padding: 10px;\" (click)=\"removeLevel(i)\"\n                                    [title]=\"'button.delete.helptext' | localize\">\n                                    <i class=\"fa fa-trash-o ico-remove\"></i> <label\n                                        style=\"cursor: pointer; margin-left: 9px;\">\n                                        <localize key=\"sync.level.delete\"></localize>\n                                    </label>\n                                </a>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"button-column\"><a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\"\n                                (click)=\"addLevel()\"></a></td>\n                    </tr>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { AttributeConfigInfo, DHIS2AttributeMapping, SyncLevel } from \"@registry/model/sync\";\n\nlet DEFAULT_MAPPING_STRATEGY = \"net.geoprism.registry.etl.DHIS2AttributeMapping\";\n\nexport interface GOTAttributeConfig {\n  geoObjectTypeCode?: string;\n  mappings: DHIS2AttributeMapping[];\n  attrConfigInfos: AttributeConfigInfo[];\n}\nexport interface LevelRow {\n  isAttributeEditor: boolean;\n\n  level?: SyncLevel;\n  levelNum?: number;\n\n  attrCfg?: GOTAttributeConfig;\n}\n\n@Component({\n\n    selector: \"dhis2-synchronization-config\",\n    templateUrl: \"./dhis2-synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class Dhis2SynchronizationConfigComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() cOrg: OrgSyncInfo = null;\n\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  organizations: OrgSyncInfo[] = [];\n\n  types: GeoObjectType[] = [];\n\n  levelRows: LevelRow[] = [];\n\n  orgUnitGroups: any[] = [];\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    // Get the types\n    // this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n    //   this.types = types;\n    // });\n\n      if (this.config.configuration == null) {\n          this.config.configuration = {\n              levels: [],\n              hierarchyCode: null\n          }\n      }\n\n      this.levelRows = [];\n\n      if (this.config.configuration.levels != null) {\n          for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n              var level = this.config.configuration.levels[i];\n\n              var levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n              this.levelRows.push(levelRow);\n          }\n      } else {\n          this.config.configuration.levels = [];\n      }\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      this.fieldChange.subscribe(() => {\n          this.clearMappingData();\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.fieldChange.unsubscribe();\n  }\n\n  onChangeHierarchy(): void {\n      this.clearMappingData();\n  }\n\n  buildDefaultMappings(): DHIS2AttributeMapping[] {\n      return [\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"name\",\n              dhis2AttrName: \"name\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"shortName\",\n              dhis2AttrName: \"shortName\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"code\",\n              dhis2Id: \"code\",\n              externalId: null,\n              dhis2AttrName: \"code\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"openingDate\",\n              dhis2AttrName: \"openingDate\"\n          }\n          /*\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"created\",\n              dhis2AttrName: \"created\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"lastUpdateDate\",\n              externalId: null,\n              dhis2Id: \"lastUpdated\",\n              dhis2AttrName: \"lastUpdated\"\n          },\n          */\n      ];\n  }\n\n  clearMappingData(): void {\n      this.types = [];\n      this.levelRows = [];\n      this.config.configuration[\"levels\"] = [];\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      let lvl = {\n          type: null,\n          geoObjectType: null,\n          level: 0,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      this.config.configuration[\"levels\"] = [lvl];\n      this.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n  }\n\n  onSelectLevelType(levelRow: LevelRow): void {\n      if (levelRow.level.type === \"RELATIONSHIPS\") {\n          levelRow.attrCfg.mappings = [];\n          levelRow.level.mappings = [];\n\n          let editorIndex = this.getEditorIndex();\n          if (editorIndex !== -1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n      } else {\n          if (levelRow.attrCfg.mappings.length === 0) {\n              levelRow.attrCfg.mappings = this.buildDefaultMappings();\n              levelRow.level.mappings = levelRow.attrCfg.mappings;\n\n              let len = levelRow.level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = levelRow.level.mappings[i];\n\n                  levelRow.attrCfg.attrConfigInfos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n          }\n      }\n  }\n\n  deleteMapping(levelRow: LevelRow, index: number): void {\n      levelRow.attrCfg.mappings.splice(index, 1);\n  }\n\n  addNewMapping(levelRow: LevelRow): void {\n      levelRow.attrCfg.mappings.push({\n          attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n          cgrAttrName: null,\n          dhis2AttrName: null,\n          externalId: null,\n          terms: []\n      });\n  }\n\n  addLevel(): void {\n      var lvl = {\n          type: null,\n          geoObjectType: null,\n          level: this.config.configuration.levels.length,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      var len = this.config.configuration[\"levels\"].push(lvl);\n      this.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n  }\n\n  removeLevel(levelNum: number, levelRowIndex: number): void {\n      if (levelNum < this.config.configuration[\"levels\"].length) {\n          var editorIndex = this.getEditorIndex();\n          if (editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          this.levelRows.splice(levelRowIndex, 1);\n\n          var newLevelNum = 0;\n          for (var i = 0; i < this.levelRows.length; ++i) {\n              var levelRow: LevelRow = this.levelRows[i];\n\n              levelRow.levelNum = newLevelNum;\n\n              if (!levelRow.isAttributeEditor) {\n                  newLevelNum = newLevelNum + 1;\n              }\n          }\n\n          this.config.configuration[\"levels\"].splice(levelNum, 1);\n      }\n  }\n\n  getEditorIndex(): number {\n      for (var i = 0; i < this.levelRows.length; ++i) {\n          var levelRow = this.levelRows[i];\n\n          if (levelRow.isAttributeEditor) {\n              return i;\n          }\n      }\n\n      return -1;\n  }\n\n  configureAttributes(levelRow: any): void {\n      var editorIndex = this.getEditorIndex();\n\n      if (editorIndex !== -1) {\n          this.levelRows.splice(editorIndex, 1);\n\n          if (editorIndex === levelRow.levelNum + 1) {\n              return;\n          }\n      }\n\n      this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n  }\n\n  getTermOptions(info: AttributeConfigInfo, dhis2Id: string) {\n      for (var i = 0; i < info.dhis2Attrs.length; ++i) {\n          var dhis2Attr = info.dhis2Attrs[i];\n\n          if (dhis2Attr.dhis2Id === dhis2Id) {\n              return dhis2Attr.options;\n          }\n      }\n  }\n\n  onChangeDHIS2Attr(mapping: DHIS2AttributeMapping) {\n      if (mapping.dhis2Id == null || mapping.dhis2Id === \"\") {\n          if (mapping.terms != null) {\n              mapping.terms = {};\n          }\n\n          mapping.dhis2AttrName = null;\n\n          return;\n      }\n\n      mapping.terms = {};\n\n      let len = mapping.info.dhis2Attrs.length;\n      for (let i = 0; i < len; ++i) {\n          if (mapping.info.dhis2Attrs[i].dhis2Id === mapping.dhis2Id) {\n              if (mapping.info.dhis2Attrs[i].dhis2Id !== mapping.info.dhis2Attrs[i].name) {\n                  mapping.externalId = mapping.info.dhis2Attrs[i].dhis2Id;\n              } else {\n                  mapping.externalId = null;\n              }\n              mapping.dhis2AttrName = mapping.info.dhis2Attrs[i].name;\n          }\n      }\n  }\n\n  onSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n      if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n          var levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n          levelRow.attrCfg = null;\n          levelRow.level.mappings = [];\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          return;\n      }\n\n      var attrCfg = this.levelRows[levelRowIndex].attrCfg;\n      if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n          // Resume an editing session on attributes that we fetched previously\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex !== levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n\n              if (editorIndex < levelRowIndex) {\n                  levelRowIndex = levelRowIndex - 1;\n              }\n          }\n\n          this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n      } else {\n          this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((infos: AttributeConfigInfo[]) => {\n              var editorIndex = this.getEditorIndex();\n              var levelRow: LevelRow = this.levelRows[levelRowIndex];\n              var level = levelRow.level;\n\n              if (level.mappings == null) {\n                  level.mappings = [];\n              }\n\n              if (level.mappings.length === 0 || isDifferentGot) {\n                  level.mappings = this.buildDefaultMappings();\n              }\n\n              let len = level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = level.mappings[i];\n\n                  infos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n\n              levelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, mappings: level.mappings, attrConfigInfos: infos };\n\n              if (editorIndex !== -1 && (editorIndex === levelRowIndex + 1 || infos.length > 0)) {\n                  this.levelRows.splice(editorIndex, 1);\n\n                  if (editorIndex < levelRowIndex) {\n                      levelRowIndex = levelRowIndex - 1;\n                  }\n              }\n\n              if (!isDifferentGot) {\n                  this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: levelRow.attrCfg, level: levelRow.level, levelNum: levelRow.levelNum });\n              }\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  mapCgrAttr(info: AttributeConfigInfo, mapping: DHIS2AttributeMapping) {\n      if (info == null) {\n          mapping.cgrAttrName = null;\n          mapping.info = null;\n          mapping.dhis2AttrName = null;\n          mapping.externalId = null;\n          mapping.terms = null;\n          mapping.isOrgUnitGroup = null;\n          return;\n      }\n\n      mapping.cgrAttrName = info.cgrAttr.name;\n      mapping.info = info;\n      mapping.dhis2AttrName = null;\n      mapping.externalId = null;\n      mapping.terms = {};\n      mapping.isOrgUnitGroup = false;\n      mapping.attributeMappingStrategy = info.attributeMappingStrategies[0];\n  }\n\n  onChangeTargetType(mapping: DHIS2AttributeMapping): void {\n      mapping.externalId = null;\n\n      for (const key in mapping.terms) {\n          if (mapping.terms.hasOwnProperty(key)) {\n              mapping.terms[key] = null;\n          }\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.onError.emit(err);\n  }\n\n}\n","      <div>\n        <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"select\">\n              <select type=\"text\" [(ngModel)]=\"config.configuration.hierarchyCode\" name=\"hierarchy\" (change)='onChangeHierarchy()' [disabled]=\"config.oid != null\" required>\n                <option></option>\n                <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n              </select>\n            </span>\n          </div>\n        </div>\n        \n        <div *ngIf=\"config.configuration.hierarchyCode != null\" class=\"row-holder\" >\n      \n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.units\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"list-table-wrapper\">\n              <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                  <tr>\n                    <th style=\"width:3%\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                    <th style=\"width:17%\">\n                      <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                    </th>\n                    <th style=\"width:25%; text-align: center;\">\n                      <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                    <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" (change)=\"onSelectLevelType(levelRow)\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                        <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                        <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                      </select>\n                    </td>\n                    <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                        <option></option>\n                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <div>\n                        <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n                          <i class=\"fa fa-trash-o ico-remove\"></i>\n                          <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n                        </a> \n                      </div>\n                      <div>\n                        <a *ngIf=\"levelRow.level.geoObjectType && (levelRow.level.type === 'ORG_UNITS' || levelRow.level.type === 'ALL')\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                          <i class=\"fa fa-edit\"></i>\n                          <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.attributes.editButton\"></localize></label>\n                        </a> \n                      </div>\n                    </td>\n                    <td colspan=\"5\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                      <h4><localize key=\"sync.attr.attributes.title\"></localize></h4>\n                      <table class=\"table table-bordered table-striped\" style=\"margin-left:80px; width: calc(100% - 80px)\">\n\n                        <colgroup>\n                          <col width=\"5%\">\n                          <col width=\"95%\">\n                        </colgroup>\n                        <tbody>\n                          <tr *ngFor=\"let mapping of levelRow.attrCfg.mappings; let mappingIndex = index;\">\n                            <td colspan=\"2\" class=\"row-holder\">\n                              <table style=\"width:80%; margin-top:15px; margin-bottom: 10px;\">\n                                <thead>\n                                <tr>\n                                  <th style=\"width:5%\"></th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\">\n                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                <tr>\n                                  <td style=\"width:5%\">\n                                    <i (click)=\"deleteMapping(levelRow, mappingIndex)\" class=\"fa fa-times\"></i>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <select style=\"width:95%\" [(ngModel)]=\"mapping.cgrAttrName\" (change)=\"mapCgrAttr($event.target.selectedIndex == 0 ? null : levelRow.attrCfg.attrConfigInfos[$event.target.selectedIndex-1], mapping)\" [name]=\"'sourceAttrSelect' + i + '-' + mappingIndex + (mapping.cgrAttrName ? mapping.cgrAttrName : '')\">\n                                      <option [ngValue]=\"null\"></option>\n                                      <option *ngFor=\"let info of levelRow.attrCfg.attrConfigInfos\" [ngValue]=\"info.cgrAttr.name\">\n                                        <label style=\"color:#999;\">{{info.cgrAttr.label}}</label>\n                                      </option>\n                                    </select>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\" style=\"color:#999;\">{{mapping.info.cgrAttr.typeLabel}}</label>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\" style=\"margin-right:20px; width:23%\">\n                                    <select style=\"width:95%\" *ngIf=\"mapping.info.cgrAttr.type === 'term'\" [(ngModel)]=\"mapping.isOrgUnitGroup\" (change)=\"onChangeTargetType(mapping)\" [name]=\"'isOrgUnitGroup' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"false\"><localize key=\"sync.attr.targetTypeOptionSet\"></localize></option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type !== 'term' && mapping.info.cgrAttr.name\" style=\"float:right; margin-right:20px; width:23%\">\n                                    <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n                                  </td>\n                                  <td style=\"width:23%\" *ngIf=\"mapping.info\">\n                                    <select *ngIf=\"mapping.info.dhis2Attrs.length > 0 && !mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.dhis2Id\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeDHIS2Attr(mapping)\">\n                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                      <option [ngValue]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of mapping.info.dhis2Attrs\">\n                                        {{dhis2Attr.name}}\n                                      </option>\n                                    </select>\n                                    <label *ngIf=\"mapping.info.dhis2Attrs.length == 0 && !mapping.isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n                                  </td>\n                                </tr>\n                              </tbody>\n                            </table>\n                            <div *ngIf=\"mapping.info && ((mapping.externalId != null && mapping.externalId.length > 0) || mapping.isOrgUnitGroup)\">\n                              <table *ngFor=\"let term of mapping.info.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n                                <thead>\n                                  <tr>\n                                    <th style=\"width:25%\">\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <!-- To -->\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label>\n                                        <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n                                        <localize *ngIf=\"mapping.isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n                                      </label>\n                                    </th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <tr>\n                                    <td></td>\n                                    <td><label style=\"color:#999;\">{{term.label}}</label></td>\n                                    <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n                                    <td>\n                                      <select *ngIf=\"!mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let option of getTermOptions(mapping.info, mapping.externalId)\" [value]=\"option.code\">\n                                          {{option.name}}\n                                        </option>\n                                      </select>\n                                      <select *ngIf=\"mapping.isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                                      </select>\n                                    </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td class=\"button-column\">\n                            <a class=\"fa fa-plus\" (click)=\"addNewMapping(levelRow)\" [title]=\"'sync.attr.attributes.add.tooltip' | localize\"></a>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>         \n        </div>\n      </div>\n    </div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { SynchronizationConfigModalComponent } from \"./synchronization-config-modal.component\";\n\n@Component({\n    selector: \"synchronization-config-manager\",\n    templateUrl: \"./synchronization-config-manager.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\n    message: string = null;\n\n    page: PageResult<SynchronizationConfig> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 20\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.service.getPage(pageNumber, this.page.pageSize).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    create(): void {\n        this.service.edit(null).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(null, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onEdit(config: SynchronizationConfig): void {\n        this.service.edit(config.oid).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(response.config, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onRemove(config: SynchronizationConfig): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + config.label.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(config.oid).then(() => {\n                this.onPageChange(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(config: SynchronizationConfig): void {\n        this.router.navigate([\"/registry/synchronization-config/\", config.oid]);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { SynchronizationConfig, OrgSyncInfo } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\n\n@Component({\n    selector: \"synchronization-config-modal\",\n    templateUrl: \"./synchronization-config-modal.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  config: SynchronizationConfig = {\n      organization: null,\n      system: null,\n      hierarchy: null,\n      isImport: false,\n      label: this.lService.create(),\n      configuration: {}\n  };\n\n  organizations: OrgSyncInfo[] = [];\n\n  cOrg: OrgSyncInfo = null;\n  cSystem: { label: string, oid: string, type: string } = null;\n\n  fieldChange: Subject<string>;\n\n  /*\n   * Observable subject for MasterList changes.  Called when an update is successful\n   */\n  onSuccess: Subject<SynchronizationConfig>;\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n      this.onSuccess = new Subject();\n      this.fieldChange = new Subject();\n  }\n\n  ngOnDestroy(): void {\n      this.onSuccess.unsubscribe();\n      this.fieldChange.unsubscribe();\n  }\n\n  init(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n      this.organizations = organizations;\n\n      if (config != null) {\n          this.config = config;\n\n          let oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n          if (oIndex !== -1) {\n              this.cOrg = this.organizations[oIndex];\n          }\n\n          let sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n          if (sIndex !== -1) {\n              this.cSystem = this.cOrg.systems[sIndex];\n          }\n      }\n  }\n\n  handleFieldChange(field: string): void {\n      this.fieldChange.next(field);\n  }\n\n  onOrganizationSelected(): void {\n      let index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n      if (index !== -1) {\n          this.cOrg = this.organizations[index];\n      } else {\n          this.cOrg = null;\n      }\n\n      this.cSystem = null;\n\n      this.handleFieldChange(\"organization\");\n  }\n\n  onChangeExternalSystem(): void {\n      let index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n      if (index !== -1) {\n          this.cSystem = this.cOrg.systems[index];\n      } else {\n          this.cSystem = null;\n      }\n\n      this.handleFieldChange(\"system\");\n  }\n\n  onSubmit(): void {\n    /*\n    let levelIndex = 0;\n    let len = this.levelRows.length;\n    for (let i = 0; i < len; ++i)\n    {\n      let levelRow: LevelRow = this.levelRows[i];\n\n      if (levelRow.isAttributeEditor)\n      {\n        continue;\n      }\n      else if (levelRow.attrCfg == null)\n      {\n        levelIndex++;\n        continue;\n      }\n\n      let mappings = this.config.configuration.levels[levelIndex].mappings;\n      let mappingsLen = levelRow.attrCfg.mappings.length;\n      for (let j = 0; j < mappingsLen; ++j)\n      {\n        let mapping = JSON.parse(JSON.stringify(levelRow.attrCfg.mappings[j]));\n        delete mapping.info;\n        mappings.push(mapping);\n      }\n\n      levelIndex++;\n    }\n    */\n\n      this.service.apply(this.config).then(cfg => {\n          this.onSuccess.next(cfg);\n          this.bsModalRef.hide();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  cancel(): void {\n      if (this.config.oid != null) {\n          this.service.unlock(this.config.oid).then(() => {\n              this.bsModalRef.hide();\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      } else {\n          this.bsModalRef.hide();\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      \n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n        <dhis2-synchronization-config [(config)]=\"config\" [cOrg]=\"cOrg\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></dhis2-synchronization-config>\n      </div>\n      <div *ngIf=\"cSystem != null && cSystem.type === 'FhirExternalSystem'\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>Synchronization Type</label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"col-md-3\" style=\"display: flex; align-items: center;\">\n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"!config.isImport\" name=\"isImport\" [value]=\"false\">\n                <span>Export</span>\n              </label>                \n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"config.isImport\" name=\"isImport\" [value]=\"true\">\n                <span>Import</span>\n              </label>                \n            </div>          \n          </div>\n        </div>\n      \n        <fhir-export-synchronization-config *ngIf=\"config.isImport !== true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-export-synchronization-config>\n        <fhir-import-synchronization-config *ngIf=\"config.isImport === true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-import-synchronization-config>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig, MasterList, MasterListView } from '@registry/model/registry';\nimport { RegistryService, SynchronizationConfigService } from '@registry/service';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-import-synchronization-config',\n  templateUrl: './fhir-import-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirImportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n  subscription: Subscription = null;\n\n  implementations: { className: string, label: string }[] = [];\n\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirImportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        implementation: null\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.implementation\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <select [(ngModel)]=\"config.configuration.implementation\" name=\"implementation\" required>\n            <option></option>\n            <option *ngFor=\"let implementation of implementations\" [value]=\"implementation.className\">\n                {{implementation.label}}\n            </option>\n        </select>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from '@shared/model/core'\nimport { LocalizationService } from '@shared/service';\n\nimport { SynchronizationConfig, ExportScheduledJob } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { ErrorHandler } from '@shared/component/error-handler/error-handler';\n\ndeclare var acp: any;\n\n@Component({\n  selector: 'synchronization-config',\n  templateUrl: './synchronization-config.component.html',\n  styleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n  message: string = null;\n\n  config: SynchronizationConfig = null;\n\n  page: PageResult<ExportScheduledJob> = {\n    pageSize: 10,\n    pageNumber: 1,\n    count: 1,\n    resultSet: []\n  };\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    const oid = this.route.snapshot.paramMap.get('oid');\n\n    this.service.get(oid).then(config => {\n      this.config = config;\n      this.onPageChange(1);\n    });\n\n    let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n    this.notifier = webSocket(baseUrl + '/websocket/notify');\n    this.notifier.subscribe(message => {\n      if (message.type === 'DATA_EXPORT_JOB_CHANGE') {\n        this.onPageChange(this.page.pageNumber);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n\n    if (this.notifier != null) {\n      this.notifier.complete();\n    }\n  }\n\n  onRun(): void {\n    this.message = null;\n\n    this.service.run(this.config.oid).then(() => {\n      // Refresh the page\n      this.onPageChange(this.page.pageNumber);\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n  }\n\n  onGenerateFile(): void {\n\n    window.open(acp + '/synchronization-config/generate-file?oid=' + encodeURIComponent(this.config.oid));\n  }\n\n  onPageChange(pageNumber: number): void {\n    if (this.config != null) {\n\n      this.message = null;\n\n      this.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n\n        this.formatStepConfig(response);\n        this.page = response;\n\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n    }\n  }\n\n  formatJobStatus(job: ExportScheduledJob): string {\n    if (job.status === \"FEEDBACK\") {\n      return this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n    }\n    else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n      return this.lService.decode(\"etl.JobStatus.RUNNING\");\n    }\n    else if (job.status === \"QUEUED\") {\n      return this.lService.decode(\"etl.JobStatus.QUEUED\");\n    }\n    else if (job.status === \"SUCCESS\") {\n      return this.lService.decode(\"etl.JobStatus.SUCCESS\");\n    }\n    else if (job.status === \"CANCELED\") {\n      return this.lService.decode(\"etl.JobStatus.CANCELED\");\n    }\n    else if (job.status === \"FAILURE\") {\n      return this.lService.decode(\"etl.JobStatus.FAILURE\");\n    }\n    else {\n      return this.lService.decode(\"etl.JobStatus.RUNNING\");\n    }\n  }\n\n  formatStepConfig(page: PageResult<ExportScheduledJob>): void {\n\n    page.resultSet.forEach((job: ExportScheduledJob) => {\n\n      const steps = [\n        {\n          \"label\": this.lService.decode(\"synchronization.step.Queued\"),\n          \"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n        },\n\n        {\n          \"label\": this.lService.decode(\"synchronization.step.Connecting\"),\n          \"status\": job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n        }\n      ];\n\n      const stepLabel = this.config.isImport ? \"Importing\" : this.lService.decode(\"synchronization.step.DatabaseExport\");\n\n      steps.push({\n        \"label\": stepLabel,\n        \"status\": job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n      });\n\n      job.stepConfig = {\n        \"steps\": steps\n      }\n    });\n  }\n\n  getCompletedStatus(jobStage: string, targetStage: string): string {\n    let order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n    let jobPos = order.indexOf(jobStage);\n    let targetPos = order.indexOf(targetStage);\n\n    if (targetPos < jobPos) {\n      return \"COMPLETE\";\n    }\n    else {\n      return \"\";\n    }\n  }\n\n  getJobStatus(job: ExportScheduledJob): string {\n    if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n      return \"WORKING\"\n    }\n    else if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n      return \"STUCK\";\n    }\n\n    return \"\";\n  }\n\n\n  error(err: HttpErrorResponse): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label>\n              <i class=\"fa\"\n                [ngClass]=\"{'fa-long-arrow-right' : !config.isImport, 'fa-long-arrow-left' : config.isImport}\"\n                aria-hidden=\"true\"\n                style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i>\n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-group text-right\" style=\"margin: 0;\">\n                <form>\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                  <button *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\"\n                    type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onGenerateFile()\" class=\"btn btn-secondary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.generateBundle\"></localize>\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.geoObjectType}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                      <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\">\n                      </localize>\n                      <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"masterlist.field\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"masterlist.forDate\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.typeLabel}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      {{level.forDate}}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\">\n                          <localize key=\"masterlist.jobs\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr\n                        *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\"\n                                style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator\n                              *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\"\n                              [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\"\n                              [routerLink]=\"'/registry/sync/details/' + config.oid + '/' + job.historyId\"\n                              routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                          </div>\n                        </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ErrorHandler } from '@shared/component';\n\nimport { RegistryService, IOService, SynchronizationConfigService } from '@registry/service';\nimport { ScheduledJob, SynchronizationConfig } from '@registry/model/registry';\n\n@Component({\n  selector: 'job',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.css']\n})\nexport class SyncDetailsComponent implements OnInit {\n  message: string = null;\n  job: ScheduledJob;\n  historyId: string = \"\";\n\n  config: SynchronizationConfig = null;\n\n  page: any = {\n    count: 0,\n    pageNumber: 1,\n    pageSize: 10,\n    results: []\n  };\n\n  constructor(private configService: SynchronizationConfigService, public service: RegistryService, private route: ActivatedRoute, public ioService: IOService) {\n  }\n\n  ngOnInit(): void {\n\n    this.historyId = this.route.snapshot.params[\"oid\"];\n\n    const configOid = this.route.snapshot.paramMap.get('config');\n\n    this.configService.get(configOid).then(config => {\n      this.config = config;\n\n      this.onPageChange(1);\n    });\n  }\n\n  ngOnDestroy() {\n  }\n\n  formatAffectedRows(rows: string) {\n    return rows.replace(/,/g, \", \");\n  }\n\n  formatValidationResolve(obj: any) {\n    return JSON.stringify(obj);\n  }\n\n  onPageChange(pageNumber: any): void {\n\n    this.message = null;\n\n    this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n\n      this.job = response;\n\n      this.page = this.job.exportErrors;\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n                                    <span *ngIf=\"config == null || !config.isImport\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n                                    </span>\n                                    <span *ngIf=\"config != null && config.isImport\">Resource</span>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th *ngIf=\"config == null || !config.isImport\" class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td  *ngIf=\"config == null || !config.isImport\" class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Map, LngLatBoundsLike, NavigationControl, MapboxEvent, AttributionControl, IControl } from \"mapbox-gl\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { AllGeoJSON } from \"@turf/helpers\";\nimport bbox from \"@turf/bbox\";\n\nimport { Subject } from \"rxjs\";\n\nimport { GeoObject, ContextLayer, GeoObjectType, ValueOverTime } from \"@registry/model/registry\";\nimport { ModalState } from \"@registry/model/location-manager\";\n\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ErrorModalComponent, ConfirmModalComponent, SuccessModalComponent } from \"@shared/component\";\n\nimport { LocalizationService } from \"@shared/service\";\n\ndeclare let acp: string;\n\nconst DEFAULT_COLOR = \"#80cdc1\";\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"location-manager\",\n    templateUrl: \"./location-manager.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE: ModalState = {\n        SEARCH: 0,\n        VIEW: 1\n    }\n\n    urlSubscriber: any;\n\n    editSessionEnabled: boolean = false;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Root nodes of the tree\n     */\n    data: GeoObject[] = [];\n\n    /*\n     *  Search Text\n     */\n    text: string = \"\";\n\n    /*\n     *  MODE\n     */\n    mode: number = this.MODE.SEARCH;\n\n    /*\n     * Date of data for explorer\n     */\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    /*\n     * Currently selected geo object\n     */\n    current: GeoObject;\n\n    /*\n     * Currently selected geo object type\n     */\n    type: GeoObjectType;\n\n    /*\n     * Flag denoting if an object is currently being editted\n     */\n    isEdit: boolean = false;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    /*\n     * Flag denoting the draw control is active\n     */\n    active: boolean = false;\n\n    public displayDateRequiredError: boolean = false;\n\n    vectorLayers: string[] = [];\n\n    backReference: string;\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        // {\n        //   name: 'Streets',\n        //   label: 'Streets',\n        //   id: 'streets-v9',\n        //   sprite: 'mapbox://sprites/mapbox/basic-v9',\n        //   url: 'mapbox://mapbox.basic-v9'\n        // }\n    ];\n\n    hoverFeatureId: string;\n\n    preventSingleClick: boolean = false;\n\n    hideSearchOptions: boolean = false;\n\n    /*\n       * Timer for determining double click vs single click\n       */\n    timer: any;\n\n    /*\n       * debounced subject for map extent change events\n       */\n    subject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n    vot: ValueOverTime = null;\n\n    @ViewChild(\"simpleEditControl\") simpleEditControl: IControl;\n\n    editingControl: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private mapService: MapService, private geomService: GeometryService, public service: RegistryService,\n        private route: ActivatedRoute, private router: Router, private lService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.urlSubscriber = this.route.params.subscribe(params => {\n            let geoObjectUid = params[\"geoobjectuid\"];\n            let geoObjectTypeCode = params[\"geoobjecttypecode\"];\n            this.hideSearchOptions = params[\"hideSearchOptions\"];\n            this.backReference = this.route.snapshot ? this.route.snapshot.params[\"backReference\"] : null;\n\n            this.dateStr = params[\"datestr\"];\n            this.handleDateChange();\n\n            if (geoObjectUid && geoObjectTypeCode && this.dateStr) {\n                this.service.getGeoObject(geoObjectUid, geoObjectTypeCode).then(geoObj => {\n                    this.setData([geoObj]);\n                    this.select(geoObj, null);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n        this.urlSubscriber.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n        const layer = this.baseLayers[0];\n\n        this.map = new Map({\n            container: \"map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    mapbox: {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox\"\n                        // \"source-layer\": \"mapbox_satellite_full\"\n                    }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            center: [-78.880453, 42.897852]\n        });\n\n        this.map.on(\"load\", () => {\n            this.initMap();\n        });\n\n        if (this.simpleEditControl) {\n            this.map.addControl(this.simpleEditControl);\n        }\n    }\n\n    changeMode(mode: number): void {\n        this.mode = mode;\n\n        if (this.mode === this.MODE.SEARCH) {\n            this.isEdit = false;\n        }\n\n        this.geomService.destroy(false);\n\n        this.vot = null;\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n    }\n\n    handleDateChange(): void {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n            this.displayDateRequiredError = false;\n        }\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl({ visualizePitch: true }));\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n\n        this.map.on(\"click\", \"children-points\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"click\", \"children-polygon\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        // Set map data on page load with URL params (single Geo-Object)\n        if (this.data) {\n            let fc = { type: \"FeatureCollection\", features: this.data };\n            (<any> this.map.getSource(\"children\")).setData(fc);\n\n            this.zoomToFeature(this.data[0], null);\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    showOriginalGeometry() {\n        if (this.current) {\n            this.addVectorLayer(this.current.properties.uid);\n        }\n    }\n\n    hideOriginalGeometry() {\n        if (this.current) {\n            this.removeVectorLayer(this.current.properties.uid);\n        }\n    }\n\n    handleMapClickEvent(event: any): void {\n        if (!this.isEdit && event.features != null && event.features.length > 0) {\n            const feature = event.features[0];\n\n            if (feature.properties.code != null && (this.current == null || this.current.properties.code !== feature.properties.code)) {\n                this.select(feature, null);\n            }\n        }\n    }\n\n    onPanelCancel(): void {\n        if (this.backReference != null && this.backReference.length >= 2) {\n            let ref = this.backReference.substring(0, 2);\n\n            if (ref === \"CR\") {\n                this.router.navigate([\"/registry/change-requests\"]);\n            }\n        } else {\n            this.changeMode(this.MODE.SEARCH);\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        if (applyInfo.isChangeRequest) {\n            if (this.backReference != null && this.backReference.length >= 2 && this.backReference.substring(0, 2) === \"CR\") {\n                this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n            } else {\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n                this.bsModalRef.content.cancelText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n                this.bsModalRef.content.onCancel.subscribe(() => {\n                    this.changeMode(this.MODE.SEARCH);\n                });\n            }\n        } else {\n            this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n            this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n            this.bsModalRef.content.onConfirm.subscribe(() => {\n                this.onPanelCancel();\n            });\n        }\n    }\n\n    addLayers(): void {\n        const source = \"children\";\n\n        this.map.addSource(source, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        // Polygon layer\n        this.map.addLayer({\n            id: source + \"-polygon\",\n            type: \"fill\",\n            source: source,\n            layout: {},\n            paint: {\n                \"fill-color\": DEFAULT_COLOR,\n                \"fill-opacity\": 0.8,\n                \"fill-outline-color\": \"black\"\n            },\n            filter: [\"all\",\n                [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n            ]\n        });\n\n        // Point layer\n        this.map.addLayer({\n            id: source + \"-points\",\n            type: \"circle\",\n            source: source,\n            paint: {\n                \"circle-radius\": 10,\n                \"circle-color\": DEFAULT_COLOR,\n                \"circle-stroke-width\": 2,\n                \"circle-stroke-color\": \"#FFFFFF\"\n            },\n            filter: [\"all\",\n                [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n            ]\n        });\n\n        //    // Selected layers\n        //    this.map.addLayer({\n        //      \"id\": source + \"-points-selected\",\n        //      \"type\": \"circle\",\n        //      \"source\": source,\n        //      \"paint\": {\n        //        \"circle-radius\": 10,\n        //        \"circle-color\": DEFAULT_COLOR,\n        //        \"circle-stroke-width\": 2,\n        //        \"circle-stroke-color\": '#FFFFFF'\n        //      },\n        //      filter: ['all',\n        //        [\"==\", ['get', 'code'], this.current != null ? this.current.properties.code : ''],\n        //        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n        //      ]\n        //    });\n        //\n        //    this.map.addLayer({\n        //      'id': source + '-polygon-selected',\n        //      'type': 'fill',\n        //      'source': source,\n        //      'layout': {},\n        //      'paint': {\n        //        'fill-color': DEFAULT_COLOR,\n        //        'fill-opacity': 0.8,\n        //        'fill-outline-color': 'black'\n        //      },\n        //      filter: ['all',\n        //        [\"==\", ['get', 'code'], this.current != null ? this.current.properties.code : ''],\n        //        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n        //      ]\n        //    });\n\n        // Label layer\n        this.map.addLayer({\n            id: source + \"-label\",\n            source: source,\n            type: \"symbol\",\n            paint: {\n                \"text-color\": \"black\",\n                \"text-halo-color\": \"#fff\",\n                \"text-halo-width\": 2\n            },\n            layout: {\n                \"text-field\": [\"get\", \"localizedValue\", [\"get\", \"displayLabel\"]],\n                \"text-font\": [\"NotoSansRegular\"],\n                \"text-offset\": [0, 0.6],\n                \"text-anchor\": \"top\",\n                \"text-size\": 12\n            }\n        });\n\n        this.vectorLayers.forEach(cLayer => {\n            this.addVectorLayer(cLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        // this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n        this.baseLayers.forEach(baseLayer => {\n            baseLayer.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.map.setStyle({\n            version: 8,\n            name: layer.name,\n            metadata: {\n                \"mapbox:autocomposite\": true\n            },\n            sources: {\n                mapbox: {\n                    type: \"raster\",\n                    url: layer.url,\n                    tileSize: 256\n                }\n            },\n            sprite: layer.sprite,\n            glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n            layers: [\n                {\n                    id: layer.id,\n                    type: \"raster\",\n                    source: \"mapbox\"\n                    // \"source-layer\": \"mapbox_satellite_full\"\n                }\n            ]\n        });\n    }\n\n    search(): void {\n        this.geomService.destroy(false);\n        this.mapService.search(this.text, this.dateStr).then(data => {\n            (<any> this.map.getSource(\"children\")).setData(data);\n\n            this.setData(data.features);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    zoomToFeature(node: GeoObject, event: MouseEvent): void {\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.preventSingleClick = false;\n        const delay = 200;\n\n        this.timer = setTimeout(() => {\n            if (!this.preventSingleClick) {\n                if (node && node.geometry != null) {\n                    const bounds = bbox(node as AllGeoJSON) as LngLatBoundsLike;\n\n                    let padding = 50;\n                    let maxZoom = 20;\n\n                    // Zoom level was requested to be reduced when displaying point types as per #420\n                    if (node.geometry.type === \"Point\" || node.geometry.type === \"MultiPoint\") {\n                        padding = 100;\n                        maxZoom = 12;\n                    }\n\n                    this.map.fitBounds(bounds, { padding: padding, animate: true, maxZoom: maxZoom });\n                }\n            }\n        }, delay);\n    }\n\n    select(node: GeoObject, event: MouseEvent): void {\n        /*\n        if (this.forDate == null) {\n            this.displayDateRequiredError = true;\n\n            return;\n        }\n        */\n\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.service.getGeoObjectTypes([node.properties.type], null).then(types => {\n            this.type = types[0];\n            this.current = node;\n            this.mode = this.MODE.VIEW;\n\n            this.geomService.initialize(this.map, this.type.geometryType, !this.isEdit);\n            this.geomService.zoomToLayersExtent();\n\n            //      const code = this.current.properties.code;\n            //\n            //      // Update the filter properties\n            //      this.map.setFilter('children-points-selected', ['all',\n            //        [\"==\", ['get', 'code'], code != null ? code : ''],\n            //        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n            //      ]);\n            //\n            //      this.map.setFilter('children-polygon-selected', ['all',\n            //        [\"==\", ['get', 'code'], code != null ? code : ''],\n            //        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n            //      ]);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setData(data: GeoObject[]): void {\n        this.data = data;\n    }\n\n    onContextLayerChange(layer: ContextLayer): void {\n        if (layer.active) {\n            this.addVectorLayer(layer.oid);\n        } else {\n            this.removeVectorLayer(layer.oid);\n        }\n    }\n\n    removeVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index !== -1) {\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.vectorLayers.splice(index, 1);\n        }\n    }\n\n    addVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index === -1) {\n            const prevLayer = \"children-polygon\";\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + acp + \"/master-list/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))]\n            });\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": SELECTED_COLOR,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": SELECTED_COLOR,\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n\n            this.vectorLayers.push(source);\n        }\n    }\n\n// TODO : Not sure what the point of this code was\n/*\n    refreshInputsFromDraw(): void {\n        let geom = this.getDrawGeometry();\n        let point = geom.coordinates[0];\n\n        this.coordinate.latitude = point[1];\n        this.coordinate.longitude = point[0];\n    }\n\n    refreshDrawFromInput(): void {\n\n        if( this.coordinate.longitude != null && this.coordinate.latitude != null ) {\n\n            const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n            const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n            if( !isLatitude(this.coordinate.latitude) || !isLongitude(this.coordinate.longitude)){\n                // outside EPSG bounds\n            }\n\n            this.editingControl.set({\n              type: 'FeatureCollection',\n              features: [{\n                id: this.current.properties.uid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ this.coordinate.longitude, this.coordinate.latitude ] }\n              }]\n            });\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.current.properties.uid } );\n\n            this.editSessionEnabled = true;\n        }\n    }\n    */\n\n    error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div id=\"navigator-left-sidebar\" class=\"col-md-5 lw-inner-col\" style=\"height: calc(100vh - 145px);overflow-y: auto;\">\n        <div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n  \n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"location-management-widget-section\">\n                    <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\" ng-reflect-key=\"changeOverTime.forDate\"></localize></span>\n<!--                     <input style=\"width: 100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" [disabled]=\"mode !== MODE.SEARCH\"/> -->\n                    <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"mode !== MODE.SEARCH && !hideSearchOptions\" \n                        [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [classNames]=\"displayDateRequiredError ? 'date-required-message' : ''\" [placement]=\"'right'\" style=\"display:inline-grid;\"></date-field>\n                    <div *ngIf=\"displayDateRequiredError\" class=\"error-message\">\n                      <localize key=\"geoobject.editor.forDate.requiredErrorMessage\"></localize>\n                    </div>\n                  </div>\n                </div>\n              </div>\n  \n              <!-- Search bar -->\n              <div *ngIf=\"!hideSearchOptions\" class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"location-management-widget-section\">\n                    <div class=\"input-group\">\n                      <input type=\"text\" class=\"form-control\" (keyup.enter)=\"search()\" [(ngModel)]=\"text\" name=\"text\" [disabled]=\"mode !== MODE.SEARCH\">\n                      <span class=\"input-group-btn\">\n                        <button class=\"btn btn-primary\" type=\"button\" (click)=\"search()\" [disabled]=\"mode !== MODE.SEARCH\">\n                          <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span> \n<!--                           <localize key=\"explorer.search.button.message\"></localize> -->\n                        </button>\n                      </span>\n                    </div>\n                    <div *ngIf=\"mode === MODE.VIEW && current != null\" style=\"padding: 20px 0;\">\n                      <i class=\"fa fa-arrow-left clickable\" aria-hidden=\"true\" (click)=\"changeMode(this.MODE.SEARCH)\"><localize key=\"explorer.back.to.results\"></localize></i>              \n                    </div>\n                    \n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n  \n          <div class=\"row\"  *ngIf=\"mode === MODE.SEARCH\">\n            <div class=\"col-md-12\">\n              <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n                    <div class=\"list-group\">\n  \n                      <div *ngFor=\"let node of data; let i = index\" class=\"list-group-item\">\n                        <!-- Single column card -->\n                        <div class=\"card card-default\" (click)=\"select(node, $event)\">\n                          <div class=\"card-body\">\n                            <i class=\"fa fa-map-marker clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\" (click)=\"zoomToFeature(node, $event)\" [title]=\"'explorer.zoom.label' | localize\"></i>\n                            <h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"View Geo-Object details\">{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n                          </div>\n                        </div>\n                      </div>\n  \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>    \n        <div *ngIf=\"mode === MODE.VIEW && current != null\" class=\"row\">\n          <div class=\"col-md-12\">\n<!--             <div style=\"padding: 20px 0;\"> -->\n<!--               <i class=\"fa fa-arrow-left clickable\" aria-hidden=\"true\" (click)=\"changeMode(this.MODE.SEARCH)\"><localize key=\"explorer.back.to.results\"></localize></i>               -->\n<!--             </div> -->\n            <feature-panel\n              [type]=\"type\"\n              [code]=\"current.properties.code\"              \n              [forDate]=\"forDate\"\n              [readOnly]=\"!current.properties.writable\"\n              (featureChange)=\"search()\"\n              (modeChange)=\"onModeChange($event)\"\n              (panelCancel)=\"onPanelCancel()\"\n              (panelSubmit)=\"onPanelSubmit($event)\"\n            ></feature-panel>\n          </div>\n        </div>            \n      </div>\n\n      <div class=\"col-md-7\" id=\"site-explorer-map\">\n        <div class=\"row\">\n          \n          <article class=\"base-layer-panel\">\n            <layer-panel (layerChange)=\"onContextLayerChange($event)\"></layer-panel>\n          </article>\n\n          <div id=\"map\" class=\"map-view-port\"></div>\n<!--           <simple-edit-control [visible]=\"editingControl != null\" [editSessionEnabled]=\"editSessionEnabled\" [save]=\"true\" (editEmitter)=\"onMapSave()\" #simpleEditControl></simple-edit-control> -->\n          \n          <div *ngIf=\"editingControl && (type.geometryType === 'POINT' || type.geometryType === 'MULTIPOINT')\" style=\"position:absolute;top:185px;right:10px;color:white;\">\n            \n            <div >\n                <div><label><localize key=\"geoobject.editor.geometry.latitude.label\"></localize></label></div>\n                <div>\n                <div class=\"text-left\">\n                  <input name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.latitude\" (change)=\"refreshDrawFromInput()\" required />\n                </div>\n              </div>\n            </div>\n            <div >\n                <div><label><localize key=\"geoobject.editor.geometry.longitude.label\"></localize></label></div>\n                <div>\n                <div class=\"text-left\">\n                  <input name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.longitude\" (change)=\"refreshDrawFromInput()\" required />\n                </div>\n              </div>\n            </div>\n            \n          </div>\n          \n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nimport { ContextLayerGroup } from \"@registry/model/registry\";\n\n\n@Component({\n    selector: \"context-layer-modal\",\n    templateUrl: \"./context-layer-modal.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class ContextLayerModalComponent {\n\n    contextLayerGroups: ContextLayerGroup[];\n\n\n    /*\n     * Called on confirm\n     */\n    public onSubmit: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onSubmit = new Subject();\n    }\n\n    groupHasContextLayers(group:string): boolean {\n        let hasCLayers = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            if (cLayerGroup.oid === group && cLayerGroup.contextLayers.length > 0) {\n                hasCLayers = true;\n            }\n        });\n\n        return hasCLayers;\n    }\n\n    confirm(): void {\n        this.onSubmit.next(this.contextLayerGroups);\n        this.bsModalRef.hide();\n    }\n\n}\n","<div class=\"modal-body\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"explorer.add.context.layers.modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"list-group\">\n                        <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                            <div *ngIf=\"groupHasContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n                                <h4>{{ cLayerGroup.displayLabel }}</h4>\n                                <div class=\"list-group\">\n                                    <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                                        <input type=\"checkbox\" [checked]=\"cLayer.enabled\" (change)=\"cLayer.enabled = !cLayer.enabled\" style=\"margin-left: 10px;\"> {{ cLayer.displayLabel }}\n                                        \n                                        <!-- <boolean-field [(value)]=\"cLayer.enabled\" [label]=\"cLayer.displayLabel\"></boolean-field> -->\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, OnDestroy, AfterViewInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Map, NavigationControl, AttributionControl, LngLatBounds } from \"mapbox-gl\";\n\nimport { ContextLayer, GeoObjectType, ValueOverTime } from \"@registry/model/registry\";\n// MapService IS REQUIRED to set the mapbox access token for the map\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler, GenericModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\nconst DEFAULT_COLOR = \"#80cdc1\";\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"dataset-location-manager\",\n    templateUrl: \"./dataset-location-manager.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class DatasetLocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\"\n    }\n\n    toolsIconHover: boolean = false;\n    datasetId: string;\n    typeCode: string;\n    readOnly: boolean = false;\n    editOnly: boolean = false;\n    isEdit: boolean = false;\n    date: string;\n    code: string;\n    type: GeoObjectType;\n    bsModalRef: BsModalRef;\n    backReference: string;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    vectorLayers: string[] = [];\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        //     {\n        //       name: 'Streets',\n        //       label: 'Streets',\n        //       id: 'streets-v11',\n        //       sprite: 'mapbox://sprites/mapbox/basic-v11',\n        //       url: 'mapbox://styles/mapbox/streets-v11'\n        //     }\n    ];\n\n    mode: string = null;\n    isMaintainer: boolean;\n    forDate: Date = new Date();\n\n    vot: ValueOverTime;\n\n    constructor(private mapService: MapService, public geomService: GeometryService, public service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute,\n        authService: AuthService, private lService: LocalizationService, private dateService: DateService, private router: Router) {\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n    }\n\n    ngOnInit(): void {\n        this.datasetId = this.route.snapshot.params[\"datasetId\"];\n        this.typeCode = this.route.snapshot.params[\"typeCode\"];\n        this.date = this.route.snapshot.params[\"date\"];\n        this.readOnly = this.route.snapshot.params[\"readOnly\"] === \"true\";\n        this.editOnly = this.route.snapshot.params[\"editOnly\"] === \"true\";\n        this.backReference = this.route.snapshot.params[\"backReference\"];\n\n        if (this.route.snapshot.params[\"code\"] != null) {\n            this.code = this.route.snapshot.params[\"code\"];\n        }\n\n        this.forDate = this.dateService.getDateFromDateString(this.date);\n\n        this.service.getGeoObjectTypes([this.typeCode], null).then(types => {\n            this.type = types[0];\n            this.geomService.initialize(this.map, this.type.geometryType, !this.isEdit);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPanelCancel(): void {\n        if (this.backReference != null && this.backReference.length >= 2) {\n            let ref = this.backReference.substring(0, 2);\n\n            if (ref === \"ML\") {\n                let published = this.backReference.substring(3, 3) === \"T\";\n                let oid = this.backReference.substring(3);\n\n                this.router.navigate([\"/registry/master-list\", oid, published]);\n            }\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        this.bsModalRef = this.modalService.show(GenericModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n        if (applyInfo.isChangeRequest) {\n            const message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n            const buttons = [];\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.cancel.returnList\"),\n                onClick: () => { this.onPanelCancel(); },\n                shouldClose: true,\n                class: \"btn-primary\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.changerequest.view\"),\n                onClick: () => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.continueEditing\"),\n                onClick: () => { },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            this.bsModalRef.content.init(message, buttons);\n        } else {\n            const message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            const buttons = [];\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.cancel.returnList\"),\n                onClick: () => { this.onPanelCancel(); },\n                shouldClose: true,\n                class: \"btn-primary\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.continueEditing\"),\n                onClick: () => { },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            this.bsModalRef.content.init(message, buttons);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    ngAfterViewInit() {\n        const layer = this.baseLayers[0];\n        // eslint-disable-next-line no-import-assign\n        this.map = new Map({\n            container: \"dataset-map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    \"mapbox-satellite\": {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    //          {\n                    //            \"id\": layer.id,\n                    //            \"type\": 'raster',\n                    //            \"source\": 'mapbox-satellite',\n                    //          }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            center: [-78.880453, 42.897852]\n        });\n\n        this.map.on(\"load\", () => {\n            this.initMap();\n        });\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n        this.geomService.destroy(false);\n    }\n\n    initMap(): void {\n        if (this.code !== \"__NEW__\") {\n            this.service.getGeoObjectBoundsAtDate(this.code, this.typeCode, this.date).then(bounds => {\n                if (bounds) {\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                    let padding = 50;\n                    let maxZoom = 20;\n\n                    // Zoom level was requested to be reduced when displaying point types as per #420\n                    if (this.type.geometryType === \"POINT\" || this.type.geometryType === \"MULTIPOINT\") {\n                        padding = 100;\n                        maxZoom = 12;\n                    }\n\n                    this.map.fitBounds(llb, { padding: padding, animate: false, maxZoom: maxZoom });\n                }\n            });\n        }\n\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl({ visualizePitch: true }));\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n\n        this.map.on(\"click\", this.datasetId + \"-points\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"click\", this.datasetId + \"-polygon\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.showOriginalGeometry();\n    }\n\n    showOriginalGeometry() {\n        this.addVectorLayer(this.datasetId);\n    }\n\n    hideOriginalGeometry() {\n        this.removeVectorLayer(this.datasetId);\n    }\n\n    addLayers(): void {\n        this.map.addLayer({\n            type: \"raster\",\n            id: \"satellite-map\",\n            source: \"mapbox-satellite\"\n        });\n\n        this.vectorLayers.forEach(vLayer => {\n            this.addVectorLayer(vLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        if (layer.id === \"streets-v11\") {\n            this.map.setStyle(layer.url);\n        } else if (layer.id === \"satellite-v9\") {\n            this.map.setStyle({\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    \"mapbox-satellite\": {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox-satellite\"\n                    }\n                ]\n            });\n        }\n    }\n\n    onContextLayerChange(layer: ContextLayer): void {\n        if (layer.active) {\n            this.addVectorLayer(layer.oid);\n        } else {\n            this.removeVectorLayer(layer.oid);\n        }\n    }\n\n    removeVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index !== -1) {\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-points-selected\");\n            this.map.removeLayer(source + \"-polygon-selected\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.vectorLayers.splice(index, 1);\n        }\n    }\n\n    addVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index === -1) {\n            const prevLayer = (source !== this.datasetId) ? this.datasetId + \"-points\" : null;\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + acp + \"/master-list/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))]\n            });\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": DEFAULT_COLOR,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": DEFAULT_COLOR,\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Selected object layers\n            if (source === this.datasetId) {\n                this.map.addLayer({\n                    id: source + \"-points-selected\",\n                    type: \"circle\",\n                    source: source,\n                    \"source-layer\": \"context\",\n                    paint: {\n                        \"circle-radius\": 10,\n                        \"circle-color\": SELECTED_COLOR,\n                        \"circle-stroke-width\": 2,\n                        \"circle-stroke-color\": \"#FFFFFF\"\n                    },\n                    filter: [\"all\",\n                        [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                    ]\n                }, prevLayer);\n\n                this.map.addLayer({\n                    id: source + \"-polygon-selected\",\n                    type: \"fill\",\n                    source: source,\n                    \"source-layer\": \"context\",\n                    layout: {},\n                    paint: {\n                        \"fill-color\": SELECTED_COLOR,\n                        \"fill-opacity\": 0.8,\n                        \"fill-outline-color\": \"black\"\n                    },\n                    filter: [\"all\",\n                        [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                    ]\n                }, prevLayer);\n            }\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n\n            this.vectorLayers.push(source);\n        }\n    }\n\n    onFeatureChange(): void {\n        // Refresh the layer\n        this.hideOriginalGeometry();\n        this.showOriginalGeometry();\n    }\n\n    handleMapClickEvent(event: any): void {\n        if (!this.isEdit && event.features != null && event.features.length > 0) {\n            const feature = event.features[0];\n\n            if (feature.properties.code != null && this.code !== feature.properties.code) {\n                this.code = feature.properties.code;\n\n                // Update the filter properties\n                this.map.setFilter(this.datasetId + \"-points-selected\", [\"all\",\n                    [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]);\n\n                this.map.setFilter(this.datasetId + \"-polygon-selected\", [\"all\",\n                    [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]);\n            }\n        }\n    }\n\n    onNewGeoObject(): void {\n        this.code = \"__NEW__\";\n    }\n\n    formatDate(date: Date): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div *ngIf=\"type != null && code != null\" id=\"navigator-left-sidebar\" class=\"col-md-5 lw-inner-col\" style=\"height: calc(100vh - 145px);overflow-y: auto;\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            \n            <div id=\"attributes-header\">\n              <h3 *ngIf=\"type\">{{type.label.localizedValue}}</h3>\n              <h4><localize key=\"cgr.validity.valid.on.label\"></localize>: {{formatDate(forDate)}}</h4>\n            </div>\n            \n            <feature-panel\n              [type]=\"type\"\n              [code]=\"code\"              \n              [forDate]=\"forDate\"\n              [datasetId]=\"datasetId\"\n              [readOnly]=\"readOnly\"\n              (featureChange)=\"onFeatureChange()\"              \n              (modeChange)=\"onModeChange($event)\"\n              (panelCancel)=\"onPanelCancel()\"\n              (panelSubmit)=\"onPanelSubmit($event)\"\n            ></feature-panel>\n          </div>\n        </div>\n      </div>\n\n      <div [ngClass]=\"{'col-md-7':code != null, 'col-md-12':code == null}\" id=\"site-explorer-map\">\n        <div class=\"row\">\n\n          <article class=\"base-layer-panel\">\n            <layer-panel (layerChange)=\"onContextLayerChange($event)\" (baseLayerChange)=\"handleBasemapStyle($event)\" [filter]=\"[datasetId]\"></layer-panel>\n            \n            <div *ngIf=\"!editOnly\" class=\"layer-toggle\" style=\"margin-top:10px;\" (mouseenter)=\"toolsIconHover = true\" (mouseleave)=\"toolsIconHover = false\">\n             \n              <i class=\"fa fa-plus-square\" *ngIf=\"!toolsIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n              <div *ngIf=\"toolsIconHover\" style=\"margin-top:10px;\">\n            \n                <span (click)=\"onNewGeoObject()\" role=\"button\">\n                  <button class=\"btn btn-primary\">\n                    <localize key=\"masterlist.newGeoObject\"></localize>              \n                  </button>\n                </span>\n              </div>\n            \n            </div>\n          </article>\n\n          <div id=\"dataset-map\" class=\"map-view-port\"></div>     \n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"historical-event-module\",\n    templateUrl: \"./historical-event-module.component.html\",\n    styleUrls: []\n})\nexport class HistoricalEventModuleComponent {\n\n    tab: string = \"HISTORICAL-EVENT\";\n\n    readOnly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.readOnly = this.authService.isRC(true);\n        this.tab = this.readOnly ? \"HISTORICAL-REPORT\" : \"HISTORICAL-EVENT\";\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>\n              <localize *ngIf=\"tab === 'HISTORICAL-EVENT'\" key=\"transition.event.events\"></localize>\n              <localize *ngIf=\"tab === 'HISTORICAL-REPORT'\" key=\"historical.row.report\"></localize>\n            </h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <div *ngIf=\"!readOnly\" class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"form-group button-row\">\n\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-EVENT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-EVENT' ? 'cr-filter-link-active' : ''\"\n                    style=\"border-bottom: 1px solid;\">\n                    <localize key=\"transition.event.events\"></localize> \n                  </a>\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-REPORT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-REPORT' ? 'cr-filter-link-active' : ''\"\n                    style=\"margin-left: 5px;border-bottom:1px solid;\">\n                    <localize key=\"historical.row.report\"></localize>\n                  </a>\n\n                </div>\n                <hr style=\"border-top:solid 3px #6BA542\" />\n\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <transition-event-table *ngIf=\"tab === 'HISTORICAL-EVENT'\"></transition-event-table>\n                <historical-report *ngIf=\"tab === 'HISTORICAL-REPORT'\"></historical-report>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventModalComponent } from \"./transition-event-modal.component\";\nimport { AuthService, DateService, LocalizationService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\n@Component({\n\n    selector: \"transition-event-table\",\n    templateUrl: \"./transition-event-table.component.html\",\n    styleUrls: [\"./transition-event-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class TransitionEventTableComponent {\n\n    page: PageResult<TransitionEvent> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    attrConditions: any = [];\n\n    dateCondition = {\n        attribute: \"eventDate\",\n        startDate: \"\",\n        endDate: \"\"\n    };\n\n    beforeTypeCondition = {\n        attribute: \"beforeTypeCode\",\n        value: \"\"\n    };\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[] = [];\n\n    bsModalRef: BsModalRef;\n\n    readOnly: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private modalService: BsModalService, private iService: IOService, public dateService: DateService, private authService: AuthService, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.readOnly = !this.authService.isSRA() && !this.authService.isRA() && !this.authService.isRM();\n        this.refresh();\n\n        this.attrConditions.push(this.dateCondition);\n        this.attrConditions.push(this.beforeTypeCondition);\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            this.types = this.filterTypesBasedOnMyOrg(types);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    filterTypesBasedOnMyOrg(types) {\n        let isSRA = this.authService.isSRA();\n        let myOrgTypes = [];\n        let myOrgs: string[] = this.authService.getMyOrganizations();\n\n        for (let i = 0; i < types.length; ++i) {\n            const type = types[i];\n            const orgCode = type.orgCode;\n            let myOrgIndex = myOrgs.indexOf(orgCode);\n\n            if (myOrgIndex !== -1 || isSRA) {\n                myOrgTypes.push(type);\n            }\n        }\n\n        return myOrgTypes;\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getPage(this.page.pageSize, pageNumber, this.attrConditions).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    filterChange(): void {\n        this.refresh(this.page.pageNumber);\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(false);\n        this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n            this.refresh(this.page.pageNumber);\n        });\n    }\n\n    deleteEvent(jsEvent, transitionEvent: TransitionEvent): void {\n        jsEvent.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + transitionEvent.eventId + \"]\";\n        this.bsModalRef.content.data = transitionEvent;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.service.delete(transitionEvent).then(response => {\n                this.refresh(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(event: TransitionEvent): void {\n        this.service.getDetails(event.oid).then(response => {\n            this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(false, response);\n            this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n                this.refresh(this.page.pageNumber);\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n\n<div>\n  <div class=\"row\" style=\"padding-top:10px; padding-bottom: 10px;\">\n    <span class=\"col-md-4\">\n      <label for=\"beforeTypeFilter\">\n        <localize key=\"transition.event.beforeType\"></localize>\n      </label>\n      <select id=\"beforeTypeFilter\" name=\"beforeTypeFilter\" class=\"select-area\" [(ngModel)]=\"beforeTypeCondition.value\"\n        (change)=\"filterChange()\">\n        <option></option>\n        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n      </select>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"startDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.startDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'startDateFilter'\" [allowFutureDates]=\"false\" name=\"startDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\">\n      </date-field>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"endDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.endDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'endDateFilter'\" [allowFutureDates]=\"false\" name=\"endDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\"></date-field>\n    </span>\n  </div>\n  <div class=\"row\">\n    <span class=\"col-md-4\"></span>\n    <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(dateCondition.startDate, dateCondition.endDate)\">\n      <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n    </span>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.actions\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.date\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.id\"></localize>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-event\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:left;\">\n                <a *ngIf=\"event.permissions.includes('READ')\" (click)=\"onView(event)\" [ngClass]=\"{'fa-pencil' : event.permissions.indexOf('WRITE') !== -1, 'fa-eye' : event.permissions.indexOf('WRITE') === -1}\" class=\"fa\" aria-hidden=\"true\"></a>\n                <a *ngIf=\"event.permissions.includes('DELETE')\" (click)=\"deleteEvent($event, event)\" class=\"fa fa-trash\" aria-hidden=\"true\"></a>\n              </td>\n              <td class=\"col-md-1\">\n                <h5><strong>{{formatDate(event.eventDate)}}</strong></h5>\n              </td>\n              <td class=\"col-md-4\">\n                <h5><strong>{{event.description.localizedValue}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.beforeTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.afterTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.eventId}}</strong></h5>\n              </td>\n            </tr>\n          </ng-template>\n        </tbody>\n      </table>\n      <div *ngIf=\"!this.readOnly\" style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n          <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n            <localize key=\"hierarchy.management.button.create\"></localize>\n          </button>\n        </div>\n      </div>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","/* eslint-disable indent */\n/* eslint-disable quotes */\nimport { Component, OnDestroy, OnInit, ViewChild, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observable, Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { IOService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Transition, TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\n\nimport { DndDropEvent } from \"ngx-drag-drop\";\nimport * as uuid from \"uuid\";\n\n/* D3 Stuffs */\nimport * as d3 from \"d3\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const VIEWPORT_SCALE_FACTOR_X: number = 1.0;\nexport const VIEWPORT_SCALE_FACTOR_Y: number = 1.0;\n\nexport const GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR: string = \"#6BA542\"; // #3E2A5A or \"purple\"\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\n@Component({\n    selector: \"transition-event-modal\",\n    templateUrl: \"./transition-event-modal.component.html\",\n    styleUrls: [\"./transition-event-modal.component.css\"]\n})\nexport class TransitionEventModalComponent implements OnInit, OnDestroy {\n\n    @ViewChild(\"typeaheadParent\") typeaheadParent;\n\n    message: string = null;\n\n    event: TransitionEvent = null;\n\n    activeTransition: Transition = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onEventChange: Subject<TransitionEvent>;\n\n    afterTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    beforeTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    valid: boolean = false;\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: true\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private changeDetector: ChangeDetectorRef, public rService: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onEventChange = new Subject();\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            let myOrgs: string[] = this.authService.getMyOrganizations();\n            let myOrgTypes = [];\n            let afterTypes = [];\n            let isSRA = this.authService.isSRA();\n            for (let i = 0; i < types.length; ++i) {\n                const orgCode = types[i].orgCode;\n                const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                let myOrgIndex = myOrgs.indexOf(orgCode);\n\n                if (myOrgIndex !== -1 || isSRA) {\n                    afterTypes.push(types[i]);\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n            }\n            this.beforeTypes = myOrgTypes;\n            this.afterTypes = afterTypes;\n\n            this.readonly = this.readonly || this.event.permissions.indexOf(\"WRITE\") === -1;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.onEventChange.unsubscribe();\n    }\n\n    init(readonly: boolean, event?: TransitionEvent): void {\n        this.readonly = readonly;\n\n        if (event != null) {\n            this.event = event;\n        } else {\n            this.event = {\n                beforeTypeCode: \"\",\n                afterTypeCode: \"\",\n                eventDate: \"\",\n                permissions: [\"WRITE\", \"READ\", \"DELETE\", \"CREATE\"],\n                description: this.lService.create(),\n                transitions: []\n            };\n        }\n\n        setTimeout(() => {\n            this.onChange();\n        }, 0);\n    }\n\n    setActiveTransition(transition: Transition) {\n        let highlight = (active: boolean, trans: Transition) => {\n            let colorable = d3.selectAll('#svgHolder p[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],p[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            colorable.style(\"color\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_GO_LABEL_COLOR);\n\n            let fillable = d3.selectAll('#svgHolder circle[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],circle[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            fillable.attr(\"fill\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_CIRCLE_FILL);\n\n            let strokeable = d3.selectAll('#svgHolder path[data-transOid=\"' + trans.oid + '\"]');\n            strokeable.attr(\"stroke\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_LINE_COLOR);\n        };\n\n        if (this.activeTransition != null) {\n            highlight(false, this.activeTransition);\n        }\n\n        this.activeTransition = transition;\n\n        if (transition != null) {\n            highlight(true, transition);\n        }\n    }\n\n    onCreate(): void {\n        this.event.transitions.push({\n            oid: uuid.v4(),\n            isNew: true,\n            sourceCode: \"\",\n            sourceType: \"\",\n            targetCode: \"\",\n            targetType: \"\",\n            transitionType: \"\",\n            impact: \"\",\n            order: this.event.transitions.length\n        });\n    }\n\n    onChange(): void {\n        this.calculateDerivedAttributes();\n        this.renderVisual();\n\n        // Register highlight event listeners\n        let that = this;\n\n        setTimeout(() => {\n            d3.selectAll(\".transition\").on(\"mouseover\", function(mouseEvent) {\n                let d3This: any = this;\n                let transitionOid = d3This.getAttribute(\"data-transOid\");\n\n                let index = that.event.transitions.findIndex(trans => trans.oid === transitionOid);\n\n                that.setActiveTransition(that.event.transitions[index]);\n            });\n            d3.select(\"#transition-container\").on(\"mouseleave\", function(mouseEvent) {\n                that.setActiveTransition(null);\n            });\n        }, 0);\n\n        this.validChange();\n    }\n\n    getTypeAheadObservable(isSource: boolean, transition: Transition, typeCode: string, property: string): Observable<any> {\n        let date = isSource ? this.dateService.addDay(-1, this.event.eventDate) : this.event.eventDate;\n        return new Observable((observer: any) => {\n            this.rService.getGeoObjectSuggestions(transition[property], typeCode, null, null, null, date, date).then(results => {\n                let filtered = results.filter(result => {\n                  let pair = {\n                    sourceCode: isSource ? result.code : transition.sourceCode,\n                    targetCode: isSource ? transition.targetCode : result.code\n                  };\n\n                  for (let i = 0; i < this.event.transitions.length; ++i) {\n                      let transition = this.event.transitions[i];\n\n                      if (transition.sourceCode === pair.sourceCode && transition.targetCode === pair.targetCode) {\n                          return false;\n                      }\n                  }\n\n                  return true;\n                });\n\n                observer.next(filtered);\n            });\n        });\n    }\n\n    typeaheadOnSelect(selection: any, transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = selection.item.code;\n            transition.targetType = selection.item.typeCode;\n            transition.targetText = selection.item.name + \" (\" + selection.item.code + \")\";\n        } else {\n            transition.sourceCode = selection.item.code;\n            transition.sourceType = selection.item.typeCode;\n            transition.sourceText = selection.item.name + \" (\" + selection.item.code + \")\";\n        }\n\n        this.onChange();\n    }\n\n    clear(transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = \"\";\n            transition.targetType = \"\";\n            transition.targetText = \"\";\n        } else {\n            transition.sourceCode = \"\";\n            transition.sourceType = \"\";\n            transition.sourceText = \"\";\n        }\n\n        this.onChange();\n    }\n\n    localizeTransitionImpact(impact: string): string {\n        return this.lService.decode(\"transition.event.\" + impact.toLowerCase());\n    }\n\n    localizeTransitionType(type: string): string {\n        return type == null ? null : this.lService.decode(\"transition.event.type.\" + type.toLowerCase());\n    }\n\n    validChange() {\n        setTimeout(() => {\n            this.valid = (this.event.eventDate != null && this.event.eventDate.length > 0) &&\n                this.event.transitions.length > 0 &&\n                this.event.afterTypeCode != null &&\n                this.event.beforeTypeCode != null;\n        }, 0);\n    }\n\n    remove(index: number): void {\n        this.event.transitions.splice(index, 1);\n        this.onChange();\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.event).then(response => {\n            this.onEventChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    calculateDerivedAttributes(): void {\n        let stats = {};\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                if (stats[trans.sourceCode] == null) {\n                    stats[trans.sourceCode] = {\n                        source: 1,\n                        target: 0\n                    };\n                } else {\n                    stats[trans.sourceCode].source++;\n                }\n\n                if (stats[trans.targetCode] == null) {\n                    stats[trans.targetCode] = {\n                        source: 0,\n                        target: 1\n                    };\n                } else {\n                    stats[trans.targetCode].target++;\n                }\n            }\n        });\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let sourceStats = stats[trans.sourceCode];\n                let targetStats = stats[trans.targetCode];\n\n                let updown = \"UPGRADE\";\n                if (trans.transitionType != null && trans.transitionType.indexOf(\"DOWNGRADE\") !== -1) {\n                    updown = \"DOWNGRADE\";\n                }\n\n                if (sourceStats.source === 1 && targetStats.target === 1) {\n                    trans.transitionType = \"REASSIGN\";\n                    trans.impact = \"FULL\";\n                } else if (sourceStats.source > 1) {\n                    trans.impact = \"PARTIAL\";\n\n                    if (targetStats.target > 1) {\n                        trans.transitionType = \"MERGE\";\n                    } else {\n                        trans.transitionType = \"SPLIT\";\n                    }\n                } else if (targetStats.target > 1) {\n                    trans.impact = \"FULL\";\n                    trans.transitionType = \"MERGE\";\n                }\n\n                if (trans.sourceType !== trans.targetType) {\n                    if (trans.transitionType === \"REASSIGN\") {\n                        trans.typeUpdown = updown;\n                        delete trans.typePart;\n                        trans.transitionType = trans.typeUpdown;\n                    } else {\n                        trans.typeUpdown = updown;\n                        trans.typePart = trans.transitionType;\n                        trans.transitionType = trans.typeUpdown + \"_\" + trans.typePart;\n                    }\n                } else {\n                    delete trans.typePart;\n                }\n            }\n        });\n    }\n\n    onChangeTypeUpdown(transition: any): void {\n        if (transition.typePart) {\n            transition.transitionType = transition.typeUpdown + \"_\" + transition.typePart;\n        } else {\n            transition.transitionType = transition.typeUpdown;\n        }\n    }\n\n    /* Drag Drop Transitions */\n    onDragStart(event:DragEvent) {\n        // console.log(\"drag started\", JSON.stringify(event, null, 2));\n    }\n\n    onDragEnd(event:DragEvent) {\n        // console.log(\"drag ended\", JSON.stringify(event, null, 2));\n    }\n\n    onDragged(item: any, type: string) {\n        // console.log(\"onDragged\", item, type);\n    }\n\n    onDraggableCopied(event:DragEvent) {\n        // console.log(\"draggable copied\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableLinked(event:DragEvent) {\n        // console.log(\"draggable linked\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableMoved(event:DragEvent) {\n        // console.log(\"draggable moved\", JSON.stringify(event, null, 2));\n    }\n\n    onDragCanceled(event:DragEvent) {\n        // console.log(\"drag cancelled\", JSON.stringify(event, null, 2));\n    }\n\n    onDragover(event:DragEvent) {\n        // console.log(\"dragover\", JSON.stringify(event, null, 2));\n    }\n\n    onDrop(event:DndDropEvent) {\n        let transition: Transition = event.data;\n        let index: number = event.index;\n\n        // Remove from array\n        this.event.transitions.splice(transition.order, 1);\n\n        // Calculate new index, which may have shifted due to us removing the transition.\n        let newIndex = (index > transition.order) ? index - 1 : index;\n\n        // Insert us back into the array at newIndex\n        this.event.transitions.splice(newIndex, 0, transition);\n\n        // Update order for all transitions as elements have shifted\n        for (let i = 0; i < this.event.transitions.length; ++i) {\n            this.event.transitions[i].order = i;\n        }\n\n        window.setTimeout(() => { this.onChange(); }, 0);\n    }\n\n    /* D3 Stuff */\n    private renderVisual(): void {\n        if (this.event.transitions == null || this.event.transitions.length === 0) {\n            d3.select(\"#svg\").remove();\n            return;\n        }\n        d3.select(\"#svg\").remove();\n\n        let svg = d3.select(\"#svg\");\n\n        if (svg.node() == null) {\n            svg = d3.select(\"#svgHolder\").append(\"svg\");\n            svg.attr(\"id\", \"svg\");\n        }\n\n        let appData = this.generateAppData();\n        let renderingData = this.generateRenderingData(appData);\n\n        /*\n        let autoBox = function autoBox() {\n            document.body.appendChild(this);\n            const { x, y, width, height } = svg.node().getBBox();\n            document.body.removeChild(this);\n            return [x, y, width, height];\n        };\n        */\n\n        let chart = () => {\n            const root = renderingData.d3;\n\n            let links = svg.append(\"g\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", GRAPH_LINE_COLOR)\n                .attr(\"stroke-opacity\", 0.4)\n                .attr(\"stroke-width\", 0.4 * DRAW_SCALE_MULTIPLIER);\n            links.selectAll(\"path\")\n                .data(root.links())\n                .join(\"path\")\n                    .style(\"display\", function(d: any) {\n                        return d.source.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"d\", (d: any) => `\n                      M${d.target.y},${d.target.x}\n                       ${d.source.y},${d.source.x}\n                    `)\n                    .attr(\"data-transOid\", (d: any) => d.source.data.name === \"root\" ? null : appData.linkDataMappings[d.source.data.code + \":\" + d.target.data.code]);\n\n            svg.append(\"g\")\n                .selectAll(\"circle\")\n                .data(root.descendants())\n                .join(\"circle\")\n                    .style(\"display\", function(d: any) {\n                        return d.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"cx\", (d: any) => d.y)\n                    .attr(\"cy\", (d: any) => d.x)\n                    .attr(\"fill\", (d: any) => GRAPH_CIRCLE_FILL)\n                    .attr(\"r\", 0.9 * DRAW_SCALE_MULTIPLIER)\n                    .attr(\"data-goCode\", (d: any) => d.data.code)\n                    .attr(\"data-depth\", (d: any) => d.depth);\n\n            svg.append(\"g\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-size\", 2 * DRAW_SCALE_MULTIPLIER)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"stroke-width\", 3)\n              .selectAll(\"foreignObject\")\n              .data(root.descendants())\n              .join(\"foreignObject\")\n                .style(\"display\", function(d: any) {\n                    return d.depth === 0 ? \"none\" : null;\n                })\n                .attr(\"x\", (d: any) => (d.y + ((d.depth === 1) ? -13 : 1)))\n                .attr(\"y\", (d: any) => (d.x) + ((d.depth === 1) ? -2 : -3))\n                .attr(\"font-size\", \"0.7em\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"width\", 12)\n                .attr(\"height\", 8)\n              .append(\"xhtml:p\")\n                .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n                .attr(\"data-goCode\", (d: any) => d.data.code)\n                .attr(\"data-depth\", (d: any) => d.depth)\n                .style(\"margin\", \"0.5px\")\n                .style(\"vertical-align\", \"middle\")\n                .style(\"line-height\", 1.5)\n                .style(\"color\", GRAPH_GO_LABEL_COLOR)\n                .style(\"padding-left\", \"0.4px\")\n                .style(\"padding-top\", \"0.2px\")\n                .html((d: any) => d.data.name)\n              .filter((d: any) => d.depth === 1)\n                .style(\"text-align\", \"right\");\n\n            renderingData.multipleParentLinks.forEach(function(link) {\n                links.append(\"path\")\n                    .attr(\"d\", () => `\n                      M${link.parent.y},${link.parent.x}\n                       ${link.child.y},${link.child.x}\n                    `)\n                    .attr(\"data-transOid\", () => link.oid);\n            });\n\n            // return svg.attr(\"viewBox\", autoBox).node();\n        };\n\n        chart();\n\n        this.calculateSvgViewBox();\n    }\n\n    generateRenderingData(appData: any): any {\n        let width = 100;\n\n        const root: any = d3.hierarchy(appData.d3Data).sort((a, b) => d3.ascending(a.data.order, b.data.order));\n        root.dx = 5 * DRAW_SCALE_MULTIPLIER;\n        root.dy = width / (root.height + 1);\n        let d3RenderingData = d3.tree().nodeSize([root.dx, root.dy]).separation(() => 1.5)(root);\n\n        let multipleParentLinks = [];\n        appData.multipleParentLinks.forEach(function(link) {\n            let parentNode = root.find(node => node.data.isSource && node.data.code === link.parent.code);\n            let childNode = root.find(node => !node.data.isSource && node.data.code === link.child.code);\n\n            if (parentNode != null && childNode != null) {\n                multipleParentLinks.push({\n                    parent: parentNode,\n                    child: childNode,\n                    oid: link.oid\n                });\n            }\n        });\n\n        return {\n            d3: d3RenderingData,\n            multipleParentLinks: multipleParentLinks\n        };\n    }\n\n    generateAppData(): any {\n        let children = [];\n        let multipleParentLinks = []; // D3 can't handle multiple parents so we have to draw them ourselves.\n        let linkDataMappings = {}; // D3 doesn't allow us to put data on the link itself. Our link needs an oid. So this is a hack to store data on a link.\n\n        let isChildOfOtherNode = (code: string) => {\n            for (let i = 0; i < children.length; ++i) {\n                let child = children[i];\n\n                if (child.children) {\n                    for (let j = 0; j < child.children.length; ++j) {\n                        let grandChild = child.children[j];\n\n                        if (grandChild.code === code) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let index = children.findIndex(child => child.code === trans.sourceCode);\n                linkDataMappings[trans.sourceCode + \":\" + trans.targetCode] = trans.oid;\n\n                let childExists = isChildOfOtherNode(trans.targetCode);\n                let grandChild = null;\n                if (!childExists) {\n                    grandChild = {\n                        name: trans.targetText,\n                        code: trans.targetCode,\n                        isSource: false,\n                        children: []\n                    };\n                } else {\n                    multipleParentLinks.push({\n                        oid: trans.oid,\n                        child: {\n                            code: trans.targetCode,\n                            text: trans.targetText,\n                            type: trans.targetType\n                        },\n                        parent: {\n                            code: trans.sourceCode,\n                            text: trans.sourceText,\n                            type: trans.sourceType\n                        }\n                    });\n                }\n\n                if (index !== -1) {\n                    let child = children[index];\n\n                    let index2 = child.children.findIndex(child => child.code === trans.targetCode);\n\n                    if (index2 != null && grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n                } else {\n                    let child: any = {\n                        name: trans.sourceText,\n                        code: trans.sourceCode,\n                        children: [],\n                        isSource: true\n                    };\n\n                    if (grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n\n                    children.push(child);\n                }\n            }\n        });\n\n        return {\n            d3Data: {\n                name: \"root\",\n                children: children\n            },\n            multipleParentLinks: multipleParentLinks,\n            linkDataMappings: linkDataMappings\n        };\n    }\n\n    calculateSvgViewBox(): void {\n        let svg: any = d3.select(\"#svg\");\n        let svgNode: any = svg.node();\n\n        let { x, y, width, height } = svgNode.getBBox();\n\n        const xPadding = 0;\n        const yPadding = 2;\n        svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X + \" \" + (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y);\n\n        // width = (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X;\n        // height = (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y;\n\n        // d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n        // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"modal-body row\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset *ngIf=\"event != null\">\n            <div class=\"col-md-6\">\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label>\n\t\t                        <localize key=\"transition.event.date\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n\t\t                        {{formatDate(event.eventDate)}}\n\t\t                    </span>\n\t\t                    <date-field *ngIf=\"!readonly\" [(value)]=\"event.eventDate\" [classNames]=\"['form-control']\" label=\"\"\n\t\t                        [inputName]=\"'eventDate'\" [allowFutureDates]=\"false\" name=\"eventDate\" [required]=\"true\" (validChange)=\"validChange($event)\"\n\t\t                        [disable]=\"readonly || event.transitions.length > 0\"></date-field>\n\t\t                </div>\n\t\t            </div>\n\t\t        \n\t\t            <div class=\"row-holder\" *ngFor=\"let localeValue of event.description.localeValues\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label> <localize style=\"display:block;\" key=\"transition.event.description\"></localize>\n\t\t                        <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n\t\t                            </convert-key-label>)</span>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n\t\t                        class=\"form-control\" [disabled]=\"readonly\"\n\t\t                        [required]=\"false\" />\n\t\t                </div>\n\t\t            </div>\n\t\t\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"beforeTypeCode\">\n\t\t                        <localize key=\"transition.event.beforeType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && beforeTypes != null\" class=\"holder\">\n\t\t                    <select id=\"beforeTypeCode\" name=\"beforeTypeCode\" class=\"select-area\" [(ngModel)]=\"event.beforeTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of beforeTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.beforeTypeLabel\" name=\"beforeType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n\t\t            \n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"afterTypeCode\">\n\t\t                        <localize key=\"transition.event.afterType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && afterTypes != null\" class=\"holder\">\n\t\t                    <select id=\"afterTypeCode\" name=\"afterTypeCode\" class=\"select-area\" [(ngModel)]=\"event.afterTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of afterTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.afterTypeLabel\" name=\"afterType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n            </div>\n            \n            <div class=\"col-md-6\">\n\t\t\t\t      <div class=\"row\" style=\"text-align: center;\">\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.before\"></localize></label>\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.after\"></localize></label>\n\t\t\t\t      </div>\n\t\t\t\t    \n\t\t\t\t      <div style=\"margin-top: 10px;\" id=\"svgHolder\"></div>\n\t\t\t\t    </div>\n\t\t\t\t    \n            <div class=\"row-holder\" *ngIf=\"event.beforeTypeCode != null && event.beforeTypeCode !== '' && event.afterTypeCode != null && event.afterTypeCode !== '' && event.eventDate != null && event.eventDate !== ''\">\n                    <table class=\"table\" style=\"border-collapse: separate;\">\n                        <thead>\n\t                        <tr style=\"height: 50px;color: grey;\">\n\t\t                        <th *ngIf=\"!readonly\"></th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.before\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.impact\"></localize> </th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.after\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.type\"></localize> </th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\"></th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\" *ngIf=\"!readonly\"></th>\n\t                        </tr>\n                        </thead>\n                        <tbody class=\"dndList\" id=\"transition-container\"\n                          [dndDropzone]=\"readonly ? null : true\"\n                          [dndEffectAllowed]=\"readonly ? null : 'copyMove'\"\n                          (dndDrop)=\"readonly ? null : onDrop($event)\"\n                        >\n                            <tr *ngIf=\"!readonly\" class=\"dndPlaceholder\" dndPlaceholderRef>\n                              <td colspan=\"7\"></td>\n                            </tr>\n                        \n                            <tr *ngFor=\"let transition of event.transitions; let i = index;\" class=\"transition\" style=\"height: 50px;\" [attr.data-transOid]=\"transition.oid\"\n                                [dndDraggable]=\"readonly ? null : transition\"\n                                [dndEffectAllowed]=\"readonly ? null : draggable.effectAllowed\"\n                                [dndDisableIf]=\"readonly ? null : draggable.disable\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndStart)=\"readonly ? null : onDragStart($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCopied)=\"readonly ? null : onDraggableCopied($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndLinked)=\"readonly ? null : onDraggableLinked($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndMoved)=\"readonly ? null : onDraggableMoved($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCanceled)=\"readonly ? null : onDragCanceled($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndEnd)=\"readonly ? null : onDragEnd($event)\"\n                            >\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle; text-align: center;\">\n                                  <a style=\"font-size:25px; color: #969696; cursor: move;\" class=\"fa fa-bars\"></a>\n                                </td>\n                                <td>\n                                    <div class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.source-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.sourceText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(true, transition, this.event.beforeTypeCode, 'sourceText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'sourceText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentS-' + i\">\n\n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentS-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'sourceText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td style=\"vertical-align:middle;\">\n                                    <label>{{localizeTransitionImpact(transition.impact)}}</label>\n                                </td>\n                                <td>\n                                    <div  class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.target-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.targetText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(false, transition, this.event.afterTypeCode, 'targetText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'targetText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentT-' + i\">\n                                        \n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentT-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'targetText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td *ngIf=\"transition.typePart || !transition.typeUpdown\" style=\"vertical-align:middle;\">\n                                    <label *ngIf=\"!transition.typeUpdown\">{{localizeTransitionType(transition.transitionType)}}</label>\n                                    <label *ngIf=\"transition.typePart\" style=\"min-width:80px;\">{{localizeTransitionType(transition.typePart)}}</label>\n                                </td>\n                                <td *ngIf=\"transition.typeUpdown\">\n                                    <select style=\"min-width:80px;\" *ngIf=\"transition.typeUpdown\" [name]=\"'transition.transitionType-updown-' + transition.oid + '-' + i\" class=\"select-area\"\n                                        [(ngModel)]=\"transition.typeUpdown\" (change)=\"onChangeTypeUpdown(transition)\" [disabled]=\"readonly\" required>\n                                        <option value=\"UPGRADE\"><localize key=\"transition.event.type.upgrade\"></localize></option>\n                                        <option value=\"DOWNGRADE\"><localize key=\"transition.event.type.downgrade\"></localize></option>\n                                    </select>\n                                </td>\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle;\">\n                                    <span class=\"clickable\" (click)=\"remove(i)\">\n                                        <a class=\"fa fa-trash\" style=\"font-size:30px;\" aria-hidden=\"true\"></a>\n                                    </span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"!readonly\" style=\"margin-left: 6px; margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                        <div class=\"col-md-6\">\n                            <i class=\"fa fa-plus clickable\" (click)=\"onCreate()\"> \n                                <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                            </i>\n                        </div>\n                    </div>\n\n                </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                            role=\"button\" [disabled]=\"form.invalid || !valid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>\n","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse, HttpParams } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { HistoricalRow } from \"@registry/model/transition-event\";\nimport { AuthService, DateService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"historical-report\",\n    templateUrl: \"./historical-report.component.html\",\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class HistoricalReportComponent {\n\n    message: string = null;\n\n    page: PageResult<HistoricalRow> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    data = {\n        type: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    }\n\n    types: { label: string, code: string }[] = [];\n\n    isValid: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private iService: IOService, private authService: AuthService,\n        public dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.iService.listGeoObjectTypes(true).then(types => {\n            this.types = types;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getHistoricalReport(this.data.type, this.data.startDate, this.data.endDate, this.page.pageSize, pageNumber).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    exportToExcel(): void {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", this.data.type.toString());\n        params = params.set(\"startDate\", this.data.startDate.toString());\n        params = params.set(\"endDate\", this.data.endDate.toString());\n\n        window.location.href = acp + \"/transition-event/export-excel?\" + params.toString();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = (this.data.startDate != null && this.data.endDate != null && !this.dateService.after(this.data.startDate, this.data.endDate));\n        }, 0);\n    }\n\n    public error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n  <form #form=\"ngForm\" autocomplete=\"off\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"code\">\n        <localize key=\"io.geoObjectType\"></localize>\n      </label>\n      <div class=\"col-md-8\">\n        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"data.type\" required>\n          <option></option>\n          <option *ngFor=\"let type of types\" [value]=\"type.code\">\n            {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n          </option>\n        </select>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"startDate\">\n        <localize key=\"io.startDate\"></localize>\n      </label>\n      <div class=\"col-md-2\">\n        <date-field #dateFieldComponents [(value)]=\"data.startDate\" label=\"\" [inputName]=\"'startDate'\"\n          [allowFutureDates]=\"false\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n        <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(data.startDate, data.endDate)\">\n\t        <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n\t      </span>\n      </div>\n\n      <label class=\"col-md-2 text-right\" for=\"endDate\">\n        <localize key=\"io.endDate\"></localize>\n      </label>\n      <div class=\"col-md-4\">\n        <date-field #dateFieldComponents [(value)]=\"data.endDate\" label=\"\" [inputName]=\"'endDate'\"\n          [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"button-holder col-md-8 text-right\">\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"refresh()\">\n          <localize key=\"io.submit\"></localize>\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"exportToExcel()\">\n          <localize key=\"io.export\"></localize>\n        </button>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n  </form>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventId\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventDate\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeLabel\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterLabel\"></localize>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-row\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td>\n                {{row.eventId}}\n              </td>\n              <td>\n                {{formatDate(row.eventDate)}}\n              </td>\n              <td>\n                {{row.eventType}}\n              </td>\n              <td>\n                {{row.description.localizedValue}}\n              </td>\n              <td>\n                {{row.beforeType}}\n              </td>\n              <td>\n                {{row.beforeCode}}\n              </td>\n              <td>\n                {{row.beforeLabel.localizedValue}}\n              </td>\n              <td>\n                {{row.afterType}}\n              </td>\n              <td>\n                {{row.afterCode}}\n              </td>\n              <td>\n                {{row.afterLabel.localizedValue}}\n              </td>\n            </tr>\n\n          </ng-template>\n        </tbody>\n      </table>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\nimport { calculateTextWidth } from \"./svg-util\";\n\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\nimport { SvgHierarchyType } from \"./svg-hierarchy-type\";\nimport { HierarchyComponent, RELATED_NODE_BANNER_COLOR } from \"../hierarchy.component\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nexport class SvgHierarchyNode {\n\n    private hierarchyComponent: HierarchyComponent;\n\n    private svgHierarchyType: SvgHierarchyType;\n\n    private geoObjectType: GeoObjectType;\n\n    private treeNode: any;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    constructor(hierarchyComponent: HierarchyComponent, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n        public localizeService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        this.hierarchyComponent = hierarchyComponent;\n        this.svgHierarchyType = svgHierarchyType;\n        this.geoObjectType = geoObjectType;\n        this.treeNode = treeNode;\n    }\n\n    getCode(): string {\n        return this.geoObjectType.code;\n    }\n\n    setPos(x: number, y: number, dragging: boolean) {\n        let bbox = this.getBbox();\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + 5)\n            .attr(\"y\", y + 1);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + bbox.width - 20)\n            .attr(\"y\", y + 17);\n\n        // Move inherit and uninherit buttons with the node they're moving\n\n        let inheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (inheritNode != null) {\n            const heritX = (x + bbox.width - 60);\n            const heritY = (y + bbox.height - 24);\n            let inheritBbox = inheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n        }\n\n        let uninheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (uninheritNode != null) {\n            const heritX = (x + bbox.width - 71);\n            const heritY = (y + bbox.height - 24);\n            let uninheritBbox = uninheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n        }\n    }\n\n    getPos() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n    }\n\n    getBbox() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n    }\n\n    getTreeNode() {\n        return this.treeNode;\n    }\n\n    hideRelatedHierarchy(): string {\n        let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n        if (existingSecondary.node() != null) {\n            existingSecondary.remove();\n            this.hierarchyComponent.calculateSvgViewBox();\n\n            let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n            return existingSecondaryCode;\n        }\n    }\n\n    renderRelatedHierarchiesMenu() {\n        let that = this;\n        let existingMenu = d3.select(\".g-context-menu\");\n\n        if (existingMenu.node() == null) {\n            //let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n            let parent = d3.select(\"#svg\");\n\n            let contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n            let relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n            const hasActionsPermissions = this.authService.isSRA() || this.authService.isOrganizationRA(this.svgHierarchyType.hierarchyType.organizationCode);\n\n            let bbox = this.getBbox();\n            let x = bbox.x + bbox.width - 5;\n            let y = bbox.y + bbox.height / 2 - 8;\n            const height = 20;\n            const fontSize = 8;\n            const widthPadding = 10;\n            const borderColor = \"#aaaaaa\";\n            const dividerColor = \"#e4e4e4\";\n            const fontFamily = \"sans-serif\";\n            const titleFontSize = 9;\n\n            const titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n            const actionsTitle = this.hierarchyComponent.localize(\"hierarchy.content.actionsTitle\");\n            const removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n            const noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n            const hideRelatedHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.hideRelatedHierarchy\");\n            const uninheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n            const inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\n            let isSecondaryHierarchyRendered = (d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node() != null);\n\n            let numActions = hasActionsPermissions ? (isSecondaryHierarchyRendered ? 2 : 1) : 0;\n\n            // Calculate the width of our title\n            let width = calculateTextWidth(titleLabel, titleFontSize);\n\n            // Calculate with of remove text\n            let removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n            width = removeWidth > width ? removeWidth : width;\n\n            if (isSecondaryHierarchyRendered) {\n              // Calculate width of \"hide related hierarchy\" label\n                let hideRelatedWidth = calculateTextWidth(hideRelatedHierarchyLabel, fontSize);\n                width = hideRelatedWidth > width ? hideRelatedWidth : width;\n            }\n\n            if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                let uninheritWidth = calculateTextWidth(uninheritLabel, fontSize);\n                width = uninheritWidth > width ? uninheritWidth : width;\n                numActions++;\n            } else {\n                let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                if (existingSecondary.node() != null) {\n                    let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                    let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                    let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                    let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                    if (this.treeNode.parent == null && relatedGotHasParents) {\n                        let inheritWidth = calculateTextWidth(inheritLabel, fontSize);\n                        width = inheritWidth > width ? inheritWidth : width;\n                        numActions++;\n                    }\n                }\n            }\n\n            // Calculate the width of our context menu, which is based on how long the text inside it will be.\n            // We don't know how long text is until we render it. So we'll need to loop over all the text and\n            // render and destroy all of it.\n            if (relatedHierarchies.length > 0) {\n                relatedHierarchies.forEach((relatedHierarchyCode: string) => {\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    let textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n\n                    if (textWidth > width) {\n                        width = textWidth;\n                    }\n                });\n            } else {\n                let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n                width = noHierLabelWidth > width ? noHierLabelWidth : width;\n            }\n\n            width = width + widthPadding;\n\n            let heightAdditions: number = relatedHierarchies.length > 0 ? (numActions + 2) : (numActions + 3);\n\n            // Background rectangle with border\n            contextMenuGroup.append(\"rect\")\n                .classed(\"contextmenu-relatedhiers-background\", true)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"rx\", 5)\n                .attr(\"width\", width)\n                .attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", .5)\n                .attr(\"stroke\", borderColor);\n\n            // Related Hierarchies Title\n            contextMenuGroup.append(\"text\")\n                .classed(\"contextmenu-relatedhiers-title\", true)\n                .attr(\"x\", x + widthPadding / 2)\n                .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                .attr(\"font-size\", titleFontSize)\n                .attr(\"font-family\", fontFamily)\n                .attr(\"font-weight\", \"bold\")\n                .text(titleLabel);\n\n            y = y + height;\n\n            // Dividing line at the bottom\n            contextMenuGroup.append(\"line\")\n                .classed(\"contextmenu-relatedhiers-divider\", true)\n                .attr(\"x1\", x)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x + width)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", borderColor)\n                .attr(\"stroke-width\", .5);\n\n\n            if (relatedHierarchies.length > 0) {\n                // Loop over all related hierarchies and draw them as list items\n                for (let i = 0; i < relatedHierarchies.length; ++i) {\n                    let relatedHierarchyCode = relatedHierarchies[i];\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    // Text that says the hierarchy's display label\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"data-hierCode\", relatedHierarchyCode)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(relatedHierarchyLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n                    y = y + height;\n\n                    // Dividing line at the bottom\n                    if (i < relatedHierarchies.length) {\n                        contextMenuGroup.append(\"line\")\n                            .classed(\"contextmenu-relatedhiers-divider\", true)\n                            .attr(\"data-hierCode\", relatedHierarchyCode)\n                            .attr(\"x1\", x + 5)\n                            .attr(\"y1\", y)\n                            .attr(\"x2\", x + width - 5)\n                            .attr(\"y2\", y)\n                            .attr(\"stroke\", dividerColor)\n                            .attr(\"stroke-width\", .5);\n                    }\n                }\n            } else {\n                // Text that says \"No related Hierarchies\"\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(noRelatedHierLabel);\n\n                y = y + height;\n\n                    // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x + 5)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width - 5)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", dividerColor)\n                    .attr(\"stroke-width\", .5);\n            }\n\n      // Actions Section\n            if (hasActionsPermissions) {\n              // Actions Title\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-title\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                    .attr(\"font-size\", titleFontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .attr(\"font-weight\", \"bold\")\n                    .text(actionsTitle);\n\n                y = y + height;\n\n              // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n        // \"Remove from hierarchy\" button\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"data-remove\", \"REPLACE---gotCode\")\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(removeFromHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) { that.removeGotFromHierarchy(); });\n\n                y = y + height;\n\n            // Inherit / Uninherit buttons\n                if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                    contextMenuGroup.append(\"line\")\n                        .classed(\"contextmenu-relatedhiers-divider\", true)\n                        .attr(\"x1\", x)\n                        .attr(\"y1\", y)\n                        .attr(\"x2\", x + width)\n                        .attr(\"y2\", y)\n                        .attr(\"stroke\", borderColor)\n                        .attr(\"stroke-width\", .5);\n\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(uninheritLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.onClickUninheritHierarchy(); });\n\n                    y = y + height;\n                } else {\n                    let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                    if (existingSecondary.node() != null) {\n                        let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                        let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                        let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                        let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                        if (this.treeNode.parent == null && relatedGotHasParents) {\n                            contextMenuGroup.append(\"line\")\n                                .classed(\"contextmenu-relatedhiers-divider\", true)\n                                .attr(\"x1\", x)\n                                .attr(\"y1\", y)\n                                .attr(\"x2\", x + width)\n                                .attr(\"y2\", y)\n                                .attr(\"stroke\", borderColor)\n                                .attr(\"stroke-width\", .5);\n\n                            contextMenuGroup.append(\"text\")\n                                .classed(\"contextmenu-relatedhiers-text\", true)\n                                .attr(\"x\", x + widthPadding / 2)\n                                .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-family\", fontFamily)\n                                .text(inheritLabel)\n                                .style(\"cursor\", \"pointer\")\n                                .on(\"click\", function(event, node) { that.onClickInheritHierarchy(secondaryHierarchy); });\n\n                            y = y + height;\n                        }\n                    }\n                }\n            }\n\n            if (isSecondaryHierarchyRendered) {\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(hideRelatedHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) {\n                        that.hideRelatedHierarchy();\n\n                        let existingMenu = d3.select(\".g-context-menu\");\n                        if (existingMenu.node() != null) {\n                            existingMenu.remove();\n                        }\n\n                        d3.select(\".g-hierarchy-got-connector\").remove();\n                    });\n            }\n\n            this.hierarchyComponent.calculateSvgViewBox();\n        } else {\n            existingMenu.remove();\n        }\n    }\n\n    removeGotFromHierarchy() {\n        let svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n        let obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        let message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.data = obj.code;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            let treeNode = svgGot.getTreeNode();\n            let parent = null;\n            if (treeNode.parent == null) {\n                parent = \"ROOT\";\n            } else {\n                if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                    parent = \"ROOT\";\n                } else {\n                    parent = treeNode.parent.data.geoObjectType;\n                }\n            }\n\n            this.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err); });\n        });\n    }\n\n    renderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let myBbox = this.getBbox();\n        let svg = d3.select(\"#svg\");\n\n        // Remove any secondary hierarchy that may already be rendered\n        if (this.hideRelatedHierarchy() === relatedHierarchy.code) {\n            return;\n        }\n\n        // Get the bounding box for our primary hierarchy\n        let primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n        // Render the secondary hierarchy\n        let svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService, this.authService);\n        svgHt.render();\n        let gSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n\n        // Translate the secondary hierarchy to the right of the primary hierarchy\n        let gHierarchy: any = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node();\n        let bbox = gHierarchy.getBBox();\n        let paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n        gSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n        // Draw dotted line between the shared node in the hierarchies\n        let secondaryGot = d3.select(\".g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n        let secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n        secondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n        d3.select(\".g-hierarchy-got-connector\").remove();\n        let gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n        gConnector.append(\"path\")\n            .classed(\"hierarchy-got-connector\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\n                \"d\",\n                \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width) +\n                \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2) +\n                \"H\" + secondaryGotBbox.x\n            );\n\n        // Draw arrow for dotted line\n        const arrowRectD = { height: 10, width: 7 };\n        let gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n        gArrow.append(\"rect\")\n            .classed(\"hierarchy-got-connector-arrow-rect\", true)\n            .attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n            .attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n        gArrow.append(\"path\")\n            .classed(\"hierarchy-got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\",\n                \"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n            );\n\n        // Recalculate the viewbox (should probably be the last thing that happens)\n        this.hierarchyComponent.calculateSvgViewBox();\n    }\n\n    onClickInheritHierarchy(hierarchy: HierarchyType) {\n        this.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n    }\n\n    onClickUninheritHierarchy() {\n        this.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { TreeNode } from \"@circlon/angular-tree-component\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\n\n\n@Component({\n    selector: \"add-child-to-hierarchy-modal\",\n    templateUrl: \"./add-child-to-hierarchy-modal.component.html\",\n    styleUrls: []\n})\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n    /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n    public hierarchyType: HierarchyType;\n    public nodes: HierarchyNode[];\n    public allGeoObjectTypes: GeoObjectType[];\n    public selectedGeoObjectType: GeoObjectType;\n    private toRoot: boolean = false;\n    selectUndefinedOptionValue: any;\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n\n    onSelect(value: string): void {\n        this.allGeoObjectTypes.forEach(gObj => {\n            if (gObj.code === value) {\n                this.selectedGeoObjectType = gObj;\n            }\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy(this.hierarchyType.code, parent, this.selectedGeoObjectType.code).then(data => {\n            this.onNodeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-attributes-modal\",\n    templateUrl: \"./manage-attributes-modal.component.html\",\n    styleUrls: [\"./manage-attributes-modal.css\"]\n})\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageAttributes, attribute: this.attribute, termOption: \"\" };\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy() {\n        this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            this.onDeleteAttribute.next(data);\n\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            [title]=\"'modal.button.edit' | localize\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            [title]=\"'modal.button.remove' | localize\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyOverTimeEntry, GeoObject, HierarchyOverTimeEntryParent, HierarchyOverTime, AttributeType, TimeRangeEntry } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nexport class HierarchyCREditor extends ValueOverTimeCREditor {\n\n  hierarchyOverTime: HierarchyOverTime;\n\n  hierarchyEntry: HierarchyOverTimeEntry;\n\n  existRangeStale: boolean = false;\n\n  constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction, hierarchyEntry: HierarchyOverTimeEntry, hierarchyOverTime: HierarchyOverTime) {\n      super(changeRequestAttributeEditor, attr, action);\n      this.hierarchyEntry = hierarchyEntry;\n      this.hierarchyOverTime = hierarchyOverTime;\n\n      if (this.hierarchyEntry != null) {\n          this.hierarchyEntry.loading = {};\n      }\n  }\n\n  // @Override\n  getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n      return this.hierarchyEntry;\n  }\n\n  // @Override\n  getValueFromGeoObjectForDiff(): any {\n      let immediateParent: GeoObject = this.hierarchyEntry.parents[this.hierarchyOverTime.types[this.hierarchyOverTime.types.length - 1].code].geoObject;\n      let goVal: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n      return goVal;\n  }\n\n  // @Override\n  onChange(type: ChangeType) {\n      if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n          this.existRangeStale = true;\n      }\n\n      super.onChange(type);\n  }\n\n  // @Override\n  validate(): boolean {\n      super.validate();\n\n      let invalidParent = this.changeRequestAttributeEditor.changeRequestEditor.dateService.invalidParent;\n      let parentDoesNotExist = this.changeRequestAttributeEditor.changeRequestEditor.dateService.parentDoesNotExist;\n      let service = this.changeRequestAttributeEditor.changeRequestEditor.registryService;\n\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(this.hierarchyEntry.parents, type.code) && this.hierarchyEntry.parents[type.code].geoObject) {\n              let goParent = this.hierarchyEntry.parents[type.code].geoObject;\n\n              if (!this.existRangeStale) {\n                  if (goParent.properties.invalid) {\n                      this._isValid = false;\n                      this.conflictMessages.add(invalidParent);\n                  }\n                  if (!goParent.properties.exists) {\n                      this._isValid = false;\n                      this.conflictMessages.add(parentDoesNotExist);\n                  }\n              } else {\n                  service.doesGeoObjectExistAtRange(this.startDate, this.endDate, type.code, goParent.properties.code).then(stats => {\n                      goParent.properties.invalid = stats.invalid;\n                      goParent.properties.exists = stats.exists;\n\n                      this.conflictMessages.delete(invalidParent);\n                      this.conflictMessages.delete(parentDoesNotExist);\n\n                      if (goParent.properties.invalid) {\n                          this._isValid = false;\n                          this.conflictMessages.add(invalidParent);\n                      }\n                      if (!goParent.properties.exists) {\n                          this._isValid = false;\n                          this.conflictMessages.add(parentDoesNotExist);\n                      }\n                  }).catch((err: HttpErrorResponse) => {\n                      // eslint-disable-next-line no-console\n                      console.log(err);\n                  });\n              }\n          }\n      }\n\n      this.existRangeStale = false;\n\n      return this._isValid;\n  }\n\n  // @Override\n  validateUpdateReference() {\n      // We could potentially try to check for this, but it won't be easy. So for now we're doing nothing.\n  }\n\n  setParentValue(type: {code: string, label: string}, parents: { [k: string]: HierarchyOverTimeEntryParent }) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      let directParent: GeoObject = null;\n      if (type != null) {\n          directParent = parents[type.code].geoObject;\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  // let currentDirectParent: GeoObject = this.hierarchyEntry.parents[type.code].geoObject;\n                  let currentDirectParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n                  let oldValue: string = currentDirectParent == null ? null : currentDirectParent.properties.type + \"_~VST~_\" + currentDirectParent.properties.code;\n\n                  if (\n                      (currentDirectParent == null && directParent == null) ||\n                      ((currentDirectParent != null && directParent != null) &&\n                      currentDirectParent.properties.code === directParent.properties.code)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldParents = JSON.parse(JSON.stringify(this.hierarchyEntry.parents));\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          let newValueStrConcat: string = null;\n          if (directParent != null) {\n              newValueStrConcat = directParent.properties.type + \"_~VST~_\" + directParent.properties.code;\n          }\n\n          if (newValueStrConcat === this.diff.oldValue) {\n              delete this.diff.newValue;\n          } else {\n              this.diff.newValue = newValueStrConcat;\n          }\n\n          this.diff.parents = parents;\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.parents = parents;\n      }\n\n      this.onChange(ChangeType.VALUE);\n  }\n\n  public getLowestLevelFromHierarchyEntry(parents: any): {geoObject: GeoObject, text: string} {\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(parents, type.code) && parents[type.code].geoObject) {\n              return parents[type.code];\n          }\n      }\n\n      return null;\n  }\n\n  set value(val: any) {\n      throw new Error(\"Invoke setParentValue instead\");\n  }\n\n  get value() {\n      if (this.diff != null && this.diff.parents !== undefined) {\n          return this.diff;\n      } else if (this.hierarchyEntry != null) {\n          return this.hierarchyEntry;\n      }\n\n      return null;\n  }\n\n  public removeType(type): void {\n      // this.value.parents[type.code] = { text: \"\", geoObject: null };\n\n      let newParents = JSON.parse(JSON.stringify(this.value.parents));\n      newParents[type.code] = { text: \"\", geoObject: null };\n\n      // Set the value to be the next existing ancestor.\n      let entry = this.value;\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let parentType = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(entry.parents, parentType.code) && entry.parents[parentType.code].geoObject) {\n              this.setParentValue(parentType, newParents);\n              return;\n          }\n      }\n\n      // If we do not have a next existing ancestor, then we must set the value to null.\n      this.setParentValue(null, newParents);\n  }\n\n  createEmptyHierarchyEntry(): HierarchyOverTimeEntry {\n      let hierarchyEntry = new HierarchyOverTimeEntry();\n      hierarchyEntry.loading = {};\n      hierarchyEntry.oid = uuid();\n\n      hierarchyEntry.parents = {};\n\n      if (this.hierarchyOverTime) {\n          for (let i = 0; i < this.hierarchyOverTime.types.length; i++) {\n              let current = this.hierarchyOverTime.types[i];\n\n              hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n\n              hierarchyEntry.loading = {};\n          }\n      }\n\n      return hierarchyEntry;\n  }\n\n  public remove(): void {\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.onChange(ChangeType.REMOVE);\n              return;\n          } else if (this.hierarchyEntry != null && this.diff == null) {\n              let currentImmediateParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n              let oldValue: string = currentImmediateParent == null ? null : currentImmediateParent.properties.type + \"_~VST~_\" + currentImmediateParent.properties.code;\n\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.hierarchyEntry.oid;\n              this.diff.oldValue = oldValue;\n              this.diff.oldStartDate = this.hierarchyEntry.startDate;\n              this.diff.oldEndDate = this.hierarchyEntry.endDate;\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let index = this.hierarchyOverTime.entries.findIndex(vot => vot.oid === this.hierarchyEntry.oid);\n\n          if (index !== -1) {\n              this.hierarchyOverTime.entries.splice(index, 1);\n          }\n      }\n\n      this.onChange(ChangeType.REMOVE);\n  }\n\n}\n","\nimport { ChangeRequest, AbstractAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ActionTypes } from \"@registry/model/constants\";\n\nexport class StandardAttributeCRModel {\n\n    changeRequest: ChangeRequest;\n\n    diff: { oldValue?: any, newValue?: any };\n\n    attribute: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    editAction: AbstractAction;\n\n    code: string;\n\n    private _isValid: boolean = true;\n\n    constructor(attr: AttributeType, geoObject: GeoObjectOverTime, cr: ChangeRequest) {\n        this.attribute = attr;\n        this.geoObject = geoObject;\n        this.changeRequest = cr;\n        this.initialize();\n    }\n\n    initialize(): void {\n        let actions = this.changeRequest.actions;\n\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            if (actions.length > 0 && actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                this.editAction = actions[0];\n            }\n        } else {\n            actions.forEach((action: AbstractAction) => {\n                if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (this.attribute.code === updateAttrAction.attributeName) {\n                        this.editAction = action;\n                    }\n                }\n            });\n\n            if (this.editAction == null) {\n                this.editAction = new UpdateAttributeAction(this.attribute.code);\n            }\n        }\n\n        let len = this.changeRequest.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let action: AbstractAction = actions[i];\n\n            if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                if (this.attribute.code === updateAttrAction.attributeName) {\n                    this.diff = updateAttrAction.attributeDiff;\n                }\n            } else if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n              // Nothing to do here. Create actions don't have diffs.\n            } else {\n                console.log(\"Unexpected action : \" + action.actionType, action);\n            }\n        }\n    }\n\n    public hasChanges(): boolean {\n        return this.diff != null;\n    }\n\n    isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(): boolean {\n        return this._isValid;\n    }\n\n    set value(val: any) {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            this.geoObject.attributes[this.attribute.code] = val;\n        } else {\n            if (this.diff != null) {\n                if (this.areValuesEqual(this.diff.oldValue, val)) {\n                    delete (this.editAction as UpdateAttributeAction).attributeDiff;\n                    this.diff = null;\n\n                    let index = this.changeRequest.actions.findIndex(findAction => findAction === this.editAction);\n                    if (index !== -1) {\n                        this.changeRequest.actions.splice(index, 1);\n                    }\n                } else {\n                    this.diff.newValue = val;\n                }\n            } else {\n                this.diff = { oldValue: this.geoObject.attributes[this.attribute.code], newValue: val };\n\n                (this.editAction as UpdateAttributeAction).attributeDiff = this.diff;\n                this.changeRequest.actions.push(this.editAction);\n            }\n        }\n    }\n\n    get value(): any {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            return this.geoObject.attributes[this.attribute.code];\n        } else {\n            if (this.diff != null) {\n                return this.diff.newValue;\n            } else {\n                return this.geoObject.attributes[this.attribute.code];\n            }\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attribute.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        return val1 === val2;\n    }\n\n}\n","\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { ValueOverTimeDiff, SummaryKey } from \"@registry/model/crtable\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { LayerColor } from \"@registry/model/constants\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeTermType, ConflictMessage, Term } from \"@registry/model/registry\";\n\nexport class Layer {\n\n  oid: string;\n  isEditing: boolean;\n  isRendering: boolean;\n  color: LayerColor;\n  zindex: number;\n  geojson: any;\n  editPropagator: ValueOverTimeCREditor;\n\n}\n\n/*\n * This class exists purely for the purpose of storing what data to be rendered to the front-end. Any storage or submission of this data to the back-end must be translated\n * using the editor.\n */\nexport class VersionDiffView {\n\n  component: ManageVersionsComponent;\n  summaryKeyData: SummaryKey;\n  summaryKeyLocalized: string; // If we try to localize this in the html with a localize element then it won't update as frequently as we need so we're doing stuff manually here.\n  newLayer: Layer = null;\n  oldLayer: Layer = null;\n  coordinate?: any;\n  newCoordinateX?: any;\n  newCoordinateY? : any;\n  editor: ValueOverTimeCREditor;\n\n  // We must track our own value, so that they can be diffed when setting.\n  _value: any;\n\n  constructor(component: ManageVersionsComponent, editor: ValueOverTimeCREditor) {\n      this.component = component;\n      this.editor = editor;\n\n      this.populate(editor);\n      this.editor.onChangeSubject.subscribe(() => {\n          this.populate(this.editor);\n      });\n  }\n\n  populate(editor: ValueOverTimeCREditor) {\n      if (this.component.attributeType.type === \"local\" && this._value != null && this.editor.value != null) {\n          // The front-end glitches out if we swap to a new object. We have to update the existing object to be the same\n          LocalizedValue.populate(this._value, this.editor.value);\n      } else if (this.component.attributeType.code === \"_PARENT_\" && this._value != null && this.editor.value != null && this.editor.value.parents != null) {\n          for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n              let current = this.component.hierarchy.types[i];\n\n              this._value.parents[current.code].text = this.editor.value.parents[current.code].text;\n              this._value.parents[current.code].geoObject = this.editor.value.parents[current.code].geoObject;\n          }\n      } else if (this.component.attributeType.code === \"_PARENT_\") {\n          this._value = JSON.parse(JSON.stringify(this.editor.value));\n      } else {\n          this._value = this.convertValueForDisplay(this.editor.value == null ? null : JSON.parse(JSON.stringify(this.editor.value)));\n      }\n\n      if (this.component.attributeType.code === \"_PARENT_\") {\n          this._value.loading = {};\n      }\n\n      this.calculateSummaryKey();\n  }\n\n  set oid(oid: string) {\n      this.editor.oid = oid;\n  }\n\n  get oid(): string {\n      return this.editor.oid;\n  }\n\n  get startDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return this.editor.oldStartDate;\n      }\n\n      return this.editor.startDate;\n  }\n\n  set startDate(startDate: string) {\n      this.editor.startDate = startDate;\n      this.calculateSummaryKey();\n  }\n\n  set oldStartDate(oldStartDate: string) {\n      this.editor.oldStartDate = oldStartDate;\n  }\n\n  get oldStartDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newStartDate != null && this.editor.oldStartDate !== undefined) {\n          return this.convertDateForDisplay(this.editor.oldStartDate);\n      }\n\n      return null;\n  }\n\n  get endDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return this.editor.oldEndDate;\n      }\n\n      return this.editor.endDate;\n  }\n\n  set endDate(endDate: string) {\n      this.editor.endDate = endDate;\n      this.calculateSummaryKey();\n  }\n\n  set oldEndDate(oldEndDate: string) {\n      this.editor.oldEndDate = oldEndDate;\n  }\n\n  get oldEndDate(): string {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newEndDate != null && this.editor.oldEndDate !== undefined) {\n          return this.convertDateForDisplay(this.editor.oldEndDate);\n      }\n\n      return null;\n  }\n\n  get value(): any {\n      return this._value;\n  }\n\n  set value(value: any) {\n      this.editor.value = value;\n  }\n\n  set oldValue(oldValue: any) {\n      this.editor.oldValue = oldValue;\n  }\n\n  get oldValue(): any {\n      if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n          return null;\n      }\n\n      if (this.editor.diff != null && this.editor.diff.newValue != null && this.editor.oldValue !== undefined) {\n          return this.convertOldValueForDisplay(this.editor.oldValue);\n      }\n\n      return null;\n  }\n\n  convertDateForDisplay(date: string): string {\n      return (date == null || date.length === 0) ? null : this.component.dateService.formatDateForDisplay(date);\n  }\n\n  convertOldValueForDisplay(val: any): any {\n      if (this.component.attributeType.type === \"date\") {\n          return this.component.dateService.formatDateForDisplay(new Date(val));\n      } else if (this.component.attributeType.code === \"_PARENT_\" && val.includes(\"_~VST~_\")) {\n          let split = val.split(\"_~VST~_\");\n          // let parentTypeCode = split[0];\n          let parentCode = split[1];\n\n          return parentCode;\n      } else if (this.component.attributeType.type === \"term\") {\n          let code = val;\n          if (code instanceof Array) {\n              code = val[0];\n          }\n\n          let attrOpts = (this.component.attributeType as AttributeTermType).rootTerm.children;\n\n          let index = attrOpts.findIndex((term:Term) => term.code === code);\n\n          if (index !== -1) {\n              return attrOpts[index].label.localizedValue;\n          } else {\n              return val;\n          }\n      }\n\n      return val;\n  }\n\n  convertValueForDisplay(val: any): any {\n      if (val == null) {\n          return null;\n      }\n\n      return val;\n  }\n\n  calculateSummaryKey() {\n      if (this.editor.diff == null) {\n          this.summaryKey = SummaryKey.UNMODIFIED;\n          return;\n      }\n\n      if (this.editor.diff.action === \"CREATE\") {\n          this.summaryKey = SummaryKey.NEW;\n          return;\n      } else if (this.editor.diff.action === \"DELETE\") {\n          this.summaryKey = SummaryKey.DELETE;\n          return;\n      }\n\n      let hasTime = this.editor.diff.newStartDate != null || this.editor.diff.newEndDate != null;\n      let hasValue = Object.prototype.hasOwnProperty.call(this.editor.diff, \"newValue\");\n\n      if (hasTime && hasValue) {\n          this.summaryKey = SummaryKey.UPDATE;\n      } else if (hasTime) {\n          this.summaryKey = SummaryKey.TIME_CHANGE;\n      } else if (hasValue) {\n          this.summaryKey = SummaryKey.VALUE_CHANGE;\n      } else {\n          this.summaryKey = SummaryKey.UNMODIFIED;\n      }\n  }\n\n  set summaryKey(newKey: SummaryKey) {\n      this.summaryKeyData = newKey;\n      this.localizeSummaryKey();\n  }\n\n  get summaryKey(): SummaryKey {\n      return this.summaryKeyData;\n  }\n\n  private localizeSummaryKey(): void {\n      this.summaryKeyLocalized = this.component.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + this.summaryKeyData);\n  }\n\n  private conflictMessagesHasSeverity(severity: string) {\n      let has = false;\n\n      this.editor.conflictMessages.forEach(msg => {\n          if (msg.severity === severity) {\n              has = true;\n          }\n      });\n\n      return has;\n  }\n\n  hasError(): boolean {\n      return this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"ERROR\");\n  }\n\n  hasWarning(): boolean {\n      return !this.hasError() && this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"WARNING\");\n  }\n\n}\n","import { Input, Component, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectOverTime, GeoObjectType } from \"@registry/model/registry\";\nimport { AbstractAction } from \"@registry/model/crtable\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\n\nimport { AuthService } from \"@shared/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { ActionDetailComponent } from \"../action-detail-modal.component\";\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component({\n\n    selector: \"crtable-detail-create-geo-object\",\n    templateUrl: \"./detail.component.html\",\n    styleUrls: [\"./crtable-detail-create-geo-object.css\"],\n    encapsulation: ViewEncapsulation.None\n})\n// export class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\nexport class CreateUpdateGeoObjectDetailComponent implements ActionDetailComponent {\n\n    isMaintainer: boolean = false;\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    @Input() readOnly: boolean;\n\n    isEditing: boolean = false;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    constructor(private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService,\n        private authService: AuthService) {\n\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if (this.isNew()) {\n\n            this.preGeoObject = this.postGeoObject;\n\n        }\n\n        this.onSelect(this.action);\n\n    }\n\n    isNew(): boolean {\n\n        return (this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\");\n\n    }\n\n    handleDateChange(): void {\n\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n    }\n\n    applyAction() {\n\n        // var action = JSON.parse( JSON.stringify( this.action ) );\n        let action = this.action;\n\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if (this.geometryEditor != null) {\n\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n\n        }\n\n        /*\n        this.changeRequestService.applyAction(action).then(response => {\n\n            this.endEdit();\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n        */\n\n    }\n\n    onSelect(action: AbstractAction) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n\n            this.registryService.getGeoObjectOverTime(this.postGeoObject.attributes.code, this.geoObjectType.code).then(geoObject => {\n\n                this.preGeoObject = geoObject;\n\n            }).catch((err: HttpErrorResponse) => {\n\n                this.error(err);\n\n            });\n\n        }\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    // @HostListener( 'window:beforeunload' )\n    // canDeactivate(): Observable<boolean> | boolean {\n    //    if ( this.isEditing ) {\n    //        //event.preventDefault();\n    //        //event.returnValue = 'Are you sure?';\n    //        //return 'Are you sure?';\n//\n     //       return false;\n     //   }\n//\n    //    return true;\n    // }\n\n    // afterDeactivate( isDeactivating: boolean ) {\n    //    if ( isDeactivating && this.isEditing ) {\n    //        this.unlockActionSync();\n    //    }\n    // }\n\n    startEdit(): void {\n\n        //this.lockAction();\n\n    }\n\n    public endEdit(): void {\n\n        //this.unlockAction();\n\n    }\n/*\n    lockAction() {\n\n        this.changeRequestService.lockAction(this.action.oid).then(response => {\n\n            this.isEditing = true;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(true);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    unlockAction() {\n\n        this.changeRequestService.unlockAction(this.action.oid).then(response => {\n\n            this.isEditing = false;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(false);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n\n        $.ajax({\n            url: acp + \"/changerequest/unlockAction\",\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function(a) {\n\n            },\n            async: false\n        });\n\n    }\n*/\n    getUsername(): string {\n\n        return this.authService.getUsername();\n\n    }\n\n    public error(err: HttpErrorResponse): void {\n\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading text-center\">\n        <h1 class=\"action-detail-header\">{{action.actionLabel}}</h1>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <h4>\n        <localize key=\"io.geoObjectType\"></localize>: {{action.geoObjectType.code}}\n      </h4>\n    \n      <div style=\"margin: 20px 0;\">\n        <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\"></localize></span>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n\n<!--         <geoobject-shared-attribute-editor  -->\n<!--           #attributeEditor -->\n<!--           *ngIf=\"preGeoObject\" -->\n<!--           [readOnly]=\"!isEditing\"   -->\n<!--           [geoObjectType]=\"geoObjectType\" -->\n<!--           [postGeoObject]=\"postGeoObject\" -->\n<!--           [preGeoObject]=\"preGeoObject\" -->\n<!--           [forDate]=\"forDate\" -->\n<!--           [isGeometryInlined]=\"true\"> -->\n<!--         </geoobject-shared-attribute-editor> -->\n        \n        <geoobject-shared-attribute-editor \n            #attributeEditor\n            *ngIf=\"action\"\n            [readOnly]=\"readOnly\"  \n            [geoObjectType]=\"geoObjectType\"\n            [geoObjectData]=\"{'geoObject':postGeoObject, 'actions': [action]}\"\n            [forDate]=\"forDate\"\n            [readOnly]=\"false\"\n            [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\" [disabled]=\"!isEditing\"></textarea>\n        </div>\n\n        <div class=\"button-holder text-right\" style=\"margin:40px 0 20px 0;\">\n          <button *ngIf=\"!readOnly && !isEditing\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { TimeRangeEntry } from \"@registry/model/registry\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./geoobject-shared-attribute-editor.component\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\n\nexport interface DateBoundary { date: string; isStart: boolean; isEnd: boolean }\n\nexport interface TimelineEntry { width: number, x: number, period: TimeRangeEntry }\n\nexport interface DataTimeSpan {startDay: number, startDate: string, displayStartDate: string, endDay: number, endDate: string, displayEndDate: string, span: number}\n\n/*\n * This component is shared between:\n * -\n *\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\n@Component({\n    selector: \"stability-period\",\n    templateUrl: \"./stability-period.component.html\",\n    styleUrls: [\"./stability-period.component.css\"],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"1000ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"1000ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class StabilityPeriodComponent implements OnInit {\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    @Input() sharedAttributeEditor: GeoObjectSharedAttributeEditorComponent;\n\n    @Input() filterDate: string;\n\n    @Input() forDate: string;\n\n    @Input() context: string;\n\n    @Input() latestPeriodIsActive: boolean = false;\n\n    periods: TimeRangeEntry[] = [];\n\n    timelines: [TimelineEntry[]];\n\n    activeEntry: TimelineEntry = null;\n\n    forDateEntry: TimelineEntry = null;\n\n    private infinityDayPadding: number = 15;\n\n    dataTimeSpan: DataTimeSpan = null;\n\n    _showHint: boolean = false;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set showHint(val: boolean) {\n        this._showHint = val;\n\n        setTimeout(() => {\n            this.showHint = false;\n        }, 10000);\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public dateService: DateService) {}\n\n    ngOnInit(): void {\n        this.generate();\n\n        this.changeRequestEditor.onChangeSubject.subscribe(() => {\n            this.generate();\n        });\n\n        let timeline = this.timelines[0];\n        if (timeline && timeline.length > 1) {\n            if (this.filterDate != null) {\n                let index = timeline.findIndex(entry => this.dateService.between(this.filterDate, entry.period.startDate, entry.period.endDate));\n\n                if (index !== -1) {\n                    this.activeEntry = timeline[index];\n                }\n            } else if (this.latestPeriodIsActive) {\n                this.setActiveTimelineEntry(timeline[timeline.length - 1]);\n            }\n\n            if (this.forDate != null) {\n                let forDateIndex = timeline.findIndex(entry => this.dateService.between(this.forDate, entry.period.startDate, entry.period.endDate));\n\n                if (forDateIndex !== -1) {\n                    this.forDateEntry = timeline[forDateIndex];\n                }\n            }\n        }\n    }\n\n    navigateRelative(amount: number) {\n        let timeline: TimelineEntry[] = this.timelines[0];\n        if (timeline == null || timeline.length === 0) { return; }\n\n        if (this.activeEntry == null) {\n            this.setActiveTimelineEntry(timeline[0]);\n            return;\n        }\n\n        let index = timeline.findIndex(entry => entry.period.startDate === this.activeEntry.period.startDate);\n\n        if (index !== -1) {\n            let nextIndex = index + amount;\n\n            if (nextIndex < 0) {\n                nextIndex = timeline.length - 1;\n            } else if (nextIndex >= timeline.length) {\n                nextIndex = 0;\n            }\n\n            this.setActiveTimelineEntry(timeline[nextIndex]);\n        }\n    }\n\n    setActiveTimelineEntry(entry: TimelineEntry, refresh: boolean = true) {\n        if (this.periods.length <= 1) {\n            entry = null;\n        }\n\n        if (this.activeEntry && entry && entry.period.startDate === this.activeEntry.period.startDate) {\n            entry = null;\n        }\n\n        this.activeEntry = entry;\n        this.sharedAttributeEditor.setFilterDate(entry == null ? null : entry.period.startDate, refresh);\n    }\n\n    generate() {\n        this.generatePeriods();\n        this.generateTimelines();\n    }\n\n    calculateDataTimeSpan(): void {\n        let startDate: string = null;\n        let endDate: string = null;\n        let endDay: number = null;\n        let startDay: number = null;\n\n        if (this.periods.length > 0) {\n            startDate = this.periods[0].startDate;\n            endDate = this.periods[this.periods.length - 1].endDate;\n\n            startDay = this.dateService.getDateFromDateString(startDate).getTime() / (1000 * 60 * 60 * 24);\n\n            if (endDate === \"5000-12-31\") {\n                if (this.periods.length > 1) {\n                    endDay = this.dateService.getDateFromDateString(this.periods[this.periods.length - 1].startDate).getTime() / (1000 * 60 * 60 * 24);\n                    this.infinityDayPadding = (endDay - startDay) * 0.05;\n                    endDay = this.infinityDayPadding + endDay;\n                } else {\n                    endDay = startDay + this.infinityDayPadding;\n                }\n            } else {\n                endDay = this.dateService.getDateFromDateString(endDate).getTime() / (1000 * 60 * 60 * 24);\n            }\n        }\n\n        this.dataTimeSpan = { startDay: startDay, startDate: startDate, displayStartDate: this.dateService.formatDateForDisplay(startDate), endDay: endDay, endDate: endDate, displayEndDate: this.dateService.formatDateForDisplay(endDate), span: (endDay - startDay) };\n    }\n\n    generateTimelines() {\n        this.timelines = [] as any;\n\n        if (this.periods.length === 0) {\n            return;\n        } else if (this.periods.length === 1) {\n            this.setActiveTimelineEntry(null, false);\n        }\n\n        this.calculateDataTimeSpan();\n\n        let currentTimeline: any = [];\n        this.timelines.push(currentTimeline);\n        let daysLeft = this.dataTimeSpan.span;\n\n        let len = this.periods.length;\n        for (let i = 0; i < len; ++i) {\n            let period = this.periods[i];\n\n            let start: Date = this.dateService.getDateFromDateString(period.startDate);\n            let end: Date = this.dateService.getDateFromDateString(period.endDate);\n\n            let startDay = start.getTime() / (1000 * 60 * 60 * 24);\n            let endDay = end.getTime() / (1000 * 60 * 60 * 24);\n            if (period.endDate === \"5000-12-31\") {\n                endDay = startDay + this.infinityDayPadding;\n            }\n\n            let daysInPeriod: number = (endDay - startDay);\n            if (daysLeft - daysInPeriod < 0) {\n                let daysInFirstEntry = daysLeft;\n                let timelineEntry1: TimelineEntry = { width: (daysInFirstEntry / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry1);\n\n                currentTimeline = [];\n                this.timelines.push(currentTimeline);\n                daysLeft = this.dataTimeSpan.span;\n\n                let timelineEntry2: TimelineEntry = { width: ((daysInPeriod - daysInFirstEntry) / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry2);\n            } else {\n                let timelineEntry: TimelineEntry = { width: (daysInPeriod / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry);\n                daysLeft = daysLeft - daysInPeriod;\n\n                if (daysLeft === 0) {\n                    currentTimeline = [];\n                    this.timelines.push(currentTimeline);\n                    daysLeft = this.dataTimeSpan.span;\n                }\n            }\n        }\n\n        // console.log(this.timelines);\n    }\n\n    generatePeriods() {\n        let boundaries: DateBoundary[] = [];\n\n        // Create an array which contains all the unique start and end dates\n        let editors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] = this.changeRequestEditor.getEditors();\n        let len = editors.length;\n\n        for (let i = 0; i < len; ++i) {\n            if (editors[i] instanceof ChangeRequestChangeOverTimeAttributeEditor) {\n                let editor: ChangeRequestChangeOverTimeAttributeEditor = editors[i] as ChangeRequestChangeOverTimeAttributeEditor;\n                let values = editor.getEditors();\n\n                let valLen = values.length;\n                for (let j = 0; j < valLen; ++j) {\n                    let period: ValueOverTimeCREditor = values[j];\n\n                    if (period.startDate != null && period.endDate != null && !period.isDelete()) {\n                        let startIndex = boundaries.findIndex(boundary => period.startDate === boundary.date);\n                        if (startIndex !== -1) {\n                            boundaries[startIndex].isStart = true;\n                        } else {\n                            boundaries.push({ date: period.startDate, isStart: true, isEnd: false });\n                        }\n\n                        let endIndex = boundaries.findIndex(boundary => period.endDate === boundary.date);\n                        if (endIndex !== -1) {\n                            boundaries[endIndex].isEnd = true;\n                        } else {\n                            boundaries.push({ date: period.endDate, isStart: false, isEnd: true });\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sort the date boundaries\n        boundaries.sort(function(a, b) {\n            if (a.date == null || a.date === \"\") {\n                return 1;\n            } else if (b.date == null || b.date === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.date);\n            let next: any = new Date(b.date);\n            return first - next;\n        });\n\n        // Loop over the boundaries and create versions between all the boundaries, but only if there is data between them\n        this.periods = [];\n        let dlen = boundaries.length;\n        for (let i = 0; i < dlen; ++i) {\n            let current: DateBoundary = boundaries[i];\n            let next: DateBoundary = i + 1 > dlen ? null : boundaries[i + 1];\n\n            if (current.isStart && current.isEnd) {\n                this.periods.push({ startDate: current.date, endDate: current.date });\n            }\n            if (current.isEnd && (next != null && next.isStart && this.dateService.addDay(1, current.date) === next.date)) {\n                continue;\n            }\n\n            let startDate = (current.isEnd ? this.dateService.addDay(1, current.date) : current.date);\n\n            if (next != null && this.changeRequestEditor.existsAtDate(startDate)) {\n                let endDate = (!next.isStart ? next.date : this.dateService.addDay(-1, next.date));\n\n                this.periods.push({ startDate: startDate, endDate: endDate });\n            }\n        }\n\n        this.dateService.sort(this.periods);\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div *ngIf=\"dataTimeSpan\" style=\"margin-bottom:10px;\">\n    <span style=\"margin-left:20px;\">\n      <localize key=\"manage.versions.historyTitle\"></localize>\n      \n      <span>\n        <a *ngIf=\"activeEntry\" (click)=\"setActiveTimelineEntry(null)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewAll\"></localize>)</a>\n        <div [@fadeInOut] *ngIf=\"_showHint\" id=\"time-hint\">\n            <localize key=\"changeovertime.manageVersions.time.hint.message\"></localize>\n        </div>\n        \n        <a *ngIf=\"!activeEntry && forDate && context === 'LIST'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewListPeriod\"></localize>)</a>\n        <a *ngIf=\"!activeEntry && forDate && context === 'EXPLORER'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewExplorerPeriod\"></localize>)</a>\n        <span *ngIf=\"!activeEntry && !forDate\" class=\"view-all\">\n          (<localize key=\"manage.versions.history.viewingAll\"></localize>)\n        </span>\n      </span>\n\n    </span>\n    <span style=\"float:right;color:#6ba542;margin-right:20px;\">\n      <ng-container *ngIf=\"activeEntry\">\n\t\t      {{activeEntry.period.startDate}}\n\t\t      -\n\t\t      {{dateService.formatDateForDisplay(activeEntry.period.endDate)}}\n      </ng-container>\n      <ng-container *ngIf=\"!activeEntry\">\n          {{dataTimeSpan.displayStartDate}}\n          -\n          {{dataTimeSpan.displayEndDate}}\n      </ng-container>\n    </span>\n\t  \n    <div style=\"padding: 0 20px;\">\n        <div *ngFor=\"let timeline of timelines\" class=\"timeline\">\n\t      <a *ngFor=\"let entry of timeline\" class=\"timeline-entry\" [ngClass]=\"{'active-timeline-entry': this.activeEntry == null || (this.activeEntry != null && entry.period.startDate === this.activeEntry.period.startDate), 'not-clickable': periods.length <= 1}\" (click)=\"setActiveTimelineEntry(entry)\" [ngStyle]=\"{'width': entry.width + '%', 'left': entry.x + '%'}\">\n\t      </a>\n\t    </div>\n        \n        <div class=\"timeline-nav-btn-wrapper\">\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(-1)\" style=\"\"><i class=\"fa fa-chevron-left \"></i></a>\n<!--           </div> -->\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(1)\" style=\"\"><i class=\"fa fa-chevron-right \"></i></a> \n<!--           </div> -->\n        </div>\n    </div>\n\n<!-- \t  <div *ngIf=\"periods.length > 1\" class=\"navigation-controls\" style=\"padding-top:5px;\"> -->\n<!-- \t    <a (click)=\"navigateRelative(-1)\" style=\"float:left;\"><i class=\"fa fa-chevron-left\"></i></a> -->\n<!-- \t    <a (click)=\"navigateRelative(1)\" style=\"float:right;\"><i class=\"fa fa-chevron-right\"></i></a> -->\n<!-- \t  </div> -->\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\n\n@Component({\n    selector: \"standard-attribute-editor\",\n    templateUrl: \"./standard-attribute-editor.component.html\",\n    styleUrls: [\"./standard-attribute-editor.component.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class StandardAttributeEditorComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    message: string = null;\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObject: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    view: {\n        summaryKey: SummaryKey;\n        summaryKeyLocalized: string;\n        oldValue?: any;\n        value: any;\n        attributeCode: string;\n    };\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: StandardAttributeCRModel;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, null) as StandardAttributeCRModel;\n        this.calculateView();\n    }\n\n    ngAfterViewInit() {\n    }\n\n    calculateView(): void {\n        let diff = this.changeRequestAttributeEditor.diff;\n\n        if (diff != null) {\n            let newVal = diff.newValue == null ? null : JSON.parse(JSON.stringify(diff.newValue));\n            this.view = {\n                value: newVal,\n                summaryKey: SummaryKey.VALUE_CHANGE,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.VALUE_CHANGE),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n\n            if (diff.oldValue !== null && diff.oldValue !== undefined) {\n                this.view.oldValue = JSON.parse(JSON.stringify(diff.oldValue));\n            }\n        } else {\n            this.view = {\n                value: this.changeRequestAttributeEditor.value,\n                summaryKey: SummaryKey.UNMODIFIED,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.UNMODIFIED),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n        }\n    }\n\n    onValueChange(): void {\n        this.calculateView();\n    }\n\n    onApprove(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.PENDING).then(results => {\n            editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div @fadeInOut class=\"value-box\">\n    <div *ngIf=\"view\" class=\"value-box-wrapper\" [ngClass]=\"{'warning' : view.summaryKey && view.summaryKey !== 'UNMODIFIED'}\" >\n      <div *ngIf=\"view.summaryKey && view.summaryKey !== 'UNMODIFIED'\" class=\"value-box-indicator\">\n        {{view.summaryKeyLocalized}}\n      </div>\n      \n      <div class=\"inner-value\">\n        <div *ngIf=\"attributeType.type === 'boolean'\">\n          <div>\n\t          <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? view.value === false : (view.value === true)\" [value]=\"view.attributeCode === 'invalid' ? false : true\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-true\" name=\"mod-{{geoObjectType.code}}-true\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize></span>\n\t          </label> \n\t          <label class=\"radio radio-inline\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? changeRequestAttributeEditor.value === true : changeRequestAttributeEditor.value === false\" [value]=\"view.attributeCode === 'invalid' ? true : false\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-false\" name=\"mod-{{geoObjectType.code}}-false\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize></span>\n\t          </label>\n\t        </div>\n        </div>\n        \n        <div *ngIf=\"(view.oldValue !== null && view.oldValue !== undefined) && !isNew\">\n          <p style=\"color: var(--theme-text-dark);\" class=\"warning-text display-current-value\">\n            <localize key=\"change.request.changed.value.prefix\"></localize>&nbsp;\n            \n            <span *ngIf=\"attributeType.type === 'boolean'\">\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === false) : (view.oldValue === true)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize>\n\t            </span>\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === true) : (view.oldValue === false)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize>\n\t            </span>\n            </span>\n            \n            <span *ngIf=\"attributeType.type !== 'boolean'\">\n                {{ view.oldValue }}\n            </span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  <!-- TODO : This code copy/pasted from manage-versions.component.html -->\n  <div *ngIf=\"changeRequest && !changeRequest.isNew\" class=\"cr-maintainer-options\">\n    <div *ngIf=\"changeRequest.approvalStatus === 'PENDING' && changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.editAction && changeRequestAttributeEditor.diff\">\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n        <localize key=\"change.request.accept.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n        <localize key=\"change.request.reject.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n        <localize key=\"change.request.pending.btn\"></localize>\n      </button>\n    </div>              \n    <div *ngIf=\"changeRequest.approvalStatus !== 'PENDING'\">\n      <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n          <localize key=\"change.request.status.accepted\"></localize>\n      </strong>\n      <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n          <localize key=\"change.request.status.rejected\"></localize>\n      </strong>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, OnDestroy, Input } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService, MapService, GeometryService } from \"@registry/service\";\n\nimport { Map, NavigationControl } from \"mapbox-gl\";\n\n// eslint-disable-next-line no-unused-vars\ndeclare let acp: string;\n\n@Component({\n    selector: \"geoobject-editor-map[geometryType]\",\n    templateUrl: \"./geoobject-editor-map.component.html\",\n    styleUrls: [\"./geoobject-editor-map.component.css\"]\n})\n\n/**\n * This component is used when viewing change requests\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    _mapHeight: number = 400;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set mapHeight(height: number) {\n        if (height > 400) {\n            this._mapHeight = height;\n        }\n    }\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mapDiv\") mapDiv;\n\n    map: Map;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private geomService: GeometryService, private registryService: RegistryService, private mapService: MapService) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.mapDiv.nativeElement.id = Math.floor(Math.random() * (899999)) + 100000;\n\n            this.map = new Map({\n                container: this.mapDiv.nativeElement.id,\n                style: \"mapbox://styles/mapbox/satellite-v9\",\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            });\n\n            this.map.on(\"load\", () => {\n                this.initMap();\n            });\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    getIsValid(): boolean {\n        return this.geomService.isValid();\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            // this.addLayers();\n            // this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n        });\n\n        this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl());\n\n        this.zoomToBbox();\n    }\n\n    zoomToBbox(): void {\n        this.geomService.zoomToLayersExtent();\n    }\n\n    public error(err: HttpErrorResponse): void {\n        // TODO\n        console.log(\"ERROR\", err);\n    }\n\n}\n","<div class=\"geoobject-editor-map-wrapper\">\n  <div #mapDiv class=\"map-view-port-inline text-left\" [style.height.px]=\"_mapHeight\" style=\"width:calc(100% - 15px)\"></div>\n</div>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: \"simple-edit-control\",\n    templateUrl: \"./simple-edit-control.component.html\",\n    styleUrls: [\"./simple-edit-control.css\"]\n})\nexport class SimpleEditControl {\n\n    elRef: ElementRef\n\n    @Output() editEmitter = new EventEmitter<void>();\n\n    @Input() visible: boolean = true;\n    @Input() editSessionEnabled: boolean = false;\n    @Input() save: boolean = false;\n\n    constructor(elRef: ElementRef) {\n        this.elRef = elRef;\n    }\n\n    onAdd(map): any {\n        return this.elRef.nativeElement;\n    }\n\n    onRemove(map): void {\n        this.elRef.nativeElement.remove();\n    }\n\n    onClick(): void {\n        this.editEmitter.emit();\n    }\n}\n","<div (click)=\"this.onClick();\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button *ngIf=\"editSessionEnabled\" \n    class=\"fa\" \n    [ngClass]=\"{'fa-pencil-square-o':!save, 'fa-save':save}\" \n    style=\"color: black; font-size: 18px;\" \n    [title]=\"'changeovertime.manageVersions.button.label' | localize\" \n    >\n  </button>\n  <div *ngIf=\"editSessionEnabled\" class=\"map-button-info-hint-wrapper\">\n    <div class=\"map-button-info-hint\">\n      <localize key=\"map.button.info.hint\"></localize>\n    </div>\n    <div class=\"map-button-pointer\"></div>\n  </div>\n</div>","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\n@Component({\n\n    selector: \"cascading-geo-selector\",\n    templateUrl: \"./cascading-geo-selector.html\"\n})\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mainForm\") mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() customEvent: boolean = false;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach(hierarchy => {\n            const object = {};\n            object[\"label\"] = hierarchy.label;\n            object[\"code\"] = hierarchy.code;\n\n            this.isValid = this.isValid && (this.hierarchies.length > 0);\n\n            hierarchy.entries.forEach(pot => {\n                const startDate = Date.parse(pot.startDate);\n                const endDate = Date.parse(pot.endDate);\n\n                if (time >= startDate && time <= endDate) {\n                    let parents = [];\n\n                    hierarchy.types.forEach(type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if (pot.parents[type.code] != null) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push(parent);\n                    });\n\n                    object[\"parents\"] = parents;\n                }\n            });\n\n            this.cHierarchies.push(object);\n        });\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions(code: string): void {\n        const hierarchy = this.hierarchies.find(h => h.code === code);\n\n        if (this.customEvent) {\n            this.onManageVersion.emit(hierarchy);\n        } else {\n/*\n            this.bsModalRef = this.modalService.show(ManageParentVersionsModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            });\n            this.bsModalRef.content.init(hierarchy);\n            this.bsModalRef.content.onVersionChange.subscribe(hierarchy => {\n                this.calculate();\n            });\n            */\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\" *ngIf=\"!readOnly\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, Input, EventEmitter, Output, SimpleChanges } from \"@angular/core\";\nimport { IActionMapping, ITreeOptions } from \"@circlon/angular-tree-component\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\n\n@Component({\n\n    selector: \"tree-geo-selector\",\n    templateUrl: \"./tree-geo-selector.html\",\n    styleUrls: [\"./tree-geo-selector.css\"]\n})\nexport class TreeGeoSelector {\n\n    @Input() hierarchy: HierarchyOverTime;\n\n    @Input() readOnly: boolean = false;\n\n    @Input() forDate: Date = null;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    nodes: any[] = [];\n\n    actionMapping: IActionMapping = {\n        mouse: {\n            click: null\n        }\n    }\n\n    options: ITreeOptions = {\n        displayField: \"name\",\n        isExpandedField: \"expanded\",\n        idField: \"code\",\n        actionMapping: this.actionMapping\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        let time = null;\n\n        if (this.forDate != null) {\n            time = this.forDate.getTime();\n        }\n\n        let nodes = [];\n        let current = null;\n\n        this.hierarchy.entries.forEach(pot => {\n            const startDate = Date.parse(pot.startDate);\n            const endDate = Date.parse(pot.endDate);\n\n            // eslint-disable-next-line no-mixed-operators\n            if (time == null || time >= startDate && time <= endDate) {\n                this.hierarchy.types.forEach(type => {\n                    let node: any = {\n                        code: type.code,\n                        label: type.label,\n                        children: [],\n                        expanded: false\n                    };\n\n                    if (pot.parents[type.code] != null) {\n                        node.name = pot.parents[type.code].text;\n\n                        if (time == null) {\n                            node.name = node.name + \" (\" + pot.startDate + \" -> \" + pot.endDate + \")\";\n                        }\n\n                        node.geoObject = pot.parents[type.code].geoObject;\n                    }\n\n                    if (current == null) {\n                        nodes.push(node);\n                    } else {\n                        current.children.push(node);\n                        current.expanded = true;\n                    }\n\n                    current = node;\n                });\n            }\n\n            current = null;\n        });\n\n        this.nodes = nodes;\n    }\n\n    onEdit(): void {\n        this.onManageVersion.emit(this.hierarchy);\n    }\n\n}\n","<div>\n\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 style=\"margin: 0;\">{{hierarchy.label}}</h4>\n    </div>\n    <div class=\"panel-body\">\n\n<!--       <div class=\"input-group\"> -->\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\" >\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n<!--         <span *ngIf=\"!readOnly\" class=\"input-group-addon\">  -->\n<!--           <i class=\"fa fa-pencil clickable\" (click)=\"onEdit()\" aria-hidden=\"true\"></i> -->\n<!--         </span> -->\n<!--       </div> -->\n      \n      <button class=\"btn btn-primary\" style=\"width:100%;margin-top:10px;\" *ngIf=\"!readOnly\" (click)=\"onEdit()\"><localize key=\"modal.button.edit\"></localize></button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component({\n    selector: \"action-detail-modal\",\n    templateUrl: \"./action-detail-modal.component.html\",\n    styleUrls: []\n})\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    readonly: boolean;\n\n    @ViewChild(\"cuDetail\") cuDetail: ActionDetailComponent;\n    @ViewChild(\"arDetail\") arDetail: ActionDetailComponent;\n    @ViewChild(\"spDetail\") spDetail: ActionDetailComponent;\n\n    @Input()\n    curAction(action: any, readonly: boolean) {\n        this.action = action;\n        this.readonly = readonly;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if (this.cuDetail != null) {\n            this.cuDetail.endEdit();\n        }\n\n        if (this.arDetail != null) {\n            this.arDetail.endEdit();\n        }\n\n        if (this.spDetail != null) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { IOService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"data-export\",\n    templateUrl: \"./data-export.component.html\",\n    styleUrls: []\n})\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService, private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes(true).then(types => {\n            // this.types = types;\n\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                if (this.authService.isOrganizationRA(types[i].orgCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.types = myOrgTypes;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onChange(code: string): void {\n        if (code != null && code.length > 0) {\n            this.service.getHierarchiesForType(code, false).then(hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n    }\n\n    onExport(): void {\n        if (this.format === \"SHAPEFILE\") {\n            window.location.href = acp + \"/shapefile/export-shapefile?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        } else if (this.format === \"EXCEL\") {\n            window.location.href = acp + \"/excel/export-spreadsheet?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, PRESENT } from \"@registry/model/registry\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport * as moment from \"moment\";\n\n@Component({\n    selector: \"geometry-panel\",\n    templateUrl: \"./geometry-panel.component.html\",\n    styleUrls: [\"./geometry-panel.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeometryPanelComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n\n    isVersionForHighlight: number;\n\n    message: string = null;\n\n    readonly: boolean = false;\n\n    hasConflict: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Output() onCloneGeometry = new EventEmitter<any>();\n\n    @Output() onEdit = new EventEmitter<ValueOverTime>();\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    geoObjectOverTime: GeoObjectOverTime;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set geoObjectOverTimeInput(value: GeoObjectOverTime) {\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value));\n        this.geoObjectOverTime = value;\n    }\n\n    @Input() isNewGeoObject: boolean = false;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public changeDetectorRef: ChangeDetectorRef, private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    onDateChange(): any {\n        this.hasConflict = false;\n\n        this.isValid = this.checkDateFieldValidity();\n\n        let vAttributes = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        this.hasConflict = this.dateService.checkRanges(null, vAttributes);\n    }\n\n    edit(vot: ValueOverTime, isVersionForHighlight: number): void {\n        this.onEdit.emit(vot);\n\n        this.isVersionForHighlight = isVersionForHighlight;\n    }\n\n    onAddNewVersion(geometry: ValueOverTime): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null; // Utils.formatDateString(new Date());\n        vot.endDate = null; // Utils.formatDateString(new Date());\n\n        if (geometry && geometry.value) {\n            vot.value = geometry.value;\n        } else {\n            vot.value = { type: this.geoObjectType.geometryType, coordinates: [] };\n        }\n\n        if (this.geoObjectType.geometryType === \"MULTIPOLYGON\") {\n            vot.value.type = \"MultiPolygon\";\n        } else if (this.geoObjectType.geometryType === \"POLYGON\") {\n            vot.value.type = \"Polygon\";\n        } else if (this.geoObjectType.geometryType === \"POINT\") {\n            vot.value.type = \"Point\";\n        } else if (this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            vot.value.type = \"MultiPoint\";\n        } else if (this.geoObjectType.geometryType === \"LINE\") {\n            vot.value.type = \"Line\";\n        } else if (this.geoObjectType.geometryType === \"MULTILINE\") {\n            vot.value.type = \"MultiLine\";\n        }\n\n        votArr.push(vot);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    setDateAttribute(vot: ValueOverTime, val: string): void {\n        vot.value = new Date(val).getTime().toString();\n    }\n\n    remove(version: any): void {\n        let val = this.geoObjectOverTime.attributes[\"geometry\"];\n\n        let position = -1;\n        for (let i = 0; i < val.values.length; i++) {\n            let vals = val.values[i];\n\n            if (vals.startDate === version.startDate) {\n                position = i;\n            }\n        }\n\n        if (position > -1) {\n            val.values.splice(position, 1);\n        }\n    }\n\n    formatDate(date: string) {\n        let localeData = moment.localeData(date);\n        let format = localeData.longDateFormat(\"L\");\n        return moment().format(format);\n    }\n\n    setInfinity(vAttribute, attributes): void {\n        if (vAttribute.endDate === PRESENT) {\n            vAttribute.endDate = new Date();\n        } else {\n            vAttribute.endDate = PRESENT;\n        }\n\n        this.onDateChange();\n    }\n\n    sort(votArr: ValueOverTime[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    onCloneGeometryToNewVersion(geometry: ValueOverTime): void {\n        this.onAddNewVersion(geometry);\n    }\n\n    onSubmit(): void {\n        this.onChange.emit(this.geoObjectOverTime);\n    }\n\n    onCancel(): void {\n        this.onChange.emit(this.originalGeoObjectOverTime);\n    }\n\n}\n","<div>\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #versionsform=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"col-md-12\">\n          <div class=\"attribute-version-wrapper\" *ngIf=\"geoObjectOverTime\">\n\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                    <table class=\"table table-striped\">\n\n                      <tbody class=\"attribute-element-wrapper\">\n                        <p class=\"message\" *ngIf=\"geoObjectOverTime.attributes['geometry'].values.length === 0\">\n                          <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize>\n                        </p>\n\n                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\" [ngClass]=\"{'error-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'ERROR', 'warning-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'WARNING'}\">\n                          <td [ngClass]=\"{'active' : i === isVersionForHighlight}\">\n                            <table>\n                              <tr class=\"attribute-value-row\" *ngIf=\"geoObjectType.isGeometryEditable\">\n                                <td colspan=\"2\">\n                                  <button class=\"btn btn-primary\" (click)=\"edit(vAttribute, i)\" role=\"button\">\n                                    <localize key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                  </button>\n                                  <button type=\"submit\" (click)=\"onCloneGeometryToNewVersion(vAttribute)\" class=\"btn btn-default\" role=\"button\">\n                                      <localize key=\"changeovertime.manageVersions.copy.geometry.button\"></localize>\n                                    </button>\n                                </td>\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5> \n                                  \n                                  <date-field #dateFieldComponents [(value)]=\"vAttribute.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" ></date-field>\n                                  \n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                      <h5>\n                                        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                      </h5>\n                                      \n                                      <date-field #dateFieldComponents [(value)]=\"vAttribute.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" [placement]=\"'bottom'\"></date-field>\n                                      \n                                    </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0\">\n<!--                                   <p class=\"error-message\"> -->\n<!--                                     <localize key=\"manage.versions.overlap.message\"></localize> -->\n<!--                                   </p> -->\n                                  <p *ngFor=\"let msg of vAttribute.conflictMessage\" [ngClass]=\"{'error-message': msg.type === 'ERROR', 'warning-message': msg.type === 'WARNING'}\">\n                                    {{msg.message}}\n                                  </p>\n                              </tr>    \n                            </table>\n                          </td>\n                          <td style=\"vertical-align: middle;\" class=\"manage-version-button clickable\" [title]=\"'changeovertime.manageVersions.remove.version' | localize\" (click)=\"remove(vAttribute)\">\n                            <i class=\"fa fa-times\"></i>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </li>\n\n                  <li class=\"list-group-item\" style=\"text-align: left;\">\n                    <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion(null)\"> <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                    </i>\n                  </li>\n                </ul>\n              </div>\n        </div>\n\n      </div>\n\n      <div class=\"row-holder\">\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"holder\" style=\"border: none; width: 100%;\">\n          <div class=\"button-holder pull-right\">\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n              <localize key=\"io.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || !versionsform.valid\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\n@Pipe({\n    name: \"geoobjecttype\",\n    pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n\n    transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        let unassignedGeoObjTypes: string[] = [];\n        this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n\n        // filter items array, items which match and return true will be\n        // kept, false will be filtered out\n        return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n    }\n\n    buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void {\n        filter.forEach(f => {\n            this.processHierarchyNodes(f, unassignedGeoObjTypes);\n        })\n    }\n\n    processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]) {\n        unassignedGeoObjTypes.push(node.geoObjectType)\n\n        node.children.forEach(child => {\n            this.processHierarchyNodes(child, unassignedGeoObjTypes);\n        })\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"geoObjectAttributeExcludesFilter\",\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"toEpochDateTime\",\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n\n    transform(date: string): any {\n        if (!date) {\n            return date;\n        }\n\n        return new Date(date).getTime();\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { MasterListManagerComponent } from \"./component/master-list/master-list-manager.component\";\nimport { MasterListComponent } from \"./component/master-list/master-list.component\";\nimport { MasterListViewComponent } from \"./component/master-list/master-list-view.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { DatasetLocationManagerComponent } from \"./component/location-manager/dataset-location-manager.component\";\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from \"../shared/service/guard.service\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"hierarchies\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"data\",\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-requests\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"change-requests/:oid\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"master-lists\",\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"scheduled-jobs\",\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"job/:oid\",\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"master-list/:oid/:published\",\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"master-list-view/:oid\",\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"change-request\",\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"tasks\",\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"synchronization-configs\",\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"synchronization-config/:oid\",\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager/:geoobjectuid/:geoobjecttypecode/:datestr/:hideSearchOptions\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager/:geoobjectuid/:geoobjecttypecode/:datestr/:hideSearchOptions/:backReference\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code/:editOnly\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code/:editOnly/:backReference\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'sync/details/:config/:oid',\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"historical-events\",\n        component: HistoricalEventModuleComponent,\n        canActivate: [ContributerGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n})\nexport class RegistryRoutingModule { }\n"],"sourceRoot":""}