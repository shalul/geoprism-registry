{"version":3,"sources":["webpack:///./src/app/registry/registry.module.ts","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.html","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.ts","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.html","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","AddRemoveChildDetailComponent","SetParentDetailComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","ManageVersionsModalComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","ManageParentVersionsModalComponent","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","LocationManagerComponent","ContextLayerModalComponent","services","PRESENT","TreeEntity","code","label","description","children","this","addChild","term","push","Term","GeoObject","attributes","GeoObjectType","Task","geoObjectType","getVotAtDate","date","attrCode","lService","retVot","startDate","endDate","value","time","getTime","i","attr","type","create","isChangeOverTime","values","forEach","vot","Date","parse","JSON","stringify","Array","isArray","length","GeoObjectOverTime","ValueOverTime","isDefault","required","unique","Attribute","isChange","rootTerm","termOptions","setRootTerm","AttributeTerm","precision","scale","AttributeDecimal","GeoObjectTypeModalStates","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","PaginationPage","AbstractScheduledJob","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","MasterList","MasterListVersion","HierarchyOverTime","ImportStrategy","MasterListByOrg","SynchronizationConfig","OrgSyncInfo","ExportScheduledJob","ContextLayer","ContextLayerGroup","ImportSheet","Location","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","http","eventService","getHierarchyTypes","types","params","HttpParams","set","get","acp","toPromise","addChildToHierarchy","hierarchyCode","parentGeoObjectTypeCode","childGeoObjectTypeCode","headers","HttpHeaders","start","post","pipe","finalize","complete","removeFromHierarchy","createHierarchyType","htJSON","updateHierarchyType","deleteHierarchyType","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","EventEmitter","message","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","attribute","animate","onAnimationDone","event","isValid","indexOf","localeValues","console","log","toString","trigger","style","transition","service","iService","bsModalRef","authService","readonly","edit","isNew","onMasterListChange","master","listGeoObjectTypes","then","myOrgTypes","isGeoObjectTypeRM","orgCode","catch","err","error","oid","typeCode","displayLabel","representativityDate","publishDate","listAbstract","process","progress","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","hierarchies","leaf","frequency","isMaster","visibility","init","org","getIsDisabled","elClasses","target","classList","onChange","getHierarchiesForType","onSubmit","createMasterList","response","hide","onCancel","ErrorHandler","getMessageFromError","key","disabled","valueChange","modalService","changeDetectorRef","registryService","elRef","changeRequestService","datePipe","toEpochDateTimePipe","preGeoObject","calculatedPreObject","postGeoObject","calculatedPostObject","attributeExcludes","forDate","readOnly","isEditingGeometries","isGeometryInlined","valid","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","apply","geomAttr","geometry","LocalizedValue","calculate","attributeForm","statusChanges","subscribe","result","emit","changes","calculateCurrent","geometryEditor","reload","goot","object","formatDate","localize","handleChangeCode","e","onManageAttributeVersions","show","animated","backdrop","ignoreBackdropClick","content","geoObjectOverTime","isNewGeoObject","onAttributeVersionChange","versionObj","tfInit","onManageGeometryVersions","isDifferentText","trim","isDifferentValue","onSelectPropertyOption","option","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attrOpts","removeStatuses","isStatusChanged","pre","preCompare","postCompare","getTypeDefinition","getIsValid","getGeoObject","getAllActions","requestId","applyAction","action","applyActionStatusProperties","lockAction","actionId","unlockAction","getAllRequests","filter","getRequestDetails","confirmChangeRequest","execute","rejectAllActions","actions","approveAllActions","submitChangeRequest","importSpreadsheet","configuration","json","cancelImport","importShapefile","includeLeafTypes","getTypeAncestors","includeInheritedTypes","includeTypes","getGeoObjectSuggestions","text","parent","hierarchy","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","data","deleteTermSynonym","createTerm","parentTermCode","termJSON","removeTerm","termCode","getNewLocaleInfo","installLocale","language","country","variant","mapboxgl","accessToken","roots","select","childTypeCode","getGeoObjectTypes","getParentGeoObjects","childId","parentTypes","recursive","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","addAttributeType","geoObjTypeId","updateAttributeType","deleteAttributeType","attributeName","addAttributeTermTypeOption","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","id","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","pageSize","pageNumber","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","getExportDetails","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","versionType","getAllMasterListVersions","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","list","createMasterListVersion","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","parentTreeNode","geoObject","masterListId","notes","sort","valueAttribute","publishShapefile","getMasterListsByOrg","getPublishMasterListJobs","getOrganizations","getPage","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","hierarchyTypeCode","remove","unlock","run","getJobs","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","status","configurationChange","stateChange","onNext","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","name","exclusion","termProblems","attributeCode","geometryChange","onClickEdit","setTimeout","mapDiv","nativeElement","Math","floor","random","map","Map","container","zoom","center","on","initMap","onValidChange","removeLayers","addLayers","editingControl","getAll","features","saveDraw","preGeometry","zoomToBbox","addControl","NavigationControl","addEditButton","enableEditing","simpleEditControl","editEmitter","geometryType","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","postGeometry","add","removeSource","prefix","sourceName","removeLayer","getSource","renderGeometryAsLayer","color","addSource","addLayer","setData","bboxCode","bboxType","bboxDate","boundArr","bounds","LngLatBounds","fitBounds","padding","featureCollection","polygons","feature","j","coordinates","points","lines","transform","cHierarchies","parentMap","day","getUTCDate","dateStr","getUTCFullYear","getUTCMonth","entries","pot","parents","getHierarchies","onManageVersions","find","h","onVersionChange","ErrorModalComponent","localizeService","geoObjectTypes","geoObjectId","reason","dataSource","Observable","observer","results","isGeoObjectTypeRC","organizationCode","a","b","localizedValue","toLowerCase","pos","getGeoObjectTypePosition","splice","newValid","attributeEditor","changeTypeaheadLoading","typeaheadLoading","typeaheadOnSelect","item","submit","goSubmit","cancel","SuccessModalComponent","decode","tabIndex","submitFunction","arePropertiesValid","areParentsValid","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","handleDateChange","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","goPropertiesPost","configureFromImportError","importError","importErrorId","resolution","configureAsExisting","fetchGeoObject","fetchHierarchies","locales","setLocales","typeTypeCode","getTypeAheadObservable","ptn","properties","parentSelector","changePage","nextPage","force","persistModelChanges","_stepConfig","contextMenuService","instance","Instance","nodes","currentHierarchy","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","isRA","isOrganizationRA","desiredHierarchy","setHierarchies","setNodesOnInit","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","index","findIndex","rootGeoObjectTypes","treeModel","expandAll","setNodesForHierarchy","hierarchyType","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","updateHierarchy","getHierarchyLabel","child","gOT","childType","nodeMenuComponent","leafMenuComponent","preventDefault","stopPropagation","setFocusedNode","isExpanded","collapse","hierarchyOnClick","update","createHierarchy","onHierarchytTypeCreate","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","manageGeoObjectType","onGeoObjectTypeSubmitted","position","addChildAndRootToHierarchy","that","allGeoObjectTypes","toRoot","onNodeChange","current","deleteTreeNode","removeTreeNode","n","hasChildren","isActive","onDrop","element","allowDrop","TreeComponent","auth","organizations","orgs","onSelect","gObj","selectedGeoObjectType","toggleIsLeaf","isLeaf","toggleIsGeometryEditable","confirmBsModalRef","geoObjectTypeManagementService","modalStateSubscription","unsubscribe","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","localizationService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","manageAttributes","onDeleteAttribute","defineAttributeModal","defineAttribute","editAttribute","removeAttributeType","attributeType","newAttribute","setAttribute","attributeInputComponent","isFormValid","isAttrValid","validator","c","geoObjectAttributeCode","validate","provide","NG_VALIDATORS","useExisting","multi","Object","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","termOption","replace","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","t","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","sysService","showImportConfig","importStrategies","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","getExternalSystems","paginatedSystems","externalSystems","resultSet","getUrl","format","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","append","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","externalSystem","sys","onErrorItem","onClick","queue","uploadAll","setImportSource","onCreate","createDate","lastUpdateDate","write","admin","read","lists","onView","onEdit","pair","ret","onDelete","arr","onFormat","confirm","objectKeys","keys","requests","columns","filterCriteria","prop","sortable","width","refresh","selected","onExecute","changeRequest","request","onApproveAll","onRejectAll","requestTrackBy","toggle","parentElement","className","includes","toggleId","criteria","setActionStatus","approvalStatus","getActiveDetailComponent","actionType","endsWith","showActionDetail","curAction","cuDetail","endEdit","arDetail","spDetail","editingGeometry","hasDuplicateDate","vAttribute","onDateChange","vAttributes","snapDates","votArr","prev","formatDateString","onAddNewVersion","terms","editGeometry","getVersionData","versions","val","getDefaultLocaleVal","locale","defVal","locVal","setDateAttribute","version","opacity","newArray","dateObj","month","visible","onAdd","onRemove","items","entry","pType","uid","ancestors","ancestor","pService","route","p","page","count","order","isPublished","isRefreshing","isWritable","searchPlaceholder","snapshot","paramMap","isCollapsed","onPageChange","onSort","clearFilters","search","toggleFilter","getValues","base","unshift","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","editModal","onGoto","window","open","onPublish","subscription","interval","onNewGeoObject","onExport","location","href","encodeURIComponent","isSRA","baseUrl","hostname","port","notifier","webSocket","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onDownloadShapefile","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","onResolveScheduledJob","allSelected","timeCounter","isPolling","hasRowValidationProblem","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onProblemResolvedListener","onEditGeoObject","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","toUpperCase","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onViewAllCompletedTasks","onSuccess","level","system","cOrg","cSystem","levelRows","orgUnitGroups","oIndex","sIndex","systems","esConfig","levels","levelRow","levelNum","isAttributeEditor","hasAttributes","onOrganizationSelected","onChangeExternalSystem","lvl","addLevel","len","removeLevel","levelRowIndex","editorIndex","getEditorIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Id","dhis2Attrs","dhis2Attr","onChangeAttrMapping","newValue","attrCfg","attrs","attrCfgAttr","isDifferentGot","isOrgUnitGroup","onChangeTargetType","hasOwnProperty","onRun","exportErrors","mapService","geojson","breadcrumbs","active","vectorLayers","contextLayerGroups","baseLayers","sprite","baselayerIconHover","preventSingleClick","convertListsToContextLayers","layer","protocol","host","attributionControl","thisList","contextLayers","thisContextLayer","enabled","AttributionControl","compact","handleMapClickEvent","source","cLayerGroup","cLayer","addVectorLayer","handleBasemapStyle","baseLayer","setStyle","addContextLayerModal","cLayerGroups","highlightMapFeature","clearHighlightMapFeature","onListEntityHover","site","onListEntityHoverOff","zoomToFeature","timer","clearTimeout","drillDown","addBreadcrumb","expand","setNodes","groupHasEnabledContextLayers","group","hasEnabled","hasEnabledContextLayers","removeContextLayer","toggleContextLayer","tiles","navigator","groupHasContextLayers","hasCLayers","geoObjectJson","canDeactivate","afterDeactivate","isDeactivating","unlockActionSync","startEdit","$","ajax","method","success","async","original","ChangeRequest","AbstractAction","UpdateGeoObjectAction","CreateGeoObjectAction","AddChildAction","RemoveChildAction","GovernanceStatus","PageEvent","SetParentAction","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","routes","path","component","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"mKAAA,SACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UAEA,UACA,UAEA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,O,2TAGA,4B,wCA4IaA,I,8DAAAA,IAAc,UA9Cf,CACV,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,8BACA,SA1GQ,CACR,EAAAC,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBAEA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,0B,EAlBF,GA4Ia,EAAA5B,mB,iEAAAA,GAAc,eAvHzB,EAAA6B,mBACA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,8BACA,EAAAC,yBACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BACA,GAAAC,kBACA,GAAAC,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA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","file":"1.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedInputComponent } from './component/form-fields/localized-input/localized-input.component';\nimport { LocalizedTextComponent } from './component/form-fields/localized-text/localized-text.component';\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { CreateHierarchyTypeModalComponent } from './component/hierarchy/modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './component/hierarchy/modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './component/hierarchy/modals/create-geoobjtype-modal.component';\nimport { ManageAttributesModalComponent } from './component/hierarchy/geoobjecttype-management/manage-attributes-modal.component';\nimport { DefineAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component';\nimport { EditAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component';\nimport { ShapefileModalComponent } from './component/importer/modals/shapefile-modal.component';\nimport { AttributesPageComponent } from './component/importer/modals/attributes-page.component';\nimport { LocationPageComponent } from './component/importer/modals/location-page.component';\nimport { LocationProblemPageComponent } from './component/importer/modals/location-problem-page.component';\nimport { LocationProblemComponent } from './component/importer/modals/location-problem.component';\nimport { TermProblemPageComponent } from './component/importer/modals/term-problem-page.component';\nimport { TermProblemComponent } from './component/importer/modals/term-problem.component';\nimport { SpreadsheetModalComponent } from './component/importer/modals/spreadsheet-modal.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { TermOptionWidgetComponent } from './component/hierarchy/geoobjecttype-management/term-option-widget.component';\nimport { AttributeInputComponent } from './component/hierarchy/geoobjecttype-management/attribute-input.component';\nimport { EditTermOptionInputComponent } from './component/hierarchy/geoobjecttype-management/edit-term-option-input.component';\nimport { ManageTermOptionsComponent } from './component/hierarchy/geoobjecttype-management/manage-term-options.component';\nimport { GeoObjectTypeInputComponent } from './component/hierarchy/geoobjecttype-management/geoobjecttype-input.component';\nimport { ManageGeoObjectTypeModalComponent } from './component/hierarchy/modals/manage-geoobjecttype-modal.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { PublishModalComponent } from './component/master-list/publish-modal.component';\nimport { ExportFormatModalComponent } from './component/master-list/export-format-modal.component';\nimport { RequestTableComponent } from './component/crtable/request-table.component';\nimport { CreateUpdateGeoObjectDetailComponent } from './component/crtable/action-detail/create-update-geo-object/detail.component';\nimport { AddRemoveChildDetailComponent } from './component/crtable/action-detail/add-remove-child/detail.component';\nimport { SetParentDetailComponent } from './component/crtable/action-detail/set-parent/set-parent-detail.component';\nimport { GeoObjectSharedAttributeEditorComponent } from './component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component';\nimport { ManageVersionsModalComponent } from './component/geoobject-shared-attribute-editor/manage-versions-modal.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { GeoObjectEditorComponent } from './component/geoobject-editor/geoobject-editor.component';\nimport { GeoObjectEditorMapComponent } from './component/geoobject-editor-map/geoobject-editor-map.component';\nimport { SimpleEditControl } from './component/geoobject-editor-map/simple-edit-control/simple-edit-control.component';\nimport { CascadingGeoSelector } from './component/cascading-geo-selector/cascading-geo-selector';\nimport { ManageParentVersionsModalComponent } from './component/cascading-geo-selector/manage-parent-versions-modal.component';\nimport { ActionDetailModalComponent } from './component/crtable/action-detail/action-detail-modal.component';\nimport { DataImporterComponent } from './component/importer/dataimporter.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { PublishedMasterListHistoryComponent } from './component/master-list/published-master-list-history.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { JobConflictModalComponent } from './component/scheduled-jobs/conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './component/scheduled-jobs/conflict-widgets/reupload-modal.component';\nimport { ParentReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component';\nimport { TermReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component';\nimport { RowValidationProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component';\nimport { StepIndicatorComponent } from './component/scheduled-jobs/step-indicator.component';\nimport { ImportProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/import-problem-widget.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigModalComponent } from './component/synchronization-config/synchronization-config-modal.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\n\nimport { LocationManagerComponent } from './component/location-manager/location-manager.component';\nimport { ContextLayerModalComponent } from './component/location-manager/context-layer-modal.component';\n\nimport { GeoObjectAttributeCodeValidator } from './factory/form-validation.factory';\n\nimport { GeoObjectTypePipe } from './pipe/geoobjecttype.pipe';\nimport { GeoObjectAttributeExcludesPipe } from './pipe/geoobject-attribute-excludes.pipe';\nimport { ToEpochDateTimePipe } from './pipe/to-epoch-date-time.pipe';\nimport { RegistryService } from './service/registry.service';\nimport { TaskService } from './service/task.service';\nimport { HierarchyService } from './service/hierarchy.service';\nimport { SynchronizationConfigService } from './service/synchronization-config.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\nimport { ChangeRequestService } from './service/change-request.service';\nimport { IOService } from './service/io.service';\nimport { MapService } from './service/map.service';\nimport { GeoObjectTypeManagementService } from './service/geoobjecttype-management.service'\n\nimport { RegistryRoutingModule } from './registry-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\t//        ModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tTabsModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule,\n\t\tSharedModule,\n\t\tRegistryRoutingModule\n\t],\n\tdeclarations: [\n\t\tHierarchyComponent,\n\t\tRequestTableComponent,\n\t\tCreateUpdateGeoObjectDetailComponent,\n\t\tAddRemoveChildDetailComponent,\n\t\tSetParentDetailComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tShapefileModalComponent,\n\t\tAttributesPageComponent,\n\t\tLocationPageComponent,\n\t\tLocationProblemPageComponent,\n\t\tLocationProblemComponent,\n\t\tTermProblemPageComponent,\n\t\tTermProblemComponent,\n\t\tSpreadsheetModalComponent,\n\t\tGeoObjectTypePipe,\n\t\tGeoObjectAttributeCodeValidator,\n\t\tEditAttributeModalContentComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tLocalizedInputComponent,\n\t\tLocalizedTextComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tGeoObjectAttributeExcludesPipe,\n\t\tToEpochDateTimePipe,\n\t\tGeoObjectEditorMapComponent,\n\t\tSimpleEditControl,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tCascadingGeoSelector,\n\t\tManageParentVersionsModalComponent,\n\t\tActionDetailModalComponent,\n\t\tHierarchyComponent,\n\t\tDataImporterComponent,\n\t\tDataExportComponent,\n\t\t// Master List screens\n\t\tMasterListManagerComponent,\n\t\tMasterListComponent,\n\t\tMasterListHistoryComponent,\n\t\tPublishedMasterListHistoryComponent,\n\t\tPublishModalComponent,\n\t\tMasterListViewComponent,\n\t\t// Scheduled jobs\n\t\tExportFormatModalComponent,\n\t\tScheduledJobsComponent,\n\t\tJobComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tParentReferenceProblemWidgetComponent,\n\t\tTermReferenceProblemWidgetComponent,\n\t\tRowValidationProblemWidgetComponent,\n\t\tStepIndicatorComponent,\n\t\tImportProblemWidgetComponent,\n\t\tTaskViewerComponent,\n\t\t// Synchronization Config\n\t\tSynchronizationConfigManagerComponent,\n\t\tSynchronizationConfigModalComponent,\n\t\tSynchronizationConfigComponent,\n\t\tSyncDetailsComponent,\n\t\t// Location manager\n\t\tLocationManagerComponent,\n\t\tContextLayerModalComponent\n\t],\n\tproviders: [\n\t\tMapService,\n\t\tHierarchyService,\n\t\tLocalizationManagerService,\n\t\tChangeRequestService,\n\t\tIOService,\n\t\tGeoObjectTypeManagementService,\n\t\tRegistryService,\n\t\tTaskService,\n\t\tDatePipe,\n\t\tToEpochDateTimePipe,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigService\n\t],\n\tentryComponents: [\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tEditAttributeModalContentComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tShapefileModalComponent,\n\t\tSpreadsheetModalComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tManageParentVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tPublishModalComponent,\n\t\tExportFormatModalComponent,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tActionDetailModalComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigModalComponent,\n\t\tContextLayerModalComponent\n\t]\n})\nexport class RegistryModule { }\n","import { ChangeRequestService } from './change-request.service';\nimport { GeoObjectTypeManagementService } from './geoobjecttype-management.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tGeoObjectTypeManagementService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService\n];\n\nexport * from './change-request.service';\nexport * from './geoobjecttype-management.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';","import { LocalizedValue } from '@shared/model/core';\nimport { LocalizationService } from '@shared/service';\nimport { ImportConfiguration } from './io';\n\nexport const PRESENT: string = '5000-12-31'\n\nexport class TreeEntity {\n\tid: string;\n\tname: string;\n\thasChildren: boolean;\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\n\tconstructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n\t\tthis.code = code;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t}\n\tchildren: Term[] = [];\n\n\taddChild(term: Term) {\n\t\tthis.children.push(term);\n\t}\n}\n\nexport class GeoObject {\n\ttype: string;\n\tgeometry: any;\n\tproperties: {\n\t\tuid: string,\n\t\tcode: string,\n\t\tdisplayLabel: LocalizedValue,\n\t\ttype: string,\n\t\tstatus: string[],\n\t\tsequence: string\n\t\tcreateDate: string,\n\t\tlastUpdateDate: string,\n\t};\n}\n\nexport class GeoObjectType {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tgeometryType: string;\n\tisLeaf: boolean;\n\tisGeometryEditable: boolean;\n\torganizationCode: string;\n\tattributes: Array<Attribute | AttributeTerm | AttributeDecimal> = [];\n}\n\nexport class Task {\n\tid: string;\n\ttemplateKey: string;\n\tmsg: string;\n\ttitle: string;\n\tstatus: string;\n\tcreateDate: number;\n\tcompletedDate: number;\n}\n\n// export class Attribute {\n\n//   name: string;\n//   type: string;\n//   label: string;\n//   description: string;\n//   isDefault: boolean;\n// }\n\n// export class AttributeTerm extends Attribute {\n//     descendants: Attribute[];\n//     rootTerm: string;\n// }\n\nexport class GeoObjectOverTime {\n\n\tgeoObjectType: GeoObjectType;\n\n\tattributes: any;\n\n\tpublic constructor(geoObjectType: GeoObjectType, attributes: any) {\n\t\tthis.geoObjectType = geoObjectType;\n\t\tthis.attributes = attributes;\n\t}\n\n\tpublic getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n\t\tlet retVot = { startDate: date, endDate: null, value: null };\n\n\t\tconst time = date.getTime();\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.code === attrCode) {\n\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\tretVot.value = lService.create();\n\t\t\t\t}\n\n\t\t\t\tif (attr.isChangeOverTime) {\n\t\t\t\t\tlet values = this.attributes[attr.code].values;\n\n\t\t\t\t\tvalues.forEach(vot => {\n\n\t\t\t\t\t\tconst startDate = Date.parse(vot.startDate);\n\t\t\t\t\t\tconst endDate = Date.parse(vot.endDate);\n\n\t\t\t\t\t\tif (time >= startDate && time <= endDate) {\n\n\t\t\t\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\t\t\t\tretVot.value = JSON.parse(JSON.stringify(vot.value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (attr.type === 'term' && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n\t\t\t\t\t\t\t\tretVot.value = vot.value[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tretVot.value = vot.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tretVot.value = this.attributes[attr.code];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn retVot;\n\t}\n}\n\nexport class ValueOverTime {\n\tstartDate: string;\n\tendDate: string;\n\tvalue: any;\n\tremovable?: boolean;\n}\n\nexport class Attribute {\n\tcode: string;\n\ttype: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tisDefault: boolean;\n\trequired: boolean;\n\tunique: boolean;\n\tisChangeOverTime?: boolean;\n\tprecision?: number;\n\tscale?: number;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n\t\tthis.code = code;\n\t\tthis.type = type;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t\tthis.isDefault = isDefault;\n\t\tthis.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n\t\tthis.unique = unique;\n\t\tthis.isChangeOverTime = isChangeOverTime;\n\t}\n\n}\n\nexport class AttributeTerm extends Attribute {\n\t//descendants: Attribute[];\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n\n\trootTerm: Term = new Term(null, null, null);\n\n\ttermOptions: Term[] = [];\n\n\tsetRootTerm(term: Term) {\n\t\tthis.rootTerm = term;\n\t}\n}\n\nexport class AttributeDecimal extends Attribute {\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\n\t\tthis.precision = 32;\n\t\tthis.scale = 8;\n\t}\n}\n\nexport enum GeoObjectTypeModalStates {\n\t\"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n\t\"editAttribute\" = \"EDIT-ATTRIBUTE\",\n\t\"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n\t\"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n\t\"editTermOption\" = \"EDIT-TERM-OPTION\",\n\t\"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport class TreeNode {\n\tgeoObject: GeoObject;\n\thierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n\tchildren: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n\tparents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n\tstate: string;\n\tattribute: any;\n\ttermOption: any;\n}\n\nexport class PaginationPage {\n\tpageNumber: number;\n\tcount: number;\n\tpageSize: number;\n\tresults: any[];\n}\n\nexport class AbstractScheduledJob {\n\tjobId: string;\n\thistoryId: string;\n\tstage: string;\n\tstatus: string;\n\tauthor: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tworkProgress: number;\n\tworkTotal: number;\n\tstartDate: string;\n\tendDate: string;\n}\n\nexport class ScheduledJob extends AbstractScheduledJob {\n\timportedRecords: number;\n\tconfiguration: ImportConfiguration;\n\timportErrors: PaginationPage;\n\texportErrors: PaginationPage;\n\tproblems: PaginationPage;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n\tstepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n\texception: ServerException;\n\tobject: ImportErrorObject;\n\tobjectType: string;\n\tid: string;\n\tresolution: string;\n\tselected?: boolean;\n}\n\nexport class ServerException {\n\tattributes: ServerExceptionAttribute[];\n\ttype: string;\n\tmessage: string;\n}\n\nexport class ServerExceptionAttribute {\n\tvalue: string;\n\tkey: string;\n}\n\nexport class ImportErrorObject {\n\tgeoObject: GeoObjectOverTime;\n\tparents: HierarchyOverTime[];\n\tisNew: boolean;\n}\n\nexport class StepConfig {\n\tsteps: Step[];\n}\n\nexport class Step {\n\tlabel: string;\n\tcomplete?: boolean;\n\tenabled?: boolean;\n\tstatus?: string;\n}\n\nexport class MasterList {\n\toid: string;\n\ttypeCode: string;\n\tdisplayLabel: LocalizedValue;\n\tcode: string;\n\trepresentativityDate: Date;\n\tpublishDate: Date;\n\tlistAbstract: string;\n\tprocess: string;\n\tprogress: string;\n\taccessConstraints: string;\n\tuseConstraints: string;\n\tacknowledgements: string;\n\tdisclaimer: string;\n\tcontactName: string;\n\torganization: string;\n\ttelephoneNumber: string;\n\temail: string;\n\thierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n\tleaf: boolean;\n\tfrequency: string;\n\tisMaster: boolean;\n\tvisibility: string;\n\twrite?: boolean;\n\tread?: boolean;\n\tversions?: MasterListVersion[]\n}\n\nexport class MasterListVersion {\n\tdisplayLabel: string;\n\toid: string;\n\ttypeCode: string;\n\torgCode: string;\n\tleaf: boolean;\n\tmasterlist: string;\n\tforDate: string;\n\tcreateDate: string;\n\tpublishDate: string;\n\tattributes: any[];\n\tisGeometryEditable: boolean;\n\tlocales?: string[];\n\tshapefile?: boolean;\n}\n\nexport class HierarchyOverTime {\n\tcode: string;\n\tlabel: string;\n\ttypes: {\n\t\tcode: string;\n\t\tlabel: string;\n\t}[];\n\tentries: {\n\t\tstartDate: string;\n\t\tendDate: string;\n\t\tparents: { [k: string]: { text: string; geoObject: GeoObject } };\n\t}[];\n}\n\nexport enum ImportStrategy {\n\t\"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n\t\"NEW_ONLY\" = \"NEW_ONLY\",\n\t\"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport class MasterListByOrg {\n\toid: string;\n\tlabel: string;\n\twrite: boolean;\n\tlists: { label: string, oid: string, createDate: string, lastUpdateDate: string, isMaster: boolean, write: boolean, read: boolean }[];\n}\n\nexport class SynchronizationConfig {\n\toid?: string;\n\ttype?: string;\n\tsystemLabel?: string;\n\torganization: string;\n\tsystem: string;\n\thierarchy: string;\n\tlabel: LocalizedValue;\n\tconfiguration: any;\n}\n\nexport class OrgSyncInfo {\n\tlabel: string;\n\tcode: string;\n\thierarchies: { label: string, code: string }[];\n\tsystems: { label: string, oid: string, type: string }[];\n};\n\nexport class ExportScheduledJob extends AbstractScheduledJob {\n\tstepConfig?: StepConfig;\n}\n\nexport class ContextLayer {\n\toid: string;\n\tdisplayLabel: string;\n\tactive: boolean;\n\tenabled: boolean;\n}\n\nexport class ContextLayerGroup {\n\toid: string;\n\tdisplayLabel: string;\n\tcontextLayers: ContextLayer[];\n}\n","import { GeoObjectType } from './registry';\n\nexport class ImportSheet {\n\tname: string;\n\tattributes: {\n\t\tboolean: string[];\n\t\tdate: string[];\n\t\tnumeric: string[];\n\t\ttext: string[];\n\t}\n}\n\nexport class Location {\n\tlabel: string;\n\tcode: string;\n\ttarget: string;\n\tmatchStrategy: string;\r\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: string;\n}\n\nexport class TermProblem {\n\tlabel: string;\n\tparentCode: string;\n\tmdAttributeId: string;\n\tattributeCode: string;\n\tattributeLabel: string;\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class LocationProblem {\n\tlabel: string;\n\ttype: string;\n\ttypeLabel: string;\n\tparent: string;\n\tcontext: { label: string, type: string }[];\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class Exclusion {\n\tcode: string;\n\tvalue: string;\n}\n\nexport class Synonym {\n\tlabel: string;\n\tsynonymId: string;\n\tvOid?: string;\n}\n\nexport class ImportConfiguration {\n\ttype: GeoObjectType;\n\tsheet: ImportSheet;\n\tdirectory: string;\n\tfilename: string;\n\thierarchy: string;\n\tpostalCode: boolean;\n\thasPostalCode: boolean;\n\tlocations: Location[];\n\tformatType: string;\n\tobjectType: string;\n\tlocationProblems: LocationProblem[];\n\ttermProblems: TermProblem[];\n\texclusions: Exclusion[];\n\thierarchies: { code: string, label: string }[];\n\tstartDate: string;\n\tendDate: string;\n\tisExternal: string;\n\texternalSystemId: string;\n\texternalIdAttributeTarget: string;\n}\n\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { ManageGeoObjectTypeModalState } from '@registry/model/registry';\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n\tmodalState: ManageGeoObjectTypeModalState;\r\n\tprivate modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n\tmodalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n\tconstructor() { }\r\n\r\n\tpublic getModalState(): ManageGeoObjectTypeModalState {\r\n\t\treturn this.modalState;\r\n\t}\r\n\r\n\tpublic setModalState(state: ManageGeoObjectTypeModalState): void {\r\n\t\tthis.modalState = state;\r\n\r\n\t\tthis.modalStateChangedSource.next(this.modalState);\r\n\t}\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { HierarchyType } from '@registry/model/hierarchy';\nimport { TreeEntity } from '@registry/model/registry';\nimport { EventService } from '@shared/service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    getHierarchyTypes( types: any ): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'types', JSON.stringify(types) );\n        \n        return this.http\n            .get<HierarchyType[]>( acp + '/cgr/hierarchytype/get-all', {params: params})\n            .toPromise();\n    }\n    \n    addChildToHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n\t   let headers = new HttpHeaders( {\n           'Content-Type': 'application/json'\n       } );\n\n       this.eventService.start();\n\n       return this.http\n           .post<HierarchyType>( acp + '/cgr/hierarchytype/add', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n           .toPromise();\n    }\n    \n    removeFromHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n \t   let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/remove', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n     }\n    \n    createHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/create', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    updateHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/update', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    deleteHierarchyType( code: string ): Promise<TreeEntity> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n        \n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>( acp + '/cgr/hierarchytype/delete', { 'code': code }, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n\ttrigger,\n\tstate,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\n\nimport { GeoObjectType, Attribute } from '@registry/model/registry';\nimport { HierarchyService } from '@registry/service';\nimport { ErrorHandler } from '@shared/component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component({\n\tselector: 'attribute-input',\n\ttemplateUrl: './attribute-input.component.html',\n\tstyleUrls: ['./attribute-input.css'],\n\tanimations: [\n\t\ttrigger('toggleInputs', [\n\t\t\tstate('none, void',\n\t\t\t\tstyle({ 'opacity': 0 })\n\t\t\t),\n\t\t\tstate('show',\n\t\t\t\tstyle({ 'opacity': 1 })\n\t\t\t),\n\t\t\ttransition('none => show', animate('300ms'))\n\t\t\t//   transition('show => none', animate('100ms'))\n\t\t])\n\t]\n})\nexport class AttributeInputComponent implements OnInit {\n\n\t@Input() disableCodeField: boolean = false;\n\t@Input() excludeDescription: boolean = false;\n\t@Input() isDecimal: boolean = false;\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\t@Output() attributeChange = new EventEmitter<Attribute>();\n\tmessage: string = null;\n\n\tstate: string = 'none';\n\n\tconstructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) {\n\t}\n\n\tngOnInit(): void {\n\n\t}\n\n\tngAfterViewInit() {\n\t\tthis.state = 'show';\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tngOnChanges() {\n\n\t}\n\n\tngOnDestroy() {\n\n\t}\n\n\thandleOnSubmit(): void {\n\n\t}\n\n\ttoggleIsUnique(): void {\n\t\tthis.attribute.unique = !this.attribute.unique;\n\t}\n\n\tanimate(): void {\n\t\tthis.state = \"none\";\n\t}\n\n\tonAnimationDone(event: AnimationEvent): void {\n\t\tthis.state = \"show\";\n\t}\n\n\tisValid(): boolean {\n\t\tif (this.attribute.code) {\n\n\t\t\t// if code has a space\n\t\t\tif (this.attribute.code.indexOf(\" \") !== -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.attribute.label.localeValues[0].value.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal) {\n\t\t\t\tconsole.log(this.attribute);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListByOrg } from '@registry/model/registry';\nimport { RegistryService, IOService } from '@registry/service';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n@Component({\n\tselector: 'publish-modal',\n\ttemplateUrl: './publish-modal.component.html',\n\tstyleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\tmessage: string = null;\n\tmaster: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonMasterListChange: Subject<MasterList>;\n\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n\treadonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\tedit: boolean = false;\n\n\tisNew: boolean = false;\n\n\tconstructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n\tngOnInit(): void {\n\n\t\tthis.onMasterListChange = new Subject();\n\n\t\tif (this.master == null || !this.readonly) {\n\t\t\tthis.iService.listGeoObjectTypes(true).then(types => {\n\n\t\t\t\tvar myOrgTypes = [];\n\t\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\t\tif (this.authService.isGeoObjectTypeRM(types[i].orgCode, types[i].code)) {\n\t\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.types = myOrgTypes;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.master = {\n\t\t\t\toid: null,\n\t\t\t\ttypeCode: '',\n\t\t\t\tdisplayLabel: this.lService.create(),\n\t\t\t\tcode: '',\n\t\t\t\trepresentativityDate: null,\n\t\t\t\tpublishDate: null,\n\t\t\t\tlistAbstract: '',\n\t\t\t\tprocess: '',\n\t\t\t\tprogress: '',\n\t\t\t\taccessConstraints: '',\n\t\t\t\tuseConstraints: '',\n\t\t\t\tacknowledgements: '',\n\t\t\t\tdisclaimer: '',\n\t\t\t\tcontactName: '',\n\t\t\t\torganization: '',\n\t\t\t\ttelephoneNumber: '',\n\t\t\t\temail: '',\n\t\t\t\thierarchies: [],\n\t\t\t\tleaf: false,\n\t\t\t\tfrequency: 'ANNUAL',\n\t\t\t\tisMaster: null,\n\t\t\t\tvisibility: null\n\t\t\t};\n\t\t}\n\t}\n\n\tinit(org: MasterListByOrg): void {\n\t\tthis.master.organization = org.oid;\n\t}\n\n\tgetIsDisabled(event): boolean {\n\t\tlet elClasses = event.target.classList;\n\t\tfor (let i = 0; i < elClasses.length; i++) {\n\t\t\tlet c = elClasses[i];\n\t\t\tif (c === 'disabled') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tonChange(): void {\n\n\t\tif (this.master.typeCode != null && this.master.typeCode.length > 0) {\n\t\t\tthis.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n\t\t\t\tthis.master.hierarchies = hierarchies;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.master.hierarchies = [];\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.createMasterList(this.master).then(response => {\n\n\t\t\tthis.onMasterListChange.next(response);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCancel(): void {\n\t\tthis.bsModalRef.hide()\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h2>\n        <h2 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> ({{localeValue.locale}})\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange($event)\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '@shared/model/core';\n\n@Component( {\n    selector: 'localized-input',\n    templateUrl: './localized-input.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedInputComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedValue } from '@shared/model/core';\nimport { LocalizationService } from '@shared/service';\n\nimport { ManageVersionsModalComponent } from './manage-versions-modal.component';\n\nimport { RegistryService, ChangeRequestService, IOService } from '@registry/service';\n\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, PRESENT } from '@registry/model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport Utils from '../../utility/Utils';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-shared-attribute-editor',\n    templateUrl: './geoobject-shared-attribute-editor.component.html',\n    styleUrls: ['./geoobject-shared-attribute-editor.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is shared between:\n * - crtable (create-update-geo-object action detail)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget\n * \n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    private bsModalRef: BsModalRef;\n\n    /*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    @Input() preGeoObject: GeoObjectOverTime = null;\n\n    calculatedPreObject: any = {};\n\n    /*\n\t * The state of the GeoObject being modified\n\t */\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    calculatedPostObject: any = {};\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isEditingGeometries = false;\n\n    @Input() isGeometryInlined = false;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n    isValid: boolean = true;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n    @ViewChild( \"attributeForm\" ) attributeForm;\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private datePipe: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private lService: LocalizationService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.preGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\n        if ( this.postGeoObject == null ) {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // Object.assign is a shallow copy. We want a deep copy.\n        }\n        else {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.postGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n        }\n\n        // this.attributeForm.statusChanges.subscribe( result => {\n        //     this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n        //     this.valid.emit( this.isValid );\n        // } );\n\n        if ( this.attributeExcludes != null ) {\n            this.geoObjectAttributeExcludes.push.apply( this.geoObjectAttributeExcludes, this.attributeExcludes );\n\n            if ( !this.isGeometryInlined ) {\n                this.geoObjectAttributeExcludes.push( \"geometry\" );\n            }\n        }\n\n        let geomAttr = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geomAttr = this.geoObjectType.attributes[i];\n            }\n        }\n        if ( geomAttr == null ) {\n            let geometry: Attribute = new Attribute( \"geometry\", \"geometry\", new LocalizedValue( \"Geometry\", null ), new LocalizedValue( \"Geometry\", null ), true, false, false, true );\n            this.geoObjectType.attributes.push( geometry );\n        }\n\n        this.calculate();\n    }\n\n    ngAfterViewInit() {\n         this.attributeForm.statusChanges.subscribe( result => {\n            this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n            this.valid.emit( this.isValid );\n        } );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): void {\n        this.calculatedPreObject = this.calculateCurrent( this.preGeoObject );\n        this.calculatedPostObject = this.calculateCurrent( this.postGeoObject );\n\n        if ( this.geometryEditor != null ) {\n            this.geometryEditor.reload();\n        }\n    }\n\n    calculateCurrent( goot: GeoObjectOverTime ): any {\n      const object = {};\n\n      const time = this.forDate.getTime();\n\n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n          let attr = this.geoObjectType.attributes[i];\n          object[attr.code] = null;\n\n          if ( attr.type === 'local' ) {\n              object[attr.code] = this.lService.create();\n          }\n\n          if ( attr.isChangeOverTime ) {\n            let values = goot.attributes[attr.code].values;\n\n            values.forEach( vot => {\n\n                const startDate = Date.parse( vot.startDate );\n                const endDate = Date.parse( vot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n\n                    if ( attr.type === 'local' ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: JSON.parse( JSON.stringify( vot.value ) )\n                        };\n                    }\n                    else if ( attr.type === 'term' && vot.value != null && Array.isArray( vot.value ) && vot.value.length > 0 ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value[0]\n                        };\n                    }\n                    else {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value\n                        };\n                    }\n                }\n            } );\n          }\n          else {\n              object[attr.code] = goot.attributes[attr.code];\n          }\n      }\n      \n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        let attr = this.geoObjectType.attributes[i];\n        \n        if ( attr.isChangeOverTime && object[attr.code] == null ) {\n          object[attr.code] = {\n            startDate: null,\n            endDate: null,\n            value: \"\"\n          }\n        }\n      }\n\n      return object;\n    }\n\n    formatDate( date: string ): string {\n        if ( date === PRESENT ) {\n            return this.lService.localize(\"changeovertime\", \"present\");\n        }\n\n        return date;\n    }\n\n    handleChangeCode( e: any ): void {\n        this.postGeoObject.attributes.code = this.calculatedPostObject['code'];\n        //        \n        //        console.log(this.calculatedPostObject['code'])\n        //        console.log(e)\n    }\n\n    onManageAttributeVersions( attribute: Attribute ): void {\n        this.bsModalRef = this.modalService.show( ManageVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        // TODO: sending the properties like this is wrong\n        this.bsModalRef.content.geoObjectOverTime = this.postGeoObject;\n        this.bsModalRef.content.geoObjectType = this.geoObjectType;\n        this.bsModalRef.content.isNewGeoObject = this.isNew;\n        this.bsModalRef.content.attribute = attribute;\n        this.bsModalRef.content.onAttributeVersionChange.subscribe( versionObj => {\n            this.calculate();\n        } );\n        this.bsModalRef.content.tfInit();\n    }\n\n    onManageGeometryVersions(): void {\n        let geometry = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geometry = this.geoObjectType.attributes[i];\n            }\n        }\n\n        this.onManageAttributeVersions( geometry );\n    }\n\n    isDifferentText( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null ) {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value.trim() !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    isDifferentValue( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null )\n        {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    onSelectPropertyOption( event: any, option: any ): void {\n        this.currentTermOption = JSON.parse( JSON.stringify( this.modifiedTermOption ) );\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                if ( attr.code === \"status\" ) {\n                    return Utils.removeStatuses(attrOpts);\n                }\n                else {\n                    return attrOpts;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isStatusChanged( post, pre ) {\n\n        if ( pre != null && post == null ) {\n            return true;\n        }\n\n        if ( pre == null || post == null || pre.length == 0 || post.length == 0 ) {\n            return false;\n        }\n\n        var preCompare = pre;\n        if ( Array.isArray( pre ) ) {\n            preCompare = pre[0];\n        }\n\n        var postCompare = post;\n        if ( Array.isArray( post ) ) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    getTypeDefinition( key: string ): string {\n        // let attrs = this.geoObjectType.attributes;\n\n\n        // attrs.attributes.forEach(attr => {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if ( attr.code === key ) {\n                return attr.type;\n            }\n        }\n\n        return null;\n    }\n\n    public getIsValid(): boolean {\n        return this.isValid;\n    }\n\n    public getGeoObject(): any {\n        return this.postGeoObject;\n\n        //        // The front-end uses the 'yyyy-mm-dd' date format. Our backend expects dates in epoch format.\n        //        var submitGO = JSON.parse( JSON.stringify( this.postGeoObject ) );\n        //        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        //            var attr = this.geoObjectType.attributes[i];\n        //\n        //            if ( attr.type === \"date\" && this.postGeoObject.properties[attr.code] != null ) {\n        //                var parts = this.postGeoObject.properties[attr.code].split( '-' );\n        //                var date = new Date( parts[0], parts[1] - 1, parts[2] );\n        //\n        //                submitGO.properties[attr.code] = date.getTime();\n        //            }\n        //        }\n        //\n        //        return submitGO;\n    }\n}\n","<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <!-- <div class=\"col-md-12\"> -->\n            <div *ngIf=\"preGeoObject\">\n                <div *ngIf=\"!this.isEditingGeometries\" class=\"row\"> \n                    <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    <div class=\"col-md-12\">\n                        <span class=\"text\"></span>\n                            <div class=\"panel\" style=\"box-shadow: none;\">\n                                <div class=\"panel-body\">\n                                    <ul class=\"list-group\">\n                                        <li class=\"list-group-item\" style=\"text-align:left; border: 1px solid #ddd;\" *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes\">\n                                            <h5 *ngIf=\"attr.code !== 'geometry'\">\n\n                                              <span *ngIf=\"attr.code === 'code'\">\n                                                <localize key=\"geoobject.code.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code === 'displayLabel'\">\n                                                <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\">\n                                                {{attr.label.localizedValue}}\n                                              </span>\n                                              \n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>\n                                            </h5>\n                                            \n                                            <h5 *ngIf=\"attr.code === 'geometry'\">\n                                              <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>                                              \n                                            </h5>\n                                            \n\n                                            <div *ngIf=\"attr.code === 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"calculatedPostObject[attr.code]\" (change)=\"handleChangeCode($event)\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew\" required> \n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'character' && attr.code !== 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [ngModel]=\"calculatedPostObject[attr.code].value\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n\n                                              <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentText(attr)\">\n                                                <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                              </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'local'\">\n                                              <ul class=\"list-group\" *ngIf=\"calculatedPostObject[attr.code].value != null\">\n                                                <li class=\"list-group-item\" *ngFor=\"let localeValue of calculatedPostObject[attr.code].value.localeValues; let i = index\">\n                                                  <h5>{{localeValue.locale}}</h5>\n                                                  <input disabled [required]=\"localeValue.locale === 'defaultLocale'\" type=\"text\" [ngModel]=\"localeValue.value\" [name]=\"'mod-' + attr.code + '-' + localeValue.locale\"> \n\n                                                  <p class=\"warning-text\" *ngIf=\"!isNew && calculatedPreObject[attr.code].value != null && localeValue.value != null && localeValue.value.trim() !== calculatedPreObject[attr.code].value.localeValues[i].value\">\n                                                    <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value.localeValues[i].value}}\n                                                  </p>\n                                                </li>\n                                              </ul>                                            \n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'date'\">\n                                                <input type=\"date\" [ngModel]=\"calculatedPostObject[attr.code].value | date:'yyyy-MM-dd'\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n                                                    \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value | date}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'boolean'\">\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"calculatedPostObject[attr.code].value\" disabled [value]=\"true\" id=\"mod-{{attr.code}}-true\" name=\"mod-{{attr.code}}-true\">\n                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                </label>\n\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"!calculatedPostObject[attr.code].value\" disabled [value]=\"false\" id=\"mod-{{attr.code}}-false\" name=\"mod-{{attr.code}}-false\">\n                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                </label>\n                                                \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'float'\">\n                                                <input disabled type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\"\n                                                    id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'integer'\">\n                                                <input type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\" disabled id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'term'\">\n                                                <select id=\"mod-{{attr.code}}\" name=\"mod-term-{{attr.code}}\" class=\"select-area\" style=\"float:none;\" disabled [(ngModel)]=\"calculatedPostObject[attr.code].value\">\n                                                    <option value=\"\" ></option>\n                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attr.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                </select>\n\n                                                <!-- \n                                                <p class=\"warning-text\" *ngIf=\"calculatedPreObject[attr.code].value && calculatedPostObject[attr.code].value !== calculatedPreObject[attr.code].value\">\n                                                -->\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isStatusChanged(calculatedPostObject[attr.code].value, calculatedPreObject[attr.code].value)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'geometry' && this.isGeometryInlined\">\n                                              <geoobject-editor-map #geometryEditor\n                                                [geometryType]=\"this.geoObjectType.geometryType\"\n                                                [readOnly]=\"true\"\n                                                [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                                                [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                                                [bboxCode]=\"this.preGeoObject.attributes.code\"\n                                                [bboxType]=\"this.geoObjectType.code\"\n                                                (onClickEdit)=\"this.onManageGeometryVersions()\"\n                                                [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                                              </geoobject-editor-map>\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.isChangeOverTime\" class=\"button-holder\" style=\"text-align:left;\" >\n                                              <button type=\"submit\" style=\"\" (click)=\"onManageAttributeVersions(attr)\" class=\"btn btn-primary\" role=\"button\">\n                                                <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                                              </button>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                    </div>\n                 </div>\n                 <div *ngIf=\"this.isEditingGeometries && !this.isGeometryInlined\">\n                   <!-- <div class=\"label-holder\">\n                     <label>\n                      <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                     </label>\n                   </div> -->\n                   <div class=\"\">\n                     <geoobject-editor-map #geometryEditor \n                       [geometryType]=\"this.geoObjectType.geometryType\"\n                       [readOnly]=\"true\"\n                       [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                       [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                       [bboxCode]=\"this.preGeoObject.attributes.code\"\n                       [bboxType]=\"this.geoObjectType.code\"\n                       (onClickEdit)=\"this.onManageGeometryVersions()\"\n                       [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                     </geoobject-editor-map>\n                   </div>\n                 </div>\n           </div>\n        <!-- </div> -->\n    </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '@shared/model/core';\n\n@Component( {\n    selector: 'localized-text',\n    templateUrl: './localized-text.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedTextComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n    </span>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { finalize } from 'rxjs/operators';\n\nimport { ChangeRequest, AbstractAction } from '@registry/model/crtable';\nimport { EventService } from '@shared/service';\nimport { GeoObject } from '@registry/model/registry';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\t  getAllActions( requestId: string ): Promise<AbstractAction[]> {\n        let params: HttpParams = new HttpParams();\n\n        if ( requestId != null ) {\n            params = params.set( 'requestId', requestId );\n\t\t}\n\t\t\n        this.eventService.start();\n\n        return this.http\n            .get<AbstractAction[]>( acp + '/changerequest/getAllActions', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\n//    fetchData( cb: any, requestId: string ): Promise<HttpResponse> {\n//        let params: HttpParams = new HttpParams();\n//\n//        if ( requestId != null ) {\n//            params = params.set( 'requestId', requestId );\n//        }\n//\n//        this.eventService.start();\n//\n//        return this.http\n//            .get( acp + '/changerequest/getAllActions', { params: params } )\n//            .finally(() => {\n//                this.eventService.complete();\n//            } )\n//            .toPromise()\n//            .then( response => {\n//                cb( response.json() );\n//\n//                return response;\n//            } )\n//    }\n\n    applyAction( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyAction', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\tapplyActionStatusProperties( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyActionStatusProperties', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\t\n    lockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/lockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/unlockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    getAllRequests(filter: string): Promise<ChangeRequest[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tparams = params.set('filter', filter );\n\n        return this.http.get<ChangeRequest[]>( acp + '/changerequest/get-all-requests', { params: params } )\n            .toPromise();\n    }\n\n    getRequestDetails( requestId: string ): Promise<ChangeRequest> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'requestId', requestId );\n\n        this.eventService.start();\n\n        return this.http.get<ChangeRequest>( acp + '/changerequest/get-request-details', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n\tconfirmChangeRequest( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/confirm-change-request', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n    execute( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/execute-actions', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    rejectAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/reject-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    approveAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/approve-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    submitChangeRequest( actions: string ): Promise<GeoObject> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'actions', actions )\n\n        this.eventService.start();\n\n        return this.http.post<GeoObject>( acp + '/cgr/submitChangeRequest', {actions: actions}, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from '@registry/model/io';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    importSpreadsheet( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport( configuration: ImportConfiguration ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/cancel-import', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    importShapefile( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    listGeoObjectTypes( includeLeafTypes: boolean ): Promise<{ label: string, code: string, orgCode: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'includeLeafTypes', includeLeafTypes.toString() );\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>( acp + '/cgr/geoobjecttype/list-types', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors( code: string, hierarchyCode: string, includeInheritedTypes:boolean ): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'hierarchyCode', hierarchyCode );\r\n        params = params.set( 'includeInheritedTypes', includeInheritedTypes.toString() );\r\n\r\n        return this.http\r\n            .get<Location[]>( acp + '/cgr/geoobjecttype/get-ancestors', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType( code: string, includeTypes: boolean ): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'includeTypes', includeTypes.toString() );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>( acp + '/cgr/geoobjecttype/get-hierarchies', { params: params } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string ): Promise<any> {\r\n        \r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym( entityId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/geo-synonym/createGeoEntitySynonym', JSON.stringify( { entityId: entityId, label: label } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym( synonymId: string, vOid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geo-synonym/deleteGeoEntitySynonym', JSON.stringify( { synonymId: synonymId, vOid: vOid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    getTermSuggestions( mdAttributeId: string, text: string, limit: string ): Promise<{ text: string, data: any }[]> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'mdAttributeId', mdAttributeId );\r\n        params = params.set( 'text', text );\r\n        params = params.set( 'limit', limit );\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>( acp + '/uploader/getClassifierSuggestions', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTermSynonym( classifierId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { classifierId: classifierId, label: label } );\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/uploader/createClassifierSynonym', data, { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym( synonymId: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { synonymId: synonymId } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/uploader/deleteClassifierSynonym', data, { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTerm( label: string, code: string, parentTermCode: string ): Promise<Term> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm( parentTermCode: string, termCode: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { 'parentTermCode': parentTermCode, 'termCode': termCode } ), { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '@shared/service';\n\nimport { AllLocaleInfo } from '@registry/model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\nimport { LocationInformation } from '@registry/model/location-manager';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) {\r\n\t\t(mapboxgl as any).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNWE5bWkwazYwNGFtb3loOGxsbjR1In0.ZNEwT-pBnGookEb-BF_jQQ';\r\n\t}\r\n\r\n\troots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tif (typeCode != null) {\r\n\t\t\tparams = params.set('typeCode', typeCode);\r\n\t\t}\r\n\r\n\t\tif (hierarchyCode != null) {\r\n\t\t\tparams = params.set('hierarchyCode', hierarchyCode);\r\n\t\t}\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<LocationInformation>(acp + '/registrylocation/roots', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tselect(code: string, typeCode: string, childTypeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\tif (childTypeCode != null) {\r\n\t\t\tparams = params.set('childTypeCode', childTypeCode);\r\n\t\t}\r\n\r\n\t\tif (hierarchyCode != null) {\r\n\t\t\tparams = params.set('hierarchyCode', hierarchyCode);\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<LocationInformation>(acp + '/registrylocation/select', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n}","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport {\n\tGeoObject, GeoObjectType, Attribute, Term, MasterList, MasterListVersion, ParentTreeNode,\r\n\tChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage, MasterListByOrg\n} from '@registry/model/registry';\r\n\r\nimport { HierarchyType } from '@registry/model/hierarchy';\r\nimport { Progress } from '@shared/model/progress';\r\n\r\nimport { Organization } from '@shared/model/core';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n\tinit(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }> {\r\n\t\treturn this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }>(acp + '/cgr/init')\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\t// param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n\tgetGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\r\n\t\tif (types != null) {\r\n\t\t\tparams = params.set('types', JSON.stringify(types));\r\n\t\t}\r\n\r\n\t\tif (hierarchies != null) {\r\n\t\t\tparams = params.set('hierarchies', JSON.stringify(hierarchies));\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObjectType[]>(acp + '/cgr/geoobjecttype/get-all', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetParentGeoObjects(childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('childId', childId)\r\n\t\tparams = params.set('childTypeCode', childTypeCode)\r\n\t\tparams = params.set('parentTypes', JSON.stringify(parentTypes))\r\n\t\tparams = params.set('recursive', JSON.stringify(recursive));\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ParentTreeNode>(acp + '/cgr/geoobject/get-parent-geoobjects', { params: params })\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tgetChildGeoObjects(parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('parentId', parentId)\r\n\t\tparams = params.set('parentTypeCode', parentTypeCode)\r\n\t\tparams = params.set('childrenTypes', JSON.stringify(childrenTypes))\r\n\t\tparams = params.set('recursive', JSON.stringify(recursive));\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ChildTreeNode>(acp + '/cgr/geoobject/getchildren', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tnewGeoObjectInstance(typeCode: string): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/cgr/geoobject/newGeoObjectInstance', JSON.stringify({ 'typeCode': typeCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObjectType>(acp + '/cgr/geoobjecttype/create', JSON.stringify({ 'gtJSON': gtJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObjectType>(acp + '/cgr/geoobjecttype/update', JSON.stringify({ \"gtJSON\": gtJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteGeoObjectType(code: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/cgr/geoobjecttype/delete', JSON.stringify({ code: code }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\taddAttributeType(geoObjTypeId: string, attribute: Attribute): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/addattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateAttributeType(geoObjTypeId: string, attribute: Attribute): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/updateattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<boolean>(acp + '/cgr/geoobjecttype/deleteattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeName': attributeName }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\taddAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Term>(acp + '/cgr/geoobjecttype/addterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termJSON': term }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Term>(acp + '/cgr/geoobjecttype/updateterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termJSON': termJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termCode': termCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObject(id: string, typeCode: string): Promise<GeoObject> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('id', id)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObject>(acp + '/cgr/geoobject/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<number[]>(acp + '/cgr/geoobject/get-bounds', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\t\tparams = params.set('date', date);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<number[]>(acp + '/cgr/geoobject-time/get-bounds', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObject>(acp + '/cgr/geoobject/get-code', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetHierarchiesForGeoObject(code: string, typeCode: string): Promise<HierarchyOverTime[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<HierarchyOverTime[]>(acp + '/cgr/geoobject/get-hierarchies-over-time', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tgetGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string, date: string): Promise<GeoObject> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\ttext: text,\r\n\t\t\ttype: type,\r\n\t\t} as any;\r\n\r\n\t\tif (parent != null && hierarchy != null) {\r\n\t\t\tparams.parent = parent;\r\n\t\t\tparams.hierarchy = hierarchy;\r\n\t\t}\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams.date = date;\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObject>(acp + '/cgr/geoobject/suggestions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\ttext: text,\r\n\t\t\ttype: type,\r\n\t\t} as any;\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObject>(acp + '/cgr/geoobject/suggestions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/etl/get-active', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/etl/get-completed', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set(\"historyId\", historyId);\r\n\t\tparams = params.set(\"pageSize\", pageSize.toString());\r\n\t\tparams = params.set(\"pageNumber\", pageNumber.toString())\r\n\t\tparams = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ScheduledJob>(acp + '/etl/get-import-details', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set(\"historyId\", historyId);\r\n\t\tparams = params.set(\"pageSize\", pageSize.toString());\r\n\t\tparams = params.set(\"pageNumber\", pageNumber.toString())\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ScheduledJob>(acp + '/etl/get-export-details', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tresolveScheduledJob(historyId: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/etl/import-resolve', JSON.stringify({ historyId: historyId }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tsubmitValidationResolve(config: any): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/etl/validation-resolve', JSON.stringify({ config: config }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tsubmitErrorResolve(config: any): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/etl/error-resolve', JSON.stringify({ config: config }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>(acp + '/master-list/list-all', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListHistory(oid: string, versionType: string): Promise<MasterList> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\t\tparams = params.set('versionType', versionType);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList>(acp + '/master-list/versions', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetAllMasterListVersions(): Promise<MasterList[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList[]>(acp + '/master-list/list-all-versions', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListVersion(oid: string): Promise<MasterListVersion> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterListVersion>(acp + '/master-list/version', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetLocales(): Promise<string[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<string[]>(acp + '/localization/get-locales', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\t// let params: HttpParams = new HttpParams();\r\n\t\t// params = params.set( 'geoObjectCode', geoObjectCode );\r\n\t\t// params = params.set( 'geoObjectTypeCode', geoObjectTypeCode );\r\n\t\t// params = params.set( 'attributeName', attributeName );\r\n\r\n\t\t// return this.http\r\n\t\t//     .get<ValueOverTime[]>( acp + '/cgr/geoobject/getAttributeVersions', { params: params } )\r\n\t\t//     .toPromise();\r\n\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', geoObjectCode);\r\n\t\tparams = params.set('typeCode', geoObjectTypeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObjectOverTime>(acp + '/cgr/geoobject-time/get-code', { params: params })\r\n\t\t\t.toPromise();\r\n\r\n\t}\r\n\r\n\tnewGeoObjectOverTime(typeCode: string): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/cgr/geoobject-time/newGeoObjectInstance', JSON.stringify({ 'typeCode': typeCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// getAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string ): any[] {\r\n\t//     let test =[\r\n\t//         {\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":{\"localeValues\":[\r\n\t//             {\"locale\":\"defaultLocale\",\"value\":\"Anlong Veaeng\"}]}}\r\n\t//     ]\r\n\r\n\t//     // let test = [{\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":\"test\"}];\r\n\r\n\t//     return test;\r\n\t// }\r\n\r\n\r\n\tsetAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\tgeoObjectCode: geoObjectCode,\r\n\t\t\tgeoObjectTypeCode: geoObjectTypeCode,\r\n\t\t\tattributeName: attributeName,\r\n\t\t\tcollection: collection\r\n\r\n\t\t} as any;\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Response>(acp + '/cgr/geoobject/setAttributeVersions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateMasterList(list: MasterList): Promise<MasterList> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/master-list/create', JSON.stringify({ list: list }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateMasterListVersion(oid: string, forDate: string): Promise<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterListVersion>(acp + '/master-list/create-version', JSON.stringify({ oid: oid, forDate: forDate }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tpublishMasterListVersions(oid: string): Promise<{ job: string }> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<{ job: string }>(acp + '/master-list/publish-versions', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteMasterList(oid: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/master-list/remove', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tdeleteMasterListVersion(oid: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/master-list/remove-version', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tpublishMasterList(oid: string): Observable<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\treturn this.http.post<MasterListVersion>(acp + '/master-list/publish', JSON.stringify({ oid: oid }), { headers: headers });\r\n\t}\r\n\r\n\tgetMasterList(oid: string): Promise<MasterList> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList>(acp + '/master-list/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n\tapplyGeoObjectEdit(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = { parentTreeNode: parentTreeNode, geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n\t\tif (notes != null) {\r\n\t\t\tparams['notes'] = notes;\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/geoobject-editor/apply', JSON.stringify(params), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdata(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid,\r\n\t\t\tsort: sort\r\n\t\t} as any;\r\n\r\n\t\tif (pageNumber != null) {\r\n\t\t\tparams.pageNumber = pageNumber;\r\n\t\t}\r\n\r\n\t\tif (pageSize != null) {\r\n\t\t\tparams.pageSize = pageSize;\r\n\t\t}\r\n\r\n\t\tif (filter.length > 0) {\r\n\t\t\tparams.filter = filter;\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/master-list/data', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tvalues(oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[]): Promise<{ label: string, value: string }[]> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid,\r\n\t\t\tattributeName: attributeName,\r\n\t\t\tvalueAttribute: valueAttribute\r\n\t\t} as any;\r\n\r\n\t\tif (filter.length > 0) {\r\n\t\t\tparams.filter = filter;\r\n\t\t}\r\n\r\n\t\tif (value != null && value.length > 0) {\r\n\t\t\tparams.value = value;\r\n\t\t}\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<{ label: string, value: string }[]>(acp + '/master-list/values', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tpublishShapefile(oid: string): Promise<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid\r\n\t\t} as any;\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterListVersion>(acp + '/master-list/generate-shapefile', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tprogress(oid: string): Promise<Progress> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Progress>(acp + '/master-list/progress', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListsByOrg(): Promise<{ locales: string[], orgs: MasterListByOrg[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + '/master-list/list-org', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/master-list/get-publish-jobs', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n\tgetOrganizations(): Promise<Organization[]> {\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Organization[]>(acp + '/cgr/organizations/get-all')\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service';\n\nimport { PageResult } from '@shared/model/core'\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from '@registry/model/registry'\nimport { CustomAttributeConfig } from '@registry/model/sync'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<SynchronizationConfig>>(acp + '/synchronization-config/get-all', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tget(oid: string): Promise<SynchronizationConfig> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<SynchronizationConfig>(acp + '/synchronization-config/get', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\t\n\tgetCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<CustomAttributeConfig[]> {\n\n    let params: HttpParams = new HttpParams();\n    params = params.set('externalId', externalId);\n    params = params.set('geoObjectTypeCode', geoObjectTypeCode);\n\n    this.eventService.start();\n\n    return this.http\n      .get<CustomAttributeConfig[]>(acp + '/synchronization-config/get-custom-attr', { params: params })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\t\n\tgetConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n\n    let params: HttpParams = new HttpParams();\n    params = params.set('externalSystemId', externalSystemId);\n    params = params.set('hierarchyTypeCode', hierarchyTypeCode);\n\n    this.eventService.start();\n\n    return this.http\n      .get<CustomAttributeConfig[]>(acp + '/synchronization-config/get-config-for-es', { params: params })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n\tapply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<SynchronizationConfig>(acp + '/synchronization-config/apply', JSON.stringify({ config: config }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tedit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tlet params = {};\n\n\t\tif (oid != null) {\n\t\t\tparams = { oid: oid };\n\t\t}\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(acp + '/synchronization-config/edit', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tunlock(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/unlock', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\trun(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/run', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tgetJobs(oid:string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n//\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<ExportScheduledJob>>(acp + '/synchronization-config/get-jobs', { params: params })\n//\t\t\t.pipe(finalize(() => {\n//\t\t\t\tthis.eventService.complete();\n//\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { PaginationPage } from '@registry/model/registry';\r\nimport { EventService } from '@shared/service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n\tgetMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PaginationPage> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('orderBy', 'createDate');\r\n\t\tparams = params.set('pageNum', pageNum.toString());\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('whereStatus', whereStatus);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/tasks/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcompleteTask(taskId: string): Promise<Response> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/tasks/complete', JSON.stringify({ 'id': taskId }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tsetTaskStatus(taskId: string, status: string): Promise<Response> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/tasks/setTaskStatus', JSON.stringify({ 'id': taskId, 'status': status }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n      \n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.hierarchy\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"configuration.hierarchy\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of configuration.hierarchies\" value={{hierarchy.code}}>{{hierarchy.label}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy, true ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild, SimpleChanges, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from '@registry/service';\n\nimport { Map, LngLatBounds, NavigationControl } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport * as mapboxgl from 'mapbox-gl';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor-map[geometryType]',\n    templateUrl: './geoobject-editor-map.component.html',\n    styleUrls: ['./geoobject-editor-map.component.css']\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. We will invoke this event with GeoJSON when the user makes an edit to the geometry.\n     */\n    @Output() geometryChange = new EventEmitter<any>();\n\n    /*\n     * Optional. If specified, we will diff based on this GeoJSON geometry.\n     */\n    @Input() preGeometry: any;\n\n    /*\n     * Optional. If we are read-only, this will be displayed as a layer. If we are not, it will be editable.\n     */\n    @Input() postGeometry: any;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    /*\n     * Optional. If specified, we will display an edit button on the map, and when it is clicked we will emit this event.\n     */\n    @Output() onClickEdit = new EventEmitter<void>();\n\n    @ViewChild( \"simpleEditControl\" ) simpleEditControl;\n\n    @ViewChild( \"mapDiv\" ) mapDiv;\n\n    map: Map;\n\n    editingControl: any;\n\n    constructor( private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            //this.registryService.getGeoObjectOverTime( \"22\", \"Province\" )\n            //.then( geoObject => {\n\n            ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\n\n            this.mapDiv.nativeElement.id = Math.floor( Math.random() * ( 899999 ) ) + 100000;\n\n            this.map = new Map( {\n                container: this.mapDiv.nativeElement.id,\n                style: 'mapbox://styles/mapbox/satellite-v9',\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            } );\n\n            this.map.on( 'load', () => {\n                this.initMap();\n            } );\n\n            this.map.on( 'draw.create', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.delete', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.update', () => {\n                this.onValidChange();\n            } );\n\n            //} ).catch(( err: HttpErrorResponse ) => {\n            //    this.error( err );\n            //} );\n        }, 10 );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['preGeometry'] || changes['postGeometry'] ) {\n            this.reload();\n        }\n    }\n\n    public reload(): void {\n        if ( this.map != null ) {\n            this.removeLayers();\n            this.addLayers();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    getIsValid(): boolean {\n        if ( !this.readOnly ) {\n            let isValid: boolean = false;\n\n            if ( this.editingControl != null ) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if ( featureCollection.features.length > 0 ) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    private onValidChange(): void {\n        this.geometryChange.emit( this.saveDraw() );\n    }\n\n    initMap(): void {\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            this.onValidChange();\n        } );\n\n\n        this.addLayers();\n\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.zoomToBbox();\n        }\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        if ( !this.readOnly ) {\n            this.enableEditing();\n        }\n        else {\n            this.addEditButton();\n        }\n\n        this.onValidChange();\n    }\n\n    addEditButton(): void {\n        this.simpleEditControl.editEmitter.subscribe( versionObj => {\n            this.onClickEdit.emit();\n        } );\n\n        this.map.addControl( this.simpleEditControl );\n    }\n\n    enableEditing(): void {\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: false,\n                    polygon: true,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: true,\n                    line_string: false,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: true,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        this.map.addControl( this.editingControl );\n\n        if ( this.postGeometry != null ) {\n            this.editingControl.add( this.postGeometry );\n        }\n    }\n\n    removeSource( prefix: string ): void {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.map.removeLayer( sourceName + \"-polygon\" );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.map.removeLayer( sourceName + \"-point\" );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\" ) {\n            this.map.removeLayer( sourceName + \"-line\" );\n        }\n\n        this.map.removeSource( sourceName );\n    }\n\n    removeLayers(): void {\n        if ( this.map.getSource( \"pre-geoobject\" ) ) {\n            this.removeSource( \"pre\" );\n        }\n        if ( this.map.getSource( \"post-geoobject\" ) ) {\n            this.removeSource( \"post\" );\n        }\n    }\n\n    addLayers(): void {\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.renderGeometryAsLayer( this.preGeometry, \"pre\", \"#EFA22E\" )\n        }\n        if ( this.readOnly && this.postGeometry != null && this.postGeometry !== \"\") {\n            this.renderGeometryAsLayer( this.postGeometry, \"post\", \"#3368EF\" );\n        }\n    }\n\n    renderGeometryAsLayer( geometry: any, prefix: string, color: string ) {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        this.map.addSource( sourceName, {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            // Polygon Layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-polygon\",\n                \"type\": \"fill\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7,\n                },\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            // Point layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-point\",\n                \"type\": \"circle\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": '#FFFFFF'\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.map.addLayer( {\n                \"id\": sourceName + \"-line\",\n                \"source\": sourceName,\n                \"type\": \"line\",\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            } );\n        }\n\n        ( <any>this.map.getSource( sourceName ) ).setData( geometry );\n    }\n\n    zoomToBbox(): void {\n        if ( this.bboxCode != null && this.bboxType != null ) {\n            if ( this.bboxDate == null ) {\n                this.registryService.getGeoObjectBounds( this.bboxCode, this.bboxType ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n            else {\n                this.registryService.getGeoObjectBoundsAtDate( this.bboxCode, this.bboxType, this.bboxDate ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n        }\n    }\n\n    saveDraw(): any {\n        if ( this.editingControl != null ) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if ( featureCollection.features.length > 0 ) {\n\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if ( this.geometryType === \"MULTIPOLYGON\" ) {\n                    let polygons = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPolygon' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                polygons.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            polygons.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: 'MultiPolygon'\n                    };\n                }\n                else if ( this.geometryType === \"MULTIPOINT\" ) {\n                    let points = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPoint' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                points.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            points.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: 'MultiPoint'\n                    };\n                }\n                else if ( this.geometryType === \"MULTILINE\" ) {\n                    let lines = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiLineString' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                lines.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            lines.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: 'MultiLineString'\n                    };\n                }\n                else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n\n            return this.postGeometry;\n        }\n\n        return this.postGeometry;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n        console.log( \"ERROR\", err );\n    }\n\n\n}\n","<div #mapDiv class=\"map-view-port text-left\" style=\"height:400px;\"></div>\n\n<simple-edit-control #simpleEditControl></simple-edit-control>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'toEpochDateTime',\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n    transform(date: string): any {\n        if (!date ) {\n            return date;\n        }\n       \n        return new Date(date).getTime();\n    }\n}","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { HierarchyOverTime } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { ManageParentVersionsModalComponent } from './manage-parent-versions-modal.component';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\n@Component( {\n\n    selector: 'cascading-geo-selector',\n    templateUrl: './cascading-geo-selector.html',\n} )\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n\n    @ViewChild( \"mainForm\" ) mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    constructor( private modalService: BsModalService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach( hierarchy => {\n            const object = {};\n            object['label'] = hierarchy.label;\n            object['code'] = hierarchy.code;\n\n            this.isValid = this.isValid && ( this.hierarchies.length > 0 );\n\n            hierarchy.entries.forEach( pot => {\n                const startDate = Date.parse( pot.startDate );\n                const endDate = Date.parse( pot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n                    let parents = [];\n\n                    hierarchy.types.forEach( type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if ( pot.parents[type.code] != null ) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push( parent );\n                    } );\n\n                    object['parents'] = parents;\n                }\n            } );\n\n            this.cHierarchies.push( object );\n\n        } );\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions( code: string ): void {\n\n        const hierarchy = this.hierarchies.find( h => h.code === code );\n\n        this.bsModalRef = this.modalService.show( ManageParentVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.init( hierarchy );\n        this.bsModalRef.content.onVersionChange.subscribe( hierarchy => {\n            this.calculate();\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [(ngModel)]=\"parent.geoObject.properties.displayLabel.localizedValue\" name=\"{{hierarchy.code}}-{{parent.code}}-input\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\nimport { IOService, RegistryService, HierarchyService, ChangeRequestService } from '@registry/service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term } from '@registry/model/registry';\n\n\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'submit-change-request',\n    templateUrl: './submit-change-request.component.html',\n    styleUrls: []\n} )\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    typeaheadLoading: boolean;\n\n    typeaheadNoResults: boolean;\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n\t/*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    preGeoObject: GeoObjectOverTime = null;\n\n\t/*\n\t * The state of the GeoObject after our Change Request has been approved \n\t */\n    postGeoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private date: DatePipe, private localizeService: LocalizationService,\n        private authService: AuthService ) {\n\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( this.geoObjectId, this.geoObjectType.code ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes( [], null ).then( types => {\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isGeoObjectTypeRC(types[i].organizationCode, types[i].code))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n\n\n    private onValidChange( newValid: boolean ) {\n        if ( this.preGeoObject == null ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.geometryEditor != null && !this.geometryEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.attributeEditor != null && !this.attributeEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading( e: boolean ): void {\n        this.typeaheadLoading = e;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.registryService.getGeoObjectOverTime( e.item.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n                this.postGeoObject = JSON.parse( JSON.stringify( this.preGeoObject ) ); // Object.assign is a shallow copy. We want a deep copy.\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    submit(): void {\n\n        let goSubmit: GeoObjectOverTime = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            let goGeometries: GeoObjectOverTime = this.geometryEditor.saveDraw();\n//            goSubmit.geometry = goGeometries.geometry;\n        }\n\n        let actions = [{\n            \"actionType\": \"geoobject/update\", // TODO: account for create\n            \"apiVersion\": \"1.0-SNAPSHOT\", // TODO: make dynamic\n            \"createActionDate\": new Date().getTime(),\n            \"geoObject\": goSubmit,\n            \"contributorNotes\": this.reason\n        }]\n\n        this.changeRequestService.submitChangeRequest( JSON.stringify( actions ) )\n            .then( geoObject => {\n                this.cancel();\n\n                this.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"change.request.success.message\" );\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.isValid = false;\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.preGeoObject = null;\n        this.postGeoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error( err: any ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n}","<!-- <div class=\"new-admin-design-main\" style=\"height: 100vh;\">\n    <cgr-header></cgr-header> -->\n<loading-bar></loading-bar>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <div style=\"min-height:50vh;\">\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobjecttype.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\"\n                            [(ngModel)]=\"geoObjectType\" required>\n                            <!-- <option> <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize> </option> -->\n                            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}\n                            </option>\n                        </select>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\" style=\"overflow: visible;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobject.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <input type=\"text\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\"\n                            [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\"\n                            typeaheadOptionField=\"name\" class=\"form-control\" autocomplete=\"off\" required>\n\n                    </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"preGeoObject\">\n                <geoobject-shared-attribute-editor #attributeEditor (valid)=\"this.onValidChange($event)\"\n                    [geoObjectType]=\"this.geoObjectType\" [preGeoObject]=\"this.preGeoObject\"\n                    [(postGeoObject)]=\"this.postGeoObject\" [isGeometryInlined]=\"true\">\n                </geoobject-shared-attribute-editor>\n            </div>\n\n            <div class=\"row-holder\" style=\"z-index: 0;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"change.request.reason.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" name=\"reason-input\" required></textarea>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!attributeForm.valid\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { RegistryService } from '@registry/service';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError } from '@registry/model/registry';\n\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\n\n@Component( {\n    selector: 'geoobject-editor',\n    templateUrl: './geoobject-editor.component.html',\n    styleUrls: ['./geoobject-editor.component.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n    \n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n//    /*\n//     * GeoObject Geometry Editor\n//     */\n//    @ViewChild( \"geometryEditor\" ) geometryEditor;\n//\n//    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild( \"parentSelector\" ) parentSelector;\n\n    areParentsValid: boolean = true;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n    \n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor( private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService, \n        authService: AuthService ) {\n        \n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate( votArray, startDate ): any {\n      for (let i: number = 0; i < votArray.length; ++i)\n      {\n        if (votArray[i].startDate === startDate)\n        {\n          return votArray[i];\n        }\n      }\n      \n      return null;\n    }\n\n    setMasterListId( id: string ) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    setOnSuccessCallback( func: Function ) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew( typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        } );\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError( importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean ) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n        \n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0)\n        {\n          this.hierarchies = importError.object.parents;\n          this.areParentsValid = true;\n        }\n        else\n        {\n          this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.hierarchies = retJson.hierarchies;\n          } );\n          this.areParentsValid = false;\n        }\n        \n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        \n        this.submitFunction = () => {\n          let config = {\n            historyId : historyId,\n            importErrorId: importError.id,\n            resolution: 'APPLY_GEO_OBJECT',\n            parentTreeNode: this.hierarchies,\n            geoObject: this.goSubmit,\n            isNew: importError.object.isNew\n          }\n        \n          this.registryService.submitErrorResolve( config )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting( code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject( code, typeCode );\n        this.fetchGeoObjectType( typeCode );\n        this.fetchHierarchies( code, typeCode );\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject( code: string, typeCode: string ) {\n        this.registryService.getGeoObjectOverTime( code, typeCode ).then( geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( geoObject ) ).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n            //this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n            \n            this.goSubmit = this.goPropertiesPost;\n\n//            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then( locales => {\n            this.localizeService.setLocales( locales );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchGeoObjectType( code: string ) {\n        this.registryService.getGeoObjectTypes( [code], null )\n            .then( geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n                \n                if (this.goPropertiesPre != null)\n                {\n                  this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null)\n                {\n                  this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if ( !this.geoObjectType.isGeometryEditable ) {\n//                    this.areGeometriesValid = true;\n                }\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( err );\n                //                this.error( err );\n            } );\n    }\n\n    private fetchHierarchies( code: string, typeTypeCode: string ) {\n        this.registryService.getHierarchiesForGeoObject( code, typeTypeCode )\n            .then(( hierarchies: any ) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    getTypeAheadObservable( text, typeCode ) {\n        return Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( text, typeCode ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, ptn: ParentTreeNode ): void {\n        this.registryService.getGeoObjectByCode( e.item.code, ptn.geoObject.properties.type )\n            .then( geoObject => {\n\n                ptn.geoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    private onValidChange() {\n        if ( this.attributeEditor != null ) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n//        if ( this.geometryEditor != null ) {\n//            this.areGeometriesValid = this.geometryEditor.getIsValid();\n//        }\n        if ( this.parentSelector != null ) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n        \n//        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage( nextPage: number, force: boolean = false ): void {\n        if ( nextPage === this.tabIndex && !force ) {\n            return;\n        }\n\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n        \n        if (nextPage === 2)\n        {\n          this.isEditingGeometries = true;\n        }\n        else\n        {\n          this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if ( this.attributeEditor != null ) {\n          this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if ( this.parentSelector != null ) {\n          this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n          this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n          this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    public cancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n      if ( this.isValid ) {\n        this.bsModalRef.hide();\n    \n        this.persistModelChanges();\n        \n        if (this.submitFunction == null)\n        {\n          this.registryService.applyGeoObjectEdit( this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n        else\n        {\n          this.submitFunction();\n        }\n      }\n    }\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n            \n                <div *ngIf=\"!areParentsValid\" class=\"alert alert-danger\" role=\"alert\">\n                  <localize key=\"geoobject.editor.modal.parents.must.be.assigned.message\"></localize>                \n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '@shared/service';\n\nimport { Step, StepConfig } from '@registry/model/registry';\n\n\n@Component( { \n    selector: 'step-indicator',\n    templateUrl: './step-indicator.component.html',\n    styleUrls: ['./step-indicator.css']\n} )\nexport class StepIndicatorComponent {\n\n    @Input('steps')\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n\n    constructor( private localizeService: LocalizationService ) {\n\n        this._stepConfig = {\"steps\": []};\n    }\n\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n       \n    }\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TreeNode, TreeComponent, TreeDropDirective } from 'angular-tree-component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal'\n\nimport { HierarchyType, HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\nimport { RegistryService, HierarchyService } from '@registry/service';\n\nclass Instance {\n\tactive: boolean;\n\tlabel: string;\n}\n\n@Component({\n\n\tselector: 'hierarchies',\n\ttemplateUrl: './hierarchy.component.html',\n\tstyleUrls: ['./hierarchy.css']\n})\n\nexport class HierarchyComponent implements OnInit {\n\n\t// isAdmin: boolean;\n\t// isMaintainer: boolean;\n\t// isContributor: boolean;\n\n\tinstance: Instance = new Instance();\n\thierarchies: HierarchyType[];\n\tgeoObjectTypes: GeoObjectType[] = [];\n\tnodes = [] as HierarchyNode[];\n\tcurrentHierarchy: HierarchyType = null;\n\n\thierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n\tgeoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n\t@ViewChild(TreeComponent)\n\tprivate tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n\t@ViewChild('nodeMenu') public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n\t@ViewChild('leafMenu') public leafMenuComponent: ContextMenuComponent;\n\n    /* \n     * Currently clicked on id for delete confirmation modal \n     */\n\tcurrent: TreeNode;\n\n\n\tconstructor(private hierarchyService: HierarchyService, private modalService: BsModalService,\n\t\tprivate contextMenuService: ContextMenuService, private changeDetectorRef: ChangeDetectorRef,\n\t\tprivate localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n\n\t\t// this.admin = authService.isAdmin();\n\t\t// this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\t// this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t}\n\n\tngOnInit(): void {\n\t\tthis.refreshAll(null);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tisRA(): boolean {\n\t\treturn this.authService.isRA();\n\t}\n\n\tisOrganizationRA(orgCode: string): boolean {\n\t\treturn this.authService.isOrganizationRA(orgCode);\n\t}\n\n\tpublic refreshAll(desiredHierarchy) {\n\t\tthis.registryService.init().then(response => {\n\t\t\tthis.localizeService.setLocales(response.locales);\n\n\t\t\tthis.geoObjectTypes = response.types;\n\n\t\t\tthis.geoObjectTypes.sort((a, b) => {\n\t\t\t\tif (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n\t\t\t\telse if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n\t\t\t\telse return 0;\n\t\t\t});\n\n\t\t\tlet pos = this.getGeoObjectTypePosition(\"ROOT\");\n\t\t\tif (pos) {\n\t\t\t\tthis.geoObjectTypes.splice(pos, 1);\n\t\t\t}\n\n\t\t\tthis.setHierarchies(response.hierarchies);\n\n\t\t\tthis.setNodesOnInit(desiredHierarchy);\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n\t\treturn (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n\t}\n\n\tpublic excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n\t\treturn (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n\t}\n\n\tprivate setNodesOnInit(desiredHierarchy): void {\n\n\t\tlet index = -1;\n\n\t\tif (desiredHierarchy != null) {\n\t\t\tindex = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n\t\t}\n\t\telse if (this.hierarchies.length > 0) {\n\t\t\tindex = 0;\n\t\t}\n\n\t\tif (index > -1) {\n\t\t\tlet hierarchy = this.hierarchies[index];\n\n\t\t\tthis.nodes = hierarchy.rootGeoObjectTypes;\n\n\t\t\tthis.currentHierarchy = hierarchy;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this.tree) {\n\t\t\t\t\tthis.tree.treeModel.expandAll();\n\t\t\t\t}\n\t\t\t}, 1)\n\t\t}\n\t}\n\n\tprivate setNodesForHierarchy(hierarchyType: HierarchyType): void {\n\t\tfor (let i = 0; i < this.hierarchies.length; i++) {\n\t\t\tlet hierarchy = this.hierarchies[i];\n\t\t\tif (hierarchy.code === hierarchyType.code) {\n\t\t\t\tthis.nodes = hierarchyType.rootGeoObjectTypes;\n\t\t\t\tthis.currentHierarchy = hierarchy;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\tthis.tree.treeModel.expandAll();\n\t\t}, 1)\n\t}\n\n\tprivate getHierarchy(hierarchyId: string): HierarchyType {\n\t\tlet target: HierarchyType = null;\n\t\tthis.hierarchies.forEach(hierarchy => {\n\t\t\tif (hierarchyId === hierarchy.code) {\n\t\t\t\ttarget = hierarchy;\n\t\t\t}\n\t\t});\n\n\t\treturn target;\n\t}\n\n\tprivate setHierarchies(data: HierarchyType[]): void {\n\t\tlet hierarchies: HierarchyType[] = [];\n\t\tdata.forEach((hierarchyType, index) => {\n\n\t\t\tif (hierarchyType.rootGeoObjectTypes.length > 0) {\n\t\t\t\thierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n\t\t\t\t\tthis.processHierarchyNodes(rootGeoObjectType);\n\t\t\t\t})\n\t\t\t}\n\n\t\t\thierarchies.push(hierarchyType);\n\n\t\t});\n\n\t\tthis.hierarchies = hierarchies\n\n\t\tthis.hierarchies.sort((a, b) => {\n\t\t\tif (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n\t\t\telse if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n\t\t\telse return 0;\n\t\t});\n\t}\n\n\tprivate updateHierarchy(code: string, rootGeoObjectTypes: HierarchyNode[]): void {\n\t\tthis.hierarchies.forEach(hierarchy => {\n\t\t\tif (hierarchy.code === code) {\n\t\t\t\thierarchy.rootGeoObjectTypes = rootGeoObjectTypes;\n\t\t\t}\n\t\t})\n\t}\n\n    /**\n     * Set properties required by angular-tree-component using recursion.\n     */\n\tprivate processHierarchyNodes(node: HierarchyNode) {\n\t\tnode.label = this.getHierarchyLabel(node.geoObjectType);\n\n\t\tnode.children.forEach(child => {\n\t\t\tthis.processHierarchyNodes(child);\n\t\t})\n\t}\n\n\tprivate getHierarchyLabel(geoObjectTypeCode: string): string {\n\t\tlet label: string = null;\n\t\tthis.geoObjectTypes.forEach(function(gOT) {\n\t\t\tif (gOT.code === geoObjectTypeCode) {\n\t\t\t\tlabel = gOT.label.localizedValue;\n\t\t\t}\n\t\t});\n\n\t\treturn label;\n\t}\n\n\tpublic handleOnMenu(node: any, $event: any): void {\n\t\tif (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n\t\t\tthis.contextMenuService.show.next({\n\t\t\t\tcontextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n\t\t\t\tevent: $event,\n\t\t\t\titem: node,\n\t\t\t});\n\t\t\t$event.preventDefault();\n\t\t\t$event.stopPropagation();\n\t\t}\n\t\telse {\n\t\t\t$event.preventDefault();\n\t\t\t$event.stopPropagation();\n\t\t}\n\t}\n\n\tpublic treeNodeOnClick(node: TreeNode, $event: any): void {\n\n\t\tnode.treeModel.setFocusedNode(node);\n\n\t\tif (node.treeModel.isExpanded(node)) {\n\t\t\tnode.collapse();\n\t\t}\n\t\telse {\n\t\t\tnode.treeModel.expandAll();\n\t\t}\n\t}\n\n\toptions = {\n\t\t//\t\t  allowDrag: (node:TreeNode) => node.isLeaf,\n\t\t//\t\t  allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n\t\t// return true / false based on element, to.parent, to.index. e.g.\n\t\t//\t\t\t    return parent.hasChildren;\n\t\t//\t\t\t  },\n\t\tdisplayField: \"label\",\n\t\tactionMapping: {\n\t\t\tmouse: {\n\t\t\t\tclick: (tree: TreeComponent, node: TreeNode, $event: any) => {\n\t\t\t\t\tthis.treeNodeOnClick(node, $event);\n\t\t\t\t},\n\t\t\t\tcontextMenu: (tree: any, node: any, $event: any) => {\n\t\t\t\t\tthis.handleOnMenu(node, $event);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmouse: {\n\t\t\t//\t            drop: (tree: TreeComponent, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n\t\t\t//\t              console.log('drag', from, to); // from === {name: 'first'}\n\t\t\t//\t              // Add a node to `to.parent` at `to.index` based on the data in `from`\n\t\t\t//\t              // Then call tree.update()\n\t\t\t//\t            }\n\t\t}\n\t};\n\n\tpublic hierarchyOnClick(event: any, item: any) {\n\t\tlet hierarchyId = item.code;\n\n\t\tthis.currentHierarchy = item;\n\n\t\tthis.nodes = [];\n\n\t\tif (this.getHierarchy(hierarchyId).rootGeoObjectTypes.length > 0) {\n\t\t\t// TODO: should rootGeoObjectTypes be hardcoded to only one entry in the array?\n\t\t\tthis.nodes.push(this.getHierarchy(hierarchyId).rootGeoObjectTypes[0]);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this && this.tree) {\n\t\t\t\t\tthis.tree.treeModel.expandAll();\n\t\t\t\t}\n\t\t\t}, 1)\n\t\t}\n\n\t\tif (this.tree) {\n\t\t\tthis.tree.treeModel.update();\n\t\t}\n\t}\n\n\tpublic createHierarchy(): void {\n\t\tthis.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\n\t\t(<CreateHierarchyTypeModalComponent>this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n\n\t\t\tthis.hierarchies.push(data);\n\t\t});\n\t}\n\n\tpublic deleteHierarchyType(obj: HierarchyType): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.data = obj.code;\n\t\tthis.bsModalRef.content.type = \"DANGER\";\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.removeHierarchyType(data);\n\t\t});\n\t}\n\n\tpublic editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n\t\tthis.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.edit = true;\n\t\tthis.bsModalRef.content.readOnly = readOnly;\n\t\tthis.bsModalRef.content.hierarchyType = obj;\n\t\tthis.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n\t\t\tlet pos = this.getHierarchyTypePosition(data.code);\n\n\t\t\tthis.hierarchies[pos].label = data.label;\n\t\t\tthis.hierarchies[pos].description = data.description;\n\t\t});\n\t}\n\n\tpublic removeHierarchyType(code: string): void {\n\t\tthis.hierarchyService.deleteHierarchyType(code).then(response => {\n\n\t\t\tlet pos = this.getHierarchyTypePosition(code);\n\t\t\tthis.hierarchies.splice(pos, 1);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic createGeoObjectType(): void {\n\t\tthis.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\n\t\t(<CreateGeoObjTypeModalComponent>this.bsModalRef.content).onGeoObjTypeCreate.subscribe(data => {\n\t\t\tthis.geoObjectTypes.push(data);\n\t\t});\n\t}\n\n\tpublic deleteGeoObjectType(obj: GeoObjectType): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + obj.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.data = obj.code;\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.removeGeoObjectType(data);\n\t\t});\n\t}\n\n\tpublic removeGeoObjectType(code: string): void {\n\t\tthis.registryService.deleteGeoObjectType(code).then(response => {\n\n\t\t\tlet pos = this.getGeoObjectTypePosition(code);\n\t\t\tthis.geoObjectTypes.splice(pos, 1);\n\n\t\t\t//          const parent = node.parent;\n\t\t\t//          let children = parent.data.children;\n\t\t\t//\n\t\t\t//          parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n\t\t\t//\n\t\t\t//          if ( parent.data.children.length === 0 ) {\n\t\t\t//              parent.data.hasChildren = false;\n\t\t\t//          }\n\t\t\t//\n\t\t\t//        this.tree.treeModel.update();\n\t\t\t//this.setNodesOnInit();\n\n\t\t\tthis.refreshAll(this.currentHierarchy);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'manage-geoobjecttype-modal'\n\t\t});\n\n\t\tgeoObjectType.attributes.sort((a, b) => {\n\t\t\tif (a.label.localizedValue < b.label.localizedValue) return -1;\n\t\t\telse if (a.label.localizedValue > b.label.localizedValue) return 1;\n\t\t\telse return 0;\n\t\t});\n\t\tthis.bsModalRef.content.geoObjectType = geoObjectType;\n\t\tthis.bsModalRef.content.readOnly = readOnly;\n\n\t\t(<ManageGeoObjectTypeModalComponent>this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n\n\t\t\tlet position = this.getGeoObjectTypePosition(data.code);\n\t\t\tif (position) {\n\t\t\t\tthis.geoObjectTypes[position] = data;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getHierarchyTypePosition(code: string): number {\n\t\tfor (let i = 0; i < this.hierarchies.length; i++) {\n\t\t\tlet obj = this.hierarchies[i];\n\t\t\tif (obj.code === code) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getGeoObjectTypePosition(code: string): number {\n\t\tfor (let i = 0; i < this.geoObjectTypes.length; i++) {\n\t\t\tlet obj = this.geoObjectTypes[i];\n\t\t\tif (obj.code === code) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic addChildAndRootToHierarchy(): void {\n\t\tconst that = this;\n\n\t\tthis.bsModalRef = this.modalService.show(AddChildToHierarchyModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n\t\tthis.bsModalRef.content.parent = \"ROOT\";\n\t\tthis.bsModalRef.content.toRoot = true;\n\t\tthis.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\t\tthis.bsModalRef.content.nodes = this.nodes;\n\n\t\t(<AddChildToHierarchyModalComponent>this.bsModalRef.content).onNodeChange.subscribe(hierarchyType => {\n\n\t\t\tthat.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\t\t\tthat.updateHierarchy(hierarchyType.code, hierarchyType.rootGeoObjectTypes)\n\n\t\t\tthat.setNodesForHierarchy(hierarchyType);\n\n\t\t\tif (this.tree) {\n\t\t\t\tthis.tree.treeModel.update();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic addChildToHierarchy(parent: TreeNode): void {\n\t\tconst that = this;\n\t\tthat.current = parent;\n\n\t\tthis.bsModalRef = this.modalService.show(AddChildToHierarchyModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'upload-modal'\n\t\t});\n\t\tthis.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n\t\tthis.bsModalRef.content.parent = parent;\n\t\tthis.bsModalRef.content.toRoot = false;\n\t\tthis.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\t\tthis.bsModalRef.content.nodes = this.nodes;\n\n\t\t(<AddChildToHierarchyModalComponent>this.bsModalRef.content).onNodeChange.subscribe(hierarchyType => {\n\t\t\tconst d = that.current.data;\n\n\n\t\t\tthat.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\t\t\tthat.updateHierarchy(hierarchyType.code, hierarchyType.rootGeoObjectTypes)\n\n\t\t\tthat.setNodesForHierarchy(hierarchyType);\n\n\t\t\tif (this.tree) {\n\t\t\t\tthis.tree.treeModel.update();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic deleteTreeNode(node: TreeNode): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + node.data.label + ']';\n\t\tthis.bsModalRef.content.data = node;\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.removeTreeNode(data);\n\t\t});\n\t}\n\n\tpublic removeTreeNode(node: TreeNode): void {\n\t\tthis.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, node.parent.data.geoObjectType, node.data.geoObjectType).then(data => {\n\n\t\t\tif (node.parent.data.geoObjectType == null) {\n\t\t\t\tthis.nodes = [];\n\t\t\t\t// this.refreshAll(null);\n\t\t\t\t//return;\n\t\t\t}\n\n\t\t\tconst parent = node.parent;\n\t\t\tlet children = parent.data.children;\n\n\t\t\t// Update the tree\n\t\t\tparent.data.children = children.filter((n: any) => n.id !== node.data.id);\n\t\t\tif (parent.data.children.length === 0) {\n\t\t\t\tparent.data.hasChildren = false;\n\t\t\t}\n\t\t\tthis.tree.treeModel.update();\n\n\t\t\t// Update the available GeoObjectTypes\n\t\t\tthis.changeDetectorRef.detectChanges()\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tpublic isActive(item: any) {\n\t\treturn this.currentHierarchy === item;\n\t};\n\n\tpublic onDrop($event: any) {\n\t\t// Dropped $event.element\n\t\tthis.removeTreeNode($event.element)\n\t}\n\n\tpublic allowDrop(element: Element) {\n\t\t// Return true/false based on element\n\t\treturn true;\n\t}\n\n\tpublic error(err: HttpErrorResponse): void {\n\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <loading-bar></loading-bar>\n  \n  <div id=\"app-container\" class=\"container-fluid\">\n  \n  <!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n    \n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.types.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <!-- to filter out already assigned types use this pipe > geoobjecttype:nodes -->\n          <li class=\"list-group-item\" *ngFor=\"let type of geoObjectTypes\">\n            {{type.label.localizedValue}} <i *ngIf=\"type.isLeaf === 'true'\" class=\"fa fa-leaf\" style=\"font-size:15px;cursor:auto;margin-left:5px;\" aria-hidden=\"true\"></i> \n            \n            <span *ngIf=\"isOrganizationRA(type.organizationCode)\">\n              <i class=\"fa fa-times delete-btn clickable pull-right\" *ngIf=\"!excludeGeoObjectTypeDeletes(type)\" (click)=\"deleteGeoObjectType(type)\" [title]=\"'button.delete.helptext' | localize\"></i> \n              <i class=\"fa fa-pencil clickable pull-right\" (click)=\"manageGeoObjectType(type, false)\" [title]=\"'button.edit.helptext' | localize\"></i> \n            </span>\n            \n            <span *ngIf=\"!isOrganizationRA(type.organizationCode)\">\n              <i class=\"fa fa-eye clickable pull-right\" (click)=\"manageGeoObjectType(type, true)\" [title]=\"'button.view.helptext' | localize\"> </i> \n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createGeoObjectType()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n        \n      </div>\n    \n    \n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <li *ngFor=\"let hierarchy of hierarchies;\" class=\"list-group-item clickable\" [ngClass]=\"{active: isActive(hierarchy)}\" (click)=\"hierarchyOnClick($event,hierarchy)\">\n            <i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}} \n\n            <span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\">\n              <i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\" class=\"fa fa-times delete-btn clickable pull-right\" (click)=\"deleteHierarchyType(hierarchy)\" [title]=\"'button.delete.helptext' | localize\"></i> \n              <i class=\"fa fa-pencil pull-right clickable\" (click)=\"editHierarchyType(hierarchy, false)\" [title]=\"'button.edit.helptext' | localize\"> </i>            \n            </span>\n            \n            <span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\">\n              <i class=\"fa fa-eye pull-right clickable\" (click)=\"editHierarchyType(hierarchy, true)\" [title]=\"'button.view.helptext' | localize\"> </i>\n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createHierarchy()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <h3> \n            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n        </h3>\n        <hr>\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n          <div>\n            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n          </div>\n        </div>\n      </div>\n            \n    </div>\n    \n  </div>\n  \n  <context-menu #nodeMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"addChildToHierarchy($event.item)\">\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>\n    </ng-template>\n  </context-menu>\n  \n  <context-menu #leafMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>  {{item?.data.label.localizedValue}}\n    </ng-template>\n  </context-menu>\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '@shared/component';\nimport { HierarchyType } from '@registry/model/hierarchy';\nimport { RegistryService, HierarchyService } from '@registry/service';\n\nimport { LocalizationService, AuthService } from '@shared/service';\n\n\n@Component( {\n    selector: 'create-hierarchy-type-modal',\n    templateUrl: './create-hierarchy-type-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n    \n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n    \n    readOnly: boolean = false;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    constructor( private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"rootGeoObjectTypes\": [],\n            \"organizationCode\": \"\"\n        };\n        \n        this.registryService.getOrganizations().then(orgs => {\n        \n          // Filter out organizations they're not RA's of, unless we're readOnly.\n          if (!this.readOnly)\n          {\n            this.organizations = [];\n            \n            for (var i = 0; i < orgs.length; ++i)\n            {\n              if (this.auth.isOrganizationRA(orgs[i].code))\n              {\n                this.organizations.push(orgs[i]);\n              }\n            }\n          }\n          else\n          {\n            this.organizations = orgs;\n          }\n          \n          if (!this.edit && this.organizations.length === 1)\n          {\n            this.hierarchyType.organizationCode = this.organizations[0].code;\n          }\n          \n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n        \n        if (this.readOnly)\n        {\n          this.bsModalRef.hide();\n          return;\n        }\n\n        if ( this.edit ) {\n            this.hierarchyService.updateHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchyService.createHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.description.localeValues\">\n        <label for=\"descriptionInput\">\n          <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n          class=\"form-control\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"hierarchyType.organizationCode\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"hierarchyType.organizationCode\" name=\"organization\" disabled required></span>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '@shared/component';\nimport { HierarchyType, HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\nimport { HierarchyService } from '@registry/service';\n\n\n@Component( {\n    selector: 'add-child-to-hierarchy-modal',\n    templateUrl: './add-child-to-hierarchy-modal.component.html',\n    styleUrls: []\n} )\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n\t /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n\n    public hierarchyType: HierarchyType;\n\n    public nodes: HierarchyNode[];\n\n    public allGeoObjectTypes: GeoObjectType[];\n\n    public selectedGeoObjectType: GeoObjectType;\n\n    private selectUndefinedOptionValue: any;\n\n\tprivate toRoot: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) {\n    }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n    \n    onSelect(value: string): void {\n    \tthis.allGeoObjectTypes.forEach(gObj => {\n    \t\tif(gObj.code === value){\n    \t\t\tthis.selectedGeoObjectType = gObj;\n    \t\t}\n    \t})\n    }\n    \n    handleOnSubmit(): void {\n        this.message = null;\n        \n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy( this.hierarchyType.code, parent, this.selectedGeoObjectType.code ).then( data => {\n            this.onNodeChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n        \n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '@shared/component';\nimport { GeoObjectType } from '@registry/model/registry';\n\nimport { RegistryService } from '@registry/service';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { Organization } from '@shared/model/core';\n\n@Component( {\n    selector: 'create-geoobjtype-modal',\n    templateUrl: './create-geoobjtype-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organizations: any = [];\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    constructor( private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"geometryType\": \"MULTIPOINT\",\n            \"isLeaf\": false,\n            \"isGeometryEditable\": true,\n            \"organizationCode\": \"\",\n            \"attributes\": []\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n        \n          // Filter out organizations they're not RA's of\n          this.organizations = [];\n          \n          for (var i = 0; i < orgs.length; ++i)\n          {\n            if (this.auth.isOrganizationRA(orgs[i].code))\n            {\n              this.organizations.push(orgs[i]);\n            }\n          }\n          \n          if (this.organizations.length === 1)\n          {\n            this.geoObjectType.organizationCode = this.organizations[0].code;\n          }\n          \n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType( JSON.stringify( this.geoObjectType ) ).then( data => {\n            this.onGeoObjTypeCreate.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <!-- <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}\n      </h1>\n    </div> -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.description.localeValues\">\n          <div>\n            <label>\n              <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n            </label>\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n              class=\"form-control\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required>\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <select *ngIf=\"organizations.length > 1\" class=\"select-area\" name=\"organization\" [(ngModel)]=\"geoObjectType.organizationCode\" required>\n            <option></option>\n            <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n          </select>\n          <span *ngIf=\"organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"geoObjectType.organizationCode\" name=\"organization\" disabled required></span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport {  GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, GeoObjectType } from '@registry/model/registry';\n\nimport { HierarchyService, GeoObjectTypeManagementService } from '@registry/service';\n\n\n@Component( {\n    selector: 'manage-geoobjecttype-modal',\n    templateUrl: './manage-geoobjecttype-modal.component.html',\n    styleUrls: ['./manage-geoobjecttype-modal.css']\n} )\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor( public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n      this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe( modalState => {\n            this.modalState = modalState;\n      });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy(){\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the \n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next( data );\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form >\n     \n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n  \n  <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\"></manage-attributes-modal>\n  \n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" ></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" ></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n \n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\" ></edit-term-option-input>\n \n</form>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\n\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService, HierarchyService } from '@registry/service';\n\n@Component( {\n    selector: 'geoobjecttype-input',\n    templateUrl: './geoobjecttype-input.component.html',\n    styleUrls: ['./geoobjecttype-input.css']\n} )\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange:  EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n    \n    @Input('setGeoObjectType') \n    set in(geoObjectType: GeoObjectType){\n        if(geoObjectType){\n          this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        //   this.geoObjectType = geoObjectType;\n        }\n    }\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizationService: LocalizationService, private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n    }\n\n    ngAfterViewInit() {\n    }\n\n    ngOnDestroy(){\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType( this.editGeoObjectType ).then( geoObjectType => {\n\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n        \n        // return false;\n\n        return true;\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.editGeoObjectType.title\"></localize>\n                {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.organizationCode\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group list-group-flush\">\n                                <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li>\n                            </ul>\n\n                            <button [disabled]=\"readOnly\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\">\n                                <localize key=\"modal.button.manageAttributes\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService, HierarchyService } from '@registry/service';\n\n@Component( {\n    selector: 'manage-attributes-modal',\n    templateUrl: './manage-attributes-modal.component.html',\n    styleUrls: ['./manage-attributes-modal.css']\n} )\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy(){\n      this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    editAttribute(attr: Attribute, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":attr, \"termOption\":\"\"})\n    }\n\n    removeAttributeType(attr: Attribute, e: any): void {\n\n      this.confirmBsModalRef = this.modalService.show( ConfirmModalComponent, {\n\t\t  animated: true,\n\t\t  backdrop: true,\n\t\t  ignoreBackdropClick: true,\n\t  } );\n\t  this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + attr.label.localizedValue + ']';\n      this.confirmBsModalRef.content.data = {'attributeType': attr, 'geoObjectType': this.geoObjectType};\n      this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n\t  ( <ConfirmModalComponent>this.confirmBsModalRef.content ).onConfirm.subscribe( data => {\n          this.deleteAttributeType( data.geoObjectType.code, data.attributeType );\n\t  } );\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: Attribute): void {\n\n          this.registryService.deleteAttributeType( geoObjectTypeCode, attr.code ).then( data => {\n            this.onDeleteAttribute.next( data );\n\n            if(data){\n              this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            title=\"<localize key='modal.button.edit'></localize>\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            title=\"<localize key='modal.button.remove'></localize>\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler } from '@shared/component';\nimport { StepConfig } from '@shared/model/modal';\n\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { GeoObjectType, Attribute, AttributeTerm, AttributeDecimal, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\n \n\n@Component( {\n    selector: 'define-attribute-modal-content',\n    templateUrl: './define-attribute-modal-content.component.html',\n    styleUrls: ['./define-attribute-modal-content.css']\n} )\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    message: string = null;\n    newAttribute: Attribute = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.create.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n\n    constructor( \n\t    public bsModalRef: BsModalRef, \n        private modalStepIndicatorService: ModalStepIndicatorService, \n        private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizeService: LocalizationService,\n        private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n        if(this.attributeInputComponent){\n            this.attributeInputComponent.animate();\n        }\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.addAttributeType( this.geoObjectType.code, this.newAttribute ).then( data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    setAttribute(type:string): void {\n        if(type === 'term'){\n            this.newAttribute = new AttributeTerm(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else if(type === 'float') {\n            this.newAttribute = new AttributeDecimal(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else{\n            this.newAttribute = new Attribute(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        \n        let isAttrValid: boolean = false;\n        \n        if(this.attributeInputComponent){\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n        \n        if(isAttrValid){\n            return true;\n        }\n\n        return false;\n    }\n    \n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from '@angular/forms';\n\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator() : ValidatorFn {\n  return (c: AbstractControl) => {\n    if(c.value){\n        let isValid = c.value.indexOf(\" \") === -1;\n        \n        if(isValid) {\n            return null;\n        } else {\n            return {\n                geoObjectAttributeCode: {\n                     valid: false\n                }\n            };\n        }\n    }\n\n  }\n}\n\n\n@Directive({\n  selector: '[geoObjectAttributeCode][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n  ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n  validator: ValidatorFn;\n  \n  constructor() {\n    this.validator = validateGeoObjectAttributeCodeValidator();\n  }\n  \n  validate(c: FormControl) {\n    return this.validator(c);\n  }\n  \n}","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport {\n\ttrigger,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\n\nimport { ErrorHandler } from '@shared/component';\nimport { StepConfig } from '@shared/model/modal';\n\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\n\nimport { AttributeInputComponent } from '../geoobjecttype-management/attribute-input.component';\n\n\n\n@Component({\n\tselector: 'edit-attribute-modal-content',\n\ttemplateUrl: './edit-attribute-modal-content.component.html',\n\tstyleUrls: ['./edit-attribute-modal-content.css']\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\tmessage: string = null;\n\tmodalState: ManageGeoObjectTypeModalState = { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" };\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": true }\n\t\t]\n\t};\n\n\t@ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n\tconstructor(public bsModalRef: BsModalRef,\n\t\tprivate modalStepIndicatorService: ModalStepIndicatorService,\n\t\tprivate geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate localizeService: LocalizationService,\n\t\tprivate registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\thandleOnSubmit(): void {\n\n\t\tthis.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n\n\t\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n\t\t\t\tlet attr = this.geoObjectType.attributes[i];\n\t\t\t\tif (attr.code === data.code) {\n\t\t\t\t\tObject.assign(attr, data);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tisFormValid(): boolean {\n\n\t\t// let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n\t\t// if(isAttrValid){\n\t\t//     return true;\n\t\t// }\n\n\t\t// return false;\n\t\treturn true\n\t}\n\n\tcancel(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\tback(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { GeoObjectType, AttributeTerm, GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, Term} from '@registry/model/registry';\nimport { HierarchyService } from '@registry/service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '@registry/service/geoobjecttype-management.service'\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component( {\n    selector: 'term-option-widget',\n    templateUrl: './term-option-widget.component.html',\n    styleUrls: ['./term-option-widget.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms')),\n              transition('show => none', animate('100ms'))\n        ]),\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    state: string = 'none';\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy(){\n    \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n            \n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n            \n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\": \"\"})\n\n    }    \n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n\ttrigger,\n\tstate,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\n\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\nimport { GeoObjectType, AttributeTerm, Term, GeoObjectTypeModalStates } from '@registry/model/registry';\n\n@Component({\n\tselector: 'manage-term-options',\n\ttemplateUrl: './manage-term-options.component.html',\n\tstyleUrls: ['./manage-term-options.css'],\n\tanimations: [\n\t\ttrigger('toggleInputs', [\n\t\t\tstate('none, void',\n\t\t\t\tstyle({ 'opacity': 0 })\n\t\t\t),\n\t\t\tstate('show',\n\t\t\t\tstyle({ 'opacity': 1 })\n\t\t\t),\n\t\t\ttransition('none => show', animate('300ms')),\n\t\t\ttransition('show => none', animate('100ms'))\n\t\t]),\n\t\ttrigger('openClose',\n\t\t\t[\n\t\t\t\ttransition(\n\t\t\t\t\t':enter', [\n\t\t\t\t\tstyle({ 'opacity': 0 }),\n\t\t\t\t\tanimate('500ms', style({ 'opacity': 1 }))\n\t\t\t\t]\n\t\t\t\t),\n\t\t\t\ttransition(\n\t\t\t\t\t':leave', [\n\t\t\t\t\tstyle({ 'opacity': 1 }),\n\t\t\t\t\tanimate('0ms', style({ 'opacity': 0 })),\n\n\t\t\t\t]\n\t\t\t\t)]\n\t\t)\n\t]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: AttributeTerm;\n\t@Output() attributeChange = new EventEmitter<AttributeTerm>();\n\tmessage: string = null;\n\ttermOption: Term;\n\tstate: string = 'none';\n\tenableTermOptionForm = false;\n\tmodalStepConfig: StepConfig = {\r\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\": true, \"enabled\": true }\n\t\t]\r\n\t};\n\n\tconstructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n\t\tprivate registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t\tthis.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n\t}\n\n\tngAfterViewInit() {\n\t\tthis.state = 'show';\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tngOnDestroy() {\n\n\t}\n\n\thandleOnSubmit(): void {\n\n\t}\n\n\tanimate(): void {\n\t\tthis.state = \"none\";\n\t}\n\n\tonAnimationDone(event: AnimationEvent): void {\n\t\tthis.state = \"show\";\n\t}\n\n\tisValid(): boolean {\n\t\tif (this.termOption.code && this.termOption.code.length > 0) {\n\n\t\t\t// If code has a space\n\t\t\tif (this.termOption.code.indexOf(\" \") !== -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If label is only spaces\n\t\t\tfor (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n\t\t\t\tif (this.termOption.label.localeValues[i].value.replace(/\\s/g, '').length === 0) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\treturn true;\n\t\t}\n\t\telse if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn false\n\t}\n\n\taddTermOption(): void {\n\n\t\tthis.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n\n\t\t\tthis.attribute.rootTerm.children.push(data);\n\n\t\t\tthis.attributeChange.emit(this.attribute);\n\n\t\t\tthis.clearTermOption();\n\n\t\t\tthis.enableTermOptionForm = false;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tdeleteTermOption(termOption: Term): void {\n\n\t\tthis.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n\n\t\t\tif (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n\t\t\t\tthis.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n\t\t\t}\n\n\t\t\tthis.attributeChange.emit(this.attribute);\n\n\t\t\tthis.clearTermOption();\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tremoveTermOption(termOption: Term): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + termOption.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t(<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n\t\t\tthis.deleteTermOption(termOption);\n\t\t});\n\t}\n\n\teditTermOption(termOption: Term): void {\n\n\t\tconst state = {\n\t\t\t\"state\": GeoObjectTypeModalStates.editTermOption,\n\t\t\t\"attribute\": this.attribute,\n\t\t\t\"termOption\": JSON.parse(JSON.stringify(termOption))\n\t\t};\n\n\t\tthis.geoObjectTypeManagementService.setModalState(state);\n\t}\n\n\tclearTermOption(): void {\n\t\tthis.termOption.code = \"\";\n\t\tthis.termOption.label = this.localizeService.create();\n\t\tthis.termOption.description = this.localizeService.create();\n\t}\n\n\tcancelTermOption(): void {\n\t\tthis.clearTermOption();\n\t\tthis.enableTermOptionForm = false;\n\t}\n\n\topenAddTermOptionForm(): void {\n\t\tthis.enableTermOptionForm = true;\n\t}\n\n\tclose(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option, $event)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option, $event)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport {\n\ttrigger,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from '@shared/model/modal';\nimport { LocalizationService, ModalStepIndicatorService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { GeoObjectType, AttributeTerm, Term, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '@registry/model/registry';\nimport { RegistryService, GeoObjectTypeManagementService } from '@registry/service';\n\n@Component({\n\tselector: 'edit-term-option-input',\n\ttemplateUrl: './edit-term-option-input.component.html',\n\tstyleUrls: [],\n\tanimations: [\n\t\ttrigger('openClose',\n\t\t\t[\n\t\t\t\ttransition(\n\t\t\t\t\t':enter', [\n\t\t\t\t\tstyle({ 'opacity': 0 }),\n\t\t\t\t\tanimate('500ms', style({ 'opacity': 1 }))\n\t\t\t\t]\n\t\t\t\t),\n\t\t\t\ttransition(\n\t\t\t\t\t':leave', [\n\t\t\t\t\tstyle({ 'opacity': 1 }),\n\t\t\t\t\tanimate('0ms', style({ 'opacity': 0 })),\n\n\t\t\t\t]\n\t\t\t\t)]\n\t\t)\n\t]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: AttributeTerm;\n\t@Input() termOption: Term;\n\n\tmessage: string = null;\n\tmodalState: ManageGeoObjectTypeModalState = { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" };\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), \"active\": true, \"enabled\": true }\n\n\t\t]\n\t};\n\n\tconstructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate localizeService: LocalizationService, private registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\thandleOnSubmit(): void {\n\n\t\tthis.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n\t\t\t// Update the term definition on the attribute\n\t\t\tconst index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.attribute.rootTerm.children[index] = data;\n\t\t\t}\n\n\t\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageTermOption, \"attribute\": this.attribute, \"termOption\": null })\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tisFormValid(): boolean {\n\t\t// let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n\t\t// if(isAttrValid){\n\t\t//     return true;\n\t\t// }\n\n\t\t// return false;\n\t\treturn true\n\t}\n\n\tcancel(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageTermOption, \"attribute\": this.attribute, \"termOption\": null })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a (click)=\"toggle()\"> <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span *ngIf=\"show\">\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-page',\n    templateUrl: './data-page.component.html',\n    styleUrls: ['./data-page.css']\n} )\nexport class DataPageComponent implements OnInit {\n\n\tcontent: string = \"SPREADSHEET\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SPREADSHEET\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n\t\t}\n\t\telse if(content === \"SHAPEFILE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"shapefile.title\");\n\t\t}\n\t\telse if(content === \"EXPORT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"io.export.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">Import spreadsheet</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">Import shapefile</a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from '@shared/service';\nimport { ExternalSystem } from '@shared/model/core';\n\nimport { SpreadsheetModalComponent } from './modals/spreadsheet-modal.component';\nimport { ShapefileModalComponent } from './modals/shapefile-modal.component';\nimport { IOService } from '@registry/service';\nimport { ImportStrategy } from '@registry/model/registry';\n\ndeclare var acp: string;\n\n@Component({\n\n\tselector: 'dataimporter',\n\ttemplateUrl: './dataimporter.component.html',\n\tstyleUrls: ['./dataimporter.css']\n})\nexport class DataImporterComponent implements OnInit {\n\n\tshowImportConfig: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n\timportStrategy: ImportStrategy;\n\timportStrategies: any[] = [\n\t\t{ \"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n\t\t{ \"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n\t\t{ \"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n\t]\n\n    /*\n     * Currently selected code\n     */\n\tcode: string = null;\n\n    /*\n     * Currently start date\n     */\n\tstartDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n\tuploader: FileUploader;\n\n\t@ViewChild('myFile')\n\tfileRef: ElementRef;\n\n\t@Input()\n\tformat: string; // Can be SHAPEFILE or EXCEL\n\n\tisExternal: boolean = false;\n\n\t/*\n\t * List of available external systems (filtered based on user's org)\n\t */\n\texternalSystems: ExternalSystem[];\n\n\t/*\n\t * currently selected external system.\n\t */\n\texternalSystemId: string;\n\n\tisLoading: boolean = true;\n\n\tconstructor(private service: IOService,\n\t\tprivate eventService: EventService,\n\t\tprivate modalService: BsModalService,\n\t\tprivate localizationService: LocalizationService,\n\t\tprivate authService: AuthService,\n\t\tprivate sysService: ExternalSystemService\n\t) { }\n\n\tngOnInit(): void {\n\t\tthis.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n\n\t\t\tthis.externalSystems = paginatedSystems.resultSet;\n\n\t\t\tif (this.externalSystems.length === 0) {\n\t\t\t\tthis.isExternal = false;\n\t\t\t\tthis.showImportConfig = true; // Show the upload widget if there are no external systems registered\n\t\t\t}\n\n\t\t\tthis.isLoading = false;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.service.listGeoObjectTypes(true).then(types => {\n\n\t\t\tvar myOrgTypes = [];\n\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\tlet type = types[i];\n\t\t\t\t\n\t\t\t\tif (this.authService.isOrganizationRA(type.orgCode) || this.authService.isGeoObjectTypeRM(type.orgCode, type.code)) {\n\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.types = myOrgTypes;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tvar getUrl = acp + '/excel/get-configuration';\n\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\tgetUrl = acp + '/shapefile/get-shapefile-configuration';\n\n\t\t\t//this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n\t\t}\n\n\t\tlet options: FileUploaderOptions = {\n\t\t\tqueueLimit: 1,\n\t\t\tremoveAfterUpload: true,\n\t\t\turl: getUrl\n\t\t};\n\n\t\tthis.uploader = new FileUploader(options);\n\n\t\tthis.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n\t\t\tform.append('type', this.code);\n\n\t\t\tif (this.startDate != null) {\n\t\t\t\tform.append('startDate', this.startDate);\n\t\t\t}\n\t\t\tif (this.importStrategy) {\n\t\t\t\tform.append('strategy', this.importStrategy)\n\t\t\t}\n\t\t};\n\t\tthis.uploader.onBeforeUploadItem = (fileItem: any) => {\n\t\t\tthis.eventService.start();\n\t\t};\n\t\tthis.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n\t\t\tthis.fileRef.nativeElement.value = \"\";\n\t\t\tthis.eventService.complete();\n\t\t};\n\t\tthis.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst configuration = JSON.parse(response);\n\n\t\t\tconfiguration.isExternal = this.isExternal;\n\n\t\t\tlet externalSystem: ExternalSystem = null;\n\t\t\tfor (let i = 0; i < this.externalSystems.length; ++i) {\n\t\t\t\tlet sys: ExternalSystem = this.externalSystems[i];\n\n\t\t\t\tif (sys.oid === this.externalSystemId) {\n\t\t\t\t\texternalSystem = sys;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconfiguration.externalSystemId = this.externalSystemId;\n\t\t\tconfiguration.externalSystem = externalSystem;\n\n\t\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\t\tthis.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.configuration = configuration;\n\t\t};\n\t\tthis.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst error = JSON.parse(response)\n\n\t\t\tthis.error({ error: error });\n\t\t}\n\t}\n\n\tonClick(): void {\n\n\t\tif (this.uploader.queue != null && this.uploader.queue.length > 0) {\n\t\t\tthis.uploader.uploadAll();\n\t\t}\n\t\telse {\n\t\t\tthis.error({\n\t\t\t\tmessage: this.localizationService.decode('io.missing.file'),\n\t\t\t\terror: {},\n\t\t\t});\n\t\t}\n\t}\n\n\tsetImportSource(event, type): void {\n\t\tif (type === \"EXTERNAL\") {\n\t\t\tthis.isExternal = true;\n\t\t}\n\t\telse {\n\t\t\tthis.isExternal = false;\n\t\t}\n\t}\n\n\tonNext(): void {\n\t\tthis.showImportConfig = true;\n\t}\n\n\tonBack(): void {\n\t\tthis.showImportConfig = false;\n\t}\n\n\n\tpublic error(err: any): void {\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"types\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                    <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n                    <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\">\n                        <localize key=\"io.back\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListByOrg } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n@Component({\n\tselector: 'master-list-manager',\n\ttemplateUrl: './master-list-manager.component.html',\n\tstyleUrls: ['./master-list-manager.css']\n})\nexport class MasterListManagerComponent implements OnInit {\n\tmessage: string = null;\n\torgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.service.getMasterListsByOrg().then(response => {\n\t\t\tthis.orgs = response.orgs;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonCreate(org: MasterListByOrg): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.init(org);\n\t\tthis.bsModalRef.content.isNew = true;\n\t\tthis.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n\t\t\tconst obj = {\n\t\t\t\tlabel: list.displayLabel.localizedValue,\n\t\t\t\toid: list.oid,\n\t\t\t\tcreateDate: list.createDate,\n\t\t\t\tlastUpdateDate: list.lastUpdateDate,\n\t\t\t\tisMaster: list.isMaster,\n\t\t\t\twrite: list.admin,\n\t\t\t\tread: list.admin,\n\t\t\t};\n\n\t\t\torg.lists.push(obj);\n\t\t});\n\t}\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-view/', code])\n\t}\n\n\tonEdit(pair: { label: string, oid: string }): void {\n\t\tthis.service.getMasterList(pair.oid).then(list => {\n\n\t\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tthis.bsModalRef.content.edit = true;\n\t\t\tthis.bsModalRef.content.readonly = !list.write;\n\t\t\tthis.bsModalRef.content.master = list;\n\t\t\tthis.bsModalRef.content.isNew = false;\n\t\t\t\n\t\t\tthis.bsModalRef.content.onMasterListChange.subscribe(ret => {\n\t\t\t\tpair.label = ret.displayLabel.localizedValue;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + list.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = \"danger\";\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterList(list.oid).then(response => {\n\t\t\t\torg.lists = org.lists.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== list.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\n\n@Component( {\n    selector: 'export-format-modal',\n    templateUrl: './export-format-modal.component.html',\n    styleUrls: []\n} )\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next( this.format );\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ChangeRequest, AbstractAction, AddChildAction, SetParentAction, CreateGeoObjectAction, RemoveChildAction, UpdateGeoObjectAction } from '@registry/model/crtable';\n\nimport { ChangeRequestService } from '@registry/service';\nimport { LocalizationService } from '@shared/service';\nimport { ActionDetailModalComponent } from './action-detail/action-detail-modal.component'\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\n@Component( {\n\n    selector: 'request-table',\n    templateUrl: './request-table.component.html',\n    styleUrls: ['./request-table.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class RequestTableComponent {\n\n\tobjectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n\trequests: ChangeRequest[] = [];\n\n\tactions: AbstractAction[] | SetParentAction[] | AddChildAction[] | CreateGeoObjectAction[] | RemoveChildAction[] | UpdateGeoObjectAction[];\n\n\tcolumns: any[] = [];\n\t\n\ttoggleId: string;\n\n\tfilterCriteria: string = 'ALL';\n\n    constructor( private service: ChangeRequestService, private modalService: BsModalService, private localizationService: LocalizationService ) {\n        this.columns = [\n            { name: localizationService.decode( 'change.request.user' ), prop: 'createdBy', sortable: false },\n            { name: localizationService.decode( 'change.request.createDate' ), prop: 'createDate', sortable: false, width: 195 },\n            { name: localizationService.decode( 'change.request.status' ), prop: 'approvalStatus', sortable: false }\n        ];\n\n        this.refresh();\n    }\n\n    refresh(): void {\n\n            this.service.getAllRequests(\"ALL\").then( requests => {\n\n\t\t\t\tthis.requests = requests;\n\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } )\n\n    }\n\n\n    onSelect( selected: any ): void {\n\n\t\t// this.request = selected.selected;\n\n        this.service.getAllActions( selected.selected[0].oid ).then(actions => {\n\t\t\t\n\t\t\tthis.actions = actions;\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.execute( changeRequest.oid ).then( request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n\t}\n\t\n\t// onConfirmChangeRequest(request: any): void {\n\n    //     if ( request != null ) {\n    //         this.service.confirmChangeRequest( request.oid ).then( request => {\n    //             this.request = request;\n\n    //             // TODO: Determine if there is a way to update an individual record\n    //             this.refresh();\n    //         } ).catch(( response: HttpErrorResponse ) => {\n    //             this.error( response );\n    //         } );\n    //     }\n\t// }\n\t\n\tapplyActionStatusProperties(action: any ): void {\n\t\t// var action = JSON.parse(JSON.stringify(this.action));\n\t\t// action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n\t\tthis.service.applyActionStatusProperties(action).then( response => {\n\t\t\t// this.crtable.refresh()\n\t\t} ).catch(( err: HttpErrorResponse ) => {\n\t\t\tthis.error( err );\n\t\t} );\n\t}\n\n    onApproveAll(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.approveAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    onRejectAll(changeRequest: ChangeRequest): void {\n        if ( changeRequest != null ) {\n            this.service.rejectAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n\n                // TODO: Determine if there is a way to update an individual record\n                // this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\t\n\trequestTrackBy(index: number, request: ChangeRequest) {\n    \treturn request.oid;\n\t}\n\t\n\ttoggle(event: any, oid: string): void {\n\n\t\tif(!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")){\n\t\t\tif(this.toggleId === oid){\n\t\t\t\tthis.toggleId = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggleId = oid;\n\t\t\t\tthis.onSelect({selected:[{oid:oid}]});\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(criteria: string): void {\n\n\t\t   this.service.getAllRequests(criteria).then( requests => {\n\t\t\t\tthis.requests = requests;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n\t\t\t} )\n\t\t\t\n\t\tthis.filterCriteria = criteria;\n\t}\n\n\tsetActionStatus(action: AbstractAction, status:string): void {\n\t\taction.approvalStatus = status;\n\n\t\tthis.applyActionStatusProperties(action);\n\t}\n\n\tgetActiveDetailComponent(action: AbstractAction) : any {\n      // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n      if (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\n      {\n        // return this.cuDetail;\n      }\n    //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n    //   {\n    //     return this.arDetail;\n\t//   }\n\t\n\t  return action;\n\t}\n\t\n    showActionDetail( action: any ) {\n\n\t\tthis.bsModalRef = this.modalService.show( ActionDetailModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\t\tthis.bsModalRef.content.curAction = action;\n      \n    //   var detail = this.getActiveDetailComponent();\n    //   if (detail != null)\n    //   {\n        // action.onSelect(action);\n    //   }\n    }\n\n}\n","<!-- <div class=\"row text-center\">\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"change.request.title\"></localize>\n        </h2>\n    </div>\n</div> -->\n\n<!-- <div class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            <localize key=\"change.request.table.title\"></localize>\n        </h3>\n    </div>\n</div> -->\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\t\t<div class=\"form-group button-row\">\n\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" >\n\t\t\t\t<localize key=\"change.request.all.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.pending.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.accepted.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;\" >\n\t\t\t\t<localize key=\"change.request.rejected.filter.link\"></localize>\n\t\t\t</a>\n\n\t\t</div>\n\n\t\t<hr style=\"border-top:solid 3px #6BA542\" />\n\n\t</div>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\n\t<table class=\"table\">\n\t\t<thead>\n\t\t\t<tr style=\"height: 50px;color: grey;\">\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n\t\t\t\t<!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n        <tbody>\n\t\t\t<ng-template ngFor let-req [ngForOf]=\"requests\" [ngForTrackBy]=\"requestTrackBy\">\n\t\t\t\t<tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n                \t<td class=\"col-md-4\">\n\t\t\t\t\t\t<h5><strong>{{req.createdBy}}</strong></h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n\t\t\t\t\t\t {{req.createDate}}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\">\n\t\t\t\t\t\t<h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n\t\t\t\t\t\t\t <strong>{{req.approvalStatus}}</strong>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!-- <td class=\"col-md-3\">\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onConfirmChangeRequest(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t</button>\t\n\t\t\t\t\t</td> -->\n\t\t\t\t\t<td class=\"col-md-1\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\">\n            \t\t<td colspan=\"5\" >\n\n\t\t\t\t\t\t<div class=\"row\" style=\"margin:0;\">\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\n\t\t\t\t\t\t\t\t<div *ngFor=\"let action of actions\" class=\"action-card\" [ngClass]=\"{'status-pending-container':action.approvalStatus === 'PENDING', 'status-accepted-container':action.approvalStatus === 'ACCEPTED', 'status-rejected-container':action.approvalStatus === 'REJECTED'}\" style=\"margin-bottom:10px; background-color:white;\"> \n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"margin:0; padding-top:5px; padding-bottom:5px;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-3\" style=\"border-right:2px grey solid; height:50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-circle\" style=\"float:left; line-height: 50px;\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"vertical-center\" style=\"margin:0; float:left; padding-left:20px;\">{{req.createdBy}}</h4>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" style=\"height: 50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"fa fa-refresh vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"fa fa-plus vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"fa fa-link vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"fa fa-chain-broken vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Update <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ]</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Create <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ] </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.SetParentAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set parents of <b>{{action.childCode}}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set <b>{{action.childTypeCode}}</b> as a child of <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Remove <b>{{action.childTypeCode}}</b> from <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-4\" style=\"height: 50px;text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t\t<h4 *ngIf=\"req.approvalStatus !== 'PENDING'\" class=\"vertical-center\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" style=\"margin: 0;\">{{action.approvalStatus}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'ACCEPTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'ACCEPTED')\" class=\"btn btn-primary vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.accept.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'ACCEPTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'REJECTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'REJECTED')\" class=\"btn btn-danger vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.reject.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'REJECTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'PENDING'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'PENDING')\" class=\"btn btn-warning vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.pending.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'PENDING'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"height: 150px;border-top: 1px grey solid;margin:0;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.contributorNotes\" readonly=\"true\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.maintainerNotes\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-2\" style=\"height:100%;\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" (click)=\"showActionDetail(action)\" class=\"btn btn-default vertical-center\" style=\"width:100%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.action.details.label\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> <!-- END action-card -->\n\n\t\t\t\t\t\t\t\t<!-- <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\">Change Request Notes</label>\n\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" value=\"\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t</div>\t -->\n\n\t\t\t\t\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onApproveAll(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll(req)\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\t\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.changes.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</td>\n        \t\t</tr>\n\t\t\t</ng-template>\n        </tbody>\n\t</table>\n\t</div>\t \n</div>\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component( {\n    selector: 'action-detail-modal',\n    templateUrl: './action-detail-modal.component.html',\n    styleUrls: []\n} )\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    @ViewChild( \"cuDetail\" ) cuDetail: ActionDetailComponent;\n    @ViewChild( \"arDetail\" ) arDetail: ActionDetailComponent;\n    @ViewChild( \"spDetail\" ) spDetail: ActionDetailComponent;\n\n    @Input()\n    set curAction( action: any ) {\n        this.action = action;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if ( this.cuDetail != null ) {\n            this.cuDetail.endEdit();\n        }\n\n        if ( this.arDetail != null ) {\n            this.arDetail.endEdit();\n        }\n\n        if ( this.spDetail != null ) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit, Input, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\n\nimport { GeoObjectType, Attribute, ValueOverTime, GeoObjectOverTime, AttributeTerm, PRESENT } from '@registry/model/registry';\n\nimport { RegistryService, IOService } from '@registry/service';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component( {\n    selector: 'manage-versions-modal',\n    templateUrl: './manage-versions-modal.component.html',\n    styleUrls: ['./manage-versions-modal.css'],\n    host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger( 'fadeInOut', [\n                transition( 'void => *', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] ),\n                transition( '* => void', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] )\n            ] )\n        ]]\n} )\nexport class ManageVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    readonly: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onAttributeVersionChange: Subject<GeoObjectOverTime>;\n\n    @Input() attribute: Attribute;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObjectOverTime: GeoObjectOverTime;\n\n    goGeometries: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    newVersion: ValueOverTime;\n\n    editingGeometry: number = -1;\n\n    hasDuplicateDate: boolean = false;\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService,\n        public bsModalRef: BsModalRef, public changeDetectorRef: ChangeDetectorRef ) { }\n\n    ngOnInit(): void {\n\n        this.onAttributeVersionChange = new Subject();        \n    }\n\n    tfInit(): void {\n      if ( this.attribute.code === 'geometry' && this.geoObjectOverTime.attributes[this.attribute.code].values.length === 1 ) {\n        this.editingGeometry = 0;\n      }\n    }\n    \n    geometryChange(vAttribute, event): void {\n      vAttribute.value = event;\n    }\n\n    onDateChange( event: any, vAttribute: ValueOverTime ): any {\n\n        //        console.log( event.currentTarget.value );\n        //\n        //        let dt = new Date( event.currentTarget.value );\n        //let dt = new Date(event);\n\n        let vAttributes = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        //        vAttribute.startDate = Utils.formatDateString( dt );\n\n        this.snapDates( vAttributes );\n\n        //        this.changeDetectorRef.detectChanges();\n    }\n\n    snapDates( votArr: ValueOverTime[] ): void {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data by start date \n        votArr.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n        for ( let i = 1; i < votArr.length; i++ ) {\n            let prev = votArr[i - 1];\n            let current = votArr[i];\n\n            if ( current.startDate ) {\n                prev.endDate = Utils.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n            }\n            else {\n                prev.endDate = PRESENT;\n            }\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( votArr.length > 0 ) {\n            votArr[votArr.length - 1].endDate = PRESENT;\n        }\n    }\n\n    onAddNewVersion(): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null;  // Utils.formatDateString(new Date());\n        vot.endDate = null;  // Utils.formatDateString(new Date());\n\n        if ( this.attribute.type === \"local\" ) {\n            //   vot.value = {\"localizedValue\":null,\"localeValues\":[{\"locale\":\"defaultLocale\",\"value\":null},{\"locale\":\"km_KH\",\"value\":null}]};\n            vot.value = this.lService.create();\n        }\n        else if ( this.attribute.type === 'geometry' ) {\n\n            if ( votArr.length > 0 ) {\n                if ( this.editingGeometry != -1 && this.editingGeometry != null ) {\n                    vot.value = votArr[this.editingGeometry].value;\n                }\n                else {\n                    vot.value = votArr[0].value;\n                }\n            }\n            else {\n                vot.value = { \"type\": this.geoObjectType.geometryType, \"coordinates\": [] };\n\n                if ( this.geoObjectType.geometryType === \"MULTIPOLYGON\" ) {\n                    vot.value.type = \"MultiPolygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POLYGON\" ) {\n                    vot.value.type = \"Polygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POINT\" ) {\n                    vot.value.type = \"Point\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTIPOINT\" ) {\n                    vot.value.type = \"MultiPoint\";\n                }\n                else if ( this.geoObjectType.geometryType === \"LINE\" ) {\n                    vot.value.type = \"Line\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTILINE\" ) {\n                    vot.value.type = \"MultiLine\";\n                }\n            }\n        }\n        else if ( this.attribute.type === 'term' ) {\n            var terms = this.getGeoObjectTypeTermAttributeOptions( this.attribute.code );\n\n            if ( terms.length > 0 ) {\n                vot.value = terms[0].code;\n            }\n        }\n\n        votArr.push( vot );\n\n        if ( this.attribute.code === 'geometry' ) {\n            this.editingGeometry = votArr.length - 1;\n        }\n\n        this.snapDates( votArr );\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    editGeometry( index: number ) {\n        this.editingGeometry = index;\n    }\n\n    getVersionData( attribute: Attribute ) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach( vAttribute => {\n            vAttribute.value.localeValues.forEach( val => {\n                versions.push( val );\n            } )\n        } )\n        return versions;\n    }\n\n    getDefaultLocaleVal( locale: any ): string {\n        let defVal = null;\n\n        locale.localeValues.forEach( locVal => {\n            if ( locVal.locale === 'defaultLocale' ) {\n                defVal = locVal.value;\n            }\n\n        } )\n\n        return defVal;\n    }\n\n    setDateAttribute( vot: ValueOverTime, val: string ): void {\n        vot.value = new Date( val ).getTime().toString()\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if ( attrOpts.length > 0 ) {\n                    if ( attr.code === \"status\" ) {\n                        return Utils.removeStatuses(attrOpts);\n                    }\n                    else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    remove( version: any ): void {\n\n        let val = this.geoObjectOverTime.attributes[this.attribute.code];\n\n        for ( let i = 0; i < val.values.length; i++ ) {\n            let vals = val.values[i];\n\n            if ( vals.startDate === version.startDate ) {\n                val.values.splice( i, 1 );\n            }\n        }\n\n        this.snapDates( val.values );\n    }\n\n    isChangeOverTime( attr: Attribute ): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach( attribute => {\n            if ( this.attribute.code === attr.code ) {\n                isChangeOverTime = attr.isChangeOverTime\n            }\n        } )\n\n        return isChangeOverTime;\n    }\n\n    onSubmit(): void {\n\n        this.onAttributeVersionChange.next( this.geoObjectOverTime );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #versionsform=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\">\n\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"width: 100%;border: none;\">\n                    <div *ngIf=\"geoObjectOverTime\" >\n\n                        <div class=\"panel\" style=\"box-shadow: none;\">\n                            <div class=\"panel-body\">\n                                <ul class=\"list-group\">\n                                    <!-- <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> -->\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        \n                                        <div *ngIf=\"attribute.type !== 'geometry'\">\n                                                <table class=\"table table-striped\"> \n                                                    <thead style=\"font-size: 14px;\"> \n                                                        <tr> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                            <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                            <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                                        </tr> \n                                                    </thead> \n\n                                                    <tbody *ngIf=\"attribute.type === 'local'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\" >\n                                                            <td >\n                                                                <table style=\"width: 100%;\">\n                                                                    <tr *ngFor=\"let loc of vAttribute.value.localeValues; let idx = index;\" > \n                                                                        <td style=\"vertical-align: bottom; width: 35%;padding: 0; padding-top:5px;\">\n                                                                            <h5>{{loc.locale}}</h5>\n                                                                            <input type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"loc.value = $event\" [required]=\"loc.locale === 'defaultLocale'\">\n                                                                            <div class=\"form-input-validation-error-message-wrapper\">\n                                                                                <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">Value is required.</p>\n                                                                            </div>\n                                                                        </td> \n                                                                    </tr>\n                                                                </table>\n                                                            </td>\n\n                                                            <td style=\"width: 35%;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate_' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                                <div class=\"form-input-validation-error-message-wrapper\">\n                                                                    <p *ngIf=\"!vAttribute.startDate\" class=\"error-message\">Start date is required.</p>\n                                                                </div>\n                                                            </td> \n                                                            <td style=\"width: 20%;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle; width: 10%;padding: 5px; text-align: center;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n\n                                                    <!-- TODO: This isn't getting the options on load -->\n                                                    <tbody *ngIf=\"attribute.type === 'term'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                <!-- <h5>{{loc.locale}}</h5> -->\n                                                                <!-- <input type=\"text\" class=\"form-control\" id=\"loc-val-{{i}}\" name=\"loc-val-{{i}}\" [(ngModel)]=\"version.value\" (ngModelChange)=\"version.value = $event\"> -->\n                                                                <select id=\"mod-{{attribute.code}}\" [name]=\"'mod-term-' + i + '-' + attribute.code\" class=\"select-area\" style=\"float:none;\" [(ngModel)]=\"vAttribute.value\">\n                                                                    <option value=\"\" ></option>\n                                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attribute.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                                </select>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'character'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'date'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"date\" class=\"form-control\" [name]=\"'char-val-' + i\" [ngModel]=\"vAttribute.value | date:'yyyy-MM-dd'\" (ngModelChange)=\"setDateAttribute(vAttribute, $event)\" required> \n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'boolean'\">\n\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === true\" [value]=\"true\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\">\n                                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                                </label>\n\n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === false\"  [value]=\"false\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\">\n                                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                                </label>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n\n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'float'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'integer'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n                                            </table>\n                                        </div> \n\n                                        <div *ngIf=\"attribute.type === 'geometry'\">\n                                           <table class=\"table table-striped\">\n                                             <thead style=\"font-size: 14px;\">\n                                               <th style=\"width:60%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                               <th style=\"width:20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                               <th style=\"width:10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                               <th style=\"width: 10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                             </thead>\n                                             <tbody style=\"text-align: center;\">\n                                               <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\">\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <button *ngIf=\"this.editingGeometry != i\" class=\"btn\" (click)=\"editGeometry(i)\" role=\"button\"><localize key=\"changeovertime.manageVersions.geometry.edit\"></localize></button>\n                                                   <geoobject-editor-map *ngIf=\"this.editingGeometry === i\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" (geometryChange)=\"this.geometryChange(vAttribute, $event);\" [readOnly]=\"!geoObjectType.isGeometryEditable\" [postGeometry]=\"vAttribute.value\" [bboxCode]=\"this.geoObjectOverTime.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"vAttribute.startDate\"></geoobject-editor-map>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <input type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                 </td>\n                                               </tr>\n                                              </tbody>\n                                          </table>\n                                        </div>\n\n                                    </li>\n\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\">\n                                            <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                                        </i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none;width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button> -->\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!versionsform.valid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n\t      var newArray = [];\n\t      \n\t      for ( var i = 0; i < arr.length; ++i ) {\n\t        if (! (arr[i].code === \"CGR:Status-New\"\n\t             || arr[i].code === \"CGR:Status-Pending\"))\n\t        {\n\t          newArray.push(arr[i]);\n\t        }\n\t      }\n\t      \n\t      return newArray;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n    \n}","\nimport { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-edit-control',\n  templateUrl: './simple-edit-control.component.html',\n})\nexport class SimpleEditControl {\n  elRef: ElementRef\n  \n  @Input() visible = false;\n  \n  @Output() editEmitter = new EventEmitter<void>();\n  \n  constructor(elRef: ElementRef) {\n    this.elRef = elRef;\n  }\n\n  onAdd(map): any {\n    this.visible = true;\n    return this.elRef.nativeElement;\n  }\n  \n  onRemove(map): void {\n    this.elRef.nativeElement.remove();\n  }\n  \n  onClick(): void {\n    this.editEmitter.emit();\n  }\n}\n","<div *ngIf=\"this.visible\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button class=\"fa fa-pencil-square-o\" style=\"color: black; font-size: 18px;\" title=\"location.management.editing | localize\" (click)=\"this.onClick();\"></button>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'geoObjectAttributeExcludesFilter',\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n       \n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { HierarchyOverTime, PRESENT } from '@registry/model/registry';\n\nimport { IOService, RegistryService } from '@registry/service';\n\nimport { LocalizationService } from '@shared/service';\n\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n    selector: 'manage-parent-versions-modal',\n    templateUrl: './manage-parent-versions-modal.component.html',\n    styleUrls: []\n} )\nexport class ManageParentVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onVersionChange: Subject<HierarchyOverTime>;\n\n    hierarchy: HierarchyOverTime = null;\n\n    hasDuplicateDate: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onVersionChange = new Subject();\n\n    }\n\n    init( hierarchy: HierarchyOverTime ): void {\n        this.hierarchy = hierarchy;\n    }\n\n    onAddNewVersion(): void {\n\n        let parents = {};\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parents[current.code] = {};\n        }\n\n        const entry = {\n            startDate: null,\n            endDate: null,\n            parents: parents\n        }\n\n        this.hierarchy.entries.push( entry );\n    }\n\n    remove( entry: any ): void {\n\n        for ( let i = 0; i < this.hierarchy.entries.length; i++ ) {\n            let vals = this.hierarchy.entries[i];\n\n            if ( vals.startDate === entry.startDate ) {\n                this.hierarchy.entries.splice( i, 1 );\n            }\n        }\n\n        this.snapDates();\n    }\n\n    getTypeAheadObservable( date: string, type: any, entry: any, index: number ): Observable<any> {\n\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let hierarchyCode = null;\n\n        if ( index > 0 ) {\n            let pType = this.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if ( parent.geoObject != null && parent.geoObject.properties.code != null ) {\n                hierarchyCode = this.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n            }\n        }\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( entry.parents[type.code].text, geoObjectTypeCode, parentCode, hierarchyCode, date ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, type: any, entry: any, date: string ): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        let parentTypes = [];\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parentTypes.push( current.code );\n\n            if ( current.code === type.code ) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects( e.item.uid, type.code, parentTypes, true, date ).then( ancestors => {\n\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n            for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n                let current = this.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while ( ancestor != null && ancestor.geoObject.properties.type != current.code ) {\n                    if ( ancestor.parents.length > 0 ) {\n                        ancestor = ancestor.parents[0];\n                    }\n                    else {\n                        ancestor = null;\n                    }\n                }\n\n                if ( ancestor != null ) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue;\n                }\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSubmit(): void {\n\n        this.onVersionChange.next( this.hierarchy );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    onDateChange( event: any ): any {\n        this.snapDates();\n    }\n\n    snapDates() {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data\n        this.hierarchy.entries.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n\n        for ( let i = 1; i < this.hierarchy.entries.length; i++ ) {\n            let prev = this.hierarchy.entries[i - 1];\n            let current = this.hierarchy.entries[i];\n\n            prev.endDate = this.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( this.hierarchy.entries.length > 0 ) {\n            this.hierarchy.entries[this.hierarchy.entries.length - 1].endDate = PRESENT;\n        }\n    }\n\n    formatDateString( dateObj: Date ): string {\n        const day = dateObj.getUTCDate();\n\n        return dateObj.getUTCFullYear() + \"-\" + ( dateObj.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"holder\" style=\"width: 100%; border: none;\">\n                    <div class=\"panel\" style=\"box-shadow: none;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\" *ngIf=\"hierarchy != null\">\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                    <table class=\"table table-striped\">\n                                        <thead style=\"font-size: 14px;\">\n                                            <tr>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let entry of hierarchy.entries; let i = index;\">\n                                                <td>\n                                                \n                                                  <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let type of hierarchy.types; let j = index\">\n                                                    {{type.label}}\n                                                    \n                                                    <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                                      name=\"{{type.code}}-{{i}}\"\n                                                      [disabled]=\"entry.startDate == null || entry.startDate === ''\"\n                                                      [(ngModel)]=\"entry.parents[type.code].text\" \n                                                      [typeaheadAsync]=\"true\"\n                                                      [typeahead]=\"getTypeAheadObservable(entry.startDate, type, entry, j)\"\n                                                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, type, entry, entry.startDate)\" \n                                                      [typeaheadOptionsLimit]=\"7\"\n                                                      typeaheadOptionField=\"name\" \n                                                      [typeaheadMinLength]=\"0\"\n                                                      [typeaheadWaitMs]=\"300\"\n                                                      required>\n                                                  </div>\n                                                \n                                                </td>\n                                                <td style=\"vertical-align: bottom;\">\n                                                  <input style=\"width: 100%;\" type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"entry.startDate\" (blur)=\"snapDates()\" required />\n                                                </td> \n                                                <td style=\"vertical-align: bottom;\">\n                                                  <p *ngIf=\"entry.startDate != null && entry.startDate !== ''\" style=\"font-size: 14px;\"> {{entry.endDate | date:'MM-dd-yyyy'}} </p>\n                                                </td>\n                                                <td style=\"vertical-align: middle; width: 10%; padding: 5px; text-align: center;\">\n                                                  <i class=\"fa fa-times delete-btn\" (click)=\"remove(entry)\"></i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </li>\n\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                  <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"><localize key=\"changeovertime.manageVersions.newVersion\"></localize></i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none; width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\" >\n                            <localize key=\"io.cancel\"></localize>\n                        </button> -->\n                        <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid || hasDuplicateDate\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService, AuthService } from '@shared/service';\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'change-request-page',\n    templateUrl: './change-request-page.component.html',\n    styleUrls: ['./change-request-page.css']\n} )\nexport class ChangeRequestPageComponent implements OnInit {\n\n\tcontent: string = \"SUBMIT\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"MANAGE\") : this.renderContent(\"SUBMIT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SUBMIT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.page.title\");\n\t\t}\n\t\telse if(content === \"MANAGE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.table.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'MANAGE'}\" (click)=\"renderContent('MANAGE')\">Manage</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isContributor\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SUBMIT'}\" (click)=\"renderContent('SUBMIT')\">Submit</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<submit-change-request *ngIf=\"content === 'SUBMIT'\"></submit-change-request>\n\t\t\t\t\t<request-table *ngIf=\"content === 'MANAGE'\"></request-table>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { interval, Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { MasterListVersion } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { ExportFormatModalComponent } from './export-format-modal.component';\nimport { GeoObjectEditorComponent } from '../geoobject-editor/geoobject-editor.component';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService, AuthService, ProgressService } from '@shared/service';\n\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'master-list',\n\ttemplateUrl: './master-list.component.html',\n\tstyleUrls: []\n})\nexport class MasterListComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterListVersion = null;\n\tp: number = 1;\n\tcurrent: string = '';\n\tfilter: { attribute: string, value: string, label: string }[] = [];\n\tselected: string[] = [];\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 100,\n\t\tresults: []\n\t};\n\tsort = { attribute: 'code', order: 'ASC' };\n\tisPublished: boolean = true;\n\tisRefreshing: boolean = false;\n\tisWritable: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpublic searchPlaceholder = \"\";\n\n\n\tconstructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, private authService: AuthService) {\n\n\t\tthis.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\t\tthis.isPublished = (this.route.snapshot.paramMap.get('published') == \"true\");\n\n\t\tthis.service.getMasterListVersion(oid).then(version => {\n\t\t\tthis.list = version;\n\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\tattribute.isCollapsed = true;\n\t\t\t});\n\t\t\t\n\t\t\tthis.isWritable = this.authService.isGeoObjectTypeRC(this.list.orgCode, this.list.typeCode);\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.data(this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\t//    onSearch(): void {\n\t//        this.filter = this.current;\n\t//\n\t//        this.onPageChange( 1 );\n\t//    }\n\n\tonSort(attribute: { name: string, label: string }): void {\n\t\tif (this.sort.attribute === attribute.name) {\n\t\t\tthis.sort.order = (this.sort.order === 'ASC' ? 'DESC' : 'ASC');\n\t\t}\n\t\telse {\n\t\t\tthis.sort = { attribute: attribute.name, order: 'ASC' };\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tattr.search = null;\n\t\t});\n\n\t\tthis.filter = [];\n\t\tthis.selected = [];\n\n\t\tthis.onPageChange(1);\n\t}\n\n\ttoggleFilter(attribute: any): void {\n\t\tattribute.isCollapsed = !attribute.isCollapsed;\n\t}\n\n\tgetValues(attribute: any): void {\n\t\treturn Observable.create((observer: any) => {\n\t\t\tthis.message = null;\n\n\t\t\t// Get the valid values\n\t\t\tthis.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.filter).then(options => {\n\t\t\t\toptions.unshift({ label: '[' + this.localizeService.decode(\"masterlist.nofilter\") + ']', value: null });\n\n\t\t\t\tobserver.next(options);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\thandleDateChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && (attribute.value.start !== '' || attribute.value.end !== '')) {\n\n\t\t\tlet label = '[' + attribute.label + '] : [';\n\n\t\t\tif (attribute.value.start != null) {\n\t\t\t\tlabel += attribute.value.start;\n\t\t\t}\n\n\t\t\tif (attribute.value.start != null && attribute.value.end != null) {\n\t\t\t\tlabel += ' - ';\n\t\t\t}\n\n\t\t\tif (attribute.value.end != null) {\n\t\t\t\tlabel += attribute.value.end;\n\t\t\t}\n\n\t\t\tlabel += ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleInputChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && attribute.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleListChange(e: TypeaheadMatch, attribute: any): void {\n\t\tattribute.value = e.item;\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tif (attr.base === attribute.base) {\n\t\t\t\tattr.search = '';\n\t\t\t}\n\t\t});\n\n\t\tif (attribute.value.value != null && attribute.value.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value.label + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t\tattribute.search = e.item.label;\n\t\t}\n\t\telse {\n\t\t\tattribute.search = '';\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tisFilterable(attribute: any): boolean {\n\t\treturn attribute.type !== 'none' && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n\t}\n\n\tonEdit(data): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\teditModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonGoto(data): void {\n\t\tconst oid = data.code;\n\n\t\tif (oid != null && oid.length > 0) {\n\t\t\twindow.open(acp + \"/nav/management#/locations/\" + oid, '_blank');\n\t\t}\n\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.isRefreshing = true;\n\n\t\tlet subscription = interval(1000).subscribe(() => {\n\t\t\tthis.service.progress(this.list.oid).then(progress => {\n\t\t\t\tthis.pService.progress(progress);\n\t\t\t});\n\t\t});\n\n\t\tthis.service.publishMasterList(this.list.oid)\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tsubscription.unsubscribe();\n\n\t\t\t\tthis.pService.complete();\n\t\t\t})).toPromise()\n\t\t\t.then(list => {\n\t\t\t\tthis.isRefreshing = false;\n\t\t\t\tthis.list = list;\n\t\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\t\tattribute.isCollapsed = true;\n\t\t\t\t});\n\n\t\t\t\t// Refresh the resultSet\n\t\t\t\tthis.onPageChange(1);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\tthis.pService.start();\n\t}\n\n\tonNewGeoObject(): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t//editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n\t\teditModal.content.configureAsNew(this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonExport(): void {\n\t\tthis.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.onFormat.subscribe(format => {\n\t\t\tif (format == 'SHAPEFILE') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-shapefile?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t\telse if (format == 'EXCEL') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-spreadsheet?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <!-- <progress-bar></progress-bar> -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.publishDate\"></localize>\n                    : {{list.publishDate}}\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : {{list.forDate}}\n                </h4>\n            </div>\n        </div>\n\n\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            \n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true, 'fa-spin':isRefreshing}\" style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n\n                        <button *ngIf=\"isWritable\" type=\"submit\" (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                        </button>\n                        <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th *ngIf=\"isWritable\" style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.edit.column\"></localize></th>\n                            <th *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\" [title]=\"'button.filter.helptext' | localize\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\" [typeaheadAsync]=\"true\" [typeahead]=\"getValues(attribute)\" (typeaheadOnSelect)=\"handleListChange($event, attribute)\" [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td style=\"width: 3%; text-align: center;\" class=\"label-column\"><a class=\"fa fa-map-marker\" (click)=\"onGoto(result)\"></a></td>\n                            <td *ngIf=\"isWritable\" style=\"width: 3%\" class=\"label-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(result)\" [title]=\"'button.edit.helptext' | localize\"></a></td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { MasterList, MasterListVersion } from '@registry/model/registry';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { RegistryService } from '@registry/service';\nimport { AuthService, LocalizationService } from '@shared/service';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'published-master-list-history',\n\ttemplateUrl: './published-master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tpage: any = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresults: []\n\t};\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tnotifier: WebSocketSubject<{ type: string, content: any }>;\n\n\tisAdmin: boolean;\n\tisSRA: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService, private localizeService: LocalizationService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isSRA = authService.isSRA();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'PUBLISH_JOB_CHANGE') {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.notifier.complete();\n\t}\n\n\t//isGeoObjectTypeRM(type: string): boolean {\n\t//\treturn this.authService.isGeoObjectTypeRM(type);\n\t//}\n\n\tonDeleteMasterListVersion(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.updateList();\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tupdateList(): void {\n\t\t// update the list of versions. \n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tif (this.list != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.updateList();\n\t\t}\n\t}\n\n\tonViewMetadata(): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, true])\n\t}\n\n\tonPublishShapefile(version: MasterListVersion): void {\n\n\t\tthis.service.publishShapefile(version.oid).then(() => {\n\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDownloadShapefile(version: MasterListVersion): void {\n\t\twindow.location.href = acp + '/master-list/download-shapefile?oid=' + version.oid;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n     <div *ngIf=\"list && ((list.write))\" style=\"margin-bottom: 10px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" \n                    [title]=\"'masterList.publish.help.text' | localize\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.publishDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version )\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <div class=\"row\" *ngIf=\"!isSRA\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span>\n                                            <span style=\"display: block;\"> {{job.author}} </span>\n                                            <span style=\"display: block;\"> {{job.type}} </span>\n                                            <span style=\"display: block;\"> {{job.status}} </span>\n                                            <span *ngIf=\"job.exception\" style=\"display: block;\"> {{job.exception.message}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '@registry/model/registry';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { RegistryService } from '@registry/service';\nimport { LocalizationService, AuthService } from '@shared/service';\n\n@Component({\n\tselector: 'master-list-history',\n\ttemplateUrl: './master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tforDate: string = '';\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, private localizeService: LocalizationService) {\n\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n\t\t\tthis.list.versions.push(version);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonViewMetadata(): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, false])\n\t}\n\n\tonDelete(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.list.versions = this.list.versions.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== version.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && list.write\" style=\"margin-bottom: 10px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\" style=\"margin-left: 10px;\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> <input id=\"forDate\" type=\"date\" name=\"forDate\" [(ngModel)]=\"forDate\" required>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.generatedDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list.delete\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MasterList } from '@registry/model/registry';\nimport { RegistryService } from '@registry/service';\nimport { PublishModalComponent } from './publish-modal.component';\n\n@Component({\n\n\tselector: 'master-list-view',\n\ttemplateUrl: './master-list-view.component.html',\n\tstyleUrls: ['./master-list-view.component.css']\n})\nexport class MasterListViewComponent implements OnInit {\n\n\tcontent: string = \"\";\n\tlist: MasterList = null;\n\n\t/*\n\t * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n\n\tconstructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) {\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tif (oid != null) {\n\t\t\tthis.content = \"PUB\";\n\t\t}\n\n\t\tthis.service.getMasterList(oid).then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tif (list.read) {\n\t\t\t\tthis.content = \"EXP\";\n\t\t\t}\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\t}\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a *ngIf=\"list && list.read\" style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\">Exploratory</a>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\">Published</a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { interval } from 'rxjs';\n\n\nimport { RegistryService, IOService  } from '@registry/service';\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from '@registry/model/registry';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\n\n@Component({\n\tselector: 'scheduled-jobs',\n\ttemplateUrl: './scheduled-jobs.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class ScheduledJobsComponent implements OnInit {\n\tmessage: string = null;\n\n\tactiveJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tcompleteJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tactiveTimeCounter: number = 0;\n\tcompleteTimeCounter: number = 0;\n\n\tpollingData: any;\n\n\tisViewAllOpen: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.onActiveJobsPageChange(1);\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.activeTimeCounter++\n\t\t\tthis.completeTimeCounter++\n\n\t\t\tif (this.isViewAllOpen) {\n\t\t\t\tif (this.activeTimeCounter >= 4) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t\tif (this.completeTimeCounter >= 7) {\n\t\t\t\t\tthis.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.completeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.activeTimeCounter >= 2) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tformatJobStatus(job: ScheduledJobOverview) {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PaginationPage): void {\n\n\t\tpage.results.forEach(job => {\n\n\t\t\tlet stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{ \"label\": \"File Import\", \"status\": \"COMPLETE\" },\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Staging\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Validation\",\n\t\t\t\t\t\t\"status\": job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Import\",\n\t\t\t\t\t\t\"status\": job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\n\t\t\tjob = job as ScheduledJobOverview;\n\t\t\tjob.stepConfig = stepConfig;\n\t\t});\n\n\t}\n\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\tonViewAllCompleteJobs(): void {\n\t\tthis.onCompleteJobsPageChange(1);\n\n\t\tthis.isViewAllOpen = true;\n\t}\n\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-history/', code])\n\t}\n\n\tonActiveJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.activeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.activeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCompleteJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.completeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.completeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\n\tonCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\t\t\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(job.configuration).then(response => {\n\t\t\t\tthis.bsModalRef.hide()\n\n\t\t\t\tfor (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n\t\t\t\t\tlet activeJob = this.activeJobsPage.results[i];\n\n\t\t\t\t\tif (activeJob.jobId === job.jobId) {\n\t\t\t\t\t\tthis.activeJobsPage.results.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.onViewAllCompleteJobs();\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n  onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n\n    this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n    this.bsModalRef.content.type = ModalTypes.danger;\n\n    this.bsModalRef.content.onConfirm.subscribe(data => {\n\n      this.service.resolveScheduledJob(historyId).then(response => {\n\n        this.bsModalRef.hide()\n\n        for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n          let activeJob = this.activeJobsPage.results[i];\n\n          if (activeJob.jobId === job.jobId) {\n            this.activeJobsPage.results.splice(i, 1);\n            break;\n          }\n        }\n\n        this.onViewAllCompleteJobs();\n\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n\n    });\n  }\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{job.createDate}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.createDate}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.lastUpdateDate}}</p>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from './conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './conflict-widgets/reupload-modal.component';\nimport { RegistryService, IOService } from '@registry/service';\nimport { ScheduledJob } from '@registry/model/registry';\n\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\nimport { LocalizationService, AuthService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'job',\n\ttemplateUrl: './job.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class JobComponent implements OnInit {\n\tmessage: string = null;\n\tjob: ScheduledJob;\n\tallSelected: boolean = false;\n\thistoryId: string = \"\";\n\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\ttimeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tisPolling: boolean = false;\n\thasRowValidationProblem: boolean = false;\n\n\tnotifier: WebSocketSubject<{ type: string, message: string }>;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService,\n\t\tprivate router: Router, private route: ActivatedRoute,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.historyId = this.route.snapshot.params[\"oid\"];\n\n\t\tthis.onPageChange(1);\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'IMPORT_JOB_CHANGE') {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\tformatAffectedRows(rows: string) {\n\t\treturn rows.replace(/,/g, \", \");\n\t}\n\n\tformatValidationResolve(obj: any) {\n\t\treturn JSON.stringify(obj);\n\t}\n\n\tonProblemResolved(problem: any): void {\n\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\tlet pageConflict = this.page.results[i];\n\n\t\t\tif (pageConflict.id === problem.id) {\n\t\t\t\tthis.page.results.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetFriendlyProblemType(probType: string): string {\n\n\t\tif (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.DataNotFoundException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n\t\t}\n\n\t\tif (\n\t\t\tprobType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n\t\t}\n\n\t\t// if(probType === \"net.geoprism.registry.io.TermValueException\"){\n\t\t//   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n\t\t// }\n\n\t\tif (\n\t\t\tprobType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n\t\t}\n\n\t\treturn probType;\n\t}\n\n\n\tonEdit(problem: any): void {\n\t\t// this.router.navigate( ['/registry/master-list-history/', code] )\n\n\t\tthis.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.problem = problem;\n\t\tthis.bsModalRef.content.job = this.job;\n\t\tthis.bsModalRef.content.onConflictAction.subscribe(data => {\n\t\t\tif (data.action === 'RESOLVED') {\n\t\t\t\tthis.onProblemResolved(data.data);\n\t\t\t}\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n\n\t\t\tthis.job = response;\n\n\t\t\tif (this.job.stage === 'IMPORT_RESOLVE') {\n\t\t\t\tthis.page = this.job.importErrors;\n\t\t\t}\n\t\t\telse if (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.page = this.job.problems;\n\n\t\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\t\tlet problem = this.page.results[i];\n\n\t\t\t\t\tif (problem.type === 'RowValidationProblem') {\n\t\t\t\t\t\tthis.hasRowValidationProblem = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonViewAllActiveJobs(): void {\n\n\t}\n\n\tonViewAllCompleteJobs(): void {\n\n\t}\n\n\ttoggleAll(): void {\n\t\tthis.allSelected = !this.allSelected;\n\n\t\tthis.job.importErrors.results.forEach(row => {\n\t\t\trow.selected = this.allSelected;\n\t\t})\n\t}\n\n\tonReuploadAndResume(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.job = this.job;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t});\n\t}\n\n\tonResolveScheduledJob(historyId: string): void {\n\t\tif (this.page.results.length == 0) {\n\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs']);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\n\t\t\tif (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\n\t\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\t}\n\n\tonCancelScheduledJob(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(this.job.configuration).then(response => {\n\t\t\t\t//this.bsModalRef.hide()\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ScheduledJobOverview } from '@registry/model/registry';\n\nimport { RegistryService, IOService } from '@registry/service';\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'job-conflict-modal',\n    templateUrl: './job-conflict-modal.component.html',\n    styleUrls: []\n} )\nexport class JobConflictModalComponent implements OnInit {\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n    \n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) {\n      this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n      \n    }\n    \n    onProblemResolvedListener(problem: any): void {\n      this.onConflictAction.next({action:\"RESOLVED\", data: problem});\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GeoObjectType, MasterList, ScheduledJob, ImportError } from '@registry/model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService, IOService } from '@registry/service';\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'import-problem-widget',\n    templateUrl: './import-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ImportProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        } );\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId( null );\n        editModal.content.setOnSuccessCallback(() => {\n\n          this.onProblemResolved.emit(this.problem);\n          this.bsModalRef.hide()\n            \n        } );\n    }\n\n    getFriendlyProblemType(probType: string): string {\n\n        if(probType === \"net.geoprism.registry.io.ParentCodeException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.PostalCodeLocationException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.AmbiguousParentException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.multi.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.InvalidGeometryException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.invalid.geom.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.DataNotFoundException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.datanotfound\" );\n        }\n        \n        if(\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.permission\" );\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if(\n          probType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.duplicate.data.lookup\" );\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '@registry/model/registry';\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport { RegistryService, IOService } from '@registry/service';\nimport Utils from '../../../utility/Utils'\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'parent-reference-problem-widget',\n    templateUrl: './parent-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '@registry/model/registry';\nimport { RegistryService, IOService } from '@registry/service';\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport Utils from '../../../utility/Utils'\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n    selector: 'term-reference-problem-widget',\n    templateUrl: './term-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( conflict: any ): Observable<any> {\n        return Observable.create(( observer: any ) => {\n            this.iService.getTermSuggestions( conflict.mdAttributeId, this.searchLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n    \n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        classifierId: this.termId,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '@registry/model/registry';\nimport { RegistryService, IOService } from '@registry/service';\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport Utils from '../../../utility/Utils'\n\nimport { ErrorHandler } from '@shared/component';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'row-validation-problem-widget',\n    templateUrl: './row-validation-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class RowValidationProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    formatAffectedRows(rows: string)\n    {\n      return rows.replace(/,/g, \", \");\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <span *ngIf=\"errorMessage\">{{errorMessage}}</span>\n\n  <span>{{message}}</span>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\nimport { TaskService } from '@registry/service';\nimport { GeoObjectType, PaginationPage } from '@registry/model/registry';\n\n@Component({\n\tselector: 'task-viewer',\n\ttemplateUrl: './task-viewer.component.html',\n\tstyleUrls: ['./task-viewer.component.css'],\n\tproviders: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\n\tinProgressTasks: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tcompletedTasks: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tisViewAllOpen: boolean = false;\n\n\tactiveTimeCounter: number = 0;\n\tcompleteTimeCounter: number = 0;\n\n\tpollingData: any;\n\n\tconstructor(private taskService: TaskService) {\n\t\t//const day = this.forDate.getUTCDate();\n\t\t//this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\t}\n\n\tngOnInit(): void {\n\t\tthis.onInProgressTasksPageChange(1);\n\n\t\t////\n\t\t//\n\t\t// We don't need polling on this page. It's better to save bandwidth for low resource environments.\n\t\t//\n\t\t////\n\n\t\t// this.pollingData = Observable.interval(1000).subscribe(() => {\n\t\t//   this.activeTimeCounter++\n\t\t//   this.completeTimeCounter++\n\n\t\t//   if (this.isViewAllOpen)\n\t\t//   {\n\t\t//     if (this.activeTimeCounter >= 4)\n\t\t//     {\n\t\t//       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n\n\t\t//       this.activeTimeCounter = 0;\n\t\t//     }\n\t\t//     if (this.completeTimeCounter >= 7)\n\t\t//     {\n\t\t//       this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n\n\t\t//       this.completeTimeCounter = 0;\n\t\t//     }\n\t\t//   }\n\t\t//   else\n\t\t//   {\n\t\t//     if (this.activeTimeCounter >= 2)\n\t\t//     {\n\t\t//       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n\n\t\t//       this.activeTimeCounter = 0;\n\t\t//     }\n\t\t//   }\n\t\t// });\n\t}\n\n\tupper(str: string): string {\n\t\tif (str != null) {\n\t\t\treturn str.toUpperCase();\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tonInProgressTasksPageChange(pageNumber: any): void {\n\t\tthis.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, 'UNRESOLVED').then(page => {\n\t\t\tthis.inProgressTasks = page;\n\t\t});\n\t}\n\n\tonCompletedTasksPageChange(pageNumber: any): void {\n\n\t\tthis.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, 'RESOLVED').then(page => {\n\t\t\tthis.completedTasks = page;\n\t\t});\n\t}\n\n\tonCompleteTask(task: any): void {\n\t\t// this.isViewAllOpen = true;\n\n\t\tthis.taskService.completeTask(task.id).then(() => {\n\n\t\t\tconst index = this.inProgressTasks.results.findIndex(t => t.id === task.id);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.inProgressTasks.results.splice(index, 1);\n\t\t\t}\n\n\t\t\tthis.completedTasks.results.push(task);\n\t\t\t// this.onCompletedTasksPageChange(1);\n\t\t});\n\t}\n\n\tonMoveTaskToInProgress(task: any): void {\n\t\tthis.isViewAllOpen = true;\n\n\t\tthis.taskService.setTaskStatus(task.id, 'UNRESOLVED').then(() => {\n\n\t\t\tconst index = this.completedTasks.results.findIndex(t => t.id === task.id);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.completedTasks.results.splice(index, 1);\n\t\t\t}\n\n\t\t\tthis.completedTasks.results.splice(index, 1);\n\t\t\tthis.inProgressTasks.results.push(task);\n\t\t});\n\t}\n\n\tonViewAllCompletedTasks(): void {\n\t\tthis.isViewAllOpen = true;\n\n\t\tthis.onCompletedTasksPageChange(1);\n\t}\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span>{{task.createDate}}</span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span style=\"margin-right:30px;\">{{task.createDate}}</span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label><span>{{task.completedDate}}</span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { PageResult } from '@shared/model/core'\nimport { LocalizationService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\nimport { ErrorHandler, ConfirmModalComponent } from '@shared/component';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { SynchronizationConfigModalComponent } from './synchronization-config-modal.component';\n\n@Component({\n\tselector: 'synchronization-config-manager',\n\ttemplateUrl: './synchronization-config-manager.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\tmessage: string = null;\n\n\tpage: PageResult<SynchronizationConfig> = {\n\t\tresultSet: [],\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 20\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.onPageChange(1);\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.service.getPage(pageNumber, this.page.pageSize).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcreate(): void {\n\t\tthis.service.edit(null).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(null, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonEdit(config: SynchronizationConfig): void {\n\n\t\tthis.service.edit(config.oid).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(response.config, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonRemove(config: SynchronizationConfig): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + ' [' + config.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(() => {\n\t\t\tthis.service.remove(config.oid).then(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tonView(config: SynchronizationConfig): void {\n\t\tthis.router.navigate(['/registry/synchronization-config/', config.oid])\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from '@registry/model/registry';\nimport { SynchronizationConfigService, RegistryService } from '@registry/service';\nimport { CustomAttributeConfig } from '@registry/model/sync';\n\nexport interface LevelRow {\n\tisAttributeEditor: boolean;\n\n\tlevel?: any;\n\tlevelNum?: number;\n\thasAttributes?: boolean;\n\n\tattrCfg?: GOTAttributeConfig;\n}\nexport interface GOTAttributeConfig {\n\tgeoObjectTypeCode?: string;\n\tattrs: CustomAttributeConfig[];\n}\n\n@Component({\n\tselector: 'synchronization-config-modal',\n\ttemplateUrl: './synchronization-config-modal.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit {\n\tmessage: string = null;\n\n\t@ViewChild('form') form;\n\n\tconfig: SynchronizationConfig = {\n\t\torganization: null,\n\t\tsystem: null,\n\t\thierarchy: null,\n\t\tlabel: this.lService.create(),\n\t\tconfiguration: {}\n\t};\n\n\torganizations: OrgSyncInfo[] = [];\n\n\tcOrg: OrgSyncInfo = null;\n\tcSystem: { label: string, oid: string, type: string } = null;\n\n\ttypes: GeoObjectType[] = [];\n\n\tlevelRows: LevelRow[] = [];\n\t\n\torgUnitGroups: any[] = [];\n\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonSuccess: Subject<SynchronizationConfig>;\n\n\n\tconstructor(private service: SynchronizationConfigService, private registryService: RegistryService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tinit(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n\n\t\tthis.organizations = organizations;\n\n\t\tif (config != null) {\n\t\t\tthis.config = config;\n\n\t\t\tlet oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\t\tif (oIndex !== -1) {\n\t\t\t\tthis.cOrg = this.organizations[oIndex];\n\t\t\t}\n\n\t\t\tlet sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\t\tif (sIndex !== -1) {\n\t\t\t\tthis.cSystem = this.cOrg.systems[sIndex];\n\t\t\t}\n\n\t\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t\t// Get the types\t\n\t\t\t\t//this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t\t//\tthis.types = types;\n\t\t\t\t//});\n\t\t\t\t\n\t\t\t\tthis.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n          this.types = esConfig.types;\n          this.orgUnitGroups = esConfig.orgUnitGroups;\n        }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n        });\n\n\t\t\t}\n\n\t\t\tthis.levelRows = [];\n\t\t\tfor (var i = 0; i < this.config.configuration.levels.length; ++i) {\n\t\t\t\tvar level = this.config.configuration.levels[i];\n\n\t\t\t\tvar levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n\t\t\t\tif (level.attributes != null && Object.keys(level.attributes).length > 0) {\n\t\t\t\t\tlevelRow.hasAttributes = true;\n\t\t\t\t}\n\n\t\t\t\tthis.levelRows.push(levelRow);\n\t\t\t}\n\t\t}\n\t}\n\n\tonOrganizationSelected(): void {\n\t\tlet index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cOrg = this.organizations[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cOrg = null;\n\t\t\tthis.cSystem = null;\n\t\t}\n\t}\n\n\tonChangeExternalSystem(): void {\n\t\tlet index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cSystem = this.cOrg.systems[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cSystem = null;\n\t\t}\n\n\n\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t// Get the types\t\n\t\t\t//this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t//\tthis.types = types;\n\t\t\t//});\n\t\t\t\n\t\t\tthis.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n        this.types = esConfig.types;\n        this.orgUnitGroups = esConfig.orgUnitGroups;\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n\n\t\t\tif (this.config.configuration['levels'] == null) {\n\t\t\t\tvar lvl = {\n\t\t\t\t\ttype: null,\n\t\t\t\t\tgeoObjectType: null,\n\t\t\t\t\tlevel: 0\n\t\t\t\t};\n\t\t\t\tthis.config.configuration['levels'] = [lvl];\n\t\t\t\tthis.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tthis.types = [];\n\t\t}\n\t}\n\n\taddLevel(): void {\n\t\tvar lvl = {\n\t\t\ttype: null,\n\t\t\tgeoObjectType: null,\n\t\t\tlevel: this.config.configuration.levels.length\n\t\t};\n\t\tvar len = this.config.configuration['levels'].push(lvl);\n\t\tthis.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n\t}\n\n\tremoveLevel(levelNum: number, levelRowIndex: number): void {\n\t\tif (levelNum < this.config.configuration['levels'].length) {\n\t\t\tvar editorIndex = this.getEditorIndex();\n\t\t\tif (editorIndex === levelRowIndex + 1) {\n\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\t\t\t}\n\n\t\t\tthis.levelRows.splice(levelRowIndex, 1);\n\n\t\t\tvar newLevelNum = 0;\n\t\t\tfor (var i = 0; i < this.levelRows.length; ++i) {\n\t\t\t\tvar levelRow: LevelRow = this.levelRows[i];\n\n\t\t\t\tlevelRow.levelNum = newLevelNum;\n\n\t\t\t\tif (!levelRow.isAttributeEditor) {\n\t\t\t\t\tnewLevelNum = newLevelNum + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.config.configuration['levels'].splice(levelNum, 1);\n\t\t}\n\t}\n\n\tgetEditorIndex(): number {\n\t\tfor (var i = 0; i < this.levelRows.length; ++i) {\n\t\t\tvar levelRow = this.levelRows[i];\n\n\t\t\tif (levelRow.isAttributeEditor) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tconfigureAttributes(levelRow: any): void {\n\t\tvar editorIndex = this.getEditorIndex();\n\n\t\tif (editorIndex != -1) {\n\t\t\tthis.levelRows.splice(editorIndex, 1);\n\n\t\t\tif (editorIndex == levelRow.levelNum + 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n\t}\n\n\tgetTermOptions(attr: CustomAttributeConfig, dhis2Id: string) {\n\t\tfor (var i = 0; i < attr.dhis2Attrs.length; ++i) {\n\t\t\tvar dhis2Attr = attr.dhis2Attrs[i];\n\n\t\t\tif (dhis2Attr.dhis2Id === dhis2Id) {\n\t\t\t\treturn dhis2Attr.options;\n\t\t\t}\n\t\t}\n\t}\n\n\tonChangeAttrMapping(attr: any, newValue: string, levelRow: LevelRow) {\n\t\tif (newValue == null || newValue === \"\") {\n\t\t\tif (attr.terms != null) {\n\t\t\t\tattr.terms = {};\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var j = 0; j < levelRow.attrCfg.attrs.length; j++) {\n\t\t\tif (levelRow.attrCfg.attrs[j].name === attr.name) {\n\t\t\t\tvar attrCfgAttr: any = levelRow.attrCfg.attrs[j];\n\n\t\t\t\tif (attrCfgAttr.terms != null) {\n\t\t\t\t\tattr.terms = {};\n\n\t\t\t\t\tfor (var i = 0; i < attrCfgAttr.terms.length; ++i) {\n\t\t\t\t\t\tvar term = attrCfgAttr.terms[i];\n\n\t\t\t\t\t\tattr.terms[term.code] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tonSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n\t\tif (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n\t\t\tvar levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n\t\t\tlevelRow.hasAttributes = false;\n\t\t\tlevelRow.attrCfg = null;\n\t\t\tlevelRow.level.attributes = {};\n\n\t\t\tvar editorIndex = this.getEditorIndex();\n\n\t\t\tif (editorIndex != -1 && editorIndex === levelRowIndex + 1) {\n\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar attrCfg = this.levelRows[levelRowIndex].attrCfg;\n\t\tif (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n\t\t\t// Resume an editing session on attributes that we fetched previously\n\n\t\t\tvar editorIndex = this.getEditorIndex();\n\n\t\t\tif (editorIndex != -1 && editorIndex !== levelRowIndex + 1) {\n\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\n\t\t\t\tif (editorIndex < levelRowIndex) {\n\t\t\t\t\tlevelRowIndex = levelRowIndex - 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n\t\t}\n\t\telse {\n\t\t\tthis.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((attrs: CustomAttributeConfig[]) => {\n\t\t\t\tvar editorIndex = this.getEditorIndex();\n\t\t\t\tvar levelRow: LevelRow = this.levelRows[levelRowIndex];\n\t\t\t\tvar level = levelRow.level;\n\n\t\t\t\tif (isDifferentGot) {\n\t\t\t\t\tlevel.attributes = {};\n\t\t\t\t}\n\n\t\t\t\tlevelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, attrs: attrs };\n\n\t\t\t\tif (editorIndex != -1 && (editorIndex === levelRowIndex + 1 || attrs.length > 0)) {\n\t\t\t\t\tthis.levelRows.splice(editorIndex, 1);\n\n\t\t\t\t\tif (editorIndex < levelRowIndex) {\n\t\t\t\t\t\tlevelRowIndex = levelRowIndex - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (attrs.length > 0) {\n\t\t\t\t\tlevelRow.hasAttributes = true;\n\n\t\t\t\t\tfor (var i = 0; i < attrs.length; ++i) {\n\t\t\t\t\t\tvar attr = attrs[i];\n\n\t\t\t\t\t\tif (isDifferentGot || level.attributes[attr.name] == null) {\n\t\t\t\t\t\t\tlevel.attributes[attr.name] = {\n\t\t\t\t\t\t\t\tname: attr.name,\n\t\t\t\t\t\t\t\texternalId: null,\n\t\t\t\t\t\t\t\tisOrgUnitGroup: false\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (attr.terms != null && attr.terms.length > 0) {\n\t\t\t\t\t\t\t\tlevel.attributes[attr.name].terms = {};\n\n\t\t\t\t\t\t\t\tfor (var j = 0; j < attr.terms.length; ++j) {\n\t\t\t\t\t\t\t\t\tvar term = attr.terms[j];\n\n\t\t\t\t\t\t\t\t\tlevel.attributes[attr.name].terms[term.code] = null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//else if (level.attributes[attr.name] != null)\n\t\t\t\t\t\t//{\n\t\t\t\t\t\t//  level.attributes[attr.name].isOrgUnitGroup = level.attributes[attr.name].isOrgUnitGroup || attr.isOrgUnitGroup || false;\n\t\t\t\t\t\t//}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: { geoObjectTypeCode: geoObjectTypeCode, attrs: attrs } });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlevelRow.hasAttributes = false;\n\t\t\t\t}\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tonChangeTargetType(attr: any): void {\n\t  attr.externalId = null;\n\t  \n\t  for (const key in attr.terms) {\n      if (attr.terms.hasOwnProperty(key)) {\n        attr.terms[key] = null;\n      }\n    }\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.apply(this.config).then(cfg => {\n\n\t\t\tthis.onSuccess.next(cfg);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcancel(): void {\n\n\t\tif (this.config.oid != null) {\n\t\t\tthis.service.unlock(this.config.oid).then(() => {\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef.hide();\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> ({{localeValue.locale}})\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.hierarchy\" name=\"hierarchy\" [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"config.hierarchy != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"row-holder\" *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.units\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n              <thead>\n                <tr>\n                  <th style=\"width:3%\">\n                    <localize key=\"settings.external.synchronization.level.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                  </th>\n                  <th style=\"width:17%\">\n                    <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                  </th>\n                  <th style=\"width:25%; text-align: center;\">\n                    <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                  <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                      <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                      <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                    </select>\n                  </td>\n                  <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                      <option></option>\n                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n\t\t\t\t\t\t\t\t\t  <div>\n\t\t\t\t\t\t\t\t\t    <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n\t\t\t\t\t\t\t\t\t      <icon class=\"fa fa-trash-o ico-remove\"></icon>\n\t\t\t\t\t\t\t\t\t      <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n\t\t\t\t\t\t\t\t\t    </a> \n\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t  <div>\n                      <a *ngIf=\"levelRow.hasAttributes\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                        <icon class=\"fa fa-edit\"></icon>\n                        <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.configureAttributes\"></localize></label>\n                      </a> \n                    </div>\n\t\t\t\t\t\t\t\t\t</td>\n                  <td colspan=\"4\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                    <h4>Attributes</h4>\n\t                  <table class=\"table\">\n\t                    <thead>\n\t                      <tr>\n\t                        <th></th>\n\t                      </tr>\n\t                    </thead>\n\t                    <tbody>\n\t                      <tr *ngFor=\"let attr of levelRow.attrCfg.attrs\">\n\t                        <td class=\"row-holder\">\n\t                          <table class=\"row\" style=\"width:80%; margin-left:80px; margin-top:15px; margin-bottom: 10px;\">\n\t                            <thead>\n\t                              <tr>\n\t                                <th style=\"width:25%\">\n\t                                  <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n\t                                </th>\n\t                                <th style=\"width:25%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:25%\">\n                                    <label *ngIf=\"attr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:25%\">\n                                    <label>\n                                      <localize *ngIf=\"!levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n\t                              </tr>\n\t                            </thead>\n\t                            <tbody>\n\t                              <tr>\n\t                                <td><label style=\"color:#999;\">{{attr.label}}</label></td>\n\t                                <td>\n\t                                  <label style=\"color:#999;\">{{attr.typeLabel}}</label>\n\t                                </td>\n\t                                <td *ngIf=\"attr.type === 'term'\" style=\"margin-right:20px;\">\n\t                                  <select style=\"width:95%\" *ngIf=\"attr.type === 'term'\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" (change)=\"onChangeTargetType(levelRows[i-1].level.attributes[attr.name])\" [name]=\"'isOrgUnitGroup' + i + attr.name\">\n                                      <option [ngValue]=\"false\">{{attr.typeLabel}}</option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n\t                                </td>\n\t                                <td *ngIf=\"attr.type !== 'term'\" style=\"float:right; margin-right:20px;\">\n\t                                  <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n\t                                </td>\n\t                                <td>\n\t                                  <select *ngIf=\"attr.dhis2Attrs.length > 0 && !levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].externalId\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeAttrMapping(levelRows[i-1].level.attributes[attr.name], levelRows[i-1].level.attributes[attr.name].externalId, levelRow)\">\n\t                                    <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                    <option [value]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of attr.dhis2Attrs\">\n\t                                      {{dhis2Attr.name}}\n\t                                    </option>\n\t                                  </select>\n\t                                  <label *ngIf=\"attr.dhis2Attrs.length == 0 && !levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n\t                                </td>\n\t                              </tr>\n\t                            </tbody>\n\t                          </table>\n\t                          <div *ngIf=\"(levelRows[i-1].level.attributes[attr.name].externalId != null && levelRows[i-1].level.attributes[attr.name].externalId.length > 0) || levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\">\n\t\t                          <table *ngFor=\"let term of attr.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n\t                              <thead>\n\t                                <tr>\n\t                                  <th style=\"width:25%\">\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <!-- To -->\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label>\n\t                                      <localize *ngIf=\"!levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n\t                                      <localize *ngIf=\"levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n\t                                    </label>\n\t                                  </th>\n\t                                </tr>\n\t                              </thead>\n\t                              <tbody>\n\t                                <tr>\n\t                                  <td></td>\n\t                                  <td><label style=\"color:#999;\">{{term.label}}</label></td>\n\t                                  <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n\t                                  <td>\n\t                                    <select *ngIf=\"!levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                      <option *ngFor=\"let option of getTermOptions(attr, levelRows[i-1].level.attributes[attr.name].externalId)\" [value]=\"option.code\">\n\t                                        {{option.name}}\n\t                                      </option>\n\t                                    </select>\n\t                                    <select *ngIf=\"levelRows[i-1].level.attributes[attr.name].isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t\t\t\t\t\t\t                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t\t\t\t\t\t\t\t\t                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n\t\t\t\t\t\t\t\t\t                    </select>\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n                            </div>\n\t                        </td>\n\t                      </tr>\n\t                    </tbody>\n\t                  </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          \n          </div>\n      </div>\n\n\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from '@shared/model/core'\nimport { LocalizationService } from '@shared/service';\n\nimport { SynchronizationConfig, ExportScheduledJob } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { ErrorHandler } from '@shared/component/error-handler/error-handler';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'synchronization-config',\n\ttemplateUrl: './synchronization-config.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\tmessage: string = null;\n\n\tconfig: SynchronizationConfig = null;\n\n\tpage: PageResult<ExportScheduledJob> = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresultSet: []\n\t};\n\n\tnotifier: WebSocketSubject<{ type: string, content: any }>;\n\n\tconstructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tthis.service.get(oid).then(config => {\n\t\t\tthis.config = config;\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tlet baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? ':' + window.location.port : '') + acp;\n\n\t\tthis.notifier = webSocket(baseUrl + '/websocket/notify');\n\t\tthis.notifier.subscribe(message => {\n\t\t\tif (message.type === 'DATA_EXPORT_JOB_CHANGE') {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\n\t\tif (this.notifier != null) {\n\t\t\tthis.notifier.complete();\n\t\t}\n\t}\n\n\tonRun(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.run(this.config.oid).then(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tif (this.config != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n\n\t\t\t\tthis.formatStepConfig(response);\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tformatJobStatus(job: ExportScheduledJob): string {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PageResult<ExportScheduledJob>): void {\n\n\t\tpage.resultSet.forEach((job: ExportScheduledJob) => {\n\n\t\t\tjob.stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Queued\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Connecting\",\n\t\t\t\t\t\t\"status\": job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Export\",\n\t\t\t\t\t\t\"status\": job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ExportScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label> \n              <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i> \n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <form #myForm=\"ngForm\">\n                <div class=\"form-group text-right\" style=\"margin: 0;\">\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n                <h4>\n                    <localize key=\"synchronization.config.units\"></localize>\n                </h4>\n                <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>\n                          <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th>\n                          <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                        </th>\n                        <th style=\"text-align: right;\">\n                          <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\" >\n                        <td style=\"vertical-align: middle;\">\n                          <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                        </td>\n                        <td style=\"\">\n                          {{level.geoObjectType}}\n                        </td>\n                        <td style=\"text-align: right;\">\n                          <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                          <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                          <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                        </td>\n                      </tr>\n                    </tbody>\n                </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\" style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\" [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\" [routerLink]=\"'/registry/sync/details/' + job.historyId\" routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                           </div>\n                         </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { AuthService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { RegistryService, IOService } from '@registry/service';\nimport { ScheduledJob } from '@registry/model/registry';\n\n@Component({\n  selector: 'job',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.css']\n})\nexport class SyncDetailsComponent implements OnInit {\n  message: string = null;\n  job: ScheduledJob;\n  historyId: string = \"\";\n\n  page: any = {\n    count: 0,\n    pageNumber: 1,\n    pageSize: 10,\n    results: []\n  };\n\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n\n  constructor(public service: RegistryService, private route: ActivatedRoute, authService: AuthService, public ioService: IOService) {\n    this.isAdmin = authService.isAdmin();\n    this.isMaintainer = this.isAdmin || authService.isMaintainer();\n    this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n  }\n\n  ngOnInit(): void {\n\n    this.historyId = this.route.snapshot.params[\"oid\"];\n\n    this.onPageChange(1);\n\n  }\n\n  ngOnDestroy() {\n  }\n\n  formatAffectedRows(rows: string) {\n    return rows.replace(/,/g, \", \");\n  }\n\n  formatValidationResolve(obj: any) {\n    return JSON.stringify(obj);\n  }\n\n  onPageChange(pageNumber: any): void {\n\n    this.message = null;\n\n    this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n\n      this.job = response;\n      \n      this.page = this.job.exportErrors;\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { Map, LngLatBoundsLike, NavigationControl, MapboxEvent, AttributionControl } from 'mapbox-gl';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { AllGeoJSON } from '@turf/helpers'\nimport bbox from '@turf/bbox';\n\nimport { Subject } from 'rxjs';\n\nimport { GeoObject, MasterList, ContextLayer, ContextLayerGroup } from '@registry/model/registry';\nimport { LocationInformation } from '@registry/model/location-manager';\n\nimport { ContextLayerModalComponent } from './context-layer-modal.component';\n\nimport { MapService, RegistryService } from '@registry/service';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'location-manager',\n\ttemplateUrl: './location-manager.component.html',\n\tstyleUrls: ['./location-manager.css']\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n\tbsModalRef: BsModalRef;\n\n    /* \n     * Root nodes of the tree\n     */\n\tdata: LocationInformation = {\n\t\ttypes: [],\n\t\thierarchies: [],\n\t\tgeojson: { type: 'MultiPolygon', features: [] },\n\t};\n\n\tchildType: string = null;\n\thierarchy: string = null;\n\n    /*\n     * Date of data for explorer\n     */\n\tdateStr: string = null;\n\n    /* \n     * Breadcrumb of previous children clicked on\n     */\n\tbreadcrumbs = [] as GeoObject[];\n\n    /* \n     * Root nodes of the tree\n     */\n\tcurrent: GeoObject;\n\n    /* \n     * mapbox-gl map\n     */\n\tmap: Map;\n\n    /* \n     * Flag denoting the draw control is active\n     */\n\tactive: boolean = false;\n\n\tvectorLayers: string[] = [];\n\n\tcontextLayerGroups: ContextLayerGroup[] = [];\n\n\tlists: MasterList[] = [];\n\n    /* \n     * List of base layers\n     */\n\tbaseLayers: any[] = [\n\t\t{\n\t\t\tname: 'Satellite',\n\t\t\tlabel: 'Satellite',\n\t\t\tid: 'satellite-v9',\n\t\t\tsprite: 'mapbox://sprites/mapbox/satellite-v9',\n\t\t\turl: 'mapbox://mapbox.satellite',\n\t\t\tselected: true\n\t\t},\n\t\t// {\n\t\t// \tname: 'Streets',\n\t\t// \tlabel: 'Streets',\n\t\t// \tid: 'streets-v9',\n\t\t// \tsprite: 'mapbox://sprites/mapbox/basic-v9',\n\t\t// \turl: 'mapbox://mapbox.basic-v9'\n\t\t// }\n\t];\n\n\tbaselayerIconHover = false;\n\n\thoverFeatureId: string;\n\n\tpreventSingleClick: boolean = false;\n\n\t/* \n     * Timer for determining double click vs single click\n     */\n\ttimer: any;\n\n\t/* \n     * debounced subject for map extent change events\n     */\n\tsubject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n\tconstructor(private modalService: BsModalService, private mapService: MapService, public service: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getAllMasterListVersions().then(lists => {\n\t\t\tthis.lists = lists;\n\n\t\t\tthis.convertListsToContextLayers(lists);\n\t\t});\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.map.remove();\n\t}\n\n\tngAfterViewInit() {\n\n\t\tconst layer = this.baseLayers[0];\n\n\t\tthis.map = new Map({\n\t\t\tcontainer: 'map',\n\t\t\tstyle: {\n\t\t\t\t\"version\": 8,\n\t\t\t\t\"name\": layer.name,\n\t\t\t\t\"metadata\": {\n\t\t\t\t\t\"mapbox:autocomposite\": true\n\t\t\t\t},\n\t\t\t\t\"sources\": {\n\t\t\t\t\t\"mapbox\": {\n\t\t\t\t\t\t\"type\": \"raster\",\n\t\t\t\t\t\t\"url\": layer.url,\n\t\t\t\t\t\t\"tileSize\": 256\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"sprite\": layer.sprite,\n\t\t\t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t\t\t\t\"layers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": layer.id,\n\t\t\t\t\t\t\"type\": 'raster',\n\t\t\t\t\t\t\"source\": 'mapbox',\n\t\t\t\t\t\t// \"source-layer\": \"mapbox_satellite_full\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tzoom: 2,\n\t\t\tattributionControl: false,\n\t\t\tcenter: [-78.880453, 42.897852]\n\t\t});\n\n\t\tthis.map.on('load', () => {\n\t\t\tthis.initMap();\n\t\t});\n\n\t}\n\n\tconvertListsToContextLayers(lists: MasterList[]): void {\n\t\tlists.forEach(list => {\n\t\t\tlet thisList = { oid: list.oid, displayLabel: list.displayLabel.localizedValue, contextLayers: [] };\n\t\t\tthis.contextLayerGroups.push(thisList);\n\t\t\tlist.versions.forEach(version => {\n\t\t\t\tlet thisContextLayer = { oid: version.oid, displayLabel: version.forDate, active: false, enabled: false };\n\t\t\t\tthisList.contextLayers.push(thisContextLayer);\n\t\t\t});\n\t\t});\n\t}\n\n\thandleDateChange(): void {\n\t\tthis.back(null);\n\t}\n\n\tinitMap(): void {\n\n\t\tthis.map.on('style.load', () => {\n\t\t\tthis.addLayers();\n\t\t\tthis.refresh();\n\t\t});\n\n\t\tthis.addLayers();\n\n\n\t\tthis.refresh();\n\n\t\t// Add zoom and rotation controls to the map.\n\t\tthis.map.addControl(new NavigationControl({ 'visualizePitch': true }));\n\t\tthis.map.addControl(new AttributionControl({ compact: true }), 'bottom-right');\n\n\t\tthis.map.on('dblclick', 'children-points', (event: any) => {\n\t\t\tthis.handleMapClickEvent(event);\n\t\t});\n\n\t\tthis.map.on('dblclick', 'children-polygon', (event: any) => {\n\t\t\tthis.handleMapClickEvent(event);\n\t\t});\n\t}\n\n\taddLayers(): void {\n\n\t\tconst source = 'children';\n\n\t\tthis.map.addSource(source, {\n\t\t\ttype: 'geojson',\n\t\t\tdata: {\n\t\t\t\t\"type\": \"FeatureCollection\",\n\t\t\t\t\"features\": []\n\t\t\t}\n\t\t});\n\n\t\t// Point layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": source,\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 10,\n\t\t\t\t\"circle-color\": '#a6611a',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n\t\t\t]\n\t\t});\n\n\t\t// Polygon layer\n\t\tthis.map.addLayer({\n\t\t\t'id': source + '-polygon',\n\t\t\t'type': 'fill',\n\t\t\t'source': source,\n\t\t\t'layout': {},\n\t\t\t'paint': {\n\t\t\t\t'fill-color': '#a6611a',\n\t\t\t\t'fill-opacity': 0.8,\n\t\t\t\t'fill-outline-color': 'black'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n\t\t\t]\n\t\t});\n\n\n\t\t// Label layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-label\",\n\t\t\t\"source\": source,\n\t\t\t\"type\": \"symbol\",\n\t\t\t\"paint\": {\n\t\t\t\t\"text-color\": \"black\",\n\t\t\t\t\"text-halo-color\": \"#fff\",\n\t\t\t\t\"text-halo-width\": 2\n\t\t\t},\n\t\t\t\"layout\": {\n\t\t\t\t\"text-field\": ['get', 'localizedValue', ['get', 'displayLabel']],\n\t\t\t\t\"text-font\": [\"NotoSansRegular\"],\n\t\t\t\t\"text-offset\": [0, 0.6],\n\t\t\t\t\"text-anchor\": \"top\",\n\t\t\t\t\"text-size\": 12,\n\t\t\t}\n\t\t});\n\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\tthis.addVectorLayer(cLayer.oid);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t}\n\n\trefresh(): void {\n\t\tif (this.current == null) {\n\t\t\tthis.mapService.roots(this.childType, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.mapService.select(this.current.properties.code, this.current.properties.type, this.childType, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t}\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\thandleBasemapStyle(layer: any): void {\n\t\t// this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n\t\tthis.baseLayers.forEach(baseLayer => {\n\t\t\tbaseLayer.selected = false;\n\t\t});\n\n\t\tlayer.selected = true;\n\n\t\tthis.map.setStyle({\n\t\t\t\"version\": 8,\n\t\t\t\"name\": layer.name,\n\t\t\t\"metadata\": {\n\t\t\t\t\"mapbox:autocomposite\": true\n\t\t\t},\n\t\t\t\"sources\": {\n\t\t\t\t\"mapbox\": {\n\t\t\t\t\t\"type\": \"raster\",\n\t\t\t\t\t\"url\": layer.url,\n\t\t\t\t\t\"tileSize\": 256\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"sprite\": layer.sprite,\n\t\t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t\t\t\"layers\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": layer.id,\n\t\t\t\t\t\"type\": 'raster',\n\t\t\t\t\t\"source\": 'mapbox',\n\t\t\t\t\t// \"source-layer\": \"mapbox_satellite_full\"\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\t// handleStyle(layer: any): void {\n\n\t// \tthis.baseLayers.forEach(baseLayer => {\n\t// \t\tbaseLayer.selected = false;\n\t// \t});\n\n\t// \tlayer.selected = true;\n\n\t// \tthis.map.setStyle({\n\t// \t\t\"version\": 8,\n\t// \t\t\"name\": layer.name,\n\t// \t\t\"metadata\": {\n\t// \t\t\t\"mapbox:autocomposite\": true\n\t// \t\t},\n\t// \t\t\"sources\": {\n\t// \t\t\t\"mapbox\": {\n\t// \t\t\t\t\"type\": \"raster\",\n\t// \t\t\t\t\"url\": layer.url,\n\t// \t\t\t\t\"tileSize\": 256\n\t// \t\t\t}\n\t// \t\t},\n\t// \t\t\"sprite\": layer.sprite,\n\t// \t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t// \t\t\"layers\": [\n\t// \t\t\t{\n\t// \t\t\t\t\"id\": \"background\",\n\t// \t\t\t\t\"type\": \"background\",\n\t// \t\t\t\t\"paint\": {\n\t// \t\t\t\t\t\"background-color\": \"rgb(4,7,14)\"\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t\t{\n\t// \t\t\t\t\"id\": layer.id,\n\t// \t\t\t\t\"type\": \"raster\",\n\t// \t\t\t\t\"source\": \"mapbox\",\n\t// \t\t\t\t\"source-layer\": \"mapbox_satellite_full\"\n\t// \t\t\t}\n\t// \t\t]\n\t// \t});\n\t// }\n\n\taddContextLayerModal(): void {\n\t\tthis.bsModalRef = this.modalService.show(ContextLayerModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'context-layer-modal'\n\t\t});\n\t\tthis.bsModalRef.content.contextLayerGroups = this.contextLayerGroups;\n\n\t\t(<ContextLayerModalComponent>this.bsModalRef.content).onSubmit.subscribe(cLayerGroups => {\n\n\t\t\t// cLayerGroups.forEach(cLayerGroup => {\n\t\t\t// \tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t// \t\tthis.toggleContextLayer(cLayer.oid)\n\t\t\t// \t});\n\t\t\t// })\n\n\t\t});\n\t}\n\n\thighlightMapFeature(id: string): void {\n\n\t\t//\t\tthis.map.setFilter('hover-points', ['all',\n\t\t//\t\t\t['==', 'oid', id]\n\t\t//\t\t])\n\n\t}\n\n\tclearHighlightMapFeature(): void {\n\n\t\t//\t\tthis.map.setFilter('hover-points', ['all',\n\t\t//\t\t\t['==', 'oid', \"NONE\"]\n\t\t//\t\t])\n\n\t}\n\n\tonListEntityHover(event: GeoObject, site: GeoObject): void {\n\t\tif (this.current == null) {\n\t\t\tthis.highlightMapFeature(site.properties.code);\n\t\t}\n\t}\n\n\tonListEntityHoverOff(): void {\n\t\tthis.clearHighlightMapFeature();\n\t}\n\n\t//\thighlightListItem(id: string): void {\n\t//\t\tthis.nodes.forEach(node => {\n\t//\t\t\tif (node.properties.code === id) {\n\t//\t\t\t\tthis.hoverFeatureId = id;\n\t//\t\t\t}\n\t//\t\t})\n\t//\t}\n\t//\n\t//\tclearHighlightListItem(): void {\n\t//\t\tif (this.hoverFeatureId) {\n\t//\t\t\tthis.nodes.forEach(node => {\n\t//\t\t\t\tif (node.properties.code === this.hoverFeatureId) {\n\t//\t\t\t\t\tthis.hoverFeatureId = null;\n\t//\t\t\t\t}\n\t//\t\t\t})\n\t//\t\t}\n\t//\t}\n\n\tzoomToFeature(node: GeoObject, event: MouseEvent): void {\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tthis.preventSingleClick = false;\n\t\tconst delay = 200;\n\n\t\tthis.timer = setTimeout(() => {\n\t\t\tif (!this.preventSingleClick) {\n\t\t\t\tif (node.geometry != null) {\n\t\t\t\t\tconst bounds = bbox(node as AllGeoJSON) as LngLatBoundsLike;\n\n\t\t\t\t\tthis.map.fitBounds(bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}, delay);\n\t}\n\n\tselect(node: GeoObject, event: MouseEvent): void {\n\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tthis.preventSingleClick = true;\n\t\tclearTimeout(this.timer);\n\n\t\tthis.drillDown(node);\n\t}\n\n\thandleMapClickEvent(event: any): void {\n\t\tif (event.features != null && event.features.length > 0) {\n\t\t\tconst feature = event.features[0];\n\n\t\t\tconst index = this.data.geojson.features.findIndex(node => { return node.properties.code === feature.properties.code });\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.drillDown(this.data.geojson.features[index]);\n\t\t\t}\n\t\t}\n\t}\n\n\tdrillDown(node: GeoObject): void {\n\t\tthis.mapService.select(node.properties.code, node.properties.type, null, this.hierarchy, this.dateStr).then(data => {\n\t\t\tthis.current = node;\n\n\t\t\tthis.addBreadcrumb(node);\n\n\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\tthis.setData(data);\n\t\t});\n\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\taddBreadcrumb(node: GeoObject): void {\n\n\t\tif (this.breadcrumbs.length == 0 || this.breadcrumbs[this.breadcrumbs.length - 1].properties.code !== node.properties.code) {\n\t\t\tthis.breadcrumbs.push(node);\n\t\t}\n\t}\n\n\tback(node: GeoObject): void {\n\n\t\tif (node != null) {\n\t\t\tthis.mapService.select(node.properties.code, node.properties.type, null, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\tvar indexOf = this.breadcrumbs.findIndex(i => i.properties.code === node.properties.code);\n\n\t\t\t\tthis.current = node;\n\t\t\t\tthis.breadcrumbs.splice(indexOf + 1);\n\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t}\n\t\telse if (this.breadcrumbs.length > 0) {\n\t\t\tthis.mapService.roots(null, null, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\n\t\t\t\tthis.current = null;\n\t\t\t\tthis.breadcrumbs = [];\n\t\t\t});\n\t\t}\n\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\texpand(node: GeoObject) {\n\t\tthis.current = node;\n\t}\n\n\tsetNodes(nodes: GeoObject[]): void {\n\t\tthis.data.geojson.features = [];\n\n\t\tnodes.forEach(node => {\n\t\t\tthis.data.geojson.features.push(node);\n\t\t})\n\t}\n\n\tsetData(data: LocationInformation): void {\n\t\tthis.data = data;\n\n\t\tthis.hierarchy = data.hierarchy;\n\t\tthis.childType = data.childType;\n\t}\n\n\n\tgroupHasEnabledContextLayers(group: string): boolean {\n\t\tlet hasEnabled = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tif (cLayerGroup.oid === group) {\n\t\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\t\thasEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn hasEnabled;\n\t}\n\n\thasEnabledContextLayers(): boolean {\n\t\tlet hasEnabled = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\thasEnabled = true;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn hasEnabled;\n\t}\n\n\tremoveContextLayer(cLayer: ContextLayer): void {\n\t\tif (cLayer.active) {\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-points\");\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-polygon\");\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-label\");\n\t\t\tthis.map.removeSource(cLayer.oid);\n\n\t\t\tcLayer.active = false;\n\t\t}\n\n\t\tcLayer.enabled = false;\n\t}\n\n\ttoggleContextLayer(source: string): void {\n\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.oid === source) {\n\n\t\t\t\t\t// WARNING: the boolean component returns the value already switched (false --> true). \n\t\t\t\t\t// I'm reversing that value here so the logic below is more intuitive.\n\t\t\t\t\t// cLayer.active = !cLayer.active \n\t\t\t\t\t//\n\n\t\t\t\t\tif (cLayer.active) {\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-points\");\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-polygon\");\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-label\");\n\t\t\t\t\t\tthis.map.removeSource(source);\n\n\t\t\t\t\t\tcLayer.active = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.addVectorLayer(source);\n\n\t\t\t\t\t\tcLayer.active = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\taddVectorLayer(source: string): void {\n\t\tconst prevLayer = 'children-points';\n\n\t\t// console.log(navigator.language.toLowerCase());\n\n\t\tvar protocol = window.location.protocol;\n\t\tvar host = window.location.host;\n\n\t\tthis.map.addSource(source, {\n\t\t\ttype: 'vector',\n\t\t\ttiles: [protocol + '//' + host + acp + '/master-list/tile?x={x}&y={y}&z={z}&config=' + encodeURIComponent(JSON.stringify({ oid: source }))]\n\t\t});\n\n\t\t// Point layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 10,\n\t\t\t\t\"circle-color\": '#800000',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n\t\t\t]\n\t\t}, prevLayer);\n\n\t\t// Polygon layer\n\t\tthis.map.addLayer({\n\t\t\t'id': source + '-polygon',\n\t\t\t'type': 'fill',\n\t\t\t'source': source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t'layout': {},\n\t\t\t'paint': {\n\t\t\t\t'fill-color': '#80cdc1',\n\t\t\t\t'fill-opacity': 0.8,\n\t\t\t\t'fill-outline-color': 'black'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n\t\t\t]\n\t\t}, prevLayer);\n\n\n\t\t// Label layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-label\",\n\t\t\t\"source\": source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t\"type\": \"symbol\",\n\t\t\t\"paint\": {\n\t\t\t\t\"text-color\": \"black\",\n\t\t\t\t\"text-halo-color\": \"#fff\",\n\t\t\t\t\"text-halo-width\": 2\n\t\t\t},\n\t\t\t\"layout\": {\n\t\t\t\t\"text-field\": [\"case\",\n\t\t\t\t\t[\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n\t\t\t\t\t[\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n\t\t\t\t\t[\"string\", [\"get\", \"displayLabel\"]]\n\t\t\t\t],\n\t\t\t\t\"text-font\": [\"NotoSansRegular\"],\n\t\t\t\t\"text-offset\": [0, 0.6],\n\t\t\t\t\"text-anchor\": \"top\",\n\t\t\t\t\"text-size\": 12,\n\t\t\t}\n\t\t}, prevLayer);\n\n\t}\n}\n","<div class=\"\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div id=\"navigator-left-sidebar\" class=\"col-md-3 lw-inner-col\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n\n            <div class=\"row\">\n              <div class=\"col-md-12\" style=\"height: 56px; overflow: auto;\">\n                <ul class=\"breadcrumb\">\n                  <li *ngIf=\"current != null\">\n                    <!-- <i class=\"fa fa-angle-left breadcrumb-back-ico\" aria-hidden=\"true\"></i> -->\n                    <a (click)=\"back(null)\" style=\"color: #007276;\"><localize key=\"explorer.root.label\"></localize></a>\n                  </li>\n                  <li *ngFor=\"let entity of breadcrumbs; last as isLast\" [ngClass]=\"{'active':isLast}\">\n                    <a *ngIf=\"!isLast\" (click)=\"back(entity)\" style=\"color: #007276;\"> {{entity.properties.displayLabel.localizedValue}}</a>\n                    <span *ngIf=\"isLast\">\n                      <b>{{entity.properties.displayLabel.localizedValue}}</b>\n                    </span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.date.label\"></localize>\n                  </label>\n                  <input style=\"width: 100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n                </div>\n              </div>\n            </div>\n\n            <!-- Search bar -->\n            <!-- <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\"> -->\n                  <!-- \n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n -->\n                <!-- </div>\n              </div>\n            </div> -->\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.hierarchy.label\"></localize>\n                  </label>\n                  <select id=\"hierarchy\" name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" (change)=\"refresh()\"  required>\n                    <option></option>\n                    <option *ngFor=\"let hierarchy of data.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label.localizedValue}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.hierarchy.branch.label\"></localize>\n                  </label>\n                  <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"childType\" (change)=\"refresh()\" required>\n                    <option></option>\n                    <option *ngFor=\"let type of data.types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n                  <div class=\"list-group\">\n\n                    <div *ngFor=\"let node of data.geojson.features; let i = index\" class=\"list-group-item\">\n                      <!-- Single column card -->\n                      <div class=\"card card-default\" (click)=\"zoomToFeature(node, $event)\" >\n                        <div class=\"card-body\">\n                          <i class=\"fa fa-level-down clickable\" style=\"float: right;\" aria-hidden=\"true\" (click)=\"select(node, $event)\" title=\"Drill into location\"></i>\n                          <h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"Zoom to location\">{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n                        </div>\n                      </div>\n                    </div>\n\n                <!-- <tab heading=\"Context Layers\"> \n                  <div class=\"list-group\">\n                    <div *ngFor=\"let list of lists; let i = index\" class=\"list-group-item\">\n                      {{ list.displayLabel.localizedValue }}\n                      <div class=\"list-group\">\n                        <div *ngFor=\"let version of list.versions\" class=\"list-group-item\">\n                          <input type=\"checkbox\" (click)=\"toggleContextLayer(version.oid)\"> {{ version.forDate }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>              \n                </tab>  -->\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-md-9\" id=\"site-explorer-map\">\n        <div class=\"row\">\n          \n          <article class=\"base-layer-panel\">\n            <div class=\"layer-toggle\" (mouseenter)=\"baselayerIconHover = true\" (mouseleave)=\"baselayerIconHover = false\">\n              \n              <i class=\"fa fa-bars\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n              <div *ngIf=\"baselayerIconHover\">\n\n                <div style=\"margin-bottom: 10px;\">\n                  <h4>\n                    <localize key=\"explorer.base.layers.label\"></localize>\n                  </h4>\n                  <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                    <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleBasemapStyle(baseLayer)\"> \n                    <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                  </div>\n                </div>\n\n                <div *ngIf=\"hasEnabledContextLayers()\">\n                  <h4>\n                    <localize key=\"explorer.context.layers.label\"></localize>\n                  </h4>\n                  <div class=\"list-group\">\n                    <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                      <div *ngIf=\"groupHasEnabledContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border:none;\">\n                        <label>{{ cLayerGroup.displayLabel }}</label>\n                        <div class=\"list-group\">\n                          <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                            <div class=\"list-group-item\" style=\"border:none;\" *ngIf=\"cLayer.enabled\">\n                              <input type=\"checkbox\" [checked]=\"cLayer.active\" (click)=\"toggleContextLayer(cLayer.oid)\"> \n                         \n                              <!-- <boolean-field [(value)]=\"cLayer.active\" [label]=\"cLayer.displayLabel\" (change)=\"toggleContextLayer(cLayer.oid)\"></boolean-field> -->\n\n\n                              {{ cLayer.displayLabel }}\n                              <i class=\"fa fa-times delete-btn clickable\" aria-hidden=\"true\" (click)=\"removeContextLayer(cLayer)\"></i>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                  </div>\n                </div>\n\n                <button class=\"btn btn-primary\" (click)=\"addContextLayerModal()\" >+ Add Context Layer</button>\n              </div>\n\n            </div>\n          </article>\n\n          <div id=\"map\" class=\"map-view-port\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { MasterList, ContextLayer, ContextLayerGroup } from '@registry/model/registry';\n\n\n@Component( {\n    selector: 'context-layer-modal',\n    templateUrl: './context-layer-modal.component.html',\n    styleUrls: ['./location-manager.css']\n} )\nexport class ContextLayerModalComponent {\n\n    contextLayerGroups: ContextLayerGroup[];\n\n\n    /*\n     * Called on confirm\n     */\n    public onSubmit: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onSubmit = new Subject();\n    }\n\n    groupHasContextLayers(group:string): boolean {\n\t\tlet hasCLayers = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tif(cLayerGroup.oid === group && cLayerGroup.contextLayers.length > 0){\n\t\t\t\thasCLayers = true;\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn hasCLayers;\n\t}\n\n    confirm(): void {\n        this.onSubmit.next( this.contextLayerGroups );\n        this.bsModalRef.hide();\n    }\n\n}\n","<div class=\"modal-body\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"explorer.add.context.layers.modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"list-group\">\n                        <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                            <div *ngIf=\"groupHasContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n                                <h4>{{ cLayerGroup.displayLabel }}</h4>\n                                <div class=\"list-group\">\n                                    <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                                        <input type=\"checkbox\" [checked]=\"cLayer.enabled\" (change)=\"cLayer.enabled = !cLayer.enabled\" style=\"margin-left: 10px;\"> {{ cLayer.displayLabel }}\n                                        \n                                        <!-- <boolean-field [(value)]=\"cLayer.enabled\" [label]=\"cLayer.displayLabel\"></boolean-field> -->\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { GeoObjectOverTime, GeoObjectType } from '@registry/model/registry';\nimport { AbstractAction } from '@registry/model/crtable';\n\nimport { RegistryService, ChangeRequestService } from '@registry/service';\n\nimport { ComponentCanDeactivate } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-create-geo-object',\n    templateUrl: './detail.component.html',\n    styleUrls: ['./crtable-detail-create-geo-object.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    readOnly: boolean = true;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if ( this.isNew() ) {\n            this.preGeoObject = this.postGeoObject;\n        }\n\n        this.onSelect( this.action );\n    }\n\n    isNew(): boolean {\n        return ( this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\" );\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n        }\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSelect( action: AbstractAction ) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n            this.registryService.getGeoObjectOverTime( this.postGeoObject.attributes.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( \"Error\", err );\n                this.error( err );\n            } );\n        }\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( true );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( false );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading\">\n        <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <div>\n        <label class=\"detail-label\">GeoObjectType : </label>\n        <label class=\"detail-value\">{{action.geoObjectType.code}}</label>\n      </div>\n    \n      <div>\n        <localize key=\"changeOverTime.forDate\"></localize>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n        <!-- \n\t  <label class=\"detail-label\">Label : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.displayLabel\">\n\t  \n\t  <label class=\"detail-label\">Code : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.code\">\n\t  -->\n\n        <geoobject-shared-attribute-editor \n          #attributeEditor\n          *ngIf=\"preGeoObject\"\n          [readOnly]=\"readOnly\"\n          [geoObjectType]=\"geoObjectType\"\n          [postGeoObject]=\"postGeoObject\"\n          [preGeoObject]=\"preGeoObject\"\n          [forDate]=\"forDate\"\n          [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n<!-- \n\t      <geoobject-editor-map #geometryEditor *ngIf=\"this.preGeoObject != null && this.postGeoObject != null && this.geoObjectType.isGeometryEditable\" [readOnly]=\"readOnly || !geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [isNew]=\"isNew()\"></geoobject-editor-map>\n -->\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\n\nimport { AddChildAction } from '@registry/model/crtable';\nimport { ChangeRequestService } from '@registry/service';\nimport { ComponentCanDeactivate } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-add-remove-child',\n    templateUrl: './detail.component.html',\n    styleUrls: []\n} )\nexport class AddRemoveChildDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: AddChildAction;\n\n    original: AddChildAction;\n\n    readOnly: boolean = true;\n\n\n    private bsModalRef: BsModalRef;\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.original = Object.assign( {}, this.action );\n    }\n\n    applyAction() {\n        this.changeRequestService.applyAction( this.action ).then( response => {\n            this.original = Object.assign( {}, this.action );\n\n            this.unlockAction();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n\n            this.action = this.original;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n\n    onSelect( action: AddChildAction ) {\n        this.action = action;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    <div class=\"detail-content\">\n\n        <label class=\"detail-label\">Child UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childId\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Child TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childTypeCode\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentId\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Hierarchy Code : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.hierarchyTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">\n            <localize key=\"change.request.status\"></localize> :\n        </label>\n        <select style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=action.approvalStatus   [disabled]=\"readOnly\">\n            <option value=\"REJECTED\">\n                <localize key=\"change.request.status.rejected\"></localize>\n            </option>\n            <option value=\"ACCEPTED\">\n                <localize key=\"change.request.status.accepted\"></localize>\n            </option>\n            <option value=\"PENDING\">\n                <localize key=\"change.request.status.pending\"></localize>\n            </option>\n        </select>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n        \n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n        \n    </div>\n</div>","import { GeoObjectOverTime, HierarchyOverTime } from './registry';\n\nexport class ChangeRequest {\n  oid: string;\n  createdBy: string;\n  createDate: Date;\n  approvalStatus: string;\n  statusCode: string;\n  total: number;\n  pending: number;\n}\n\nexport class AbstractAction {\n  approvalStatus: string;\n  createActionDate: Date;\n  label: string;\n  oid: string;\n  actionType: string;\n  actionLabel: string;\n}\n\nexport class UpdateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class AddChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyTypeCode: string;\n  contributorNotes: string;\n  maintainerNotes: string;\n}\n\nexport class RemoveChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyCode: string;\n}\n\nexport class GovernanceStatus {\n  key: string;\n  label: string;\n}\n\nexport class PageEvent {\n  type:string;\n  data:any;\n}\n\nexport class SetParentAction extends AbstractAction {\n  childCode: string;\n  childTypeCode: string;\n  json: HierarchyOverTime[];\n}\n\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { HierarchyOverTime } from '@registry/model/registry';\nimport { AbstractAction } from '@registry/model/crtable';\n\nimport { RegistryService, ChangeRequestService } from '@registry/service';\n\nimport { ComponentCanDeactivate } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'set-parent-detail',\n    templateUrl: './set-parent-detail.component.html',\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class SetParentDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    hierarchies: HierarchyOverTime[] = [];\n    readOnly: boolean = true;\n\n    bsModalRef: BsModalRef;\n    \n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;    \n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.hierarchies = this.action.json;\n\n        this.onSelect( this.action );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }    \n\n    onSelect( action: AbstractAction ) {\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n        <div>\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n        </div>    \n    \n        <cascading-geo-selector #parentSelector \n          [hierarchies]=\"this.hierarchies\"\n          [forDate]=\"this.forDate\">\n        </cascading-geo-selector>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.status\"></localize> :\n            </label>\n            <select [disabled]=\"readOnly\" style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=\"action.approvalStatus\">\n                <option value=\"REJECTED\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </option>\n                <option value=\"ACCEPTED\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </option>\n                <option value=\"PENDING\">\n                    <localize key=\"change.request.status.pending\"></localize>\n                </option>\n            </select>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from '@shared/component';\n\nimport { IOService } from '@registry/service';\nimport { AuthService } from '@shared/service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-export',\n    templateUrl: './data-export.component.html',\n    styleUrls: []\n} )\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n\n    constructor( private service: IOService, private modalService: BsModalService, private authService: AuthService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( false ).then( types => {\n        \n            //this.types = types;\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isOrganizationRA(types[i].orgCode))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.types = myOrgTypes;\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onChange( code: string ): void {\n\n        if ( code != null && code.length > 0 ) {\n            this.service.getHierarchiesForType( code, false ).then( hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n\n    }\n\n    onExport(): void {\n\n        if ( this.format == 'SHAPEFILE' ) {\n            window.location.href = acp + '/shapefile/export-shapefile?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n        else if ( this.format == 'EXCEL' ) {\n            window.location.href = acp + '/excel/export-spreadsheet?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { HierarchyNode } from '@registry/model/hierarchy';\nimport { GeoObjectType } from '@registry/model/registry';\n\n@Pipe({\n  name: 'geoobjecttype',\n  pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n  transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n\t  if (!items || !filter) {\n          return items;\n      }\n\t  \n\t  let unassignedGeoObjTypes:string[] = [];\n      this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n      \n      // filter items array, items which match and return true will be\n      // kept, false will be filtered out\n      return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n  }\n  \n  buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void{\n\t  filter.forEach(f => {\n\t\t  this.processHierarchyNodes(f, unassignedGeoObjTypes);\n\t  })\n  }\n  \n  processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]){\n\t  unassignedGeoObjTypes.push(node.geoObjectType)\n\t  \n\t  node.children.forEach(child => {\n\t\t  this.processHierarchyNodes(child, unassignedGeoObjTypes);\n\t  })\n  }\n}","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\nimport { LocationManagerComponent } from './component/location-manager/location-manager.component';\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'hierarchies',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'data',\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'change-requests',\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-lists',\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'scheduled-jobs',\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'job/:oid',\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'master-list/:oid/:published',\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'master-list-view/:oid',\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'change-request',\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'tasks',\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'synchronization-configs',\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'synchronization-config/:oid',\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'location-manager',\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'sync/details/:oid',\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class RegistryRoutingModule { }"],"sourceRoot":""}