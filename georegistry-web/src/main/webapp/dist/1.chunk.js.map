{"version":3,"sources":["webpack:///./src/app/registry/service/geometry.service.ts","webpack:///./src/app/registry/registry.module.ts","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/location-manager/layer-panel.component.ts","webpack:///./src/app/registry/component/location-manager/layer-panel.component.html","webpack:///./src/app/registry/component/location-manager/feature-panel.component.ts","webpack:///./src/app/registry/component/location-manager/feature-panel.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/HierarchyEditPropagator.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/ValueOverTimeEditPropagator.ts","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.ts","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.html","webpack:///./src/app/registry/component/location-manager/dataset-location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/dataset-location-manager.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-model.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.ts","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.ts","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["layers","editingControl","simpleEditControl","geometryChange","EventEmitter","ngOnInit","window","onbeforeunload","destroy","initialize","map","geometryType","readOnly","this","addLayers","on","saveEdits","destroyMap","removeControl","remove","removeLayers","editingLayer","startEditing","layer","isEditing","stopEditing","enableEditing","addEditingLayers","rerender","deleteAll","setPointCoordinates","lat","long","set","type","features","id","oid","properties","geometry","coordinates","changeMode","featureIds","isValid","getAll","length","geoJson","getDrawGeometry","editPropagator","value","reload","setEditing","setRendering","isRendering","addLayer","newLayer","existingIndex","findIndex","findLayer","splice","push","sort","a","b","zindex","getLayers","getRenderedLayers","filter","setLayers","controls","point","line_string","polygon","trash","combine_features","uncombine_features","userProperties","styles","paint","getSource","addControl","add","removeSource","prefix","sourceName","getLayer","removeLayer","len","i","renderGeometryAsLayer","geojson","color","finalSourceName","addSource","data","source","layout","setData","featureCollection","polygons","feature","j","points","lines","createEmptyGeometryValue","zoomToLayersExtent","forEach","coords","LngLatBounds","coord","extend","center","getCenter","pt","LngLat","lng","flyTo","zoom","essential","polys","subpoly","fitBounds","padding","subline","GeometryService","Injectable","Output","RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","AccordionModule","forRoot","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","ManageVersionsComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","TreeGeoSelector","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","LocationManagerComponent","DatasetLocationManagerComponent","ContextLayerModalComponent","LayerPanelComponent","FeaturePanelComponent","GeometryPanelComponent","NgModule","imports","declarations","providers","entryComponents","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","services","ImportSheet","Location","Term","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","key","disabled","inlinelayout","valueChange","Component","selector","templateUrl","styleUrls","Input","http","eventService","implementDecisions","request","headers","HttpHeaders","start","post","acp","JSON","stringify","pipe","finalize","complete","toPromise","update","setActionStatus","actionOid","status","getAllRequests","pageSize","pageNumber","params","HttpParams","toString","get","rejectChangeRequest","delete","requestId","deleteFile","crOid","fileId","vfOid","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","message","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","attribute","unique","animate","onAnimationDone","event","indexOf","label","localeValues","precision","scale","trigger","style","opacity","transition","animations","geoObjectType","service","iService","lService","bsModalRef","authService","dateService","currentDate","Date","readonly","edit","isNew","onMasterListChange","master","listGeoObjectTypes","then","types","myOrgTypes","orgCode","typeCode","superTypeCode","isGeoObjectTypeRM","catch","err","error","displayLabel","create","representativityDate","publishingStartDate","publishDate","listAbstract","process","progress","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","hierarchies","subtypeHierarchies","leaf","frequency","isMaster","visibility","ngAfterContentInit","init","org","getIsDisabled","elClasses","target","classList","onChange","getHierarchiesForType","getHierarchiesForSubtypes","onSubmit","createMasterList","response","hide","onCancel","unsubscribe","formatDate","date","formatDateForDisplay","ErrorHandler","getMessageFromError","geomService","postGeoObject","actions","calculatedGeoObject","showAllInstances","tabIndex","isContributorOnly","attributeExcludes","forDate","isEditingGeometries","isGeometryInlined","valid","onManageVersion","customEvent","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","isContributerOnly","apply","geomAttr","attributes","geometryAttributeType","AttributeType","LocalizedValue","parentAttributeType","onCodeChange","attributeForm","statusChanges","subscribe","result","emit","changePage","nextPage","setBoolean","hasChanges","action","actionType","ActionTypes","CREATEGEOOBJECTACTION","UPDATEATTRIBUTETACTION","updateAttrAction","attributeName","newVal","att","onIsValidChange","allValid","isNullValue","vot","onSelectPropertyOption","option","parse","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attr","attrOpts","rootTerm","children","removeStatuses","isStatusChanged","pre","preCompare","Array","isArray","postCompare","getTypeDefinition","getActions","getIsValid","getGeoObject","left","changeRequest","geometryEditor","ViewChild","TREE_SCALE_FACTOR_X","TREE_SCALE_FACTOR_Y","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","modalService","contextMenuService","localizeService","registryService","userOrganization","currentHierarchy","instance","geoObjectTypes","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","isSRA","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","nativeElement","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","localize","decode","renderTree","rootGeoObjectTypes","d3","select","isOrganizationRA","organizationCode","got","canDrag","overflowDiv","scrollLeft","scrollRight","svg","append","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","calculateCanDrag","getBBox","x","y","width","height","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","calculateRelatedHierarchies","relatedHiers","hierarchyType","hierarchy","descendants","find","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","addChild","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","isPointWithin","dropZoneBbox","activeDropZones","parent","gotRectW","gotRectH","clearGhostNodes","isDragGroup","classed","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","parseInt","dropElY","childW","childH","dzg","dropTargetHasChildren","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","text","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","insertBetweenTypes","ghostNode","drag","rect","getBoundingClientRect","top","selThis","document","elementFromPoint","selectAll","each","sidebarDragHandler","registerSvgHandlers","startPoint","svgGot","getPos","setPos","svgDragHandler","findHierarchyByCode","ht","findOrganizationByCode","organizations","hierarchyCode","parentGeoObjectTypeCode","childGeoObjectTypeCode","addChildToHierarchy","index","relatedHierarchies","refreshPrimaryHierarchy","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","isRA","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","setLocales","locales","setGeoObjectTypes","pos","getGeoObjectTypePosition","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","localizedValue","toLowerCase","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","h","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","geoObjectTypeCode","gOT","show","childType","nodeMenuComponent","leafMenuComponent","item","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","animated","backdrop","ignoreBackdropClick","content","onHierarchytTypeCreate","nameA","toUpperCase","nameB","deleteHierarchyType","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","class","getHierarchyTypePosition","description","acknowledgement","contact","phoneNumber","isPrimaryHierarchy","createGeoObjectType","groupSuperType","onGeoObjTypeCreate","deleteGeoObjectType","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","onGeoObjectTypeSubmitted","position","removeFromHierarchy","parentGotCode","gotCode","isActive","filtered","setTimeout","handleInheritHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","setInheritedHierarchy","handleUninheritHierarchy","removeInheritedHierarchy","showErrorAsDialog","static","getHierarchyTypes","getHierarchyGroupedTypes","createHierarchyType","htJSON","updateHierarchyType","importSpreadsheet","configuration","json","cancelImport","importShapefile","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","includeTypes","getGeoObjectSuggestions","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","parentTermCode","termJSON","removeTerm","termCode","getNewLocaleInfo","installLocale","language","country","variant","mapboxgl","accessToken","roots","search","getGeoObjectTypes","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","gtJSON","updateGeoObjectType","addAttributeType","geoObjTypeId","attributeType","updateAttributeType","deleteAttributeType","addAttributeTermTypeOption","term","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","getExportDetails","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","versionType","getAllMasterListVersions","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","newGeoObjectOverTime","setAttributeVersions","collection","list","createMasterListVersion","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","masterListId","notes","applyGeoObjectCreate","parentTreeNode","geoObject","prop","values","val","getTime","valueAttribute","publishShapefile","getMasterListsByOrg","getPublishMasterListJobs","getDatasetBounds","getOrganizations","getPage","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","unlock","run","getJobs","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","bbox","fontSize","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","configurationChange","stateChange","onNext","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","name","exclusion","termProblems","attributeCode","changeRequestService","geoObjectId","reason","dateStr","loading","dataSource","Observable","observer","results","isGeoObjectTypeRC","handleDateChange","onValidChange","newValid","attributeEditor","changeTypeaheadLoading","typeaheadOnSelect","cancel","isNewGeoObject","submitFunction","arePropertiesValid","areParentsValid","isAdmin","isMaintainer","isContributor","isContributer","day","getUTCDate","getUTCFullYear","getUTCMonth","findVotWithStartDate","votArray","startDate","setMasterListId","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","GeoObjectOverTime","goPropertiesPost","configureFromImportError","importError","object","parents","importErrorId","resolution","goSubmit","configureAsExisting","fetchGeoObject","fetchHierarchies","console","log","typeTypeCode","getTypeAheadObservable","ptn","parentSelector","force","persistModelChanges","getHierarchies","submit","_stepConfig","steps","layerChange","baseLayerChange","baselayerIconHover","lists","baseLayers","sprite","url","selected","contextLayerGroups","updateContextGroups","changes","currentValue","previousValue","contextGroup","contextLayers","versions","version","thisContextLayer","active","enabled","groupHasEnabledContextLayers","group","hasEnabled","cLayerGroup","cLayer","hasEnabledContextLayers","toggleContextLayer","removeContextLayer","addContextLayerModal","toggleBaseLayer","bl","geometryService","MODE","VERSIONS","ATTRIBUTES","HIERARCHY","GEOMETRY","_code","featureChange","modeChange","panelCancel","panelSubmit","mode","isEdit","updateCode","isGeoObjectTypeOrSuperRM","setValid","preGeoObject","setEditMode","onCancelInternal","datasetId","applyInfo","isChangeRequest","onManageAttributeVersion","onManageHiearchyVersion","onAttributeChange","onHierarchyChange","onEditAttributes","auth","orgs","organizationLabel","getOrganizationLabelFromCode","isLeaf","isPrivate","toggleIsLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","geoObjectTypeManagementService","GeoObjectTypeModalStates","termOption","modalStateSubscription","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","localizationService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","fetchOrganizationLabel","defineAttributeModal","defineAttribute","manageAttributes","editAttribute","removeAttributeType","in","newAttribute","setAttribute","attributeInputComponent","AttributeTermType","AttributeDecimalType","isFormValid","isAttrValid","validator","c","geoObjectAttributeCode","validate","provide","NG_VALIDATORS","useExisting","multi","Directive","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","replace","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","t","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","getCode","treeNode","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","hierarchyLabelW","hierarchyLabelH","headerFontSize","hierarchyLabelY","lineWidth","textWidth","html","d","headerGBbox","getRelatedHierarchies","nodeMouseover","element","nodeMousemove","nodeTooltipBbox","documentElement","scrollHeight","scrollWidth","nodeMouseleave","descends","insert","gtree","links","join","gHeader","gotHeaderW","MOUSE_HOVER_EVENT_ENTER","MOUSE_HOVER_EVENT_MOVE","MOUSE_HOVER_EVENT_EXIT","gotHeaderFontSize","substring","arrowRectD","gArrow","gotBodyFontSize","gotOptionsButtonFontSize","renderRelatedHierarchiesMenu","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","sysService","changeDetectorRef","showImportConfig","importStrategies","strategy","ImportStrategy","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","endDate","isExternal","isLoading","copyBlank","getExternalSystems","paginatedSystems","externalSystems","resultSet","views","allHierarchyViews","allTypeViews","len0","view","len2","len9","view2","findType","findHier","filteredHierarchyViews","filteredTypeViews","getUrl","format","queueLimit","removeAfterUpload","uploader","FileUploader","onBuildItemForm","fileItem","form","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","externalSystem","sys","onErrorItem","onSelectHierarchy","onSelectType","checkDates","onClick","queue","uploadAll","setImportSource","checkDateFieldValidity","startDateField","dateFields","dateFieldComponentsArray","toArray","field","inputName","setInvalid","ViewChildren","onCreate","createDate","lastUpdateDate","write","read","onView","onEdit","pair","ret","onDelete","arr","onFormat","confirm","route","today","todayString","getDateString","objectKeys","page","count","requests","columns","filterCriteria","hasBaseDropZoneOver","waitingOnScroll","sortable","snapshot","paramMap","toggleId","uploadRequest","doc","documents","onSelect","refresh","getGOTLabel","geoObjectJson","onUpload","onDownloadFile","fileOid","location","href","onDeleteFile","fileOverBase","current","onExecute","getFirstGeoObjectInActions","uid","onReject","cr","hasOwnProperty","deletedRequestId","onUpdate","applyActionStatusProperties","approvalStatus","decisionMaker","getUsername","requestTrackBy","toggle","parentElement","className","includes","criteria","getActiveDetailComponent","endsWith","isRequestTooOld","UPDATEGEOOBJECTACTION","canEdit","permissions","encapsulation","ViewEncapsulation","None","requestService","elementRef","isValidChange","selectedTab","hasDuplicateDate","hasConflict","hasGap","viewModels","isRootOfHierarchy","originalGeoObjectOverTime","calculateViewModels","vAttribute","hasLocalizationChanged","viewModel","locale","oldValue","getValueAtLocale","onDateChange","checkRanges","summaryKey","SummaryKey","NEW","v","onAddNewVersion","VersionDiffView","editAction","generateUUID","getVersionData","lv","getValue","getDefaultLocaleVal","defVal","locVal","isChangeOverTime","votArr","oldStartDate","onActionChange","UpdateAttributeAction","attributeDiff","valuesOverTime","findViewByOid","findPostGeoObjectVOT","parentJson","createAction","CreateGeoObjectAction","entries","entry","UNMODIFIED","HierarchyEditPropagator","prototype","call","valueOverTime","votDiff","conflictMessage","severity","ConflictType","MISSING_REFERENCE","populateViewFromDiff","oldEndDate","DELETE","diff","calculateSummaryKey","createEmptyHierarchyEntry","newStartDate","newEndDate","oldGoCode","split","lowestLevel","newValue","hasAttributeChanges","onApprove","GovernanceStatus","ACCEPTED","REJECTED","onPending","PENDING","toggleGeometryEditing","coordinate","toggleGeometryView","mapRowHeight","getElementsByClassName","offsetHeight","getOrCreateLayer","toggleOldGeometryView","context","Layer","LayerColor","oldLayer","OLD","manualCoordinateChange","newCoordinateX","newCoordinateY","newX","newY","num","latValid","isFinite","Math","abs","longValid","isLongitude","ControlContainer","NgForm","host","viewProviders","attributeData","component","hierarchyEntry","ValueOverTimeDiff","immediateParent","convertDateForDisplay","removeEmptyDiff","setParentValue","directParent","currentDirectParent","getLowestLevelFromHierarchyEntry","oldParents","newValueStrConcat","removeType","pType","loopI","goCode","ancestors","p","ancestor","HierarchyOverTimeEntry","recalculateView","updateAction","currentImmediateParent","ValueOverTimeEditPropagator","areValuesEqual","convertValueForDisplay","setLocalizedValue","localeValue","undefined","diffs","val1","val2","lv2","lv1","votc","ValueOverTime","terms","transform","items","Pipe","pure","urlSubscriber","highlightOid","cHierarchies","parentMap","calculate","time","pot","onManageVersions","mainForm","pService","order","isPublished","isRefreshing","isWritable","searchPlaceholder","isCollapsed","onPageChange","refreshProgress","handleProgressChange","baseUrl","hostname","port","notifier","webSocket","onSort","clearFilters","toggleFilter","getValues","base","unshift","total","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","editModal","onPublish","historyOid","onNewGeoObject","onExport","encodeURIComponent","onWheel","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onDownloadShapefile","isForDateValid","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","interval","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","onResolveScheduledJob","allSelected","timeCounter","isPolling","hasRowValidationProblem","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onProblemResolvedListener","onEditGeoObject","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onViewAllCompletedTasks","onSuccess","onRemove","DEFAULT_MAPPING_STRATEGY","system","cOrg","cSystem","levelRows","orgUnitGroups","oIndex","sIndex","systems","esConfig","levels","levelRow","level","levelNum","isAttributeEditor","buildDefaultMappings","attributeMappingStrategy","isOrgUnitGroup","cgrAttrName","dhis2Id","dhis2AttrName","clearMappingData","lvl","mappings","orgUnitGroupId","onSelectLevelType","attrCfg","editorIndex","getEditorIndex","mapping","attrConfigInfos","info","cgrAttr","onOrganizationSelected","deleteMapping","addNewMapping","onChangeExternalSystem","onChangeHierarchy","addLevel","removeLevel","levelRowIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Attrs","dhis2Attr","onChangeDHIS2Attr","isDifferentGot","infos","mapCgrAttr","attributeMappingStrategies","onChangeTargetType","onRun","exportErrors","mapService","longitude","latitude","SEARCH","VIEW","editSessionEnabled","displayDateRequiredError","vectorLayers","preventSingleClick","hideSearchOptions","geoObjectUid","backReference","geoObj","Map","container","metadata","sources","mapbox","tileSize","glyphs","protocol","attributionControl","initMap","onModeChange","NavigationControl","visualizePitch","AttributionControl","compact","handleMapClickEvent","fc","zoomToFeature","showOriginalGeometry","addVectorLayer","hideOriginalGeometry","removeVectorLayer","onPanelCancel","onPanelSubmit","SuccessModalComponent","changeRequestId","handleBasemapStyle","baseLayer","setStyle","timer","bounds","maxZoom","onContextLayerChange","tiles","navigator","groupHasContextLayers","hasCLayers","toolsIconHover","editOnly","getDateFromDateString","published","GenericModalComponent","buttons","shouldClose","llb","vLayer","prevLayer","onFeatureChange","setFilter","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","hideRelatedHierarchy","existingSecondary","existingMenu","contextMenuGroup","hasActionsPermissions","titleLabel","actionsTitle","removeFromHierarchyLabel","noRelatedHierLabel","hideRelatedHierarchyLabel","uninheritLabel","inheritLabel","isSecondaryHierarchyRendered","numActions","removeWidth","hideRelatedWidth","uninheritWidth","existingSecondaryCode","secondaryHierarchy","relatedGotHasParents","inheritWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","onClickUninheritHierarchy","onClickInheritHierarchy","myBbox","primaryHierBbox","gSecondary","paddingLeft","secondaryGot","secondaryGotBbox","gConnector","toRoot","onNodeChange","allGeoObjectTypes","gObj","selectedGeoObjectType","onDeleteAttribute","hasTime","hasValue","UPDATE","TIME_CHANGE","VALUE_CHANGE","summaryKeyData","newKey","localizeSummaryKey","summaryKeyLocalized","applyAction","saveDraw","startEdit","endEdit","_mapHeight","mapDiv","floor","random","zoomToBbox","mapHeight","bboxCode","bboxType","bboxDate","elRef","editEmitter","visible","save","onAdd","nodes","isExpandedField","idField","expanded","curAction","cuDetail","arDetail","spDetail","onCloneGeometry","geoObjectOverTime","vAttributes","isVersionForHighlight","setDateAttribute","moment","localeData","longDateFormat","setInfinity","PRESENT","onCloneGeometryToNewVersion","geoObjectOverTimeInput","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","routes","path","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"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,aAA8B,CAC1E,IAAIgG,EAEJ,GAFIA,EAASpF,EAAMmE,QAAQlD,YAEf,CACR,IAAI,EAAS,IAAI,EAAAoE,aACjBD,EAAOD,SAAQ,SAAAH,GACXA,EAAMG,SAAQ,SAAAiB,GACVA,EAAQjB,SAAQ,SAAAG,GACZ,EAAOC,OAAOD,YAK1B,EAAKnG,IAAI+G,UAAU,EAAQ,CACvBC,QAAS,W,iCA/jBxBE,I,oCAAAA,EAAe,QAAfA,EAAe,O,EAD5B,GACa,EAAAA,mB,+DAAAA,EAAe,E,KAD3B,EAAAC,c,uBAmBa1H,eAAc,E,KAAvB,EAAA2H,Y,0GChCL,WACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QACA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UAEA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,UAEA,O,uFAEA,4B,wCA4IaC,I,iCAAAA,I,sCA5CE,CACP,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,8BACH,SA5GQ,CACL,EAAAC,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,sBACA,GAAAC,gBAAgBC,c,EAlBxB,GA4Ia,EAAA9B,mB,iEAAAA,GAAc,eAvHnB,EAAA+B,mBACA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BACA,GAAAC,kBACA,GAAAC,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,EAAAC,uBACA,EAAAC,wCACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,yBACA,GAAAC,+BACA,GAAApD,oBACA,EAAAqD,4BACA,EAAAC,kBACA,EAAAC,kBACA,EAAAC,2BACA,EAAAC,qBACA,GAAAC,gBACA,GAAAC,2BACA,EAAAtC,mBACA,GAAAuC,sBACA,GAAAC,oBAEA,EAAAC,2BACA,GAAAC,oBACA,GAAAC,2BACA,GAAAC,oCACA,EAAAC,sBACA,GAAAC,wBAEA,EAAAC,2BACA,GAAAC,uBACA,GAAAC,aACA,GAAAC,0BACA,GAAAC,uBACA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAA1E,uBACA,GAAA2E,6BACA,GAAAC,oBAEA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,+BACA,GAAAC,qBAEA,GAAAC,yBACA,GAAAC,gCACA,GAAAC,2BACA,GAAAC,oBACA,GAAAC,sBACA,GAAAC,wBAAsB,SA5FtB,EAAApF,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,sBAAqB,uB,gEA2HhB5B,GAAc,E,KA5I1B,EAAAkG,S,MAAS,CACNC,QAAS,CACL,EAAAtF,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,sBACA,GAAAC,gBAAgBC,WAEpBsE,aAAc,CACV,EAAArE,mBACA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BACA,GAAAC,kBACA,GAAAC,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,EAAAC,uBACA,EAAAC,wCACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,yBACA,GAAAC,+BACA,GAAApD,oBACA,EAAAqD,4BACA,EAAAC,kBACA,EAAAC,kBACA,EAAAC,2BACA,EAAAC,qBACA,GAAAC,gBACA,GAAAC,2BACA,EAAAtC,mBACA,GAAAuC,sBACA,GAAAC,oBAEA,EAAAC,2BACA,GAAAC,oBACA,GAAAC,2BACA,GAAAC,oCACA,EAAAC,sBACA,GAAAC,wBAEA,EAAAC,2BACA,GAAAC,uBACA,GAAAC,aACA,GAAAC,0BACA,GAAAC,uBACA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAA1E,uBACA,GAAA2E,6BACA,GAAAC,oBAEA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,+BACA,GAAAC,qBAEA,GAAAC,yBACA,GAAAC,gCACA,GAAAC,2BACA,GAAAC,oBACA,GAAAC,sBACA,GAAAC,wBAEJI,UAAW,CACP,GAAApG,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,8BAEJ0F,gBAAiB,CACb,EAAAnE,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAW,mCACA,EAAAf,kCACA,EAAAK,wBACA,EAAAO,0BACA,EAAAI,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAG,wCACA,EAAAE,6BACA,EAAAC,yBACA,EAAAe,sBACA,EAAAE,2BACA,EAAAb,kBACA,EAAAC,2BACA,GAAAG,2BACA,GAAAY,0BACA,GAAAC,uBACA,GAAAvE,uBACA,GAAA8E,oCACA,GAAAK,gC,kCAxFA,EAAAnC,wBAAuB,sZAKvB,EAAAI,6BAA2B,mB,uBAM3B,GAAAM,2BAA0B,SArC1B,EAAApC,qCAAoC,2B,oBChI5C,IAAItJ,EAAM,CACT,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,QAAS,IACT,WAAY,IACZ,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,WAAY,IACZ,cAAe,IACf,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,YAAa,IACb,eAAgB,IAChB,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,QAAS,IACT,WAAY,IACZ,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,QAAS,IACT,WAAY,IACZ,OAAQ,IACR,UAAW,IACX,QAAS,IACT,WAAY,IACZ,QAAS,IACT,aAAc,IACd,gBAAiB,IACjB,WAAY,IACZ,UAAW,IACX,aAAc,IACd,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,YAAa,IACb,eAAgB,IAChB,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,gBAAiB,IACjB,OAAQ,IACR,UAAW,IACX,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,KAIf,SAAS4N,EAAeC,GACvB,IAAInM,EAAKoM,EAAsBD,GAC/B,OAAOE,EAAoBrM,GAE5B,SAASoM,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAEhO,EAAK6N,GAAM,CACpC,IAAII,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,EAEP,OAAOjO,EAAI6N,GAEZD,EAAeQ,KAAO,WACrB,OAAOC,OAAOD,KAAKpO,IAEpB4N,EAAeU,QAAUR,EACzBS,EAAOC,QAAUZ,EACjBA,EAAelM,GAAK,K,6aCnSpB,aACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEa,EAAA+M,SAAkB,CAC9B,EAAAhH,qBACA,EAAAE,+BACA,EAAAJ,iBACA,EAAAG,UACA,EAAAF,2BACA,EAAAF,WACA,EAAAM,gBACA,EAAAK,6BACA,EAAAJ,YACA,EAAAX,iBAGD,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,a,qMC9BA,mBAAa,EAAAwH,cAUb,mBAAa,EAAAC,WAOb,mBAAa,EAAAC,OAKb,mBAAa,EAAAC,cAUb,mBAAa,EAAAC,kBAUb,mBAAa,EAAAC,YAKb,mBAAa,EAAAC,UAMb,mBAAa,EAAAC,uB,kHCxDb,W,GACA,O,0NCAA,0BACE,4BACE,4BACE,4BACE,4BACE,4BACE,4BACA,6BAA6B,iBAAO,qCAAkE,iBAAC,iBACzG,iBACF,iBACA,6BACE,8BACE,kCAAU,wEAAmG,iBAC/G,iBACF,iBACF,iBACF,iBACF,iBACF,kB,2CAjBO,6FACE,8EAEI,+EAES,yCAC6C,4CAGtD,+EAES,+CAA+B,sBAA/B,CAA+B,iCDVrD,iBAcI,aAPgB,KAAAC,IAAc,GAEd,KAAAC,UAAoB,EACpB,KAAAC,cAAwB,EACvB,KAAAC,YAAc,IAAI,EAAA3P,a,wCAN1BoL,I,iCAAAA,EAAsB,wVCPnC,gC,KAA6B,8C,0ODE7B,GAKa,EAAAA,0B,+DAAAA,EAAsB,E,KALlC,EAAAwE,U,MAAU,CACPC,SAAU,iBACVC,YAAa,kCACbC,UAAW,CAAC,6B,uBAIIP,IAAK,CAAF,C,KAAlB,EAAAQ,QACenN,MAAO,CAAF,C,KAApB,EAAAmN,QACeP,SAAU,CAAF,C,KAAvB,EAAAO,QACeN,aAAc,CAAF,C,KAA3B,EAAAM,QACgBL,YAAW,E,KAA3B,EAAAjI,Y,gHEdL,WACA,QACA,Q,GAGA,M,sBAOA,aAII,WAAoBuI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAC,mBAAA,SAAmBC,GAAnB,WACQC,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,qCAAsCC,KAAKC,UAAU,CAAEP,QAASA,IAAY,CAAEC,QAASA,IACjHO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAC,OAAA,SAAOZ,GAAP,WACQC,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,wBAAyBC,KAAKC,UAAU,CAAEP,QAASA,IAAY,CAAEC,QAASA,IACpGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAE,gBAAA,SAAgBC,EAAmBC,GAAnC,WACQd,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,mCAAoCC,KAAKC,UAAU,CAAEO,UAAWA,EAAWC,OAAQA,IAAW,CAAEd,QAASA,IAC1HO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAK,eAAA,SAAeC,EAAkBC,EAAoBvN,EAAgB9B,GAArE,WACQsP,EAAqB,IAAI,EAAAC,WAW7B,OARAD,GADAA,GADAA,EAASA,EAAO1P,IAAI,WAAYwP,EAASI,aACzB5P,IAAI,aAAcyP,EAAWG,aAC7B5P,IAAI,SAAUkC,GAEnB,MAAP9B,IACAsP,EAASA,EAAO1P,IAAI,MAAOI,IAG/BxB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KAAKyB,IAA+BjB,IAAM,kCAAmC,CAAEc,OAAQA,IAC9FX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAY,oBAAA,SAAoBvB,GAApB,WACQC,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KAAKO,KAAWC,IAAM,wBAAyBC,KAAKC,UAAU,CAAEP,QAASA,IAAY,CAAEC,QAASA,IACvGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAa,OAAA,SAAOC,GAAP,WACQxB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KAAKO,KAAaC,IAAM,wBAAyBC,KAAKC,UAAU,CAAEkB,UAAWA,IAAc,CAAExB,QAASA,IAC7GO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAe,WAAA,SAAWC,EAAeC,GAA1B,WACQ3B,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAA0BC,IAAM,gCAAiCC,KAAKC,UAAU,CAAEoB,MAAOA,EAAOE,MAAOD,IAAW,CAAE3B,QAASA,IAC7HO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,a,iCA7GAhJ,GAAoB,sD,oCAApBA,EAAoB,QAApBA,EAAoB,O,EADjC,GACa,EAAAA,wB,+DAAAA,EAAoB,E,KADhC,EAAAN,c,gMCZD,WACA,Q,OAIA,aAQI,aAJQ,KAAAyK,wBAA0B,IAAI,EAAAC,QACtC,KAAAC,gBAAkB3R,KAAKyR,wBAAwBG,e,OAKxC,YAAAC,cAAP,WACI,OAAO7R,KAAK8R,YAGT,YAAAC,cAAP,SAAqBC,GACjBhS,KAAK8R,WAAaE,EAElBhS,KAAKyR,wBAAwBQ,KAAKjS,KAAK8R,a,iCAhBlCtK,I,oCAAAA,EAA8B,QAA9BA,EAA8B,O,EAD3C,GACa,EAAAA,kC,+DAAAA,EAA8B,E,KAD1C,EAAAR,c,gJCLD,WACA,O,GAQA,OACA,O,6HCKE,uCAA4C,+GAAwE,iB,gCAAxE,+C,mDAG5C,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,6BACE,+BAAmB,+GAAnB,iBACF,iBACF,iBACF,iB,gCAHyB,8D,mDAKzB,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,6BACE,+BAAmB,2GAAnB,iBACF,iBACF,iBACF,iB,gCAHyB,0DD1B3B,iBA8BI,WAAoBkL,EAA4CC,GAA5C,KAAAD,mBAA4C,KAAAC,MAXvD,KAAAC,kBAA4B,EAC5B,KAAAC,oBAA8B,EAC9B,KAAAC,WAAqB,EAGpB,KAAAC,gBAAkB,IAAI,EAAAhT,aAChC,KAAAiT,QAAkB,KAElB,KAAAR,MAAgB,O,OAKhB,YAAAxS,SAAA,aAIA,YAAAiT,gBAAA,WACIzS,KAAKgS,MAAQ,OACbhS,KAAKmS,IAAIO,iBAGb,YAAAC,YAAA,aAIA,YAAAC,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAC,eAAA,WACI9S,KAAK+S,UAAUC,QAAUhT,KAAK+S,UAAUC,QAG5C,YAAAC,QAAA,WACIjT,KAAKgS,MAAQ,QAGjB,YAAAkB,gBAAA,SAAgBC,GACZnT,KAAKgS,MAAQ,QAGjB,YAAAlQ,QAAA,WACI,QAAI9B,KAAK+S,UAAU/E,QAE2B,IAAtChO,KAAK+S,UAAU/E,KAAKoF,QAAQ,OAI0B,IAAtDpT,KAAK+S,UAAUM,MAAMC,aAAa,GAAGlR,MAAMJ,WAI3ChC,KAAKsS,WAA0C,MAA5BtS,KAAK+S,UAAUQ,WAA4D,IAAvCvT,KAAK+S,UAAUQ,UAAUvC,eAIhFhR,KAAKsS,WAAsC,MAAxBtS,KAAK+S,UAAUS,OAAoD,IAAnCxT,KAAK+S,UAAUS,MAAMxC,gB,iCA/D3E3G,GAAuB,mF,iCAAvBA,EAAuB,khCC9BpC,0BACE,4BACE,4BACE,4BACE,4BACF,iBACF,iBACA,4BACE,6BACE,8BAA2D,uEAA3D,iBACF,iBACF,iBACF,iBAEA,wCAAiB,sEAA4D,iBAC7E,yCAGA,+BAaA,+BAYF,kB,MAlCqC,2DAA6B,4BAK/C,uDACA,0DAGQ,gDAaA,kD,+eDdX,CACR,EAAAoJ,QAAQ,eAAgB,CACpB,EAAAzB,MAAM,aACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAA3B,MAAM,OACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,gB,EAZ/C,GAiBa,EAAA5I,2B,+DAAAA,EAAuB,E,KAjBnC,EAAA8E,U,MAAU,CACPC,SAAU,kBACVC,YAAa,mCACbC,UAAW,CAAC,yBACZuE,WAAY,CACR,EAAAJ,QAAQ,eAAgB,CACpB,EAAAzB,MAAM,aACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAA3B,MAAM,OACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,kB,2EAOlCb,iBAAkB,CAAF,C,KAAxB,EAAA7C,QACQ8C,mBAAoB,CAAF,C,KAA1B,EAAA9C,QACQ+C,UAAW,CAAF,C,KAAjB,EAAA/C,QACQuE,cAAe,CAAF,C,KAArB,EAAAvE,QACQwD,UAAW,CAAF,C,KAAjB,EAAAxD,QACSgD,gBAAe,E,KAAxB,EAAAtL,Y,iHErCL,WAEA,GADA,MACA,OAOA,GAHA,OACA,OAEA,Q,GACA,M,0GCTI,6BAAqE,YAAW,kB,6BAAX,+C,sBAGjE,yBACI,6BACJ,kB,yBACA,yBACI,YACA,6BACJ,kB,6BAFI,mF,yBAQA,4BACI,4BACI,4BAAQ,6BACR,8BAA6B,iBAAO,sCAAkE,gBAAC,iBACvG,iBACJ,iBACA,6BACI,+BAAO,wEAAP,iBACJ,iBACJ,kB,2CAN+D,4CAIhD,+CAA+B,yBAA/B,CAA+B,sBAA/B,CAA+B,wC,yBAWlC,gCAAuD,YAAc,kB,uBAAlC,6BAAoB,6C,mDARnE,4BACI,4BACI,+BAAuB,6BACvB,iBACJ,iBACA,6BACI,gCAA0D,2GAA6B,+EACnF,wBACA,kCACJ,iBACJ,iBACJ,iB,gCALkE,yDAE7B,gD,mDAIrC,4BACI,4BACI,+BAAuB,6BACvB,iBACJ,iBACA,6BACE,+BAAO,2HAAP,iBACF,iBACJ,iB,gCAFa,0E,sBAwBL,+BAAuE,6BAAuD,kB,yBAS9H,8BACU,YACV,kB,6BADU,yF,4FAEV,oCAA8B,oHACyC,iB,gCADzC,mDAAsC,oCAAtC,CAAsC,kCAAtC,CAAsC,sBAAtC,CAAsC,cAAtC,CAAsC,uB,sBA2J5E,4BACI,uBACA,6BACI,6BACJ,iBACJ,kB,2GAQY,6BAGI,6BAGI,6BAAK,kHAAiC,KAAO,EAAH,wBACtC,sBACJ,iBAEA,+BAAiC,YAAgB,iBAGrD,iBAGJ,iB,+CAVyF,4FAIhD,6C,yBAhBrD,0BACI,4BACI,4BACI,4BAAQ,YAAoB,iBAChC,iBACA,6BACI,+BAiBJ,iBACJ,iBACJ,kB,uBAtBoB,qDAG4B,kD,mDA2BpC,6BAGI,6BAGI,6BAAK,kHAAiC,KAAO,EAAH,wBACtC,sBACJ,iBAEA,+BAAiC,YAAmB,iBACxD,iBACJ,iB,+CAN+F,4FAItD,6C,yBAhBrD,0BACI,4BACI,4BACI,4BAAQ,6BAA0D,iBACtE,iBACA,6BACI,+BAaJ,iBACJ,iBACJ,kB,6BAfmD,oE,mDAwBvC,gCAAwC,2FACpC,6BACJ,iB,iDAFmG,oCD/R3H,iBAmCI,WAAoB8M,EAAkCC,EAA6BC,EAAsCC,EAAgCC,EAC7IC,GADQ,KAAAL,UAAkC,KAAAC,WAA6B,KAAAC,WAAsC,KAAAC,aAAgC,KAAAC,cAC7I,KAAAC,cA7BZ,KAAAC,YAAoB,IAAIC,KACxB,KAAA9B,QAAkB,KAiBlB,KAAA+B,UAAoB,EAKpB,KAAAC,MAAgB,EAEhB,KAAAC,OAAiB,E,OAMjB,YAAAjV,SAAA,sBACIQ,KAAK0U,mBAAqB,IAAI,EAAAhD,QAEzB1R,KAAK2U,QAAW3U,KAAKuU,WACtBvU,KAAKgU,SAASY,oBAAmB,GAAMC,MAAK,SAAAC,GAExC,IADA,IAAIC,EAAa,GACRpQ,EAAI,EAAGA,EAAImQ,EAAM9S,SAAU2C,EAAG,CACnC,IAAMqQ,EAAUF,EAAMnQ,GAAGqQ,QACnBC,EAAqC,MAA1BH,EAAMnQ,GAAGuQ,cAAwBJ,EAAMnQ,GAAGuQ,cAAgBJ,EAAMnQ,GAAGqJ,KAEhF,EAAKmG,YAAYgB,kBAAkBH,EAASC,IAC5CF,EAAWhS,KAAK+R,EAAMnQ,IAG9B,EAAKmQ,MAAQC,KACdK,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAK2U,OAAS,CACVnT,IAAK,KACLyT,SAAU,GACVM,aAAcvV,KAAKiU,SAASuB,SAC5BxH,KAAM,GACNyH,qBAAsB,KACtBC,oBAAqB,KACrBC,YAAa,KACbC,aAAc,GACdC,QAAS,GACTC,SAAU,GACVC,kBAAmB,GACnBC,eAAgB,GAChBC,iBAAkB,GAClBC,WAAY,GACZC,YAAa,GACbC,aAAc,GACdC,gBAAiB,GACjBC,MAAO,GACPC,YAAa,GACbC,mBAAoB,GACpBC,MAAM,EACNC,UAAW,SACXC,SAAU,KACVC,WAAY,QAKxB,YAAAC,mBAAA,aAIA,YAAAC,KAAA,SAAKC,GACD/W,KAAK2U,OAAOyB,aAAeW,EAAIvV,KAGnC,YAAAwV,cAAA,SAAc7D,GAEV,IADA,IAAI8D,EAAY9D,EAAM+D,OAAOC,UACpBxS,EAAI,EAAGA,EAAIsS,EAAUjV,OAAQ2C,IAAK,CAEvC,GAAU,aADFsS,EAAUtS,GAEd,OAAO,EAIf,OAAO,GAGX,YAAAyS,SAAA,sBACgC,MAAxBpX,KAAK2U,OAAOM,UAAoBjV,KAAK2U,OAAOM,SAASjT,OAAS,GAC9DhC,KAAKgU,SAASqD,sBAAsBrX,KAAK2U,OAAOM,UAAU,GAAMJ,MAAK,SAAA0B,GACjE,EAAK5B,OAAO4B,YAAcA,KAC3BnB,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAKgU,SAASsD,0BAA0BtX,KAAK2U,OAAOM,UAAU,GAAOJ,MAAK,SAAA0B,GACtE,EAAK5B,OAAO6B,mBAAqBD,KAClCnB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAGfrV,KAAK2U,OAAO4B,YAAc,IAIlC,YAAAgB,SAAA,sBACIvX,KAAK+T,QAAQyD,iBAAiBxX,KAAK2U,QAAQE,MAAK,SAAA4C,GAC5C,EAAK/C,mBAAmBzC,KAAKwF,GAC7B,EAAKvD,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAsC,SAAA,WACI3X,KAAKkU,WAAWwD,QAGpB,YAAA9E,YAAA,WACI5S,KAAK0U,mBAAmBkD,eAG5B,YAAAC,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA7I3CvJ,GAAqB,6N,iCAArBA,EAAqB,29H,GAAA,MCjBlC,4BACI,8BAEA,4BACI,6BAGA,6BAIJ,iBAEA,+BAEI,+BACI,+BAUA,8BAYA,+BASA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,oEAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BAAyD,iBACrE,iBACA,8BACI,oCAA6C,yEACzC,yBACA,iCAAuB,8BAAwD,iBAC/E,iCAAyB,8BAA0D,iBACnF,iCAAwB,8BAAyD,iBACjF,iCAAwB,8BAAyD,iBACrF,iBACA,kCACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,iCAGA,uCAEJ,iBACJ,iBAEA,6BACI,6BACI,6BAAO,8BAAiD,iBAC5D,iBACA,8BACI,iCAA8C,0EAC1C,yBACA,iCAAuB,8BAA6C,iBACpE,iCAAwB,8BAA8C,iBAC1E,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BAAgD,iBAC5D,iBACA,8BACI,8BACI,8BAEI,8BAAK,yCAAS,EAAAkL,cAAA,GAAwB,KAAO,EAAH,sCACtC,uBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAyBA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,4EAAiG,iBAC/G,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,uEAAuF,iBACrG,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,wEAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,iFAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,8EAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,gFAAyG,iBACvH,iBACJ,iBACA,6BACI,6BACI,6BAAQ,+BACR,iBACJ,iBACA,+BACI,oCAAU,0EAA6F,iBAC3G,iBACJ,iBAEA,8BACI,yBACA,+BACI,+BACJ,iBACJ,iBAEA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,2EAAP,iBACJ,iBACJ,iBACA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,+EAAP,iBACJ,iBACJ,iBACA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,qEAAP,iBACJ,iBACJ,iBAEA,gCAOA,iCA2BA,gCAuBA,8BACI,yBACA,+BACI,+BACI,kCAAsB,wCAAS,EAAAW,cAC3B,+BACJ,iBACA,oCAGJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,6BApTU,oDAGG,4CAGA,6CAS+C,0EAUvB,mEAYA,kEAeV,qDAAyB,+BAQa,0DAA8B,uBAOnE,qDASD,+CAGM,gDAUiC,2DAA+B,uBAe4B,qGAqC/F,6DAAiC,uBASjC,wDAA4B,uBAS/B,yDAA6B,uBAS7B,kEAAsC,uBAStC,+DAAmC,uBAShC,iEAAqC,uBASrC,2DAA+B,uBAiBlC,6DAAgC,uBAShC,gEAAoC,uBASpC,sDAA0B,uBAIhB,kEAOE,4DA2BrB,yEA4BoB,oEAEL,kD,iVD/RjC,GAKa,EAAA7L,yB,+DAAAA,EAAqB,E,KALjC,EAAAqD,U,MAAU,CACPC,SAAU,gBACVC,YAAa,iCACbC,UAAW,Q,sSEff,WACA,OACA,OAQA,SAKA,GAJA,MACA,OACA,OAEA,QAEA,GADA,OACA,QAEA,S,wICbyE,yB,qBAIA,yB,qBAIA,yB,sBA+BrD,2BACE,6BACF,kB,sBACA,2BACE,6BACF,kB,yBACA,2BAAoE,YAA8B,kB,uCAA9B,qE,mDAMpE,+BAAyC,gKAAiD,oFAA1F,iB,gEAA2F,gDAC7D,kDADW,2DAAiD,kC,yBAD5F,0BACE,iCAEF,kB,8BAFU,qD,0IAIV,0BACE,yCAE0B,iJAC1B,iBACF,iB,+DAHM,6DAA+B,oBAA/B,CAA+B,mFAA/B,CAA+B,sBAA/B,CAA+B,gBAA/B,CAA+B,2B,yBAtB3C,4BACE,6BACE,6BACE,4BACE,gCAGA,gCAGA,gCACF,iBACF,iBAEA,6BACE,+BAKA,gCAOF,iBACF,iBACF,kB,uBAzBe,oDAGA,4DAGA,6EAKH,oDAKA,qD,yBArClB,4BAOE,4BAQE,yBACA,4BACE,+B,+CA8BF,iBACF,iBACF,kB,8BAhC2B,mH,mDAmCxB,4BACE,6BACG,6BACE,4BACE,2BAAO,YAAoB,iBAC7B,iBACF,iBAEH,6BACE,yCACiC,2IAAgI,iBACnK,iBACD,iBACD,iB,+CATgB,qDAKK,6DAA+B,oBAA/B,CAA+B,uGAA/B,CAA+B,sBAA/B,CAA+B,gBAA/B,CAA+B,yBAA/B,CAA+B,gB,yBAXvD,4BACE,4BACC,+BAcD,iBACF,kB,8BAf6B,sD,mDAiB7B,0BACE,6BACE,6BACE,4BACE,2BAAO,6BAAuE,iBAChF,iBACF,iBAEA,6BACE,yCACwB,6IAAkJ,iBAC5K,iBACF,iBAEF,iB,iCALuB,6DAA+B,oBAA/B,CAA+B,yGAA/B,CAA+B,sBAA/B,CAA+B,gBAA/B,CAA+B,yBAA/B,CAA+B,0C,yBA/ExD,0BACE,+BAkDA,+BAmBA,gCAeF,kB,6BApFQ,mDAkDA,mDAmBA,oD,sFDxEZ,aAoGI,WAAoB2E,EAAuCiE,EAAsC/D,EAAkCC,GAA/G,KAAAH,WAAuC,KAAAiE,cAAsC,KAAA/D,cAAkC,KAAAC,cA3D1H,KAAA+D,cAAmC,KAGnC,KAAAC,QAA4B,GAErC,KAAAC,oBAA2B,GAE3B,KAAAC,kBAA4B,EAE5B,KAAAC,SAAmB,EAEnB,KAAAC,mBAA6B,EAEpB,KAAAvF,SAAmB,EAOnB,KAAAwF,kBAA8B,GAE9B,KAAAC,QAAgB,IAAIpE,KAEpB,KAAAvU,UAAoB,EAEpB,KAAA0U,OAAiB,EAEjB,KAAAkE,qBAAsB,EAEtB,KAAAC,mBAAoB,EAMnB,KAAAC,MAAQ,IAAI,EAAAtZ,aAEZ,KAAAuZ,gBAAkB,IAAI,EAAAvZ,aAGtB,KAAA6X,SAAW,IAAI,EAAA7X,aAEhB,KAAAwZ,aAAuB,EAIhC,KAAAC,mBAA2B,KAC3B,KAAAC,kBAA0B,KAC1B,KAAAnX,SAAmB,EAEnB,KAAAoX,2BAAuC,CAAC,MAAO,WAAY,OAAQ,iBAAkB,cASjFlZ,KAAKwY,kBAAoBxY,KAAKmU,YAAYgF,oB,OAG9C,YAAA3Z,SAAA,WACkC,MAA1BQ,KAAKyY,oBACLzY,KAAKkZ,2BAA2BnW,KAAKqW,MAAMpZ,KAAKkZ,2BAA4BlZ,KAAKyY,mBAE5EzY,KAAK4Y,mBACN5Y,KAAKkZ,2BAA2BnW,KAAK,aAK7C,IADA,IAAIsW,EAAW,KACN1U,EAAI,EAAGA,EAAI3E,KAAK8T,cAAcwF,WAAWtX,SAAU2C,EACV,aAA1C3E,KAAK8T,cAAcwF,WAAW3U,GAAGqJ,OACjCqL,EAAWrZ,KAAK8T,cAAcwF,WAAW3U,IAGjC,MAAZ0U,IACArZ,KAAKuZ,sBAAwB,IAAI,EAAAC,cAAc,WAAY,WAAY,IAAI,EAAAC,eAAe,WAAY,MAAO,IAAI,EAAAA,eAAe,WAAY,OAAO,GAAM,GAAO,GAAO,IAG3KzZ,KAAK0Z,oBAAsB,IAAI,EAAAF,cAAc,WAAY,WAAY,IAAI,EAAAC,eAAe,UAAW,MAAO,IAAI,EAAAA,eAAe,UAAW,OAAO,GAAM,GAAO,GAAO,GACnKzZ,KAAK2Z,gBAGT,YAAAlH,gBAAA,sBACIzS,KAAK4Z,cAAcC,cAAcC,WAAU,SAAAC,GACvC,EAAKjY,QAAsB,UAAXiY,GAAiC,aAAXA,EAEtC,EAAKlB,MAAMmB,KAAK,EAAKlY,aAI7B,YAAAmY,WAAA,SAAWC,GACPla,KAAKkY,YAAYvY,SAAQ,GAEzBK,KAAKuY,SAAW2B,EAGZla,KAAK2Y,oBADQ,IAAbuB,GAOR,YAAAC,WAAA,SAAWpH,EAAW3Q,GAClB2Q,EAAU3Q,MAAQA,GAGtB,YAAAyV,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAsC,WAAA,SAAW7B,GACP,IAAI7T,EAAM1E,KAAKoY,QAAQpW,OAEvB,GAAI0C,EAAM,EACN,IAAK,IAAIC,EAAI,EAAGA,EAAID,IAAOC,EAAG,CAC1B,IAAI0V,EAAyBra,KAAKoY,QAAQzT,GAE1C,GAAI0V,EAAOC,aAAe,EAAAC,YAAYC,sBAClC,OAAO,EACJ,GAAIH,EAAOC,aAAe,EAAAC,YAAYE,uBAAwB,CACjE,IAAIC,EAA0CL,EAE9C,GAAuC,aAAnCK,EAAiBC,eAA6C,IAAbpC,EACjD,OAAO,EACJ,GAAuC,aAAnCmC,EAAiBC,eAA6C,IAAbpC,EACxD,OAAO,EACJ,GAAiB,IAAbA,GAAqD,aAAnCmC,EAAiBC,eAAmE,aAAnCD,EAAiBC,cAC3F,OAAO,GAMvB,OAAO,GAGX,YAAAhB,aAAA,WACI,IAAIiB,EAAS5a,KAAKmY,cAAcmB,WAAiB,KACjDtZ,KAAK8T,cAAcwF,WAAWzT,SAAQ,SAAAgV,GACjB,SAAbA,EAAI7M,OACJ6M,EAAI/Y,QAAqB,MAAV8Y,GAAmBA,EAAO5Y,OAAS,OAQ9D,YAAA8Y,gBAAA,SAAgBjC,EAAe9F,GAC3BA,EAAUjR,QAAU+W,EAEpB,IAAIkC,GAAmB,EAEvB/a,KAAK8T,cAAcwF,WAAWzT,SAAQ,SAAAgV,GACf,MAAfA,EAAI/Y,SAAoB+Y,EAAI/Y,UAC5BiZ,GAAW,MAIqB,MAApC/a,KAAK0Z,oBAAoB5X,SAAoB9B,KAAK0Z,oBAAoB5X,UACtEiZ,GAAW,GAG2B,MAAtC/a,KAAKuZ,sBAAsBzX,SAAoB9B,KAAKuZ,sBAAsBzX,UAC1EiZ,GAAW,GAGf/a,KAAK6Y,MAAMmB,KAAKe,IAGpB,YAAAC,YAAA,SAAYC,GACR,OAAc,MAAPA,GAA4B,MAAbA,EAAI7Y,OAA+B,KAAd6Y,EAAI7Y,OAGnD,YAAA8Y,uBAAA,SAAuB/H,EAAYgI,GAC/Bnb,KAAKiZ,kBAAoBhJ,KAAKmL,MAAMnL,KAAKC,UAAUlQ,KAAKgZ,sBAG5D,YAAAqC,qCAAA,SAAqCC,GACjC,IAAK,IAAI3W,EAAI,EAAGA,EAAI3E,KAAK8T,cAAcwF,WAAWtX,OAAQ2C,IAAK,CAC3D,IAAI4W,EAAYvb,KAAK8T,cAAcwF,WAAW3U,GAE9C,GAAkB,SAAd4W,EAAKla,MAAmBka,EAAKvN,OAASsN,EAAmB,CAEzD,IAAIE,GADJD,EAA0BA,GACNE,SAASC,SAE7B,MAAkB,WAAdH,EAAKvN,KACE,UAAM2N,eAAeH,GAErBA,GAKnB,OAAO,MAGX,YAAAI,gBAAA,SAAgB7L,EAAM8L,GAClB,GAAY,MAAPA,GAAuB,MAAR9L,GAA0B,MAARA,GAAuB,MAAP8L,EAClD,OAAO,EACJ,GAAW,MAAPA,GAAuB,MAAR9L,EACtB,OAAO,EAGX,GAAoB,IAAf8L,EAAI7Z,QAAgB+N,EAAK/N,OAAS,GAAuB,IAAhB+N,EAAK/N,QAAgB6Z,EAAI7Z,OAAS,EAC5E,OAAO,EAGX,IAAI8Z,EAAaD,EACbE,MAAMC,QAAQH,KACdC,EAAaD,EAAI,IAGrB,IAAII,EAAclM,EAKlB,OAJIgM,MAAMC,QAAQjM,KACdkM,EAAclM,EAAK,IAGhB+L,IAAeG,GAG1B,YAAAC,kBAAA,SAAkBnN,GACd,IAAK,IAAIpK,EAAI,EAAGA,EAAI3E,KAAK8T,cAAcwF,WAAWtX,OAAQ2C,IAAK,CAC3D,IAAI4W,EAAOvb,KAAK8T,cAAcwF,WAAW3U,GAEzC,GAAI4W,EAAKvN,OAASe,EACd,OAAOwM,EAAKla,KAIpB,OAAO,MAGJ,YAAA8a,WAAP,WACI,OAAOnc,KAAKoY,SAGT,YAAAgE,WAAP,WACI,OAAOpc,KAAK8B,SAGT,YAAAua,aAAP,a,iCAxPSzR,GAAuC,0J,iCAAvCA,EAAuC,0E,GAAA,M,4oBAlCrC,CAAC,EAAAjD,YAAS,g/CCzBzB,4BAEE,4BACE,4BACE,8BAAgF,wCAAS,EAAAsS,WAAW,MAClG,6BAA+C,4BAAoD,iBACnG,6BAAiE,+BAAyD,iBAC5H,iBACA,8BAA8G,wCAAS,EAAAA,WAAW,MAChI,6BAA+C,6BAAmD,iBAClG,8BAAiE,gCAAyD,iBAC5H,iBACA,+BAA8G,wCAAS,EAAAA,WAAW,MAChI,8BAA+C,6BAAmD,iBAClG,8BAAiE,gCAAyD,iBAC5H,iBACF,iBACF,iBACF,iBAEA,kCACE,gCAEE,gCAuFF,iBACF,kB,MA3GiD,6EAE+B,oDAE/B,6FAE+B,oDAE/B,8FAE+B,oDAStE,sD,80EDGM,CACR,CACI,EAAAxG,QAAQ,YAAa,CACjB,EAAAG,WAAW,SAAU,CACjB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,QAKzB,EAAAF,QAAQ,QAAS,CACb,EAAAzB,MAAM,OAAQ,EAAA0B,MAAM,CAAE4I,KAAM,KAC5B,EAAAtK,MAAM,QAAS,EAAA0B,MAAM,CAAE4I,KAAM,UAC7B,EAAA1I,WAAW,SAAU,EAAAX,QAAQ,a,EAzB7C,GAsCa,EAAArI,2C,+DAAAA,EAAuC,E,KAtCnD,EAAAuE,U,MAAU,CACPC,SAAU,oCACVC,YAAa,qDACbC,UAAW,CAAC,2CACZ/B,UAAW,CAAC,EAAA5F,UACZkM,WAAY,CACR,CACI,EAAAJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,SAAU,CACjB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,QAKzB,EAAAF,QAAQ,QAAS,CACb,EAAAzB,MAAM,OAAQ,EAAA0B,MAAM,CAAE4I,KAAM,KAC5B,EAAAtK,MAAM,QAAS,EAAA0B,MAAM,CAAE4I,KAAM,UAC7B,EAAA1I,WAAW,SAAU,EAAAX,QAAQ,e,sHAgBhCkF,cAAe,CAAF,C,KAArB,EAAA5I,QAGQ6I,QAAS,CAAF,C,KAAf,EAAA7I,QAUQ0D,QAAS,CAAF,C,KAAf,EAAA1D,QAKQuE,cAAe,CAAF,C,KAArB,EAAAvE,QAEQkJ,kBAAmB,CAAF,C,KAAzB,EAAAlJ,QAEQmJ,QAAS,CAAF,C,KAAf,EAAAnJ,QAEQxP,SAAU,CAAF,C,KAAhB,EAAAwP,QAEQkF,MAAO,CAAF,C,KAAb,EAAAlF,QAEQoJ,oBAAmB,E,KAA3B,EAAApJ,QAEQqJ,kBAAiB,E,KAAzB,EAAArJ,QAEQgN,cAAe,CAAF,C,KAArB,EAAAhN,QAE4BiN,eAAc,E,KAA1C,EAAAC,U,MAAU,oBAED5D,MAAK,E,KAAd,EAAA5R,SAES6R,gBAAe,E,KAAxB,EAAA7R,SAGSmQ,SAAQ,E,KAAjB,EAAAnQ,SAEQ8R,YAAa,CAAF,C,KAAnB,EAAAxJ,QAEQgH,YAAa,CAAF,C,KAAnB,EAAAhH,QAQ2BqK,cAAa,E,KAAxC,EAAA6C,U,MAAU,sB,mHEnHf,W,GACA,O,+DCDA,4BACE,4BACE,4BACE,4BACA,6BAA6B,iBAAO,qCAAkE,gBAAC,iBACzG,iBACF,iBACA,4BACE,6BACE,+BAAO,wEAAP,iBACF,iBACF,iBACF,kB,2CATgB,yCAC6C,4CAKhD,+CAA+B,yBAA/B,CAA+B,sBAA/B,CAA+B,wCDN5C,iBAaI,aANgB,KAAA1N,IAAc,GAEd,KAAAC,UAAoB,EACnB,KAAAE,YAAc,IAAI,EAAA3P,a,wCAL1BmL,I,iCAAAA,EAAuB,8YCRpC,+B,KAAgD,8C,wJDGhD,GAKa,EAAAA,2B,+DAAAA,EAAuB,E,KALnC,EAAAyE,U,MAAU,CACPC,SAAU,kBACVC,YAAa,mCACbC,UAAW,Q,uBAIKP,IAAK,CAAF,C,KAAlB,EAAAQ,QACenN,MAAO,CAAF,C,KAApB,EAAAmN,QACeP,SAAU,CAAF,C,KAAvB,EAAAO,QACgBL,YAAW,E,KAA3B,EAAAjI,Y,qSEbL,WAEA,QACA,QAGA,GAFA,MACA,OACA,QAEA,SACA,SACA,SAEA,SAEA,GADA,MACA,QAOA,GAFA,OAEA,QACA,S,qMCYS,6BACC,gCAAQ,mIAA6B,MAAM,EAAO,EAAF,QAE/C,6BACD,iBAE8B,gCAAQ,mIAA6B,MAAM,EAAM,EAAF,QAE3C,6BACJ,iBAC/B,kB,mDAWE,2BAEC,2I,uBAEgC,iB,KADhC,kE,mDAQgC,2BACI,qKAAmC,EAAO,EAAF,QAE5C,kB,mDAhBlC,8BAEC,6BAMA,2BACC,uIAAmC,M,uBAEH,iBAEA,6BAIlC,iB,+DAdG,sEAOD,+EAGoC,kD,mDAMtC,8BACC,2BACC,uIAAmC,M,uBACU,iBAC/C,iB,MADE,gF,+FA7BH,4BAKC,YAEA,gCAmBA,gCAKD,kB,uBA7BuD,0BAAgB,yFADrD,mGAA6G,0BAI9H,oEAEO,oEAmBA,sG,yBA7CV,4BACC,0BAEC,6BACC,4BAAO,YAAsC,iBAC9C,iBAEA,+BAYA,+BAgCD,iBACD,kB,2CAhDU,+DAGF,6EAc6B,gD,mDAiDnC,6BACC,gCAAQ,mGAEP,6BACD,iBACD,kB,mDASE,2BAEC,2I,uBAC8C,iB,KAA9C,kE,mDAJF,8BACC,6BAIA,2BACC,qIAAsC,M,uBACO,iBAC/C,iB,+DAPK,sEAMH,gF,mDAGF,8BACC,2BACC,qIAAsC,M,uBACO,iBAC/C,iB,MADE,gF,mGAnBH,4BAGC,0HACA,sBAA8B,YAE9B,gCAUA,gCAKD,iB,+CArB0D,0BAAqB,2GAIhD,oEAEvB,2EAUA,6E,yBA9BV,4BACC,0BAEC,6BACC,4BAAO,YAA2C,iBACnD,iBAEA,+BAOA,8BAsBD,iBACD,kB,2CAjCU,+DAGF,6EAOoB,sD,sBAiCb,6BAChB,6BACC,6BACC,2BACC,6BACD,iBACD,iBACD,iBACgB,kB,sBACA,0BACI,2BACI,6BACJ,iBACJ,kB,yBAdjB,0BACiB,+BASA,+BAKF,kB,6BAdQ,+FASA,iGDzHf,EAAAyV,oBAA8B,IAC9B,EAAAC,oBAA8B,IAE9B,EAAAC,kBAAoB,UACpB,EAAAC,0BAA4B,UAC5B,EAAAC,oBAAsB,UACtB,EAAAC,4BAA8B,UAC9B,EAAAC,0BAA4B,EAAAD,4BAEzC,mBAAa,EAAAE,WAcb,iBAmFI,WAAY/K,EAA4CgL,EAAsCC,EAC1FC,EAA8CC,EAA0ClJ,GAD5F,WAAwD,KAAA+I,eAAsC,KAAAC,qBAC5C,KAAAE,kBAA0C,KAAAlJ,cA5E5F,KAAAmJ,iBAA2B,KAG3B,KAAAC,iBAAkC,KAElC,KAAAC,SAAqB,IAAIP,EAGzB,KAAAQ,eAAkC,GAElC,KAAAC,iBAA0E,GAC1E,KAAAC,WAA8D,GAE9D,KAAAra,OAAiB,GACjB,KAAAsa,yBAAkF,GAClF,KAAAC,mBAAsE,GAGtE,KAAAC,8BAA0C,CAAC,YAAa,mBACxD,KAAAC,8BAA0C,CAAC,QAE3C,KAAAC,SAAmB,EAsBnB,KAAAC,OAAiB,EAMjB,KAAAC,QAAU,CAMNC,aAAc,QACdC,cAAe,CACXC,MAAO,CACHC,MAAO,SAACC,EAAWC,EAAWC,GAC1B,EAAKC,gBAAgBF,EAAMC,IAE/BE,YAAa,SAACJ,EAAWC,EAAWC,GAChC,EAAKG,aAAaJ,EAAMC,MAIpCJ,MAAO,IAWPre,KAAKie,MAAQ9J,EAAY8J,QAEzBje,KAAKkS,iBAAmBA,EACxBlS,KAAKod,gBAAkBA,E,OAG3B,YAAA5d,SAAA,sBACIQ,KAAK6e,WAAW,MAEhB,EAAAC,UAAU9e,KAAK+e,YAAYC,cAAe,SAAS7O,KAG/C,EAAA7M,OAAO2b,SACP,EAAAC,aAAa,KACb,EAAAC,uBACA,EAAAC,KAAI,WACA,EAAKC,qBAGXvF,aAGN,YAAAwF,SAAA,SAASvQ,GACL,OAAO/O,KAAKod,gBAAgBmC,OAAOxQ,IAG/B,YAAAyQ,WAAR,sBACI,GAA6B,MAAzBxf,KAAKud,kBAAwE,MAA5Cvd,KAAKud,iBAAiBkC,oBAAkF,IAApDzf,KAAKud,iBAAiBkC,mBAAmBzd,OAAc,CAC5I0d,EAAGC,OAAO,QAAQrf,SAElB,IAAI,GAAU,EAQd,OAP6B,MAAzBN,KAAKud,mBACL,EAAWvd,KAAKmU,YAAY8J,SAAWje,KAAKmU,YAAYyL,iBAAiB5f,KAAKud,iBAAiBsC,wBAGnG7f,KAAKyd,eAAe5X,SAAQ,SAACia,GACzBA,EAAIC,QAAU,KAKtBL,EAAGC,OAAO,mBAAmBrf,SAC7Bof,EAAGC,OAAO,6BAA6Brf,SACvCof,EAAGC,OAAO,8BAA8Brf,SAExC,IAAI0f,EAAmBN,EAAGC,OAAO,iBAAiBnB,OAC9CyB,EAAaD,EAAYC,WACzBC,EAAcF,EAAYE,YAE1BC,EAAMT,EAAGC,OAAO,QAEF,MAAdQ,EAAI3B,SACJ2B,EAAMT,EAAGC,OAAO,cAAcS,OAAO,QACjC7E,KAAK,KAAM,OAGnBvb,KAAKqgB,oBAAsB,IAAI,EAAAC,iBAAiBtgB,KAAMmgB,EAAKngB,KAAKud,kBAAkB,EAAMvd,KAAKod,gBAAiBpd,KAAKkd,aAAcld,KAAKmU,aACtInU,KAAKqgB,oBAAoBE,SAEzBvgB,KAAKwgB,sBAEL,IAAIC,EAAoBf,EAAGC,OAAO,iBAAiBnB,OACnDiC,EAAaR,WAAaA,EAC1BQ,EAAaP,YAAcA,EAI3BlgB,KAAKyd,eAAe5X,SAAQ,SAACia,GACzBA,EAAIC,QAAU,EAAKW,iBAAiBZ,OAI5C,YAAAU,oBAAA,WACI,IAAIL,EAAWT,EAAGC,OAAO,QAGrB,EAFeQ,EAAI3B,OAEemC,UAAhCC,EAAC,IAAEC,EAAC,IAAEC,EAAK,QAAEC,EAAM,SAIzBZ,EAAI5E,KAAK,UAAYqF,EAFJ,GAEoB,KAAOC,EAD3B,IAC2C,KAAOC,EAAQE,IAAgB,KAAOD,EAASE,KAE3GH,GAASA,EAAQE,IAAgB,EAAAtE,oBACjCqE,GAAUA,EAASE,IAAgB,EAAAtE,oBAEnC+C,EAAGC,OAAO,cAAcjM,MAAM,QAASoN,EAAQ,OAInD,YAAAJ,iBAAA,SAAiBZ,GACb,IAAIoB,EAAqBlhB,KAEzB,GAAgC,MAA5BA,KAAKqgB,oBAkCL,OAAO,EAhCP,IAAMrgB,KAAKmU,YAAY8J,UAAWje,KAAKmU,YAAYyL,iBAAiB5f,KAAKud,iBAAiBsC,kBACtF,OAAO,EAIX,GAAwD,MAApD7f,KAAKqgB,oBAAoBc,cAAcrB,EAAI9R,MAC3C,OAAO,EAIX,GAAI8R,EAAIsB,WAAY,CAChB,IAAI,GAAiB,EAUrB,GARAphB,KAAKyd,eAAe5X,SAAQ,SAACwb,GACrBA,EAAMnM,gBAAkB4K,EAAI9R,MAC4C,MAApEkT,EAAmBb,oBAAoBc,cAAcE,EAAMrT,QAC3D,GAAiB,MAKzB,EACA,OAAO,OAER,GAAyB,MAArB8R,EAAI5K,eAEoE,MAA3EgM,EAAmBb,oBAAoBc,cAAcrB,EAAI5K,eACzD,OAAO,EAQnB,OAAO,GAGX,YAAAoM,4BAAA,SAA4BxB,GAGxB,IAFA,IAAIyB,EAAe,GAEV5c,EAAI,EAAGA,EAAI3E,KAAKuW,YAAYvU,SAAU2C,EAAG,CAC9C,IAAI6c,EAAgBxhB,KAAKuW,YAAY5R,GAErC,GAAwC,MAApC6c,EAAc/B,oBAA8B+B,EAAc/B,mBAAmBzd,OAAS,EACpE0d,EAAG+B,UAAUD,EAAc/B,mBAAmB,IAAIiC,cAE5CC,MAAK,SAACnD,GAC1B,OAAOA,EAAKvZ,KAAK6O,gBAAkBgM,EAAI9R,MAA4C,MAApCwQ,EAAKvZ,KAAK2c,2BAIzDL,EAAaxe,KAAKye,EAAcxT,MAK5C,OAAOuT,GAGH,YAAAM,qBAAR,WACI,IAkRIC,EAAgBC,EAAgBjB,EAlRhCkB,EAAOhiB,KAEPiiB,EAA4B,GAGhCA,EAAYlf,KAAK,CACbmf,aAAc,sBACdC,OAAQ,SAASC,EAAiBC,GAM9B,GALmB,MAAfriB,KAAKqiB,SACLriB,KAAKqiB,OAAO3O,MAAM,eAAgB,MAClC1T,KAAKqiB,OAAS,MAGJ,MAAVA,EAAgB,CAChB,IAAIC,EAAyBD,EAAOE,QAAQ,uBAEd,MAA1BD,IACAtiB,KAAKqiB,OAAS3C,EAAGC,OAAO2C,GAAwB5O,MAAM,eAAgB,cAIlF8O,OAAQ,SAASJ,GACM,MAAfpiB,KAAKqiB,SACLriB,KAAKqiB,OAAO3O,MAAM,eAAgB,MAClCsO,EAAKS,SAAST,EAAKzE,iBAAiBvP,KAAM,OAAQ0R,EAAGC,OAAOyC,GAAQ7G,KAAK,OACzEvb,KAAKqiB,OAAS,SAM1BJ,EAAYlf,KAAK,CACbmf,aAAc,qBACdC,OAAQ,SAASC,EAAiBM,EAAsBvP,GAAhD,WACJnT,KAAK2iB,iBAEL,IAAIC,EAAa5iB,KAAKqiB,OAKtB,GAAW,MAFI3C,EAAGC,OAAO,QAAQnB,OAEjC,CAGA,IAAIqE,EAAgB,EAAAC,SAAS3P,EAAM4P,YAAYC,MAAO7P,EAAM4P,YAAYE,OAyBxE,GArBAjB,EAAK3B,oBAAoB6C,YAAYxB,cAAc7b,SAAQ,SAAC2Y,GACxB,cAA5BA,EAAKvZ,KAAK6O,eAAiC,EAAAqP,cAAcN,EAAerE,EAAKvZ,KAAKme,eAClF,EAAKf,OAAS3C,EAAGC,OAAO,oEAAuEnB,EAAKvZ,KAAK6O,cAAgB,MACzH0K,EAAKvZ,KAAKoe,iBAAkB,EAET,MAAf7E,EAAK8E,SACL9E,EAAKvZ,KAAKme,aAAe,CAAExC,EAAGpC,EAAKoC,EAAI,EAAAN,iBAAiBiD,SAAW,EAAG1C,EAAGrC,EAAKqC,EAAgC,EAA5B,EAAAP,iBAAiBkD,SAAc1C,MAAO,EAAAR,iBAAiBiD,SAAUxC,OAAoC,EAA5B,EAAAT,iBAAiBkD,aAGhLhF,EAAKvZ,KAAKoe,iBAAkB,EAET,MAAf7E,EAAK8E,SACL9E,EAAKvZ,KAAKme,aAAe,CAAExC,EAAGpC,EAAKoC,EAAI,EAAAN,iBAAiBiD,SAAW,EAAG1C,EAAGrC,EAAKqC,EAAI,EAAAP,iBAAiBkD,SAAW,EAAG1C,MAAO,EAAAR,iBAAiBiD,SAAUxC,OAAQ,EAAAT,iBAAiBkD,gBAKrK,MAAfxjB,KAAKqiB,QAAiC,MAAdO,GAAqC,MAAf5iB,KAAKqiB,QAAkBO,EAAWrH,KAAK,kBAAoBvb,KAAKqiB,OAAO9G,KAAK,kBAC1Hvb,KAAKyjB,iBAAgB,GAGN,MAAfzjB,KAAKqiB,OAAgB,CACrB,IAAIqB,EAAchE,EAAGC,OAAOyC,GAAQuB,QAAQ,oBACtC,EAAU3jB,KAAKqiB,OAAO9G,KAAK,gBAC7BqI,EAAW5B,EAAK3B,oBAAoB6C,YAAYvB,MAAK,SAACnD,GAAW,OAAOA,EAAKvZ,KAAK6O,gBAAkB,KACpG+P,EAAc7B,EAAK8B,wBAAwB,GAAS1C,WAExDphB,KAAKqiB,OAAO9G,KAAK,SAAU,QAE3B,IAAMwI,EAAUC,SAAShkB,KAAKqiB,OAAO9G,KAAK,MACpC0I,EAAUD,SAAShkB,KAAKqiB,OAAO9G,KAAK,MAGpC2I,EAAiB,EAAA5D,iBAAiBiD,SAClCY,EAAiB,EAAA7D,iBAAiBkD,SAEpCY,EAAM1E,EAAGC,OAAO,QAAQS,OAAO,KAAKuD,QAAQ,kBAAkB,GAG9DU,IAA+C,MAArBT,EAASlI,UAAiD,IAA7BkI,EAASlI,SAAS1Z,QACzEsiB,IAAmBT,GAAiBH,GAAgBW,GACxD,GAAIC,EAAiB,CACjBtkB,KAAKukB,cAAgBH,EAAIhE,OAAO,QAAQuD,QAAQ,2BAA2B,GACtEpI,KAAK,IAAKwI,EAAW,EAAAzD,iBAAiBiD,SAAW,EAAMW,EAAS,GAChE3I,KAAK,IAAK0I,EAAU,EAAA3D,iBAAiBkD,SAAW,IAChDjI,KAAK,QAAS2I,GACd3I,KAAK,SAAU4I,GACf5I,KAAK,OAAQ,SAElBvb,KAAKwkB,QAAUJ,EAAIhE,OAAO,QAAQuD,QAAQ,oBAAoB,GACzDpI,KAAK,IAAKwI,EAAW,EAAAzD,iBAAiBiD,SAAW,EAAMW,EAAS,GAChE3I,KAAK,IAAK0I,EAAU,EAAA3D,iBAAiBkD,SAAW,IAChDjI,KAAK,QAAS2I,GACd3I,KAAK,SAAU4I,GACf5I,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,mBAAoB,OAE9B,IAAIkJ,EAAgBJ,EAAwBrC,EAAK5E,gBAAgBmC,OAAO,oCAAsCyC,EAAK5E,gBAAgBmC,OAAO,8BAC1Ivf,KAAK0kB,YAAcN,EAAIhE,OAAO,QAAQuD,QAAQ,yBAAyB,GAClEpI,KAAK,cAAe,cACpBA,KAAK,YAAa,IAClBA,KAAK,OAAQ,SACbA,KAAK,IAAKwI,EAAW,EAAAzD,iBAAiBiD,SAAW,EAAK,EAAAoB,mBAAmBF,EAAe,IAAM,GAC9FlJ,KAAK,IAAK0I,EAAU,EAAA3D,iBAAiBkD,SAAW,GAAKW,EAAS,EAAI,GAClES,KAAKH,GAKd,IAAKf,EAAa,CACd1jB,KAAK6kB,eAAiBT,EAAIhE,OAAO,QAAQuD,QAAQ,4BAA4B,GACxEpI,KAAK,IAAKwI,EAAW,EAAAzD,iBAAiBiD,SAAW,EAAMW,EAAS,GAChE3I,KAAK,IAAK0I,EAAU,EAAA3D,iBAAiBwE,WAAaX,GAClD5I,KAAK,QAAS2I,GACd3I,KAAK,SAAU4I,GACf5I,KAAK,OAAQ,SAElBvb,KAAK+kB,SAAWX,EAAIhE,OAAO,QAAQuD,QAAQ,qBAAqB,GAC3DpI,KAAK,IAAKwI,EAAW,EAAAzD,iBAAiBiD,SAAW,EAAMW,EAAS,GAChE3I,KAAK,IAAK0I,EAAU,EAAA3D,iBAAiBwE,WAAaX,GAClD5I,KAAK,QAAS2I,GACd3I,KAAK,SAAU4I,GACf5I,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,mBAAoB,OAE9BmE,EAAGC,OAAO,2BAA2Brf,SACrC,IAAI0kB,EAAoC,MAAnBpB,EAASN,OAAiBtB,EAAK5E,gBAAgBmC,OAAO,+BAAiCyC,EAAK5E,gBAAgBmC,OAAO,qCACxIvf,KAAKilB,aAAeb,EAAIhE,OAAO,QAAQuD,QAAQ,0BAA0B,GACpEpI,KAAK,cAAe,cACpBA,KAAK,YAAa,IAClBA,KAAK,OAAQ,SACbA,KAAK,IAAKwI,EAAW,EAAAzD,iBAAiBiD,SAAW,EAAK,EAAAoB,mBAAmBK,EAAgB,IAAM,GAC/FzJ,KAAK,IAAK0I,EAAU,EAAA3D,iBAAiBwE,WAAaX,EAAS,EAAI,GAC/DS,KAAKI,GAId,GAAIhlB,KAAKklB,YAAc,IACG,MAAlBllB,KAAKklB,WACLllB,KAAKyjB,gBAAmC,MAAnBG,EAASN,QAGX,MAAnBM,EAASN,QAAgB,CAEzB,IADA,IAAI6B,EAAc,KACTxgB,EAAI,EAAGA,EAAIif,EAASN,OAAOre,KAAKyW,SAAS1Z,SAAU2C,EAAG,CAC7Cif,EAASN,OAAOre,KAAKyW,SAAS/W,GAErCmP,gBAAkB,IACrBqR,EAAcxgB,EAAI,GAI1B,IAAIygB,EAAkBpD,EAAK5E,gBAAgBmC,OAAO,8BAClDqE,EAASN,OAAOre,KAAKyW,SAAS5Y,OAAOqiB,EAAa,EAAG,CAAEE,aAAc,EAASvR,cAAe,YAAaT,MAAO+R,EAAiB1J,SAAU,KAE5IsG,EAAKxC,aACLxf,KAAKklB,UAAY,EAIzB,IAAII,EAAmB5F,EAAGC,OAAO,+BAE5B+D,GAAe,EAAAP,cAAcN,EAAe,EAAA0C,qBAAqBvlB,KAAK+kB,YACvE/kB,KAAK+kB,SAASxJ,KAAK,SAAU,QAC7Bvb,KAAKilB,aAAa1J,KAAK,OAAQ,QAC/B+I,GAAmBtkB,KAAKwkB,QAAQjJ,KAAK,SAAU,SAC/C+I,GAAmBtkB,KAAK0kB,YAAYnJ,KAAK,OAAQ,SACjD+J,EAAiB/J,KAAK,SAAU,SAChCvb,KAAKwlB,SAAWxlB,KAAK+kB,UACdT,GAAmB,EAAAnB,cAAcN,EAAe,EAAA0C,qBAAqBvlB,KAAKwkB,YAChFd,GAAe1jB,KAAK+kB,SAASxJ,KAAK,SAAU,UAC5CmI,GAAe1jB,KAAKilB,aAAa1J,KAAK,OAAQ,SAC/Cvb,KAAKwkB,QAAQjJ,KAAK,SAAU,QAC5Bvb,KAAK0kB,YAAYnJ,KAAK,OAAQ,QAC9B+J,EAAiB/J,KAAK,SAAU,SAChCvb,KAAKwlB,SAAWxlB,KAAKwkB,SACa,MAA3Bc,EAAiB9G,QAAkB,EAAA2E,cAAcN,EAAe,EAAA0C,qBAAqBD,OAC3F5B,GAAe1jB,KAAK+kB,SAASxJ,KAAK,SAAU,UAC5CmI,GAAe1jB,KAAKilB,aAAa1J,KAAK,OAAQ,SAC/C+I,GAAmBtkB,KAAKwkB,QAAQjJ,KAAK,SAAU,SAC/C+I,GAAmBtkB,KAAK0kB,YAAYnJ,KAAK,OAAQ,SACjD+J,EAAiB/J,KAAK,SAAU,QAChCvb,KAAKwlB,SAAW,cAI5BhD,OAAQ,SAASJ,GACb,GAAmB,MAAfpiB,KAAKqiB,QAAmC,MAAjBriB,KAAKwlB,SAAkB,CAC9C,IAAI,EAAUxlB,KAAKqiB,OAAO9G,KAAK,gBAC3BqI,EAAW5B,EAAK3B,oBAAoB6C,YAAYvB,MAAK,SAACnD,GAAW,OAAOA,EAAKvZ,KAAK6O,gBAAkB,KACpG2R,EAAU/F,EAAGC,OAAOyC,GAAQ7G,KAAK,MAErC,GAAIvb,KAAKwlB,WAAaxlB,KAAKwkB,QACvB,GAAsC,IAAlCZ,EAAS3e,KAAKyW,SAAS1Z,OACvBggB,EAAKS,SAAST,EAAKzE,iBAAiBvP,KAAM,EAASyX,OAChD,CAGH,IAFA,IAAIC,EAAW,GAEN/gB,EAAI,EAAGA,EAAIif,EAAS3e,KAAKyW,SAAS1Z,SAAU2C,EACjD+gB,GAAsB9B,EAAS3e,KAAKyW,SAAS/W,GAAGmP,cAE5CnP,EAAIif,EAAS3e,KAAKyW,SAAS1Z,OAAS,IACpC0jB,GAAsB,KAI9B1D,EAAK2D,mBAAmB3D,EAAKzE,iBAAiBvP,KAAM,EAASyX,EAASC,QAEnE1lB,KAAKwlB,WAAaxlB,KAAK+kB,SACP,MAAnBnB,EAASN,OACTtB,EAAK2D,mBAAmB3D,EAAKzE,iBAAiBvP,KAAM,OAAQyX,EAAS,GAErEzD,EAAK2D,mBAAmB3D,EAAKzE,iBAAiBvP,KAAM4V,EAASN,OAAOre,KAAK6O,cAAe2R,EAAS,GAE5E,YAAlBzlB,KAAKwlB,UACZxD,EAAKS,SAAST,EAAKzE,iBAAiBvP,KAAM4V,EAASN,OAAOre,KAAK6O,cAAe4L,EAAGC,OAAOyC,GAAQ7G,KAAK,OAG7Gvb,KAAK2iB,iBACL3iB,KAAKyjB,iBAAgB,IAEzBd,eAAgB,WACO,MAAf3iB,KAAKqiB,QACLriB,KAAKqiB,OAAO9G,KAAK,SAAU,MAG/Bvb,KAAKqiB,OAAS,KACdriB,KAAKwlB,SAAW,KAEhBxlB,KAAKwkB,QAAU,KACfxkB,KAAK+kB,SAAW,KAEhBrF,EAAGC,OAAO,mBAAmBrf,UAEjCmjB,gBAAiB,SAASjE,GAAT,WACb,GAAsB,MAAlBxf,KAAKklB,UAAmB,CACxB,IAAIU,EAAY5D,EAAK3B,oBAAoB6C,YAAYvB,MAAK,SAACnD,GAAW,OAAOA,EAAKvZ,KAAKogB,eAAiB,EAAKH,aAE7G,GAAiB,MAAbU,EAAmB,CAEnB,IADA,IAAIT,EAAc,KACTxgB,EAAI,EAAGA,EAAIihB,EAAUtC,OAAOre,KAAKyW,SAAS1Z,SAAU2C,EAAG,CAC9CihB,EAAUtC,OAAOre,KAAKyW,SAAS/W,GAEtC0gB,eAAiBrlB,KAAKklB,YACzBC,EAAcxgB,GAIH,MAAfwgB,IACAS,EAAUtC,OAAOre,KAAKyW,SAAS5Y,OAAOqiB,EAAa,GAC/C3F,GACAwC,EAAKxC,cAKjBxf,KAAKklB,UAAY,SAOJxF,EAAGmG,OACvB3lB,GAAG,SAAS,SAASiT,GAElB,GAAgB,UADFuM,EAAGC,OAAO3f,MAAMub,KAAK,gBACnC,CAIA,IAAIuK,EAAO9lB,KAAK+lB,wBAChBjE,EAASgE,EAAKxJ,KAAOnJ,EAAM4P,YAAYC,MACvCjB,EAAS+D,EAAKE,IAAM7S,EAAM4P,YAAYE,MACtCnC,EAAQgF,EAAKhF,UAEhB5gB,GAAG,QAAQ,SAASiT,GAEjB,GAAgB,UADFuM,EAAGC,OAAO3f,MAAMub,KAAK,gBACnC,CAIAmE,EAAGC,OAAO,mBAAmBrf,SAE7B,IAAI2lB,EAAUvG,EAAGC,OAAO3f,MAGxBimB,EAAQvS,MAAM,UAAW,QAEzB,IAAIwD,EAASgP,SAASC,iBAAiBhT,EAAM4P,YAAYC,MAAO7P,EAAM4P,YAAYE,OAElFgD,EAAQvS,MAAM,UAAW,MAEzB,IAAK,IAAI/O,EAAI,EAAGA,EAAIsd,EAAYjgB,SAAU2C,EACtCsd,EAAYtd,GAAGwd,OAAOniB,KAAMkX,EAAQ/D,GAWxC,GAPA8S,EACKtC,QAAQ,YAAY,GACpBjQ,MAAM,OAASP,EAAM4P,YAAYC,MAAQlB,EAAU,MACnDpO,MAAM,MAAQP,EAAM4P,YAAYE,MAAQlB,EAAU,MAClDrO,MAAM,QAASoN,EAAQ,MAGxBmF,EAAQtC,QAAQ,oBAAqB,CACrC,IAAI,EAAQ,EACZjE,EAAG0G,UAAU,wCAA2CH,EAAQ1K,KAAK,MAAQ,MAAO8K,MAAK,WAEzE3G,EAAGC,OADD3f,MAIT2jB,QAAQ,YAAY,GACpBjQ,MAAM,OAASP,EAAM4P,YAAYC,MAAQlB,EAAU,MACnDpO,MAAM,MAAQP,EAAM4P,YAAYE,MAAQlB,GAN/B/hB,KAM4C+lB,wBAAwBhF,OAAS,GAAK,EAAS,MACpGrN,MAAM,QAASoN,EAAQ,MAE5B,YAGT5gB,GAAG,OAAO,SAASiT,GAClB,IAAI8S,EAAUvG,EAAGC,OAAO3f,MACnB2jB,QAAQ,YAAY,GACpBjQ,MAAM,OAAQ,MACdA,MAAM,MAAO,MACbA,MAAM,QAAS,MAGhBuS,EAAQtC,QAAQ,qBAChBjE,EAAG0G,UAAU,wCAA2CH,EAAQ1K,KAAK,MAAQ,MAAO8K,MAAK,WACzE3G,EAAGC,OAAO3f,MAGjB2jB,QAAQ,YAAY,GACpBjQ,MAAM,OAAQ,MACdA,MAAM,MAAO,MACbA,MAAM,QAAS,SAI5B,IAAK,IAAI/O,EAAI,EAAGA,EAAIsd,EAAYjgB,SAAU2C,EACtCsd,EAAYtd,GAAG6d,OAAOxiB,KAAMmT,KAIxCmT,CAAmB5G,EAAG0G,UAAU,2DAG5B,YAAAG,oBAAR,WACI,IAGIzE,EAAgBC,EAChByE,EACAC,EALAvF,EAAqBlhB,KAMJ0f,EAAGmG,OACnB3lB,GAAG,SAAS,SAASiT,GAClB,IAAI0P,EAAqB,EAAAC,SAAS3P,EAAM4P,YAAYC,MAAO7P,EAAM4P,YAAYE,OAG7EwD,EAASvF,EAAmBb,oBAAoBc,cAAczB,EAAGC,OAAO3f,MAAMub,KAAK,iBA+BnFiL,EAAaC,EAAOC,SAEpB5E,EAAS0E,EAAW5F,EAAIiC,EAAcjC,EACtCmB,EAASyE,EAAW3F,EAAIgC,EAAchC,KAEzC3gB,GAAG,QAAQ,SAASiT,GACjBuM,EAAGC,OAAO,mBAAmBrf,SAE7B,IAAIuiB,EAAgB,EAAAC,SAAS3P,EAAM4P,YAAYC,MAAO7P,EAAM4P,YAAYE,QAExEwD,EAASvF,EAAmBb,oBAAoBc,cAAczB,EAAGC,OAAO3f,MAAMub,KAAK,kBAE5EoL,OAAO9D,EAAcjC,EAAIkB,EAAQe,EAAchC,EAAIkB,GAAQ,MACnE7hB,GAAG,OAAO,SAASiT,GAClBsT,EAAOE,OAAOH,EAAW5F,EAAG4F,EAAW3F,GAAG,KAoDlD+F,CAAelH,EAAG0G,UAAU,mIAGzB,YAAAtC,wBAAP,SAA+B9V,GAC3B,IAAK,IAAIrJ,EAAI,EAAGA,EAAI3E,KAAKyd,eAAezb,SAAU2C,EAAG,CACjD,IAAImb,EAAqB9f,KAAKyd,eAAe9Y,GAE7C,GAAImb,EAAI9R,OAASA,EACb,OAAO8R,IAKZ,YAAA+G,oBAAP,SAA2B7Y,GACvB,IAAK,IAAIrJ,EAAI,EAAGA,EAAI3E,KAAKuW,YAAYvU,SAAU2C,EAAG,CAC9C,IAAImiB,EAAoB9mB,KAAKuW,YAAY5R,GAEzC,GAAImiB,EAAG9Y,OAASA,EACZ,OAAO8Y,IAKZ,YAAAC,uBAAP,SAA8B/Y,GAC1B,IAAK,IAAIrJ,EAAI,EAAGA,EAAI3E,KAAKgnB,cAAchlB,SAAU2C,EAAG,CAChD,IAAIoS,EAAoB/W,KAAKgnB,cAAcriB,GAE3C,GAAIoS,EAAI/I,OAASA,EACb,OAAO+I,IAKX,YAAA0L,SAAR,SAAiBwE,EAAuBC,EAAiCC,GAAzE,WACInnB,KAAKkS,iBAAiBkV,oBAAoBH,EAAeC,EAAyBC,GAAwBtS,MAAK,SAACiS,GAI5G,IAHA,IAAIhH,EAAM,EAAKgE,wBAAwBqD,GAEnCE,EAAQ,KACH1iB,EAAI,EAAGA,EAAImb,EAAIwH,mBAAmBtlB,SAAU2C,EACjD,GAAImb,EAAIwH,mBAAmB3iB,KAAOsiB,EAAe,CAC7CI,EAAQ1iB,EACR,MAIK,MAAT0iB,GACAvH,EAAIwH,mBAAmBvkB,KAAKkkB,GAGhC,EAAKM,wBAAwBT,MAC9B1R,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIX,YAAAsQ,mBAAR,SAA2BsB,EAAuBC,EAAiCM,EAAiCC,GAApH,WACIznB,KAAKkS,iBAAiByT,mBAAmBsB,EAAeC,EAAyBM,EAAyBC,GAA2B5S,MAAK,SAACiS,GACvI,EAAKS,wBAAwBT,MAC9B1R,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA5C,gBAAA,aAIA,YAAAiV,KAAA,WACI,OAAO1nB,KAAKmU,YAAYuT,QAG5B,YAAA9H,iBAAA,SAAiB5K,EAAiB2S,GAC9B,YAD8B,IAAAA,OAAA,GACvB3nB,KAAKie,OAASje,KAAKmU,YAAYyL,iBAAiB5K,IAG3D,YAAA4S,cAAA,SAAc7Q,GAGV,IAFA,IAAI8Q,EAA4B,GAEvBljB,EAAI,EAAGA,EAAI3E,KAAKyd,eAAezb,SAAU2C,EAAG,CACjD,IAAImP,EAA+B9T,KAAKyd,eAAe9Y,GAEnDmP,EAAc+L,mBAAqB9I,EAAI/I,MACvC6Z,EAAS9kB,KAAK+Q,GAItB,OAAO+T,GAGX,YAAAC,oBAAA,SAAoB/Q,GAGhB,IAFA,IAAIgR,EAAkC,GAE7BpjB,EAAI,EAAGA,EAAI3E,KAAKuW,YAAYvU,SAAU2C,EAAG,CAC9C,IAAI8c,EAA2BzhB,KAAKuW,YAAY5R,GAE5C8c,EAAU5B,mBAAqB9I,EAAI/I,MACnC+Z,EAAehlB,KAAK0e,GAI5B,OAAOsG,GAGJ,YAAAlJ,WAAP,SAAkBmJ,GAAlB,WAEIhoB,KAAKyd,eAAiB,GAEtBzd,KAAKqd,gBAAgBvG,OAAOjC,MAAK,SAAA4C,GAC7B,EAAK2F,gBAAgB6K,WAAWxQ,EAASyQ,SAEzC,EAAKC,kBAAkB1Q,EAAS3C,OAEhC,EAAKkS,cAAgBvP,EAASuP,cAE9B,EAAKA,cAAcnhB,SAAQ,SAAAkR,GACnB,EAAK6I,iBAAiB7I,EAAI/I,QAC1B,EAAKsP,iBAAmBvG,EAAI/I,SAIpC,IAAIoa,EAAM,EAAKC,yBAAyB,QACpCD,GACA,EAAK3K,eAAe3a,OAAOslB,EAAK,GAGpC,EAAKE,eAAe7Q,EAASlB,aAE7B,EAAKgS,eAAeP,GAEpB,EAAKQ,8BACNpT,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIZ,YAAA8S,kBAAP,SAAyBrT,GAAzB,WAEI9U,KAAKyoB,iBAAiB3T,GAGtBA,EAAMjP,SAAQ,SAAAxE,GACLA,EAAK+f,YACD/f,EAAK6T,eACN,EAAKuI,eAAe1a,KAAK1B,MAMrCrB,KAAKyd,eAAeza,MAAK,SAACC,EAAGC,GACzB,OAAID,EAAEoQ,MAAMqV,eAAeC,cAAgBzlB,EAAEmQ,MAAMqV,eAAeC,eAAuB,EAChF1lB,EAAEoQ,MAAMqV,eAAeC,cAAgBzlB,EAAEmQ,MAAMqV,eAAeC,cAAsB,EACjF,KAIhB7T,EAAMjP,SAAQ,SAAAxE,GACV,IAAKA,EAAK+f,YACF/f,EAAK6T,eAAiB7T,EAAK6T,cAAclT,OAAS,EAClD,IAAK,IAAI2C,EAAI,EAAGA,EAAI,EAAK8Y,eAAezb,OAAQ2C,IAAK,CACjD,IAAIikB,EAAU,EAAKnL,eAAe9Y,GAC9BtD,EAAK6T,gBAAkB0T,EAAQ5a,MAC/B,EAAKyP,eAAe3a,OAAO6B,EAAI,EAAG,EAAGtD,QAQrD,YAAAonB,iBAAR,SAAyB3T,GAAzB,WACIA,EAAMjP,SAAQ,SAAAxE,GACNA,EAAK+f,YACL,EAAK3D,eAAe1a,KAAK1B,OAK9B,YAAAmnB,yBAAP,sBACIxoB,KAAK0d,iBAAmB,GACxB1d,KAAK2d,WAAa,GAElB,IAAK,IAAIhZ,EAAI,EAAGA,EAAI3E,KAAKgnB,cAAchlB,SAAU2C,EAAG,CAChD,IAAIoS,EAAoB/W,KAAKgnB,cAAcriB,GAE3C3E,KAAK0d,iBAAiB3a,KAAK,CAAEgU,IAAKA,EAAKR,YAAavW,KAAK8nB,oBAAoB/Q,KAC7E/W,KAAK2d,WAAW5a,KAAK,CAAEgU,IAAKA,EAAKjC,MAAO9U,KAAK4nB,cAAc7Q,KAG/D/W,KAAKyd,eAAe5X,SAAQ,SAACia,GACzBA,EAAIC,QAAU,EAAKW,iBAAiBZ,GACpCA,EAAIwH,mBAAqB,EAAKhG,4BAA4BxB,MAG9D9f,KAAKqf,kBAGF,YAAAwJ,4BAAP,SAAmCpH,GAC/B,OAAwE,IAAhEzhB,KAAK8d,8BAA8B1K,QAAQqO,EAAUzT,OAG1D,YAAA8a,4BAAP,SAAmChV,GAC/B,OAA4E,IAApE9T,KAAK+d,8BAA8B3K,QAAQU,EAAc9F,OAG7D,YAAAua,eAAR,SAAuBP,GACnB,IAAIX,GAAS,EAQb,GANwB,MAApBW,EACAX,EAAQrnB,KAAKuW,YAAY3T,WAAU,SAAAmmB,GAAK,OAAAA,EAAE/a,OAASga,EAAiBha,QAC7DhO,KAAKuW,YAAYvU,OAAS,IACjCqlB,EAAQ,GAGRA,GAAS,EAAG,CACZ,IAAM5F,EAAYzhB,KAAKuW,YAAY8Q,GAEnCrnB,KAAKgpB,oBAAoBvH,GAEzBzhB,KAAKwf,eAIL,YAAAyJ,aAAR,SAAqBC,GACjB,IAAIhS,EAAwB,KAO5B,OANAlX,KAAKuW,YAAY1Q,SAAQ,SAAA4b,GACjByH,IAAgBzH,EAAUzT,OAC1BkJ,EAASuK,MAIVvK,GAGH,YAAAoR,eAAR,SAAuBrjB,GAAvB,WACQsR,EAA+B,GACnCtR,EAAKY,SAAQ,SAAC2b,EAAe6F,GACrB7F,EAAc/B,mBAAmBzd,OAAS,GAC1Cwf,EAAc/B,mBAAmB5Z,SAAQ,SAAAsjB,GACrC,EAAKC,sBAAsBD,MAInC5S,EAAYxT,KAAKye,MAGrBxhB,KAAKuW,YAAcA,EAEnBvW,KAAKuW,YAAYvT,MAAK,SAACC,EAAGC,GACtB,OAAID,EAAEoQ,MAAMqV,eAAeC,cAAgBzlB,EAAEmQ,MAAMqV,eAAeC,eAAuB,EAChF1lB,EAAEoQ,MAAMqV,eAAeC,cAAgBzlB,EAAEmQ,MAAMqV,eAAeC,cAAsB,EACjF,MAIZ,YAAAS,sBAAR,SAA8B5K,GAA9B,WACgB,MAARA,IACAA,EAAKnL,MAAQrT,KAAKqpB,kBAAkB7K,EAAK1K,eAEzC0K,EAAK9C,SAAS7V,SAAQ,SAAAwb,GAClB,EAAK+H,sBAAsB/H,QAK/B,YAAAgI,kBAAR,SAA0BC,GACtB,IAAIjW,EAAgB,KAOpB,OANArT,KAAKyd,eAAe5X,SAAQ,SAAS0jB,GAC7BA,EAAIvb,OAASsb,IACbjW,EAAQkW,EAAIlW,MAAMqV,mBAInBrV,GAGJ,YAAAuL,aAAP,SAAoBJ,EAAWC,GACvBze,KAAK4f,iBAAiB5f,KAAKud,iBAAiBsC,mBAC5C7f,KAAKmd,mBAAmBqM,KAAKvX,KAAK,CAC9B0M,YAAsC,OAAxBH,EAAKvZ,KAAKwkB,UAAqBzpB,KAAK0pB,kBAAoB1pB,KAAK2pB,kBAC3ExW,MAAOsL,EACPmL,KAAMpL,IAEVC,EAAOoL,iBACPpL,EAAOqL,oBAEPrL,EAAOoL,iBACPpL,EAAOqL,oBAIR,YAAApL,gBAAP,SAAuBF,EAAWC,GAC9BD,EAAKuL,UAAUC,eAAexL,GAE1BA,EAAKuL,UAAUE,WAAWzL,GAC1BA,EAAK0L,WAEL1L,EAAKuL,UAAUI,aAIhB,YAAAC,iBAAP,SAAwBjX,EAAYyW,GAChC5pB,KAAKgpB,oBAAoBY,GACzB5pB,KAAKwf,cAGF,YAAA6K,gBAAP,sBACIrqB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAApgB,kCAAmC,CACxEkhB,UAAU,EACVC,UAAU,EACVC,qBAAqB,EAErB,MAAS,iBAGwBxqB,KAAKkU,WAAWuW,QAASC,uBAAuB5Q,WAAU,SAAA7U,GAC3F,EAAKsR,YAAYxT,KAAKkC,GAEtB,EAAKsR,YAAYvT,MAAK,SAACC,EAAkBC,GACrC,IAAIynB,EAAQ1nB,EAAEoQ,MAAMqV,eAAekC,cAC/BC,EAAQ3nB,EAAEmQ,MAAMqV,eAAekC,cAEnC,OAAID,EAAQE,GACA,EAGRF,EAAQE,EACD,EAGJ,KAGX,EAAKrC,+BAIN,YAAAsC,oBAAP,SAA2BC,GAA3B,WACI/qB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,+BAAiC,KAAOwL,EAAI1X,MAAMqV,eAAiB,IACjI1oB,KAAKkU,WAAWuW,QAAQxlB,KAAO8lB,EAAI/c,KACnChO,KAAKkU,WAAWuW,QAAQppB,KAAO,SAC/BrB,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,uBAExCvf,KAAKkU,WAAWuW,QAASS,UAAUpR,WAAU,SAAA7U,GAClE,EAAKkmB,oBAAoBlmB,OAI1B,YAAAmmB,kBAAP,SAAyBL,EAAoBhrB,GAA7C,WACIC,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAApgB,kCAAmC,CACxEkhB,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrBa,MAAO,iBAEXrrB,KAAKkU,WAAWuW,QAAQjW,MAAO,EAC/BxU,KAAKkU,WAAWuW,QAAQ1qB,SAAWA,EACnCC,KAAKkU,WAAWuW,QAAQjJ,cAAgBuJ,EACxC/qB,KAAKkU,WAAWuW,QAAQC,uBAAuB5Q,WAAU,SAAA7U,GACrD,IAAImjB,EAAM,EAAKkD,yBAAyBrmB,EAAK+I,MAE7C,EAAKuI,YAAY6R,GAAK/U,MAAQpO,EAAKoO,MACnC,EAAKkD,YAAY6R,GAAKmD,YAActmB,EAAKsmB,YACzC,EAAKhV,YAAY6R,GAAKtS,SAAW7Q,EAAK6Q,SACtC,EAAKS,YAAY6R,GAAKoD,gBAAkBvmB,EAAKumB,gBAC7C,EAAKjV,YAAY6R,GAAKlS,WAAajR,EAAKiR,WACxC,EAAKK,YAAY6R,GAAKpS,eAAiB/Q,EAAK+Q,eAC5C,EAAKO,YAAY6R,GAAKrS,kBAAoB9Q,EAAK8Q,kBAC/C,EAAKQ,YAAY6R,GAAKqD,QAAUxmB,EAAKwmB,QACrC,EAAKlV,YAAY6R,GAAKsD,YAAczmB,EAAKymB,YACzC,EAAKnV,YAAY6R,GAAK9R,MAAQrR,EAAKqR,MAEnC,EAAKkS,2BAED,EAAKjL,iBAAiBvP,OAAS/I,EAAK+I,OACpC,EAAKgb,oBAAoB,EAAKzS,YAAY6R,IAE1C,EAAK5I,kBAKjB,YAAAwJ,oBAAA,SAAoBxH,GAChBxhB,KAAKud,iBAAmBiE,GAG5B,YAAAmK,mBAAA,SAAmBlK,GAEf,OAAOA,EAAUzT,OAAShO,KAAKud,iBAAiBvP,MAG7C,YAAAmd,oBAAP,SAA2Bnd,GAA3B,WACIhO,KAAKkS,iBAAiB4Y,oBAAoB9c,GAAM6G,MAAK,SAAA4C,GACjD,IAAI2Q,EAAM,EAAKkD,yBAAyBtd,GACxC,EAAKuI,YAAYzT,OAAOslB,EAAK,GAC7B,EAAKI,2BAED,EAAKjS,YAAYvU,OAAS,EAC1B,EAAKgnB,oBAAoB,EAAKzS,YAAY,IAE1C,EAAKgH,iBAAmB,KAG5B,EAAKiC,gBACNpK,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIZ,YAAAuW,oBAAP,SAA2BC,EAA+BzK,EAAqBrK,GAA/E,WACI/W,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAlgB,+BAAgC,CACrEghB,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrBa,MAAO,iBAEXrrB,KAAKkU,WAAWuW,QAAQ3T,KAAKC,EAAK/W,KAAKyd,eAAgBoO,EAAgBzK,GAEvEphB,KAAKkU,WAAWuW,QAAQqB,mBAAmBhS,WAAU,SAAA7U,GACjDA,EAAKqiB,mBAAqB,EAAKhG,4BAA4Brc,GAE3D,EAAK4Z,WAAW,EAAKtB,sBAItB,YAAAwO,oBAAP,SAA2BhB,GAA3B,WACI/qB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,+BAAiC,KAAOwL,EAAI1X,MAAMqV,eAAiB,IACjI1oB,KAAKkU,WAAWuW,QAAQxlB,KAAO8lB,EAAI/c,KACnChO,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,uBACjEvf,KAAKkU,WAAWuW,QAAQppB,KAAO,EAAA2qB,WAAWC,OAEjBjsB,KAAKkU,WAAWuW,QAASS,UAAUpR,WAAU,SAAA7U,GAClE,EAAKinB,oBAAoBjnB,OAI1B,YAAAinB,oBAAP,SAA2Ble,EAAcme,GAAzC,gBAAyC,IAAAA,MAAA,MACrCnsB,KAAKqd,gBAAgB0O,oBAAoB/d,GAAM6G,MAAK,SAAA4C,GAChD,IAAI2Q,EAAM,EAAKC,yBAAyBra,GACxC,EAAKyP,eAAe3a,OAAOslB,EAAK,GAEhC,EAAKvJ,WAAW,EAAKtB,qBACtBnI,OAAM,SAACC,GACa,MAAf8W,GACAA,EAAY9W,GAEhB,EAAKC,MAAMD,OAIZ,YAAA+W,oBAAP,SAA2BtY,EAA8B/T,GAAzD,WACIC,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAjf,kCAAmC,CACxE+f,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrBa,MAAO,+BAGXvX,EAAcwF,WAAWtW,MAAK,SAACC,EAAGC,GAC9B,OAAID,EAAEoQ,MAAMqV,eAAiBxlB,EAAEmQ,MAAMqV,gBAAwB,EACpDzlB,EAAEoQ,MAAMqV,eAAiBxlB,EAAEmQ,MAAMqV,eAAuB,EACrD,KAEhB1oB,KAAKkU,WAAWuW,QAAQ3W,cAAgBA,EACxC9T,KAAKkU,WAAWuW,QAAQ1qB,SAAWA,EAECC,KAAKkU,WAAWuW,QAAS4B,yBAAyBvS,WAAU,SAAA7U,GAC5F,GAAIA,EAAKmc,WACL,EAAKvC,WAAW,EAAKtB,sBAClB,CACH,IAAM+O,EAAW,EAAKjE,yBAAyBpjB,EAAK+I,OAElC,IAAdse,IACA,EAAK7O,eAAe6O,GAAYrnB,GAIpC,EAAKujB,2BAEL,EAAKjS,YAAY1Q,SAAQ,SAAC2b,GACtB,EAAK4H,sBAAsB5H,EAAc/B,mBAAmB,OAInC,MAAzB,EAAKlC,kBACL,EAAK6L,sBAAsB,EAAK7L,iBAAiBkC,mBAAmB,IAGxE,EAAKD,kBAKT,YAAA8L,yBAAR,SAAiCtd,GAC7B,IAAK,IAAIrJ,EAAI,EAAGA,EAAI3E,KAAKuW,YAAYvU,OAAQ2C,IAAK,CAE9C,GADU3E,KAAKuW,YAAY5R,GACnBqJ,OAASA,EACb,OAAOrJ,IAKX,YAAA0jB,yBAAR,SAAiCra,GAC7B,IAAK,IAAIrJ,EAAI,EAAGA,EAAI3E,KAAKyd,eAAezb,OAAQ2C,IAAK,CAEjD,GADU3E,KAAKyd,eAAe9Y,GACtBqJ,OAASA,EACb,OAAOrJ,EAIf,OAAO,MAGJ,YAAA4iB,wBAAP,SAA+B/F,GAC3BxhB,KAAKopB,sBAAsB5H,EAAc/B,mBAAmB,IAE5D,IAAK,IAAI9a,EAAI,EAAGA,EAAI3E,KAAKuW,YAAYvU,SAAU2C,EAAG,CAC9B3E,KAAKuW,YAAY5R,GAEnBqJ,OAASwT,EAAcxT,OACjChO,KAAKuW,YAAY5R,GAAK6c,EAEtBxhB,KAAKgpB,oBAAoBxH,IAIjCxhB,KAAKwoB,2BAELxoB,KAAKwf,cAGF,YAAA+M,oBAAP,SAA2BC,EAAeC,EAASN,GAAnD,gBAAmD,IAAAA,MAAA,MAC/C,IAAMnK,EAAOhiB,KAEbA,KAAKkS,iBAAiBqa,oBAAoBvsB,KAAKud,iBAAiBvP,KAAMwe,EAAeC,GAAS5X,MAAK,SAAA2M,GAI/F,IAHA,IAAI1B,EAAMkC,EAAK8B,wBAAwB2I,GAEnCpF,EAAQ,KACH1iB,EAAI,EAAGA,EAAImb,EAAIwH,mBAAmBtlB,SAAU2C,EACjD,GAAImb,EAAIwH,mBAAmB3iB,KAAO6c,EAAcxT,KAAM,CAClDqZ,EAAQ1iB,EACR,MAIK,MAAT0iB,GACAvH,EAAIwH,mBAAmBxkB,OAAOukB,EAAO,GAGzCrF,EAAKuF,wBAAwB/F,MAC9BpM,OAAM,SAACC,GACa,MAAf8W,GACAA,EAAY9W,GAGhB,EAAKC,MAAMD,OAIZ,YAAAqX,SAAP,SAAgB9C,GACZ,OAAO5pB,KAAKud,mBAAqBqM,GAGrC,YAAAvK,eAAA,sBACUhM,EAAQrT,KAAKsD,OAAOqlB,cAE1B3oB,KAAK4d,yBAA2B,GAChC5d,KAAK6d,mBAAqB,GAE1B7d,KAAK0d,iBAAiB7X,SAAQ,SAAC+jB,GAC3B,IAAM+C,EAAW/C,EAAKrT,YAAYjT,QAAO,SAACme,GAGtC,OAAmB,IAFLA,EAAUpO,MAAMqV,eAAeC,cAAcvV,QAAQC,MAKvE,EAAKuK,yBAAyB7a,KAAK,CAAEgU,IAAK6S,EAAK7S,IAAKR,YAAaoW,OAGrE3sB,KAAK2d,WAAW9X,SAAQ,SAAC+jB,GACrB,IAAM+C,EAAW/C,EAAK9U,MAAMxR,QAAO,SAACjC,GAGhC,OAAmB,IAFLA,EAAKgS,MAAMqV,eAAeC,cAAcvV,QAAQC,MAKlE,EAAKwK,mBAAmB9a,KAAK,CAAEgU,IAAK6S,EAAK7S,IAAKjC,MAAO6X,OAGzDC,YAAW,WAAQ,EAAK/K,yBAA2B,MAGvD,YAAAgL,uBAAA,SAAuBC,EAA2BC,EAAoCzD,GAAtF,WACItpB,KAAKkS,iBAAiB8a,sBAAsBF,EAAmBC,EAA4BzD,GAAmBzU,MAAK,SAACiS,GAChH,EAAKS,wBAAwBT,MAC9B1R,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA4X,yBAAA,SAAyBH,EAA2BxD,GAApD,WACItpB,KAAKkS,iBAAiBgb,yBAAyBJ,EAAmBxD,GAAmBzU,MAAK,SAACiS,GACvF,EAAKS,wBAAwBT,MAC9B1R,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIZ,YAAAC,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCAzyCtDjU,GAAkB,+O,iCAAlBA,EAAkB,oD,GAAA,M,6nHCtD/B,4BACC,4BAEA,6BAEA,4BAGC,4BAEC,4BAEC,4BACC,4BACC,gCAC0D,+D,wBAD1D,iBAED,iBACD,iBACA,mCACC,yCACC,8BACC,4BACC,uBACD,iBACA,8BACD,iBACA,8BACC,+BAqDD,iBACD,iBACA,0CACC,8BACC,4BACC,uBACD,iBACA,8BACD,iBACA,8BACC,+BAsCD,iBACD,iBACD,iBACD,iBAEA,8BACC,8BAEC,gCAiBA,yBAGA,8BACS,8BACE,8BACE,8BACE,8BACG,6BACE,8BACF,iBACF,iBACA,8BACE,2BACF,iBACH,iBACA,8BACE,8BACG,6BACE,8BACF,iBACF,iBACA,8BACE,2BACF,iBACH,iBACA,8BACE,8BACE,6BACE,8BACF,iBACF,iBACA,8BACE,2BACF,iBACF,iBACA,8BACE,8BACG,6BACE,8BACF,iBACF,iBACA,8BACE,2BACF,iBACH,iBACA,8BACE,8BACG,6BACE,8BACF,iBACF,iBACA,8BACE,2BACF,iBACH,iBACF,iBACF,iBACF,iBAmBR,iBACD,iBACD,iBACD,iBAED,kB,MA5NO,8FAAwD,oBAGhD,6CAAmB,kBACZ,sEAQW,4DAuDX,yCAAe,0CAQC,kEA8C3B,+J,isIDxFX,GAMa,EAAAA,sB,+DAAAA,EAAkB,E,KAN9B,EAAAkG,U,MAAU,CAEPC,SAAU,cACVC,YAAa,6BACbC,UAAW,CAAC,wB,+KAoBgCyP,YAAa,CAAF,C,KAAtD,EAAAtC,U,MAAU,cAAe,CAAE2Q,QAAQ,MAeN1D,kBAAmB,CAAF,C,KAA9C,EAAAjN,U,MAAU,cAKmBkN,kBAAmB,CAAF,C,KAA9C,EAAAlN,U,MAAU,iB,4GEzEf,WACA,QAEA,Q,GAIA,M,sBAIA,aAII,WAAoBjN,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAA4d,kBAAA,SAAkBvY,GACd,IAAIhE,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAO1P,IAAI,QAAS6O,KAAKC,UAAU4E,IAErC9U,KAAKwP,KACPyB,IAAqBjB,IAAM,6BAA8B,CAAEc,OAAQA,IACnER,aAGT,YAAAgd,yBAAA,WACI,IAAIxc,EAAqB,IAAI,EAAAC,WAE7B,OAAO/Q,KAAKwP,KACPyB,IAAgCjB,IAAM,0BAA2B,CAAEc,OAAQA,IAC3ER,aAGT,YAAA8W,oBAAA,SAAoBH,EAAuBC,EAAiCC,GAA5E,WACQvX,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,yBAA0BC,KAAKC,UAAU,CAAE+W,cAAeA,EAAeC,wBAAyBA,EAAyBC,uBAAwBA,IAA2B,CAAEvX,QAASA,IACnNO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAqV,mBAAA,SAAmBsB,EAAuBC,EAAiCM,EAAiCC,GAA5G,WACQ7X,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,gCAAiCC,KAAKC,UAAU,CAAE+W,cAAeA,EAAeC,wBAAyBA,EAAyBM,wBAAyBA,EAAyBC,0BAA2BA,IAA8B,CAAE7X,QAASA,IAClRO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAic,oBAAA,SAAoBtF,EAAuBC,EAAiCC,GAA5E,WACQvX,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,4BAA6BC,KAAKC,UAAU,CAAE+W,cAAeA,EAAeC,wBAAyBA,EAAyBC,uBAAwBA,IAA2B,CAAEvX,QAASA,IACtNO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAid,oBAAA,SAAoBC,GAApB,WACQ5d,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,4BAA6BC,KAAKC,UAAU,CAAEsd,OAAQA,IAAW,CAAE5d,QAASA,IACtGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAmd,oBAAA,SAAoBD,GAApB,WACQ5d,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,4BAA6BC,KAAKC,UAAU,CAAEsd,OAAQA,IAAW,CAAE5d,QAASA,IACtGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAwa,oBAAA,SAAoB9c,GAApB,WACQ4B,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAiBC,IAAM,4BAA6B,CAAEhC,KAAMA,GAAQ,CAAE4B,QAASA,IAC/EO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA0c,sBAAA,SAAsBF,EAA2BC,EAAoCzD,GAArF,WACQ1Z,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,0BAA2BC,KAAKC,UAAU,CAAE4c,kBAAmBA,EAAmBC,2BAA4BA,EAA4BzD,kBAAmBA,IAAsB,CAAE1Z,QAASA,IACxNO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA4c,yBAAA,SAAyBJ,EAA2BxD,GAApD,WACQ1Z,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,6BAA8BC,KAAKC,UAAU,CAAE4c,kBAAmBA,EAAmBxD,kBAAmBA,IAAsB,CAAE1Z,QAASA,IACnKO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,a,iCA3IAlJ,GAAgB,sD,oCAAhBA,EAAgB,QAAhBA,EAAgB,O,EAD7B,GACa,EAAAA,oB,+DAAAA,EAAgB,E,KAD5B,EAAAJ,c,2KC9BD,WACA,QACA,Q,GAGA,M,sBAIA,aAGI,WAAoBwI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAie,kBAAA,SAAkBC,GAAlB,WACQ/d,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAA0BC,IAAM,cAAeC,KAAKC,UAAU,CAAE0d,KAAMD,IAAkB,CAAE/d,QAASA,IACnGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAud,aAAA,SAAaF,GAAb,WACQ/d,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,qBAAsBC,KAAKC,UAAU,CAAEyd,cAAeA,IAAkB,CAAE/d,QAASA,IACpGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAwd,gBAAA,SAAgBH,GAAhB,WACQ/d,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAA0BC,IAAM,cAAeC,KAAKC,UAAU,CAAE0d,KAAMD,IAAkB,CAAE/d,QAASA,IACnGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAsE,mBAAA,SAAmBmZ,GACf,IAAIjd,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAO1P,IAAI,uBAAwB2sB,EAAqB/c,YAE1DhR,KAAKwP,KACPyB,IAAwDjB,IAAM,gCAAiC,CAAEc,OAAQA,IACzGR,aAGT,YAAA0d,iBAAA,SAAiBhgB,EAAciZ,EAAuBgH,GAClD,IAAInd,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAO1P,IAAI,OAAQ4M,IACZ5M,IAAI,gBAAiB6lB,IACrB7lB,IAAI,wBAAyB6sB,EAAsBjd,YAE5DhR,KAAKwP,KACPyB,IAAgBjB,IAAM,mCAAoC,CAAEc,OAAQA,IACpER,aAGT,YAAA+G,sBAAA,SAAsBrJ,EAAckgB,GAApC,WACQpd,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAO1P,IAAI,OAAQ4M,IACZ5M,IAAI,eAAgB8sB,EAAald,YAEjDhR,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAAmFjB,IAAM,qCAAsC,CAAEc,OAAQA,IACzIX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAgH,0BAAA,SAA0BtJ,EAAckgB,GAAxC,WACQpd,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAO1P,IAAI,OAAQ4M,IACZ5M,IAAI,eAAgB8sB,EAAald,YAEjDhR,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAAmFjB,IAAM,6CAA8C,CAAEc,OAAQA,IACjJX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA6d,wBAAA,SAAwBvJ,EAAcvjB,EAAciiB,EAAgB7B,GAChE,IAAI7R,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CACT8T,KAAMA,EACNvjB,KAAMA,GAQV,OALc,MAAViiB,GAA+B,MAAb7B,IAClB3Q,EAAOwS,OAASA,EAChBxS,EAAO2Q,UAAY6B,GAGhBtjB,KAAKwP,KACPO,KAAUC,IAAM,6BAA8BC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACjFU,aAGT,YAAA8d,uBAAA,SAAuBC,EAAkBhb,GAAzC,WACQzD,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAcC,IAAM,sCAAuCC,KAAKC,UAAU,CAAEme,SAAUA,EAAUhb,MAAOA,IAAU,CAAEzD,QAASA,IAC5HO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAge,uBAAA,SAAuBC,EAAmBC,GAA1C,WACQ5e,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,sCAAuCC,KAAKC,UAAU,CAAEqe,UAAWA,EAAWC,KAAMA,IAAS,CAAE5e,QAASA,IACzHO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAme,mBAAA,SAAmBC,EAAuB9J,EAAc+J,GACpD,IAAI7d,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAO1P,IAAI,gBAAiBstB,IACrBttB,IAAI,OAAQwjB,IACZxjB,IAAI,QAASutB,GAEtB3uB,KAAKwP,KACPyB,IAAmCjB,IAAM,qCAAsC,CAAEc,OAAQA,IACzFR,aAGT,YAAAse,kBAAA,SAAkBC,EAAsBxb,GACpC,IAAIzD,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhB5K,EAAOgL,KAAKC,UAAU,CAAE2e,aAAcA,EAAcxb,MAAOA,IAE/D,OAAOrT,KAAKwP,KACPO,KAAcC,IAAM,oCAAqC/K,EAAM,CAAE2K,QAASA,IAC1EU,aAGT,YAAAwe,kBAAA,SAAkBP,GACd,IAAI3e,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhB5K,EAAOgL,KAAKC,UAAU,CAAEqe,UAAWA,IAEvC,OAAOvuB,KAAKwP,KACPO,KAAWC,IAAM,oCAAqC/K,EAAM,CAAE2K,QAASA,IACvEU,aAGT,YAAAye,WAAA,SAAW1b,EAAerF,EAAcghB,GACpC,IAAIpf,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CAAEke,eAAgBA,EAAgBC,SAAU,CAAE5b,MAAOA,EAAOrF,KAAMA,IAE/E,OAAOhO,KAAKwP,KACPO,KAAWC,IAAM,6BAA8BC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IAClFU,aAGT,YAAA4e,WAAA,SAAWF,EAAwBG,GAC/B,IAAIvf,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGpB,OAAO7P,KAAKwP,KACPO,KAAWC,IAAM,gCAAiCC,KAAKC,UAAU,CAAE8e,eAAgBA,EAAgBG,SAAUA,IAAa,CAAEvf,QAASA,IACrIU,a,iCA3MA/I,GAAS,sD,oCAATA,EAAS,QAATA,EAAS,O,EADtB,GACa,EAAAA,a,+DAAAA,EAAS,E,KADrB,EAAAP,c,4LCUD,WACA,Q,GAGA,M,sBAMA,aAII,WAAoBwI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAA2f,iBAAA,WACI,OAAOpvB,KAAKwP,KACPyB,IAAmBjB,IAAM,yCACzBM,aAGT,YAAA+e,cAAA,SAAcC,EAAkBC,EAAiBC,GAC7C,IAAI1e,EAAqB,IAAI,EAAAC,WAc7B,OAZgB,MAAZue,IACAxe,EAASA,EAAO1P,IAAI,WAAYkuB,IAGrB,MAAXC,IACAze,EAASA,EAAO1P,IAAI,UAAWmuB,IAGpB,MAAXC,IACA1e,EAASA,EAAO1P,IAAI,UAAWouB,IAG5BxvB,KAAKwP,KACPyB,IAAUjB,IAAM,8BAA+B,CAAEc,OAAQA,IACzDR,a,iCA5BAjJ,GAA0B,sD,oCAA1BA,EAA0B,QAA1BA,EAA0B,O,EADvC,GACa,EAAAA,8B,+DAAAA,EAA0B,E,KADtC,EAAAL,c,4KC7BD,WACA,QACA,QACA,S,GAGA,M,sBAKA,aAGI,WAAoBwI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,eACzCggB,EAAiBC,YAAc,gG,OAGpC,YAAAC,MAAA,SAAM1a,EAAkBgS,EAAuBnP,GAA/C,WACQhH,EAAqB,IAAI,EAAAC,WAgB7B,OAdgB,MAAZkE,IACAnE,EAASA,EAAO1P,IAAI,WAAY6T,IAGf,MAAjBgS,IACAnW,EAASA,EAAO1P,IAAI,gBAAiB6lB,IAG7B,MAARnP,IACAhH,EAASA,EAAO1P,IAAI,OAAQ0W,IAGhC9X,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAAyBjB,IAAM,0BAA2B,CAAEc,OAAQA,IACpEX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAsf,OAAA,SAAOhL,EAAc9M,GAArB,WACQhH,EAAqB,IAAI,EAAAC,WAS7B,OARAD,EAASA,EAAO1P,IAAI,OAAQwjB,GAEhB,MAAR9M,IACAhH,EAASA,EAAO1P,IAAI,OAAQ0W,IAGhC9X,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAA6CjB,IAAM,2BAA4B,CAAEc,OAAQA,IACzFX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,a,iCA9CAnJ,GAAU,sD,oCAAVA,EAAU,QAAVA,EAAU,O,EADvB,GACa,EAAAA,c,+DAAAA,EAAU,E,KADtB,EAAAH,c,iLCQD,WACA,QAGA,Q,GAYA,M,sBAIA,aAII,WAAoBwI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAqH,KAAA,WACI,OAAO9W,KAAKwP,KAAKyB,IAAoHjB,IAAM,aACtIM,aAIT,YAAAuf,kBAAA,SAAkB/a,EAAiByB,GAC/B,IAAIzF,EAAqB,IAAI,EAAAC,WAU7B,OARa,MAAT+D,IACAhE,EAASA,EAAO1P,IAAI,QAAS6O,KAAKC,UAAU4E,KAG7B,MAAfyB,IACAzF,EAASA,EAAO1P,IAAI,cAAe6O,KAAKC,UAAUqG,KAG/CvW,KAAKwP,KACPyB,IAAqBjB,IAAM,6BAA8B,CAAEc,OAAQA,IACnER,aAGT,YAAAwf,oBAAA,SAAoBC,EAAiBC,EAAuBC,EAAkBC,EAAoBpY,GAC9F,IAAIhH,EAAqB,IAAI,EAAAC,WAW7B,OANAD,GADAA,GADAA,GADAA,EAASA,EAAO1P,IAAI,UAAW2uB,IACf3uB,IAAI,gBAAiB4uB,IACrB5uB,IAAI,cAAe6O,KAAKC,UAAU+f,KAClC7uB,IAAI,YAAa6O,KAAKC,UAAUggB,IAEpC,MAARpY,IACAhH,EAASA,EAAO1P,IAAI,OAAQ0W,IAGzB9X,KAAKwP,KACPyB,IAAoBjB,IAAM,uCAAwC,CAAEc,OAAQA,IAC5ER,aAGT,YAAA6f,mBAAA,SAAmBC,EAAkBC,EAAwBC,EAAoBJ,GAC7E,IAAIpf,EAAqB,IAAI,EAAAC,WAO7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAO1P,IAAI,WAAYgvB,IAChBhvB,IAAI,iBAAkBivB,IACtBjvB,IAAI,gBAAiB6O,KAAKC,UAAUogB,KACpClvB,IAAI,YAAa6O,KAAKC,UAAUggB,IAEzClwB,KAAKwP,KACPyB,IAAmBjB,IAAM,6BAA8B,CAAEc,OAAQA,IACjER,aAGT,YAAAigB,qBAAA,SAAqBtb,GAArB,WACQrF,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAUC,IAAM,sCAAuCC,KAAKC,UAAU,CAAE+E,SAAUA,IAAa,CAAErF,QAASA,IAC1GO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAsb,oBAAA,SAAoB4E,GAApB,WACQ5gB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,4BAA6BC,KAAKC,UAAU,CAAEsgB,OAAQA,IAAW,CAAE5gB,QAASA,IACtGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAmgB,oBAAA,SAAoBD,GAApB,WACQ5gB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,4BAA6BC,KAAKC,UAAU,CAAEsgB,OAAQA,IAAW,CAAE5gB,QAASA,IACtGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAyb,oBAAA,SAAoB/d,GAApB,WACQ4B,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,4BAA6BC,KAAKC,UAAU,CAAElC,KAAMA,IAAS,CAAE4B,QAASA,IACzFO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAogB,iBAAA,SAAiBC,EAAsB5d,GAAvC,WACQnD,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,kCAAmCC,KAAKC,UAAU,CAAEygB,aAAcA,EAAcC,cAAe7d,IAAc,CAAEnD,QAASA,IAClJO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAugB,oBAAA,SAAoBF,EAAsB5d,GAA1C,WACQnD,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,qCAAsCC,KAAKC,UAAU,CAAEygB,aAAcA,EAAcC,cAAe7d,IAAc,CAAEnD,QAASA,IACrJO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAwgB,oBAAA,SAAoBH,EAAsBhW,GAA1C,WACQ/K,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAcC,IAAM,qCAAsCC,KAAKC,UAAU,CAAEygB,aAAcA,EAAchW,cAAeA,IAAkB,CAAE/K,QAASA,IACnJO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAygB,2BAAA,SAA2B/B,EAAwBgC,GAAnD,WACQphB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,6BAA8BC,KAAKC,UAAU,CAAE8e,eAAgBA,EAAgBC,SAAU+B,IAAS,CAAEphB,QAASA,IAC9HO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA2gB,8BAAA,SAA8BjC,EAAwBC,GAAtD,WACQrf,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,gCAAiCC,KAAKC,UAAU,CAAE8e,eAAgBA,EAAgBC,SAAUA,IAAa,CAAErf,QAASA,IACrIO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA4gB,8BAAA,SAA8BlC,EAAwBG,GAAtD,WACQvf,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAoBC,IAAM,gCAAiCC,KAAKC,UAAU,CAAE8e,eAAgBA,EAAgBG,SAAUA,IAAa,CAAEvf,QAASA,IAC9IO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA+L,aAAA,SAAa9a,EAAY0T,GACrB,IAAInE,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAO1P,IAAI,KAAMG,IACVH,IAAI,WAAY6T,GAEzBjV,KAAKwP,KACPyB,IAAejB,IAAM,qBAAsB,CAAEc,OAAQA,IACrDR,aAGT,YAAA6gB,mBAAA,SAAmBnjB,EAAciH,GAC7B,IAAInE,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAO1P,IAAI,OAAQ4M,IACZ5M,IAAI,WAAY6T,GAEzBjV,KAAKwP,KACPyB,IAAcjB,IAAM,4BAA6B,CAAEc,OAAQA,IAC3DR,aAGT,YAAA8gB,yBAAA,SAAyBpjB,EAAciH,EAAkB6C,GACrD,IAAIhH,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,EAASA,EAAO1P,IAAI,OAAQ4M,IACZ5M,IAAI,WAAY6T,IAChB7T,IAAI,OAAQ0W,GAErB9X,KAAKwP,KACPyB,IAAcjB,IAAM,iCAAkC,CAAEc,OAAQA,IAChER,aAGT,YAAA+gB,mBAAA,SAAmBrjB,EAAciH,GAC7B,IAAInE,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAO1P,IAAI,OAAQ4M,IACZ5M,IAAI,WAAY6T,GAEzBjV,KAAKwP,KACPyB,IAAejB,IAAM,0BAA2B,CAAEc,OAAQA,IAC1DR,aAGT,YAAAghB,2BAAA,SAA2BtjB,EAAciH,GAAzC,WACQnE,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAO1P,IAAI,OAAQ4M,IACZ5M,IAAI,WAAY6T,GAEhCjV,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAAyBjB,IAAM,2CAA4C,CAAEc,OAAQA,IACrFX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA6d,wBAAA,SAAwBvJ,EAAcvjB,EAAciiB,EAAgB+M,EAAwB5O,EAAmB3J,GAC3G,IAAIlI,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CACT8T,KAAMA,EACNvjB,KAAMA,GAgBV,OAbc,MAAViiB,GAA+B,MAAb7B,IAClB3Q,EAAOwS,OAASA,EAChBxS,EAAO2Q,UAAYA,GAGD,MAAlB4O,IACAvf,EAAOuf,eAAiBA,GAGhB,MAARvY,IACAhH,EAAOgH,KAAOA,GAGX9X,KAAKwP,KACPO,KAAgBC,IAAM,6BAA8BC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACvFU,aAGT,YAAAihB,iCAAA,SAAiC3M,EAAcvjB,GAC3C,IAAIuO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CACT8T,KAAMA,EACNvjB,KAAMA,GAGV,OAAOrB,KAAKwP,KACPO,KAAgBC,IAAM,6BAA8BC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACvFU,aAGT,YAAAkhB,iBAAA,SAAiB5gB,EAAkBC,EAAoB4gB,EAAkBC,GACrE,IAAI5gB,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAO1P,IAAI,WAAYwP,EAASI,aACzB5P,IAAI,aAAcyP,EAAWG,aAC7B5P,IAAI,WAAYqwB,IAChBrwB,IAAI,cAAeswB,EAAY1gB,YAExChR,KAAKwP,KACPyB,IAAoBjB,IAAM,kBAAmB,CAAEc,OAAQA,IACvDR,aAGT,YAAAqhB,0BAAA,SAA0B/gB,EAAkBC,EAAoB4gB,EAAkBC,GAC9E,IAAI5gB,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAO1P,IAAI,WAAYwP,EAASI,aACzB5P,IAAI,aAAcyP,EAAWG,aAC7B5P,IAAI,WAAYqwB,IAChBrwB,IAAI,cAAeswB,EAAY1gB,YAExChR,KAAKwP,KACPyB,IAAoBjB,IAAM,qBAAsB,CAAEc,OAAQA,IAC1DR,aAGT,YAAAshB,gBAAA,SAAgBC,EAAmBjhB,EAAkBC,EAAoBihB,GACrE,IAAIhhB,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAO1P,IAAI,YAAaywB,IACjBzwB,IAAI,WAAYwP,EAASI,aACzB5P,IAAI,aAAcyP,EAAWG,aAC7B5P,IAAI,iBAAkB0wB,EAAe9gB,YAE9ChR,KAAKwP,KACPyB,IAAkBjB,IAAM,0BAA2B,CAAEc,OAAQA,IAC7DR,aAGT,YAAAyhB,iBAAA,SAAiBF,EAAmBjhB,EAAkBC,GAClD,IAAIC,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAO1P,IAAI,YAAaywB,IACjBzwB,IAAI,WAAYwP,EAASI,aACzB5P,IAAI,aAAcyP,EAAWG,YAEtChR,KAAKwP,KACPyB,IAAkBjB,IAAM,0BAA2B,CAAEc,OAAQA,IAC7DR,aAGT,YAAA0hB,oBAAA,SAAoBH,GAApB,WACQjiB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,sBAAuBC,KAAKC,UAAU,CAAE2hB,UAAWA,IAAc,CAAEjiB,QAASA,IAC7FO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA2hB,wBAAA,SAAwBC,GAAxB,WACQtiB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAiBC,IAAM,0BAA2BC,KAAKC,UAAU,CAAEgiB,OAAQA,IAAW,CAAEtiB,QAASA,IACjGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA6hB,mBAAA,SAAmBD,GAAnB,WACQtiB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAiBC,IAAM,qBAAsBC,KAAKC,UAAU,CAAEgiB,OAAQA,IAAW,CAAEtiB,QAASA,IAC5FO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA8hB,eAAA,WACI,IAAIthB,EAAqB,IAAI,EAAAC,WAE7B,OAAO/Q,KAAKwP,KACPyB,IAAgHjB,IAAM,wBAAyB,CAAEc,OAAQA,IACzJR,aAGT,YAAA+hB,qBAAA,SAAqB7wB,EAAa8wB,GAC9B,IAAIxhB,EAAqB,IAAI,EAAAC,WAI7B,OAFAD,GADAA,EAASA,EAAO1P,IAAI,MAAOI,IACXJ,IAAI,cAAekxB,GAE5BtyB,KAAKwP,KACPyB,IAAgBjB,IAAM,wBAAyB,CAAEc,OAAQA,IACzDR,aAGT,YAAAiiB,yBAAA,WACI,IAAIzhB,EAAqB,IAAI,EAAAC,WAE7B,OAAO/Q,KAAKwP,KACPyB,IAAkBjB,IAAM,iCAAkC,CAAEc,OAAQA,IACpER,aAGT,YAAAkiB,qBAAA,SAAqBhxB,GACjB,IAAIsP,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAO1P,IAAI,MAAOI,GAEpBxB,KAAKwP,KACPyB,IAAuBjB,IAAM,uBAAwB,CAAEc,OAAQA,IAC/DR,aAGT,YAAAmiB,WAAA,WACI,IAAI3hB,EAAqB,IAAI,EAAAC,WAE7B,OAAO/Q,KAAKwP,KACPyB,IAAkBjB,IAAM,4BAA6B,CAAEc,OAAQA,IAC/DR,aAGT,YAAAoiB,qBAAA,SAAqBC,EAAuBrJ,GACxC,IAAIxY,EAAqB,IAAI,EAAAC,WAI7B,OAFAD,GADAA,EAASA,EAAO1P,IAAI,OAAQuxB,IACZvxB,IAAI,WAAYkoB,GAEzBtpB,KAAKwP,KACPyB,IAAuBjB,IAAM,+BAAgC,CAAEc,OAAQA,IACvER,aAGT,YAAAsiB,qBAAA,SAAqB3d,GAArB,WACQrF,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAUC,IAAM,2CAA4CC,KAAKC,UAAU,CAAE+E,SAAUA,IAAa,CAAErF,QAASA,IAC/GO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAuiB,qBAAA,SAAqBF,EAAuBrJ,EAA2B3O,EAAuBmY,GAA9F,WACQljB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CACT6hB,cAAeA,EACfrJ,kBAAmBA,EACnB3O,cAAeA,EACfmY,WAAYA,GAMhB,OAFA9yB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAeC,IAAM,sCAAuCC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IAC/FO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAkH,iBAAA,SAAiBub,GAAjB,WACQnjB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAiBC,IAAM,sBAAuBC,KAAKC,UAAU,CAAE6iB,KAAMA,IAAS,CAAEnjB,QAASA,IACzFO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA0iB,wBAAA,SAAwBxxB,EAAakX,GAArC,WACQ9I,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAwBC,IAAM,8BAA+BC,KAAKC,UAAU,CAAE1O,IAAKA,EAAKkX,QAASA,IAAY,CAAE9I,QAASA,IACxHO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA2iB,0BAAA,SAA0BzxB,GAA1B,WACQoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAsBC,IAAM,gCAAiCC,KAAKC,UAAU,CAAE1O,IAAKA,IAAQ,CAAEoO,QAASA,IACtGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA4iB,iBAAA,SAAiB1xB,GAAjB,WACQoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,sBAAuBC,KAAKC,UAAU,CAAE1O,IAAKA,IAAQ,CAAEoO,QAASA,IACjFO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA6iB,wBAAA,SAAwB3xB,GAAxB,WACQoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,8BAA+BC,KAAKC,UAAU,CAAE1O,IAAKA,IAAQ,CAAEoO,QAASA,IACzFO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA8iB,kBAAA,SAAkB5xB,GACd,IAAIoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGpB,OAAO7P,KAAKwP,KAAKO,KAAaC,IAAM,uBAAwBC,KAAKC,UAAU,CAAE1O,IAAKA,IAAQ,CAAEoO,QAASA,KAGzG,YAAAyjB,cAAA,SAAc7xB,GACV,IAAIsP,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAO1P,IAAI,MAAOI,GAEpBxB,KAAKwP,KACPyB,IAAgBjB,IAAM,mBAAoB,CAAEc,OAAQA,IACpDR,aAMT,YAAAgjB,mBAAA,SAAmBX,EAAuBrJ,EAA2BlR,EAAiBmb,EAAsBC,GAA5G,WACQ5jB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAehBiB,EAAS,CAAE6hB,cAAeA,EAAerJ,kBAAmBA,EAAmBlR,QAASA,GAW5F,OAToB,MAAhBmb,IACAziB,EAAqB,aAAIyiB,GAEhB,MAATC,IACA1iB,EAAc,MAAI0iB,GAGtBxzB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,oCAAqCC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACzFO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAMT,YAAAmjB,qBAAA,SAAqBC,EAAqCC,EAA8Blf,EAAgB8e,EAAsBC,GAA9H,WACQ5jB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,IAAK,IAAM+jB,KAAQD,EAAUra,WAAY,CACrC,IAAIiC,EAAOoY,EAAUra,WAAWsa,GACd,SAAdrY,EAAKla,MACLka,EAAKsY,OAAOhuB,SAAQ,SAAAiuB,GAChBA,EAAI1xB,MAAQ,IAAIkS,KAAKwf,EAAI1xB,OAAO2xB,UAAU/iB,cAKtD,IAAIF,EAAS,CAAE6iB,UAAWA,EAAWlf,MAAOA,EAAO8e,aAAcA,GAWjE,OATsB,MAAlBG,IACA5iB,EAAuB,eAAI4iB,GAElB,MAATF,IACA1iB,EAAc,MAAI0iB,GAGtBxzB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAWC,IAAM,oCAAqCC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACzFO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAArL,KAAA,SAAKzD,EAAaqP,EAAoBD,EAAkBtN,EAAgDN,GACpG,IAAI4M,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CACTtP,IAAKA,EACLwB,KAAMA,GAeV,OAZkB,MAAd6N,IACAC,EAAOD,WAAaA,GAGR,MAAZD,IACAE,EAAOF,SAAWA,GAGlBtN,EAAOtB,OAAS,IAChB8O,EAAOxN,OAASA,GAGbtD,KAAKwP,KACPO,KAAUC,IAAM,oBAAqBC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACxEU,aAGT,YAAAujB,OAAA,SAAOryB,EAAaY,EAAeuY,EAAuBqZ,EAAwB1wB,GAC9E,IAAIsM,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CACTtP,IAAKA,EACLmZ,cAAeA,EACfqZ,eAAgBA,GAWpB,OARI1wB,EAAOtB,OAAS,IAChB8O,EAAOxN,OAASA,GAGP,MAATlB,GAAiBA,EAAMJ,OAAS,IAChC8O,EAAO1O,MAAQA,GAGZpC,KAAKwP,KACPO,KAAyCC,IAAM,sBAAuBC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACzGU,aAGT,YAAA2jB,iBAAA,SAAiBzyB,GACb,IAAIoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,CACTtP,IAAKA,GAGT,OAAOxB,KAAKwP,KACPO,KAAwBC,IAAM,kCAAmCC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACpGU,aAGT,YAAAwF,SAAA,SAAStU,GACL,IAAIsP,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAO1P,IAAI,MAAOI,GAEpBxB,KAAKwP,KACPyB,IAAcjB,IAAM,wBAAyB,CAAEc,OAAQA,IACvDR,aAGT,YAAA4jB,oBAAA,WACI,IAAIpjB,EAAqB,IAAI,EAAAC,WAE7B,OAAO/Q,KAAKwP,KACPyB,IAAoDjB,IAAM,wBAAyB,CAAEc,OAAQA,IAC7FR,aAGT,YAAA6jB,yBAAA,SAAyB3yB,EAAaoP,EAAkBC,EAAoB4gB,EAAkBC,GAC1F,IAAI5gB,EAAqB,IAAI,EAAAC,WAO7B,OAFAD,GADAA,GADAA,GADAA,GADAA,EAASA,EAAO1P,IAAI,MAAOI,IACXJ,IAAI,WAAYwP,EAASI,aACzB5P,IAAI,aAAcyP,EAAWG,aAC7B5P,IAAI,WAAYqwB,IAChBrwB,IAAI,cAAeswB,EAAY1gB,YAExChR,KAAKwP,KACPyB,IAAoBjB,IAAM,gCAAiC,CAAEc,OAAQA,IACrER,aAGT,YAAA8jB,iBAAA,SAAiB5yB,GACb,IAAIsP,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAO1P,IAAI,MAAOI,GAEpBxB,KAAKwP,KACPyB,IAAcjB,IAAM,sBAAuB,CAAEc,OAAQA,IACrDR,aAGT,YAAA+jB,iBAAA,sBAGI,OAFAr0B,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAAoBjB,IAAM,8BAC1BG,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,a,iCAtwBA7I,GAAe,sD,oCAAfA,EAAe,QAAfA,EAAe,O,EAD5B,GACa,EAAAA,mB,+DAAAA,EAAe,E,KAD3B,EAAAT,c,8LCpBD,WACA,QAEA,Q,GAEA,M,sBAQA,aAII,WAAoBwI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAA6kB,QAAA,SAAQzjB,EAAoBD,GAA5B,WACQE,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAO1P,IAAI,aAAcyP,EAAWG,aAC7B5P,IAAI,WAAYwP,EAASI,YAEzChR,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAAuCjB,IAAM,kCAAmC,CAAEc,OAAQA,IAC1FX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAW,IAAA,SAAIzP,GAAJ,WACQsP,EAAqB,IAAI,EAAAC,WAK7B,OAJAD,EAASA,EAAO1P,IAAI,MAAOI,GAE3BxB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAA2BjB,IAAM,8BAA+B,CAAEc,OAAQA,IAC1EX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAikB,iBAAA,SAAiBjL,EAA2BkL,GAA5C,WACQ1jB,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAO1P,IAAI,aAAcozB,IAClBpzB,IAAI,oBAAqBkoB,GAEzCtpB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAA2BjB,IAAM,0CAA2C,CAAEc,OAAQA,IACtFX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAmkB,eAAA,SAAeC,EAA0B5H,GAAzC,WACQhc,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAO1P,IAAI,mBAAoBszB,IACxBtzB,IAAI,oBAAqB0rB,GAEzC9sB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPyB,IAAWjB,IAAM,4CAA6C,CAAEc,OAAQA,IACxEX,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA8I,MAAA,SAAM8Y,GAAN,WACQtiB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAA4BC,IAAM,gCAAiCC,KAAKC,UAAU,CAAEgiB,OAAQA,IAAW,CAAEtiB,QAASA,IAClHO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAkE,KAAA,SAAKhT,GAAL,WACQoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAGhBiB,EAAS,GAQb,OANW,MAAPtP,IACAsP,EAAS,CAAEtP,IAAKA,IAGpBxB,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAA6DC,IAAM,+BAAgCC,KAAKC,UAAUY,GAAS,CAAElB,QAASA,IACtIO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAhQ,OAAA,SAAOkB,GAAP,WACQoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAUC,IAAM,iCAAkCC,KAAKC,UAAU,CAAE1O,IAAKA,IAAQ,CAAEoO,QAASA,IAC3FO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAqkB,OAAA,SAAOnzB,GAAP,WACQoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAUC,IAAM,iCAAkCC,KAAKC,UAAU,CAAE1O,IAAKA,IAAQ,CAAEoO,QAASA,IAC3FO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAskB,IAAA,SAAIpzB,GAAJ,WACQoO,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAUC,IAAM,8BAA+BC,KAAKC,UAAU,CAAE1O,IAAKA,IAAQ,CAAEoO,QAASA,IACxFO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAAukB,QAAA,SAAQrzB,EAAYqP,EAAoBD,GACpC,IAAIE,EAAqB,IAAI,EAAAC,WAO7B,OAJAD,GADAA,GADAA,EAASA,EAAO1P,IAAI,MAAOI,IACXJ,IAAI,aAAcyP,EAAWG,aAC7B5P,IAAI,WAAYwP,EAASI,YAIlChR,KAAKwP,KACPyB,IAAoCjB,IAAM,mCAAoC,CAAEc,OAAQA,IAIxFR,a,iCA9JAxI,GAA4B,sD,oCAA5BA,EAA4B,QAA5BA,EAA4B,O,EADzC,GACa,EAAAA,gC,+DAAAA,EAA4B,E,KADxC,EAAAd,c,6KCbD,WACA,QACA,Q,GAGA,M,sBAIA,aAII,WAAoBwI,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAqlB,WAAA,SAAWC,EAAiBnkB,EAAkBokB,GAC1C,IAAIlkB,EAAqB,IAAI,EAAAC,WAO7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAO1P,IAAI,UAAW,eACfA,IAAI,UAAW2zB,EAAQ/jB,aACvB5P,IAAI,WAAYwP,EAASI,aACzB5P,IAAI,cAAe4zB,GAE5Bh1B,KAAKwP,KACPyB,IAAoBjB,IAAM,aAAc,CAAEc,OAAQA,IAClDR,aAGT,YAAA2kB,aAAA,SAAaC,GAAb,WACQtlB,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAUC,IAAM,kBAAmBC,KAAKC,UAAU,CAAE3O,GAAI2zB,IAAW,CAAEtlB,QAASA,IAC9EO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,aAGT,YAAA6kB,cAAA,SAAcD,EAAgBxkB,GAA9B,WACQd,EAAU,IAAI,EAAAC,YAAY,CAC1B,eAAgB,qBAKpB,OAFA7P,KAAKyP,aAAaK,QAEX9P,KAAKwP,KACPO,KAAUC,IAAM,uBAAwBC,KAAKC,UAAU,CAAE3O,GAAI2zB,EAAQxkB,OAAQA,IAAW,CAAEd,QAASA,IACnGO,KAAK,EAAAC,UAAS,WACX,EAAKX,aAAaY,eAErBC,a,iCA7CA5I,GAAW,sD,oCAAXA,EAAW,QAAXA,EAAW,O,EADxB,GACa,EAAAA,e,+DAAAA,EAAW,E,KADvB,EAAAV,c,oRC5BD,aA8BA,SAAgBmc,EAAc1f,EAAiC2xB,GAC3D,OAAO3xB,EAAMod,EAAIuU,EAAKvU,GAAKpd,EAAMod,EAAKuU,EAAKvU,EAAIuU,EAAKrU,QAAWtd,EAAMmd,EAAIwU,EAAKxU,GAAKnd,EAAMmd,EAAKwU,EAAKxU,EAAIwU,EAAKtU,MA7BhH,8BAAmC8D,EAAcyQ,GAC7C,IAUID,EAVM1V,EAAGC,OAAO,QAEIS,OAAO,KAAKuD,QAAQ,eAAe,GAEhCvD,OAAO,QAC7B7E,KAAK,KAAM,KACXA,KAAK,KAAM,KACXA,KAAK,YAAa8Z,GAClBzQ,KAAKA,GAEQpG,OAAOmC,UAIzB,OAFAjB,EAAGC,OAAO,gBAAgBrf,SAEnB80B,EAAKtU,MAAQ,GAGxB,oBAAyBF,EAAWC,GAChC,IAAIV,EAAWT,EAAGC,OAAO,QAAQnB,OAC7BpY,EAAK+Z,EAAImV,iBAKb,OAHAlvB,EAAGwa,EAAIA,EACPxa,EAAGya,EAAIA,EAEAza,EAAGmvB,gBAAgBpV,EAAIqV,eAAeC,YAGjD,kBAIA,iCAAsCC,EAAgEC,GAClG,OAAOxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAGC,EAAG6U,EAAM7U,GAAK8U,IAAUxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAI8U,EAAM5U,MAAOD,EAAG6U,EAAM7U,EAAI6U,EAAM3U,QAAU4U,IAC9HxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAI8U,EAAM5U,MAAOD,EAAG6U,EAAM7U,GAAK8U,IAAUxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAGC,EAAG6U,EAAM7U,EAAI6U,EAAM3U,QAAU4U,IAGnI,+BAAoCD,EAAgEC,GAChG,OAAOxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAGC,EAAG6U,EAAM7U,GAAK8U,IAAUxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAI8U,EAAM5U,MAAOD,EAAG6U,EAAM7U,EAAI6U,EAAM3U,QAAU4U,IAC9HxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAI8U,EAAM5U,MAAOD,EAAG6U,EAAM7U,GAAK8U,IAAUxS,EAAc,CAAEvC,EAAG8U,EAAM9U,EAAGC,EAAG6U,EAAM7U,EAAI6U,EAAM3U,QAAU4U,IAGnI,gCAAqCC,GACjC,MAAO,CAAEhV,EAAGoD,SAAS4R,EAAUra,KAAK,MAAOsF,EAAGmD,SAAS4R,EAAUra,KAAK,MAAOuF,MAAOkD,SAAS4R,EAAUra,KAAK,UAAWwF,OAAQiD,SAAS4R,EAAUra,KAAK,c,mHC7C3J,W,GAGA,O,sDCwBc,gCAA+F,YAAQ,kB,uBAAvB,mCAAe,uC,yBATvG,4BACE,4BACE,6BACE,+BAAgB,YAAkC,iBACpD,iBACA,6BACE,gCACE,yEACA,wBACA,kCACF,iBACF,iBACF,iBACF,kB,2CAVsB,2DAGR,wEAA4E,mBAA5E,CAA4E,uBAGzD,qF,8FAQjC,4BACE,4BACE,6BACE,+BACE,6BACF,iBACF,iBACA,6BACE,6BACE,6BAAK,6IAGH,sBACF,iBACF,iBAEF,iBACF,iBACF,iB,gCARU,0F,yBAmBF,gCAAmF,YAAQ,kB,uBAAvB,mCAAe,uC,yBAanF,gCAAmF,YAAQ,kB,uBAAvB,mCAAe,uC,mDARzF,4BACE,6BACE,+BAAgB,6BAA6D,iBAC/E,iBACA,6BACE,gCACE,+HACA,wBACA,kCACF,iBACF,iBACF,iB,iCALM,4EAAgD,eAEvB,8E,mDAtBjC,4BACE,4BACE,6BACE,+BAAgB,6BAA6C,iBAC/D,iBACA,6BACE,gCACE,mIACA,wBACA,kCACF,iBACF,iBACF,iBAEA,+BAYF,iB,gCAnBQ,iFAAqD,eAE5B,6EAKzB,wI,qBA+CE,6B,qBACA,6BDhHhB,iBAWI,aAHU,KAAAsa,oBAAsB,IAAI,EAAAt2B,aAC1B,KAAAu2B,YAAc,IAAI,EAAAv2B,a,OAK5B,YAAAw2B,OAAA,WACI/1B,KAAK61B,oBAAoB7b,KAAMha,KAAK2tB,eACpC3tB,KAAK81B,YAAY9b,KAAM,SAG3B,YAAArC,SAAA,WACI3X,KAAK81B,YAAY9b,KAAM,W,iCAflBtQ,I,iCAAAA,EAAuB,0vC,GAAA,MCVpC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBAQE,+BAEE,8BAeA,oBAEA,+BAoBA,gCAsDA,6BACE,6BACE,8BACE,iCAAsB,wCAAS,EAAAiO,cAC3B,8BACJ,iBACA,iCAAsB,wCAAS,EAAAoe,YAC3B,qCACA,qCACJ,iBACF,iBACF,iBACF,iBACF,iBAEJ,kB,4BA1GoD,uEAiBxC,kEAoBA,+DA4D+E,kDAChE,gEACA,iE,mRDhH3B,GAKa,EAAArsB,2B,+DAAAA,EAAuB,E,KALnC,EAAAyF,U,MAAW,CACRC,SAAU,kBACVC,YAAa,mCACbC,UAAW,Q,uBAIFqe,cAAe,CAAF,C,KAArB,EAAApe,QACSsmB,oBAAmB,E,KAA5B,EAAA5uB,SACS6uB,YAAW,E,KAApB,EAAA7uB,Y,iHEdL,W,GAEA,OAEA,O,+DCmBkB,gCAAgF,YAAQ,kB,uBAAvB,wBAAe,uC,sBAWnF,gCAA0D,6BAA6C,kB,sBACvG,gCAA2H,6BAA8C,kB,yBAvBlL,6BACE,4BACE,6BACE,6BAA2B,4BAAQ,YAAmB,iBAAQ,iBAC9D,6BACE,6BACE,4BAAO,6BAAyD,iBAClE,iBACA,8BACE,iCAA4B,yEAC1B,4BACA,mCACF,iBACF,iBACA,8BACE,6BAAO,8BAAgE,iBACzE,iBACA,8BACE,iCAA0D,gFAC3D,yBACA,iCAAoB,8BAAwC,iBAC5D,iCAAqB,8BAAyC,iBAC9D,mCACA,mCACF,iBACC,iBACF,iBACF,iBACF,iBACF,kB,qDA1ByC,qDAMH,gDAA6B,sBAE9B,6EAOnB,uDAA6B,0BAA7B,CAA6B,0CAI7B,+DACA,6HD7BxB,iBAYI,WAAqB8M,GAAA,KAAAA,UAHX,KAAA8hB,oBAAsB,IAAI,EAAAt2B,aAC1B,KAAAu2B,YAAc,IAAI,EAAAv2B,a,OAI5B,YAAAC,SAAA,sBACIQ,KAAK+T,QAAQia,iBAAkBhuB,KAAK2tB,cAActsB,KAAK2M,KAAMhO,KAAK2tB,cAAclM,WAAW,GAAO5M,MAAM,SAAAmhB,GACpG,EAAKrI,cAAcqI,UAAYA,MAIvC,YAAAD,OAAA,WAEI/1B,KAAK61B,oBAAoB7b,KAAMha,KAAK2tB,eACpC3tB,KAAK81B,YAAY9b,KAAM,SAG3B,YAAAic,OAAA,WACIj2B,KAAK81B,YAAY9b,KAAM,SAG3B,YAAArC,SAAA,WACI3X,KAAK81B,YAAY9b,KAAM,W,iCAzBlBrQ,GAAqB,mC,iCAArBA,EAAqB,uzC,GAAA,MCZlC,6BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,4BACE,kCAEE,+BA+BA,6BACE,6BACE,8BACE,iCAAsB,wCAAS,EAAAssB,YAC3B,8BACJ,iBACA,iCAAmB,wCAAS,EAAAte,cACxB,8BACJ,iBACA,iCAAsB,wCAAS,EAAAoe,YAC3B,8BACJ,iBACF,iBACF,iBACF,iBAEF,iBACF,iBACF,kB,4BAjDmD,iEAwCwC,oD,yQD9C3F,GAMa,EAAApsB,yB,+DAAAA,EAAqB,E,KANjC,EAAAwF,U,MAAW,CAERC,SAAU,gBACVC,YAAa,iCACbC,UAAW,Q,yCAIFqe,cAAe,CAAF,C,KAArB,EAAApe,QACSsmB,oBAAmB,E,KAA5B,EAAA5uB,SACS6uB,YAAW,E,KAApB,EAAA7uB,Y,wHEhBL,WAEA,GADA,OACA,Q,6DCQI,4BACE,6BACE,6BACF,iBACF,kB,yBACA,4BACE,6BAAgC,YAAW,iBAC7C,kB,6BADkC,+C,mDAyBhC,0BACE,0CAAkF,kGAAgC,iBACpH,iB,wDADoB,yCAAmB,gCAAnB,CAAmB,Y,qBAW/B,6B,qBACA,6BDlDd,iBAYI,aAHU,KAAA6uB,YAAc,IAAI,EAAAv2B,aAC5B,KAAAiT,QAAkB,K,OAIlB,YAAAhT,SAAA,aAGA,YAAA02B,YAAA,WACI,IAAM,IAAIvxB,EAAI,EAAGA,EAAI3E,KAAK2tB,cAAcwI,iBAAiBn0B,OAAQ2C,IAE7D,IAAM3E,KAAK2tB,cAAcwI,iBAAiBxxB,GAAGyxB,SACzC,OAAO,EAIf,OAAO,GAGX,YAAAC,YAAA,SAAahhB,GACLrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,IAGxD,YAAA0gB,OAAA,WAC0C,MAAjC/1B,KAAK2tB,cAAc2I,aACpBt2B,KAAK2tB,cAAc2I,WAAa,IAGpC,IAAM,IAAI3xB,EAAI,EAAGA,EAAI3E,KAAK2tB,cAAcwI,iBAAiBn0B,OAAQ2C,IAAM,CACnE,IAAM4xB,EAAUv2B,KAAK2tB,cAAcwI,iBAAiBxxB,GAEpD,GAAK4xB,EAAQH,UAAmC,oBAAvBG,EAAQlc,OAAOmc,KAA6B,CACjE,IACMC,EAAY,CAAEzoB,KAAM,aAAc5L,MADN,MAAlBm0B,EAAQjT,OAAiBiT,EAAQjT,OAAS,IAAMiT,EAAQljB,MAAQkjB,EAAQljB,OAGxFrT,KAAK2tB,cAAc2I,WAAWvzB,KAAM0zB,IAK5Cz2B,KAAK81B,YAAY9b,KAAM,SAG3B,YAAArC,SAAA,WACI3X,KAAK81B,YAAY9b,KAAM,W,iCA/ClBpQ,I,iCAAAA,EAA4B,q6BCVzC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,0BACE,8BAKA,8BAGA,kCACE,6BACE,6BACE,6BACE,6BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACF,iBACA,gCAGA,6BACE,8BACE,iCAAsB,wCAAS,EAAA+N,cAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,wCAAS,EAAAoe,YAC7B,4BACE,qCACA,qCACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MAnDU,oDAKA,oDA0BqB,yEAU0D,wDAEhE,uEACA,yE,oKDlDzB,GAMa,EAAAnsB,gC,+DAAAA,EAA4B,E,KANxC,EAAAuF,U,MAAW,CAERC,SAAU,wBACVC,YAAa,yCACbC,UAAW,Q,uBAIFqe,cAAe,CAAF,C,KAArB,EAAApe,QACSumB,YAAW,E,KAApB,EAAA7uB,Y,oHEbL,W,GACA,O,4DCSI,4BACE,6BACE,6BACF,iBACF,kB,yBACA,4BACE,6BAAgC,YAAW,iBAC7C,kB,6BADkC,+C,yBAyBhC,0BACE,iCACF,kB,qDADgB,yCAAmB,gCAAnB,CAAmB,YDvCzC,iBAYI,aAHU,KAAA6uB,YAAc,IAAI,EAAAv2B,aAC5B,KAAAiT,QAAkB,K,OAIlB,YAAAhT,SAAA,aAGA,YAAA02B,YAAA,WACI,IAAM,IAAIvxB,EAAI,EAAGA,EAAI3E,KAAK2tB,cAAc+I,aAAa10B,OAAQ2C,IAEzD,IAAM3E,KAAK2tB,cAAc+I,aAAa/xB,GAAGyxB,SACrC,OAAO,EAIf,OAAO,GAGX,YAAAL,OAAA,WAC0C,MAAjC/1B,KAAK2tB,cAAc2I,aACpBt2B,KAAK2tB,cAAc2I,WAAa,IAGpC,IAAM,IAAI3xB,EAAI,EAAGA,EAAI3E,KAAK2tB,cAAc+I,aAAa10B,OAAQ2C,IAAM,CAC/D,IAAM4xB,EAAUv2B,KAAK2tB,cAAc+I,aAAa/xB,GAEhD,GAAK4xB,EAAQH,UAAmC,UAAvBG,EAAQlc,OAAOmc,KAAmB,CACvD,IAAMC,EAAY,CAAEzoB,KAAMuoB,EAAQI,cAAev0B,MAAOm0B,EAAQljB,OAEhErT,KAAK2tB,cAAc2I,WAAWvzB,KAAM0zB,IAI5Cz2B,KAAK81B,YAAY9b,KAAM,SAG3B,YAAArC,SAAA,WACI3X,KAAK81B,YAAY9b,KAAM,W,iCAzClBlQ,I,iCAAAA,EAAwB,o0BCTrC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,4BACE,8BAKA,8BAGA,kCACE,6BACE,6BACE,6BACE,6BACF,iBACF,iBACA,8BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,8BACE,6BACE,8BACF,iBACF,iBACF,iBACA,gCAGA,6BACE,8BACE,iCAAsB,wCAAS,EAAA6N,cAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,wCAAS,EAAAoe,YAC7B,4BACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MAlDU,oDAKA,oDA0BqB,qEAU0D,0D,gKDhDzF,GAMa,EAAAjsB,4B,+DAAAA,EAAwB,E,KANpC,EAAAqF,U,MAAW,CAERC,SAAU,oBACVC,YAAa,qCACbC,UAAW,Q,uBAIFqe,cAAe,CAAF,C,KAArB,EAAApe,QACSumB,YAAW,E,KAApB,EAAA7uB,Y,wHEZL,WAIA,GAFA,MAEA,OAGA,S,GACA,MAEA,O,4JCAY,gCAA2D,YAA4B,kB,uBAA5C,0BAAgB,4D,uGAqB5D,2BACC,gCAAoD,6BAA4E,iBAClI,kB,6BAFiC,oH,sBAGjC,gCAAoG,6BAA4E,kB,8CDrB1L,aAuCI,WAAoBiW,EAAsCG,EAC9CuZ,EAAoDxZ,EAA8CjJ,GAD9G,WAAoB,KAAA+I,eAAsC,KAAAG,kBAC9C,KAAAuZ,uBAAoD,KAAAxZ,kBAA8C,KAAAjJ,cAzB9G,KAAAsJ,eAAkC,GAElC,KAAAoZ,YAAsB,GAEtB,KAAAC,OAAiB,GAIjB,KAAAC,QAAkB,KAElB,KAAAre,QAAgB,KAMhB,KAAAib,UAA+B,KAE/B,KAAA7xB,SAAmB,EAEnB,KAAAk1B,SAAmB,EAEnB,KAAA9d,2BAAuC,CAAC,MAAO,WAAY,OAAQ,iBAAkB,aAAc,UAI/FlZ,KAAKi3B,WAAa,EAAAC,WAAW1hB,QAAO,SAAC2hB,GACjC,EAAK9Z,gBAAgBkU,iCAAiC,EAAKsF,YAAa,EAAK/iB,cAAc9F,MAAM6G,MAAK,SAAAuiB,GAClGD,EAASllB,KAAKmlB,S,OAK1B,YAAA53B,SAAA,sBACIQ,KAAKqd,gBAAgBwS,kBAAkB,GAAI,MAAMhb,MAAK,SAAAC,GAElD,IADA,IAAIC,EAAa,GACRpQ,EAAI,EAAGA,EAAImQ,EAAM9S,SAAU2C,EAAG,CACnC,IAAMtD,EAAOyT,EAAMnQ,GACbqQ,EAAU3T,EAAKwe,iBACf5K,EAAiC,MAAtB5T,EAAK6T,eAA+C,IAAtB7T,EAAK6T,cAAsB7T,EAAK6T,cAAgB7T,EAAK2M,KAEhG,EAAKmG,YAAYkjB,kBAAkBriB,EAASC,IAC5CF,EAAWhS,KAAK+R,EAAMnQ,IAG9B,EAAK8Y,eAAiB1I,EAEtB,EAAK0I,eAAeza,MAAK,SAACC,EAAGC,GACzB,OAAID,EAAEoQ,MAAMqV,eAAeC,cAAgBzlB,EAAEmQ,MAAMqV,eAAeC,eAAuB,EAChF1lB,EAAEoQ,MAAMqV,eAAeC,cAAgBzlB,EAAEmQ,MAAMqV,eAAeC,cAAsB,EACjF,KAGhB,IAAIP,EAAM,EAAKC,yBAAyB,QACpCD,GACA,EAAK3K,eAAe3a,OAAOslB,EAAK,MAIrChT,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIZ,YAAAiiB,iBAAP,WACwB,MAAhBt3B,KAAK+2B,QACL/2B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAMpb,KAAK+2B,UAExC/2B,KAAK0Y,QAAU,MAIhB,YAAA6e,cAAP,SAAqBC,GACK,MAAlBx3B,KAAK2zB,YAKkB,MAAvB3zB,KAAKwc,gBAA2Bxc,KAAKwc,eAAeJ,gBAK5B,MAAxBpc,KAAKy3B,iBAA4Bz3B,KAAKy3B,gBAAgBrb,cAK1Dpc,KAAK8B,SAAU,EAdX9B,KAAK8B,SAAU,GAiBf,YAAAumB,yBAAR,SAAiCra,GAC7B,IAAK,IAAIrJ,EAAI,EAAGA,EAAI3E,KAAKyd,eAAezb,OAAQ2C,IAAK,CAEjD,GADU3E,KAAKyd,eAAe9Y,GACtBqJ,OAASA,EACb,OAAOrJ,EAIf,OAAO,MAGX,YAAA+yB,uBAAA,SAAuB5pB,GACnB9N,KAAKg3B,QAAUlpB,GAGnB,YAAA6pB,kBAAA,SAAkB7pB,GAAlB,WACI9N,KAAKqd,gBAAgBqV,qBAAqB5kB,EAAE8b,KAAK5b,KAAMhO,KAAK8T,cAAc9F,MAAM6G,MAAK,SAAA8e,GACjF,EAAKA,UAAYA,KAClBve,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAuiB,OAAA,WACI53B,KAAK8B,SAAU,EACf9B,KAAK2zB,UAAY,KACjB3zB,KAAK62B,YAAc,KACnB72B,KAAK8T,cAAgB,KACrB9T,KAAK82B,OAAS,MAGX,YAAAxhB,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCArItDpS,GAA4B,yM,iCAA5BA,EAA4B,8D,GAAA,M,09CClBzC,4BACE,4BACE,4BACE,2BAAiC,4BAAsE,iBACvG,4BAEE,4BACE,4BACA,+BAAgF,sEAC9E,wBACA,kCACF,iBACF,iBAEA,6BACE,6BACA,qCAAY,8DAAmB,4BAA4C,EAAAwsB,sBAC6C,iBAC1H,iBAEA,8BACE,8BACA,gCAA0D,oEAAyB,wCAAsH,EAAAK,kBAAA,KAA/I,CAAyB,uCACL,EAAAD,uBAAA,M,wBAD9E,iBAEF,iBAEA,8BACE,wBAIC,8BAGD,mCACF,iBAEF,iBAEF,iBACF,iBACF,kB,MAjC0F,uDAEtD,wDAMd,+CAAmB,sBAAnB,CAAmB,2BAAnB,CAAmB,mBAAnB,CAAmB,sBAAnB,CAAmB,cAAnB,CAAmB,qBAMZ,yEAAsC,wBAAtC,CAAsC,4BAAtC,CAAsC,oBAAtC,CAAsC,yBAAtC,CAAsC,0BAAtC,CAAsC,8DASpD,2DAGI,gE,yuBDrBnB,GAKa,EAAA5sB,gC,+DAAAA,EAA4B,E,KALxC,EAAAqE,U,MAAU,CACPC,SAAU,wBACVC,YAAa,yCACbC,UAAW,CAAC,oC,uJAwBkBmoB,gBAAe,E,KAA5C,EAAAhb,U,MAAU,qBAEkBD,eAAc,E,KAA1C,EAAAC,U,MAAU,uB,oHE1Cf,WAGA,GAFA,MAEA,MAGA,SAKA,GAHA,OACA,MAEA,QAEA,Q,0ICAgB,6BACE,6BACF,kB,mDAsBR,8DAGI,gGAOJ,iB,gCANI,8CAAoC,iCAApC,CAAoC,mCAApC,CAAoC,oBAApC,CAAoC,yBAApC,CAAoC,8C,mDAUxC,0BACE,mDAC2B,gGAG3B,iBACF,iB,gCAJI,iDAAwB,oBAAxB,CAAwB,8B,sBAqBpB,2BAAwC,kCAAmB,kB,mDALnE,6BACI,6BAA0B,4BAAO,6BAAyE,iBAAQ,iBAClH,6BACE,kCAAiG,iGAA0C,iBAC3I,6BACE,6BACF,iBACF,iBACJ,iB,gCALuG,+CAE3F,8C,2HD1DpB,aAkFI,WAAoBS,EAAqChJ,EAC7CmJ,EAA0CD,EAClDjJ,GAFgB,KAAA+I,eAAqC,KAAAhJ,aAC7C,KAAAmJ,kBAA0C,KAAAD,kBApEtD,KAAAtb,SAAmB,EAInB,KAAAyW,SAAmB,EAOnB,KAAAsf,gBAA0B,EAI1B,KAAAC,eAA2B,KAW3B,KAAAC,oBAA8B,EAoB9B,KAAAC,iBAA2B,EAO3B,KAAAjB,QAAkB,KAKlB,KAAAre,QAAgB,KAEhB,KAAAC,qBAA+B,EAU3B3Y,KAAKi4B,QAAU9jB,EAAY8jB,UAC3Bj4B,KAAKk4B,aAAel4B,KAAKi4B,SAAW9jB,EAAY+jB,eAChDl4B,KAAKm4B,cAAgBn4B,KAAKi4B,SAAWj4B,KAAKk4B,cAAgB/jB,EAAYikB,gBAEtEp4B,KAAK0Y,QAAU,IAAIpE,KAEnB,IAAM+jB,EAAMr4B,KAAK0Y,QAAQ4f,aACzBt4B,KAAK+2B,QAAU/2B,KAAK0Y,QAAQ6f,iBAAmB,KAAOv4B,KAAK0Y,QAAQ8f,cAAgB,GAAK,KAAOH,EAAM,GAAK,IAAM,IAAMA,E,OAG1H,YAAA74B,SAAA,aAIA,YAAAi5B,qBAAA,SAAqBC,EAA2BC,GAC5C,IAAK,IAAIh0B,EAAY,EAAGA,EAAI+zB,EAAS12B,SAAU2C,EAC3C,GAAI+zB,EAAS/zB,GAAGg0B,YAAcA,EAC1B,OAAOD,EAAS/zB,GAIxB,OAAO,MAGX,YAAAi0B,gBAAA,SAAgBr3B,GACZvB,KAAKuzB,aAAehyB,GAGxB,YAAA+1B,iBAAA,WACIt3B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAMpb,KAAK+2B,WAG5C,YAAA8B,qBAAA,SAAqBC,GACjB94B,KAAK+4B,kBAAoBD,GAKtB,YAAAE,eAAP,SAAsB/jB,EAAkB8hB,EAAiBkC,GAAzD,WACIj5B,KAAK63B,gBAAiB,EACtB73B,KAAK+2B,QAAUA,EACf/2B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAMpb,KAAK+2B,UACxC/2B,KAAKi5B,mBAAqBA,EAE1Bj5B,KAAKk5B,mBAAmBjkB,GACxBjV,KAAKm5B,eAELn5B,KAAKqd,gBAAgBuV,qBAAqB3d,GAAUJ,MAAK,SAAAukB,GACrD,EAAKC,gBAAkB,IAAI,EAAAC,kBAAkB,EAAKxlB,cAAeslB,EAAQzF,UAAUra,YACnF,EAAKigB,iBAAmB,IAAI,EAAAD,kBAAkB,EAAKxlB,cAAe7D,KAAKmL,MAAMnL,KAAKC,UAAU,EAAKmpB,kBAAkB/f,YAEnH,EAAK/C,YAAc6iB,EAAQ7iB,gBAK5B,YAAAijB,yBAAP,SAAgCC,EAA0B5H,EAAmBkF,EAAiBkC,GAA9F,WACQhkB,EAAWwkB,EAAYC,OAAO/F,UAAUra,WAAWjY,KACvDrB,KAAK63B,eAAiB4B,EAAYC,OAAOjlB,MACzCzU,KAAK+2B,QAAUA,EACf/2B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAM2b,IACnC/2B,KAAKi5B,mBAAqBA,EAE1Bj5B,KAAKk5B,mBAAmBjkB,GACxBjV,KAAKm5B,eAEqB,MAAtBM,EAAYC,QAAgD,MAA9BD,EAAYC,OAAOC,SAAmBF,EAAYC,OAAOC,QAAQ33B,OAAS,GACxGhC,KAAKuW,YAAckjB,EAAYC,OAAOC,QACtC35B,KAAKg4B,iBAAkB,IAEvBh4B,KAAKqd,gBAAgBuV,qBAAqB3d,GAAUJ,MAAK,SAAAukB,GACrD,EAAK7iB,YAAc6iB,EAAQ7iB,eAE/BvW,KAAKg4B,iBAAkB,GAI3Bh4B,KAAKq5B,gBAAkB,IAAI,EAAAC,kBAAkBt5B,KAAK8T,cAAe2lB,EAAYC,OAAO/F,UAAUra,YAC9FtZ,KAAKu5B,iBAAmB,IAAI,EAAAD,kBAAkBt5B,KAAK8T,cAAe2lB,EAAYC,OAAO/F,UAAUra,YAE/FtZ,KAAK83B,eAAiB,WAClB,IAAI5F,EAAS,CACTL,UAAWA,EACX+H,cAAeH,EAAYl4B,GAC3Bs4B,WAAY,mBACZnG,eAAgB,EAAKnd,YACrBod,UAAW,EAAKmG,SAChBrlB,MAAOglB,EAAYC,OAAOjlB,OAG9B,EAAK4I,gBAAgB8U,mBAAmBD,GACnCrd,MAAK,WAC4B,MAA1B,EAAKkkB,mBACL,EAAKA,uBAEV3jB,OAAM,SAACC,GACN,EAAKC,MAAMD,QAMpB,YAAA0kB,oBAAP,SAA2B/rB,EAAciH,EAAkB8hB,EAAiBkC,GACxEj5B,KAAK63B,gBAAiB,EACtB73B,KAAK+2B,QAAUA,EACf/2B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAMpb,KAAK+2B,UACxC/2B,KAAKi5B,mBAAqBA,EAE1Bj5B,KAAKg6B,eAAehsB,EAAMiH,GAC1BjV,KAAKk5B,mBAAmBjkB,GACxBjV,KAAKi6B,iBAAiBjsB,EAAMiH,GAC5BjV,KAAKm5B,gBAGD,YAAAa,eAAR,SAAuBhsB,EAAciH,GAArC,WACIjV,KAAKqd,gBAAgBqV,qBAAqB1kB,EAAMiH,GAAUJ,MAAK,SAAA8e,GAC3D,EAAK0F,gBAAkB,IAAI,EAAAC,kBAAkB,EAAKxlB,cAAe7D,KAAKmL,MAAMnL,KAAKC,UAAUyjB,IAAYra,YACvG,EAAKigB,iBAAmB,IAAI,EAAAD,kBAAkB,EAAKxlB,cAAe7D,KAAKmL,MAAMnL,KAAKC,UAAU,EAAKmpB,kBAAkB/f,YAGnH,EAAKwgB,SAAW,EAAKP,iBAGrB,EAAKxB,oBAAqB,EAC1B,EAAKj2B,SAAU,KAChBsT,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIX,YAAA8jB,aAAR,sBACIn5B,KAAKqd,gBAAgBoV,aAAa5d,MAAK,SAAAqT,GACnC,EAAK9K,gBAAgB6K,WAAWC,MACjC9S,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIX,YAAA6jB,mBAAR,SAA2BlrB,GAA3B,WACIhO,KAAKqd,gBAAgBwS,kBAAkB,CAAC7hB,GAAO,MAC1C6G,MAAK,SAAAf,GACF,EAAKA,cAAgBA,EAAc,GAEP,MAAxB,EAAKulB,kBACL,EAAKA,gBAAgBvlB,cAAgB,EAAKA,eAEjB,MAAzB,EAAKylB,mBACL,EAAKA,iBAAiBzlB,cAAgB,EAAKA,eAG1C,EAAKA,cAAcmlB,sBAGzB7jB,OAAM,SAACC,GACN6kB,QAAQC,IAAI9kB,OAKhB,YAAA4kB,iBAAR,SAAyBjsB,EAAcosB,GAAvC,WACIp6B,KAAKqd,gBAAgBiU,2BAA2BtjB,EAAMosB,GACjDvlB,MAAK,SAAC0B,GACH,EAAKA,YAAcA,EAGnB,EAAKyhB,iBAAkB,KACxB5iB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIvB,YAAAglB,uBAAA,SAAuBzV,EAAM3P,GAA7B,WACI,OAAO,EAAAiiB,WAAW1hB,QAAO,SAAC2hB,GACtB,EAAK9Z,gBAAgBkU,iCAAiC3M,EAAM3P,GAAUJ,MAAK,SAAAuiB,GACvED,EAASllB,KAAKmlB,UAK1B,YAAAO,kBAAA,SAAkB7pB,EAAmBwsB,GAArC,WACIt6B,KAAKqd,gBAAgBgU,mBAAmBvjB,EAAE8b,KAAK5b,KAAMssB,EAAI3G,UAAUlyB,WAAWJ,MACzEwT,MAAK,SAAA8e,GACF2G,EAAI3G,UAAYA,KACjBve,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIhB,YAAAkiB,cAAP,WACgC,MAAxBv3B,KAAKy3B,kBACLz3B,KAAK+3B,mBAAqB/3B,KAAKy3B,gBAAgBrb,cAKxB,MAAvBpc,KAAKu6B,iBACLv6B,KAAKg4B,gBAAkBh4B,KAAKu6B,eAAene,cAI/Cpc,KAAK8B,QAAU9B,KAAK+3B,oBAAsB/3B,KAAKg4B,iBAGnD,YAAA/d,WAAA,SAAWC,EAAkBsgB,QAAA,IAAAA,OAAA,IACrBtgB,IAAala,KAAKuY,UAAaiiB,KAInCx6B,KAAKy6B,sBAELz6B,KAAKuY,SAAW2B,EAEhBla,KAAKu3B,gBAGDv3B,KAAK2Y,oBADQ,IAAbuB,IAOA,YAAAugB,oBAAR,WACgC,MAAxBz6B,KAAKy3B,kBACLz3B,KAAKu5B,iBAAmBv5B,KAAKy3B,gBAAgBpb,gBAEtB,MAAvBrc,KAAKu6B,iBACLv6B,KAAKuW,YAAcvW,KAAKu6B,eAAeG,kBAG3C16B,KAAK85B,SAAW95B,KAAKu5B,kBAOlB,YAAAjkB,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,eAGxD,YAAA0a,OAAP,WACI53B,KAAKkU,WAAWwD,QAGb,YAAAijB,OAAP,WACQ36B,KAAK8B,UACL9B,KAAKkU,WAAWwD,OAEhB1X,KAAKy6B,sBAEsB,MAAvBz6B,KAAK83B,gBAcL93B,KAAK83B,mB,iCAlVR/sB,GAAwB,+L,iCAAxBA,EAAwB,yD,GAAA,M,wSAPtB,CAAC,EAAApD,YAAS,umD,GAAA,MCpBzB,4BAEI,+BAQI,4BACI,4BAEI,8BAGJ,iBACJ,iBACA,4BAEI,4BACI,4BACI,8BAAqF,wCAAS,aAAgB,MAC1G,6BACJ,iBACA,+BAA8G,wCAAS,aAAgB,MACnI,6BACJ,iBACA,+BAAoH,8DAA+B,aAAgB,MAC/J,8BACJ,iBACJ,iBACJ,iBACJ,iBAIA,8DAcA,gCAkBA,gCAUC,8BACG,8BAA0B,6BAAO,8BAAkD,iBAAQ,iBAC3F,8BACI,gCAAuC,gEAAqB,4BAAW,EAAA2vB,sBAAvE,iBACJ,iBACJ,iBAEA,6BAEI,6BACI,8BACI,iCAA8C,wCAAS,EAAAM,YACnD,8BACJ,iBACA,iCAA8C,wCAAS,EAAA+C,YACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,4BAvFsB,uDASyC,8EAGA,iGAGA,oGAUlD,6HAaC,wEAkBA,oDAayC,iDAW8B,8DACnD,sG,kmBD9ElC,GAWa,EAAA5vB,4B,+DAAAA,EAAwB,E,KAXpC,EAAAoE,U,MAAU,CACPC,SAAU,mBACVC,YAAa,oCACbC,UAAW,CAAC,oCACZ/B,UAAW,CAAC,EAAA5F,e,6IASHmM,cAAe,CAAF,C,KAArB,EAAAvE,QAeQwpB,kBAAmB,CAAF,C,KAAzB,EAAAxpB,QAW6BkoB,gBAAe,E,KAA5C,EAAAhb,U,MAAU,qBAoBkB8d,eAAc,E,KAA1C,EAAA9d,U,MAAU,uB,kHE3Ef,W,GACA,MAEA,O,sGCDQ,2BAGI,YACJ,kB,uBAFI,6GACA,sD,yBAJR,2BACI,6BAKJ,kB,6BAJyB,4DDE7B,iBAgBI,WAAoBW,GAAA,KAAAA,kBAChBpd,KAAK46B,YAAc,CAAEC,MAAO,I,OAThC,sBACI,oBAAK,C,IADT,SACUz4B,GACNpC,KAAK46B,YAAcx4B,G,gCAUvB,YAAA5C,SAAA,aAGA,YAAAoT,YAAA,a,iCAlBS/K,GAAsB,6C,iCAAtBA,EAAsB,iRCVnC,4BACI,6BAOJ,kB,MAPS,uG,ioDDIT,GAKa,EAAAA,0B,+DAAAA,EAAsB,E,KALlC,EAAAsH,U,MAAU,CACPC,SAAU,iBACVC,YAAa,kCACbC,UAAW,CAAC,6B,mDAMRurB,MAAK,E,KADR,EAAAtrB,M,MAAM,c,+GEbX,WAIA,GAHA,MAGA,Q,GACA,O,2DCFE,qB,mDAOI,6BACE,+BAAuH,sHAAvH,iBACA,+BAAkC,6BAA6C,iBACjF,iB,0BAFmE,0CAAsB,sBAC3C,4C,mDAclC,6BACE,+BAAiD,yIAAjD,iBAAuF,YAA0B,2BAA+D,yIAAqC,iBACvN,iB,0CADyB,gDAAgE,6D,yBAF3F,0BACE,+BAGF,kB,uBAHsD,+C,yBAJ1D,6BACE,4BAAO,YAA8B,iBACrC,6BACE,+BAKF,iBACF,kB,uCARS,mDAEmB,wD,yBAJ9B,0BACE,+BAUF,kB,4CAVQ,2E,yBANZ,0BACE,yBACE,6BACF,iBACA,6BACE,+BAaF,iBACF,kB,6BAdiC,6DDdvC,iBAuCI,WAAoB2N,EAAqCnJ,GAArC,KAAAmJ,eAAqC,KAAAnJ,UAhChD,KAAAzQ,OAAmB,GAClB,KAAAw3B,YAAc,IAAI,EAAAv7B,aAClB,KAAAw7B,gBAAkB,IAAI,EAAAx7B,aAEhC,KAAAy7B,oBAAqB,EAErB,KAAAC,MAAsB,GAKtB,KAAAC,WAAoB,CAChB,CACI1E,KAAM,YACNnjB,MAAO,sBACP9R,GAAI,eACJ45B,OAAQ,uCACRC,IAAK,4BACLC,UAAU,IAWlB,KAAAC,mBAA0C,G,OAK1C,YAAA97B,SAAA,sBACIQ,KAAK+T,QAAQwe,2BAA2B1d,MAAK,SAAAomB,GACzC,EAAKA,MAAQA,EAEb,EAAKM,0BAIb,YAAA5oB,YAAA,SAAY6oB,GACJA,EAAQl4B,OAAOm4B,eAAiBD,EAAQl4B,OAAOo4B,eAC/C17B,KAAKu7B,uBAIb,YAAAA,oBAAA,sBACIv7B,KAAKi7B,MAAMp1B,SAAQ,SAAAktB,GACf,IAAI4I,EAAe,CAAEn6B,IAAKuxB,EAAKvxB,IAAK+T,aAAcwd,EAAKxd,aAAamT,eAAgBkT,cAAe,IAEnG7I,EAAK8I,SAASh2B,SAAQ,SAAAi2B,GAGlB,IAAe,IAFD,EAAKx4B,OAAO8P,QAAQ0oB,EAAQt6B,KAExB,CACd,IAAIu6B,EAAmB,CAAEv6B,IAAKs6B,EAAQt6B,IAAK+T,aAAcumB,EAAQpjB,QAASsjB,QAAQ,EAAOC,SAAS,GAElGN,EAAaC,cAAc74B,KAAKg5B,OAIpCJ,EAAaC,cAAc55B,OAAS,GACpC,EAAKs5B,mBAAmBv4B,KAAK44B,OAKzC,YAAAO,6BAAA,SAA6BC,GACzB,IAAIC,GAAa,EAWjB,OAVAp8B,KAAKs7B,mBAAmBz1B,SAAQ,SAAAw2B,GACxBA,EAAY76B,MAAQ26B,GACpBE,EAAYT,cAAc/1B,SAAQ,SAAAy2B,GAC1BA,EAAOL,UACPG,GAAa,SAMtBA,GAGX,YAAAG,wBAAA,WACI,IAAIH,GAAa,EASjB,OARAp8B,KAAKs7B,mBAAmBz1B,SAAQ,SAAAw2B,GAC5BA,EAAYT,cAAc/1B,SAAQ,SAAAy2B,GAC1BA,EAAOL,UACPG,GAAa,SAKlBA,GAGX,YAAAI,mBAAA,SAAmB97B,GACfA,EAAMs7B,QAAUt7B,EAAMs7B,OAEtBh8B,KAAK86B,YAAY9gB,KAAKtZ,IAG1B,YAAA+7B,mBAAA,SAAmB/7B,GACfA,EAAMs7B,QAAS,EACft7B,EAAMu7B,SAAU,EAEhBj8B,KAAK86B,YAAY9gB,KAAKtZ,IAG1B,YAAAg8B,qBAAA,WACqB18B,KAAKkd,aAAasM,KAAK,EAAAxc,2BAA4B,CAChEsd,UAAU,EACVC,UAAU,EACVC,qBAAqB,EAErB,MAAS,wBAEFC,QAAQ6Q,mBAAqBt7B,KAAKs7B,oBAejD,YAAAqB,gBAAA,SAAgBj8B,GACZV,KAAKk7B,WAAWr1B,SAAQ,SAAA+2B,GACpBA,EAAGZ,QAAS,KAGhBt7B,EAAMs7B,QAAS,EAEfh8B,KAAK+6B,gBAAgB/gB,KAAKtZ,I,iCA7IrBuM,GAAmB,+E,iCAAnBA,EAAmB,6jCCXhC,4BAA0B,mEAAmC,IAAnC,CAAwC,sDAAoC,KAEpG,4BACA,4BAEE,4BACE,yBACE,4BACF,iBACA,8BAIF,iBACA,0BACE,8BAqBA,+BAAgC,wCAAS,EAAAyvB,0BAAwB,kBAAE,6BAAmE,iBACxI,iBAEF,iBAEF,kB,MAvCyB,0DAClB,4DAM2C,oDAMtC,kE,82CDTZ,GAKa,EAAAzvB,uB,+DAAAA,EAAmB,E,KAL/B,EAAAkC,U,MAAU,CACPC,SAAU,cACVC,YAAa,+BACbC,UAAW,CAAC,+B,uEAIHhM,OAAQ,CAAF,C,KAAd,EAAAiM,QACSurB,YAAW,E,KAApB,EAAA7zB,SACS8zB,gBAAe,E,KAAxB,EAAA9zB,Y,iHEhBL,WAIA,GAFA,MAEA,QAGA,GAFA,OACA,MACA,Q,yICqCI,4BACE,4BACE,4BACF,iBACA,kCAA6B,mGAAuE,iBACtG,iB,iCAD+B,iD,mDAK7B,gCAAmD,oGACjD,6BACF,kB,mDAEA,gCAA6D,oGAC3D,6BACF,kB,mDACA,gCAAqC,4FACnC,6BACF,iB,iCAFgG,wGACpF,qG,mDA5DhB,0BAEE,4DAUE,uHAAoD,2FAApD,CAAoD,gFAMtD,iBAyBA,8BAOA,4BAEE,iCAIA,iCAGA,iCAIF,iBACF,iB,gCA5DI,oDAAsB,gCAAtB,CAAsB,oBAAtB,CAAsB,gBAAtB,CAAsB,yBAAtB,CAAsB,uBAAtB,CAAsB,iBAAtB,CAAsB,4BAAtB,CAAsB,qBAAtB,CAAsB,cAuClB,8DASK,2DAIA,6CAGA,8CDnDf,iBA+DI,WAAmB8M,EAAkCmJ,EAAsC/I,EAAkC0oB,GAA1G,KAAA9oB,UAAkC,KAAAmJ,eAAsC,KAAA/I,cAAkC,KAAA0oB,kBAxD7H,KAAAC,KAAO,CACHC,SAAU,WACVC,WAAY,aACZC,UAAW,YACXC,SAAU,YAOL,KAAAxkB,QAAgB,IAAIpE,KAEpB,KAAAvU,UAAoB,EAS7B,KAAAo9B,MAAgB,KAEN,KAAAC,cAAgB,IAAI,EAAA79B,aACpB,KAAA89B,WAAa,IAAI,EAAA99B,aACjB,KAAA+9B,YAAc,IAAI,EAAA/9B,aAClB,KAAAg+B,YAAc,IAAI,EAAAh+B,aAE5B,KAAAuC,SAAmB,EAInB,KAAA07B,KAAe,KAUf,KAAAzqB,UAA2B,KAE3B,KAAA0B,OAAiB,EAEjB,KAAAgpB,QAAkB,EAIlB,KAAAhc,UAA+B,KAE/B,KAAAqV,OAAiB,G,OArCjB,sBAAa,mBAAI,C,IAAjB,SAAkB10B,GACdpC,KAAK09B,WAAWt7B,I,gCAyCpB,YAAA5C,SAAA,WACIQ,KAAKk4B,aAAel4B,KAAKmU,YAAY8J,SAAWje,KAAKmU,YAAYyL,iBAAiB5f,KAAKqB,KAAKwe,mBAAqB7f,KAAKmU,YAAYwpB,yBAAyB39B,KAAKqB,MAChKrB,KAAKw9B,KAAO,cAKhB,YAAAI,SAAA,SAAS/kB,GACL7Y,KAAK8B,QAAU+W,GAGnB,YAAA6kB,WAAA,SAAW1vB,GAAX,WACIhO,KAAKm9B,MAAQnvB,EACbhO,KAAKmY,cAAgB,KACrBnY,KAAK69B,aAAe,KACpB79B,KAAKuW,YAAc,KAEP,MAARvI,GAA6B,MAAbhO,KAAKqB,OACR,YAAT2M,GACAhO,KAAKyU,OAAQ,EAEbzU,KAAK+T,QAAQ2e,qBAAqB1kB,EAAMhO,KAAKqB,KAAK2M,MAAM6G,MAAK,SAAA8e,GACzD,EAAKkK,aAAe,IAAI,EAAAvE,kBAAkB,EAAKj4B,KAAM4O,KAAKmL,MAAMnL,KAAKC,UAAUyjB,IAAYra,YAC3F,EAAKnB,cAAgB,IAAI,EAAAmhB,kBAAkB,EAAKj4B,KAAM4O,KAAKmL,MAAMnL,KAAKC,UAAU,EAAK2tB,eAAevkB,eACrGlE,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAK+T,QAAQud,2BAA2BtjB,EAAMhO,KAAKqB,KAAK2M,MAAM6G,MAAK,SAAC0B,GAChE,EAAKA,YAAcA,KACpBnB,OAAM,SAACC,GACN,EAAKC,MAAMD,QAGfrV,KAAKyU,OAAQ,EAEbzU,KAAK+T,QAAQ6e,qBAAqB5yB,KAAKqB,KAAK2M,MAAM6G,MAAK,SAAAukB,GACnD,EAAKyE,aAAe,IAAI,EAAAvE,kBAAkB,EAAKj4B,KAAM+3B,EAAQzF,UAAUra,YACvE,EAAKnB,cAAgB,IAAI,EAAAmhB,kBAAkB,EAAKj4B,KAAM4O,KAAKmL,MAAMnL,KAAKC,UAAU,EAAK2tB,eAAevkB,YAEpG,EAAK/C,YAAc6iB,EAAQ7iB,YAC3B,EAAKunB,aAAY,SAMjC,YAAAC,iBAAA,WACI/9B,KAAKs9B,YAAYtjB,QAUrB,YAAAzC,SAAA,sBACQvX,KAAKyU,MACLzU,KAAK+T,QAAQ0f,qBAAqBzzB,KAAKuW,YAAavW,KAAKmY,cAAenY,KAAKyU,MAAOzU,KAAKg+B,UAAWh+B,KAAK82B,QAAQjiB,MAAK,SAACopB,GAC9GA,EAAUC,kBACX,EAAKd,cAAcpjB,KAAK,EAAK7B,eAC7B,EAAKulB,WAAW,EAAKP,QAEzB,EAAKI,YAAYvjB,KAAKikB,MACvB7oB,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAK+T,QAAQuf,mBAAmBtzB,KAAKmY,cAAcmB,WAAWtL,KAAMhO,KAAKqB,KAAK2M,KAAMhO,KAAKy3B,gBAAgBtb,aAAcnc,KAAKg+B,UAAWh+B,KAAK82B,QAAQjiB,MAAK,SAACopB,GACjJA,EAAUC,kBACX,EAAKd,cAAcpjB,KAAK,EAAK7B,eAC7B,EAAKulB,WAAW,EAAKP,QAEzB,EAAKI,YAAYvjB,KAAKikB,MACvB7oB,OAAM,SAACC,GACN,EAAKC,MAAMD,MAInBrV,KAAK68B,gBAAgBj8B,eAGzB,YAAAu9B,yBAAA,SAAyBprB,GACrB/S,KAAK+S,UAAYA,EACjB/S,KAAKw9B,KAAOx9B,KAAK88B,KAAKC,UAG1B,YAAAqB,wBAAA,SAAwB3c,GACpBzhB,KAAKyhB,UAAYA,EACjBzhB,KAAKw9B,KAAOx9B,KAAK88B,KAAKG,WAG1B,YAAAoB,kBAAA,SAAkBlmB,GACdnY,KAAKmY,cAAgBA,EAErBnY,KAAKw9B,KAAOx9B,KAAK88B,KAAKE,YAG1B,YAAAsB,kBAAA,SAAkB7c,GACd,IAAM4F,EAAQrnB,KAAKuW,YAAY3T,WAAU,SAAAmmB,GAAK,OAAAA,EAAE/a,OAASyT,EAAUzT,SACpD,IAAXqZ,IACArnB,KAAKuW,YAAY8Q,GAAS5F,GAG9BzhB,KAAKw9B,KAAOx9B,KAAK88B,KAAKE,YAG1B,YAAAuB,iBAAA,WACIv+B,KAAK89B,aAAa99B,KAAKy9B,SAG3B,YAAAK,YAAA,SAAY17B,GACRpC,KAAKy9B,OAASr7B,EACdpC,KAAK82B,OAAS,KAEd92B,KAAKq9B,WAAWrjB,KAAKha,KAAKy9B,SAGvB,YAAAnoB,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCArLtDhQ,GAAqB,yJ,iCAArBA,EAAqB,sD,GAAA,K,64CCdlC,0BACE,+BA4FF,kB,MA5FQ,uF,quCDQR,GAKa,EAAAA,yB,+DAAAA,EAAqB,E,KALjC,EAAAiC,U,MAAU,CACPC,SAAU,gBACVC,YAAa,iCACbC,UAAW,CAAC,uC,qHAWH0uB,UAAW,CAAF,C,KAAjB,EAAAzuB,QAEQlO,KAAM,CAAF,C,KAAZ,EAAAkO,QAEQmJ,QAAS,CAAF,C,KAAf,EAAAnJ,QAEQxP,SAAU,CAAF,C,KAAhB,EAAAwP,QAGYvB,KAAI,E,KAAhB,EAAAuB,QAI6BkoB,gBAAe,E,KAA5C,EAAAhb,U,MAAU,qBAID2gB,cAAa,E,KAAtB,EAAAn2B,SACSo2B,WAAU,E,KAAnB,EAAAp2B,SACSq2B,YAAW,E,KAApB,EAAAr2B,SACSs2B,YAAW,E,KAApB,EAAAt2B,Y,6HE3CL,WAEA,GADA,MACA,OAEA,S,GAEA,OAEA,M,iGCHM,6BAAqE,YAAW,kB,6BAAX,+C,yBAerE,4BACE,+BACE,6BACA,8BAA8B,iBAAO,sCAAkE,gBAAC,iBAC1G,iBACA,+BAA6B,wEAA7B,iBAEF,kB,2CAJ4D,4CAEnD,mDAAqB,kBAArB,CAAqB,2B,yBAa1B,gCAA6D,YAA4B,kB,uBAA/C,6BAAmB,4D,mDAH/D,gCACE,0HACA,wBACA,kCACF,iB,gCAJkD,4CAA6B,4CAGrD,wD,mDAE1B,8BAA8D,+BAAmB,6GAAnB,iBAAyF,iB,gCAAtE,4D,mDACjF,8BAAgC,+BAAmB,6GAAnB,iBAAyF,iB,gCAAtE,4D,mDAwD/C,gCACE,iGACA,6BACF,iB,mDAHwC,mEDvFpD,iBAuBI,WAAoBgN,EAAuCuqB,EAA2BnhB,EAA0CnL,EAA2CgC,GAAvJ,KAAAD,WAAuC,KAAAuqB,OAA2B,KAAAnhB,kBAA0C,KAAAnL,mBAA2C,KAAAgC,aAf3K,KAAA8S,cAAqB,GACrB,KAAAxU,QAAkB,KAElB,KAAAgC,MAAgB,EAEhB,KAAAzU,UAAoB,E,OAYpB,YAAAP,SAAA,sBACIQ,KAAK0qB,uBAAyB,IAAI,EAAAhZ,QAElC1R,KAAKwhB,cAAgB,CACjBxT,KAAM,GACNqF,MAAOrT,KAAKiU,SAASuB,SACrB+V,YAAavrB,KAAKiU,SAASuB,SAC3BiK,mBAAoB,GACpBI,iBAAkB,IAGtB7f,KAAKqd,gBAAgBgX,mBAAmBxf,MAAK,SAAA4pB,GAEzC,GAAK,EAAK1+B,SASN,EAAKinB,cAAgByX,MATL,CAChB,EAAKzX,cAAgB,GAErB,IAAK,IAAIriB,EAAI,EAAGA,EAAI85B,EAAKz8B,SAAU2C,EAC3B,EAAK65B,KAAK5e,iBAAiB6e,EAAK95B,GAAGqJ,OACnC,EAAKgZ,cAAcjkB,KAAK07B,EAAK95B,IAOpC,EAAK6P,MAAsC,IAA9B,EAAKwS,cAAchlB,QAG1B,EAAKwS,MAAQ,EAAKzU,YACzB,EAAK2+B,kBAAoB,EAAKC,6BAA6B,EAAKnd,cAAc3B,oBAH9E,EAAK2B,cAAc3B,iBAAmB,EAAKmH,cAAc,GAAGhZ,KAC5D,EAAK0wB,kBAAoB,EAAK1X,cAAc,GAAG3T,MAAMqV,mBAI1DtT,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAspB,6BAAA,SAA6B3pB,GACzB,IAAK,IAAIrQ,EAAI,EAAGA,EAAI3E,KAAKgnB,cAAchlB,SAAU2C,EAC7C,GAAI3E,KAAKgnB,cAAcriB,GAAGqJ,OAASgH,EAC/B,OAAOhV,KAAKgnB,cAAcriB,GAAG0O,MAAMqV,eAK3C,OADAwR,QAAQC,IAAI,+BAAiCnlB,EAAU,KAChDA,GAGX,YAAAnC,eAAA,sBACI7S,KAAKwS,QAAU,KAEXxS,KAAKD,SACLC,KAAKkU,WAAWwD,OAIhB1X,KAAKwU,KACLxU,KAAKkS,iBAAiBub,oBAAoBxd,KAAKC,UAAUlQ,KAAKwhB,gBAAgB3M,MAAK,SAAA5P,GAC/E,EAAKylB,uBAAuBzY,KAAKhN,GACjC,EAAKiP,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAKkS,iBAAiBqb,oBAAoBtd,KAAKC,UAAUlQ,KAAKwhB,gBAAgB3M,MAAK,SAAA5P,GAC/E,EAAKylB,uBAAuBzY,KAAKhN,GACjC,EAAKiP,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAKvB,YAAAC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA7F3CjM,GAAiC,iM,iCAAjCA,EAAiC,8pFCf9C,2BAEE,4BACE,+BAEE,8BAEE,4BACE,yBACE,4BACF,iBACF,iBAEF,4BACE,8BACE,6BACF,iBACA,+BAAO,2EAAP,iBAEF,iBACA,gCASA,yCAAgB,gFAAwH,iBAExI,6BACE,gCACE,8BACF,iBACA,mCAKA,iCACA,iCACF,iBAEA,6BACE,6BAAO,8BAAwD,iBAC/D,mCAAU,+EAAgG,iBAC5G,iBAEA,6BACE,6BAAO,8BAA+D,iBACtE,mCAAU,sFAA8G,iBAC1H,iBACA,6BACE,6BAAO,8BAA0D,iBACjE,mCAAU,iFAAgH,iBAC5H,iBAEA,6BACE,6BAAO,8BAAiE,iBACxE,mCAAU,wFAA8H,iBAC1I,iBAEA,6BACE,6BAAO,8BAA8D,iBACrE,mCAAU,qFAAwH,iBACpI,iBAEA,qBAEA,6BACE,0BACE,8BACF,iBACF,iBAEA,6BACE,6BAAO,8BAAuD,iBAC9D,gCAAO,8EAAP,iBACF,iBAEA,6BACE,6BAAO,8BAA2D,iBAClE,gCAAO,kFAAP,iBACF,iBAEA,6BACE,6BAAO,8BAAqD,iBAC5D,gCAAO,4EAAP,iBACF,iBAEA,8BACE,8BACE,8BACE,iCAA8C,wCAAS,EAAA8K,WAAA,UACrD,8BACF,iBACA,mCAIF,iBACF,iBACF,iBAEF,iBACF,iBACF,kB,MAtGY,oDAYG,4DAAgC,+BAGO,0EAShC,iEAAqC,kBAArC,CAAqC,uBAM1C,sEAKF,uEACA,2CAKG,gEAAoC,uBAKpC,uEAA2C,uBAI3C,kEAAsC,uBAKtC,yEAA6C,uBAK7C,sEAA0C,uBAa7C,+DAAmC,uBAKnC,mEAAuC,uBAKvC,6DAAiC,uBAS3B,kD,2UDvFrB,GAKa,EAAA9K,qC,+DAAAA,EAAiC,E,KAL7C,EAAA+F,U,MAAU,CACPC,SAAU,8BACVC,YAAa,+CACbC,UAAW,Q,+QEbf,WAEA,GADA,MACA,OAEA,S,GAGA,OACA,M,0GCLI,6BAAqE,YAAW,kB,6BAAX,+C,qBAIjE,6B,qBACA,6B,yBAoBA,4BACE,4BACE,6BACA,8BAA6B,iBAAO,sCAAkE,gBAAC,iBACzG,iBACA,+BAAO,wEAAP,iBAEF,kB,uBAJ2D,4CAElD,+CAA+B,yBAA/B,CAA+B,wC,mDAY5C,4BACE,6BACE,4BACE,+BACE,6BACF,iBACA,6BACE,uCAAgC,kHAAuF,iBACzH,iBACF,iBACF,iBACF,iB,gCAJuB,0CAAgB,mCAAhB,CAAgB,kD,2CDxC3C,aAoBI,WAAoB2E,EAAuCuqB,EAA2BnhB,EAAyCnJ,GAA3G,KAAAD,WAAuC,KAAAuqB,OAA2B,KAAAnhB,kBAAyC,KAAAnJ,aAZ/H,KAAAkC,aAA6B,KAC7B,KAAA5D,QAAkB,K,OAalB,YAAAhT,SAAA,WACIQ,KAAK8rB,mBAAqB,IAAI,EAAApa,QAE9B1R,KAAK8T,cAAgB,CACjB9F,KAAM,GACNqF,MAAOrT,KAAKiU,SAASuB,SACrB+V,YAAavrB,KAAKiU,SAASuB,SAC3B1V,aAAc,aACd8+B,QAAQ,EACR3F,oBAAoB,EACpBpZ,iBAAkB,GAClBvG,WAAY,KAIpB,YAAAxC,KAAA,SAAKV,EAA4BujB,EAA0B9N,EAA+BzK,GACtFphB,KAAK8T,cAAcsN,WAAaA,IAA0B,EAEtDyK,IACA7rB,KAAK8T,cAAcoB,cAAgB2W,EAAe7d,KAClDhO,KAAK8T,cAAchU,aAAe+rB,EAAe/rB,aACjDE,KAAK8T,cAAc+qB,UAAYhT,EAAegT,WAIlD7+B,KAAK25B,QAAUA,EAAQr2B,QAAO,SAAAggB,GAAU,OAAAA,EAAOlC,cAG/CphB,KAAKoW,aAAeA,EACpBpW,KAAK8T,cAAc+L,iBAAmB7f,KAAKoW,aAAapI,KACxDhO,KAAK0+B,kBAAoB1+B,KAAKoW,aAAa/C,MAAMqV,gBAGrD,YAAA7V,eAAA,sBACI7S,KAAKwS,QAAU,KAEfxS,KAAKqd,gBAAgBuO,oBAAoB3b,KAAKC,UAAUlQ,KAAK8T,gBAAgBe,MAAK,SAAA5P,GAC9E,EAAK6mB,mBAAmB7Z,KAAKhN,GAC7B,EAAKiP,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAypB,aAAA,WACI9+B,KAAK8T,cAAc8qB,QAAU5+B,KAAK8T,cAAc8qB,QAGpD,YAAAG,yBAAA,WACI/+B,KAAK8T,cAAcmlB,oBAAsBj5B,KAAK8T,cAAcmlB,oBAGhE,YAAA+F,iBAAA,WACIh/B,KAAK8T,cAAcsN,YAAcphB,KAAK8T,cAAcsN,YAGxD,YAAA9L,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA1E3C/L,GAA8B,yJ,iCAA9BA,EAA8B,wjE,2BCjB3C,+BAAqB,sFAA0B,EAAAuJ,oBAE7C,4BACE,8BAEA,4BACE,yBACE,mCACA,mCACF,iBACF,iBAEA,4BACE,4BACE,6BACE,2BACE,gCACE,8BACF,iBACA,gCAAO,2EAAP,iBAEF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,gCAQF,iBACF,iBAEA,6BACE,6BACE,yCAAgB,gFAAkG,iBACpH,iBACF,iBAEA,gCAaA,6BACE,8BACE,6BAEE,gCACE,8BACF,iBACA,8BACE,wCAA+D,8EAAwF,iBACzJ,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,gCACE,8BACF,iBACA,iCAAgD,mFAC9C,yBAmBC,iCACC,8BACF,iBACA,iCACE,8BACF,iBACA,iCACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBAeA,6BACE,8BACE,6BACE,8BACE,8BAAK,wCAAS,EAAAksB,8BAEZ,uBACF,iBAEA,gCACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,gCACE,8BACF,iBACA,+BACE,gCAAuC,0EAAvC,iBACF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,8BACE,iCAA8C,wCAAS,EAAA7qB,WAAA,UACrD,8BACF,iBACA,iCACE,8BACF,iBACF,iBACF,iBACF,iBAEF,iBACF,iB,+BAtKU,oDAIS,+DACA,gEAWA,4DASqC,0EAahC,iEAAqC,mBAIvC,mEAqBK,2EAA+C,kCAA/C,CAA+C,mDAYhB,oEAAwC,mFAmD5C,mGAoBH,4DAYnB,oD,6WDrJhC,GAKa,EAAA5K,kC,+DAAAA,EAA8B,E,KAL1C,EAAA6F,U,MAAU,CACPC,SAAU,0BACVC,YAAa,2CACbC,UAAW,Q,wPEff,WACA,OAOA,GADA,MACA,OAEA,SAEA,S,GAEA,O,+ICTE,4CAAiG,wHAAyH,iB,gCAA/I,oCAAqB,gCAArB,CAAqB,qC,mDAKhG,uDAAgH,wHAAsD,iB,gCAAtF,+C,mDAEhF,qDAA+I,wHAAsD,iB,gCAAzH,8CAA+B,qC,wBAE3G,uC,6BAAuE,8CAA+B,qC,wBAEtG,0C,6BAAwE,8CAA+B,mCAA/B,CAA+B,uCDAzG,iBAiCI,WAAmB4E,EAA+B+qB,EAA+BC,GAAjF,WAAmB,KAAAhrB,aAA+B,KAAA+qB,oBAPlD,KAAAzsB,QAAkB,KAClB,KAAAV,WAA4C,CAAEE,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,GAAIqsB,WAAY,IAI9H,KAAAr/B,UAAoB,EAGhBC,KAAKq/B,uBAAyBH,EAA+BvtB,gBAAgBmI,WAAU,SAAAhI,GACnF,EAAKA,WAAaA,K,OAI1B,YAAAtS,SAAA,WACIQ,KAAKqsB,yBAA2B,IAAI,EAAA3a,SAGxC,YAAAkB,YAAA,WACI5S,KAAKq/B,uBAAuBznB,eAGhC,YAAA0nB,mBAAA,SAAmBttB,GACfhS,KAAK8R,WAAaE,GAGtB,YAAAutB,sBAAA,SAAsBt6B,GAGlBjF,KAAKqsB,yBAAyBpa,KAAKhN,IAGvC,YAAAsL,OAAA,aAIA,YAAAivB,MAAA,WACIx/B,KAAKkU,WAAWwD,QAGpB,YAAApC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA1C3C9K,GAAiC,4H,iCAAjCA,EAAiC,unBCvC9C,2BAEE,sCAEA,8CAKA,yDAEA,uDAEA,8CAEA,iDAEF,kB,MAbwB,kFAKW,4EAEF,0EAET,8EAEG,8E,uTDKX,CACR,CACI,EAAAkJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,a,EAjBrC,GAwBa,EAAApJ,qC,+DAAAA,EAAiC,E,KAxB7C,EAAA4E,U,MAAU,CACPC,SAAU,6BACVC,YAAa,8CACbC,UAAW,CAAC,oCAEZuE,WAAY,CACR,CACI,EAAAJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,e,mOEjCrC,WACA,OAQA,GAFA,MAEA,QACA,SAKA,GAHA,MAEA,OACA,Q,GACA,O,0HCdI,4BAAqE,YAAW,kB,8BAAX,+C,yBAyC7D,4BACI,6BACI,6BACJ,iBACA,6BACI,8BACI,YACJ,iBACJ,iBACJ,kB,8BAHY,4E,mDA6EsB,2BAAoG,uI,uBACvD,iB,KAAzC,6D,mDACJ,2BAAuG,6I,uBACxD,iB,KAA3C,+D,yBANZ,yBACI,yBAAI,YAA6B,iBACjC,4BACI,6BAEA,6BAEJ,iBACJ,kB,uBAPQ,2DAEI,qEAEA,sE,mDAqB1B,gCAAwF,0FACpF,6BACJ,iB,iCAFgE,uC,mDAjJpF,+BAAkE,wFAC9D,4BACI,yBACI,4BACA,YACJ,iBACJ,iBACA,+BACI,4BACI,6BACI,4BAAO,8BAAoD,iBAC/D,iBACA,8BACI,+BAAoB,gCAAmB,mHAAnB,iBACpB,iBACJ,iBACJ,iBAEA,0CAAuC,kHAAoE,iBAC3G,yCAAsC,wHAAgF,iBAEtH,6BACI,8BACI,6BAAO,8BAAiD,iBAC5D,iBACA,8BACI,wCAAgC,mHAAuF,iBAC3H,iBACJ,iBAEA,6BACI,8BACI,6BAAO,8BAA+D,iBAC1E,iBACA,8BACI,wCAAuD,sHAA4F,iBACvJ,iBACJ,iBAEA,gCAYA,6BACI,8BACI,6BAAO,8BAA4D,iBACvE,iBACA,8BACI,iCAA4B,2HACxB,yBACC,iCAA2B,8BAAsD,iBAClF,iCAA0B,8BAAqD,iBAC/E,iCAA6B,8BAAwD,iBAOzF,iBACJ,iBACJ,iBAGA,6BACI,8BACI,6BAAO,8BAA8E,iBACzF,iBACA,8BAEI,wCAAoC,+HAA6H,iBACrK,iBACJ,iBAEA,6BACE,8BACE,6BAAO,8BAAwD,iBACjE,iBACA,8BACE,+BAAoB,gCAAmB,8GAAnB,iBAAyF,iBAC/G,iBACF,iBAEA,6BACI,8BACI,6BAAO,8BAA0F,iBACrG,iBACA,8BACI,8BACI,8BASA,8BACM,gCAWI,6BACI,+BASJ,iBACJ,iBACJ,iBAEA,4BAAgG,wGAC5F,8BACJ,iBACF,iBACJ,iBACJ,iBACJ,iBAEA,6BACQ,8BACI,iCAA8C,yFAC1C,8BACJ,iBACA,mCAGJ,iBACJ,iBACR,iBACJ,iB,iCAnJY,wFAS2C,gEAK9B,mDAAqB,mCACtB,mDAAqB,yCAOd,0CAAgB,mCAAhB,CAAgB,iDAShB,qEAAuC,sCAAvC,CAAuC,mDAIrC,+FAiBW,wEAsBb,mDAAoB,+CAApB,CAAoB,2EASA,2DAgCI,mEA0B1B,iD,yBApJjC,4BACI,8BAEA,iCAwJJ,kB,6BA1JU,oDAEgB,yDDc1B,iBAoDI,WAAmBO,EAA+B+qB,EAAuC/hB,EAC7EuiB,EAA8DP,EAC9DQ,EAAkDriB,GAF3C,KAAAnJ,aAA+B,KAAA+qB,oBAAuC,KAAA/hB,eAC7E,KAAAuiB,4BAA8D,KAAAP,iCAC9D,KAAAQ,sBAAkD,KAAAriB,kBA5BrD,KAAAtd,UAAoB,EAEnB,KAAA4/B,oBAAmD,IAAI,EAAApgC,aAajE,KAAAiT,QAAkB,KAElB,KAAAV,WAA4C,CAAEE,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,GAAIqsB,WAAY,IAE9H,KAAAQ,gBAA8B,CAC1B/E,MAAO,CACH,CAAExnB,MAAOrT,KAAK0/B,oBAAoBngB,OAAO,6CAA8Cyc,QAAQ,EAAMC,SAAS,K,OAbtH,sBACI,iBAAE,C,IADN,SACOnoB,GACCA,IACA9T,KAAK6/B,kBAAoB5vB,KAAKmL,MAAMnL,KAAKC,UAAU4D,M,gCAmB3D,YAAAtU,SAAA,WACIQ,KAAKy/B,0BAA0BK,cAAc9/B,KAAK4/B,iBAClD5/B,KAAKk/B,+BAA+BntB,cAAc/R,KAAK8R,YAEvD9R,KAAK+/B,0BAGT,YAAAC,qBAAA,WACIhgC,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBc,gBAAiBltB,UAAW,GAAIqsB,WAAY,MAGpI,YAAAW,uBAAA,sBACI//B,KAAKqd,gBAAgBgX,mBAAmBxf,MAAK,SAAA4pB,GACzC,IAAK,IAAI95B,EAAI,EAAGA,EAAI85B,EAAKz8B,SAAU2C,EAC3B85B,EAAK95B,GAAGqJ,OAAS,EAAK6xB,kBAAkBhgB,mBACxC,EAAK6e,kBAAoBD,EAAK95B,GAAG0O,MAAMqV,mBAGhDtT,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA6qB,iBAAA,WACIlgC,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBe,iBAAkBntB,UAAW,GAAIqsB,WAAY,MAGrI,YAAAE,mBAAA,SAAmBttB,GACfhS,KAAK8R,WAAaE,GAGtB,YAAAzB,OAAA,sBACIvQ,KAAKqd,gBAAgBoT,oBAAoBzwB,KAAK6/B,mBAAmBhrB,MAAK,SAAAf,GAGlE,EAAK6rB,oBAAoB3lB,KAAKlG,GAE9B,EAAK0rB,WACNpqB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAQnB,YAAAmqB,MAAA,WAEIx/B,KAAKkU,WAAWwD,QAGpB,YAAA5V,QAAA,WAkBI,OAAO,GAGX,YAAAq+B,cAAA,SAAc5kB,EAAqBzN,GAC/B9N,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBgB,cAAeptB,UAAWwI,EAAM6jB,WAAY,MAGpI,YAAAgB,oBAAA,SAAoB7kB,EAAqBzN,GAAzC,WACI9N,KAAKi/B,kBAAoBj/B,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CACnEV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKi/B,kBAAkBxU,QAAQjY,QAAUxS,KAAK0/B,oBAAoBngB,OAAO,+BAAiC,IAAMhE,EAAKlI,MAAMqV,eAAiB,IAC5I1oB,KAAKi/B,kBAAkBxU,QAAQxlB,KAAO,CAAE2rB,cAAerV,EAAMzH,cAAe9T,KAAK8T,eACjF9T,KAAKi/B,kBAAkBxU,QAAQQ,WAAajrB,KAAK0/B,oBAAoBngB,OAAO,uBAC5Evf,KAAKi/B,kBAAkBxU,QAAQppB,KAAO,EAAA2qB,WAAWC,OAExBjsB,KAAKi/B,kBAAkBxU,QAASS,UAAUpR,WAAU,SAAA7U,GACzE,EAAK6rB,oBAAoB7rB,EAAK6O,cAAc9F,KAAM/I,EAAK2rB,mBAI/D,YAAAE,oBAAA,SAAoBxH,EAA2B/N,GAA/C,WACIvb,KAAKqd,gBAAgByT,oBAAoBxH,EAAmB/N,EAAKvN,MAAM6G,MAAK,SAAA5P,GACpEA,GACA,EAAK6O,cAAcwF,WAAWxW,OAAO,EAAKgR,cAAcwF,WAAWlG,QAAQmI,GAAO,GAGtF,EAAKokB,oBAAoB3lB,KAAK,EAAKlG,kBACpCsB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA1I3C7K,GAA2B,qS,iCAA3BA,EAA2B,25ECzCxC,8B,KAAyB,oE,ysBDsBT,CACR,CACI,EAAAiJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,a,EAjBrC,GAwBa,EAAAnJ,+B,+DAAAA,EAA2B,E,KAxBvC,EAAA2E,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,CAAC,6BAEZuE,WAAY,CACR,CACI,EAAAJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,e,uNASxB5T,SAAU,CAAF,C,KAAhB,EAAAwP,QACQuE,cAAe,CAAF,C,KAArB,EAAAvE,QACSowB,oBAAqB,CAAF,C,KAA5B,EAAA14B,SAOGo5B,GAAE,E,KADL,EAAA9wB,M,MAAM,yB,gIEpDX,WAGA,GAFA,MAEA,QAKA,GAFA,MAEA,QACA,SAEA,GADA,OACA,Q,yFCJgB,6BAAqE,YAAW,kB,6BAAX,+C,oCDMrF,aAyBI,WACW2E,EACCurB,EACAP,EACA9hB,EACAC,GAJD,KAAAnJ,aACC,KAAAurB,4BACA,KAAAP,iCACA,KAAA9hB,kBACA,KAAAC,kBAtBF,KAAAsiB,oBAAmD,IAAI,EAAApgC,aAEjE,KAAAiT,QAAkB,KAClB,KAAA8tB,aAA8B,KAC9B,KAAAV,gBAA8B,CAC1B/E,MAAO,CACH,CAAExnB,MAAOrT,KAAKod,gBAAgBmC,OAAO,6CAA8Cyc,QAAQ,EAAMC,SAAS,GAC1G,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,0CAA2Cyc,QAAQ,EAAMC,SAAS,GACvG,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,yCAA0Cyc,QAAQ,EAAMC,SAAS,KAI9G,KAAAnqB,WAA4C,CAAEE,MAAO,EAAAmtB,yBAAyBc,gBAAiBltB,UAAW,GAAIqsB,WAAY,I,OAY1H,YAAA5/B,SAAA,WACIQ,KAAKugC,aAAa,aAClBvgC,KAAKy/B,0BAA0BK,cAAc9/B,KAAK4/B,kBAGtD,YAAAntB,gBAAA,WACQzS,KAAKwgC,yBACLxgC,KAAKwgC,wBAAwBvtB,WAIrC,YAAAJ,eAAA,sBACI7S,KAAKqd,gBAAgBqT,iBAAiB1wB,KAAK8T,cAAc9F,KAAMhO,KAAKsgC,cAAczrB,MAAK,SAAA5P,GACnF,EAAK6O,cAAcwF,WAAWvW,KAAKkC,GAEnC,EAAKi6B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,GAAIqsB,WAAY,KAEpI,EAAKO,oBAAoB3lB,KAAK,EAAKlG,kBACpCsB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAkrB,aAAA,SAAal/B,GAELrB,KAAKsgC,aADI,SAATj/B,EACoB,IAAI,EAAAo/B,kBAAkB,GAAIp/B,EAAMrB,KAAKod,gBAAgB5H,SAAUxV,KAAKod,gBAAgB5H,UAAU,GAAO,GAAO,GAAO,GACvH,UAATnU,EACa,IAAI,EAAAq/B,qBAAqB,GAAIr/B,EAAMrB,KAAKod,gBAAgB5H,SAAUxV,KAAKod,gBAAgB5H,UAAU,GAAO,GAAO,GAAO,GAEtH,IAAI,EAAAgE,cAAc,GAAInY,EAAMrB,KAAKod,gBAAgB5H,SAAUxV,KAAKod,gBAAgB5H,UAAU,GAAO,GAAO,GAAO,IAI3I,YAAAmrB,YAAA,WACI,IAAIC,GAAuB,EAM3B,OAJI5gC,KAAKwgC,0BACLI,EAAc5gC,KAAKwgC,wBAAwB1+B,aAG3C8+B,GAOR,YAAAhJ,OAAA,WACI53B,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,GAAIqsB,WAAY,MAGxI,YAAA9pB,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA/E3C7L,GAAoC,6N,iCAApCA,EAAoC,uE,GAAA,K,cAiBlC,EAAAa,wBAAuB,G,skCCnCtC,4BAII,+BAAwC,2CAAY,EAAAwI,oBAChD,4BACI,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,4BACI,6BACI,6BACI,gCAAmG,wCAAS,EAAA0tB,aAAa,gBACrH,8BACJ,iBACA,gCAAiG,wCAAS,EAAAA,aAAa,cACnH,8BACJ,iBACA,gCAA+F,wCAAS,EAAAA,aAAa,YACjH,8BACJ,iBACA,gCAA8F,wCAAS,EAAAA,aAAa,WAChH,8BACJ,iBACA,gCAAiG,wCAAS,EAAAA,aAAa,cACnH,8BACJ,iBACA,gCAA8F,wCAAS,EAAAA,aAAa,WAChH,8BACJ,iBACJ,iBACJ,iBACJ,iBAEA,gCAEI,0CAAoI,uEAA6B,iBAEjK,6BACI,8BAII,8BACI,iCAA8C,wCAAS,EAAA3I,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAzDsB,oDAWiD,iGAGA,+FAGA,6FAGA,4FAGA,+FAGA,4FASlC,mDAA0B,wBAA1B,CAA0B,0CAA1B,CAA0B,4BAWe,2D,6QDxC9E,GAKa,EAAApuB,wC,+DAAAA,EAAoC,E,KALhD,EAAA2F,U,MAAU,CACPC,SAAU,iCACVC,YAAa,kDACbC,UAAW,CAAC,6C,2KAIHwE,cAAe,CAAF,C,KAArB,EAAAvE,QACSowB,oBAAqB,CAAF,C,KAA5B,EAAA14B,SAcmCu5B,wBAAyB,CAAF,C,KAA1D,EAAA/jB,U,MAAU,EAAApS,8B,2HEnCf,WACA,Q,OAqBA,iBAWI,aACIrK,KAAK6gC,UA7BF,SAACC,GACJ,GAAIA,EAAE1+B,MAGF,OAFwC,IAA1B0+B,EAAE1+B,MAAMgR,QAAQ,KAGnB,KAEA,CACH2tB,uBAAwB,CACpBloB,OAAO,K,OAuB3B,YAAAmoB,SAAA,SAASF,GACL,OAAO9gC,KAAK6gC,UAAUC,I,iCATjB52B,I,iCAAAA,EAA+B,yFAL7B,CAEP,CAAE+2B,QAAS,EAAAC,cAAeC,YAAaj3B,EAAiCk3B,OAAO,Q,EAJvF,GAOa,EAAAl3B,mC,+DAAAA,EAA+B,E,KAP3C,EAAAm3B,U,MAAU,CACPjyB,SAAU,oCACV7B,UAAW,CAEP,CAAE0zB,QAAS,EAAAC,cAAeC,YAAaj3B,EAAiCk3B,OAAO,S,2JC1BvF,WACA,OAUA,GAJA,MAGA,OACA,QAEA,SAOA,GAJA,MAEA,OAEA,Q,kGCfgB,6BAAqE,YAAW,kB,6BAAX,+C,sBAOjE,4BAA6D,6BAAwE,iBAAE,6BAAgD,kB,sBACvL,4BAA2D,6BAAwE,iBAAE,6BAAmD,kB,sBACxL,4BAAyD,6BAAwE,iBAAE,6BAAiD,kB,sBACpL,4BAA2D,6BAAwE,iBAAE,6BAAmD,kB,sBACxL,4BAAwD,6BAAwE,iBAAE,6BAAgD,kB,sBAClL,4BAAwD,6BAAwE,iBAAE,6BAAgD,kB,mDAUlL,4CAAuE,uGAA0D,iB,gCAA1D,sCAAyB,kCDLpH,iBAoCI,WAAmBltB,EACPurB,EACAP,EACA9hB,EACAC,GAJO,KAAAnJ,aACP,KAAAurB,4BACA,KAAAP,iCACA,KAAA9hB,kBACA,KAAAC,kBApBH,KAAAtK,UAA2B,KAC1B,KAAA4sB,oBAAmD,IAAI,EAAApgC,aAEjE,KAAAiT,QAAkB,KAClB,KAAAV,WAA4C,CAAEE,MAAO,EAAAmtB,yBAAyBgB,cAAeptB,UAAW/S,KAAK+S,UAAWqsB,WAAY,IACpI,KAAAQ,gBAA8B,CAC1B/E,MAAO,CACH,CAAExnB,MAAOrT,KAAKod,gBAAgBmC,OAAO,6CAA8Cyc,QAAQ,EAAMC,SAAS,GAC1G,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,0CAA2Cyc,QAAQ,EAAMC,SAAS,GACvG,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,uCAAwCyc,QAAQ,EAAMC,SAAS,K,OAa5G,YAAAz8B,SAAA,WACIQ,KAAKy/B,0BAA0BK,cAAc9/B,KAAK4/B,kBAGtD,YAAAntB,gBAAA,aAIA,YAAAG,YAAA,aAGA,YAAAC,eAAA,sBACI7S,KAAKqd,gBAAgBwT,oBAAoB7wB,KAAK8T,cAAc9F,KAAMhO,KAAK+S,WAAW8B,MAAK,SAAA5P,GACnF,IAAK,IAAIN,EAAI,EAAGA,EAAI,EAAKmP,cAAcwF,WAAWtX,OAAQ2C,IAAK,CAC3D,IAAI4W,EAAO,EAAKzH,cAAcwF,WAAW3U,GACzC,GAAI4W,EAAKvN,OAAS/I,EAAK+I,KAAM,CACzBE,OAAOozB,OAAO/lB,EAAMtW,GACpB,OAIR,EAAKi6B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,GAAIqsB,WAAY,KAEpI,EAAKO,oBAAoB3lB,KAAK,EAAKlG,kBACpCsB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAsrB,YAAA,WAQI,OAAO,GAGX,YAAA/I,OAAA,WACI53B,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,GAAIqsB,WAAY,MAGxI,YAAAmC,KAAA,WACIvhC,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,GAAIqsB,WAAY,MAGxI,YAAA9pB,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA1E3ClL,GAAkC,6N,iCAAlCA,EAAkC,qE,GAAA,K,cAgBhC,EAAAE,wBAAuB,G,isCCvDtC,4BAEI,+BAAwC,sFAA0B,EAAAwI,oBAC9D,4BACI,4BACI,8BAEA,4BACI,yBACI,4BAAqE,YACzE,iBAEA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACJ,iBAIA,gCAEI,yCAAmK,oEAA0B,iBAG7L,8CAEA,8BACI,8BAII,8BACI,iCAA8C,wCAAS,EAAA+kB,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAGJ,iB,MA7CsB,oDAIuE,+EAGlD,mEACA,iEACA,+DACA,iEACA,8DACA,8DAON,mDAAyB,+CAAzB,CAAyB,uCAAzB,CAAyB,yBAGrB,+EAWqC,2D,8hBDX9D,CACR,CACI,EAAAnkB,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,kB,EAZ5B,GAiBa,EAAA9I,sC,+DAAAA,EAAkC,E,KAjB9C,EAAAgF,U,MAAU,CACPC,SAAU,+BACVC,YAAa,gDACbC,UAAW,CAAC,sCAEZuE,WAAY,CACR,CACI,EAAAJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,oB,2KAOfa,cAAe,CAAF,C,KAArB,EAAAvE,QACQwD,UAAW,CAAF,C,KAAjB,EAAAxD,QACSowB,oBAAqB,CAAF,C,KAA5B,EAAA14B,SAYmCu5B,wBAAyB,CAAF,C,KAA1D,EAAA/jB,U,MAAU,EAAApS,8B,qHEvDf,WACA,OAUA,GAHA,MAEA,OACA,Q,GACA,O,+DCAwB,4BAA6E,YAA6B,kB,uBAA7B,4DDErG,iBA2CI,WAAmB6J,EAAgC/B,EAAgC+sB,GAAhE,KAAAhrB,aAAgC,KAAA/B,MAAgC,KAAA+sB,iCAP1E,KAAAnsB,UAA+B,KAC9B,KAAAR,gBAAkB,IAAI,EAAAhT,aAChC,KAAAiT,QAAkB,KAClB,KAAAR,MAAgB,OAChB,KAAAF,WAA4C,CAAEE,MAAO,EAAAmtB,yBAAyBqC,iBAAkBzuB,UAAW/S,KAAK+S,UAAWqsB,WAAY,I,OAKvI,YAAA5/B,SAAA,aAIA,YAAAiT,gBAAA,WACIzS,KAAKgS,MAAQ,OACbhS,KAAKmS,IAAIO,iBAGb,YAAAE,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAI,QAAA,WACIjT,KAAKgS,MAAQ,QAGjB,YAAAkB,gBAAA,SAAgBC,GACZnT,KAAKgS,MAAQ,QAyBjB,YAAAyvB,sBAAA,WACIzhC,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBqC,iBAAkBzuB,UAAW/S,KAAK+S,UAAWqsB,WAAY,M,iCA5DxIh1B,GAAyB,mI,iCAAzBA,EAAyB,sjBC/CtC,4BAAgD,sDAAsB,EAAA8I,gBAAA,MAElE,0BACI,4BACI,4BACI,4BACJ,iBACJ,iBACA,4BACI,4BACI,4BACI,2BACI,6BACJ,iBAEA,gCAAyD,wCAAS,EAAAuuB,2BAC9D,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAvBwB,sCAYqB,uE,2nBDM7B,CACR,EAAAhuB,QAAQ,eAAgB,CACpB,EAAAzB,MAAM,aACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAA3B,MAAM,OACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,UACnC,EAAAW,WAAW,eAAgB,EAAAX,QAAQ,YAEvC,EAAAQ,QAAQ,YACJ,CACI,EAAAG,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,QAAS,EAAAS,MAAM,CAAEC,QAAS,OAG1C,EAAAC,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,MAAO,EAAAS,MAAM,CAAEC,QAAS,a,EA1BxD,GAiCa,EAAAvJ,6B,+DAAAA,EAAyB,E,KAjCrC,EAAA+E,U,MAAU,CACPC,SAAU,qBACVC,YAAa,sCACbC,UAAW,CAAC,4BACZuE,WAAY,CACR,EAAAJ,QAAQ,eAAgB,CACpB,EAAAzB,MAAM,aACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAA3B,MAAM,OACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,UACnC,EAAAW,WAAW,eAAgB,EAAAX,QAAQ,YAEvC,EAAAQ,QAAQ,YACJ,CACI,EAAAG,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,QAAS,EAAAS,MAAM,CAAEC,QAAS,OAG1C,EAAAC,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,MAAO,EAAAS,MAAM,CAAEC,QAAS,e,6GAS3CG,cAAe,CAAF,C,KAArB,EAAAvE,QACQwD,UAAW,CAAF,C,KAAjB,EAAAxD,QACSgD,gBAAe,E,KAAxB,EAAAtL,Y,sHEnDL,WACA,OAUA,GAHA,MAGA,QACA,SAIA,GAHA,MAEA,OACA,QACA,S,iGCZY,6BAAqE,YAAW,kB,6BAAX,+C,yBAuBrC,yBACI,6BAAsD,iBAAC,sCAAkE,iBAC7H,kB,uBAD8E,6C,yBAU9E,yBAA0D,YAAqB,kB,uBAArB,6C,mDAF9D,yBACI,yBAAI,YAAe,iBACnB,8BACA,4BACI,2BAAiD,oHAAiC,iBAClF,2BAAoD,sHAAmC,iBAC3F,iBACJ,iB,0BANQ,2CACwB,6D,yBAU5B,yBACI,+BAAmB,wEAAnB,iBACJ,kB,2CADuB,+CAA+B,mCAA/B,CAA+B,uCD/BlG,iBAoDI,WAAmBiN,EAAgC/B,EAAgC+sB,EACvEhiB,EAAsCE,EAA8CqiB,EACpFpiB,GAFO,KAAAnJ,aAAgC,KAAA/B,MAAgC,KAAA+sB,iCACvE,KAAAhiB,eAAsC,KAAAE,kBAA8C,KAAAqiB,4BACpF,KAAApiB,kBAjBF,KAAA9K,gBAAkB,IAAI,EAAAhT,aAChC,KAAAiT,QAAkB,KAElB,KAAAR,MAAgB,OAChB,KAAA0vB,sBAAuB,EACvB,KAAA9B,gBAA8B,CAC1B/E,MAAO,CACH,CAAExnB,MAAOrT,KAAKod,gBAAgBmC,OAAO,6CAA8Cyc,QAAQ,EAAMC,SAAS,GAC1G,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,0CAA2Cyc,QAAQ,EAAMC,SAAS,GACvG,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,uCAAwCyc,QAAQ,EAAMC,SAAS,GACpG,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,4CAA6Cyc,QAAQ,EAAMC,SAAS,K,OASjH,YAAAz8B,SAAA,WACIQ,KAAKy/B,0BAA0BK,cAAc9/B,KAAK4/B,iBAClD5/B,KAAKo/B,WAAa,IAAI,EAAA3wB,KAAK,GAAIzO,KAAKod,gBAAgB5H,SAAUxV,KAAKod,gBAAgB5H,WAGvF,YAAA/C,gBAAA,WACIzS,KAAKgS,MAAQ,OACbhS,KAAKmS,IAAIO,iBAGb,YAAAE,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAI,QAAA,WACIjT,KAAKgS,MAAQ,QAGjB,YAAAkB,gBAAA,SAAgBC,GACZnT,KAAKgS,MAAQ,QAGjB,YAAAlQ,QAAA,WACI,GAAI9B,KAAKo/B,WAAWpxB,MAAQhO,KAAKo/B,WAAWpxB,KAAKhM,OAAS,EAAG,CAEzD,IAA2C,IAAvChC,KAAKo/B,WAAWpxB,KAAKoF,QAAQ,KAC7B,OAAO,EAIX,IAAK,IAAIzO,EAAI,EAAGA,EAAI3E,KAAKo/B,WAAW/rB,MAAMC,aAAatR,OAAQ2C,IAC3D,GAA8E,IAA1E3E,KAAKo/B,WAAW/rB,MAAMC,aAAa3O,GAAGvC,MAAMu/B,QAAQ,MAAO,IAAI3/B,OAC/D,OAAO,EAIf,OAAO,EACJ,OAAIhC,KAAKo/B,WAAWpxB,MAAQhO,KAAKo/B,WAAWpxB,KAAKoF,QAAQ,MACrD,GAMf,YAAAwuB,cAAA,sBACI5hC,KAAKqd,gBAAgB0T,2BAA2B/wB,KAAK+S,UAAU0I,SAASzN,KAAMhO,KAAKo/B,YAAYvqB,MAAK,SAAA5P,GAChG,EAAK8N,UAAU0I,SAASC,SAAS3Y,KAAKkC,GAEtC,EAAKsN,gBAAgByH,KAAK,EAAKjH,WAE/B,EAAK8uB,kBAEL,EAAKH,sBAAuB,KAC7BtsB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAysB,iBAAA,SAAiB1C,GAAjB,WACIp/B,KAAKqd,gBAAgB6T,8BAA8BlxB,KAAK+S,UAAU0I,SAASzN,KAAMoxB,EAAWpxB,MAAM6G,MAAK,SAAA5P,IACrC,IAA1D,EAAK8N,UAAU0I,SAASC,SAAStI,QAAQgsB,IACzC,EAAKrsB,UAAU0I,SAASC,SAAS5Y,OAAO,EAAKiQ,UAAU0I,SAASC,SAAStI,QAAQgsB,GAAa,GAGlG,EAAK7sB,gBAAgByH,KAAK,EAAKjH,WAE/B,EAAK8uB,qBACNzsB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA0sB,iBAAA,SAAiB3C,GAAjB,WACIp/B,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,+BAAiC,IAAM6f,EAAW/rB,MAAQ,IACxHrT,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,uBACjEvf,KAAKkU,WAAWuW,QAAQppB,KAAO,EAAA2qB,WAAWC,OAEjBjsB,KAAKkU,WAAWuW,QAASS,UAAUpR,WAAU,SAAA7U,GAClE,EAAK68B,iBAAiB1C,OAI9B,YAAA4C,eAAA,SAAe5C,GACX,IAAMptB,EAAQ,CACVA,MAAO,EAAAmtB,yBAAyB6C,eAChCjvB,UAAW/S,KAAK+S,UAChBqsB,WAAYnvB,KAAKmL,MAAMnL,KAAKC,UAAUkvB,KAG1Cp/B,KAAKk/B,+BAA+BntB,cAAcC,IAGtD,YAAA6vB,gBAAA,WACI7hC,KAAKo/B,WAAWpxB,KAAO,GACvBhO,KAAKo/B,WAAW/rB,MAAQrT,KAAKod,gBAAgB5H,SAC7CxV,KAAKo/B,WAAW7T,YAAcvrB,KAAKod,gBAAgB5H,UAGvD,YAAAysB,iBAAA,WACIjiC,KAAK6hC,kBACL7hC,KAAK0hC,sBAAuB,GAGhC,YAAAD,sBAAA,WACIzhC,KAAK0hC,sBAAuB,GAGhC,YAAAlC,MAAA,WACIx/B,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBgB,cAAeptB,UAAW/S,KAAK+S,UAAWqsB,WAAY,MAG9I,YAAA9pB,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAhJ3C5K,GAA0B,4S,iCAA1BA,EAA0B,grC,2BCpDvC,4BAEI,+BAAwC,wFACpC,+BAEI,8BAEA,4BACI,yBACI,iCAA6D,YAAoC,iBACrG,iBACJ,iBACA,4BAAgD,sDAAsB,EAAAyI,gBAAA,MAClE,2BACI,6BACI,6BACI,6BACJ,iBACJ,iBACA,6BACI,+BACI,8BACI,gCACI,6BACI,0BACI,0BACI,8BACJ,iBACA,+BAGA,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BACI,+BAQA,0BACI,0BACI,gCAAmB,wEAAnB,iBACJ,iBACA,+BAGA,6BACI,iCAAsE,wCAAS,EAAA0uB,mBAC3E,8BACJ,iBAOJ,iBACJ,iBAYJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACI,wBAEA,6BACI,8BACI,iCAA8C,wCAAS,EAAApC,WACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,MA3FkB,oDAI+D,8EAG7C,qDACf,iDAemD,wEAST,qEAUI,yDAA6B,uCAExB,uEAIsB,uD,wyBD9B9E,CACR,EAAA/rB,QAAQ,eAAgB,CACpB,EAAAzB,MAAM,aACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAA3B,MAAM,OACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,UACnC,EAAAW,WAAW,eAAgB,EAAAX,QAAQ,YAEvC,EAAAQ,QAAQ,YACJ,CACI,EAAAG,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,QAAS,EAAAS,MAAM,CAAEC,QAAS,OAG1C,EAAAC,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,MAAO,EAAAS,MAAM,CAAEC,QAAS,a,EA1BxD,GAiCa,EAAAlJ,8B,+DAAAA,EAA0B,E,KAjCtC,EAAA0E,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,CAAC,6BACZuE,WAAY,CACR,EAAAJ,QAAQ,eAAgB,CACpB,EAAAzB,MAAM,aACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAA3B,MAAM,OACF,EAAA0B,MAAM,CAAEC,QAAS,KAErB,EAAAC,WAAW,eAAgB,EAAAX,QAAQ,UACnC,EAAAW,WAAW,eAAgB,EAAAX,QAAQ,YAEvC,EAAAQ,QAAQ,YACJ,CACI,EAAAG,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,QAAS,EAAAS,MAAM,CAAEC,QAAS,OAG1C,EAAAC,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,MAAO,EAAAS,MAAM,CAAEC,QAAS,e,8NAS3CG,cAAe,CAAF,C,KAArB,EAAAvE,QACQwD,UAAW,CAAF,C,KAAjB,EAAAxD,QACSgD,gBAAe,E,KAAxB,EAAAtL,Y,wHExDL,WACA,OAWA,GALA,MAIA,MACA,QAGA,GADA,OACA,Q,GACA,O,wFCfI,6BAAqE,YAAW,kB,6BAAX,+CDiBzE,iBA0CI,WAAmBiN,EAAgCurB,EAA8DP,EACrG9hB,EAA8CC,GADvC,KAAAnJ,aAAgC,KAAAurB,4BAA8D,KAAAP,iCACrG,KAAA9hB,kBAA8C,KAAAC,kBAlBjD,KAAAtK,UAA+B,KAGxC,KAAAP,QAAkB,KAClB,KAAAV,WAA4C,CAAEE,MAAO,EAAAmtB,yBAAyBgB,cAAeptB,UAAW/S,KAAK+S,UAAWqsB,WAAY,IACpI,KAAAQ,gBAA8B,CAC1B/E,MAAO,CACH,CAAExnB,MAAOrT,KAAKod,gBAAgBmC,OAAO,6CAA8Cyc,QAAQ,EAAMC,SAAS,GAC1G,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,0CAA2Cyc,QAAQ,EAAMC,SAAS,GACvG,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,uCAAwCyc,QAAQ,EAAMC,SAAS,GACpG,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,4CAA6Cyc,QAAQ,EAAMC,SAAS,GACzG,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,yCAA0Cyc,QAAQ,EAAMC,SAAS,K,OAS9G,YAAAz8B,SAAA,WACIQ,KAAKy/B,0BAA0BK,cAAc9/B,KAAK4/B,kBAGtD,YAAAntB,gBAAA,aAIA,YAAAG,YAAA,aAGA,YAAAC,eAAA,sBACI7S,KAAKqd,gBAAgB4T,8BAA8BjxB,KAAK+S,UAAU0I,SAASzN,KAAMhO,KAAKo/B,YAAYvqB,MAAK,SAAA5P,GAEnG,IAAMoiB,EAAQ,EAAKtU,UAAU0I,SAASC,SAAS9Y,WAAU,SAAAs/B,GAAK,OAAAA,EAAEl0B,OAAS/I,EAAK+I,SAE/D,IAAXqZ,IACA,EAAKtU,UAAU0I,SAASC,SAAS2L,GAASpiB,GAG9C,EAAKi6B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW,EAAKA,UAAWqsB,WAAY,UACjJhqB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAsrB,YAAA,WAQI,OAAO,GAGX,YAAA/I,OAAA,WACI53B,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBqC,iBAAkBzuB,UAAW/S,KAAK+S,UAAWqsB,WAAY,QAGjJ,YAAA9pB,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAjE3C/K,GAA4B,6N,iCAA5BA,EAA4B,yzB,2BCxCzC,4BACI,8BAEA,+BAAyC,yFAA8B,EAAAuI,oBAEnE,4BACI,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BACI,6BACI,6BACI,6BACI,6BACJ,iBACJ,iBACA,8BACI,+BACI,gCAAqC,wEAArC,iBACJ,iBACJ,iBACJ,iBAEA,0CAAiB,uEAA6D,iBAE9E,6BACI,wBAEA,8BACI,8BACI,iCAA8C,wCAAS,EAAA+kB,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAGJ,iB,+BAhDU,oDAqByC,4CAAiB,6BAK/B,wDAUyC,oD,wNDf9D,CACR,EAAAnkB,QAAQ,YACJ,CACI,EAAAG,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,QAAS,EAAAS,MAAM,CAAEC,QAAS,OAG1C,EAAAC,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,MAAO,EAAAS,MAAM,CAAEC,QAAS,a,EAhBxD,GAsBa,EAAArJ,gC,+DAAAA,EAA4B,E,KAtBxC,EAAA6E,U,MAAU,CACPC,SAAU,yBACVC,YAAa,0CACbC,UAAW,GACXuE,WAAY,CACR,EAAAJ,QAAQ,YACJ,CACI,EAAAG,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,QAAS,EAAAS,MAAM,CAAEC,QAAS,OAG1C,EAAAC,WACI,SAAU,CACN,EAAAF,MAAM,CAAEC,QAAS,IACjB,EAAAV,QAAQ,MAAO,EAAAS,MAAM,CAAEC,QAAS,e,2KAQ3CG,cAAe,CAAF,C,KAArB,EAAAvE,QACQwD,UAAW,CAAF,C,KAAjB,EAAAxD,QACQ6vB,WAAY,CAAF,C,KAAlB,EAAA7vB,W,4GE3CL,aAKA,SACA,SACA,SAKA,aA+BI,WAAmB2R,EAAwCihB,EAAYrb,EAAmBsb,EAA2B1C,EAAiDxiB,EAAqC/I,GAAtF,KAAAurB,sBAAiD,KAAAxiB,eAAqC,KAAA/I,cACvM,IAAMqN,EAAgBsF,EAEtB9mB,KAAKkhB,mBAAqBA,EAC1BlhB,KAAKwhB,cAAgBA,EACrBxhB,KAAKmiC,MAAQA,EAEbniC,KAAKqiC,YAAc3iB,EAAG+B,UAAUD,EAAc/B,mBAAmB,IACjEzf,KAAKoiC,UAAYA,EAEjBpiC,KAAKsiC,OAAS5iB,EAAGnB,OAAOgkB,SAAS,CAACjiB,EAAiBiD,SAAW,EAAA7G,qBAAsB4D,EAAiBkD,SAAWlD,EAAiBwE,YAAc,EAAAnI,sBAAsB6lB,YAAW,SAACv/B,EAAGC,GAAM,WAA5Kwc,CAAiL1f,KAAKqiC,aA0Z5M,OAvZW,YAAAnf,UAAP,WACI,OAAOljB,KAAKsiC,QAGT,YAAAG,QAAP,WACI,OAAOziC,KAAKwhB,cAAcxT,MAGvB,YAAAmT,cAAP,SAAqBsL,GACjB,IAAIiW,EAAW1iC,KAAKkjB,YAAYvB,MAAK,SAACnD,GAAW,OAAOA,EAAKvZ,KAAK6O,gBAAkB2Y,KAEpF,OAAgB,MAAZiW,EACO,KAGJ,IAAI,EAAAC,iBAAiB3iC,KAAKkhB,mBAAoBlhB,KAAMA,KAAKkhB,mBAAmB4C,wBAAwB2I,GAAUiW,EAAU1iC,KAAK0/B,oBAAqB1/B,KAAKkd,aAAcld,KAAKmU,cAG9K,YAAAyuB,sBAAP,SAA6BC,EAASC,GAAtC,WACQ1N,EAAOyN,EAAGrkB,OAAOmC,UAEjBoiB,EAAYF,EAAGziB,OAAO,KAAKuD,QAAQ,sBAAsB,GAEzDqf,EAAUH,EAAGziB,OAAO,KAAKuD,QAAQ,sBAAsB,GAMvDsf,EAA0B,EAAAte,mBAAmB3kB,KAAKwhB,cAAcnO,MAAMqV,eAJ3C,IAK3Bwa,EAAyBC,GACzBC,EAAyBhO,EAAKvU,EAAIsiB,GAClCF,EAL4B,MAM5BA,EAN4B,IAO5BC,EAAkBC,GAClBC,EAAkBhO,EAAKvU,EAVI,IAa/B,IAAIwiB,EAAYjO,EAAKtU,MACjBwiB,EAAYL,EAbU,GAetBK,EAAYD,IACZA,EAAYC,GAIhBN,EAAQ5iB,OAAO,QAAQuD,QAAQ,yBAAyB,GACnDpI,KAAK,IAAK6Z,EAAKxU,GACfrF,KAAK,IAAK6Z,EAAKvU,GACfnN,MAAM,cAAe,eACrB6H,KAAK,OAAQ,QACbA,KAAK,YAAa,IAClBqJ,KAAK,KAGVme,EAAU3iB,OAAO,iBAAiBuD,QAAQ,0BAA0B,GAC/DpI,KAAK,YA/BqB,IAgC1BA,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrBA,KAAK,IAAK6Z,EAAKxU,EAjCM,IAkCrBrF,KAAK,IAAK6nB,GACV7nB,KAAK,QAAS0nB,GACd1nB,KAAK,SAAU2nB,GACf9iB,OAAO,WACP7E,KAAK,QAAS,gCACdA,KAAK,cAAe,SACpBA,KAAK,aAAc,QACnB7H,MAAM,iBAAkB,UACxBA,MAAM,UAAW,cACjBA,MAAM,QAAS,QAEfA,MAAM,SAAU4M,EAAiBkD,SAAW,EAAI,MAChD+f,MAAK,SAACC,GAAW,SAAKhiB,cAAcnO,MAAMqV,kBAG/Csa,EAAQ5iB,OAAO,QAAQuD,QAAQ,yBAAyB,GACnDpI,KAAK,KAAM6Z,EAAKxU,GAChBrF,KAAK,KAAM6Z,EAAKvU,EApDU,IAqD1BtF,KAAK,KAAM6Z,EAAKxU,EAAIyiB,GACpB9nB,KAAK,KAAM6Z,EAAKvU,EAtDU,IAuD1BtF,KAAK,SAAU,QACfA,KAAK,eAAgB,IAE1B,IAAIkoB,EAAcT,EAAQxkB,OAAOmC,UAgBjC,OAfAqiB,EAAQznB,KAAK,YAAa,gBAAkBkoB,EAAY1iB,OAAS,KAGjEgiB,EAAU3iB,OAAO,QAAQuD,QAAQ,0BAA0B,GACtDpI,KAAK,YAAa4nB,IAClB5nB,KAAK,cAAe,QACpBA,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrBA,KAAK,OAAQ,QACbA,KAAK,IAAK6Z,EAAKxU,GACfrF,KAAK,IAAK6Z,EAAKvU,GACf+D,KAAKke,GAEVC,EAAUxnB,KAAK,YAAa,gBAAuC,IAArBkoB,EAAY1iB,OAAe,KAElEiiB,GAGX,YAAAU,sBAAA,SAAsBjX,GAClB,IAAI3M,EAAqB9f,KAAKkhB,mBAAmB4C,wBAAwB2I,GAE3C,MAA1B3M,EAAIwH,qBACJxH,EAAIwH,mBAAqBtnB,KAAKkhB,mBAAmBI,4BAA4BxB,IAMjF,IAHA,IAAIyB,EAAyBzB,EAAIwH,mBAE7BD,EAAQ,KACH1iB,EAAI,EAAGA,EAAI4c,EAAavf,SAAU2C,EACnC4c,EAAa5c,KAAO3E,KAAKyiC,YACzBpb,EAAQ1iB,GAQhB,OAJa,MAAT0iB,GACA9F,EAAaze,OAAOukB,EAAO,GAGxB9F,GAGH,YAAAoiB,cAAR,SAAsBH,EAAQI,EAAc3+B,GACxCya,EAAGC,OAAO,gBACLjM,MAAM,UAAW,IAGlB,YAAAmwB,cAAR,SAAsB1wB,EAAYywB,EAAc3+B,GAC5Cya,EAAGC,OAAO,mBAAmB4jB,KAAKvjC,KAAKwhB,cAAcnO,MAAMqV,gBAC3DhJ,EAAGC,OAAO,uBAAuB4jB,KAAKvjC,KAAKwhB,cAAcxT,MAEzD0R,EAAGC,OAAO,uBAAuB4jB,KAAKt+B,EAAKA,KAAKoO,OAChDqM,EAAGC,OAAO,2BAA2B4jB,KAAKt+B,EAAKA,KAAK6O,eAEpD4L,EAAGC,OAAO,+BAA+B4jB,KAAKvjC,KAAKkhB,mBAAmB6F,uBAAuB/mB,KAAKwhB,cAAc3B,kBAAkBxM,MAAMqV,gBACxIhJ,EAAGC,OAAO,mCAAmC4jB,KAAKvjC,KAAKkhB,mBAAmB6F,uBAAuB/mB,KAAKkhB,mBAAmB4C,wBAAwB7e,EAAKA,KAAK6O,eAAe+L,kBAAkBxM,MAAMqV,gBAElM,IACIob,EADmBpkB,EAAGC,OAAO,gBAAgBnB,OACNuH,wBAEvCqC,EAAM,CAAExH,EAAGzN,EAAM6P,MAAOnC,EAAG1N,EAAM8P,OAKhC9P,EAAM8P,MAAQ6gB,EAAgB/iB,OAJJ,GAI+BmF,SAAS6d,gBAAgBC,eAEnF5b,EAAIvH,EAAI1N,EAAM8P,MAAQ6gB,EAAgB/iB,OANX,IAU1B5N,EAAM6P,MAAQ8gB,EAAgBhjB,MATJ,EAS8BoF,SAAS6d,gBAAgBE,cAElF7b,EAAIxH,EAAIzN,EAAM6P,MAAQ8gB,EAAgBhjB,MAXX,GAc/BpB,EAAGC,OAAO,gBACLjM,MAAM,OAAQ0U,EAAIxH,EAAI,MACtBlN,MAAM,MAAO0U,EAAIvH,EAAI,OAGtB,YAAAqjB,eAAR,SAAuBV,EAAQI,EAAc3+B,GACzCya,EAAGC,OAAO,gBACLjM,MAAM,UAAW,GACjBA,MAAM,OAAQ,YACdA,MAAM,MAAO,aAGf,YAAA6M,OAAP,sBACQyB,EAAOhiB,KACPmkC,EAAgBnkC,KAAKsiC,OAAO5gB,cAEhChC,EAAGC,OAAO,sCAAwCrf,SAC9CN,KAAKoiC,WACL1iB,EAAGC,OAAO,qCAAuCrf,SAGrD,IAAIuiC,EAAK7iC,KAAKmiC,MAAMiC,OAAO,IAAK,gBAAgBzgB,QAAQ,eAAe,GAAMpI,KAAK,YAAavb,KAAKwhB,cAAcxT,MAAMuN,KAAK,eAAgBvb,KAAKoiC,WAClJS,EAAGtnB,KAAK,cAAe,cAEvB,IAAI8oB,EAAQxB,EAAGziB,OAAO,KAAKuD,QAAQ,oBAAoB,GAAMpI,KAAK,YAAavb,KAAKwhB,cAAcxT,MAGlGq2B,EAAMjkB,OAAO,KAAKuD,QAAQ,cAAc,GACnCpI,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACvBA,KAAK,eAAgB,KACrB6K,UAAU,QACVnhB,KAAKjF,KAAKsiC,OAAOgC,SACjBC,KAAK,QAELhpB,KAAK,KAAK,SAACioB,EAAQ7+B,GAChB,MAAO,IAAM6+B,EAAEt+B,OAAO0b,EAAI,IAAO4iB,EAAEt+B,OAAQ,EACvC,KAAQs+B,EAAEt+B,OAAO2b,EAAI2iB,EAAEtsB,OAAO2J,GAAK,EACnC,IAAM2iB,EAAEtsB,OAAO0J,EACf,IAAO4iB,EAAEtsB,OAAQ,KAI7B,IAAIstB,EAAUH,EAAMjkB,OAAO,KAAKuD,QAAQ,gBAAgB,GACxD6gB,EAAQpe,UAAU,QACbnhB,KAAKk/B,GACLI,KAAK,QACLjhC,QAAO,SAASkgC,GAAU,MAAgC,cAAzBA,EAAEv+B,KAAK6O,iBACxC6P,QAAQ,uBAAuB,GAC/BpI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE5iB,EAAKN,EAAiBiD,SAAW,KACzDhI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE3iB,EAAIP,EAAiBkD,SAAW,EAAIlD,EAAiBwE,WAAa,KAC1FvJ,KAAK,QAAQ,SAACioB,GAAW,SAAKpB,UAA8C,MAAjCoB,EAAEv+B,KAAK2c,uBAAiC,EAAA7E,4BAA8B,EAAAF,0BAA6B,EAAAG,6BAC9IzB,KAAK,QAAS+E,EAAiBmkB,YAC/BlpB,KAAK,SAAU+E,EAAiBwE,YAChCvJ,KAAK,UAAU,SAACioB,GAAW,SAAKpB,UAA8C,MAAjCoB,EAAEv+B,KAAK2c,uBAAiC,KAAO,OAAU,QACtGrG,KAAK,KAAM,GACXA,KAAK,gBAAgB,SAACioB,GAAW,OAAAA,EAAEv+B,KAAK6O,iBACxCyH,KAAK,kBAAkB,SAACioB,GACrB,OAAiC,MAAjCA,EAAEv+B,KAAK2c,0BAEV1hB,GAAGogB,EAAiBokB,yBAAyB,SAASvxB,EAAYlO,GAAa+c,EAAK2hB,cAAcxwB,EAAOnT,KAAMiF,MAC/G/E,GAAGogB,EAAiBqkB,wBAAwB,SAASxxB,EAAYlO,GAAa+c,EAAK6hB,cAAc1wB,EAAOnT,KAAMiF,MAC9G/E,GAAGogB,EAAiBskB,wBAAwB,SAASzxB,EAAYlO,GAAa+c,EAAKkiB,eAAe/wB,EAAOnT,KAAMiF,MAGpHu/B,EAAQpe,UAAU,iBACbnhB,KAAKk/B,GACLI,KAAK,iBACLjhC,QAAO,SAASkgC,GAAU,MAAgC,cAAzBA,EAAEv+B,KAAK6O,iBACxC6P,QAAQ,uBAAuB,GAC/BpI,KAAK,KAAK,SAACioB,GACR,OAAAA,EAAE5iB,EAAKN,EAAiBmkB,WAAa,KAExClpB,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE3iB,EAAIP,EAAiBkD,SAAW,EAAIlD,EAAiBwE,WAAa,KAC1FvJ,KAAK,YAAa+E,EAAiBukB,kBAAoB,MACvDtpB,KAAK,UAAU,SAACioB,GAAW,SAAKpB,UAA8C,MAAjCoB,EAAEv+B,KAAK2c,uBAAiC,KAAO,OAAU,QACtGrG,KAAK,gBAAgB,SAACioB,GAAW,OAAAA,EAAEv+B,KAAK6O,iBACxCyH,KAAK,kBAAkB,SAACioB,GAAW,OAAiC,MAAjCA,EAAEv+B,KAAK2c,0BAC1CrG,KAAK,cAAe,cACpBA,KAAK,cAAe,QACpBA,KAAK,YAAa+E,EAAiBukB,mBACnCtpB,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrBA,KAAK,QAAS+E,EAAiBmkB,YAC/BlpB,KAAK,SAAU+E,EAAiBwE,WAAa,GAC7C1E,OAAO,WACP7E,KAAK,QAAS,gCACdA,KAAK,OAAQ,SACbA,KAAK,SAAU+E,EAAiBwE,WAAa,GAC7CpR,MAAM,aAAc,UACpBA,MAAM,iBAAkB,UACxBA,MAAM,UAAW,cACjBA,MAAM,QAAS,SACfA,MAAM,SAAW4M,EAAiBwE,WAAa,EAAK,MACpDpR,MAAM,QAAS4M,EAAiBmkB,WAAa,MAC7ClB,MAAK,SAASC,GACX,IAAIhN,EAAwC,MAAjCgN,EAAEv+B,KAAK2c,uBAAiCI,EAAKd,mBAAmB2F,oBAAoB2c,EAAEv+B,KAAK2c,wBAAwBvO,MAAMqV,eAAiB1G,EAAKR,cAAcnO,MAAMqV,eAG9K,QADA,EAAA/D,mBAAmB6R,EAAMlW,EAAiBukB,mBAAsBvkB,EAAiBmkB,WAAa,KAAKjO,EAAOA,EAAKsO,UAAU,EAAG,IAAM,OAC3HtO,KAEVt2B,GAAGogB,EAAiBokB,yBAAyB,SAASvxB,EAAYlO,GAAa+c,EAAK2hB,cAAcxwB,EAAOnT,KAAMiF,MAC/G/E,GAAGogB,EAAiBqkB,wBAAwB,SAASxxB,EAAYlO,GAAa+c,EAAK6hB,cAAc1wB,EAAOnT,KAAMiF,MAC9G/E,GAAGogB,EAAiBskB,wBAAwB,SAASzxB,EAAYlO,GAAa+c,EAAKkiB,eAAe/wB,EAAOnT,KAAMiF,MAGpHo/B,EAAMjkB,OAAO,KAAKuD,QAAQ,SAAS,GAC9ByC,UAAU,QACVnhB,KAAKk/B,GACLI,KAAK,QACLjhC,QAAO,SAASkgC,GAAU,MAAgC,cAAzBA,EAAEv+B,KAAK6O,iBACxC6P,QAAQ,qBAAqB,GAC7BpI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE5iB,EAAKN,EAAiBiD,SAAW,KACzDhI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE3iB,EAAKP,EAAiBkD,SAAW,KACzDjI,KAAK,QAAQ,SAACioB,GAAW,OAAiC,MAAjCA,EAAEv+B,KAAK2c,uBAAiC,EAAA9E,oBAAsB,EAAAF,qBACvFrB,KAAK,QAAS+E,EAAiBiD,UAC/BhI,KAAK,SAAU+E,EAAiBkD,UAChCjI,KAAK,KAAM,GACXA,KAAK,UAAU,SAACioB,GAAW,SAAKpB,UAA8C,MAAjCoB,EAAEv+B,KAAK2c,uBAAiC,KAAO,OAAU,QACtGrG,KAAK,gBAAgB,SAACioB,GAAW,OAAAA,EAAEv+B,KAAK6O,iBACxCyH,KAAK,kBAAkB,SAACioB,GAAW,OAAiC,MAAjCA,EAAEv+B,KAAK2c,0BAC1CyE,MAAK,SAASmd,GACkB,cAAzBA,EAAEv+B,KAAK6O,gBACH0vB,EAAEv+B,KAAKoe,gBACPmgB,EAAEv+B,KAAKme,aAAe,CAAExC,EAAG4iB,EAAE5iB,EAAIN,EAAiBiD,SAAW,EAAG1C,EAAG2iB,EAAE3iB,EAAgC,EAA5BP,EAAiBkD,SAAc1C,MAAmC,EAA5BR,EAAiBiD,SAAe,IAAKxC,OAAoC,EAA5BT,EAAiBkD,UAE7KggB,EAAEv+B,KAAKme,aAAe,CAAExC,EAAG4iB,EAAE5iB,EAAIN,EAAiBiD,SAAW,EAAG1C,EAAG2iB,EAAE3iB,EAAIP,EAAiBkD,SAAW,EAAG1C,MAAOR,EAAiBiD,SAAUxC,OAAQT,EAAiBkD,cAI9KtjB,GAAGogB,EAAiBokB,yBAAyB,SAASvxB,EAAYlO,GAAa+c,EAAK2hB,cAAcxwB,EAAOnT,KAAMiF,MAC/G/E,GAAGogB,EAAiBqkB,wBAAwB,SAASxxB,EAAYlO,GAAa+c,EAAK6hB,cAAc1wB,EAAOnT,KAAMiF,MAC9G/E,GAAGogB,EAAiBskB,wBAAwB,SAASzxB,EAAYlO,GAAa+c,EAAKkiB,eAAe/wB,EAAOnT,KAAMiF,MAGpH,IAAM8/B,EAAuB,EAAvBA,EAAiC,GACnCC,EAASX,EAAMjkB,OAAO,KAAKuD,QAAQ,yBAAyB,GAChEqhB,EAAO5e,UAAU,QAAQnhB,KAAKjF,KAAKsiC,OAAOgC,SAASC,KAAK,QACnD5gB,QAAQ,4BAA4B,GACpCpI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAEt+B,OAAO0b,EAAImkB,EAAmB,KACtDxpB,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAEt+B,OAAO2b,EAAIP,EAAiBkD,SAAW,EAAIuhB,EAAoB,KACvFxpB,KAAK,QAASwpB,GACdxpB,KAAK,SAAUwpB,GACfxpB,KAAK,QAAQ,SAACioB,GAAW,SAAKpB,UAAqD,MAAxCoB,EAAEt+B,OAAOD,KAAK2c,uBAAiC,EAAA7E,4BAA8B,EAAAF,0BAA6B,EAAAG,6BAC1JgoB,EAAO5e,UAAU,QAAQnhB,KAAKjF,KAAKsiC,OAAOgC,SAASC,KAAK,QACnD5gB,QAAQ,4BAA4B,GACpCpI,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,KAAK,SAACioB,GAAW,WAAOA,EAAEt+B,OAAO0b,EAAImkB,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAOvB,EAAEt+B,OAAO2b,EAAIP,EAAiBkD,SAAW,EAAIuhB,EAAoB,EAA0B,EAApBA,EAAyB,GACrM,IAAOvB,EAAEt+B,OAAQ,EAAI,KAAOs+B,EAAEt+B,OAAO2b,EAAIP,EAAiBkD,SAAW,EAAIuhB,EAAoB,EAAKA,EAAoB,GACtH,KAAOvB,EAAEt+B,OAAO0b,EAAImkB,EAAmB,EAAKA,EAAmB,GAAM,KAAOvB,EAAEt+B,OAAO2b,EAAIP,EAAiBkD,SAAW,EAAIuhB,EAAoB,EAAIA,EAAoB,MAI7KV,EAAMjkB,OAAO,KAAKuD,QAAQ,0BAA0B,GAC/CyC,UAAU,QACVnhB,KAAKk/B,GACLI,KAAK,QACLjhC,QAAO,SAASkgC,GAAU,MAAgC,cAAzBA,EAAEv+B,KAAK6O,iBACxC6P,QAAQ,+BAA+B,GACvCpI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE5iB,EAAKN,EAAiBiD,SAAW,KACzDhI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE3iB,EAAKP,EAAiBkD,SAAW,KACzDjI,KAAK,QAAS+E,EAAiBiD,UAC/BhI,KAAK,SAAU+E,EAAiBkD,UAChCjI,KAAK,OAAQ,SAGlB8oB,EAAMjkB,OAAO,KAAKuD,QAAQ,wBAAwB,GAC7CyC,UAAU,QACVnhB,KAAKk/B,GACLI,KAAK,QACLjhC,QAAO,SAASkgC,GAAU,MAAgC,cAAzBA,EAAEv+B,KAAK6O,iBACxC6P,QAAQ,6BAA6B,GACrCpI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE5iB,EAAKN,EAAiBiD,SAAW,KACzDhI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE3iB,EAAKP,EAAiBkD,SAAW,KACzDjI,KAAK,QAAS+E,EAAiBiD,UAC/BhI,KAAK,SAAU+E,EAAiBkD,UAChCjI,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,eAAgB,KACrBA,KAAK,mBAAoB,OACzBA,KAAK,gBAAgB,SAACioB,GAAW,OAAAA,EAAEv+B,KAAK6O,iBAG7CuwB,EAAMjkB,OAAO,KAAKuD,QAAQ,mBAAmB,GACxCpI,KAAK,cAAe,cACpBA,KAAK,YAAa+E,EAAiB2kB,iBACnC1pB,KAAK,kBAAmB,SACxBA,KAAK,eAAgB,GACrB6K,UAAU,iBACVnhB,KAAKk/B,GACLI,KAAK,iBACL5gB,QAAQ,sBAAsB,GAC9BpI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE5iB,EAAKN,EAAiBiD,SAAW,EAAK,KAC9DhI,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE3iB,EAAKP,EAAiBkD,SAAW,EAAK,KAC9DjI,KAAK,QAAS+E,EAAiBiD,SAAW,GAAK,GAC/ChI,KAAK,SAAU+E,EAAiBkD,SAAW,GAK3CjI,KAAK,UAAU,SAACioB,GAAW,SAAKpB,UAA8C,MAAjCoB,EAAEv+B,KAAK2c,uBAAiC,KAAO,OAAU,QACtGrG,KAAK,gBAAgB,SAACioB,GAAW,OAAAA,EAAEv+B,KAAK6O,iBACxCyH,KAAK,kBAAkB,SAACioB,GAAW,OAAiC,MAAjCA,EAAEv+B,KAAK2c,0BAC1CxB,OAAO,WACP7E,KAAK,QAAS,gCACdA,KAAK,cAAe,SACpBA,KAAK,aAAc,QACnB7H,MAAM,iBAAkB,UACxBA,MAAM,UAAW,cACjBA,MAAM,QAAS4M,EAAiBiD,SAAW,GAAK,EAAI,MACpD7P,MAAM,SAAU4M,EAAiBkD,SAAW,EAAI,MAChD+f,MAAK,SAACC,GAAW,OAAAA,EAAEv+B,KAAKoO,SACxBnT,GAAGogB,EAAiBokB,yBAAyB,SAASvxB,EAAYlO,GAAa+c,EAAK2hB,cAAcxwB,EAAOnT,KAAMiF,MAC/G/E,GAAGogB,EAAiBqkB,wBAAwB,SAASxxB,EAAYlO,GAAa+c,EAAK6hB,cAAc1wB,EAAOnT,KAAMiF,MAC9G/E,GAAGogB,EAAiBskB,wBAAwB,SAASzxB,EAAYlO,GAAa+c,EAAKkiB,eAAe/wB,EAAOnT,KAAMiF,MAGhHjF,KAAKoiC,WACLiC,EAAMjkB,OAAO,KAAKuD,QAAQ,6BAA6B,GAClDyC,UAAU,QACVnhB,KAAKk/B,GACLI,KAAK,QACLjhC,QAAO,SAASkgC,GACb,MAAiC,cAAzBA,EAAEv+B,KAAK6O,eAAkF,MAAjC0vB,EAAEv+B,KAAK2c,0BAE1E+B,QAAQ,+BAA+B,GACvCpI,KAAK,gBAAgB,SAACioB,GAAW,OAAAA,EAAEv+B,KAAK6O,iBACxCyH,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE5iB,EAAKN,EAAiBiD,SAAW,EAAMjD,EAAyC,yBAAI,KAC5G/E,KAAK,KAAK,SAACioB,GAAW,OAAAA,EAAE3iB,EAAiD,GAA5CP,EAAiB4kB,yBAAkC5kB,EAAiB4kB,yBAA2B,KAC5HxxB,MAAM,cAAe,eACrBA,MAAM,SAAU,WAChBA,MAAM,OAAQ,WACdA,MAAM,YAAa4M,EAAiB4kB,yBAA2B,MAC/DtgB,KAAK,KACL1kB,GAAG,SAAS,SAASiT,EAAOqL,GAAQwD,EAAKb,cAAc3C,EAAKvZ,KAAK6O,eAAeqxB,kCAE3EnlC,KAAK4iC,sBAAsBC,EAAI,uBAE/B7iC,KAAK4iC,sBAAsBC,EAAI,sBA1bnC,EAAAtf,SAAmB,IACnB,EAAAC,SAAmB,GACnB,EAAAyhB,gBAA0B,EAC1B,EAAAC,yBAAmC,GAEnC,EAAAT,WAAqB,IACrB,EAAA3f,WAAqB,GACrB,EAAA+f,kBAA4B,EAE5B,EAAAH,wBAA0B,aAE1B,EAAAC,uBAAyB,YAEzB,EAAAC,uBAAyB,aAob3C,EAncA,GAAa,EAAAtkB,oB,mHCbb,WAOA,GANA,MACA,MAEA,MAEA,MACA,Q,GAIA,O,2GCVE,4BAAqE,YAAW,kB,6BAAX,+C,mDAGnE,0BACE,wCAAiB,gHAAiC,4FAAuC,iBAC3F,iB,iCADmB,8D,mDAEnB,0BACE,sCAAe,gHAAiC,4FAAuC,iBACzF,iB,iCADiB,8D,mDAEjB,0BACE,8CAAuB,gHAAiC,4FAAuC,iBACjG,iB,iCADyB,8D,mDAEzB,0BACE,0CAAmB,gHAAiC,4FAAuC,iBAC7F,iB,iCADqB,8D,yBAXvB,0BACE,8BAGA,8BAGA,8BAGA,8BAGF,kB,6BAZQ,oDAGA,yDAGA,iEAGA,8DDAV,iBAWI,WAAqBvM,EAA2BG,EAAgCgJ,EACpEE,EAA8CgoB,GADrC,KAAArxB,UAA2B,KAAAG,aAAgC,KAAAgJ,eACpE,KAAAE,kBAA8C,KAAAgoB,SAJ1D,KAAA5yB,QAAkB,KAClB,KAAAR,MAAgB,M,OAMhB,YAAAxS,SAAA,aAGA,YAAA6lC,cAAA,SAAelyB,GACI,SAAVA,EACDnT,KAAKslC,aAEW,SAAVnyB,EACNnT,KAAKulC,aAEW,WAAVpyB,GACNnT,KAAKwlC,gBAIb,YAAAF,WAAA,WACwB,aAAftlC,KAAKgS,QACNhS,KAAKgS,MAAQ,QAIrB,YAAAuzB,WAAA,WACwB,QAAfvlC,KAAKgS,MAEAhS,KAAK2tB,cAAc8X,WAIrBzlC,KAAK0lC,eAHL1lC,KAAKgS,MAAQ,WAMI,aAAfhS,KAAKgS,MACXhS,KAAK0lC,eAEgB,qBAAf1lC,KAAKgS,MAE6B,MAAnChS,KAAK2tB,cAAc+I,aACpB12B,KAAKgS,MAAQ,eAGbhS,KAAK0lC,eAGY,iBAAf1lC,KAAKgS,OACXhS,KAAK0lC,gBAIb,YAAAA,aAAA,sBACI1lC,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQ+Z,gBAAiB9tB,KAAK2tB,eAAgB9Y,MAAM,SAAAqd,GAErB,MAA3BA,EAAOiE,kBACR,EAAKnkB,MAAQ,mBACb,EAAK2b,cAAgBuE,GAEQ,MAAvBA,EAAOwE,cACb,EAAK1kB,MAAQ,eACb,EAAK2b,cAAgBuE,IAGrB,EAAKhe,WAAWwD,OAEhB,EAAKxD,WAAa,EAAKgJ,aAAasM,KAAM,EAAAwB,sBAAuB,CAC7DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB,EAAKtW,WAAWuW,QAAQjY,QAAU,EAAK4K,gBAAgBmC,OAAQ,oDAC/D,EAAKrL,WAAWuW,QAAQQ,WAAa,EAAK7N,gBAAgBmC,OAAQ,2CAClE,EAAKrL,WAAWuW,QAAQkb,WAAa,EAAKvoB,gBAAgBmC,OAAQ,sBAEzC,EAAKrL,WAAWuW,QAAUS,UAAUpR,WAAW,SAAA7U,GACpE,EAAKmgC,OAAOQ,SAAS,CAAC,oCAG9BxwB,OAAM,SAAEqC,GACR,EAAKnC,MAAOmC,OAKpB,YAAA+tB,aAAA,sBACIxlC,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQ8Z,aAAc7tB,KAAK2tB,eAAgB9Y,MAAM,SAAA4C,GAClD,EAAKvD,WAAWwD,UAChBtC,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAC,MAAA,SAAOD,GACCrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAxG/C5L,GAAuB,oL,iCAAvBA,EAAuB,0QClBpC,4BACE,8BAEA,8BAcF,kB,MAhBQ,oDAEA,6E,oJDUR,GAKa,EAAAA,2B,+DAAAA,EAAuB,E,KALnC,EAAA0F,U,MAAW,CACRC,SAAU,kBACVC,YAAa,mCACbC,UAAW,Q,4PEhBf,WAEA,Q,GAEA,OACA,O,gFCDQ,yBAA4C,YAAoC,kB,uBAApC,iE,yBAD9C,yBACE,6BACF,kB,6BAD0B,0D,yFAI5B,0BACE,4BACE,8BAAgC,uGAAyB,qGAAzD,iBACF,iBACA,4BACE,0BAA8E,gG,uBAA+F,iBAC7K,0BAA8C,uG,uBAA6F,iBAC7I,iBACF,iB,gCANW,oDAAwB,wBAAxB,CAAwB,oBAAxB,CAAwB,yBAAxB,CAAwB,2BAG5B,6EAAmC,4EACyC,iG,yBAa3E,yBAAsD,YAAkB,kB,uBAAlB,6C,yBAT5D,4BACE,wBACE,sBACA,sBACA,6BAAyD,YAC3D,iBACA,2BACE,yBACE,6BACA,6BACF,iBACF,iBACF,kB,8BAR6D,sEAK9B,mE,yBAI/B,4BACE,6BACA,YACF,kB,8BADE,uE,mDAhBJ,0BACE,gCAaA,+BAIA,4BACE,2BAAsC,6F,uBAAoF,iBAC5H,iBACF,iB,gCApByB,qEAaA,8EAKwC,iGD7BrE,iBAoBI,WAAqByE,GAArB,WAAqB,KAAAA,UATX,KAAA8xB,QAA6B,IAAI,EAAAtmC,aAUvCS,KAAKi3B,WAAa,EAAAC,WAAW1hB,QAAO,SAAE2hB,GAClC,EAAKpjB,QAAQoa,wBAAyB,EAAK2X,YAAa,EAAKvP,QAAQl1B,KAAM,EAAKk1B,QAAQjT,OAAQ,EAAKqK,cAAclM,WAAY5M,MAAM,SAAAuiB,GACjID,EAASllB,KAAMmlB,S,OAK3B,YAAA53B,SAAA,WACIQ,KAAK8lC,YAAc,KACnB9lC,KAAKquB,SAAW,KAChBruB,KAAK+lC,YAAa,GAGtB,YAAApO,kBAAA,SAAmB7pB,GACf9N,KAAKquB,SAAWvgB,EAAE8b,KAAKroB,GACvBvB,KAAK+lC,WAAgC,MAAjB/lC,KAAKquB,UAG7B,YAAA2X,cAAA,sBACShmC,KAAK+lC,aACN/lC,KAAK6lC,QAAQ7rB,KAAM,MAEnBha,KAAK+T,QAAQqa,uBAAwBpuB,KAAKquB,SAAUruB,KAAKu2B,QAAQljB,OAAQwB,MAAM,SAAA4C,GAC3E,EAAK8e,QAAQH,UAAW,EACxB,EAAKG,QAAQlc,OAAS,CAClBmc,KAAM,UACNjI,UAAW9W,EAAS8W,UACpBC,KAAM/W,EAAS+W,KACfnb,MAAOoE,EAASpE,UAEpB+B,OAAO,SAAAtH,GACP,EAAK+3B,QAAQ7rB,KAAMlM,EAAEwH,YAKjC,YAAA2wB,qBAAA,WACI,IAAIC,EAAgBlmC,KAAKu2B,QAAQljB,MACjBrT,KAAKu2B,QAAQl1B,KAE7BrB,KAAKu2B,QAAQH,UAAW,EAExBp2B,KAAKu2B,QAAQlc,OAAS,CAClBmc,KAAM,mBACNnjB,MAAO6yB,IAIf,YAAAC,WAAA,sBACwBnmC,KAAKu2B,QAAQljB,MACjBrT,KAAKu2B,QAAQl1B,KAE7B,GAAKrB,KAAKu2B,QAAQH,SAAW,CACzB,IAAI/b,EAASra,KAAKu2B,QAAQlc,OAEN,oBAAfA,EAAOmc,MACRx2B,KAAKu2B,QAAQH,UAAW,EACxBp2B,KAAKu2B,QAAQlc,OAAS,MAED,WAAfA,EAAOmc,OACbx2B,KAAK6lC,QAAQ7rB,KAAM,MAEnBha,KAAK+T,QAAQua,uBAAwBjU,EAAOkU,UAAWlU,EAAOmU,MAAO3Z,MAAM,SAAA4C,GACvE,EAAK8e,QAAQH,UAAW,EACxB,EAAKG,QAAQlc,OAAS,KAEtB,EAAKyrB,YAAc,KACnB,EAAKC,WAAmC,MAApB,EAAKD,eACzB1wB,OAAO,SAAAtH,GACP,EAAK+3B,QAAQ7rB,KAAMlM,EAAEwH,a,iCApF5BzL,GAAwB,mC,iCAAxBA,EAAwB,w8BCbrC,4BACE,kCACE,4BACE,6BAGF,iBACA,4BAAoC,YAAyC,iBAC7E,+BASA,8BAsBF,iBACF,kB,MArCW,+DAI6B,qFAC9B,wDASA,yD,kPDVV,GAMa,EAAAA,4B,+DAAAA,EAAwB,E,KANpC,EAAAsF,U,MAAW,CAERC,SAAU,mBACVC,YAAa,oCACbC,UAAW,Q,yCAIFqe,cAAe,CAAF,C,KAArB,EAAApe,QACQgnB,QAAS,CAAF,C,KAAf,EAAAhnB,QACQ8X,MAAO,CAAF,C,KAAb,EAAA9X,QACSs2B,QAAS,CAAF,C,KAAhB,EAAA5+B,Y,gHElBL,WAEA,QACA,S,GAEA,OACA,O,4ICFI,0BACE,4BACE,8BAAgC,qGAAuB,qGAAvD,iBACF,iBACA,4BACE,0BAA8E,gG,uBAA2F,iBACzK,0BAAsC,+F,uBAAoF,iBAC1H,0BAA8C,8F,uBAAkF,iBAClI,iBACF,iB,gCAPW,oDAAwB,sBAAxB,CAAwB,oBAAxB,CAAwB,yBAAxB,CAAwB,2BAG5B,6EAAmC,wEACyB,+FACO,+F,sBAIxE,4BACE,6BACF,kB,yBACA,4BACE,6BACA,YACF,kB,8BADE,uE,yBAEF,4BACE,6BACA,YACF,kB,8BADE,gE,mDAVJ,0BACE,+BAGA,+BAIA,+BAIA,4BACE,2BAAsC,6F,uBAAoF,iBAC5H,iBACF,iB,gCAdyB,oEAGA,qEAIA,oEAKwC,iGDnBrE,iBAoBI,WAAqB8M,GAArB,WAAqB,KAAAA,UATX,KAAA8xB,QAA6B,IAAI,EAAAtmC,aAUvCS,KAAKi3B,WAAa,EAAAC,WAAW1hB,QAAO,SAAE2hB,GAClC,EAAKpjB,QAAQ0a,mBAAoB,EAAK8H,QAAQ7H,cAAe,EAAK0X,UAAW,MAAOvxB,MAAM,SAAAuiB,GACtFD,EAASllB,KAAMmlB,S,OAK3B,YAAA53B,SAAA,WACIQ,KAAKomC,UAAY,KACjBpmC,KAAKqmC,OAAS,KACdrmC,KAAK+lC,YAAa,GAGtB,YAAApO,kBAAA,SAAmB7pB,GACf9N,KAAKqmC,OAASv4B,EAAE8b,KAAKxnB,MACrBpC,KAAK+lC,WAA8B,MAAf/lC,KAAKqmC,QAG7B,YAAAL,cAAA,sBACShmC,KAAK+lC,aACN/lC,KAAK6lC,QAAQ7rB,KAAM,MAEnBha,KAAK+T,QAAQ6a,kBAAmB5uB,KAAKqmC,OAAQrmC,KAAKu2B,QAAQljB,OAAQwB,MAAM,SAAA4C,GACpE,EAAK8e,QAAQH,UAAW,EACxB,EAAKG,QAAQlc,OAAS,CAClBmc,KAAM,UACNjI,UAAW9W,EAAS8W,UACpBlb,MAAOoE,EAASpE,UAEpB+B,OAAO,SAAAtH,GACP,EAAK+3B,QAAQ7rB,KAAMlM,EAAEwH,YAKjC,YAAAgxB,aAAA,sBACItmC,KAAK6lC,QAAQ7rB,KAAM,MAEnBha,KAAK+T,QAAQgb,WAAY/uB,KAAKu2B,QAAQljB,MAAO,OAAQrT,KAAKu2B,QAAQgQ,YAAY1xB,MAAM,SAAAmc,GAChF,EAAKuF,QAAQH,UAAW,EACxB,EAAKG,QAAQlc,OAAS,CAClBmc,KAAM,SACNxF,KAAMA,MAEV5b,OAAO,SAAAtH,GACP,EAAK+3B,QAAQ7rB,KAAMlM,EAAEwH,WAI7B,YAAAkxB,YAAA,WACIxmC,KAAKu2B,QAAQH,UAAW,EAExBp2B,KAAKu2B,QAAQlc,OAAS,CAClBmc,KAAM,WAId,YAAA2P,WAAA,sBAEI,GAAKnmC,KAAKu2B,QAAQH,SAAW,CAEzB,IAAI/b,EAASra,KAAKu2B,QAAQlc,OAEN,UAAfA,EAAOmc,MACRx2B,KAAKu2B,QAAQH,UAAW,EACxBp2B,KAAKu2B,QAAQlc,OAAS,MAED,WAAfA,EAAOmc,MACbx2B,KAAK6lC,QAAQ7rB,KAAM,MAEnBha,KAAK+T,QAAQ+a,kBAAmBzU,EAAOkU,WAAY1Z,MAAM,SAAA4C,GACrD,EAAK8e,QAAQH,UAAW,EACxB,EAAKG,QAAQlc,OAAS,QACtBjF,OAAO,SAAAtH,GACP,EAAK+3B,QAAQ7rB,KAAMlM,EAAEwH,WAGJ,UAAf+E,EAAOmc,OACbx2B,KAAK6lC,QAAQ7rB,KAAM,MAEnBha,KAAK+T,QAAQmb,WAAWlvB,KAAKu2B,QAAQgQ,WAAYlsB,EAAO2W,KAAKhjB,MAAO6G,MAAM,SAAA4C,GACtE,EAAK8e,QAAQH,UAAW,EACxB,EAAKG,QAAQlc,OAAS,QACtBjF,OAAO,SAAAtH,GACP,EAAK+3B,QAAQ7rB,KAAMlM,EAAEwH,a,iCAnG5BvL,GAAoB,mC,iCAApBA,EAAoB,y1BCdjC,4BACE,kCACE,4BAAsB,YAA0B,iBAChD,4BAAoC,YAAiB,iBACrD,gCAUA,8BAgBF,iBACF,kB,MA7B0B,6DACc,oDAC9B,wDAUA,yD,wODNV,GAMa,EAAAA,wB,+DAAAA,EAAoB,E,KANhC,EAAAoF,U,MAAW,CAERC,SAAU,eACVC,YAAa,gCACbC,UAAW,Q,yCAIFqe,cAAe,CAAF,C,KAArB,EAAApe,QACQgnB,QAAS,CAAF,C,KAAf,EAAAhnB,QACQ8X,MAAO,CAAF,C,KAAb,EAAA9X,QACSs2B,QAAS,CAAF,C,KAAhB,EAAA5+B,Y,qHEnBL,WAOA,GALA,MACA,MACA,MAEA,MACA,Q,GAGA,O,2GCTE,4BAAqE,YAAW,kB,6BAAX,+C,mDAGnE,0BACE,wCAAiB,gHAAiC,4FAAuC,iBAC3F,iB,iCADmB,8D,mDAEnB,0BACE,sCAAe,gHAAiC,4FAAuC,iBACzF,iB,iCADiB,8D,mDAEjB,0BACE,8CAAuB,gHAAiC,4FAAuC,iBACjG,iB,iCADyB,8D,mDAEzB,0BACE,0CAAmB,gHAAiC,4FAAuC,iBAC7F,iB,iCADqB,8D,yBAXvB,0BACE,8BAGA,8BAGA,8BAGA,8BAGF,kB,6BAZQ,oDAGA,yDAGA,iEAGA,8DDDV,iBAWE,WAAqB8M,EAA2BG,EAAgCgJ,EACtEE,EAA8CgoB,GADnC,KAAArxB,UAA2B,KAAAG,aAAgC,KAAAgJ,eACtE,KAAAE,kBAA8C,KAAAgoB,SAJtD,KAAA5yB,QAAkB,KAClB,KAAAR,MAAgB,M,OAMhB,YAAAxS,SAAA,aAGA,YAAA6lC,cAAA,SAAelyB,GACI,SAAVA,EACDnT,KAAKslC,aAEW,SAAVnyB,EACNnT,KAAKulC,aAEW,WAAVpyB,GACNnT,KAAKwlC,gBAIb,YAAAF,WAAA,WACwB,aAAftlC,KAAKgS,QACNhS,KAAKgS,MAAQ,QAIrB,YAAAuzB,WAAA,WACwB,QAAfvlC,KAAKgS,MACAhS,KAAK2tB,cAAc8X,WAIrBzlC,KAAK0lC,eAHL1lC,KAAKgS,MAAQ,WAMI,aAAfhS,KAAKgS,MACXhS,KAAK0lC,eAEgB,qBAAf1lC,KAAKgS,MAE6B,MAAnChS,KAAK2tB,cAAc+I,aACpB12B,KAAKgS,MAAQ,eAGbhS,KAAK0lC,eAGY,iBAAf1lC,KAAKgS,OACXhS,KAAK0lC,gBAIb,YAAAA,aAAA,sBACI1lC,KAAK+T,QAAQ2Z,kBAAmB1tB,KAAK2tB,eAAgB9Y,MAAM,SAAAqd,GAEvB,MAA3BA,EAAOiE,kBACR,EAAKnkB,MAAQ,mBACb,EAAK2b,cAAgBuE,GAEQ,MAAvBA,EAAOwE,cACb,EAAK1kB,MAAQ,eACb,EAAK2b,cAAgBuE,IAGvB,EAAKhe,WAAWwD,OAEhB,EAAKxD,WAAa,EAAKgJ,aAAasM,KAAM,EAAAwB,sBAAuB,CAC3DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB,EAAKtW,WAAWuW,QAAQjY,QAAU,EAAK4K,gBAAgBmC,OAAQ,oDAC/D,EAAKrL,WAAWuW,QAAQQ,WAAa,EAAK7N,gBAAgBmC,OAAQ,2CAEzC,EAAKrL,WAAWuW,QAAUS,UAAUpR,WAAW,SAAA7U,GACpE,EAAKmgC,OAAOQ,SAAS,CAAC,oCAI9BxwB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAmwB,aAAA,sBACIxlC,KAAK+T,QAAQ8Z,aAAc7tB,KAAK2tB,eAAgB9Y,MAAM,SAAA4C,GAClD,EAAKvD,WAAWwD,UAChBtC,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAC,MAAA,SAAOD,GACCrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAnG/CrL,GAAyB,oL,iCAAzBA,EAAyB,4QCjBtC,4BACE,8BAEA,8BAcF,kB,MAhBQ,oDAEA,6E,oJDSR,GAKa,EAAAA,6B,+DAAAA,EAAyB,E,KALrC,EAAAmF,U,MAAW,CACRC,SAAU,oBACVC,YAAa,qCACbC,UAAW,Q,qPEff,WAIA,GAFA,MAEA,Q,GACA,M,0JCqBK,0BAAoI,2FAAuB,kBAC1I,6BACF,iB,gCAFmE,0E,mDAGlF,0BAAkI,2FAAuB,gBACxI,6BACF,iB,gCAFmE,wE,qBAMlF,iC,KAAgD,+B,qBAChD,iC,KAA8C,mCD3BnD,iBAeI,WAAoBowB,EAAkDxiB,EAAsCnJ,GAAxF,KAAA2rB,sBAAkD,KAAAxiB,eAAsC,KAAAnJ,UAP5G,KAAA0W,QAAkB,cAQdzqB,KAAKi4B,QAAUlkB,EAAQkkB,UACvBj4B,KAAKk4B,aAAel4B,KAAKi4B,SAAWlkB,EAAQmkB,eAC5Cl4B,KAAKm4B,cAAgBn4B,KAAKi4B,SAAWj4B,KAAKk4B,cAAgBnkB,EAAQqkB,gBAElEp4B,KAAKk4B,aAAel4B,KAAKymC,cAAc,eAAiBzmC,KAAKymC,cAAc,U,OAG/E,YAAAjnC,SAAA,aAGA,YAAAinC,cAAA,SAAchc,GACVzqB,KAAKyqB,QAAUA,EAEC,gBAAZA,EACAzqB,KAAK0mC,UAAY1mC,KAAK0/B,oBAAoBngB,OAAO,qBAC9B,cAAZkL,EACPzqB,KAAK0mC,UAAY1mC,KAAK0/B,oBAAoBngB,OAAO,mBAC9B,WAAZkL,IACPzqB,KAAK0mC,UAAY1mC,KAAK0/B,oBAAoBngB,OAAO,qBAIlD,YAAAjK,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCAjCtD/R,GAAiB,sH,iCAAjBA,EAAiB,qmBCf9B,4BACI,4BACA,6BAEA,4BAWI,4BACI,uBACT,4BAEC,4BACC,yBACC,YACD,iBACD,iBAEA,2BACC,6BAGA,6BAGD,iBAEA,6BACC,wCACA,wCACD,iBAEQ,iBACA,wBACJ,iBACR,iBA1CA,kB,MAqBM,yDAK6C,mDAGA,mDAM/B,8DACA,8D,+ND3BpB,GAMa,EAAAA,qB,+DAAAA,EAAiB,E,KAN7B,EAAAgE,U,MAAU,CAEPC,SAAU,YACVC,YAAa,6BACbC,UAAW,CAAC,wB,uNEbhB,WAEA,GADA,MACA,QAIA,SAKA,GAJA,MACA,OAGA,QACA,SACA,S,4MCZA,0BACE,0BACE,4BAEI,uBACA,4BAEI,8BACI,8BAA8D,iGAAkC,WAAhG,iBACA,6BACI,4BACJ,iBACA,0BACI,6BACJ,iBACJ,iBAEA,+BACI,+BAA8D,iGAAkC,eAAhG,iBACA,8BACI,8BACJ,iBACA,2BACI,8BACJ,iBACJ,iBAEA,8BACI,iCAA8C,yFAC1C,8BACJ,iBACJ,iBACJ,iBACA,yBACL,iBACD,iBACF,iB,gCA5BuC,wCAAc,yBAC/B,4EASiB,wCAAe,wBAChC,4E,yBA4BE,gCAAoF,YAAuC,kB,uBAApE,uCAA6B,4D,mDANhG,6BACI,+BACI,6BACJ,iBACA,6BACI,gCAAsE,6GAClE,kCACJ,iBACJ,iBACA,wBACJ,iB,iCAL8E,0DAC/B,0D,yBAUnC,gCAAwE,YAAc,kB,uBAAlC,wCAAoB,6C,mDALpF,6BACI,+BAAwD,6BAA8C,iBACtG,6BACI,gCAAoE,0GAA2B,yFAC3F,wBACA,kCACJ,iBACJ,iBACA,wBACJ,iB,iCAN4E,uDAEvC,iE,yBAUzB,gCAAmE,YAAmE,kB,uBAAvF,wCAAoB,iF,mDAL/E,6BACI,+BAA+C,6BAA4C,iBAC3F,6BACI,gCAAkD,qGAAsB,oFACpE,wBACA,kCACJ,iBACJ,iBACA,wBACJ,iB,iCAN0D,kDAErB,4D,qBAO7B,6B,qBACA,6B,yBAII,gCAA8E,YAAkB,kB,uBAA9C,4CAA4B,6C,qBA+BlF,6B,qBACA,6B,wBAGA,6B,8BACI,qC,wBACJ,6B,8BACI,qC,mDA/ExB,0BACI,0BACI,iCACI,+BAWA,+BAUA,+BAUA,6BACI,+BACI,oCACA,qCACJ,iBACA,8BACI,iCAA0D,0GAA4B,iFAClF,mCACJ,iBACJ,iBACA,yBACJ,iBACA,8BACI,gCAAmD,8BAAwC,iBAC3F,8BACE,wCAAiC,mGAAqB,iFAAuF,iBAC/I,iBAEA,yBACJ,iBACA,8BACI,gCAAiD,8BAAsC,iBACvF,8BACE,wCAAiC,iGAAmB,iFAA8H,iBACpL,iBAEA,yBACJ,iBACA,8BAEI,gCAAmD,8BAAyD,iBAC5G,8BACG,wCAAe,mGAA+B,iBACjD,iBACA,yBACJ,iBACA,8BACI,gCACI,qCACA,qCACJ,iBACA,8BACI,kCAEA,kCAEJ,iBACA,yBACJ,iBAEA,8BACI,yBACA,8BAII,iCAAoF,0FAChF,8BACJ,iBACJ,iBACA,yBACJ,iBACJ,iBACJ,iBACJ,iB,mDA/FkB,iDAWuB,6DAUA,wDAYV,uDACA,2DAG+C,wDACzB,0DAQF,iDAAqB,wBAArB,CAAqB,uBAQrB,+CAAmB,sBAAnB,CAAmB,mBAAnB,CAAmB,sBAAnB,CAAmB,eASpC,iDAMH,uDACA,2DAGH,uDAEA,2DAYsC,+DD/GlE,iBA0FI,WAAoByE,EACRtE,EACAyN,EACAwiB,EACAvrB,EACAwyB,EACAz0B,EACA00B,GAPQ,KAAA7yB,UACR,KAAAtE,eACA,KAAAyN,eACA,KAAAwiB,sBACA,KAAAvrB,cACA,KAAAwyB,aACA,KAAAz0B,mBACA,KAAA00B,oBAvFZ,KAAAvyB,YAAqB,IAAIC,KAEzB,KAAAuyB,kBAA4B,EAE5B,KAAA/kC,SAAmB,EAiBnB,KAAAglC,iBAA0B,CACtB,CAAEC,SAAU,EAAAC,eAAeC,eAAgB5zB,MAAOrT,KAAK0/B,oBAAoBngB,OAAO,6CAClF,CAAEwnB,SAAU,EAAAC,eAAeE,SAAU7zB,MAAOrT,KAAK0/B,oBAAoBngB,OAAO,uCAC5E,CAAEwnB,SAAU,EAAAC,eAAeG,YAAa9zB,MAAOrT,KAAK0/B,oBAAoBngB,OAAO,2CAMnF,KAAAtK,SAAmB,KAKnB,KAAAgS,cAAwB,KAKxB,KAAA0R,UAAkB,KAKlB,KAAAyO,QAAyB,KAkBzB,KAAAC,YAAsB,EAYtB,KAAAC,WAAqB,EAErB,KAAAC,WAAqB,E,OAarB,YAAA/nC,SAAA,sBACIQ,KAAK2mC,WAAWa,mBAAmB,EAAG,KAAK3yB,MAAK,SAAA4yB,GAC5C,EAAKC,gBAAkBD,EAAiBE,UAEJ,IAAhC,EAAKD,gBAAgB1lC,SACrB,EAAKqlC,YAAa,EAClB,EAAKR,kBAAmB,GAG5B,EAAKS,WAAY,KAClBlyB,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAKkS,iBAAiBob,2BAA2BzY,MAAK,SAAA+yB,GAClD,EAAKC,kBAAoBD,EACzB,EAAKE,aAAe,GAIpB,IADA,IAAIC,EAAO,EAAKF,kBAAkB7lC,OACzB2C,EAAI,EAAGA,EAAIojC,IAAQpjC,EAIxB,IAHA,IAAIqjC,EAAO,EAAKH,kBAAkBljC,GAE9BsjC,EAAOD,EAAKlzB,MAAM9S,O,WACbwD,GAIL,IAHA,IAAInE,EAAO2mC,EAAKlzB,MAAMtP,GAElB0iC,EAAO,EAAKL,kBAAkB7lC,OACzB,EAAI,EAAG,EAAIkmC,IAAQ,EAAG,CAC3B,IAAIC,EAAQ,EAAKN,kBAAkB,GAE/Bz0B,EAAU+0B,EAAMrzB,MAAMlS,WAAU,SAAAwlC,GAAY,OAAA/mC,EAAK2M,OAASo6B,EAASp6B,SAEtD,IAAboF,IACA+0B,EAAMrzB,MAAM1B,GAAW/R,KAV1BmE,EAAI,EAAGA,EAAIyiC,IAAQziC,E,EAAnBA,GAiBb,IAAId,EAAM,EAAKmjC,kBAAkB7lC,O,WACxB2C,GAIL,IAHA,IAAIqjC,EAAO,EAAKH,kBAAkBljC,GAE9BsjC,EAAOD,EAAKlzB,MAAM9S,O,WACbwD,GACL,IAAInE,EAAO2mC,EAAKlzB,MAAMtP,GAElB4N,EAAU,EAAK00B,aAAallC,WAAU,SAAAwlC,GAAY,OAAAA,EAASp6B,OAAS3M,EAAK2M,QAE7E,IAAiB,IAAboF,EAAgB,CAChB,IAAIg1B,EAAW,EAAKN,aAAa10B,IAID,IAFHg1B,EAAS7xB,YAAY3T,WAAU,SAAAylC,GAAY,OAAAA,EAASr6B,OAASg6B,EAAKh6B,SAG3Fo6B,EAAS7xB,YAAYxT,KAAKilC,QAGN,MAApB3mC,EAAKkV,cACLlV,EAAKkV,YAAc,IAEvBlV,EAAKkV,YAAYxT,KAAKilC,GACtB,EAAKF,aAAa/kC,KAAK1B,IAlBtBmE,EAAI,EAAGA,EAAIyiC,IAAQziC,E,EAAnBA,IAJb,IAASb,EAAI,EAAGA,EAAID,IAAOC,E,EAAlBA,GA2BT,EAAK2jC,uBAAyB,EAAKT,kBACnC,EAAKU,kBAAoB,EAAKT,gBAC/B1yB,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGf,IAAImzB,EAASx4B,IAAM,2BACC,cAAhBhQ,KAAKyoC,SACLD,EAASx4B,IAAM,0CAKnB,IAAIkO,EAA+B,CAC/BwqB,WAAY,EACZC,mBAAmB,EACnBvN,IAAKoN,GAGTxoC,KAAK4oC,SAAW,IAAI,EAAAC,aAAa3qB,GAEjCle,KAAK4oC,SAASE,gBAAkB,SAACC,EAAeC,GAC5CA,EAAK5oB,OAAO,OAAQ,EAAKnL,UACzB+zB,EAAK5oB,OAAO,YAAa,EAAKmnB,WAER,MAAlB,EAAK5O,WACLqQ,EAAK5oB,OAAO,YAAa,EAAKuY,WAEd,MAAhB,EAAKyO,SACL4B,EAAK5oB,OAAO,UAAW,EAAKgnB,SAE5B,EAAK6B,gBACLD,EAAK5oB,OAAO,WAAY,EAAK6oB,iBAGrCjpC,KAAK4oC,SAASM,mBAAqB,SAACH,GAChC,EAAKt5B,aAAaK,SAEtB9P,KAAK4oC,SAASO,eAAiB,SAACvf,EAAWnS,EAAe/G,EAAad,GACnE,EAAKw5B,QAAQpqB,cAAc5c,MAAQ,GACnC,EAAKqN,aAAaY,YAEtBrQ,KAAK4oC,SAASS,cAAgB,SAACzf,EAAWnS,EAAkB/G,EAAgBd,GACxE,IAAM+d,EAAgB1d,KAAKmL,MAAM3D,GAEjCkW,EAAc0Z,WAAa,EAAKA,WAChC1Z,EAAclM,UAAY,EAAKwF,cAG/B,IADA,IAAIqiB,EAAiC,KAC5B3kC,EAAI,EAAGA,EAAI,EAAK+iC,gBAAgB1lC,SAAU2C,EAAG,CAClD,IAAI4kC,EAAsB,EAAK7B,gBAAgB/iC,GAE3C4kC,EAAI/nC,MAAQ,EAAKkzB,mBACjB4U,EAAiBC,GAIzB5b,EAAc+G,iBAAmB,EAAKA,iBACtC/G,EAAc2b,eAAiBA,EAEX,cAAhB,EAAKb,OACL,EAAKv0B,WAAa,EAAKgJ,aAAasM,KAAK,EAAA/f,wBAAyB,CAAE8gB,UAAU,EAAMC,qBAAqB,IAEzG,EAAKtW,WAAa,EAAKgJ,aAAasM,KAAK,EAAAxf,0BAA2B,CAAEugB,UAAU,EAAMC,qBAAqB,IAG/G,EAAKtW,WAAWuW,QAAQkD,cAAgBA,GAE5C3tB,KAAK4oC,SAASY,YAAc,SAAC5f,EAAWnS,EAAkB/G,EAAgBd,GACtE,IAAM0F,EAAQrF,KAAKmL,MAAM3D,GAEzB,EAAKnC,MAAM,CAAEA,MAAOA,MAI5B,YAAAm0B,kBAAA,WAII,IAHA,IAAIzB,EAAiC,KAEjCtjC,EAAM1E,KAAK6nC,kBAAkB7lC,OACxB2C,EAAI,EAAGA,EAAID,IAAOC,EACvB,GAAI3E,KAAK6nC,kBAAkBljC,GAAGqJ,OAAShO,KAAKinB,cAAe,CACvD+gB,EAAOhoC,KAAK6nC,kBAAkBljC,GAC9B,MAKJ3E,KAAKuoC,kBADG,MAARP,EACyBA,EAAKlzB,MAEL9U,KAAK8nC,cAItC,YAAA4B,aAAA,WAII,IAHA,IAAI1B,EAAgC,KAEhCtjC,EAAM1E,KAAK8nC,aAAa9lC,OACnB2C,EAAI,EAAGA,EAAID,IAAOC,EACvB,GAAI3E,KAAK8nC,aAAanjC,GAAGqJ,OAAShO,KAAKiV,SAAU,CAC7C+yB,EAAOhoC,KAAK8nC,aAAanjC,GACzB,MAKJ3E,KAAKsoC,uBADG,MAARN,EAC8BA,EAAKzxB,YAELvW,KAAK6nC,kBAGvC7nC,KAAK2pC,cAGT,YAAAC,QAAA,WAC+B,MAAvB5pC,KAAK4oC,SAASiB,OAAiB7pC,KAAK4oC,SAASiB,MAAM7nC,OAAS,EAC5DhC,KAAK4oC,SAASkB,YAEd9pC,KAAKsV,MAAM,CACP9C,QAASxS,KAAK0/B,oBAAoBngB,OAAO,mBACzCjK,MAAO,MAKnB,YAAAy0B,gBAAA,SAAgB52B,EAAO9R,GAEfrB,KAAKqnC,WADI,aAAThmC,GAOR,YAAA00B,OAAA,WACI/1B,KAAK6mC,kBAAmB,GAG5B,YAAA5Q,OAAA,WACIj2B,KAAK6mC,kBAAmB,GAa5B,YAAA8C,WAAA,sBACI/c,YAAW,WACP,EAAK9qB,QAAU,EAAKkoC,2BACrB,IAGP,YAAAA,uBAAA,WAII,IAHA,IAEIC,EAFAC,EAAalqC,KAAKmqC,yBAAyBC,UAGtCzlC,EAAI,EAAGA,EAAIulC,EAAWloC,OAAQ2C,IAAK,CACxC,IAAI0lC,EAAQH,EAAWvlC,GAOvB,GALwB,cAApB0lC,EAAMC,YAENL,EAAiBI,IAGhBA,EAAMxxB,MACP,OAAO,EAUf,OANI7Y,KAAK24B,UAAY34B,KAAKonC,UACtB6C,EAAeM,WAAWvqC,KAAK0/B,oBAAoBngB,OAAO,qDAE1Dvf,KAAK4mC,kBAAkBl0B,kBAGpB,GAGJ,YAAA4C,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCA1VtD1R,GAAqB,yT,iCAArBA,EAAqB,qD,GAAA,M,2+FCvBlC,gCAsCA,iC,MAtCM,mFAsCA,4F,+rBDrBN,GAMa,EAAAA,yB,+DAAAA,EAAqB,E,KANjC,EAAA2D,U,MAAU,CAEPC,SAAU,eACVC,YAAa,gCACbC,UAAW,CAAC,2B,6NAIyB66B,yBAAwB,E,KAA5D,EAAAK,a,MAAa,yBA4DdpB,QAAS,CAAF,C,KADN,EAAA3sB,U,MAAU,YAIXgsB,OAAQ,CAAF,C,KADL,EAAAl5B,W,sHExFL,WAOA,GANA,MACA,MAIA,OACA,QAEA,S,GACA,M,gGCGQ,4BAAqE,YAAW,kB,6BAAX,+C,sBAY7D,4BACI,6BACI,6BACI,2BAA0B,6BAA+D,iBAC7F,iBACJ,iBACJ,kB,sBAcoB,2BAA4B,6BAA6C,kB,qBAGvE,6B,qBACA,6B,mDAYF,gCAAyC,+JACrC,6BACJ,kB,mDAtBR,4BACI,4BACE,2BACE,YACA,gCACA,2BACE,kBACA,oCACA,oCACA,kBACF,iBACF,iBACF,iBACA,6BACI,iCAAsB,iHAClB,8BACJ,iBACA,iCAAsB,6GAClB,8BACJ,iBACA,mCAGJ,iBACJ,iB,0BAtBS,8EACD,qDACO,+CAGM,4DACA,6DAYJ,6C,yBA5B7B,4BACI,+BACI,4BACI,yBACI,4BAAwB,6BAA2C,iBACvE,iBACJ,iBACA,4BACI,+BAyBJ,iBACJ,iBACJ,kB,uCA3BiC,gD,mDA8BzB,0BACI,gCAAsB,8HAClB,6BACJ,iBACJ,kB,yBA5DhB,4BACI,4BACI,4BACI,6BACI,6BACI,yBAAI,YAAa,iBACrB,iBACJ,iBACJ,iBAEA,+BAQA,8BAoCA,6BACI,8BACI,gCAKJ,iBACJ,iBACJ,iBACJ,kB,uBA3DwB,4CAKV,gEAQD,8DAsCS,6CD3D9B,iBAgBI,WAAmBwE,EAAkCmJ,EAAsCkoB,EAAwBhoB,GAAhG,KAAArJ,UAAkC,KAAAmJ,eAAsC,KAAAkoB,SAAwB,KAAAhoB,kBATnH,KAAA5K,QAAkB,K,OAWlB,YAAAhT,SAAA,sBACIQ,KAAK+T,QAAQmgB,sBAAsBrf,MAAK,SAAA4C,GACpC,EAAKgnB,KAAOhnB,EAASgnB,QACtBrpB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAo1B,SAAA,SAAS1zB,GACL/W,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAA1d,sBAAuB,CAC5Dwe,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQ3T,KAAKC,GAC7B/W,KAAKkU,WAAWuW,QAAQhW,OAAQ,EAChCzU,KAAKkU,WAAWuW,QAAQ/V,mBAAmBoF,WAAU,SAACiZ,GAClD,IAAMhI,EAAM,CACR1X,MAAO0f,EAAKxd,aAAamT,eACzBlnB,IAAKuxB,EAAKvxB,IACVkpC,WAAY3X,EAAK2X,WACjBC,eAAgB5X,EAAK4X,eACrBh0B,SAAUoc,EAAKpc,SACfi0B,MAAO7X,EAAK6X,MACZC,KAAM9X,EAAK8X,KACXj0B,WAAYmc,EAAKnc,YAGrBG,EAAIkkB,MAAMl4B,KAAKgoB,OAIvB,YAAA+f,OAAA,SAAO98B,GACHhO,KAAKolC,OAAOQ,SAAS,CAAC,8BAA+B53B,KAGzD,YAAA+8B,OAAA,SAAOC,GAAP,WACIhrC,KAAK+T,QAAQsf,cAAc2X,EAAKxpC,KAAKqT,MAAK,SAAAke,GACtC,EAAK7e,WAAa,EAAKgJ,aAAasM,KAAK,EAAA1d,sBAAuB,CAC5Dwe,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB,EAAKtW,WAAWuW,QAAQjW,MAAO,EAC/B,EAAKN,WAAWuW,QAAQlW,UAAYwe,EAAK6X,MACzC,EAAK12B,WAAWuW,QAAQ9V,OAASoe,EACjC,EAAK7e,WAAWuW,QAAQhW,OAAQ,EAEhC,EAAKP,WAAWuW,QAAQ/V,mBAAmBoF,WAAU,SAAAmxB,GACjDD,EAAK33B,MAAQ43B,EAAI11B,aAAamT,eAC9BsiB,EAAKp0B,WAAaq0B,EAAIr0B,iBAE3BxB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA61B,SAAA,SAASn0B,EAAsBgc,GAA/B,WACI/yB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,+BAAiC,KAAOwT,EAAK1f,MAAQ,IACnHrT,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,uBACjEvf,KAAKkU,WAAWuW,QAAQppB,KAAO,SAE/BrB,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAK8O,QAAQmf,iBAAiBH,EAAKvxB,KAAKqT,MAAK,SAAA4C,GACzCV,EAAIkkB,MAAQlkB,EAAIkkB,MAAM33B,QAAO,SAAClB,EAAOilB,EAAO8jB,GACxC,OAAO/oC,EAAMZ,MAAQuxB,EAAKvxB,UAE/B4T,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAAC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA5F3C3J,GAA0B,wJ,iCAA1BA,EAA0B,4kDCjBvC,4BACI,4BACA,6BAGA,4BAEI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,8BAEA,+BAiEJ,iBACJ,kB,MApEc,oDAE2B,gD,qJDHzC,GAKa,EAAAA,8B,+DAAAA,EAA0B,E,KALtC,EAAAyD,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,CAAC,kC,gPEfhB,WAEA,GADA,MACA,O,+BAGA,aAeI,WAAmB4E,GAAA,KAAAA,a,OAEnB,YAAA1U,SAAA,WACIQ,KAAKorC,SAAW,IAAI,EAAA15B,SAGxB,YAAA25B,QAAA,WACIrrC,KAAKkU,WAAWwD,OAChB1X,KAAKorC,SAASn5B,KAAKjS,KAAKyoC,S,iCAlBnBz8B,GAA0B,oC,iCAA1BA,EAA0B,4sBCVvC,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,6BACI,+BACI,4BACI,4BACI,4BACI,4BACJ,iBAEA,gCAAsD,+DAClD,yBACA,gCACI,6BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACI,6BACI,8BACI,iCAAsB,wCAAS,EAAAkI,WAAA,UAE3B,4BACI,8BACJ,iBACJ,iBACA,iCAAsB,wCAAS,EAAAm3B,aAE3B,4BACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MAhC0E,iDAqBR,wE,wPD/BlE,GAKa,EAAAr/B,8B,+DAAAA,EAA0B,E,KALtC,EAAAmD,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,Q,iKERf,WAIA,GAHA,MAEA,MACA,MAOA,SAGA,SAOA,GAJA,OACA,MACA,OAEA,Q,8ICsDwB,4BAAuE,6BAAsE,kB,sBAC7I,4BAAuE,6BAAsE,kB,sBAQnJ,6BACE,6BACF,kB,sBACA,6BACE,6BACF,kB,mDAEA,6BACG,+BAA4C,6BAAmE,iBAC/G,kCAAsG,uHAA2F,iBACpM,iB,2CAFU,6EACG,4EAA4F,2CAAkC,sD,mDAcnI,8DAWM,8FACN,iB,+DAVK,uCAA0B,wCAA1B,CAA0B,yFAA1B,CAA0B,oBAA1B,CAA0B,kBAA1B,CAA0B,kBAA1B,CAA0B,sFAA1B,CAA0B,uBAA1B,CAA0B,qC,mDAiBhC,6BACE,+BAA+C,6BAAkE,iBACjH,kCAAiH,sHAAmG,iBACtN,iB,2CAFS,gFACG,+EAAuG,0CAAiC,+D,mDAGpJ,6BACM,+BAA0C,6BAAyE,iBACnH,+BAA6F,sHAA7F,iBACN,iB,2CAFa,2EACY,0EAA0E,0CAAiC,+D,mDAS5H,4BACE,2BAAG,yJAAwC,YAAgB,iBAC3D,2BAAG,uJAAiH,iBACtH,iB,0BAF6C,gD,yBAHnD,6BACE,4BACI,8BAIJ,iBACF,kB,wCAL0B,oD,sBAM1B,2BACE,6BACF,kB,mDAEA,6BAEI,6BAEA,gCAA6D,+H,uBAC3D,6BACF,iBACJ,iB,iCALiK,mDAExE,oG,mDAgB7F,gCAA2G,+H,uBACtG,6BACF,iB,2CAFK,sDAA6C,mE,mDAJvD,2BACE,gCAAoE,gI,uBAClE,6BACF,iBACA,kCAGF,iB,2CANU,qEAA6C,2EACzC,2IAE2C,gE,mDAMpD,gCAAyC,oGACvC,6BACF,kB,mDACA,gCAAwC,oGACtC,6BACF,kB,mDACA,iCAA8E,+H,uBAC5E,8BACF,iB,KAFsG,+D,mDAItG,iCAA4K,+H,uBAC1K,8BACF,iB,iCAFsE,sCAAuB,mE,yBAX/F,2BACE,kCAGA,kCAGA,kCAIA,kCAGF,kB,4DAbyB,iDAGA,gDAGsC,gDAIkC,qG,yBArBtG,6BACE,gCASG,gCAeL,kB,4DAxBS,oFASG,uH,yBA3Eb,6BACC,6BACE,6BACE,4BAEG,6DAcF,iBACH,iBAEA,6BACE,6BACE,+BAKA,+BAIF,iBAEA,6BACE,2BACE,6BAAO,8BAAoE,iBAC3E,gCAQA,8BAIA,gCAQF,iBAEF,iBACF,iBACF,iBAGA,gCA0BD,kB,4DAtF4C,sCAmB/B,oFAKA,oFASE,yDAQF,2DAIE,2FAeR,uH,gLArGf,4BAEE,4BACE,6BAEM,0BACI,4BAA8B,YAAuB,iBACrD,4BAAgC,YAAsB,iBAEtD,8BACA,8BACJ,iBACN,iBAEA,8BAEE,6BAEE,gCAGA,gCAIA,gCAKA,2BACE,yBAAG,8BAAmE,iBAAM,8BAAQ,aAAiB,iBAAS,iBAC9G,yBAAG,8BAAyE,iBAAM,8BAAQ,aAAa,iBAAS,iBAChH,yBAAG,8BAAyE,iBAAM,8BAAQ,aAAmB,iBAAS,iBACxH,iBAEA,iCA4FF,iBAEF,iBAEF,iBACF,kB,2DArII,kCAAY,yJAM4B,sDACE,qDAE3B,+DACA,+DAQL,wFAGA,yDAIA,qFAMgF,gDACM,4CACA,kDAGtF,yF,wMA3Dd,4BAAsE,mHACpE,4BACE,yBAAI,6BAAQ,YAAiB,iBAAS,iBACxC,iBACA,4BACE,yBAAI,6BAAQ,YAAW,iBAAS,iBAClC,iBACA,4BACG,+BACG,aACH,iBACH,iBACA,6BACE,6BACG,8BAAQ,aAAmB,iBAC9B,iBACF,iBACA,6BACE,uBACF,iBACF,iBAGA,iC,8CAvBsB,kEAEN,gDAGA,0CAIR,wEAIA,oLACO,kDASG,wD,mDA2IvB,6BACG,8CAAqB,iGAA+B,iBACvD,kB,yEDtLL,aAiFI,WAAoByE,EAAuCmE,EAAsCgF,EAAsC/I,EAAkCurB,EAC7JjwB,EAAoC67B,EAA+BlG,EAAwBhxB,GADnF,KAAAL,UAAuC,KAAAmE,cAAsC,KAAAgF,eAAsC,KAAA/I,cAAkC,KAAAurB,sBAC7J,KAAAjwB,eAAoC,KAAA67B,QAA+B,KAAAlG,SAAwB,KAAAhxB,cA9CvG,KAAAm3B,MAAc,IAAIj3B,KAClB,KAAAk3B,YAAsBxrC,KAAKoU,YAAYq3B,cAAc,IAAIn3B,MAEzD,KAAAo3B,WAAax9B,OAAOD,KAIpB,KAAA09B,KAAY,CACRC,MAAO,EACP/6B,WAAY,EACZD,SAAU,GACV+2B,UAAW,IAGf,KAAAkE,SAA4B,GAI5B,KAAAC,QAAiB,GAMjB,KAAAC,eAAyB,MAEzB,KAAAC,qBAA+B,EAE/B,KAAAC,iBAA2B,EAG3B,KAAAzqC,IAAc,KAUd,KAAAM,SAAmB,EAEnB,KAAAnB,WAAqB,EAIjBX,KAAK8rC,QAAU,CACX,CAAEtV,KAAMkJ,EAAoBngB,OAAO,uBAAwBqU,KAAM,YAAasY,UAAU,GACxF,CAAE1V,KAAMkJ,EAAoBngB,OAAO,6BAA8BqU,KAAM,aAAcsY,UAAU,EAAOprB,MAAO,KAC7G,CAAE0V,KAAMkJ,EAAoBngB,OAAO,yBAA0BqU,KAAM,iBAAkBsY,UAAU,I,OAIvG,YAAA1sC,SAAA,sBACIQ,KAAKwB,IAAMxB,KAAKsrC,MAAMa,SAASC,SAASn7B,IAAI,OAE5B,MAAZjR,KAAKwB,MACLxB,KAAKqsC,SAAWrsC,KAAKwB,KAGzB,IAEI0c,EAA+B,CAC/BwqB,WAAY,EACZC,mBAAmB,EACnBvN,IALSprB,IAAM,iCAQnBhQ,KAAK4oC,SAAW,IAAI,EAAAC,aAAa3qB,GAEjCle,KAAK4oC,SAASE,gBAAkB,SAACC,EAAeC,GAC5CA,EAAK5oB,OAAO,QAAS,EAAKksB,cAAc9qC,MAE5CxB,KAAK4oC,SAASM,mBAAqB,SAACH,GAChC,EAAKt5B,aAAaK,SAEtB9P,KAAK4oC,SAASO,eAAiB,SAACvf,EAAWnS,EAAe/G,EAAad,GACnE,EAAKw5B,QAAQpqB,cAAc5c,MAAQ,GACnC,EAAKqN,aAAaY,YAEtBrQ,KAAK4oC,SAASS,cAAgB,SAACzf,EAAWnS,EAAe/G,EAAgBd,GACrE,IAAM28B,EAAMt8B,KAAKmL,MAAM3D,GAEjB4P,EAAQ,EAAKwkB,SAASjpC,WAAU,SAAA+M,GAAW,OAAAA,EAAQnO,MAAQ+qC,EAAIn7B,cAEtD,IAAXiW,GACA,EAAKwkB,SAASxkB,GAAOmlB,UAAUzpC,KAAKwpC,IAG5CvsC,KAAK4oC,SAASY,YAAc,SAAC5f,EAAWnS,EAAkB/G,EAAgBd,GACtE,IAAM0F,EAAQrF,KAAKmL,MAAM3D,GAEzB,EAAKnC,MAAM,CAAEA,MAAOA,KAGH,MAAjBtV,KAAKqsC,WACLrsC,KAAKysC,SAAS,CAAEpR,SAAU,CAAC,CAAE75B,IAAKxB,KAAKqsC,aACvCrsC,KAAKisC,iBAAkB,GAG3BjsC,KAAK0sC,WAGT,YAAAC,YAAA,SAAYtyB,GACR,OAAIA,EAAOuyB,eAAiBvyB,EAAOuyB,cAActzB,YAAce,EAAOuyB,cAActzB,WAAW/D,cAAgB8E,EAAOuyB,cAActzB,WAAW/D,aAAase,QACxJxZ,EAAOuyB,cAActzB,WAAW/D,aAAase,OAAO,IAAMxZ,EAAOuyB,cAActzB,WAAW/D,aAAase,OAAO,GAAGzxB,OAASiY,EAAOuyB,cAActzB,WAAW/D,aAAase,OAAO,GAAGzxB,MAAMkR,cACvL+G,EAAOuyB,cAActzB,WAAW/D,aAAase,OAAO,GAAGzxB,MAAMkR,aAAa,IAAM+G,EAAOuyB,cAActzB,WAAW/D,aAAase,OAAO,GAAGzxB,MAAMkR,aAAa,GAAGlR,MACtJiY,EAAOuyB,cAActzB,WAAW/D,aAAase,OAAO,GAAGzxB,MAAMkR,aAAa,GAAGlR,MAC7EiY,EAAOuyB,eAAiBvyB,EAAOuyB,cAActzB,YAAce,EAAOuyB,cAActzB,WAAWtL,KAC3FqM,EAAOuyB,cAActzB,WAAWtL,KAEhChO,KAAK0/B,oBAAoBngB,OAAO,oBAI/C,YAAAqe,SAAA,SAAS/kB,GACL7Y,KAAK8B,QAAU+W,GAGnB,YAAAg0B,SAAA,SAASl9B,GACL3P,KAAKssC,cAAgB38B,EAEM,MAAvB3P,KAAK4oC,SAASiB,OAAiB7pC,KAAK4oC,SAASiB,MAAM7nC,OAAS,EAC5DhC,KAAK4oC,SAASkB,YAEd9pC,KAAKsV,MAAM,CACP9C,QAASxS,KAAK0/B,oBAAoBngB,OAAO,mBACzCjK,MAAO,MAKnB,YAAAw3B,eAAA,SAAen9B,EAAwBo9B,GACnCttC,OAAOutC,SAASC,KAAOj9B,IAAM,yCAA2CL,EAAQnO,IAAzDwO,UAAgF+8B,GAG3G,YAAAG,aAAA,SAAav9B,EAAwBo9B,GAArC,WACI/sC,KAAK+T,QAAQ1C,WAAW1B,EAAQnO,IAAKurC,GAASl4B,MAAK,WAC/C,IAAMwS,EAAQ1X,EAAQ68B,UAAU5pC,WAAU,SAAA2pC,GAAO,OAAAA,EAAI/qC,MAAQurC,MAE9C,IAAX1lB,GACA1X,EAAQ68B,UAAU1pC,OAAOukB,EAAO,MAErCjS,OAAM,SAACqC,GACN,EAAKnC,MAAMmC,OAIZ,YAAA01B,aAAP,SAAoBr/B,GAChB9N,KAAKgsC,oBAAsBl+B,GAG/B,YAAA4+B,QAAA,SAAQ77B,GAAR,gBAAQ,IAAAA,MAAA,GACJ7Q,KAAKkY,YAAYvY,UAEjBK,KAAK+T,QAAQpD,eAAe3Q,KAAK2rC,KAAK/6B,SAAUC,EAAY7Q,KAAK+rC,eAAgB/rC,KAAKwB,KAAKqT,MAAK,SAAAg3B,GAC5F,EAAKF,KAAOE,EACZ,EAAKA,SAAWA,EAASlE,UAGzB,EAAKkE,SAAShmC,SAAQ,SAAC6H,GACnB,IAAKA,EAAI0/B,QAAQzZ,UACb,IAAK,IAAIhvB,EAAI,EAAGA,EAAI+I,EAAI0K,QAAQpW,OAAQ2C,IACF,0BAA9B+I,EAAI0K,QAAQ,GAAGkC,aAEf5M,EAAI0/B,QAAQzZ,UAAY1jB,KAAKmL,MAAMnL,KAAKC,UAAUxC,EAAI0K,QAAQ,GAAGw0B,uBAKlFx3B,OAAM,SAACqC,GACN,EAAKnC,MAAMmC,OAInB,YAAAg1B,SAAA,SAASpR,GAAT,WAGIr7B,KAAKkY,YAAYvY,UAEjBK,KAAK+T,QAAQpD,eAAe3Q,KAAK2rC,KAAK/6B,SAAU,EAAG,MAAO5Q,KAAKwB,KAAKqT,MAAK,SAAAg3B,GACrE,EAAKA,SAAWA,EAASlE,aAC1BvyB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAg4B,UAAA,SAAU9wB,GAAV,WACyB,MAAjBA,GACAvc,KAAK+T,QAAQrE,mBAAmB6M,GAAe1H,MAAK,SAAAlF,GAChD4M,EAAgB5M,EAGhB,EAAK+8B,UAEL,IAAMx4B,EAAa,EAAKgJ,aAAasM,KAAK,EAAAwB,sBAAuB,CAC7DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGzBtW,EAAWuW,QAAQQ,WAAa,EAAKyU,oBAAoBngB,OAAO,qDAChErL,EAAWuW,QAAQkb,WAAa,EAAKjG,oBAAoBngB,OAAO,qDAChErL,EAAWuW,QAAQjY,QAAU,EAAKktB,oBAAoBngB,OAAO,kDAE7DrL,EAAWuW,QAAQS,UAAUpR,WAAU,WACnC,IAAM4f,EAAS,EAAK4T,2BAA2B39B,GAE/C,GAAc,MAAV+pB,EACA,EAAK0L,OAAOQ,SAAS,CAAC,6BAA8BlM,EAAOpgB,WAAWi0B,IAAK7T,EAAO5lB,cAAc9F,KAAM,EAAKw9B,aAAa,QACrH,CACH,IAAI,EAAS77B,EAAQy9B,QAAQzZ,UACzBtyB,EAAOsO,EAAQy9B,QAAQt5B,cAEb,MAAV,GAA0B,MAARzS,GAClB,EAAK+jC,OAAOQ,SAAS,CAAC,6BAA8B,EAAOtsB,WAAWi0B,IAAKlsC,EAAK2M,KAAM,EAAKw9B,aAAa,WAIrHp2B,OAAM,SAACqC,GACN,EAAKnC,MAAMmC,OAKvB,YAAA+1B,SAAA,SAASC,GAAT,WACIztC,KAAK+T,QAAQ7C,oBAAoBu8B,GAAI54B,MAAK,WActC,EAAK63B,aACNt3B,OAAM,SAACqC,GACN,EAAKnC,MAAMmC,OAInB,YAAA61B,2BAAA,SAA2B39B,GACvB,IAAK,IAAIhL,EAAI,EAAGA,EAAIgL,EAAQyI,QAAQpW,OAAQ2C,IAAK,CAC7C,IAAI0V,EAAS1K,EAAQyI,QAAQzT,GAG7B,GAAI0V,EAAOqzB,eAAe,iBACtB,OAAOrzB,EAAsB,cAIrC,OAAO,MAGX,YAAA6wB,SAAA,SAAS3uB,GAAT,WACI,GAAqB,MAAjBA,EAAuB,CACvB,IAAMrI,EAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC7DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGzBtW,EAAWuW,QAAQppB,KAAO,SAC1B6S,EAAWuW,QAAQQ,WAAajrB,KAAK0/B,oBAAoBngB,OAAO,6CAChErL,EAAWuW,QAAQjY,QAAUxS,KAAK0/B,oBAAoBngB,OAAO,yCAE7DrL,EAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACnC,EAAK8O,QAAQ5C,OAAOoL,EAAc/a,KAAKqT,MAAK,SAAA84B,GAExC,IADA,IAAIvlB,GAAO,EACFzjB,EAAI,EAAGA,EAAI,EAAKknC,SAAS7pC,OAAQ2C,IAAK,CAE3C,GADU,EAAKknC,SAASlnC,GAChBnD,MAAQmsC,EAAkB,CAC9BvlB,EAAMzjB,EACN,OAIJyjB,GAAO,GACP,EAAKyjB,SAAS/oC,OAAOslB,EAAK,GAG9B,EAAKskB,aACNt3B,OAAM,SAACqC,GACN,EAAKnC,MAAMmC,WAM3B,YAAAm2B,SAAA,SAASrxB,GAAT,WACI2d,QAAQC,IAAI,UAAW5d,GAEF,MAAjBA,GACAvc,KAAK+T,QAAQxD,OAAOgM,GAAe1H,MAAK,SAAAlF,GAIpC,EAAK+8B,aACNt3B,OAAM,SAACqC,GACN,EAAKnC,MAAMmC,OAMvB,YAAAo2B,4BAAA,SAA4BxzB,GAA5B,WAIIra,KAAK+T,QAAQvD,gBAAgB6J,EAAO7Y,IAAK6Y,EAAOyzB,gBAAgBj5B,MAAK,SAAA4C,GACjE4C,EAAO0zB,cAA2C,YAA1B1zB,EAAOyzB,eAAgC,EAAK35B,YAAY65B,cAAgB,MAGjG54B,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIZ,YAAAC,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,eAG/D,YAAA+wB,eAAA,SAAe5mB,EAAe1X,GAC1B,OAAOA,EAAQnO,KAGnB,YAAA0sC,OAAA,SAAO/6B,EAAY3R,GAAnB,WACS2R,EAAM+D,OAAOi3B,cAAcC,UAAUC,SAAS,QAAWl7B,EAAM+D,OAAOk3B,UAAUC,SAAS,SACtFruC,KAAKqsC,WAAa7qC,EAClBxB,KAAKqsC,SAAW,MAEhBrsC,KAAKqsC,SAAW7qC,EAEhBxB,KAAK6rC,SAAShmC,SAAQ,SAAA6H,GACdA,EAAIlM,MAAQA,IACZ,EAAK4W,QAAU1K,EAAI0K,eAOvC,YAAA9U,OAAA,SAAOgrC,GACHtuC,KAAK+rC,eAAiBuC,EAEtBtuC,KAAK0sC,QAAQ,IAGjB,YAAAl8B,gBAAA,SAAgB6J,EAAuD3J,GAAvE,WACuB1Q,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC7DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGdC,QAAQS,UAAUpR,WAAU,SAAA7U,GACnCoV,EAAOyzB,eAAiBp9B,EAExB,EAAKm9B,4BAA4BxzB,OAIzC,YAAAk0B,yBAAA,SAAyBl0B,GAUrB,OARIA,EAAOC,WAAWk0B,SAAS,0BAA4Bn0B,EAAOC,WAAWk0B,SAAS,yBAQ/En0B,GAGX,YAAAxC,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAk2B,YAAA,WACI,OAAOhuC,KAAKmU,YAAY65B,eAG5B,YAAAS,gBAAA,SAAgB9+B,GACZ,QAAIA,EAAQyI,SAAWzI,EAAQyI,QAAQpW,OAAS,IAC1B2N,EAAQyI,QAAQ,GAElBkC,aAAe,EAAAC,YAAYm0B,uBAUnD,YAAAnQ,iBAAA,WACIv+B,KAAKW,WAAaX,KAAKW,WAG3B,YAAAguC,QAAA,SAAQh/B,GACJ,OAAQA,EAAQi/B,YAAYP,SAAS,kBAAoBruC,KAAKW,W,iCA1ZzDuI,GAAqB,oV,iCAArBA,EAAqB,sD,GAAA,K,y4KC3DlC,4BACE,4BACE,4BAEE,0BAAmB,wCAAS,EAAA5F,OAAO,UACjC,4BACF,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,cACjC,4BACF,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,eACjC,4BACF,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,cACjC,6BACF,iBACA,2BAAmB,wCAAS,EAAAA,OAAO,eACjC,6BACF,iBAEF,iBAEA,wBAEF,iBACF,iBAEA,6BACE,6BACE,gCACE,6BACE,6BACE,6BAAqC,8BAA6D,iBAClG,6BAAqC,8BAAoD,iBACzF,6BAAqC,8BAAkE,iBACvG,6BAAqC,8BAAwD,iBAE7F,qBACF,iBACF,iBACA,6BACE,0C,wBAiKF,iBACF,iBACA,8BACC,gCAGD,iBACF,iBACF,kB,MA9MiD,2FAGI,+FAGC,gGAGD,+FAGC,gGAyBnB,8IAAsH,iCAoK9I,gE,yiFD9KK,CACR,CACI,EAAAmQ,QAAQ,YAAa,CACjB,EAAAG,WAAW,SAAU,CACjB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,QAKzB,EAAAF,QAAQ,SAAU,CACd,EAAAG,WAAW,SAAU,CACjB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,kB,EA5B5B,GAkCa,EAAA/J,yB,+DAAAA,EAAqB,E,KAlCjC,EAAAiG,U,MAAU,CAEPC,SAAU,gBACVC,YAAa,iCACbC,UAAW,CAAC,uBACZu/B,cAAe,EAAAC,kBAAkBC,KACjCl7B,WAAY,CACR,CACI,EAAAJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,SAAU,CACjB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,QAKzB,EAAAF,QAAQ,SAAU,CACd,EAAAG,WAAW,SAAU,CACjB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,oB,0OA4Bfo5B,SAAU,CAAF,C,KAAhB,EAAA98B,QAmBD65B,QAAS,CAAF,C,KADN,EAAA3sB,U,MAAU,e,mHEnGf,WAWA,OAQA,GADA,OACA,QACA,SACA,SAEA,GADA,MACA,QAGA,SASA,GARA,MAEA,OACA,OACA,OAEA,MAEA,QAEA,SACA,SACA,Q,6GCrCI,yBAAI,YAAkC,kB,kBAAlC,gE,sBAGN,4BACE,4BACF,kB,sBAgBoB,2BACE,6BACF,kB,sBACA,0BACE,6BACF,kB,yBAQK,6BACK,YACF,kB,uCADE,oE,sBAgBG,2BACE,6BACF,kB,yBAGF,0BACE,2BACE,6BACA,YACF,iBACF,kB,2FAFI,sF,8FAfR,4BACE,4BACE,yBAAI,sCAA0D,iBAE9D,+BAA8N,wEAAuB,qGAAkB,uCAAvQ,iBAEA,6BACE,6BAGF,iBAEA,+BAMF,iBACF,iB,sGAjB2B,4CAEhB,6GAAsF,+CAAtF,CAAsF,0BAAtF,CAAsF,kBAAtF,CAAsF,uCAGvF,yEAKA,oF,yBAbV,6BACA,+BAoBA,2B,uCApBoB,6D,yBA2BX,gCAA8G,YAA+B,kB,uBAArD,6BAAsB,4D,mDAHpH,0BACE,gCAA4K,2HACxK,2BACA,kCACJ,iBACF,iB,8EAJsE,6EAA5D,oEAA2D,8CAA3D,CAA2D,iCAA3D,CAA2D,gDAEpC,qG,mDAGjC,0BACE,+BAA6H,2HAA4C,+FAAzK,iBACF,iB,8EADS,mFAA2D,qBAA3D,CAA2D,iCAA3D,CAA2D,iD,mDAGpE,0BACE,oCAAoF,yHAA0C,qFACxC,iBACxF,iB,8EAFc,qFAAuE,+BAAvE,CAAuE,0BAAvE,CAAuE,mBAAvE,CAAuE,sBAAvE,CAAuE,cAAvE,CAAuE,oBAAvE,CAAuE,kBAAvE,CAAuE,uB,mDAIrF,0BACE,+BAA8H,2HAA4C,+FAA1K,iBACF,iB,8EADS,mFAA2D,oBAA3D,CAA2D,iCAA3D,CAA2D,iD,mDAGpE,0BACI,+BACE,+BAAmG,2HAAnG,iBACA,8BAAkE,6BAA8D,iBAClI,iBACA,+BACE,+BAAiK,2HAAjK,iBACA,8BAAkE,6BAA+D,iBACnI,iBACJ,iB,8EAPsJ,+DAAoB,kDAArH,qCAAoC,WAApC,CAAoC,iCAApC,CAAoC,gDAC7E,oFAGwM,gEAAqB,mDAA5N,qEAA2D,uBAA3D,CAA2D,WAA3D,CAA2D,iCAA3D,CAA2D,gDAC5D,qF,mDAuBH,8BAAwE,0HAAS,gCAC/E,sBACF,kB,qBAGA,yB,mHAtBN,6BACC,YACA,6BACG,+BAGE,kKAAoE,4GAG/C,4FAHrB,CAAoE,mJAHtE,iBAcE,gCAKA,gCAEJ,iBACH,iB,yHAxBE,qDAGK,iDAA4B,kHAA5B,CAA4B,sDAA5B,CAA4B,oBAA5B,CAA4B,2GAA5B,CAA4B,8FAA5B,CAA4B,0BAA5B,CAA4B,0BAA5B,CAA4B,uBAA5B,CAA4B,uBAarB,gDAKA,gD,yBAvBb,6BACA,gCA0BA,2B,8BA1BqD,0D,yBAFxD,0BACG,wCA4BH,kB,8BA5BkB,4G,yBA6BjB,0BACC,2BACE,6BACA,YACF,iBACF,kB,wCAFI,yD,qBAeO,6B,qBACA,6B,mDAFD,gCAAiF,6IAChF,oCACA,oCACD,iB,2CAH0I,oJAC9H,yEACA,wE,qBAIV,6B,qBACA,6B,qBAIA,6B,qBACA,6B,mDAHF,gCAA6F,6IAE3F,oCACA,oCACF,iB,gEAHE,gKACW,sEACA,sE,mDAYT,+BAAoP,mHAAyC,GAAG,GAAC,IAA7C,CAA+C,kIAAnS,iB,gEAA6E,kGAAmH,sC,oDAEhM,+BAAoQ,qHAAsC,kIAA1S,iB,gEAA6F,kGAAmH,6B,uBAGpN,0BACI,2BACE,6BACF,iBACJ,kB,oDAOI,+BAAqP,mHAAyC,GAAG,GAAC,IAA7C,CAA+C,kIAApS,iB,gEAA6E,kGAAmH,sC,oDAEhM,+BAAoQ,qHAAsC,kIAA1S,iB,gEAA6F,kGAAmH,6B,uBAGpN,0BACI,2BACE,6BACF,iBACJ,kB,0BAhCJ,yBAEE,4BACE,yBACE,6BACF,iBACA,6BACI,iCAEA,kCAEJ,iBACA,gCAKF,iBACA,4BACE,yBACE,8BACF,iBACA,8BACI,mCAEA,mCAEJ,iBACA,iCAKF,iBAEF,kB,wCA5BgB,gFAEA,4FAGN,sGAWM,gFAEA,4FAGN,yG,oDAvDf,+BAOK,yBACE,4BAEE,kCAIA,gCAAuD,0IAErD,oCACA,oCACF,iBACA,kCAKF,iBACF,iBAEA,gCAsCJ,iB,gEAvDiB,2DAKP,mKACW,yEACA,uEAEJ,uEAQR,6P,0BAjGd,4BACC,4BAEE,+BAMA,+BAIA,+BAKA,+BAIA,gCAWA,+BA8BC,+BAOA,kCAkEH,iBAED,kB,4DAvIS,kEAMA,uEAIA,kEAKA,qGAIA,qEAWA,sEA8BC,4FAOE,uE,0BA6ER,0BACE,2BACE,6BACA,YACF,iBACF,kB,uCAFI,6D,8FAyBN,2BACE,YACF,kB,uBAFiD,4FAC/C,wD,0BAFJ,yBACE,+BAGF,kB,uCAHqB,0D,2GAQzB,6BAAsB,6H,uBACpB,uBACF,iB,0CAF0F,mKAC1E,8G,mLA5NlB,4BAIK,4BACD,+BAIA,4BAKE,wCAsBA,gCA2IA,4BACE,yBACE,yBACE,6BACF,iBAEA,wCAA6G,yFAA8C,oFAA2K,iBAEtU,iCAMF,iBACA,0BACE,8BACE,0BACE,8BACF,iBAEA,wCAA2G,uFAA4C,oFAC4B,iBAUrL,iBACF,iBACF,iBACA,gCAKF,iBAEF,iBAEA,gCAGF,iB,yDA9NI,kCAAU,qPAI0B,0GAC9B,8EASW,mEAsBV,+SAiJgC,yFAA2E,mCAA3E,CAA2E,2BAA3E,CAA2E,sBAA3E,CAA2E,cAA3E,CAA2E,+CAEtG,6DAa6B,uFAAyE,iCAAzE,CAAyE,yBAAzE,CAAyE,qDAAzE,CAAyE,sBAAzE,CAAyE,cAAzE,CAAyE,qBAAzE,CAAyE,mDAAzE,CAAyE,+CAc3G,kFASJ,iD,0BA5NR,6BACC,iCA+NF,2B,8BA/NuC,qD,0BAX5C,0BACE,+BACE,+BACE,6BAGA,+BAIA,yCAiOF,iBACF,iBACF,kB,8BA1O0B,kFAGd,wDAIS,0D,oDAsOvB,6BACE,4BAAgC,mGAC9B,8BACF,iBACF,kB,oDAGF,8BACE,iCAA4E,6F,uBAC1E,8BACF,iBACA,iCAA4E,4F,uBAC1E,8BACF,iBACA,iCAA2E,6F,uBACzE,8BACF,iBACF,iB,iCATU,iFAAqD,qEAGrD,iFAAqD,qEAGrD,gFAAoD,wE,uBAW1D,iCACI,8BACJ,kB,uBACA,iCACI,8BACJ,kB,0BAZJ,8BAOI,oCAGA,oCAGJ,kB,8BANoC,6EAGA,8E,0BA/QtC,4BACE,4BACE,4BACE,gCA8OF,iBAEA,+BAMF,iBACA,kCAWA,gCAcF,kB,6BAhRY,+DAgPH,sEAOD,sMAWA,iG,yBAgBX,8C,6BAAyL,0DAAgD,2BAAhD,CAAgD,2DAAhD,CAAgD,2CAAhD,CAAgD,gCAAhD,CAAgD,4D,oCD7PhP,cAuGI,WAAmBvE,EAAqC/F,EAA+B4B,EAAiCE,EAC7G2yB,EAA6CxyB,EAAkCD,EAC9E66B,EAA8C9xB,EAAsC+xB,GAF7E,KAAA/2B,cAAqC,KAAA/F,MAA+B,KAAA4B,UAAiC,KAAAE,WAC7G,KAAA2yB,oBAA6C,KAAAxyB,cAAkC,KAAAD,cAC9E,KAAA66B,iBAA8C,KAAA9xB,eAAsC,KAAA+xB,aAxEvF,KAAAx6B,OAAiB,EAI1B,KAAAjC,QAAkB,KAElB,KAAA6B,YAAoB,IAAIC,KAExB,KAAAxS,SAAmB,EACT,KAAAotC,cAAgB,IAAI,EAAA3vC,aAErB,KAAAgV,UAAoB,EAEpB,KAAA46B,YAAsB,EAEtB,KAAAv2B,mBAA6B,EAG5B,KAAAxB,SAAW,IAAI,EAAA7X,aAGzB,KAAA6Y,QAA4B,GAuBnB,KAAAyf,gBAA0B,EAE1B,KAAApW,UAA+B,KAQxC,KAAA2tB,kBAA4B,EAG5B,KAAAC,aAAuB,EACvB,KAAAC,QAAkB,EAIlB,KAAAC,WAAgC,GAKhC,KAAAC,mBAA6B,E,OA3C7B,sBAAa,4BAAa,C,IAA1B,SAA2BptC,GACvBpC,KAAK4wB,cAAgBxuB,EAAMwuB,cAE3B5wB,KAAKuc,cAAgBna,EAAMma,cAED,MAAtBvc,KAAKuc,cACLvc,KAAKoY,QAAUhW,EAAMma,cAAcnE,QAEnCpY,KAAKoY,QAAUhW,EAAMgW,QAGzBpY,KAAKyvC,0BAA4Bx/B,KAAKmL,MAAMnL,KAAKC,UAAU9N,EAAMuxB,YACjE3zB,KAAKmY,cAAgB/V,EAAMuxB,W,gCAsC/B,YAAAn0B,SAAA,WACIQ,KAAK0vC,sBACL1vC,KAAKwvC,kBAAgD,aAA5BxvC,KAAK4wB,cAAcvvB,OAA0C,MAAlBrB,KAAKyhB,WAA6C,MAAxBzhB,KAAKyhB,UAAU3M,OAAiD,IAAhC9U,KAAKyhB,UAAU3M,MAAM9S,SAGvJ,YAAAyQ,gBAAA,aAGA,YAAAnT,eAAA,SAAeqwC,EAAYx8B,KAM3B,YAAA62B,uBAAA,WAGI,IAFA,IAAIE,EAAalqC,KAAKmqC,yBAAyBC,UAEtCzlC,EAAI,EAAGA,EAAIulC,EAAWloC,OAAQ2C,IAAK,CAExC,IADYulC,EAAWvlC,GACZkU,MACP,OAAO,EAIf,OAAO,GAGX,YAAA+2B,uBAAA,SAAuBC,EAA4BC,GAC/C,OAA6B,MAAtBD,EAAUE,UAAoB/vC,KAAKgwC,iBAAiBH,EAAUE,SAAUD,KAAY9vC,KAAKgwC,iBAAiBH,EAAUztC,MAAO0tC,IAGtI,YAAAG,aAAA,sBACIrjB,YAAW,WACP,EAAKyiB,aAAc,EACnB,EAAKC,QAAS,EAEd,EAAKxtC,QAAU,EAAKkoC,yBAEpB,EAAKqF,YAAc,EAAKj7B,YAAY87B,YAAY,EAAKX,YAErD,EAAKL,cAAcl1B,KAAK,EAAKlY,UAAY,EAAKutC,eAC/C,IAGA,YAAAn/B,UAAP,SAAiB6a,GACb,OAAO9a,KAAKC,UAAU6a,IAG1B,YAAAzqB,OAAA,SAAO0nC,GAGH,GAFAA,EAAK7lC,eAAe7B,SAEhB0nC,EAAKmI,aAAe,EAAAC,WAAWC,KAAOrI,EAAK7lC,eAAekY,OAAOC,aAAe,EAAAC,YAAYC,sBAAuB,CACnH,IAAM6M,EAAQrnB,KAAKuvC,WAAW3sC,WAAU,SAAA0tC,GAAK,OAAAA,EAAE9uC,MAAQwmC,EAAKxmC,OAExD6lB,GAAS,GACTrnB,KAAKuvC,WAAWzsC,OAAOukB,EAAO,GAItCrnB,KAAKiwC,gBAGT,YAAAM,gBAAA,WACI,IAAIvI,EAAwB,IAAI,EAAAwI,gBAAgBxwC,KAAMA,KAAKywC,YAC3DzI,EAAKxmC,IAAMxB,KAAK0wC,eAEhB1I,EAAK7lC,eAAeouC,kBAEpBvwC,KAAKuvC,WAAWxsC,KAAKilC,GAErBhoC,KAAK4mC,kBAAkBl0B,iBAG3B,YAAAg+B,aAAA,WACI,OAAO,QAGX,YAAAC,eAAA,SAAe59B,GACX,IAAI8oB,EAA4B,GAQhC,OANA77B,KAAKmY,cAAcmB,WAAWvG,EAAU/E,MAAM6lB,OAAOhuB,SAAQ,SAAA8pC,GACzDA,EAAWvtC,MAAMkR,aAAazN,SAAQ,SAAAiuB,GAClC+H,EAAS94B,KAAK+wB,SAIf+H,GAGX,YAAAmU,iBAAA,SAAiBY,EAAoBd,GACjC,OAAO,IAAI,EAAAr2B,eAAem3B,EAAGloB,eAAgBkoB,EAAGt9B,cAAcu9B,SAASf,IAG3E,YAAAgB,oBAAA,SAAoBhB,GAChB,IAAIiB,EAAS,KAQb,OANAjB,EAAOx8B,aAAazN,SAAQ,SAAAmrC,GACF,kBAAlBA,EAAOlB,SACPiB,EAASC,EAAO5uC,UAIjB2uC,GAGX,YAAA11B,qCAAA,SAAqCC,GACjC,IAAK,IAAI3W,EAAI,EAAGA,EAAI3E,KAAK8T,cAAcwF,WAAWtX,OAAQ2C,IAAK,CAC3D,IAAI4W,EAAYvb,KAAK8T,cAAcwF,WAAW3U,GAE9C,GAAkB,SAAd4W,EAAKla,MAAmBka,EAAKvN,OAASsN,EAAmB,CAEzD,IAAIE,GADJD,EAA0BA,GACNE,SAASC,SAG7B,GAAIF,EAASxZ,OAAS,EAClB,MAAkB,WAAduZ,EAAKvN,KACE,UAAM2N,eAAeH,GAErBA,GAMvB,OAAO,MAGX,YAAAy1B,iBAAA,SAAiB11B,GAAjB,WACQ01B,GAAmB,EAQvB,OANAjxC,KAAK8T,cAAcwF,WAAWzT,SAAQ,SAAAkN,GAC9B,EAAK6d,cAAc5iB,OAASuN,EAAKvN,OACjCijC,EAAmB11B,EAAK01B,qBAIzBA,GAIX,YAAAjuC,KAAA,SAAKkuC,GAEDA,EAAOluC,MAAK,SAASC,EAAGC,GACpB,OAAsB,MAAlBD,EAAEkuC,cAA2C,KAAnBluC,EAAEkuC,aACrB,EACkB,MAAlBjuC,EAAEiuC,cAA2C,KAAnBjuC,EAAEiuC,cAC3B,EAGK,IAAI78B,KAAKrR,EAAEkuC,cACZ,IAAI78B,KAAKpR,EAAEiuC,kBAKnC,YAAAC,eAAA,SAAe/2B,GACX,IAAID,GAAsB,EAEtBC,aAAkB,EAAAg3B,wBAGuC,IAFfh3B,EAEzBi3B,cAAcC,eAAevvC,SAC1CoY,GAAa,IAOrB,IAHA,IAAIiN,GAAS,EAET3iB,EAAM1E,KAAKoY,QAAQpW,OACd2C,EAAI,EAAGA,EAAID,IAAOC,EAAG,CAGtB0V,IAFara,KAAKoY,QAAQzT,KAG1B0iB,EAAQ1iB,IAID,IAAX0iB,GAAiBjN,GAEC,IAAXiN,GAAgBjN,GACvBpa,KAAKoY,QAAQrV,KAAKsX,GAFlBra,KAAKoY,QAAQtV,OAAOukB,EAAO,IAMnC,YAAAmqB,cAAA,SAAchwC,GAEV,IADA,IAAIkD,EAAM1E,KAAKuvC,WAAWvtC,OACjB2C,EAAI,EAAGA,EAAID,IAAOC,EAAG,CAC1B,IAAIqjC,EAAOhoC,KAAKuvC,WAAW5qC,GAE3B,GAAIqjC,EAAKxmC,MAAQA,EACb,OAAOwmC,EAIf,OAAO,MAGX,YAAAyJ,qBAAA,SAAqBjwC,GAOjB,OANAxB,KAAKmY,cAAcmB,WAAWtZ,KAAK4wB,cAAc5iB,MAAM6lB,OAAOhuB,SAAQ,SAACoV,GACnE,GAAIA,EAAIzZ,MAAQA,EACZ,OAAOyZ,KAIR,MAMX,YAAAy0B,oBAAA,sBACI,GAAI1vC,KAAKyU,MACL,GAAIzU,KAAKoY,QAAQpW,OAAS,GAAKhC,KAAKoY,QAAQ,GAAGkC,aAAe,EAAAC,YAAYC,sBAAuB,CAC7Fxa,KAAKywC,WAAazwC,KAAKoY,QAAQ,GAC/B,IAAMiC,EAASra,KAAKywC,WAEK,MAArBp2B,EAAOq3B,aACPr3B,EAAOq3B,WAAa1xC,KAAKyhB,WAGD,MAAxBpH,EAAOuyB,gBACPvyB,EAAOuyB,cAAgB5sC,KAAKmY,mBAE7B,CACH,IAAIw5B,EAAsC,IAAI,EAAAC,sBAC9CD,EAAa/E,cAAgB5sC,KAAKmY,cAClCw5B,EAAaD,WAAa1xC,KAAKyhB,UAC/BzhB,KAAKoY,QAAQ,GAAKu5B,EAClB3xC,KAAKywC,WAAakB,OAGtB3xC,KAAKoY,QAAQvS,SAAQ,SAACwU,GAClB,GAAIA,EAAOC,aAAe,EAAAC,YAAYE,uBAAwB,CAC1D,IAAIC,EAA0CL,EAE1C,EAAKuW,cAAc5iB,OAAS0M,EAAiBC,eAA8C,aAA5B,EAAKiW,cAAcvvB,MAAuBqZ,EAAiB42B,cAAcrqB,gBAAkB,EAAKxF,UAAUzT,OACzK,EAAKyiC,WAAap2B,OAKP,MAAnBra,KAAKywC,aACLzwC,KAAKywC,WAAa,IAAI,EAAAY,sBAAsBrxC,KAAK4wB,cAAc5iB,OAIvEhO,KAAKuvC,WAAa,IAIQ,MAAtBvvC,KAAKuc,eAAqD,oBAA5Bvc,KAAKuc,cAAclb,MACZ,aAAtCrB,KAAKuc,cAAcuxB,gBAAuE,YAAtC9tC,KAAKuc,cAAcuxB,gBAAsE,aAAtC9tC,KAAKuc,cAAcuxB,kBAEzF,aAA5B9tC,KAAK4wB,cAAcvvB,KACnBrB,KAAKyhB,UAAUowB,QAAQhsC,SAAQ,SAACisC,GAC5B,IAAI9J,EAAO,IAAI,EAAAwI,gBAAgB,EAAM,EAAKC,YAE1CzI,EAAKxmC,IAAMswC,EAAMtwC,IACjBwmC,EAAKmI,WAAa,EAAAC,WAAW2B,WAC7B/J,EAAKrP,UAAYmZ,EAAMnZ,UACvBqP,EAAKZ,QAAU0K,EAAM1K,QACrBY,EAAK5lC,MAAQ6N,KAAKmL,MAAMnL,KAAKC,UAAU4hC,IACvC9J,EAAK5lC,MAAM40B,QAAU,GAErBgR,EAAK7lC,eAAiB,IAAI,EAAA6vC,wBAAwB,EAAM,EAAKvB,WAAYzI,EAAM8J,GAM/E,IADA,IAAIptC,EAAM,EAAK+c,UAAU3M,MAAM9S,OACtB2C,EAAI,EAAGA,EAAID,IAAOC,EAAG,CAC1B,IAAItD,EAAO,EAAKogB,UAAU3M,MAAMnQ,GAE3BuJ,OAAO+jC,UAAUvE,eAAewE,KAAKlK,EAAK5lC,MAAMu3B,QAASt4B,EAAK2M,QAC/Dg6B,EAAK5lC,MAAMu3B,QAAQt4B,EAAK2M,MAAQ,CAAE4W,KAAM,GAAI+O,UAAW,OAI/D,EAAK4b,WAAWxsC,KAAKilC,MAGzBhoC,KAAKmY,cAAcmB,WAAWtZ,KAAK4wB,cAAc5iB,MAAM6lB,OAAOhuB,SAAQ,SAACoV,GACnE,IAAI+sB,EAAO,IAAI,EAAAwI,gBAAgB,EAAM,EAAKC,YAE1CzI,EAAKxmC,IAAMyZ,EAAIzZ,IACfwmC,EAAKmI,WAAa,EAAAC,WAAW2B,WAC7B/J,EAAKrP,UAAY1d,EAAI0d,UACrBqP,EAAKZ,QAAUnsB,EAAImsB,QACnBY,EAAK5lC,MAAqB,MAAb6Y,EAAI7Y,MAAgB,KAAO6N,KAAKmL,MAAMnL,KAAKC,UAAU+K,EAAI7Y,QAEtE4lC,EAAK7lC,eAAegwC,cAAgBl3B,EAEpC,EAAKs0B,WAAWxsC,KAAKilC,OAOjC,IADA,IAAItjC,EAAM1E,KAAKoY,QAAQpW,O,WACd2C,GACL,IAAI0V,EAAyB,EAAKjC,QAAQzT,GAE1C,GAAI0V,EAAOC,aAAe,EAAAC,YAAYE,uBAAwB,CAC1D,IAAIC,EAA0CL,EAE9C,GAAI,EAAKuW,cAAc5iB,OAAS0M,EAAiBC,cAAe,CAC5D,GAAgC,aAA5B,EAAKiW,cAAcvvB,MAAuBqZ,EAAiB42B,cAAcrqB,gBAAkB,EAAKxF,UAAUzT,K,iBAI9G0M,EAAiB42B,cAAcC,eAAe1rC,SAAQ,SAACusC,GACnD,IAAIpK,EAAO,EAAKwJ,cAAcY,EAAQ5wC,KAEf,WAAnB4wC,EAAQ/3B,QACI,MAAR2tB,IACAA,EAAO,IAAI,EAAAwI,gBAAgB,EAAMn2B,GACjC,EAAKk1B,WAAWxsC,KAAKilC,IAEK,MAAtB,EAAKzrB,eAAgE,aAAtC,EAAKA,cAAcuxB,gBAAuE,YAAtC,EAAKvxB,cAAcuxB,gBAAsE,aAAtC,EAAKvxB,cAAcuxB,kBACzJ9F,EAAKqK,gBAAkB,CAAC,CAAEC,SAAU,QAAS9/B,QAAS,EAAKyB,SAASsL,OAAO,kDAAmDle,KAAM,EAAAkxC,aAAaC,sBAIzJ,EAAKC,qBAAqBzK,EAAMoK,UAEzBpK,EAAK+H,gBACL/H,EAAKmJ,oBACLnJ,EAAK0K,WAOZ1K,EAAKmI,WAAa,EAAAC,WAAWuC,OAE7B3K,EAAK7lC,eAAeywC,KAAOR,GACD,WAAnBA,EAAQ/3B,QACH,MAAR2tB,IACAA,EAAO,IAAI,EAAAwI,gBAAgB,EAAMn2B,GACjC,EAAKk1B,WAAWxsC,KAAKilC,IAEK,MAAtB,EAAKzrB,eAAgE,aAAtC,EAAKA,cAAcuxB,gBAAuE,YAAtC,EAAKvxB,cAAcuxB,gBAAsE,aAAtC,EAAKvxB,cAAcuxB,kBACzJ9F,EAAKqK,gBAAkB,CAAC,CAAEC,SAAU,QAAS9/B,QAAS,EAAKyB,SAASsL,OAAO,kDAAmDle,KAAM,EAAAkxC,aAAaC,sBAIzJ,EAAKC,qBAAqBzK,EAAMoK,GAEhCpK,EAAK6K,oBAAoBT,IACC,WAAnBA,EAAQ/3B,SACH,MAAR2tB,EACA9N,QAAQC,IAAI,wFAAyFiY,IAErGpK,EAAO,IAAI,EAAAwI,gBAAgB,EAAMn2B,GAEjC,EAAKo4B,qBAAqBzK,EAAMoK,GAEhCpK,EAAKmI,WAAa,EAAAC,WAAWC,IAE7B,EAAKd,WAAWxsC,KAAKilC,cAK9B3tB,EAAOC,aAAe,EAAAC,YAAYC,uBAGzC0f,QAAQC,IAAI,uBAAyB9f,EAAOC,WAAYD,I,OArEvD1V,EAAI,EAAGA,EAAID,IAAOC,E,EAAlBA,IA0Eb,YAAA8tC,qBAAA,SAAqBzK,EAAuBoK,GACxC,GAAgC,aAA5BpyC,KAAK4wB,cAAcvvB,KAAqB,CACxC2mC,EAAK5lC,MAAS4lC,EAAK7lC,eAA2C2wC,4BAC9D9K,EAAK5lC,MAAMZ,IAAM4wC,EAAQ5wC,IACzBwmC,EAAK5lC,MAAMu2B,UAAYyZ,EAAQW,cAAgBX,EAAQjB,aACvDnJ,EAAK5lC,MAAMglC,QAAUgL,EAAQY,YAAcZ,EAAQM,WAEnD1K,EAAK5lC,MAAMu3B,QAAUyY,EAAQzY,QAM7B,IADA,IAAIj1B,EAAM1E,KAAKyhB,UAAU3M,MAAM9S,OACtB2C,EAAI,EAAGA,EAAID,IAAOC,EAAG,CAC1B,IAAItD,EAAOrB,KAAKyhB,UAAU3M,MAAMnQ,GAE3BuJ,OAAO+jC,UAAUvE,eAAewE,KAAKlK,EAAK5lC,MAAMu3B,QAASt4B,EAAK2M,QAC/Dg6B,EAAK5lC,MAAMu3B,QAAQt4B,EAAK2M,MAAQ,CAAE4W,KAAM,GAAI+O,UAAW,OAM/D,GAFAqU,EAAK5lC,MAAM40B,QAAU,GAEG,MAApBob,EAAQrC,SAAkB,CAC1B,IAEIkD,EAFyBb,EAAQrC,SAASmD,MAAM,WAEf,GAErClL,EAAK+H,SAAWkD,EAGhB,IAAStuC,EADC3E,KAAKyhB,UAAU3M,MAAM9S,OACZ,EAAG2C,GAAK,IAAKA,EAAG,CAC3BtD,EAAOrB,KAAKyhB,UAAU3M,MAAMnQ,GAEhC,GAAIuJ,OAAO+jC,UAAUvE,eAAewE,KAAKE,EAAQzY,QAASt4B,EAAK2M,MAAO,CAClE,IAAImlC,EAAcf,EAAQzY,QAAQt4B,EAAK2M,MAEvC,GAAwB,MAApBmlC,EAAYvuB,MAA4C,IAA5BuuB,EAAYvuB,KAAK5iB,OAAc,CAC3DmxC,EAAYvuB,KAAOquB,EACnB,eAMQ,MAApBb,EAAQgB,UACRpL,EAAK5lC,MAAQ6N,KAAKmL,MAAMnL,KAAKC,UAAUkiC,EAAQgB,WAC/CpL,EAAK+H,SAA+B,MAApBqC,EAAQrC,SAAmB,KAAO9/B,KAAKmL,MAAMnL,KAAKC,UAAUkiC,EAAQrC,YAEpF/H,EAAK5lC,MAA4B,MAApBgwC,EAAQrC,SAAmB,KAAO9/B,KAAKmL,MAAMnL,KAAKC,UAAUkiC,EAAQrC,WAIzF/H,EAAKxmC,IAAM4wC,EAAQ5wC,IACnBwmC,EAAKrP,UAAYyZ,EAAQW,cAAgBX,EAAQjB,aACjDnJ,EAAKZ,QAAUgL,EAAQY,YAAcZ,EAAQM,WACzCN,EAAQW,eAAiBX,EAAQjB,eACjCnJ,EAAKmJ,aAAuC,MAAxBiB,EAAQW,aAAuB,KAAOX,EAAQjB,cAElEiB,EAAQY,aAAeZ,EAAQM,aAC/B1K,EAAK0K,WAAmC,MAAtBN,EAAQY,WAAqB,KAAOZ,EAAQM,YAElE1K,EAAK7lC,eAAeywC,KAAOR,GAG/B,YAAAx2B,gBAAA,SAAgB7L,EAAM8L,GAClB,GAAY,MAAPA,GAAuB,MAAR9L,GAA0B,MAARA,GAAuB,MAAP8L,EAClD,OAAO,EACJ,GAAW,MAAPA,GAAuB,MAAR9L,EACtB,OAAO,EAGX,GAAoB,IAAf8L,EAAI7Z,QAAgB+N,EAAK/N,OAAS,GAAuB,IAAhB+N,EAAK/N,QAAgB6Z,EAAI7Z,OAAS,EAC5E,OAAO,EAGX,IAAI8Z,EAAaD,EACbE,MAAMC,QAAQH,KACdC,EAAaD,EAAI,IAGrB,IAAII,EAAclM,EAKlB,OAJIgM,MAAMC,QAAQjM,KACdkM,EAAclM,EAAK,IAGhB+L,IAAeG,GAG1B,YAAAo3B,oBAAA,WACI,GAAIrzC,KAAK4wB,cAAcqgB,iBACnB,IAAK,IAAItsC,EAAI,EAAGA,EAAI3E,KAAKoY,QAAQpW,OAAQ2C,IAAK,CAC1C,IAAI0V,EAASra,KAAKoY,QAAQzT,GAE1B,GAA0B,0BAAtB0V,EAAOC,WAGP,GAFcD,EAEFM,gBAAkB3a,KAAK4wB,cAAc5iB,KAC7C,OAAO,EAMvB,OAAO,GAGX,YAAAslC,UAAA,sBACItzC,KAAKgvC,eAAex+B,gBAAgBxQ,KAAKywC,WAAWjvC,IAAK,EAAA+xC,iBAAiBC,UAAU3+B,MAAK,SAAAuiB,GACrF,EAAKqZ,WAAW3C,eAAiB,EAAAyF,iBAAiBC,YACnDp+B,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAm4B,SAAA,sBACIxtC,KAAKgvC,eAAex+B,gBAAgBxQ,KAAKywC,WAAWjvC,IAAK,EAAA+xC,iBAAiBE,UAAU5+B,MAAK,SAAAuiB,GACrF,EAAKqZ,WAAW3C,eAAiB,EAAAyF,iBAAiBE,YACnDr+B,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAq+B,UAAA,sBACI1zC,KAAKgvC,eAAex+B,gBAAgBxQ,KAAKywC,WAAWjvC,IAAK,EAAA+xC,iBAAiBI,SAAS9+B,MAAK,SAAAuiB,GACpF,EAAKqZ,WAAW3C,eAAiB,EAAAyF,iBAAiBI,WACnDv+B,OAAM,SAACC,GACN,EAAKC,MAAMD,OAIZ,YAAAC,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,eAO/D,YAAA02B,sBAAA,SAAsB5L,GAClBhoC,KAAKkY,YAAY5V,YAAY0lC,EAAKtlC,SAAS/B,UAAWqnC,EAAKtlC,UAEnB,UAApC1C,KAAK8T,cAAchU,cAAgE,eAApCE,KAAK8T,cAAchU,eAClEkoC,EAAK6L,WAAa,KAI1B,YAAAC,mBAAA,SAAmB9L,GAAnB,WAEIpb,YAAW,WACP,EAAKmnB,aAAe,EAAK9E,WAAWjwB,cAActD,SAAS,GAAGs4B,uBAAuB,6BAA6B,GAAGC,eACtH,GAEH,IAAIvzC,EAAeV,KAAKk0C,iBAAiBlM,EAAM,OAE3CtnC,EAAMC,WACNX,KAAKkY,YAAYtX,cAGrBZ,KAAKkY,YAAY3V,cAAc7B,EAAM8B,YAAa9B,IAGtD,YAAAyzC,sBAAA,SAAsBnM,GAClB,IAAItnC,EAAeV,KAAKk0C,iBAAiBlM,EAAM,OAE/ChoC,KAAKkY,YAAY3V,cAAc7B,EAAM8B,YAAa9B,IAGtD,YAAAwzC,iBAAA,SAAiBlM,EAAuBoM,GACpC,MAAgB,QAAZA,GACqB,MAAjBpM,EAAKtlC,WAITslC,EAAKtlC,SAAW,IAAI,EAAA2xC,MACpBrM,EAAKtlC,SAASlB,IAAM,OAASwmC,EAAKxmC,IAClCwmC,EAAKtlC,SAAS/B,WAAY,EAC1BqnC,EAAKtlC,SAASF,aAAc,EAC5BwlC,EAAKtlC,SAASS,OAAS,EACvB6kC,EAAKtlC,SAASoC,MAAQ,EAAAwvC,WAAWjE,IACjCrI,EAAKtlC,SAASmC,QAAUmjC,EAAK5lC,MAC7B4lC,EAAKtlC,SAASP,eAAiB6lC,EAAK7lC,gBAVzB6lC,EAAKtlC,WAcK,MAAjBslC,EAAKuM,WAITvM,EAAKuM,SAAW,IAAI,EAAAF,MACpBrM,EAAKuM,SAAS/yC,IAAM,OAASwmC,EAAKxmC,IAClCwmC,EAAKuM,SAAS5zC,WAAY,EAC1BqnC,EAAKuM,SAAS/xC,aAAc,EAC5BwlC,EAAKuM,SAASpxC,OAAS,EACvB6kC,EAAKuM,SAASzvC,MAAQ,EAAAwvC,WAAWE,IACjCxM,EAAKuM,SAAS1vC,QAAUmjC,EAAK+H,SAC7B/H,EAAKuM,SAASpyC,eAAiB,MAVpB6lC,EAAKuM,WAgBxB,YAAAE,uBAAA,SAAuBzM,GACnB,GAAIA,EAAK0M,gBAAkB1M,EAAK2M,eAAgB,CAC5C,IAAIC,EAAO5M,EAAK0M,eACZ1M,EAAK5lC,MAAMT,aAAeqmC,EAAK5lC,MAAMT,YAAY,KACjDizC,EAAO5M,EAAK5lC,MAAMT,YAAY,IAElC,IAAIkzC,EAAO7M,EAAK2M,eAOhB,OANI3M,EAAK5lC,MAAMT,aAAeqmC,EAAK5lC,MAAMT,YAAY,KACjDkzC,EAAO7M,EAAK5lC,MAAMT,YAAY,IAElCqmC,EAAK5lC,MAAMT,YAAc,CAAC,CAACizC,GAAQ,EAAGC,GAAQ,WACvC7M,EAAK0M,2BACL1M,EAAK2M,eAIhB,IAAmBG,EAMnB,GAHA9M,EAAK6L,WAAWkB,UAHGD,EAGmB9M,EAAK5lC,MAAMT,YAAY,GAAG,GAHtCqzC,SAASF,IAAQG,KAAKC,IAAIJ,IAAQ,IAI5D9M,EAAK6L,WAAWsB,UAHI,SAAAL,GAAO,OAAAE,SAASF,IAAQG,KAAKC,IAAIJ,IAAQ,IAGjCM,CAAYpN,EAAK5lC,MAAMT,YAAY,GAAG,KAE7DqmC,EAAK6L,WAAWkB,WAAa/M,EAAK6L,WAAWsB,UAI9C,OAFAn1C,KAAK8B,SAAU,OACf9B,KAAKkvC,cAAcl1B,KAAKha,KAAK8B,SAIjC9B,KAAKkY,YAAYjX,oBAAoB+mC,EAAK5lC,MAAMT,YAAY,GAAG,GAAIqmC,EAAK5lC,MAAMT,YAAY,GAAG,K,iCA7qBxFkJ,GAAuB,uY,iCAAvBA,EAAuB,wD,GAAA,K,sfAHjB,CAAC,CAAEo2B,QAAS,EAAAoU,iBAAkBlU,YAAa,EAAAmU,WAAS,slNChEvE,0BACE,oEAIA,8BAKA,6BAEE,+BACE,4BAGE,4BACE,+BAoRF,iBACD,gDAID,iBAEF,iBACF,iBACF,kB,MAzSQ,uDAWK,4IACG,oDAqRyF,sG,ukDDxPzF,CACR,CACI,EAAA7hC,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,a,EAjBrC,GA0Ba,EAAA9I,4B,+DAAAA,GAAuB,E,KA1BnC,EAAAsE,U,MAAU,CACPC,SAAU,kBACVC,YAAa,mCACbC,UAAW,CAAC,yBACZimC,KAAM,CAAE,eAAgB,QACxB1hC,WAAY,CACR,CACI,EAAAJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,UAMjC6hC,cAAe,CAAC,CAAEvU,QAAS,EAAAoU,iBAAkBlU,YAAa,EAAAmU,c,+QAUjD7gC,MAAO,CAAF,C,KAAb,EAAAlF,QAEoC46B,yBAA0B,CAAF,C,KAA5D,EAAAK,a,MAAa,yBAOJ0E,cAAa,E,KAAtB,EAAAjoC,SAEQsN,SAAU,CAAF,C,KAAhB,EAAAhF,QAEQ4/B,YAAa,CAAF,C,KAAnB,EAAA5/B,QAEQqJ,kBAAmB,CAAF,C,KAAzB,EAAArJ,QAGS6H,SAAQ,E,KAAjB,EAAAnQ,SAMYwuC,cAAa,E,KAAzB,EAAAlmC,QAeQuE,cAAe,CAAF,C,KAArB,EAAAvE,QAKQsoB,eAAgB,CAAF,C,KAAtB,EAAAtoB,QAEQkS,UAAW,CAAF,C,KAAjB,EAAAlS,W,ydExHL,YAEA,SACA,SAGA,SACA,SAEA,cAIE,WAAYmmC,EAAoCr7B,EAAwB2tB,EAAuB2N,GAA/F,MACI,YAAMD,EAAWr7B,EAAQ2tB,IAAK,K,OAC9B,EAAK2N,eAAiBA,EAEK,MAAvB,EAAKA,iBACL,EAAKA,eAAe3e,QAAU,I,EAoaxC,OA7a6C,OAa3C,sBAAI,wBAAS,C,IAsDb,WACI,OAAOh3B,KAAKgoC,KAAKrP,W,IAvDrB,SAAcA,GACV,GAAiB,MAAb34B,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAnC,CAIA,GAA+B,0BAA3Bra,KAAKqa,OAAOC,WAAwC,CACpD,GAAiB,MAAbta,KAAK4yC,KACL,GAA2B,MAAvB5yC,KAAK21C,eACL31C,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKpxC,IAAM,OAChBxB,KAAK4yC,KAAKv4B,OAAS,SAClBra,KAAKqa,OAAiCi3B,cAAcrqB,cAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,KAC7FhO,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,UAC3E,CACH,GAAI5yC,KAAK21C,eAAehd,YAAcA,EAClC,OAGJ,IAAIkd,EAA6B71C,KAAK21C,eAAehc,QAAQ35B,KAAK01C,UAAUj0B,UAAU3M,MAAM9U,KAAK01C,UAAUj0B,UAAU3M,MAAM9S,OAAS,GAAGgM,MAAM2lB,UACzIoc,EAAsC,MAAnB8F,EAA0B,KAAOA,EAAgBp0C,WAAWJ,KAAO,UAAYw0C,EAAgBp0C,WAAWuM,KAEjIhO,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAK21C,eAAen0C,IACpCxB,KAAK4yC,KAAK7C,SAAWA,EACrB/vC,KAAK4yC,KAAKzB,aAAenxC,KAAK21C,eAAehd,UAC7C34B,KAAK4yC,KAAKF,WAAa1yC,KAAK21C,eAAevO,QAC1CpnC,KAAKqa,OAAiCi3B,cAAcrqB,cAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,KAC7FhO,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,MAC9E5yC,KAAK4yC,KAAKjZ,QAAU35B,KAAK21C,eAAehc,QAI5ChB,IAAc34B,KAAK4yC,KAAKzB,qBACjBnxC,KAAK4yC,KAAKG,oBACV/yC,KAAKgoC,KAAKmJ,eAEjBnxC,KAAK4yC,KAAKG,aAAepa,EACzB34B,KAAKgoC,KAAKmJ,aAAenxC,KAAK81C,sBAAsB91C,KAAK4yC,KAAKzB,eAIlEnxC,KAAK+1C,sBAC6B,0BAA3B/1C,KAAKqa,OAAOC,aACnBta,KAAK21C,eAAehd,UAAYA,GAGpC34B,KAAKgoC,KAAKrP,UAAYA,EAEtB34B,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,U,gCAOvC,sBAAI,sBAAO,C,IAsDX,WACI,OAAOra,KAAKgoC,KAAKZ,S,IAvDrB,SAAYA,GACR,GAAiB,MAAbpnC,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAnC,CAIA,GAA+B,0BAA3Bra,KAAKqa,OAAOC,WAAwC,CACpD,GAAiB,MAAbta,KAAK4yC,KACL,GAA2B,MAAvB5yC,KAAK21C,eACL31C,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKpxC,IAAM,OAChBxB,KAAK4yC,KAAKv4B,OAAS,SAClBra,KAAKqa,OAAiCi3B,cAAcrqB,cAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,KAC7FhO,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,UAC3E,CACH,GAAI5yC,KAAK21C,eAAevO,UAAYA,EAChC,OAGJ,IAAIyO,EAA6B71C,KAAK21C,eAAehc,QAAQ35B,KAAK01C,UAAUj0B,UAAU3M,MAAM9U,KAAK01C,UAAUj0B,UAAU3M,MAAM9S,OAAS,GAAGgM,MAAM2lB,UACzIoc,EAAsC,MAAnB8F,EAA0B,KAAOA,EAAgBp0C,WAAWJ,KAAO,UAAYw0C,EAAgBp0C,WAAWuM,KAEjIhO,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAK21C,eAAen0C,IACpCxB,KAAK4yC,KAAK7C,SAAWA,EACrB/vC,KAAK4yC,KAAKzB,aAAenxC,KAAK21C,eAAehd,UAC7C34B,KAAK4yC,KAAKF,WAAa1yC,KAAK21C,eAAevO,QAC1CpnC,KAAKqa,OAAiCi3B,cAAcrqB,cAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,KAC7FhO,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,MAC9E5yC,KAAK4yC,KAAKjZ,QAAU35B,KAAK21C,eAAehc,QAI5CyN,IAAYpnC,KAAK4yC,KAAKF,mBACf1yC,KAAK4yC,KAAKI,kBACVhzC,KAAKgoC,KAAK0K,aAEjB1yC,KAAK4yC,KAAKI,WAAa5L,EACvBpnC,KAAKgoC,KAAK0K,WAAa1yC,KAAK81C,sBAAsB91C,KAAK4yC,KAAKF,aAIhE1yC,KAAK+1C,sBAC6B,0BAA3B/1C,KAAKqa,OAAOC,aACnBta,KAAK21C,eAAevO,QAAUA,GAGlCpnC,KAAKgoC,KAAKZ,QAAUA,EAEpBpnC,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,U,gCAOvC,YAAA27B,eAAA,SAAe30C,EAAqCs4B,GAChD,GAAiB,MAAb35B,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAnC,CAIA,IAAI47B,EAA0B,KAK9B,GAJY,MAAR50C,IACA40C,EAAetc,EAAQt4B,EAAK2M,MAAM2lB,WAGP,0BAA3B3zB,KAAKqa,OAAOC,WAAwC,CACpD,GAAiB,MAAbta,KAAK4yC,KACL,GAA2B,MAAvB5yC,KAAK21C,eACL31C,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKpxC,IAAM,OAChBxB,KAAK4yC,KAAKv4B,OAAS,SAClBra,KAAKqa,OAAiCi3B,cAAcrqB,cAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,KAC7FhO,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,UAC3E,CAEH,IAAIsD,EAAiCl2C,KAAKm2C,iCAAiCn2C,KAAK21C,eAAehc,SAAShG,UACpGoc,EAA0C,MAAvBmG,EAA8B,KAAOA,EAAoBz0C,WAAWJ,KAAO,UAAY60C,EAAoBz0C,WAAWuM,KAE7I,GAC4B,MAAvBkoC,GAA+C,MAAhBD,GACP,MAAvBC,GAA+C,MAAhBD,GACjCC,EAAoBz0C,WAAWuM,OAASioC,EAAax0C,WAAWuM,KAChE,OAGJhO,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAK21C,eAAen0C,IACpCxB,KAAK4yC,KAAK7C,SAAWA,EACrB/vC,KAAK4yC,KAAKwD,WAAap2C,KAAK21C,eAAehc,QAC3C35B,KAAK4yC,KAAKzB,aAAenxC,KAAK21C,eAAehd,UAC7C34B,KAAK4yC,KAAKF,WAAa1yC,KAAK21C,eAAevO,QAC1CpnC,KAAKqa,OAAiCi3B,cAAcrqB,cAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,KAC7FhO,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,MAItF,IAAIyD,EAA4B,KACZ,MAAhBJ,IACAI,EAAoBJ,EAAax0C,WAAWJ,KAAO,UAAY40C,EAAax0C,WAAWuM,MAGvFqoC,IAAsBr2C,KAAK4yC,KAAK7C,iBACzB/vC,KAAK4yC,KAAKQ,gBACVpzC,KAAKgoC,KAAK+H,WAEjB/vC,KAAK4yC,KAAKQ,SAAWiD,EACrBr2C,KAAKgoC,KAAK+H,SAAiC,MAAtB/vC,KAAK4yC,KAAK7C,SAAmB,KAAO/vC,KAAK4yC,KAAK7C,SAASmD,MAAM,WAAW,IAGjGlzC,KAAK4yC,KAAKjZ,QAAUA,EAGpB35B,KAAK+1C,sBAC6B,0BAA3B/1C,KAAKqa,OAAOC,aACnBta,KAAK21C,eAAehc,QAAUA,GAGlC35B,KAAKgoC,KAAK5lC,MAAMu3B,QAAUA,EAE1B35B,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,UAGhC,YAAA87B,iCAAP,SAAwCxc,GAEpC,IADA,IACSh1B,EADC3E,KAAK01C,UAAUj0B,UAAU3M,MAAM9S,OACtB,EAAG2C,GAAK,IAAKA,EAAG,CAC/B,IAAItD,EAAOrB,KAAK01C,UAAUj0B,UAAU3M,MAAMnQ,GAE1C,GAAIuJ,OAAO+jC,UAAUvE,eAAewE,KAAKvY,EAASt4B,EAAK2M,OAAS2rB,EAAQt4B,EAAK2M,MAAM2lB,UAC/E,OAAOgG,EAAQt4B,EAAK2M,MAI5B,OAAO,MAGX,sBAAI,oBAAK,C,IAIT,WACI,OAAOhO,KAAKgoC,KAAK5lC,O,IALrB,SAAU0xB,GACN9zB,KAAKgoC,KAAK5lC,MAAQ0xB,G,gCAOf,YAAAwiB,WAAP,SAAkBj1C,GACdrB,KAAKgoC,KAAK5lC,MAAMu3B,QAAQt4B,EAAK2M,MAAQ,CAAE4W,KAAM,GAAI+O,UAAW,MAK5D,IAFA,IAAIme,EAAQ9xC,KAAKgoC,KAAK5lC,MAEbuC,EADC3E,KAAK01C,UAAUj0B,UAAU3M,MAAM9S,OACtB,EAAG2C,GAAK,IAAKA,EAAG,CAC/B,IAAI,EAAO3E,KAAK01C,UAAUj0B,UAAU3M,MAAMnQ,GAE1C,GAAIuJ,OAAO+jC,UAAUvE,eAAewE,KAAKJ,EAAMnY,QAAS,EAAK3rB,OAAS8jC,EAAMnY,QAAQ,EAAK3rB,MAAM2lB,UAE3F,YADA3zB,KAAKg2C,eAAe,EAAMh2C,KAAKgoC,KAAK5lC,MAAMu3B,SAMlD35B,KAAKg2C,eAAe,KAAMh2C,KAAKgoC,KAAK5lC,MAAMu3B,UAG9C,YAAAU,uBAAA,SAAuBviB,EAAczW,EAAWywC,EAAYzqB,GAA5D,WACQiC,EAAoBjoB,EAAK2M,KAEzBu4B,EAAa,KACblW,EAAiB,KACjBpJ,EAAgB,KAEpB,GAAII,EAAQ,EAAG,CACX,IAAIkvB,EAAQv2C,KAAK01C,UAAUj0B,UAAU3M,MAAMuS,EAAQ,GAC7C,EAASyqB,EAAMnY,QAAQ4c,EAAMvoC,MAEX,MAApB,EAAO2lB,WAAyD,MAApC,EAAOA,UAAUlyB,WAAWuM,OACxDiZ,EAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,KACzCu4B,EAAa,EAAO5S,UAAUlyB,WAAWuM,KACzCqiB,EAAiB,EAAOsD,UAAUlyB,WAAWJ,MAIrD,OAAO,EAAA61B,WAAW1hB,QAAO,SAAC2hB,GACtB,GAAkB,MAAdoP,EAGA,IAFA,IAAIiQ,EAAQnvB,EAES,MAAdkf,GAAsBiQ,EAAQ,GAAG,CACpCA,GAAgB,EAEhB,IAAI,EAAS1E,EAAMnY,QAAQ,EAAK+b,UAAUj0B,UAAU3M,MAAM0hC,GAAOxoC,MAEnD,MAAV,IACwB,MAApB,EAAO2lB,WAAyD,MAApC,EAAOA,UAAUlyB,WAAWuM,MACxDu4B,EAAa,EAAO5S,UAAUlyB,WAAWuM,KACzCiZ,EAAgB,EAAKyuB,UAAUj0B,UAAUzT,KACzCqiB,EAAiB,EAAKqlB,UAAUj0B,UAAU3M,MAAM0hC,GAAOxoC,MAC/B,MAAjB,EAAOyoC,SACdlQ,EAAa,EAAOkQ,OACpBxvB,EAAgB,EAAKyuB,UAAUj0B,UAAUzT,KACzCqiB,EAAiB,EAAKqlB,UAAUj0B,UAAU3M,MAAM0hC,GAAOxoC,OAMvE,EAAK0nC,UAAU3hC,QAAQoa,wBAAwB2jB,EAAMnY,QAAQt4B,EAAK2M,MAAM4W,KAAM0E,EAAmBid,EAAYlW,EAAgBpJ,EAAenP,GAAMjD,MAAK,SAAAuiB,GACnJD,EAASllB,KAAKmlB,UAK1B,YAAAO,kBAAA,SAAkB7pB,EAAmBzM,EAAWywC,EAAYh6B,GAA5D,WAGIg6B,EAAMnY,QAAQt4B,EAAK2M,MAAM4W,KAAO9W,EAAE8b,KAAK4M,KAAO,MAAQ1oB,EAAE8b,KAAK5b,KAC7D8jC,EAAMnY,QAAQt4B,EAAK2M,MAAMyoC,OAAS3oC,EAAE8b,KAAK5b,KAIzC,IAFA,IAAIiiB,EAAc,GAETtrB,EAAI,EAAGA,EAAI3E,KAAK01C,UAAUj0B,UAAU3M,MAAM9S,OAAQ2C,IAAK,CAC5D,IAAIyoC,EAAUptC,KAAK01C,UAAUj0B,UAAU3M,MAAMnQ,GAI7C,GAFAsrB,EAAYltB,KAAKqqC,EAAQp/B,MAErBo/B,EAAQp/B,OAAS3M,EAAK2M,KACtB,MAIRhO,KAAK01C,UAAU3hC,QAAQ+b,oBAAoBhiB,EAAE8b,KAAK2jB,IAAKlsC,EAAK2M,KAAMiiB,GAAa,EAAMnY,GAAMjD,MAAK,SAAA6hC,GAE5FA,EAAU/c,QAAU+c,EAAU/c,QAAQr2B,QAAO,SAAAqzC,GAAK,OAAAA,EAAEn1B,gBAAkB,EAAKk0B,UAAUj0B,UAAUzT,eAExF8jC,EAAMnY,QAAQt4B,EAAK2M,MAAMyoC,OAChC3E,EAAMnY,QAAQt4B,EAAK2M,MAAM2lB,UAAY+iB,EAAU/iB,UAC/Cme,EAAMnY,QAAQt4B,EAAK2M,MAAM4W,KAAO8xB,EAAU/iB,UAAUlyB,WAAW8T,aAAamT,eAAiB,MAAQguB,EAAU/iB,UAAUlyB,WAAWuM,KAEpI,IAAK,IAAIrJ,EAAI,EAAGA,EAAI,EAAK+wC,UAAUj0B,UAAU3M,MAAM9S,OAAQ2C,IAAK,CAI5D,IAHA,IAAIyoC,EAAU,EAAKsI,UAAUj0B,UAAU3M,MAAMnQ,GACzCiyC,EAAWF,EAEI,MAAZE,GAAoBA,EAASjjB,UAAUlyB,WAAWJ,OAAS+rC,EAAQp/B,MAElE4oC,EADAA,EAASjd,QAAQ33B,OAAS,EACf40C,EAASjd,QAAQ,GAEjB,KAIH,MAAZid,IACA9E,EAAMnY,QAAQyT,EAAQp/B,MAAM2lB,UAAYijB,EAASjjB,UACjDme,EAAMnY,QAAQyT,EAAQp/B,MAAM4W,KAAOgyB,EAASjjB,UAAUlyB,WAAW8T,aAAamT,eAAiB,MAAQkuB,EAASjjB,UAAUlyB,WAAWuM,MAI7I,EAAKgoC,eAAe30C,EAAMywC,EAAMnY,aAIxC,YAAAmZ,0BAAA,WACI,IAAI6C,EAAiB,IAAI,EAAAkB,uBACzBlB,EAAe3e,QAAU,GACzB2e,EAAen0C,IAAMxB,KAAK01C,UAAUhF,eAEpCiF,EAAehc,QAAU,GAEzB,IAAK,IAAIh1B,EAAI,EAAGA,EAAI3E,KAAK01C,UAAUj0B,UAAU3M,MAAM9S,OAAQ2C,IAAK,CAC5D,IAAIyoC,EAAUptC,KAAK01C,UAAUj0B,UAAU3M,MAAMnQ,GAE7CgxC,EAAehc,QAAQyT,EAAQp/B,MAAQ,CAAE4W,KAAM,GAAI+O,UAAW,MAE9DgiB,EAAe3e,QAAU,GAG7B,OAAO2e,GAGX,YAAApF,gBAAA,WACIvwC,KAAKgoC,KAAKmI,WAAa,EAAAC,WAAWC,IAElCrwC,KAAKgoC,KAAK5lC,MAAQpC,KAAK8yC,4BAEnB9yC,KAAK01C,UAAUjF,sBAAsB,EAAAmB,wBACrC5xC,KAAK21C,eAAiB31C,KAAK8yC,4BAE3B9yC,KAAK01C,UAAUjF,WAAWiB,WAAWG,QAAQ9uC,KAAK/C,KAAK21C,kBAI/D,YAAAmB,gBAAA,WACsB,OAAd92C,KAAK4yC,MAC0B,0BAA3B5yC,KAAKqa,OAAOC,YACe,MAAvBta,KAAK21C,iBACL31C,KAAKgoC,KAAK5lC,MAAQ6N,KAAKmL,MAAMnL,KAAKC,UAAU,CAAEypB,QAAS35B,KAAK21C,eAAehc,QAAS3C,QAAS,MAC7Fh3B,KAAKgoC,KAAKrP,UAAY34B,KAAK21C,eAAehd,UAC1C34B,KAAKgoC,KAAKZ,QAAUpnC,KAAK21C,eAAevO,eAEjCpnC,KAAKgoC,KAAK+H,gBACV/vC,KAAKgoC,KAAKmJ,oBACVnxC,KAAKgoC,KAAK0K,YAO7B1yC,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,OAGhC,YAAAtyC,OAAP,sBACI,GAA+B,0BAA3BN,KAAKqa,OAAOC,WACZ,GAAiB,MAAbta,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAqB,CAEpD,IAAI08B,EAAsC/2C,KAAKqa,QAEzCgN,EAAQ0vB,EAAazF,cAAcC,eAAe3uC,WAAU,SAAAqY,GAAO,OAAAA,EAAIzZ,MAAQ,EAAKoxC,KAAKpxC,SAElF,GACTu1C,EAAazF,cAAcC,eAAezuC,OAAOukB,EAAO,OAEzD,IAAiB,MAAbrnB,KAAK4yC,KAOZ,cANO5yC,KAAK4yC,KAAKQ,gBACVpzC,KAAK4yC,KAAKG,oBACV/yC,KAAK4yC,KAAKI,WACjBhzC,KAAK+1C,kBACL/1C,KAAK01C,UAAUtE,eAAepxC,KAAKqa,aACnCra,KAAK82C,kBAEF,GAA2B,MAAvB92C,KAAK21C,gBAAuC,MAAb31C,KAAK4yC,KAAc,CACzD,IAAIoE,EAAoCh3C,KAAKm2C,iCAAiCn2C,KAAK21C,eAAehc,SAAShG,UACvGoc,EAA6C,MAA1BiH,EAAiC,KAAOA,EAAuBv1C,WAAWJ,KAAO,UAAY21C,EAAuBv1C,WAAWuM,KAEtJhO,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAK21C,eAAen0C,IACpCxB,KAAK4yC,KAAK7C,SAAWA,EACrB/vC,KAAK4yC,KAAKzB,aAAenxC,KAAK21C,eAAehd,UAC7C34B,KAAK4yC,KAAKF,WAAa1yC,KAAK21C,eAAevO,QAC1CpnC,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,MAC7E5yC,KAAKqa,OAAiCi3B,cAAcrqB,cAAgBjnB,KAAK01C,UAAUj0B,UAAUzT,WAE/F,GAA+B,0BAA3BhO,KAAKqa,OAAOC,WAAwC,CAC3D,IAAI+M,GAEW,KAFXA,EAASrnB,KAAKqa,OAAiCq3B,WAAWG,QAAQjvC,WAAU,SAAAqY,GAAO,OAAAA,EAAIzZ,MAAQ,EAAKm0C,eAAen0C,SAGlHxB,KAAKqa,OAAiCq3B,WAAWG,QAAQ/uC,OAAOukB,EAAO,GAIhFrnB,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,SAGzC,EA7aA,CAA6C,EAAA48B,6BAAhC,EAAAjF,2B,uHCTb,aAGA,SACA,SAEA,SAEA,aAQE,WAAY0D,EAAoCr7B,EAAwB2tB,GACpEhoC,KAAKgoC,KAAOA,EACZhoC,KAAKqa,OAASA,EACdra,KAAK01C,UAAYA,EAiXvB,OA7WE,sBAAI,kBAAG,C,IAAP,WACI,OAAO11C,KAAKgoC,KAAKxmC,K,gCAGrB,sBAAI,wBAAS,C,IAAb,WACI,OAAOxB,KAAKgoC,KAAKrP,W,IAGrB,SAAcA,GACV,GAAiB,MAAb34B,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAnC,CAIA,GAA+B,0BAA3Bra,KAAKqa,OAAOC,WAAwC,CACpD,GAAiB,MAAbta,KAAK4yC,KACL,GAA0B,MAAtB5yC,KAAKmyC,cACLnyC,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SAClBra,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,UAC3E,CACH,GAAI5yC,KAAKmyC,cAAcxZ,YAAcA,EACjC,OAGJ34B,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAKmyC,cAAc3wC,IACnCxB,KAAK4yC,KAAK7C,SAAW/vC,KAAKmyC,cAAc/vC,MACxCpC,KAAK4yC,KAAKzB,aAAenxC,KAAKmyC,cAAcxZ,UAC5C34B,KAAK4yC,KAAKF,WAAa1yC,KAAKmyC,cAAc/K,QACzCpnC,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,MAIlFja,IAAc34B,KAAK4yC,KAAKzB,qBACjBnxC,KAAK4yC,KAAKG,oBACV/yC,KAAKgoC,KAAKmJ,eAEjBnxC,KAAK4yC,KAAKG,aAAepa,EACzB34B,KAAKgoC,KAAKmJ,aAAenxC,KAAK81C,sBAAsB91C,KAAK4yC,KAAKzB,eAIlEnxC,KAAK+1C,sBAC6B,0BAA3B/1C,KAAKqa,OAAOC,aACnBta,KAAKmyC,cAAcxZ,UAAYA,GAGnC34B,KAAKgoC,KAAKrP,UAAYA,EAEtB34B,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,U,gCAGvC,sBAAI,sBAAO,C,IAAX,WACI,OAAOra,KAAKgoC,KAAKZ,S,IAGrB,SAAYA,GACR,GAAiB,MAAbpnC,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAnC,CAIA,GAA+B,0BAA3Bra,KAAKqa,OAAOC,WAAwC,CACpD,GAAiB,MAAbta,KAAK4yC,KACL,GAA0B,MAAtB5yC,KAAKmyC,cACLnyC,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKpxC,IAAM,OAChBxB,KAAK4yC,KAAKv4B,OAAS,SAClBra,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,UAC3E,CACH,GAAI5yC,KAAKmyC,cAAc/K,UAAYA,EAC/B,OAGJpnC,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAKmyC,cAAc3wC,IACnCxB,KAAK4yC,KAAK7C,SAAW/vC,KAAKmyC,cAAc/vC,MACxCpC,KAAK4yC,KAAKzB,aAAenxC,KAAKmyC,cAAcxZ,UAC5C34B,KAAK4yC,KAAKF,WAAa1yC,KAAKmyC,cAAc/K,QACzCpnC,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,MAIlFxL,IAAYpnC,KAAK4yC,KAAKF,mBACf1yC,KAAK4yC,KAAKI,kBACVhzC,KAAKgoC,KAAK0K,aAEjB1yC,KAAK4yC,KAAKI,WAAa5L,EACvBpnC,KAAKgoC,KAAK0K,WAAa1yC,KAAK81C,sBAAsB91C,KAAK4yC,KAAKF,aAIhE1yC,KAAK+1C,sBAC6B,0BAA3B/1C,KAAKqa,OAAOC,aACnBta,KAAKmyC,cAAc/K,QAAUA,GAGjCpnC,KAAKgoC,KAAKZ,QAAUA,EAEpBpnC,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,U,gCAGvC,sBAAI,oBAAK,C,IAAT,WACI,OAAOra,KAAKgoC,KAAK5lC,O,IAGrB,SAAUA,GACN,GAAiB,MAAbpC,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAnC,CAkBA,GAda,MAATjY,EAC0C,SAAtCpC,KAAK01C,UAAU9kB,cAAcvvB,KAC7Be,EAAQ,CAACA,GACoC,SAAtCpC,KAAK01C,UAAU9kB,cAAcvvB,OACpCe,EAAQ,IAAIkS,KAAKlS,GAAO2xB,WAEZ,MAAT3xB,IACmC,aAAtCpC,KAAK01C,UAAU9kB,cAAcvvB,KAC7Be,EAAQpC,KAAK01C,UAAUx9B,YAAYvS,2BACU,cAAtC3F,KAAK01C,UAAU9kB,cAAcvvB,OACpCe,EAAQ,KAIe,0BAA3BpC,KAAKqa,OAAOC,WAAwC,CACpD,GAAiB,MAAbta,KAAK4yC,KACL,GAA0B,MAAtB5yC,KAAKmyC,cACLnyC,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKpxC,IAAM,OAChBxB,KAAK4yC,KAAKv4B,OAAS,SAClBra,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,UAC3E,CACH,GAAI5yC,KAAKk3C,eAAel3C,KAAKmyC,cAAc/vC,MAAOA,GAC9C,OAGJpC,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAKmyC,cAAc3wC,IACnCxB,KAAK4yC,KAAK7C,SAAW/vC,KAAKmyC,cAAc/vC,MACxCpC,KAAK4yC,KAAKzB,aAAenxC,KAAKmyC,cAAcxZ,UAC5C34B,KAAK4yC,KAAKF,WAAa1yC,KAAKmyC,cAAc/K,QACzCpnC,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,MAI7D,WAArB5yC,KAAK4yC,KAAKv4B,QAAuBra,KAAKk3C,eAAel3C,KAAK4yC,KAAK7C,SAAU3tC,WAClEpC,KAAK4yC,KAAKQ,gBACVpzC,KAAKgoC,KAAK+H,WAEjB/vC,KAAK4yC,KAAKQ,SAAWnjC,KAAKmL,MAAMnL,KAAKC,UAAU9N,IAC/CpC,KAAKgoC,KAAK+H,SAAiC,MAAtB/vC,KAAK4yC,KAAK7C,SAAmB,KAAO/vC,KAAKm3C,uBAAuBn3C,KAAK4yC,KAAK7C,WAInG/vC,KAAK+1C,sBAC6B,0BAA3B/1C,KAAKqa,OAAOC,aACnBta,KAAKmyC,cAAc/vC,MAAQA,GAG/BpC,KAAKgoC,KAAK5lC,MAAQA,EAElBpC,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,U,gCAGhC,YAAA+8B,kBAAP,SAAyBC,GAErBr3C,KAAKoC,MAAQpC,KAAKoC,OAGtB,YAAA2zC,gBAAA,sBACI,GAAiB,MAAb/1C,KAAK4yC,WAAuC0E,IAAvBt3C,KAAK4yC,KAAKQ,eAAqDkE,IAA3Bt3C,KAAK4yC,KAAKG,mBAAuDuE,IAAzBt3C,KAAK4yC,KAAKI,WAA0B,CACrI,IAAMuE,EAASv3C,KAAKqa,OAAiCi3B,cAAcC,eAE7DlqB,EAAQkwB,EAAM30C,WAAU,SAAA4gC,GAAK,OAAAA,EAAEhiC,MAAQ,EAAKoxC,KAAKpxC,QAExC,IAAX6lB,GACAkwB,EAAMz0C,OAAOukB,EAAO,GAGxBrnB,KAAK4yC,KAAO,OAIpB,YAAAkD,sBAAA,SAAsBh+B,GAClB,OAAO9X,KAAK01C,UAAUthC,YAAY2D,qBAAqBD,IAG3D,YAAAq/B,uBAAA,SAAuBrjB,GACnB,MAA0C,SAAtC9zB,KAAK01C,UAAU9kB,cAAcvvB,KACtBrB,KAAK01C,UAAUthC,YAAY2D,qBAAqB,IAAIzD,KAAKwf,IAG7DA,GAGX,YAAAojB,eAAA,SAAeM,EAAWC,GACtB,GAA0C,YAAtCz3C,KAAK01C,UAAU9kB,cAAcvvB,KAC7B,OAAOm2C,IAASC,EAGpB,GAAc,KAATD,GAAuB,MAARC,GAA2B,KAATA,GAAuB,MAARD,EACjD,OAAO,EAGX,IAAKA,IAASC,EACV,OAAO,EACJ,IAAMD,GAAQC,IAAWA,GAAQD,EACpC,OAAO,EAOX,GAA0C,SAAtCx3C,KAAK01C,UAAU9kB,cAAcvvB,MAC7B,GAAY,MAARm2C,GAAwB,MAARC,EAChB,OAAOD,EAAKx1C,SAAWy1C,EAAKz1C,QAAUw1C,EAAK,KAAOC,EAAK,OAExD,IAA0C,aAAtCz3C,KAAK01C,UAAU9kB,cAAcvvB,KACpC,OAAO,UAAkBm2C,EAAMC,GAC5B,GAA0C,SAAtCz3C,KAAK01C,UAAU9kB,cAAcvvB,KAIpC,OAH+B,iBAATm2C,EAAqBxzB,SAASwzB,GAAQA,MAC7B,iBAATC,EAAqBzzB,SAASyzB,GAAQA,GAGzD,GAA0C,UAAtCz3C,KAAK01C,UAAU9kB,cAAcvvB,KAAkB,CACtD,IAAMm2C,EAAKlkC,eAAiBmkC,EAAKnkC,cAAiBkkC,EAAKlkC,aAAatR,SAAWy1C,EAAKnkC,aAAatR,OAC7F,OAAO,EAIX,IADA,IAAI0C,EAAM8yC,EAAKlkC,aAAatR,OACnB2C,EAAI,EAAGA,EAAID,IAAOC,EAAG,CAC1B,IAAI0yC,EAAcG,EAAKlkC,aAAa3O,GAEhC+yC,EAAM13C,KAAK01C,UAAU1F,iBAAiByH,EAAMJ,EAAYvH,QACxD6H,EAAMN,EAAYj1C,MAEtB,KAAa,KAARu1C,GAAqB,MAAPD,GAAyB,KAARA,GAAqB,MAAPC,IAEvCA,IAAQD,EACf,OAAO,EAIf,OAAO,GAGX,OAAOF,IAASC,GAGpB,YAAAX,gBAAA,WACsB,OAAd92C,KAAK4yC,MAC0B,0BAA3B5yC,KAAKqa,OAAOC,YACc,MAAtBta,KAAKmyC,gBACLnyC,KAAKgoC,KAAK5lC,MAAoC,MAA5BpC,KAAKmyC,cAAc/vC,MAAgB6N,KAAKmL,MAAMnL,KAAKC,UAAUlQ,KAAKmyC,cAAc/vC,QAAU,KAC5GpC,KAAKgoC,KAAKrP,UAAY34B,KAAKmyC,cAAcxZ,UACzC34B,KAAKgoC,KAAKZ,QAAUpnC,KAAKmyC,cAAc/K,eAEhCpnC,KAAKgoC,KAAK+H,gBACV/vC,KAAKgoC,KAAKmJ,oBACVnxC,KAAKgoC,KAAK0K,YAO7B1yC,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEO,aAAtC5yC,KAAK01C,UAAU9kB,cAAcvvB,MAC7BrB,KAAK01C,UAAUx9B,YAAY7V,UAI5B,YAAA/B,OAAP,sBAKI,GAJIN,KAAK01C,UAAUx9B,YAAYvX,aAC3BX,KAAK01C,UAAUx9B,YAAYtX,cAGA,0BAA3BZ,KAAKqa,OAAOC,WACZ,GAAiB,MAAbta,KAAK4yC,MAAqC,WAArB5yC,KAAK4yC,KAAKv4B,OAAqB,CAEpD,IAAI08B,EAAsC/2C,KAAKqa,QAEzCgN,EAAQ0vB,EAAazF,cAAcC,eAAe3uC,WAAU,SAAAqY,GAAO,OAAAA,EAAIzZ,MAAQ,EAAKoxC,KAAKpxC,SAElF,GACTu1C,EAAazF,cAAcC,eAAezuC,OAAOukB,EAAO,OAEzD,IAAiB,MAAbrnB,KAAK4yC,KAOZ,cANO5yC,KAAK4yC,KAAKQ,gBACVpzC,KAAK4yC,KAAKG,oBACV/yC,KAAK4yC,KAAKI,WACjBhzC,KAAK+1C,kBACL/1C,KAAK01C,UAAUtE,eAAepxC,KAAKqa,aACnCra,KAAK82C,kBAEwB,MAAtB92C,KAAKmyC,eAAsC,MAAbnyC,KAAK4yC,OAC1C5yC,KAAK4yC,KAAO,IAAI,EAAAgD,kBAChB51C,KAAK4yC,KAAKv4B,OAAS,SACnBra,KAAK4yC,KAAKpxC,IAAMxB,KAAKmyC,cAAc3wC,IACnCxB,KAAK4yC,KAAK7C,SAAW/vC,KAAKmyC,cAAc/vC,MACxCpC,KAAK4yC,KAAKzB,aAAenxC,KAAKmyC,cAAcxZ,UAC5C34B,KAAK4yC,KAAKF,WAAa1yC,KAAKmyC,cAAc/K,QACzCpnC,KAAKqa,OAAiCi3B,cAAcC,eAAexuC,KAAK/C,KAAK4yC,YAE/E,GAA+B,0BAA3B5yC,KAAKqa,OAAOC,WAAwC,CAC3D,IAEI+M,EAFAuwB,EAAQ53C,KAAKqa,OAAiCuyB,cAActzB,WAAWtZ,KAAK01C,UAAU9kB,cAAc5iB,MAAM6lB,QAI/F,KAFXxM,EAAQuwB,EAAKh1C,WAAU,SAACqY,GAAU,OAAOA,EAAIzZ,MAAQ,EAAK2wC,cAAc3wC,SAGxEo2C,EAAK90C,OAAOukB,EAAO,GAI3BrnB,KAAKgoC,KAAK6K,oBAAoB7yC,KAAK4yC,MAEnC5yC,KAAK01C,UAAUtE,eAAepxC,KAAKqa,QAEO,aAAtCra,KAAK01C,UAAU9kB,cAAcvvB,MAC7BrB,KAAK01C,UAAUx9B,YAAY7V,UAI5B,YAAAkuC,gBAAP,WACI,GAAIvwC,KAAK01C,UAAUjF,sBAAsB,EAAAmB,sBAAuB,CAC5D,IAAI32B,EAAM,IAAI,EAAA48B,cACd58B,EAAIzZ,IAAMxB,KAAK01C,UAAUhF,eAEzB1wC,KAAK01C,UAAUjF,WAAW7D,cAActzB,WAAWtZ,KAAK01C,UAAU9kB,cAAc5iB,MAAM6lB,OAAO9wB,KAAKkY,GAElGjb,KAAKmyC,cAAgBl3B,EAGzB,GAA0C,UAAtCjb,KAAK01C,UAAU9kB,cAAcvvB,KAC7BrB,KAAKoC,MAAQpC,KAAK01C,UAAUzhC,SAASuB,cAClC,GAA0C,aAAtCxV,KAAK01C,UAAU9kB,cAAcvvB,KAChCrB,KAAK01C,UAAUnG,WAAWvtC,OAAS,EACnChC,KAAKoC,MAAQ6N,KAAKmL,MAAMnL,KAAKC,UAAUlQ,KAAK01C,UAAUnG,WAAWvvC,KAAK01C,UAAUnG,WAAWvtC,OAAS,GAAGI,QAEvGpC,KAAKoC,MAAQpC,KAAK01C,UAAUx9B,YAAYvS,gCAEzC,GAA0C,SAAtC3F,KAAK01C,UAAU9kB,cAAcvvB,KAAiB,CACrD,IAAIy2C,EAAQ93C,KAAK01C,UAAUr6B,qCAAqCrb,KAAK01C,UAAU9kB,cAAc5iB,MAEzF8pC,GAASA,EAAM91C,OAAS,IACxBhC,KAAKoC,MAAQ01C,EAAM,GAAG9pC,WAG1BhO,KAAKoC,MAAQ,KAGjBpC,KAAKgoC,KAAKmI,WAAa,EAAAC,WAAWC,KAGxC,EA5XA,GAAa,EAAA4G,+B,0HCRb,W,OAEA,2B,OAMI,YAAAc,UAAA,SAAUC,EAAc10C,GACpB,OAAK00C,GAAU10C,EAIR00C,EAAM10C,QAAO,SAAAsmB,GAAQ,OAA+B,IAA/BtmB,EAAO8P,QAAQwW,EAAK5b,SAHrCgqC,G,iCAJNhtC,I,qEAAAA,EAA8B,U,EAJ3C,GAIa,EAAAA,kC,+DAAAA,EAA8B,E,KAJ1C,EAAAitC,K,MAAK,CACFzhB,KAAM,mCACN0hB,MAAM,M,kICJV,WAOA,GANA,MAEA,MAEA,MAEA,Q,8FCUY,uCDNZ,iBAmBE,WAAoBxY,EAAkDxiB,EAAsCnJ,EAA8Bu3B,GAAtH,KAAA5L,sBAAkD,KAAAxiB,eAAsC,KAAAnJ,UAA8B,KAAAu3B,QACtItrC,KAAKi4B,QAAUlkB,EAAQkkB,UACvBj4B,KAAKk4B,aAAel4B,KAAKi4B,SAAWlkB,EAAQmkB,eAC5Cl4B,KAAKm4B,cAAgBn4B,KAAKi4B,SAAWj4B,KAAKk4B,cAAgBnkB,EAAQqkB,gBAClEp4B,KAAKwY,kBAAoBzE,EAAQoF,oB,OAGrC,YAAA3Z,SAAA,sBACIQ,KAAKm4C,cAAgBn4C,KAAKsrC,MAAMx6B,OAAOgJ,WAAU,SAAAhJ,GAC7C,EAAKsnC,aAAetnC,EAAY,QAIxC,YAAA8B,YAAA,WACI5S,KAAKm4C,cAAcvgC,eAGhB,YAAAtC,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCA/BpD9R,GAA0B,4J,iCAA1BA,EAA0B,gUCjBvC,4BACE,4BACA,6BAEA,4BAEE,4BACE,4BACE,0BACE,4BACE,yBAAI,YAAa,iBACnB,iBAEA,6BAEE,kCAEA,iDAEF,iBACF,iBAEF,iBACF,iBACF,iBACF,kB,MAfgB,gDAKW,uDAES,0D,2MDNpC,GAMa,EAAAA,8B,+DAAAA,EAA0B,E,KANtC,EAAA+D,U,MAAU,CAEPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,CAAC,kC,8OEfhB,WAQA,GALA,MAGA,OAEA,Q,uFCKc,6BACE,YAEA,0BAGF,kB,qDALE,qDAGE,0HAA4G,oC,mDAMlH,4BACE,6BACI,6BACI,gCAA+B,2IAC3B,6BACJ,iBACJ,iBACJ,iBACF,kB,yBA3BN,4BACE,4BACE,4BACE,YACF,iBACF,iBACA,4BACE,4BACE,4BACE,8BAQF,iBAEA,8BASF,iBACF,iBACF,kB,2CA3BM,qDAM4E,iDAU1D,iDDb9B,iBA+BI,WAAoB4N,EAAsCG,GAAtC,KAAAH,eAAsC,KAAAG,kBAtBhD,KAAAxE,MAAQ,IAAI,EAAAtZ,aAEb,KAAAuC,SAAmB,EACnB,KAAA/B,UAAoB,EAIpB,KAAA2Y,QAAgB,IAAIpE,KAEpB,KAAAyE,aAAuB,EAEtB,KAAAD,gBAAkB,IAAI,EAAAvZ,aAIhC,KAAA84C,aAAsB,GAEtB,KAAAC,UAAiB,G,OAOjB,YAAA94C,SAAA,WACI,IAAM64B,EAAMr4B,KAAK0Y,QAAQ4f,aAEzBt4B,KAAK+2B,QAAU/2B,KAAK0Y,QAAQ6f,iBAAmB,KAAOv4B,KAAK0Y,QAAQ8f,cAAgB,GAAK,KAAOH,EAAM,GAAK,IAAM,IAAMA,EAGtHr4B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAMpb,KAAK+2B,UAExC/2B,KAAKu4C,aAGT,YAAA5lC,YAAA,SAAY6oB,GACJA,EAAiB,SACjBx7B,KAAKu4C,aAIb,YAAAA,UAAA,sBACUC,EAAOx4C,KAAK0Y,QAAQqb,UAE1B/zB,KAAK8B,SAAU,EAEf9B,KAAKq4C,aAAe,GACpBr4C,KAAKuW,YAAY1Q,SAAQ,SAAA4b,GACrB,IAAMiY,EAAS,GACfA,EAAc,MAAIjY,EAAUpO,MAC5BqmB,EAAa,KAAIjY,EAAUzT,KAE3B,EAAKlM,QAAU,EAAKA,SAAY,EAAKyU,YAAYvU,OAAS,EAE1Dyf,EAAUowB,QAAQhsC,SAAQ,SAAA4yC,GACtB,IAAM9f,EAAYrkB,KAAK8G,MAAMq9B,EAAI9f,WAC3ByO,EAAU9yB,KAAK8G,MAAMq9B,EAAIrR,SAE/B,GAAIoR,GAAQ7f,GAAa6f,GAAQpR,EAAS,CACtC,IAAI,EAAU,GAEd3lB,EAAU3M,MAAMjP,SAAQ,SAAAxE,GACpB,IAAIiiB,EAAc,CACdtV,KAAM3M,EAAK2M,KACXqF,MAAOhS,EAAKgS,OAGc,MAA1BolC,EAAI9e,QAAQt4B,EAAK2M,QACjBsV,EAAOsB,KAAO6zB,EAAI9e,QAAQt4B,EAAK2M,MAAM4W,KACrCtB,EAAOqQ,UAAY8kB,EAAI9e,QAAQt4B,EAAK2M,MAAM2lB,WAG9C,EAAQ5wB,KAAKugB,MAGjBoW,EAAgB,QAAI,MAI5B,EAAK2e,aAAat1C,KAAK22B,MAG3B15B,KAAK6Y,MAAMmB,QAGR,YAAAoC,WAAP,WACI,OAAO,GAGJ,YAAAse,eAAP,WACI,OAAO16B,KAAKuW,aAGhB,YAAAmiC,iBAAA,SAAiB1qC,GACb,IAAMyT,EAAYzhB,KAAKuW,YAAYoL,MAAK,SAAAoH,GAAK,OAAAA,EAAE/a,OAASA,KAEpDhO,KAAK+Y,aACL/Y,KAAK8Y,gBAAgBkB,KAAKyH,IAgB3B,YAAAnM,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCAtHtD7R,GAAoB,+E,iCAApBA,EAAoB,+D,GAAA,K,2iCCdjC,+BACE,+BACE,0BACE,8BA+BF,iBACF,iBACF,kB,MAjC8E,wD,yIDM9E,GAKa,EAAAA,wB,+DAAAA,EAAoB,E,KALhC,EAAA8D,U,MAAU,CAEPC,SAAU,yBACVC,YAAa,qC,uEAIJkH,YAAa,CAAF,C,KAAnB,EAAAhH,QAESsJ,MAAK,E,KAAd,EAAA5R,SAEQnF,QAAS,CAAF,C,KAAf,EAAAyN,QACQxP,SAAU,CAAF,C,KAAhB,EAAAwP,QAEsBopC,SAAQ,E,KAA9B,EAAAl8B,U,MAAU,cAEF/D,QAAS,CAAF,C,KAAf,EAAAnJ,QAEQwJ,YAAa,CAAF,C,KAAnB,EAAAxJ,QAESuJ,gBAAe,E,KAAxB,EAAA7R,Y,+GE9BL,WAKA,GAHA,MACA,MAEA,OACA,SAKA,GAFA,OACA,OACA,QACA,SAEA,S,GACA,M,iKCZI,8B,yBAUI,6BAAqE,YAAW,kB,6BAAX,+C,yBAGjE,4BACI,yBAEI,YACJ,iBACJ,kB,6BAFQ,kE,yBAIZ,4BAEI,4BACI,yBACI,6BACA,kBAAE,8BACI,YACJ,iBACN,iBAEA,yBACI,6BACA,kBAAE,+BACI,aACJ,iBACN,iBACJ,iBACJ,kB,6BAXkB,8EAOA,2E,yBAmBN,yBAA6B,YAAW,kB,uBAAX,6C,yBAJzC,4BACI,6BACI,6BACA,yBACI,8BACJ,iBACJ,iBACJ,kB,6BAH8B,iD,0GAgBlB,8BAA6C,4FACzC,sBACA,6BACJ,iB,MAFO,+D,yHAKH,gCAGI,6BACJ,kB,6BAHG,oL,yBAYX,yBAA0C,2BAAgO,YAAiB,iBAAI,kB,4CAAlP,yLAA6N,6C,yBAR9Q,8BACE,gCACE,6BACA,yBACF,iBACA,4BACE,yBAAI,6BAA6F,iBACjG,uBACA,8BACF,iBACF,kB,6BAF4B,wD,qBAIZ,6B,qBACA,6B,mDAaI,6BACI,2BAAY,mIACtC,sB,uBAC0B,iBAC5B,iB,0CAH0E,6DACvB,kF,qBAKlD,sB,qBACA,sB,mDAQ+B,+BAAkE,4GAA6B,kIAA/F,iB,2CAA0C,4BAAuB,oB,mDACjE,0BAGI,oCAAY,gHAAiC,4HAAmN,iBAChQ,oCAAY,8GAA+B,4HAAiN,iBAChQ,iB,2CAFgB,mDAAiC,4BAAjC,CAAiC,2BAAjC,CAAiC,mBAAjC,CAAiC,sBAAjC,CAAiC,cAAjC,CAAiC,sBACjC,iDAA+B,4BAA/B,CAA+B,yBAA/B,CAA+B,mBAA/B,CAA+B,sBAA/B,CAA+B,cAA/B,CAA+B,uB,iGAE/C,+BAIE,6GAA8B,yIAA9B,CAA8B,+I,uBAJhC,iB,gEAEE,yEAAwD,cAAxD,CAAwD,mBAAxD,CAAwD,oBAAxD,CAAwD,2BAAxD,CAAwD,4BAAxD,CAAwD,uBAAxD,CAAwD,sBAAxD,CAAwD,8C,yBAdlE,0BAII,6BACI,iCACA,+BAMA,kCAgBJ,iBACJ,kB,uCAzB4B,sDACZ,qDACF,oDAME,qD,mDAzBpB,4BAEI,+BAKxB,2BAAG,6GAAkG,YAAoB,iBACzH,2BAAG,6GACF,6BACA,6BACoB,iBAEG,8BA8BJ,iB,+CAzCoF,sDAKH,oDAEhG,oFACA,qFAGyB,uD,yBAsCV,4BAAmE,YAA4B,kB,qDAA5B,+C,mHAJvE,4BACI,4BACE,sBACF,iBACA,8BACJ,kB,4CAHyC,+EAAqD,6KAEhE,0D,kGAxD1C,6BACI,+BACI,+BACI,yBACI,4BAAoE,6BAAkD,iBACtH,8BA4CJ,iBACJ,iBACA,4BACI,+B,uBAMJ,iBACJ,iBACJ,kB,6BAvD0E,yDA+CvC,gJDrI/C,kBAkCI,WAAmB8M,EAAkC6kC,EAAmCtN,EAA+Bl3B,EAC3G8I,EAAsCE,EAA8CjJ,GAD7E,KAAAJ,UAAkC,KAAA6kC,WAAmC,KAAAtN,QAA+B,KAAAl3B,cAC3G,KAAA8I,eAAsC,KAAAE,kBAA8C,KAAAjJ,cA5BhG,KAAA3B,QAAkB,KAClB,KAAAugB,KAA0B,KAC1B,KAAA4jB,EAAY,EACZ,KAAAvJ,QAAkB,GAClB,KAAA9pC,OAAgE,GAChE,KAAA+3B,SAAqB,GACrB,KAAAsQ,KAAY,CACRC,MAAO,EACP/6B,WAAY,EACZD,SAAU,IACVwmB,QAAS,IAGb,KAAAp0B,KAAO,CAAE+P,UAAW,OAAQ8lC,MAAO,OACnC,KAAAC,aAAuB,EACvB,KAAAC,cAAwB,EACxB,KAAAC,YAAsB,EAOf,KAAAC,kBAAoB,GAMvBj5C,KAAKi5C,kBAAoB77B,EAAgBmC,OAAO,qB,OAGpD,YAAA/f,SAAA,sBACUgC,EAAMxB,KAAKsrC,MAAMa,SAASC,SAASn7B,IAAI,OAC7CjR,KAAK84C,YAAgE,QAAjD94C,KAAKsrC,MAAMa,SAASC,SAASn7B,IAAI,aAErDjR,KAAK+T,QAAQye,qBAAqBhxB,GAAKqT,MAAK,SAAAinB,GACxC,EAAK/I,KAAO+I,EACZ,EAAK/I,KAAKzZ,WAAWzT,SAAQ,SAAAkN,GACzBA,EAAUmmC,aAAc,KAE5B,IAAMlkC,EAAU,EAAK+d,KAAK/d,QACpBC,EAAsC,MAA3B,EAAK8d,KAAK7d,cAAwB,EAAK6d,KAAK7d,cAAgB,EAAK6d,KAAK9d,SAEvF,EAAK+jC,WAAa,EAAK7kC,YAAYkjB,kBAAkBriB,EAASC,GAE9D,EAAKkkC,aAAa,GAEa,MAA3Brd,EAAQsd,iBACR,EAAKC,qBAAqBvd,EAAQsd,oBAI1C,IAAIE,EAAU,SAAW75C,OAAOutC,SAASuM,UAAY95C,OAAOutC,SAASwM,KAAO,IAAM/5C,OAAOutC,SAASwM,KAAO,IAAMxpC,IAE/GhQ,KAAKy5C,SAAW,EAAAC,UAAUJ,EAAU,uBAAyB93C,GAC7DxB,KAAKy5C,SAAS3/B,WAAU,SAAAtH,GACG,MAAnBA,EAAQiY,QACR,EAAK4uB,qBAAqB7mC,EAAQiY,SAElC,EAAK4uB,qBAAqB7mC,OAKtC,YAAAI,YAAA,WACI5S,KAAKy5C,SAASppC,YAGlB,YAAAoC,gBAAA,aAKA,YAAA0mC,aAAA,SAAatoC,GAAb,WACI7Q,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQ9O,KAAKjF,KAAK+yB,KAAKvxB,IAAKqP,EAAY7Q,KAAK2rC,KAAK/6B,SAAU5Q,KAAKsD,OAAQtD,KAAKgD,MAAM6R,MAAK,SAAA82B,GAC1F,EAAKA,KAAOA,KACbv2B,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAskC,OAAA,SAAO5mC,GACC/S,KAAKgD,KAAK+P,YAAcA,EAAUyjB,KAClCx2B,KAAKgD,KAAK61C,MAA6B,QAApB74C,KAAKgD,KAAK61C,MAAkB,OAAS,MAExD74C,KAAKgD,KAAO,CAAE+P,UAAWA,EAAUyjB,KAAMqiB,MAAO,OAGpD74C,KAAKm5C,aAAa,IAGtB,YAAAS,aAAA,WACI55C,KAAK+yB,KAAKzZ,WAAWzT,SAAQ,SAAA0V,GACzBA,EAAKqU,OAAS,QAGlB5vB,KAAKsD,OAAS,GACdtD,KAAKq7B,SAAW,GAEhBr7B,KAAKm5C,aAAa,IAGtB,YAAAU,aAAA,SAAa9mC,GACTA,EAAUmmC,aAAenmC,EAAUmmC,aAGvC,YAAAY,UAAA,SAAU/mC,GAAV,WACI,OAAO,EAAAmkB,WAAW1hB,QAAO,SAAC2hB,GACtB,EAAK3kB,QAAU,KAGf,EAAKuB,QAAQ8f,OAAO,EAAKd,KAAKvxB,IAAKuR,EAAU6c,OAAQ7c,EAAUyjB,KAAMzjB,EAAUgnC,KAAM,EAAKz2C,QAAQuR,MAAK,SAAAqJ,GACnGA,EAAQ87B,QAAQ,CAAE3mC,MAAO,IAAM,EAAK+J,gBAAgBmC,OAAO,uBAAyB,IAAKnd,MAAO,OAEhG+0B,EAASllB,KAAKiM,MACf9I,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAAgkC,qBAAA,SAAqBvjC,GACjB9V,KAAK+4C,aAAgBjjC,EAASs3B,QAAUt3B,EAASmkC,MAEjDj6C,KAAK44C,SAAS9iC,SAASA,GAElB9V,KAAK+4C,cAEN/4C,KAAKm5C,aAAa,IAI1B,YAAA7hB,iBAAA,SAAiBvkB,GAOb,GANAA,EAAUmmC,aAAc,EAGxBl5C,KAAKsD,OAAStD,KAAKsD,OAAOA,QAAO,SAAA42C,GAAK,OAAAA,EAAEnnC,YAAcA,EAAUgnC,QAChE/5C,KAAKq7B,SAAWr7B,KAAKq7B,SAAS/3B,QAAO,SAAA62C,GAAK,OAAAA,IAAMpnC,EAAUgnC,QAEnC,MAAnBhnC,EAAU3Q,QAA4C,KAA1B2Q,EAAU3Q,MAAM0N,OAAwC,KAAxBiD,EAAU3Q,MAAMg4C,KAAa,CACzF,IAAI/mC,EAAQ,IAAMN,EAAUM,MAAQ,QAEP,MAAzBN,EAAU3Q,MAAM0N,QAChBuD,GAASN,EAAU3Q,MAAM0N,OAGA,MAAzBiD,EAAU3Q,MAAM0N,OAAwC,MAAvBiD,EAAU3Q,MAAMg4C,MACjD/mC,GAAS,OAGc,MAAvBN,EAAU3Q,MAAMg4C,MAChB/mC,GAASN,EAAU3Q,MAAMg4C,KAG7B/mC,GAAS,IAETrT,KAAKsD,OAAOP,KAAK,CAAEgQ,UAAWA,EAAUgnC,KAAM33C,MAAO2Q,EAAU3Q,MAAOiR,MAAOA,IAC7ErT,KAAKq7B,SAASt4B,KAAKgQ,EAAUgnC,MAGjC/5C,KAAKm5C,aAAa,IAGtB,YAAAkB,kBAAA,SAAkBtnC,GAOd,GANAA,EAAUmmC,aAAc,EAGxBl5C,KAAKsD,OAAStD,KAAKsD,OAAOA,QAAO,SAAA42C,GAAK,OAAAA,EAAEnnC,YAAcA,EAAUgnC,QAChE/5C,KAAKq7B,SAAWr7B,KAAKq7B,SAAS/3B,QAAO,SAAA62C,GAAK,OAAAA,IAAMpnC,EAAUgnC,QAEnC,MAAnBhnC,EAAU3Q,OAAqC,KAApB2Q,EAAU3Q,MAAc,CACnD,IAAMiR,EAAQ,IAAMN,EAAUM,MAAhB,QAAuCN,EAAU3Q,MAAQ,IAEvEpC,KAAKsD,OAAOP,KAAK,CAAEgQ,UAAWA,EAAUgnC,KAAM33C,MAAO2Q,EAAU3Q,MAAOiR,MAAOA,IAC7ErT,KAAKq7B,SAASt4B,KAAKgQ,EAAUgnC,MAGjC/5C,KAAKm5C,aAAa,IAGtB,YAAAmB,iBAAA,SAAiBxsC,EAAmBiF,GAchC,GAbAA,EAAU3Q,MAAQ0L,EAAE8b,KACpB7W,EAAUmmC,aAAc,EAGxBl5C,KAAKsD,OAAStD,KAAKsD,OAAOA,QAAO,SAAA42C,GAAK,OAAAA,EAAEnnC,YAAcA,EAAUgnC,QAChE/5C,KAAKq7B,SAAWr7B,KAAKq7B,SAAS/3B,QAAO,SAAA62C,GAAK,OAAAA,IAAMpnC,EAAUgnC,QAE1D/5C,KAAK+yB,KAAKzZ,WAAWzT,SAAQ,SAAA0V,GACrBA,EAAKw+B,OAAShnC,EAAUgnC,OACxBx+B,EAAKqU,OAAS,OAIO,MAAzB7c,EAAU3Q,MAAMA,OAA2C,KAA1B2Q,EAAU3Q,MAAMA,MAAc,CAC/D,IAAMiR,EAAQ,IAAMN,EAAUM,MAAhB,QAAuCN,EAAU3Q,MAAMiR,MAAQ,IAE7ErT,KAAKsD,OAAOP,KAAK,CAAEgQ,UAAWA,EAAUgnC,KAAM33C,MAAO0L,EAAE8b,KAAKxnB,MAAOiR,MAAOA,IAC1ErT,KAAKq7B,SAASt4B,KAAKgQ,EAAUgnC,MAC7BhnC,EAAU6c,OAAS9hB,EAAE8b,KAAKvW,WAE1BN,EAAU6c,OAAS,GAGvB5vB,KAAKm5C,aAAa,IAGtB,YAAAoB,aAAA,SAAaxnC,GACT,MAA0B,SAAnBA,EAAU1R,OAAoD,IAAhC0R,EAAUynC,WAAWx4C,SAA2D,IAA3ChC,KAAKq7B,SAASjoB,QAAQL,EAAUgnC,OAAgB/5C,KAAKq7B,SAAS/3B,QAAO,SAAAlB,GAAS,OAAA2Q,EAAUynC,WAAWnM,SAASjsC,MAAQJ,OAAS,IAG3M,YAAA+oC,OAAA,SAAO9lC,GAAP,WACQw1C,EAAYz6C,KAAKkd,aAAasM,KAAK,EAAAze,yBAA0B,CAAEwf,UAAU,EAAMC,qBAAqB,IACxGiwB,EAAUhwB,QAAQsP,oBAAoB90B,EAAK+I,KAAMhO,KAAK+yB,KAAK9d,SAAUjV,KAAK+yB,KAAKra,QAAS1Y,KAAK+yB,KAAKkG,oBAClGwhB,EAAUhwB,QAAQmO,gBAAgB54B,KAAK+yB,KAAKvxB,KAC5Ci5C,EAAUhwB,QAAQoO,sBAAqB,WAEnC,EAAKsgB,aAAa,EAAKxN,KAAK96B,gBAIpC,YAAA6pC,UAAA,sBACI16C,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQqf,kBAAkBpzB,KAAK+yB,KAAKvxB,KAAK8O,YACzCuE,MAAK,SAAC8lC,GACH,EAAK5B,cAAe,KACrB3jC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAYvB,YAAAulC,eAAA,sBACQH,EAAYz6C,KAAKkd,aAAasM,KAAK,EAAAze,yBAA0B,CAAEwf,UAAU,EAAMC,qBAAqB,IAExGiwB,EAAUhwB,QAAQuO,eAAeh5B,KAAK+yB,KAAK9d,SAAUjV,KAAK+yB,KAAKra,QAAS1Y,KAAK+yB,KAAKkG,oBAClFwhB,EAAUhwB,QAAQmO,gBAAgB54B,KAAK+yB,KAAKvxB,KAC5Ci5C,EAAUhwB,QAAQoO,sBAAqB,WAEnC,EAAKsgB,aAAa,EAAKxN,KAAK96B,gBAIpC,YAAAgqC,SAAA,sBACI76C,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAxd,2BAA4B,CACjEse,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQ2gB,SAAStxB,WAAU,SAAA2uB,GACxB,cAAXA,EACAhpC,OAAOutC,SAASC,KAAOj9B,IAAM,qCAAuC,EAAK+iB,KAAKvxB,IAAM,WAAas5C,mBAAmB7qC,KAAKC,UAAU,EAAK5M,SACtH,UAAXmlC,IACPhpC,OAAOutC,SAASC,KAAOj9B,IAAM,uCAAyC,EAAK+iB,KAAKvxB,IAAM,WAAas5C,mBAAmB7qC,KAAKC,UAAU,EAAK5M,cAKtJ,YAAAo0B,uBAAA,SAAuB3kB,EAAgBikB,GACnCjkB,EAAUikB,QAAUA,GAGxB,YAAAnf,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAijC,QAAA,SAAQ5nC,GACoBA,EAAM+D,OAAQi3B,cAAc5rB,QAAQ,SAAS4rB,cAE7DluB,YAAc9M,EAAM4O,OAC5B5O,EAAM0W,kBAGV,YAAAvU,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA/R3C1J,GAAmB,6Q,iCAAnBA,EAAmB,i+ICzBhC,4BACI,4BACA,6BACA,uCASA,4BACI,8BAEA,4BACI,8BAMJ,iBACA,+BA4BA,8BAQA,6BACI,6BACI,6BAEI,+BAAwB,wCAAS,EAAAiuC,kBAC7B,+BACI,uBACA,uBACJ,iBACA,8BACJ,iBAEA,iCAMI,mCAKZ,iCAWY,iCAAsB,wCAAS,EAAAiB,cAC3B,qCACA,qCACJ,iBACR,iBACJ,iBACJ,iBACA,6BACI,iCA6DJ,iBAKA,6BACI,6BACI,8CAAmD,8CAAc,EAAA1B,aAAA,MAAsB,iBACvF,+BACE,8BACA,aAEM,8BAAoD,aAC5D,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAjLmB,mDAUL,oDAGI,2CAOJ,2CA4BA,sDAoBa,mDAMM,qEAKG,oEAYG,wDACA,sDAMrB,2CAuEA,6HAE0D,4D,4jBD1J5E,GAKa,EAAAxtC,wB,+DAAAA,GAAmB,E,KAL/B,EAAAwD,U,MAAU,CACPC,SAAU,cACVC,YAAa,+BACbC,UAAW,CAAC,oC,oUEvBhB,WAGA,GAFA,MACA,MACA,QAIA,SAGA,S,GACA,OACA,OACA,M,iHCZI,6BAAqE,YAAW,kB,6BAAX,+C,mDAEpE,6BACG,6BACI,mCACI,6BACI,gCAAiD,4F,uBAE7C,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,+BAP6H,kDAA2B,4D,mDA0B5H,gCAAmD,yIAC/C,6BACJ,kB,mDACA,gCAAgD,0IAC5C,6BACJ,kB,mDACA,gCAAmD,gJAC/C,6BACJ,kB,mDAdZ,yBACI,4BACI,6BACI,gCAAsB,6GAClB,6BACJ,iBACA,kCAGA,kCAGA,kCAGJ,iBACJ,iBACA,4BACE,8BACI,aACJ,iBACF,iBACA,6BACE,+BACI,aACJ,iBACF,iBAEJ,iB,+CAtBqB,yDAGA,gDAGA,yDAOX,qEAKA,0E,yBAlCtB,6BACI,+BACI,4BACI,yBACI,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAAkD,iBAClG,iBACJ,iBACA,6BACI,gCA6BJ,iBACJ,iBACJ,kB,6BA/BoC,yD,yBAuDA,8BAAqD,YAA0B,kB,uCAA1B,kE,yBATrE,yBACI,4BACI,6BACI,sBACA,2BACI,8BAA+B,YAAmB,iBAClD,8BAA+B,YAAe,iBAC9C,8BAA+B,aAAa,iBAC5C,+BAA+B,aAAe,iBAC9C,iCACJ,iBACJ,iBACJ,iBACJ,kB,uBAR+C,0DACA,sDACA,oDACA,sDACxB,iD,mDAO/B,6BACI,6CAAqB,sGAAoC,iBAC7D,kB,yED1EpB,aA2BI,WAAmByE,EAAkCqxB,EAAwBloB,EAAqC/I,EAAkCiJ,EACxIhJ,GADO,KAAAL,UAAkC,KAAAqxB,SAAwB,KAAAloB,eAAqC,KAAA/I,cAAkC,KAAAiJ,kBACxI,KAAAhJ,cAtBZ,KAAA5B,QAAkB,KAClB,KAAAugB,KAAmB,KACnB,KAAA4Y,KAAY,CACR/6B,SAAU,GACVC,WAAY,EACZ+6B,MAAO,EACPxU,QAAS,IAkBTp3B,KAAKi4B,QAAU9jB,EAAY8jB,U,OAG/B,YAAAz4B,SAAA,sBACIQ,KAAK+T,QAAQse,qBAAqBryB,KAAKwB,IAAK,aAAaqT,MAAK,SAAAke,GAC1D,EAAKA,KAAOA,EAEZ,EAAKomB,aAAa,MAGtB,IAAIG,EAAU,SAAW75C,OAAOutC,SAASuM,UAAY95C,OAAOutC,SAASwM,KAAO,IAAM/5C,OAAOutC,SAASwM,KAAO,IAAMxpC,IAE/GhQ,KAAKy5C,SAAW,EAAAC,UAAUJ,EAAU,qBACpCt5C,KAAKy5C,SAAS3/B,WAAU,SAAAtH,GACC,uBAAjBA,EAAQnR,MACR,EAAK83C,aAAa,EAAKxN,KAAK96B,gBAKxC,YAAA+B,YAAA,WACI5S,KAAKy5C,SAASppC,YAOlB,YAAA2qC,0BAAA,SAA0Blf,GAA1B,WACI97B,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,+BAAiC,KAAOuc,EAAQpjB,QAAU,IACxH1Y,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,uBAEjEvf,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAK8O,QAAQof,wBAAwB2I,EAAQt6B,KAAKqT,MAAK,SAAA4C,GACnD,EAAKwjC,gBAEN7lC,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAA4lC,WAAA,sBAEIj7C,KAAK+T,QAAQse,qBAAqBryB,KAAKwB,IAAK,aAAaqT,MAAK,SAAAke,GAC1D,EAAKA,KAAOA,KACb3d,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAqlC,UAAA,sBACI16C,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQkf,0BAA0BjzB,KAAK+yB,KAAKvxB,KAAKqT,MAAK,SAAC5P,GAExD,EAAKk0C,aAAa,EAAKxN,KAAK96B,eAE7BuE,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA8jC,aAAA,SAAatoC,GAAb,WACqB,MAAb7Q,KAAK+yB,OAEL/yB,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQogB,yBAAyBn0B,KAAK+yB,KAAKvxB,IAAKxB,KAAK2rC,KAAK/6B,SAAUC,EAAY,cAAc,GAAMgE,MAAK,SAAA4C,GAE1G,EAAKk0B,KAAOl0B,KAEbrC,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAKi7C,eAIb,YAAAC,eAAA,WACIl7C,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAA1d,sBAAuB,CAC5Dwe,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQlW,UAAW,EACnCvU,KAAKkU,WAAWuW,QAAQ9V,OAAS3U,KAAK+yB,KACtC/yB,KAAKkU,WAAWuW,QAAQhW,OAAQ,GAIpC,YAAAq2B,OAAA,SAAOhP,GACH97B,KAAKolC,OAAOQ,SAAS,CAAC,yBAA0B9J,EAAQt6B,KAAK,KAGjE,YAAA25C,mBAAA,SAAmBrf,GAAnB,WAEI97B,KAAK+T,QAAQkgB,iBAAiB6H,EAAQt6B,KAAKqT,MAAK,WAE5C,EAAKskC,aAAa,EAAKxN,KAAK96B,eAE7BuE,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA+lC,oBAAA,SAAoBtf,GAChBr8B,OAAOutC,SAASC,KAAOj9B,IAAM,uCAAyC8rB,EAAQt6B,KAGlF,YAAAqW,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAlJ3CxJ,GAAmC,8N,iCAAnCA,EAAmC,+4DCtBhD,0BACI,8BAEC,8BAaD,4BACI,+BA0CJ,iBAGA,4BACI,4BACI,2BACI,4BACI,8BACI,6BACI,4BACI,6BAAoC,8BAA2C,iBACnF,iBACJ,iBACA,6BACI,gC,wBAcJ,iBACJ,iBACA,gCAGJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MA/FU,oDAEC,yDAcG,2CAwDkC,iJAgBtB,8D,6MDxE1B,GAKa,EAAAA,uC,+DAAAA,EAAmC,E,KAL/C,EAAAsD,U,MAAU,CACPC,SAAU,gCACVC,YAAa,iDACbC,UAAW,Q,8JAYF9N,IAAK,CAAF,C,KAAX,EAAA+N,W,sHEhCL,WAMA,GALA,MACA,MAIA,QACA,S,GAEA,OACA,OACA,M,yGCVI,4BAAqE,YAAW,kB,6BAAX,+C,mDAErE,4BAEI,4BACI,+BACI,4BACI,+BAA+D,6BAAoD,iBAEnH,oCAAY,iGAAmB,2FACwC,iBAEvE,gCAAiD,4FAC7C,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,mDAT4B,+CAAmB,yBAAnB,CAAmB,sBAAnB,CAAmB,sBAAnB,CAAmB,cAAnB,CAAmB,qBAG8E,sE,mDA0BjG,gCAAyC,+HACrC,6BACJ,kB,mDARZ,yBACI,4BACI,6BACI,gCAAsB,6GAClB,6BACJ,iBACA,kCAGJ,iBACJ,iBACA,4BACE,8BACI,YACJ,iBACF,iBACA,4BACE,+BACI,aACJ,iBACF,iBACJ,iB,+CAfqB,iDAOX,qEAKA,yE,yBA7BtB,6BACI,+BACI,4BACI,yBACI,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAAoD,iBACpG,iBACJ,iBACA,6BAEI,gCAsBJ,iBACJ,iBACJ,kB,6BAxBoC,yDDpB5C,iBAoBI,WAAmBwE,EAAkCqxB,EAAwBloB,EAAsCE,EACvGhJ,GADO,KAAAL,UAAkC,KAAAqxB,SAAwB,KAAAloB,eAAsC,KAAAE,kBACvG,KAAAhJ,cAdZ,KAAA5B,QAAkB,KAClB,KAAAugB,KAAmB,KACnB,KAAAra,QAAkB,GAClB,KAAA2iC,gBAA0B,E,OAa1B,YAAA77C,SAAA,sBACIQ,KAAK+T,QAAQse,qBAAqBryB,KAAKwB,IAAK,eAAeqT,MAAK,SAAAke,GAC5D,EAAKA,KAAOA,MAIpB,YAAA2nB,UAAA,sBACI16C,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQif,wBAAwBhzB,KAAK+yB,KAAKvxB,IAAKxB,KAAK0Y,SAAS7D,MAAK,SAAAinB,GACnE,EAAK/I,KAAK8I,SAAS94B,KAAK+4B,MACzB1mB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA6lC,eAAA,WACIl7C,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAA1d,sBAAuB,CAC5Dwe,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQlW,UAAW,EACnCvU,KAAKkU,WAAWuW,QAAQ9V,OAAS3U,KAAK+yB,KACtC/yB,KAAKkU,WAAWuW,QAAQhW,OAAQ,GAGpC,YAAAq2B,OAAA,SAAOhP,GACH97B,KAAKolC,OAAOQ,SAAS,CAAC,yBAA0B9J,EAAQt6B,KAAK,KAGjE,YAAA0pC,SAAA,SAASpP,GAAT,WACI97B,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,+BAAiC,KAAOuc,EAAQpjB,QAAU,IACxH1Y,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,uBAEjEvf,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAK8O,QAAQof,wBAAwB2I,EAAQt6B,KAAKqT,MAAK,SAAA4C,GACnD,EAAKsb,KAAK8I,SAAW,EAAK9I,KAAK8I,SAASv4B,QAAO,SAAClB,EAAOilB,EAAO8jB,GAC1D,OAAO/oC,EAAMZ,MAAQs6B,EAAQt6B,UAElC4T,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAAwC,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA1E3CzJ,GAA0B,2L,iCAA1BA,EAA0B,q4CClBvC,0BACI,8BAEA,+BAkBA,4BACI,+BAoCJ,iBACJ,kB,MA1DU,oDAEA,+DAmBI,6C,8JDTd,GAKa,EAAAA,8B,+DAAAA,EAA0B,E,KALtC,EAAAuD,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,Q,yIASF9N,IAAK,CAAF,C,KAAX,EAAA+N,W,mHEzBL,WAMA,GALA,MACA,MAGA,OACA,Q,2GCIgB,4BACI,4BACI,yBAAI,YAAoC,iBAC5C,iBACJ,kB,6BAFY,wE,mDAGZ,4BACI,4BACI,yBACI,wBAAI,2BAAY,mGAAiC,6BAA4C,iBAAI,iBACrG,iBACJ,iBACJ,kB,uFAGI,0BAAoH,2FAAuB,UAAQ,6BAAwD,iB,gCAAjI,kE,wBAK1E,kD,6BAAiE,gC,wBACjE,wC,6BAAuD,gCDtB3E,iBAiBI,WAAoBwE,EAAkCmJ,EAAsCouB,GAAxE,KAAAv3B,UAAkC,KAAAmJ,eAAsC,KAAAouB,QAT5F,KAAA7gB,QAAkB,GAClB,KAAAsI,KAAmB,K,OAUnB,YAAAvzB,SAAA,sBACUgC,EAAMxB,KAAKsrC,MAAMa,SAASC,SAASn7B,IAAI,OAElC,MAAPzP,IACAxB,KAAKyqB,QAAU,OAGnBzqB,KAAK+T,QAAQsf,cAAc7xB,GAAKqT,MAAK,SAAAke,GACjC,EAAKA,KAAOA,EAERA,EAAK8X,OACL,EAAKpgB,QAAU,WAK3B,YAAAywB,eAAA,SAAe/nC,GACXA,EAAM0W,iBAEN7pB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAA1d,sBAAuB,CAC5Dwe,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQlW,UAAW,EACnCvU,KAAKkU,WAAWuW,QAAQ9V,OAAS3U,KAAK+yB,KACtC/yB,KAAKkU,WAAWuW,QAAQhW,OAAQ,GAGpC,YAAAgyB,cAAA,SAAchc,GACVzqB,KAAKyqB,QAAUA,G,iCA3CV1e,GAAuB,qH,iCAAvBA,EAAuB,qkBCdpC,4BACI,4BACA,6BAEA,4BAGI,4BACI,4BAEI,8BAKA,8BAQA,0BACI,4BACA,2BAA0F,wCAAS,EAAA06B,cAAc,UAAQ,6BAAsD,iBACnL,iBAEA,6BACI,yDACA,+CACJ,iBAEJ,iBACJ,iBACJ,iBACJ,kB,MA1BsB,2CAKA,2CASE,wDAC4C,gFAIhB,8DACV,gE,qPDtB1C,GAMa,EAAA16B,2B,+DAAAA,EAAuB,E,KANnC,EAAAoD,U,MAAU,CAEPC,SAAU,mBACVC,YAAa,oCACbC,UAAW,CAAC,yC,uNEZhB,WAKA,GAJA,MACA,MAGA,OAKA,GAHA,OAGA,QAGA,GAFA,MACA,OACA,Q,4HCRQ,6BAAqE,YAAW,kB,6BAAX,+C,qBAgDzB,6B,qBACA,6B,mDAGR,gCAAiE,uJAC7D,6BACJ,kB,mDACA,gCAA6D,wJACvE,6BACF,kB,yBAdI,4BAEI,6BACI,2BACI,gCACI,oCACA,oCACJ,iBACJ,iBACA,kCAGA,kCAGJ,iBACJ,kB,uCAbW,uEAEgB,+FACA,6FAGV,mEAGA,gE,yBAlCrB,yBACI,4BACI,6BACI,sBACA,2BACI,8BACI,YACJ,iBACA,8BACI,8BACI,YACJ,iBACJ,iBACA,+BACI,aACJ,iBACJ,iBAEA,oCAEJ,iBACJ,iBACA,+BAiBJ,kB,2CAjCoB,wDAII,wEAIJ,kEAIQ,kDAInB,+D,mDAqBjB,6BACI,6CAAqC,gHAA8C,iBACvF,kB,sBAUG,4BACE,6BACF,kB,sBACA,4BACG,6BACF,kB,sBACA,4BACE,6BACF,kB,sBACA,4BACE,6BACF,kB,mDACD,4BACE,gCAAsB,wGACpB,6BACF,iBACF,kB,qBACA,uB,qBA6BF,uB,yBAvBF,yBACE,4BACE,6BACG,sBACA,2BAAyC,YAAgB,iBAC5D,iBACF,iBACA,4BACE,2BAAwC,YAAwB,iBAClE,iBACA,4BACG,4BAAwC,aAAuB,iBACjE,iBACA,6BACI,+BACE,aACF,iBACJ,iBACA,6BACE,+BACI,aACJ,iBACF,iBACD,+BAMD,kB,2CAzB+C,+CAIJ,yDAGC,sDAIpC,wEAKA,4EAGF,+D,mDAUT,6BACG,6CAAuC,kHAAgD,iBAC1F,kB,gLD5HrB,aAuCI,WAAmByE,EAAkCmJ,EAAsCkoB,EAAwBhxB,EACvGgJ,EAAsCjJ,EAAiCmnC,GADhE,KAAAvnC,UAAkC,KAAAmJ,eAAsC,KAAAkoB,SAAwB,KAAAhxB,cACvG,KAAAgJ,kBAAuE,KAAAk+B,YAjCnF,KAAA9oC,QAAkB,KAElB,KAAA+oC,eAAiC,CAC7B3P,MAAO,EACP/6B,WAAY,EACZD,SAAU,GACVwmB,QAAS,IAGb,KAAAokB,iBAAmC,CAC/B5P,MAAO,EACP/6B,WAAY,EACZD,SAAU,GACVwmB,QAAS,IAYb,KAAAqkB,kBAA4B,EAC5B,KAAAC,oBAA8B,EAI9B,KAAAC,eAAyB,EAIrB37C,KAAKi4B,QAAU9jB,EAAY8jB,UAC3Bj4B,KAAKk4B,aAAel4B,KAAKi4B,SAAW9jB,EAAY+jB,eAChDl4B,KAAKm4B,cAAgBn4B,KAAKi4B,SAAWj4B,KAAKk4B,cAAgB/jB,EAAYikB,gB,OAG1E,YAAA54B,SAAA,sBACIQ,KAAK47C,uBAAuB,GAE5B57C,KAAK67C,YAAc,EAAAC,SAAS,KAAMhiC,WAAU,WACxC,EAAK2hC,oBACL,EAAKC,sBAED,EAAKC,eACD,EAAKF,mBAAqB,IAC1B,EAAKG,uBAAuB,EAAKL,eAAe1qC,YAEhD,EAAK4qC,kBAAoB,GAEzB,EAAKC,qBAAuB,IAC5B,EAAKK,yBAAyB,EAAKP,iBAAiB3qC,YAEpD,EAAK6qC,oBAAsB,IAG3B,EAAKD,mBAAqB,IAC1B,EAAKG,uBAAuB,EAAKL,eAAe1qC,YAEhD,EAAK4qC,kBAAoB,OAMzC,YAAA7oC,YAAA,WACI5S,KAAK67C,YAAYjkC,eAGrB,YAAAokC,gBAAA,SAAgBC,GACZ,MAAmB,aAAfA,EAAIvrC,OACG1Q,KAAKod,gBAAgBmC,OAAO,0BACb,YAAf08B,EAAIvrC,QAAuC,QAAfurC,EAAIvrC,OAChC1Q,KAAKod,gBAAgBmC,OAAO,yBACb,WAAf08B,EAAIvrC,OACJ1Q,KAAKod,gBAAgBmC,OAAO,wBACb,YAAf08B,EAAIvrC,OACJ1Q,KAAKod,gBAAgBmC,OAAO,yBACb,aAAf08B,EAAIvrC,OACJ1Q,KAAKod,gBAAgBmC,OAAO,0BACb,YAAf08B,EAAIvrC,OACJ1Q,KAAKod,gBAAgBmC,OAAO,yBAE5Bvf,KAAKod,gBAAgBmC,OAAO,0BAI3C,YAAA28B,iBAAA,SAAiBvQ,GAAjB,WACIA,EAAKvU,QAAQvxB,SAAQ,SAAAo2C,GACjB,IAAIE,EAAa,CACbthB,MAAO,CACH,CAAExnB,MAAO,EAAK+J,gBAAgBmC,OAAO,6BAA8B7O,OAAQ,YAE3E,CACI2C,MAAO,EAAK+J,gBAAgBmC,OAAO,0BACnC7O,OAAsB,QAAdurC,EAAIG,MAAkB,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,QAG9F,CACI/oC,MAAO,EAAK+J,gBAAgBmC,OAAO,6BACnC7O,OAAsB,aAAdurC,EAAIG,OAAsC,uBAAdH,EAAIG,MAAiC,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,aAGzI,CACI/oC,MAAO,EAAK+J,gBAAgBmC,OAAO,iCACnC7O,OAAsB,WAAdurC,EAAIG,OAAoC,mBAAdH,EAAIG,OAA4C,kBAAdH,EAAIG,MAA4B,EAAKC,aAAaJ,GAAO,OAKzIA,EAAMA,GACFE,WAAaA,MAIzB,YAAAG,mBAAA,SAAmBC,EAAkBC,GACjC,IAAI3D,EAAQ,CAAC,MAAO,WAAY,qBAAsB,SAAU,iBAAkB,iBAE9E4D,EAAS5D,EAAMzlC,QAAQmpC,GAE3B,OADgB1D,EAAMzlC,QAAQopC,GACdC,EACL,WAEA,IAIf,YAAAJ,aAAA,SAAaJ,GACT,MAAmB,WAAfA,EAAIvrC,QAAsC,YAAfurC,EAAIvrC,OACxB,UACe,aAAfurC,EAAIvrC,OACJ,QAGJ,IAGX,YAAAgsC,sBAAA,WACI18C,KAAK+7C,yBAAyB,GAE9B/7C,KAAK27C,eAAgB,GAGzB,YAAA7Q,OAAA,SAAO98B,GACHhO,KAAKolC,OAAOQ,SAAS,CAAC,iCAAkC53B,KAG5D,YAAA4tC,uBAAA,SAAuB/qC,GAAvB,WACI7Q,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQyd,iBAAiBxxB,KAAKu7C,eAAe3qC,SAAUC,EAAY,cAAc,GAAOgE,MAAK,SAAA4C,GAC9F,EAAK8jC,eAAiB9jC,EACtB,EAAKykC,iBAAiB,EAAKX,mBAC5BnmC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA0mC,yBAAA,SAAyBlrC,GAAzB,WACI7Q,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQ4d,0BAA0B3xB,KAAKw7C,iBAAiB5qC,SAAUC,EAAY,cAAc,GAAOgE,MAAK,SAAA4C,GACzG,EAAK+jC,iBAAmB/jC,EACxB,EAAKykC,iBAAiB,EAAKV,qBAC5BpmC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAsnC,qBAAA,SAAqB9qB,EAAmBoqB,GAAxC,WACIj8C,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,uCAC9Dvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,kCAEjEvf,KAAKkU,WAAWuW,QAAQppB,KAAO,EAAA2qB,WAAWC,OAE1CjsB,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAKq2C,UAAUztB,aAAaouB,EAAItuB,eAAe9Y,MAAK,SAAA4C,GAChD,EAAKvD,WAAWwD,OAEhB,IAAK,IAAI/S,EAAI,EAAGA,EAAI,EAAK42C,eAAenkB,QAAQp1B,SAAU2C,EAAG,CAGzD,GAFgB,EAAK42C,eAAenkB,QAAQzyB,GAE9Bi4C,QAAUX,EAAIW,MAAO,CAC/B,EAAKrB,eAAenkB,QAAQt0B,OAAO6B,EAAG,GACtC,OAIR,EAAK+3C,2BACNtnC,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAAwnC,sBAAA,SAAsBhrB,EAAmBoqB,GAAzC,WACIj8C,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,6CAC9Dvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,wCAEjEvf,KAAKkU,WAAWuW,QAAQppB,KAAO,EAAA2qB,WAAWC,OAE1CjsB,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAK8O,QAAQie,oBAAoBH,GAAWhd,MAAK,SAAA4C,GAC7C,EAAKvD,WAAWwD,OAEhB,IAAK,IAAI/S,EAAI,EAAGA,EAAI,EAAK42C,eAAenkB,QAAQp1B,SAAU2C,EAAG,CAGzD,GAFgB,EAAK42C,eAAenkB,QAAQzyB,GAE9Bi4C,QAAUX,EAAIW,MAAO,CAC/B,EAAKrB,eAAenkB,QAAQt0B,OAAO6B,EAAG,GACtC,OAIR,EAAK+3C,2BACNtnC,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAAwC,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAlP3CpJ,GAAsB,+P,iCAAtBA,EAAsB,usFCpBnC,4BACI,4BACA,6BAEA,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBACA,4BACI,4BACI,4BACI,6BACI,+BACI,6BACI,6BACI,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BAEI,gC,wBAyCJ,iBACJ,iBACA,gCAGJ,iBAEA,6BACC,+BACE,6BACE,0BACE,6BACE,8BACF,iBACA,+BAGA,+BAGC,+BAGA,+BAGD,+BAKA,+BAEF,iBACF,iBACA,6BAEA,gC,wBA8BA,iBACF,iBAEA,gCAGD,iBACJ,iBAEJ,iBACJ,iBACJ,iBACJ,kB,MA7Ic,oDAqBsC,2LA2CtB,sEAYE,wEAGA,wEAGC,wEAGA,wEAGD,wEAKA,wEAMW,kMAiChB,0E,skBD1H3B,GAKa,EAAAA,0B,+DAAAA,EAAsB,E,KALlC,EAAAkD,U,MAAU,CACPC,SAAU,iBACVC,YAAa,kCACbC,UAAW,CAAC,6B,+RElBhB,WAKA,GAJA,MACA,MAGA,QAEA,SACA,SAKA,GAJA,OACA,OAGA,QAEA,GADA,MACA,Q,mHCVQ,4BAAqE,YAAW,kB,6BAAX,+C,mDA+C3D,6BACE,8BACE,6BACF,iBACA,gCAAsB,gIACpB,6BACF,iBACF,kB,mDAEA,6BACE,8BACE,6BACF,iBACA,gCAAsB,gIACpB,6BACF,iBACF,kB,qBAIM,6B,sBACA,2BACE,6BACF,kB,mDALN,6BACI,gCAAsB,gIACpB,oCACA,gCAGF,iBACJ,iB,iCALiB,8EACJ,2E,mDAMb,6BACE,gCAAsB,8HAClB,2BACE,6BACF,iBACF,iBACJ,kB,yBAzEN,4BAKI,4BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACE,6BACA,aACF,iBACA,+BACE,8BACA,+BACM,aACN,iBACF,iBACJ,iBAEJ,iBACJ,iBACA,8BACI,2BAEI,0BAAI,yBAAG,aACL,8BACA,aACA,8BACF,iBAAI,iBACJ,0BAAI,aAAwC,8BAA6D,iBAE7G,iBACJ,iBACA,8BACE,gCASA,gCASA,gCASA,gCAaF,iBACJ,kB,6BAtE4B,mDAIV,0DAKM,4EAUL,kEAEL,6DAGE,kFAKJ,wGASA,oGASA,sHASA,+D,sBAqBI,4BACI,yBAQC,4BACI,6BACJ,iBACA,4BACK,6BACL,iBACA,4BACG,6BACF,iBACD,uBAGD,iBACJ,kB,sBACA,4BACE,yBAQE,4BACE,6BACF,iBACA,4BACE,6BACF,iBACA,4BACE,6BACF,iBACA,uBAGF,iBACF,kB,mDAiBQ,4BACI,gCAAsB,6HAClB,6BACJ,iBACJ,kB,yBAlBJ,yBAKI,4BACE,wBAAG,YAA8C,iBACnD,iBACA,4BACE,wBAAG,YAAyB,iBAC9B,iBACA,4BACE,wBAAG,YAAc,iBACnB,iBACA,+BAKJ,kB,4CAbS,+EAGA,wDAGA,6CAEqB,+D,kGAflC,4BACI,+B,uBAoBJ,kB,8BApBwB,gJ,yBA+BnB,wBAA+C,YAAyB,kB,uCAAzB,yD,yBAC/C,wBAAwF,YAAa,kB,uCAAb,6C,mDAK3F,4BACC,gCAAsB,6HACjB,6BACL,iBACD,kB,yBAlBD,yBAIC,4BACE,wBAAG,YAAY,iBACjB,iBACA,4BACG,6BACA,6BACF,iBACA,4BACE,wBAAG,YAAwC,iBAC7C,iBACD,+BAKD,kB,4CAdM,2CAGE,oEACA,uGAGD,yEAEoB,+D,yBAf5B,4BACC,+B,uBAoBD,kB,8BApBqB,gJ,mDAuBrB,6BACI,6CAAqB,uGAAoC,iBAC7D,kB,yBArGZ,6BAEI,4BAEI,+BACI,iCAuBA,iCAwBA,iCAuBA,iCAsBJ,iBACA,6BACI,+BAGJ,iBACJ,iBACJ,kB,8BAnGoB,mEAuBA,uEAwBA,mEAuBA,uEAwBF,6D,yBApGtB,6BACI,+BAyGJ,kB,6BAzGuC,2CD5EnD,iBAmCI,WAAmByE,EAAkCmJ,EACzCkoB,EAAwBkG,EAA+Bl3B,EACvDgJ,EAAsCjJ,EAAiCmnC,GAFhE,KAAAvnC,UAAkC,KAAAmJ,eACzC,KAAAkoB,SAAwB,KAAAkG,QAA+B,KAAAl3B,cACvD,KAAAgJ,kBAAuE,KAAAk+B,YA9BnF,KAAA9oC,QAAkB,KAElB,KAAAsqC,aAAuB,EACvB,KAAAjrB,UAAoB,GAEpB,KAAA8Z,KAAY,CACRC,MAAO,EACP/6B,WAAY,EACZD,SAAU,GACVwmB,QAAS,IAGb,KAAA2lB,YAAsB,EAWtB,KAAAC,WAAqB,EACrB,KAAAC,yBAAmC,EAO/Bj9C,KAAKi4B,QAAU9jB,EAAY8jB,UAC3Bj4B,KAAKk4B,aAAel4B,KAAKi4B,SAAW9jB,EAAY+jB,eAChDl4B,KAAKm4B,cAAgBn4B,KAAKi4B,SAAWj4B,KAAKk4B,cAAgB/jB,EAAYikB,gB,OAG1E,YAAA54B,SAAA,sBACIQ,KAAK6xB,UAAY7xB,KAAKsrC,MAAMa,SAASr7B,OAAY,IAEjD9Q,KAAKm5C,aAAa,GAElB,IAAIG,EAAU,SAAW75C,OAAOutC,SAASuM,UAAY95C,OAAOutC,SAASwM,KAAO,IAAM/5C,OAAOutC,SAASwM,KAAO,IAAMxpC,IAE/GhQ,KAAKy5C,SAAW,EAAAC,UAAUJ,EAAU,qBACpCt5C,KAAKy5C,SAAS3/B,WAAU,SAAAtH,GACC,sBAAjBA,EAAQnR,MACR,EAAK83C,aAAa,EAAKxN,KAAK96B,gBAKxC,YAAA+B,YAAA,aAGA,YAAAsqC,mBAAA,SAAmBC,GACf,OAAOA,EAAKxb,QAAQ,KAAM,OAG9B,YAAAyb,wBAAA,SAAwBryB,GACpB,OAAO9a,KAAKC,UAAU6a,IAG1B,YAAAsyB,kBAAA,SAAkB9mB,GACd,IAAK,IAAI5xB,EAAI,EAAGA,EAAI3E,KAAK2rC,KAAKvU,QAAQp1B,SAAU2C,EAAG,CAC5B3E,KAAK2rC,KAAKvU,QAAQzyB,GAEpBpD,KAAOg1B,EAAQh1B,IAC5BvB,KAAK2rC,KAAKvU,QAAQt0B,OAAO6B,EAAG,KAKxC,YAAA24C,uBAAA,SAAuBC,GACnB,MAAiB,iDAAbA,EACOv9C,KAAKod,gBAAgBmC,OAAO,gDAGtB,yDAAbg+B,EACOv9C,KAAKod,gBAAgBmC,OAAO,qDAGtB,sDAAbg+B,EACOv9C,KAAKod,gBAAgBmC,OAAO,sDAGtB,sDAAbg+B,EACOv9C,KAAKod,gBAAgBmC,OAAO,sDAGtB,gDAAbg+B,EACOv9C,KAAKod,gBAAgBmC,OAAO,+CAItB,mEAAbg+B,GACa,kEAAbA,GACa,mEAAbA,GACa,iEAAbA,EAEOv9C,KAAKod,gBAAgBmC,OAAO,6CAQtB,oDAAbg+B,GACa,sDAAbA,GACa,0DAAbA,EAEOv9C,KAAKod,gBAAgBmC,OAAO,wDAGhCg+B,GAGX,YAAAxS,OAAA,SAAOxU,GAAP,WAGIv2B,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAArd,0BAA2B,CAChEme,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQ8L,QAAUA,EAClCv2B,KAAKkU,WAAWuW,QAAQwxB,IAAMj8C,KAAKi8C,IACnCj8C,KAAKkU,WAAWuW,QAAQ+yB,iBAAiB1jC,WAAU,SAAA7U,GAC3B,aAAhBA,EAAKoV,QACL,EAAKgjC,kBAAkBp4C,EAAKA,UAKxC,YAAAk0C,aAAA,SAAatoC,GAAb,WACI7Q,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQ6d,gBAAgB5xB,KAAK6xB,UAAW7xB,KAAK2rC,KAAK/6B,SAAUC,GAAY,GAAMgE,MAAK,SAAA4C,GAGpF,GAFA,EAAKwkC,IAAMxkC,EAEY,mBAAnB,EAAKwkC,IAAIG,MACT,EAAKzQ,KAAO,EAAKsQ,IAAIwB,kBAClB,GAAuB,uBAAnB,EAAKxB,IAAIG,MAAgC,CAChD,EAAKzQ,KAAO,EAAKsQ,IAAIyB,SAErB,IAAK,IAAI/4C,EAAI,EAAGA,EAAI,EAAKgnC,KAAKvU,QAAQp1B,SAAU2C,EAAG,CAG1B,yBAFP,EAAKgnC,KAAKvU,QAAQzyB,GAEpBtD,OACR,EAAK47C,yBAA0B,QAI5C7nC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAsoC,oBAAA,aAIA,YAAAjB,sBAAA,aAIA,YAAAkB,UAAA,sBACI59C,KAAK88C,aAAe98C,KAAK88C,YAEzB98C,KAAKi8C,IAAIwB,aAAarmB,QAAQvxB,SAAQ,SAAAg4C,GAClCA,EAAIxiB,SAAW,EAAKyhB,gBAI5B,YAAAgB,oBAAA,SAAoBjsB,GAApB,WACI7xB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAApd,uBAAwB,CAC7Dke,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGzBxqB,KAAKkU,WAAWuW,QAAQwxB,IAAMj8C,KAAKi8C,IAEnCj8C,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAKmgC,OAAOQ,SAAS,CAAC,iCAI9B,YAAAiX,sBAAA,SAAsBhrB,GAAtB,WACqC,IAA7B7xB,KAAK2rC,KAAKvU,QAAQp1B,OAClBhC,KAAK+T,QAAQie,oBAAoBH,GAAWhd,MAAK,SAAA4C,GAC7C,EAAK2tB,OAAOQ,SAAS,CAAC,gCACvBxwB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAGfrV,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGF,uBAAnBxqB,KAAKi8C,IAAIG,OACTp8C,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,iDAC9Dvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,8CAEjEvf,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,6CAC9Dvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,yCAGrEvf,KAAKkU,WAAWuW,QAAQppB,KAAO,EAAA2qB,WAAWC,OAE1CjsB,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAK8O,QAAQie,oBAAoBH,GAAWhd,MAAK,SAAA4C,GAC7C,EAAK2tB,OAAOQ,SAAS,CAAC,gCACvBxwB,OAAM,SAACC,GACN,EAAKC,MAAMD,WAM3B,YAAAsnC,qBAAA,SAAqB9qB,GAArB,WACI7xB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,uCAC9Dvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,kCAEjEvf,KAAKkU,WAAWuW,QAAQppB,KAAO,EAAA2qB,WAAWC,OAE1CjsB,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,SAAA7U,GACxC,EAAKq2C,UAAUztB,aAAa,EAAKouB,IAAItuB,eAAe9Y,MAAK,SAAA4C,GAErD,EAAK2tB,OAAOQ,SAAS,CAAC,gCACvBxwB,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAAwC,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA3P3CnJ,GAAY,qS,iCAAZA,EAAY,27FCxBzB,4BACI,4BACA,6BAEA,4BACI,8BAEI,4BACI,yBACI,4BACJ,iBACJ,iBACA,gCAkFA,8BA2GR,iBACJ,kB,MArMc,oDAOI,0CAkFA,sE,qgBD3ElB,GAKa,EAAAA,gB,+DAAAA,EAAY,E,KALxB,EAAAiD,U,MAAU,CACPC,SAAU,MACVC,YAAa,uBACbC,UAAW,CAAC,6B,oUEtBhB,WAEA,GADA,MACA,OAOA,GAFA,OAEA,Q,GACA,M,mHCTI,6BAAqE,YAAW,kB,6BAAX,+C,mDAY7D,0BACI,+CAAuB,yIAAyF,iBACpH,iB,gCADoF,iDAAmB,c,mDAGrG,yDAAmF,0IAA0F,iB,iCAAjC,kCAAmB,c,mDAC/J,uDAA+E,0IAA0F,iB,iCAAjC,kCAAmB,c,mDAC3J,uDAA+E,0IAA0F,iB,iCAAjC,kCAAmB,c,yBAH7J,0BACE,2DACA,yDACA,yDACF,kB,6BAHoC,8EACF,4EACA,6EDP9C,iBAmBI,WAAoByE,EAAkCC,EAA6BC,EAAsCC,GAArG,KAAAH,UAAkC,KAAAC,WAA6B,KAAAC,WAAsC,KAAAC,aAZzH,KAAA1B,QAAkB,KASlB,KAAA+B,UAAoB,EACpB,KAAAC,MAAgB,EAGZxU,KAAKw9C,iBAAmB,IAAI,EAAA9rC,Q,OAGhC,YAAAlS,SAAA,aAIA,YAAAu+C,0BAAA,SAA0BxnB,GACtBv2B,KAAKw9C,iBAAiBvrC,KAAK,CAAEoI,OAAQ,WAAYpV,KAAMsxB,KAG3D,YAAA5e,SAAA,WACI3X,KAAKkU,WAAWwD,QAGpB,YAAApC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA/B3ClJ,GAAyB,uJ,iCAAzBA,EAAyB,shBCjBtC,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BAEI,+BAEI,8BAGA,8BAMA,6BAEI,6BACI,6BACI,iCAAsB,wCAAS,EAAAwL,cAC3B,8BACJ,iBACJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,MAnCU,oDAYQ,qFAGA,2F,kRDJlB,GAKa,EAAAxL,6B,+DAAAA,EAAyB,E,KALrC,EAAAgD,U,MAAU,CACPC,SAAU,qBACVC,YAAa,sCACbC,UAAW,Q,iPEff,WAMA,GALA,MAGA,OAEA,QAIA,GAFA,OACA,OACA,Q,GACA,M,gFCVI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,6BAA2D,aAC/D,iBACA,+BACI,8BAA4D,kBAC5D,+BACM,aACN,iBACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAhB4B,mDAGmD,2DAKrD,6E,mDA+BV,6BACI,gCAA0C,kGACtC,6BACJ,iBACJ,kBDrDpB,iBAgBI,WAAoByE,EAAkCC,EAA6BI,EACvEH,EAAsCC,EAAgCgJ,GAD9D,KAAAnJ,UAAkC,KAAAC,WAA6B,KAAAI,cACvE,KAAAH,WAAsC,KAAAC,aAAgC,KAAAgJ,eAVlF,KAAA1K,QAAkB,KAGD,KAAA6qC,kBAAoB,IAAI,EAAA99C,aAEzC,KAAAgV,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAhV,SAAA,aAIA,YAAAw+C,gBAAA,sBACQvD,EAAYz6C,KAAKkd,aAAasM,KAAK,EAAAze,yBAA0B,CAC7Dwf,UAAU,EACVC,qBAAqB,IAGzBiwB,EAAUhwB,QAAQ+O,yBAAyBx5B,KAAKu2B,QAASv2B,KAAKi8C,IAAIpqB,UAAW7xB,KAAKi8C,IAAItuB,cAAcgL,WAAW,GAC/G8hB,EAAUhwB,QAAQmO,gBAAgB,MAClC6hB,EAAUhwB,QAAQoO,sBAAqB,WACnC,EAAKwkB,kBAAkBrjC,KAAK,EAAKuc,SACjC,EAAKriB,WAAWwD,WAIxB,YAAA4lC,uBAAA,SAAuBC,GACnB,MAAiB,iDAAbA,EACOv9C,KAAKiU,SAASsL,OAAO,gDAGf,yDAAbg+B,EACOv9C,KAAKiU,SAASsL,OAAO,qDAGf,sDAAbg+B,EACOv9C,KAAKiU,SAASsL,OAAO,sDAGf,sDAAbg+B,EACOv9C,KAAKiU,SAASsL,OAAO,sDAGf,gDAAbg+B,EACOv9C,KAAKiU,SAASsL,OAAO,+CAIf,mEAAbg+B,GACa,kEAAbA,GACa,mEAAbA,GACa,iEAAbA,EAEOv9C,KAAKiU,SAASsL,OAAO,6CAOf,oDAAbg+B,GACa,sDAAbA,GACa,0DAAbA,EAEOv9C,KAAKiU,SAASsL,OAAO,wDAGzBg+B,GAGX,YAAAhmC,SAAA,aAIA,YAAAI,SAAA,WACI3X,KAAKkU,WAAWwD,QAGpB,YAAAG,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA1F3C7I,GAA4B,gO,iCAA5BA,EAA4B,uoDClBzC,4BACI,8BAWA,+BA6BA,4BAKI,4BAEI,4BACI,4BACI,4BACI,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,aAAkD,iBAEjF,0BAAI,8BAAQ,8BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6B,iBAIhE,iBACJ,iBACA,8BACI,gCAKJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAvEU,oDAWA,qDAwC6C,wFAGA,gEAO7B,+F,4DDjD1B,GAKa,EAAAA,gC,+DAAAA,EAA4B,E,KALxC,EAAA2C,U,MAAU,CACPC,SAAU,wBACVC,YAAa,yCACbC,UAAW,Q,gKAKFinB,QAAS,CAAF,C,KAAf,EAAAhnB,QACQ0sC,IAAK,CAAF,C,KAAX,EAAA1sC,QACgB8tC,kBAAiB,E,KAAjC,EAAAp2C,Y,iIEvBL,WAGA,GAFA,MAEA,OASA,GAJA,OACA,OACA,OAEA,Q,GACA,M,iGCZI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,6BAA2D,aAC/D,iBACA,+BACI,8BAA4D,kBAC5D,+BACM,aACN,iBACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAhB4B,mDAGmD,2DAKrD,6E,yBAyCR,yBACJ,yBAAI,YAA4B,iBAClC,kB,uBADM,iE,yBAFD,6BACC,8BAGP,kB,6BAH2B,0DDzD1C,iBAuBI,WAAoB8M,EAAkCC,EAA6BI,EACvEH,EAAsCC,EAAgCgJ,GAD9D,KAAAnJ,UAAkC,KAAAC,WAA6B,KAAAI,cACvE,KAAAH,WAAsC,KAAAC,aAAgC,KAAAgJ,eAjBlF,KAAA1K,QAAkB,KAGD,KAAA6qC,kBAAoB,IAAI,EAAA99C,aASzC,KAAAgV,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAhV,SAAA,WAKIQ,KAAKu2B,QAAQjT,OAAS,KACtBtjB,KAAKi+C,YAAc,IAGvB,YAAAC,UAAA,SAAUC,GACN,OAAOluC,KAAKC,UAAUiuC,IAG1B,YAAAC,iCAAA,SAAiCD,GAC7B,OAAOA,EAAS98C,MAGpB,YAAAg5B,uBAAA,SAAuBplB,EAAkBkpC,GAAzC,WAEQl3B,EAAgBjnB,KAAKi8C,IAAItuB,cAAclM,UAE3C,OAAO,EAAAyV,WAAW1hB,QAAO,SAAC2hB,GACtB,EAAKpjB,QAAQoa,wBAAwB,EAAK8vB,YAAahpC,EAJ1C,KAIgE,KAAMgS,EAAe,EAAKg1B,IAAItjB,WAAW9jB,MAAK,SAAAuiB,GACvHD,EAASllB,KAAKmlB,UAK1B,YAAAO,kBAAA,SAAkB7pB,EAAmBqwC,GAArC,WACIn+C,KAAK+T,QAAQ+b,oBAAoBhiB,EAAE8b,KAAK2jB,IAAK4Q,EAASlpC,SAAU,IAAI,EAAOjV,KAAKi8C,IAAItjB,WAAW9jB,MAAK,SAAA6hC,GAChGyH,EAAS76B,OAASozB,EAAU/iB,UAC5B,EAAKsqB,YAAcvH,EAAU/iB,UAAUlyB,WAAW8T,aAAamT,kBAChEtT,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAgpC,SAAA,sBACQC,EAAM,CACNzkB,WAAY,SACZ0kB,oBAAqBv+C,KAAKu2B,QAAQh1B,IAGtCvB,KAAK+T,QAAQke,wBAAwBqsB,GAAKzpC,MAAK,SAAA4C,GAC3C,EAAK4lC,kBAAkBrjC,KAAK,EAAKuc,SAEjC,EAAKriB,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAmpC,gBAAA,sBACQF,EAAM,CACNC,oBAAqBv+C,KAAKu2B,QAAQh1B,GAClCs4B,WAAY,UACZ7rB,KAAMhO,KAAKu2B,QAAQjT,OAAO7hB,WAAWuM,KACrCiH,SAAUjV,KAAKu2B,QAAQjT,OAAO7hB,WAAWJ,KACzCgS,MAAOrT,KAAKu2B,QAAQljB,OAGxBrT,KAAK+T,QAAQke,wBAAwBqsB,GAAKzpC,MAAK,SAAA4C,GAC3C,EAAK4lC,kBAAkBrjC,KAAK,EAAKuc,SAEjC,EAAKriB,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAsC,SAAA,WACI3X,KAAKkU,WAAWwD,QAGpB,YAAAG,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCArG3ChJ,GAAqC,gO,iCAArCA,EAAqC,8wECpBlD,4BACI,8BAWA,+BA6BA,4BAKI,4BAEI,4BACI,4BACI,yBAAI,6BAAQ,4BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6C,iBAE5E,0BAAI,8BAAQ,6BAAsD,iBAAS,iBAC3E,2BACE,8BACF,iBAEA,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBACE,8BACF,iBACJ,iBACA,8BACC,8BACE,8BACC,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACD,iBACA,8BACE,gCAKF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAAoD,iBACzE,iBACF,iBACA,8BACE,+BAA4C,aAAiB,iBAC/D,iBACF,iBACA,8BACG,8BACE,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACF,iBACA,8BACE,gCAEC,oEAAyB,wCAGJ,EAAAsrB,kBAAA,gBALtB,iBAUF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACF,iBACA,8BACE,iCAA0D,wCAAS,EAAA6mB,qBACjE,8BACF,iBACA,iCAAsB,wCAAS,EAAAH,cAC7B,8BACF,iBACF,iBACF,iBACF,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MA9HU,oDAWA,qDAuCyC,kFAoBxB,gEAcsC,oDAY1C,qDAAyB,oBAAzB,CAAyB,mEAAzB,CAAyB,0BAAzB,CAAyB,uBAAzB,CAAyB,uBAiBJ,iE,8IDnG5C,GAKa,EAAAhyC,yC,+DAAAA,EAAqC,E,KALjD,EAAA8C,U,MAAU,CACPC,SAAU,kCACVC,YAAa,mDACbC,UAAW,Q,gKAKFinB,QAAS,CAAF,C,KAAf,EAAAhnB,QACQ0sC,IAAK,CAAF,C,KAAX,EAAA1sC,QACgB8tC,kBAAiB,E,KAAjC,EAAAp2C,Y,+HEzBL,WAGA,GADA,MACA,OAQA,GALA,OACA,OACA,OAEA,MACA,Q,kGCVI,4BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,4BACI,4BAEI,qBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,6BAA2D,aAC/D,iBACA,+BACI,8BAA4D,kBAC5D,+BACM,aACN,iBACJ,iBACJ,iBAEJ,iBACJ,iBACA,wBACJ,kB,6BAhB4B,mDAGmD,2DAKrD,6E,mDAiBlB,6BACI,6BACI,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,YAA6C,iBAE5E,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,4BACE,8BACF,iBAEA,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBAAG,8BAA+D,iBACtE,iBACA,8BACC,8BACG,8BACE,6BACE,+BAAmB,8BAAoE,iBACzF,iBACF,iBACA,8BACE,+BAA4C,aAA0B,iBACxE,iBACF,iBACD,8BACE,8BACE,6BACE,+BAAmB,8BAA2D,iBAChF,iBACF,iBACA,8BACE,+BAA4C,aAAiB,iBAC/D,iBACF,iBACA,8BACG,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,gCAEC,uGAAyB,qGAF1B,iBAUF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,iCAAkD,kGAChD,8BACF,iBACA,iCAAsB,2FACpB,8BACF,iBACF,iBACF,iBACF,iBACJ,iB,gCAlEuC,kFAkBe,8DAUD,oDAY1C,qDAAyB,oBAAzB,CAAyB,gDAAzB,CAAyB,0BAAzB,CAAyB,uBAAzB,CAAyB,uBAiBJ,wDD/F5C,iBAmBI,WAAoB8M,EAAkCC,EAA6BI,EACvEH,EAAsCC,EAAgCgJ,GAD9D,KAAAnJ,UAAkC,KAAAC,WAA6B,KAAAI,cACvE,KAAAH,WAAsC,KAAAC,aAAgC,KAAAgJ,eAblF,KAAA1K,QAAkB,KAGD,KAAA6qC,kBAAoB,IAAI,EAAA99C,aAEzC,KAAA8mC,OAAiB,KAGjB,KAAA9xB,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAhV,SAAA,WACIQ,KAAKu2B,QAAQjT,OAAS,KACtBtjB,KAAKi+C,YAAc,IAGvB,YAAAG,iCAAA,SAAiCD,GAC7B,OAAOA,EAAS98C,MAGpB,YAAAg5B,uBAAA,SAAuB8jB,GAAvB,WACI,OAAO,EAAAjnB,WAAW1hB,QAAO,SAAC2hB,GACtB,EAAKnjB,SAASya,mBAAmB0vB,EAASzvB,cAAe,EAAKuvB,YAAa,MAAMppC,MAAK,SAAAuiB,GAClFD,EAASllB,KAAKmlB,UAK1B,YAAAO,kBAAA,SAAkB7pB,GACd9N,KAAKqmC,OAASv4B,EAAE8b,KAAKxnB,OAGzB,YAAAi8C,SAAA,sBACQC,EAAM,CACNzkB,WAAY,SACZ0kB,oBAAqBv+C,KAAKu2B,QAAQh1B,IAGtCvB,KAAK+T,QAAQke,wBAAwBqsB,GAAKzpC,MAAK,SAAA4C,GAC3C,EAAK4lC,kBAAkBrjC,KAAK,EAAKuc,SAEjC,EAAKriB,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAmpC,gBAAA,sBACQF,EAAM,CACNC,oBAAqBv+C,KAAKu2B,QAAQh1B,GAClCs4B,WAAY,UACZhL,aAAc7uB,KAAKqmC,OACnBhzB,MAAOrT,KAAKu2B,QAAQljB,OAGxBrT,KAAK+T,QAAQke,wBAAwBqsB,GAAKzpC,MAAK,SAAA4C,GAC3C,EAAK4lC,kBAAkBrjC,KAAK,EAAKuc,SAEjC,EAAKriB,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAsC,SAAA,WACI3X,KAAKkU,WAAWwD,QAGpB,YAAAG,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAxC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAhF3C/I,GAAmC,gO,iCAAnCA,EAAmC,uxEClBhD,4BACI,8BAWA,+BA6BA,4BAKI,4BAEI,gCAsEJ,iBACJ,iBAEJ,kB,MAxHU,oDAWA,qDAoCQ,gD,oIDnClB,GAKa,EAAAA,uC,+DAAAA,EAAmC,E,KAL/C,EAAA6C,U,MAAU,CACPC,SAAU,gCACVC,YAAa,iDACbC,UAAW,Q,gKAKFinB,QAAS,CAAF,C,KAAf,EAAAhnB,QACQ0sC,IAAK,CAAF,C,KAAX,EAAA1sC,QACgB8tC,kBAAiB,E,KAAjC,EAAAp2C,Y,+HEvBL,WAIA,GAFA,MAEA,OAQA,GAJA,OACA,OACA,OAEA,Q,GACA,M,gFCZI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,6BAA2D,aAC/D,iBACA,+BACI,8BAA4D,kBAC5D,+BACM,aACN,iBACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAhB4B,mDAGmD,2DAKrD,6EDhB9B,iBAuBI,WAAoB8M,EAAkCC,EAA6BI,EACvEH,EAAsCC,GAD9B,KAAAH,UAAkC,KAAAC,WAA6B,KAAAI,cACvE,KAAAH,WAAsC,KAAAC,aAjBlD,KAAA1B,QAAkB,KAGD,KAAA6qC,kBAAoB,IAAI,EAAA99C,aASzC,KAAAgV,UAAoB,EACpB,KAAAC,MAAgB,E,OAOhB,YAAAhV,SAAA,WAKIQ,KAAKu2B,QAAQjT,OAAS,KACtBtjB,KAAKi+C,YAAc,IAGvB,YAAAC,UAAA,SAAUC,GACN,OAAOluC,KAAKC,UAAUiuC,IAG1B,YAAAC,iCAAA,SAAiCD,GAC7B,OAAOA,EAAS98C,MAGpB,YAAAg5B,uBAAA,SAAuBplB,EAAkBkpC,GAAzC,WAEQl3B,EAAgBjnB,KAAKi8C,IAAItuB,cAAclM,UAE3C,OAAO,EAAAyV,WAAW1hB,QAAO,SAAC2hB,GACtB,EAAKpjB,QAAQoa,wBAAwB,EAAK8vB,YAAahpC,EAJ1C,KAIgE,KAAMgS,EAAe,EAAKg1B,IAAItjB,WAAW9jB,MAAK,SAAAuiB,GACvHD,EAASllB,KAAKmlB,UAK1B,YAAAO,kBAAA,SAAkB7pB,EAAmBqwC,GAArC,WACIn+C,KAAK+T,QAAQ+b,oBAAoBhiB,EAAE8b,KAAK2jB,IAAK4Q,EAASlpC,SAAU,IAAI,EAAOjV,KAAKi8C,IAAItjB,WAAW9jB,MAAK,SAAA6hC,GAChGyH,EAAS76B,OAASozB,EAAU/iB,UAC5B,EAAKsqB,YAAcvH,EAAU/iB,UAAUlyB,WAAW8T,aAAamT,kBAChEtT,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAgpC,SAAA,sBACQC,EAAM,CACNzkB,WAAY,SACZ0kB,oBAAqBv+C,KAAKu2B,QAAQh1B,IAGtCvB,KAAK+T,QAAQke,wBAAwBqsB,GAAKzpC,MAAK,SAAA4C,GAC3C,EAAK4lC,kBAAkBrjC,KAAK,EAAKuc,SAEjC,EAAKriB,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA6nC,mBAAA,SAAmBC,GACf,OAAOA,EAAKxb,QAAQ,KAAM,OAG9B,YAAA6c,gBAAA,sBACQF,EAAM,CACNC,oBAAqBv+C,KAAKu2B,QAAQh1B,GAClCs4B,WAAY,UACZ7rB,KAAMhO,KAAKu2B,QAAQjT,OAAO7hB,WAAWuM,KACrCiH,SAAUjV,KAAKu2B,QAAQjT,OAAO7hB,WAAWJ,KACzCgS,MAAOrT,KAAKu2B,QAAQljB,OAGxBrT,KAAK+T,QAAQke,wBAAwBqsB,GAAKzpC,MAAK,SAAA4C,GAC3C,EAAK4lC,kBAAkBrjC,KAAK,EAAKuc,SAEjC,EAAKriB,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAwC,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAGjD,YAAAH,SAAA,WACI3X,KAAKkU,WAAWwD,QAGpB,YAAApC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAzG3C9I,GAAmC,0L,iCAAnCA,EAAmC,qnDCpBhD,4BACI,8BAWA,+BA6BA,4BAKI,4BAEI,4BACI,4BACI,yBAAI,6BAAQ,4BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6C,iBAE5E,0BAAI,8BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,8BAA6D,iBAE5F,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBAAG,8BAA+D,iBACtE,iBACA,8BACC,8BACE,8BACC,6BACE,+BAAmB,8BAA+E,iBACpG,iBACD,iBACA,8BACG,+BAA4C,aAA4C,iBAC1F,iBACH,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,+BAA4C,aAA6B,iBAC3E,iBACF,iBACD,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MApFU,oDAWA,qDAuCyC,kFAgBe,kFAUD,kE,4DD9DjE,GAKa,EAAAA,uC,+DAAAA,EAAmC,E,KAL/C,EAAA4C,U,MAAU,CACPC,SAAU,gCACVC,YAAa,iDACbC,UAAW,Q,wIAKFinB,QAAS,CAAF,C,KAAf,EAAAhnB,QACQ0sC,IAAK,CAAF,C,KAAX,EAAA1sC,QACgB8tC,kBAAiB,E,KAAjC,EAAAp2C,Y,kHEzBL,WAEA,GADA,MACA,OACA,SAEA,SAEA,GADA,MACA,Q,GAEA,O,4FCPE,4BAAkE,YAAgB,kB,6BAAhB,oD,qBAW5D,6B,qBACA,6B,wBAGA,6B,8BACgB,qC,wBAChB,6B,8BACgB,qC,mDAVtB,+BACE,4BACE,8BACE,mCACA,oCACF,iBACA,6BACE,iCAEA,iCAEF,iBACF,iBAEA,6BACE,8BACE,iCAAsB,6EAASiN,WAAA,UAE7B,4BAAM,aAAc,iBACtB,iBACA,iCAAsB,0FAGpB,4BAAM,aAAc,iBACtB,iBACF,iBACF,iBACF,iB,gCAxBiB,iFACA,6EAGH,iFAEA,6EASA,iDAGN,kGAEM,kDDpBhB,iBAmCE,WAAoBA,EAAgCkJ,EAA8C3N,GAA9E,KAAAyE,aAAgC,KAAAkJ,kBAA8C,KAAA3N,eA7BzF,KAAAgvC,MAAgBz+C,KAAKod,gBAAgBmC,OAAO,uBAE5C,KAAA/M,QAAkBxS,KAAKod,gBAAgBmC,OAAO,yBAI9C,KAAA0L,WAAqBjrB,KAAKod,gBAAgBmC,OAAO,wBAEjD,KAAAomB,WAAqB3lC,KAAKod,gBAAgBmC,OAAO,uBAEjD,KAAAle,KAAmB,EAAA2qB,WAAW0yB,Q,OAqBvC,YAAAl/C,SAAA,sBACEQ,KAAKkrB,UAAY,IAAI,EAAAxZ,QAErB,IAAIwM,EAA+B,CACjCwqB,WAAY,EACZC,mBAAmB,EACnBvN,IAAKprB,IAAM,iBAGbhQ,KAAK4oC,SAAW,IAAI,EAAAC,aAAc3qB,GAClCle,KAAK4oC,SAASE,gBAAkB,SAAEC,EAAeC,GAC7CA,EAAK5oB,OAAQ,OAAQnQ,KAAKC,UAAU,EAAK+rC,IAAItuB,iBAEjD3tB,KAAK4oC,SAASM,mBAAqB,SAAEH,GACjC,EAAKt5B,aAAaK,SAEtB9P,KAAK4oC,SAASO,eAAiB,SAAEvf,EAAWnS,EAAe/G,EAAad,GACpE,EAAKw5B,QAAQpqB,cAAc5c,MAAQ,GACnC,EAAKqN,aAAaY,YAEtBrQ,KAAK4oC,SAASS,cAAgB,SAAEzf,EAAWnS,EAAkB/G,EAAgBd,GAC3E,EAAKsb,UAAUjZ,KAAM,EAAKhN,MAC1B,EAAKiP,WAAWwD,QAElB1X,KAAK4oC,SAASY,YAAc,SAAE5f,EAAWnS,EAAkB/G,EAAgBd,GACzE,EAAK0F,MAAOrF,KAAKmL,MAAO3D,MAI5B,YAAAzG,SAAA,SAAS/L,GAEP,OAAOgL,KAAKC,UAAUjL,IAGxB,YAAAomC,QAAA,WAC8B,MAAvBrrC,KAAK4oC,SAASiB,OAAiB7pC,KAAK4oC,SAASiB,MAAM7nC,OAAS,EAC/DhC,KAAK4oC,SAASkB,YAGd9pC,KAAKsV,MAAO,CAAE9C,QAASxS,KAAKod,gBAAgBmC,OAAQ,mBAAqBjK,MAAO,MAI7E,YAAAA,MAAP,SAAcD,GACZrV,KAAK2+C,aAAe,EAAA3mC,aAAaC,oBAAoB5C,I,iCA5E5CjJ,GAAsB,mH,iCAAtBA,EAAsB,uD,GAAA,K,w4CClBnC,4BAEE,8BAEA,4BACE,yBAAI,YAAS,iBACf,iBAEA,0BAAK,YAAW,iBAEhB,gCA4BF,kB,MApCQ,mDAGA,4CAGD,8CAEE,4C,+JDGT,GAKa,EAAAA,0B,+DAAAA,EAAsB,E,KALlC,EAAA+C,U,MAAW,CACRC,SAAU,iBACVC,YAAa,kCACbC,UAAW,Q,6FAGJmvC,MAAO,CAAF,C,KAAb,EAAAlvC,QAEQiD,QAAS,CAAF,C,KAAf,EAAAjD,QAEQtK,KAAM,CAAF,C,KAAZ,EAAAsK,QAEQ0b,WAAY,CAAF,C,KAAlB,EAAA1b,QAEQo2B,WAAY,CAAF,C,KAAlB,EAAAp2B,QAEQlO,KAAM,CAAF,C,KAAZ,EAAAkO,QAEQ0sC,IAAK,CAAF,C,KAAX,EAAA1sC,QAGD65B,QAAS,CAAF,C,KADN,EAAA3sB,U,MAAW,e,+GEjCd,WACA,O,GAEA,OACA,OACA,OAEA,M,4HCQS,6BACE,6BACE,yBAAI,YAAqB,iBAC3B,iBAEA,6BACE,4BACC,4BACC,4BAAO,6BAA6C,iBACpD,2BAA+B,aAAY,iBAC3C,gCAAkC,8BAAiD,iBAChF,+BACI,aACJ,iBACJ,iBACA,8BACE,gCACE,2BACA,4BAAM,8BAAsC,iBAC9C,iBAEA,gCACE,gCAAwE,qHAAxE,iBACA,4BAAM,8BAA0C,iBAClD,iBACF,iBACD,iBACF,iBACF,iB,+CA1BQ,qDAO6B,0CAGxB,wEAKwE,kDAAAlb,GAAA,eAA4B,uDAKY,kDAAAA,GAAA,cAA2B,uD,mDAOxJ,6BACG,6CAA0C,sHAAmD,iBAC/F,kB,uHAlCR,4BACI,4BACE,6BACC,gC,uBA6BA,+BAGD,iBACF,iBACJ,kB,6BAlC6B,2LA6BhB,wE,mDAqBL,6BACE,6BACE,yBAAI,YAAqB,iBAC3B,iBAEA,6BACE,4BACC,4BACC,4BAAO,6BAA6C,iBACpD,2BAA+B,aAAY,iBAC3C,gCAAkC,8BAAiD,iBACnF,+BACG,aACH,iBACA,gCAAkC,8BAAmD,iBACrF,+BACG,aACH,iBACD,iBACA,8BAEC,gCACE,gCAAoE,6HAApE,iBACA,4BAAM,8BAAsC,iBAC9C,iBACA,gCACE,2BACA,4BAAM,8BAA0C,iBAClD,iBACD,iBACD,iBACF,iBACF,iB,+CA9BQ,qDAO6B,0CAG5B,wEAIA,2EAM0G,kDAAAA,GAAA,eAA4B,uDAI1C,kDAAAA,GAAA,cAA2B,uD,mDAOhI,6BACE,6CAAyC,qHAAkD,iBAC7F,kB,sHApCF,6BACE,gC,uBAiCA,+BAGF,kB,6BApCwB,uLAiChB,uE,sBAIR,6BACE,2BAAyC,6BAA4D,iBACvG,kBD/FR,iBAiCI,WAAoBq9C,EAAkCxhC,EAA8ChJ,GAAhF,KAAAwqC,cAAkC,KAAAxhC,kBAA8C,KAAAhJ,cAtBpG,KAAAyqC,gBAAkC,CAC9BjT,MAAO,EACP/6B,WAAY,EACZD,SAAU,GACVwmB,QAAS,IAGb,KAAA0nB,eAAiC,CAC7BlT,MAAO,EACP/6B,WAAY,EACZD,SAAU,GACVwmB,QAAS,IAGb,KAAAukB,eAAyB,EAEzB,KAAAF,kBAA4B,EAC5B,KAAAC,oBAA8B,E,OAO9B,YAAAl8C,SAAA,WACIQ,KAAK++C,4BAA4B,IAGrC,YAAAC,MAAA,SAAMC,GACF,OAAW,MAAPA,EACOA,EAAIr0B,cAEJ,IAIf,YAAAm0B,4BAAA,SAA4BluC,GAA5B,WACI7Q,KAAK4+C,YAAY9pB,WAAWjkB,EAAY7Q,KAAK6+C,gBAAgBjuC,SAAU,cAAciE,MAAK,SAAA82B,GACtF,EAAKkT,gBAAkBlT,MAI/B,YAAAuT,2BAAA,SAA2BruC,GAA3B,WACI7Q,KAAK4+C,YAAY9pB,WAAWjkB,EAAY7Q,KAAK8+C,eAAeluC,SAAU,YAAYiE,MAAK,SAAA82B,GACnF,EAAKmT,eAAiBnT,MAI9B,YAAAwT,eAAA,SAAeC,GAAf,WAGIp/C,KAAK4+C,YAAY3pB,aAAamqB,EAAK79C,IAAIsT,MAAK,WACxC,IAAMwS,EAAQ,EAAKw3B,gBAAgBznB,QAAQx0B,WAAU,SAAAs/B,GAAK,OAAAA,EAAE3gC,KAAO69C,EAAK79C,OAEzD,IAAX8lB,GACA,EAAKw3B,gBAAgBznB,QAAQt0B,OAAOukB,EAAO,GAG/C,EAAKy3B,eAAe1nB,QAAQr0B,KAAKq8C,OAKzC,YAAAC,uBAAA,SAAuBD,GAAvB,WACIp/C,KAAK27C,eAAgB,EAErB37C,KAAK4+C,YAAYzpB,cAAciqB,EAAK79C,GAAI,cAAcsT,MAAK,WACvD,IAAMwS,EAAQ,EAAKy3B,eAAe1nB,QAAQx0B,WAAU,SAAAs/B,GAAK,OAAAA,EAAE3gC,KAAO69C,EAAK79C,OAExD,IAAX8lB,GACA,EAAKy3B,eAAe1nB,QAAQt0B,OAAOukB,EAAO,GAG9C,EAAKy3B,eAAe1nB,QAAQt0B,OAAOukB,EAAO,GAC1C,EAAKw3B,gBAAgBznB,QAAQr0B,KAAKq8C,OAI1C,YAAAE,wBAAA,WACIt/C,KAAK27C,eAAgB,EAErB37C,KAAKk/C,2BAA2B,IAGpC,YAAArnC,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,I,iCAzFxCrL,GAAmB,mH,iCAAnBA,EAAmB,kGAHjB,CAAC,EAAA9E,YAAS,qkDCbzB,4BACE,4BAEA,4BAEE,yBAEA,yBACE,4BACF,iBACA,oBAEF,8BAwCA,4BACA,2BACI,6BACF,iBACA,gCAAgE,wCAAS,EAAA23C,6BACvE,6BACF,iBACA,iBACA,qBAEA,6BACE,6BACE,gCAsCA,gCAGF,iBACF,iBAGH,iBACD,kB,MAlGoB,uEAoDkB,uFAsCA,2F,ofD7FtC,GAOa,EAAA7yC,uB,+DAAAA,EAAmB,E,KAP/B,EAAA0C,U,MAAU,CACPC,SAAU,cACVC,YAAa,+BACbC,UAAW,CAAC,+BACZ/B,UAAW,CAAC,EAAA5F,e,6FAKHmM,cAAe,CAAF,C,KAArB,EAAAvE,W,iIElBL,WAOA,GALA,MACA,MAGA,MACA,QACA,SAIA,GADA,OACA,Q,oICSY,4BACE,4BACE,2BAA8F,YAAgC,iBAChI,iBACA,4BACE,gCAAsB,4GACpB,6BACF,iBACA,gCAAsB,4GACpB,6BACF,iBACA,gCAAsB,8GACpB,8BACF,iBACF,iBACF,iB,0BAbO,oFAA2F,qE,yEDT9G,aAsBI,WAAmBwE,EAA+CE,EAAuCmxB,EAAwBloB,GAA9G,KAAAnJ,UAA+C,KAAAE,WAAuC,KAAAmxB,SAAwB,KAAAloB,eAfjI,KAAA1K,QAAkB,KAElB,KAAAm5B,KAA0C,CACtChE,UAAW,GACXiE,MAAO,EACP/6B,WAAY,EACZD,SAAU,I,OAWd,YAAApR,SAAA,WACIQ,KAAKm5C,aAAa,IAGtB,YAAAA,aAAA,SAAatoC,GAAb,WACI7Q,KAAK+T,QAAQugB,QAAQzjB,EAAY7Q,KAAK2rC,KAAK/6B,UAAUiE,MAAK,SAAA82B,GACtD,EAAKA,KAAOA,KACbv2B,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAG,OAAA,sBACIxV,KAAK+T,QAAQS,KAAK,MAAMK,MAAK,SAAA4C,GACzB,IAAIvD,EAAa,EAAKgJ,aAAasM,KAAK,EAAA7c,oCAAqC,CACzE2d,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBtW,EAAWuW,QAAQ3T,KAAK,KAAMW,EAASgnB,MACvCvqB,EAAWuW,QAAQ80B,UAAUzlC,WAAU,WACnC,EAAKq/B,aAAa,EAAKxN,KAAK96B,mBAKxC,YAAAk6B,OAAA,SAAO7Y,GAAP,WACIlyB,KAAK+T,QAAQS,KAAK0d,EAAO1wB,KAAKqT,MAAK,SAAA4C,GAC/B,IAAIvD,EAAa,EAAKgJ,aAAasM,KAAK,EAAA7c,oCAAqC,CACzE2d,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBtW,EAAWuW,QAAQ3T,KAAKW,EAASya,OAAQza,EAASgnB,MAClDvqB,EAAWuW,QAAQ80B,UAAUzlC,WAAU,WACnC,EAAKq/B,aAAa,EAAKxN,KAAK96B,mBAKxC,YAAA2uC,SAAA,SAASttB,GAAT,WACIlyB,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKiU,SAASsL,OAAO,+BAAiC,KAAO2S,EAAO7e,MAAMqV,eAAiB,IAC7H1oB,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKiU,SAASsL,OAAO,uBAC1Dvf,KAAKkU,WAAWuW,QAAQppB,KAAO,EAAA2qB,WAAWC,OAE1CjsB,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,WACxC,EAAK/F,QAAQzT,OAAO4xB,EAAO1wB,KAAKqT,MAAK,WACjC,EAAKskC,aAAa,EAAKxN,KAAK96B,eAC7BuE,OAAM,SAACC,GACN,EAAKC,MAAMD,UAKvB,YAAAy1B,OAAA,SAAO5Y,GACHlyB,KAAKolC,OAAOQ,SAAS,CAAC,oCAAqC1T,EAAO1wB,OAGtE,YAAA8T,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAnF3C3I,GAAqC,qK,iCAArCA,EAAqC,+7BCnBlD,4BACE,4BACA,6BAEA,4BAEE,4BACE,yBACE,4BACF,iBACF,iBAEA,4BACE,4BACE,8BACE,6BACE,0BACE,4BAAwB,6BAAwD,iBAClF,iBACF,iBACA,6BACE,+B,wBAgBF,iBACF,iBACA,8CAAqB,8CAAc,EAAAysC,aAAA,MAAsB,iBAEzD,8BACE,8BACE,iCAAsB,wCAAS,EAAA3jC,YAC7B,8BACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MA9BmC,qJ,uMDPnC,GAKa,EAAA9I,yC,+DAAAA,EAAqC,E,KALjD,EAAAyC,U,MAAU,CACPC,SAAU,iCACVC,YAAa,kDACbC,UAAW,Q,sQEjBf,WAEA,GADA,MACA,OAIA,GADA,MACA,Q,GAGA,O,2GCRE,6BAAqE,YAAW,kB,6BAAX,+C,yBAUjE,4BACE,4BACE,4BAAQ,6BAAyD,iBAAC,sCAAkE,iBACpI,iBACF,iBACA,6BACE,+BAAO,wEAAP,iBACF,iBACF,kB,uBANyF,4CAI9E,+CAA+B,yBAA/B,CAA+B,wC,yBAWlC,gCAA6D,YAAa,kB,uBAAhC,6BAAmB,6C,yBAa7D,gCAA4E,YAAmB,kB,uBAA5C,6BAAyB,6C,mDARpF,4BACE,4BACE,4BAAO,6BAA4D,iBACrE,iBACA,6BACE,8BACE,gCAAoB,4GAA8B,wFAChD,wBACA,kCACF,iBACF,iBACF,iBACF,iB,gCAN0B,0DAA8B,+BAElB,2D,yBAc9B,gCAAiE,YAAgB,kB,uBAArC,4BAAqB,6C,mDARzE,4BACE,4BACE,4BAAO,6BAAyD,iBAClE,iBACA,6BACE,8BACE,gCAAoB,yGAA2B,6FAC7C,wBACA,kCACF,iBACF,iBACF,iBACF,iB,gCAN0B,uDAA2B,+BAElB,uD,yBAmCvB,4BACE,+BAA2C,6BAA6C,YAAyB,iBACnH,kB,uCAD0F,0D,yBAKtF,gCAAuD,YAA6B,kB,uBAAjD,6BAAoB,4D,mDAH3D,4BACE,gCAAoB,yHAA0C,oKAC5D,wBACA,kCACF,iBACF,iB,+DAJsB,6DAA0C,mCAEnC,gD,mDAG7B,4BACE,gCAAoB,yIAAsC,mGACxD,wBACA,gCAA0B,6BAAwD,iBAClF,gCAA8B,6BAAgE,iBAC9F,gCAAoB,6BAAsD,iBAC5E,iBACF,iB,0CAN6D,oDAAiC,2B,yBAU1F,gCAA+D,YAAc,kB,uBAAjC,2BAAmB,4C,mDAHnE,4BACE,gCAAoB,0HAClB,wBACA,kCACF,iBACF,iB,+DAJsB,8DAA2C,2BAEnC,wD,mDAW1B,2BAAyI,2I,uBACvI,sBACA,+BAAgD,6BAA2D,iBAC7G,iB,KAHiL,kF,mDARrL,4BACP,0BACE,2BAA0B,2J,uBACxB,sBACA,+BAAgD,6BAA6C,iBAC/F,iBACF,iBACA,0BACW,6BAIF,iBACX,iB,0CAX0E,iFAMzD,+G,sBA4BU,4BAAoE,6BAAsD,kB,qBAIxH,6B,yBADF,4BACE,oCACF,kB,uCADa,uD,yBAahB,gCACE,+BAA2B,YAAsB,iBACnD,kB,uBAF8D,uCACjC,qD,yBAK3B,+BAAgD,YAAkC,kB,uCAAlC,8D,mDAGhD,gCAAuE,qHAAoC,8HACxG,gCAA0B,6BAAyD,iBACnF,gCAAyB,6BAA4D,iBACvF,iB,sEAHsE,yCAAoC,+CAChG,0CACA,2C,yBAHb,4BACE,kCAIF,kB,uCAJ6B,kE,sBAK7B,4BACE,+BAA2B,6BAAwC,iBACrE,kB,yBAII,gCACE,YACF,kB,uBAFQ,kCACN,qD,2FAHJ,gCAA8E,8GAA6B,6HACzG,gCAAyB,6BAA0C,iBACnE,kCAGF,iB,2CAL8E,kCAA6B,yCACjG,4CACoD,0D,sBAI9D,+BAAkG,6BAAwC,kB,yBAP5I,4BACE,kCAMA,iCACF,kB,uCAPW,kFAMD,oF,qBAmBJ,8B,qBACA,8B,yBAaA,gCACE,YACF,kB,uBAFgF,6BAC9E,qD,mDAHJ,iCAAwC,sJACtC,gCAAyB,6BAA0C,iBACnE,kCAGF,iB,8FALwC,wCAAsC,yCACpE,4CACmB,8E,yBAMnC,gCAA+D,YAAc,kB,uBAAjC,2BAAmB,4C,mDAFzD,iCAAmD,sJACzD,gCAAyB,6BAA0C,iBACnE,kCACF,iB,8FAH2D,wCAAsC,yCACvF,4CACkB,wD,yBAjC7B,gCACG,4BACE,yBACE,uBAEA,4BACE,4BAAO,8BAAkD,iBAC3D,iBACA,uBAGA,4BACE,4BACE,sCACA,sCACF,iBACF,iBACF,iBACF,iBACA,6BACE,0BACE,qBACA,0BAAI,gCAA2B,aAAc,iBAAQ,iBACrD,8BAA4C,gCAA2B,8BAAwC,iBAAQ,iBACvH,0BACE,oCAMA,oCAIF,iBACF,iBACF,iBACF,kB,sDAzBqB,uDACA,qDAQgB,4CAGpB,sDAMA,sD,yBAhCnB,0BACC,kCAuCA,kB,uCAvCwB,qD,mDA5D7B,yBACE,4BACE,+BACE,4BACE,yBACE,uBACA,4BACE,4BAAO,6BAAqD,iBAC9D,iBACA,4BACG,6BAAO,8BAA0C,iBACnD,iBACA,6BACE,kCACF,iBACA,6BACE,kCAGF,iBACH,iBACF,iBACA,6BACE,0BACE,6BACE,4BAAG,iJAAoE,iBACzE,iBACA,6BACE,iCAA0B,8EAAiC,+HAAqD,GAArD,uBAAyD,KAAO,EAAH,+CAAgE,GAAI,MAC9L,4BACA,mCAGF,iBACE,iBACA,6BACE,kCACF,iBACA,+BAMA,+BAGA,+BASF,iBACF,iBACF,iBACA,gCAyCF,iBACF,iB,iFAxFqB,0EAGA,2CAYiB,qDAAiC,oEACrD,4CACiB,iEAMf,2CAEL,yEAMA,8FAGkB,2CAYvB,2G,mDApEf,4BACE,yBAAI,6BAAsD,iBAC3D,+BAEE,+BACJ,wBACA,wBACJ,iBACQ,4BACE,gCAsGA,yBACG,6BACE,4BAAsB,oI,wBAA0F,iBAClH,iBACF,iBACH,iBACF,iBACD,iB,0CA7G6B,0DAwGqC,6F,0BAvJpE,yBACE,8BAGA,8BAMA,8BAQA,8BAMA,8BAcA,+BAuHF,kB,4CA7JuD,wEAC/B,6DAGC,6DAMA,6DAQA,uFAMA,6DAcN,8D,oDAlE7B,4BAEE,4BACE,4BAAO,6BAAwD,iBACjE,iBACA,6BACE,6BACE,+BACE,4BACE,yBACE,4BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACF,iBACF,iBACA,6BACE,gCA8JA,0BACE,6BACE,4BAAqE,2F,wBAAqB,iBAC5F,iBACF,iBACF,iBACF,iBAEF,iBACJ,iBAGA,iB,gCA1KmC,oDAgKC,oFD7O1C,IAAImwC,GAA2B,kDAiB/B,cAoCI,WAAoB1rC,EAA+CsJ,EAA0CpJ,EAAuCC,GAAhI,KAAAH,UAA+C,KAAAsJ,kBAA0C,KAAApJ,WAAuC,KAAAC,aA7BpJ,KAAA1B,QAAkB,KAIlB,KAAA0f,OAAgC,CAC5B9b,aAAc,KACdspC,OAAQ,KACRj+B,UAAW,KACXpO,MAAOrT,KAAKiU,SAASuB,SACrBmY,cAAe,IAGnB,KAAA3G,cAA+B,GAE/B,KAAA24B,KAAoB,KACpB,KAAAC,QAAwD,KAExD,KAAA9qC,MAAyB,GAEzB,KAAA+qC,UAAwB,GAExB,KAAAC,cAAuB,G,OAUvB,YAAAtgD,SAAA,WACIQ,KAAKu/C,UAAY,IAAI,EAAA7tC,SAGzB,YAAAoF,KAAA,SAAKob,EAA+BlL,GAApC,WAGI,GAFAhnB,KAAKgnB,cAAgBA,EAEP,MAAVkL,EAAgB,CAChBlyB,KAAKkyB,OAASA,EAEd,IAAI6tB,EAAS//C,KAAKgnB,cAAcpkB,WAAU,SAAAmU,GAAO,OAAAA,EAAI/I,OAAS,EAAKkkB,OAAO9b,iBAE1D,IAAZ2pC,IACA//C,KAAK2/C,KAAO3/C,KAAKgnB,cAAc+4B,IAGnC,IAAIC,EAAShgD,KAAK2/C,KAAKM,QAAQr9C,WAAU,SAAA88C,GAAU,OAAAA,EAAOl+C,MAAQ,EAAK0wB,OAAOwtB,WAE9D,IAAZM,IACAhgD,KAAK4/C,QAAU5/C,KAAK2/C,KAAKM,QAAQD,IAGjB,MAAhBhgD,KAAK4/C,SAAyC,wBAAtB5/C,KAAK4/C,QAAQv+C,MAMrCrB,KAAK+T,QAAQ0gB,eAAez0B,KAAKkyB,OAAOwtB,OAAQ1/C,KAAKkyB,OAAOzQ,WAAW5M,MAAK,SAAAqrC,GACxE,EAAKprC,MAAQorC,EAASprC,MACtB,EAAKgrC,cAAgBI,EAASJ,iBAC/B1qC,OAAM,SAACC,GACN,EAAKC,MAAMD,MAInBrV,KAAK6/C,UAAY,GACjB,IAAK,IAAIl7C,EAAI,EAAGA,EAAI3E,KAAKkyB,OAAOvE,cAAcwyB,OAAOn+C,SAAU2C,EAAG,CAC9D,IAEIy7C,EAAqB,CAAEC,MAFfrgD,KAAKkyB,OAAOvE,cAAcwyB,OAAOx7C,GAEJ27C,SAAU37C,EAAG47C,mBAAmB,GAEzEvgD,KAAK6/C,UAAU98C,KAAKq9C,MAKhC,YAAAI,qBAAA,WACI,MAAO,CACH,CACIC,yBAA0BhB,GAC1BiB,gBAAgB,EAChBC,YAAa,eACbnsB,WAAY,KACZosB,QAAS,OACTC,cAAe,QAEnB,CACIJ,yBAA0BhB,GAC1BiB,gBAAgB,EAChBC,YAAa,eACbnsB,WAAY,KACZosB,QAAS,YACTC,cAAe,aAEnB,CACIJ,yBAA0BhB,GAC1BiB,gBAAgB,EAChBC,YAAa,OACbC,QAAS,OACTpsB,WAAY,KACZqsB,cAAe,QAEnB,CACIJ,yBAA0BhB,GAC1BiB,gBAAgB,EAChBC,YAAa,aACbnsB,WAAY,KACZosB,QAAS,cACTC,cAAe,iBAuB3B,YAAAC,iBAAA,sBAKI,GAJA9gD,KAAK8U,MAAQ,GACb9U,KAAK6/C,UAAY,GACjB7/C,KAAKkyB,OAAOvE,cAAsB,OAAI,GAElB,MAAhB3tB,KAAK4/C,SAAyC,wBAAtB5/C,KAAK4/C,QAAQv+C,KAAgC,CACrErB,KAAK+T,QAAQ0gB,eAAez0B,KAAKkyB,OAAOwtB,OAAQ1/C,KAAKkyB,OAAOzQ,WAAW5M,MAAK,SAAAqrC,GACxE,EAAKprC,MAAQorC,EAASprC,MACtB,EAAKgrC,cAAgBI,EAASJ,iBAC/B1qC,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGf,IAAI0rC,EAAM,CACN1/C,KAAM,KACNyS,cAAe,KACfusC,MAAO,EACPW,SAAU,GACVC,eAAgB,MAEpBjhD,KAAKkyB,OAAOvE,cAAsB,OAAI,CAACozB,GACvC/gD,KAAK6/C,UAAU98C,KAAK,CAAEs9C,MAAOU,EAAKT,SAAU,EAAGC,mBAAmB,MAI1E,YAAAW,kBAAA,SAAkBd,GACd,GAA4B,kBAAxBA,EAASC,MAAMh/C,KAA0B,CACzC++C,EAASe,QAAQH,SAAW,GAC5BZ,EAASC,MAAMW,SAAW,GAE1B,IAAII,EAAcphD,KAAKqhD,kBACF,IAAjBD,GACAphD,KAAK6/C,UAAU/8C,OAAOs+C,EAAa,QAGvC,GAAyC,IAArChB,EAASe,QAAQH,SAASh/C,OAAc,CACxCo+C,EAASe,QAAQH,SAAWhhD,KAAKwgD,uBACjCJ,EAASC,MAAMW,SAAWZ,EAASe,QAAQH,SAG3C,IADA,IAAIt8C,EAAM07C,EAASC,MAAMW,SAASh/C,O,WACzB2C,GACL,IAAI28C,EAAUlB,EAASC,MAAMW,SAASr8C,GAEtCy7C,EAASe,QAAQI,gBAAgB17C,SAAQ,SAAC27C,GAClCA,EAAKC,QAAQjrB,OAAS8qB,EAAQX,cAC9BW,EAAQE,KAAOA,OALlB78C,EAAI,EAAGA,EAAID,IAAOC,E,EAAlBA,KAarB,YAAA+8C,uBAAA,sBACQr6B,EAAQrnB,KAAKgnB,cAAcpkB,WAAU,SAAAmU,GAAO,OAAAA,EAAI/I,OAAS,EAAKkkB,OAAO9b,iBAE1D,IAAXiR,EACArnB,KAAK2/C,KAAO3/C,KAAKgnB,cAAcK,IAE/BrnB,KAAK2/C,KAAO,KACZ3/C,KAAK4/C,QAAU,MAGnB5/C,KAAK8gD,oBAGT,YAAAa,cAAA,SAAcvB,EAAoB/4B,GAC9B+4B,EAASe,QAAQH,SAASl+C,OAAOukB,EAAO,IAG5C,YAAAu6B,cAAA,SAAcxB,GACVA,EAASe,QAAQH,SAASj+C,KAAK,CAC3B09C,yBAA0BhB,GAC1BkB,YAAa,KACbE,cAAe,KACfrsB,WAAY,KACZsjB,MAAO,MAIf,YAAA+J,uBAAA,sBACQx6B,EAAQrnB,KAAK2/C,KAAKM,QAAQr9C,WAAU,SAAA88C,GAAU,OAAAA,EAAOl+C,MAAQ,EAAK0wB,OAAOwtB,UAGzE1/C,KAAK4/C,SADM,IAAXv4B,EACernB,KAAK2/C,KAAKM,QAAQ54B,GAElB,KAGnBrnB,KAAK8gD,oBAGT,YAAAgB,kBAAA,WACI9hD,KAAK8gD,oBAGT,YAAAiB,SAAA,WACI,IAAIhB,EAAM,CACN1/C,KAAM,KACNyS,cAAe,KACfusC,MAAOrgD,KAAKkyB,OAAOvE,cAAcwyB,OAAOn+C,OACxCg/C,SAAU,GACVC,eAAgB,MAEhBv8C,EAAM1E,KAAKkyB,OAAOvE,cAAsB,OAAE5qB,KAAKg+C,GACnD/gD,KAAK6/C,UAAU98C,KAAK,CAAEs9C,MAAOU,EAAKT,SAAU57C,EAAM,EAAG67C,mBAAmB,KAG5E,YAAAyB,YAAA,SAAY1B,EAAkB2B,GAC1B,GAAI3B,EAAWtgD,KAAKkyB,OAAOvE,cAAsB,OAAE3rB,OAAQ,CACvD,IAAIo/C,EAAcphD,KAAKqhD,iBACnBD,IAAgBa,EAAgB,GAChCjiD,KAAK6/C,UAAU/8C,OAAOs+C,EAAa,GAGvCphD,KAAK6/C,UAAU/8C,OAAOm/C,EAAe,GAGrC,IADA,IAAIC,EAAc,EACTv9C,EAAI,EAAGA,EAAI3E,KAAK6/C,UAAU79C,SAAU2C,EAAG,CAC5C,IAAIy7C,EAAqBpgD,KAAK6/C,UAAUl7C,GAExCy7C,EAASE,SAAW4B,EAEf9B,EAASG,oBACV2B,GAA4B,GAIpCliD,KAAKkyB,OAAOvE,cAAsB,OAAE7qB,OAAOw9C,EAAU,KAI7D,YAAAe,eAAA,WACI,IAAK,IAAI18C,EAAI,EAAGA,EAAI3E,KAAK6/C,UAAU79C,SAAU2C,EAAG,CAG5C,GAFe3E,KAAK6/C,UAAUl7C,GAEjB47C,kBACT,OAAO57C,EAIf,OAAQ,GAGZ,YAAAw9C,oBAAA,SAAoB/B,GAChB,IAAIgB,EAAcphD,KAAKqhD,kBAEF,IAAjBD,IACAphD,KAAK6/C,UAAU/8C,OAAOs+C,EAAa,GAE/BA,IAAgBhB,EAASE,SAAW,IAK5CtgD,KAAKoiD,sBAAsBhC,EAASC,MAAMvsC,cAAessC,EAASE,UAAU,IAGhF,YAAA+B,eAAA,SAAeb,EAA2BZ,GACtC,IAAK,IAAIj8C,EAAI,EAAGA,EAAI68C,EAAKc,WAAWtgD,SAAU2C,EAAG,CAC7C,IAAI49C,EAAYf,EAAKc,WAAW39C,GAEhC,GAAI49C,EAAU3B,UAAYA,EACtB,OAAO2B,EAAUrkC,UAK7B,YAAAskC,kBAAA,SAAkBlB,GACd,GAAuB,MAAnBA,EAAQV,SAAuC,KAApBU,EAAQV,QAOnC,OANqB,MAAjBU,EAAQxJ,QACRwJ,EAAQxJ,MAAQ,SAGpBwJ,EAAQT,cAAgB,MAK5BS,EAAQxJ,MAAQ,GAGhB,IADA,IAAIpzC,EAAM48C,EAAQE,KAAKc,WAAWtgD,OACzB2C,EAAI,EAAGA,EAAID,IAAOC,EACnB28C,EAAQE,KAAKc,WAAW39C,GAAGi8C,UAAYU,EAAQV,UAC3CU,EAAQE,KAAKc,WAAW39C,GAAGi8C,UAAYU,EAAQE,KAAKc,WAAW39C,GAAG6xB,KAClE8qB,EAAQ9sB,WAAa8sB,EAAQE,KAAKc,WAAW39C,GAAGi8C,QAEhDU,EAAQ9sB,WAAa,KAEzB8sB,EAAQT,cAAgBS,EAAQE,KAAKc,WAAW39C,GAAG6xB,OAK/D,YAAA4rB,sBAAA,SAAsB94B,EAA2B24B,EAAuBQ,GAAxE,WACI,QADoE,IAAAA,OAAA,GAC1C,KAAtBn5B,GAAiD,MAArBA,EAA2B,CACvD,IAAI82B,EAAqBpgD,KAAK6/C,UAAUoC,GAWxC,OATA7B,EAASe,QAAU,KACnBf,EAASC,MAAMW,SAAW,SAIL,KAFjBI,EAAcphD,KAAKqhD,mBAEGD,IAAgBa,EAAgB,GACtDjiD,KAAK6/C,UAAU/8C,OAAOs+C,EAAa,IAM3C,IAIQA,EAJJD,EAAUnhD,KAAK6/C,UAAUoC,GAAed,QAC7B,MAAXA,GAAmBA,EAAQ73B,oBAAsBA,IAK5B,KAFjB83B,EAAcphD,KAAKqhD,mBAEGD,IAAgBa,EAAgB,IACtDjiD,KAAK6/C,UAAU/8C,OAAOs+C,EAAa,GAE/BA,EAAca,IACdA,GAAgC,IAIxCjiD,KAAK6/C,UAAU/8C,OAAOm/C,EAAgB,EAAG,EAAG,CAAE1B,mBAAmB,EAAMY,QAASA,KAEhFnhD,KAAK+T,QAAQwgB,iBAAiBjL,EAAmBtpB,KAAKkyB,OAAOwtB,QAAQ7qC,MAAK,SAAC6tC,GACvE,IAAItB,EAAc,EAAKC,iBACnBjB,EAAqB,EAAKP,UAAUoC,GACpC5B,EAAQD,EAASC,OAES,IAA1BA,EAAMW,SAASh/C,QAAgBygD,KAC/BpC,EAAMW,SAAW,EAAKR,wBAI1B,IADA,IAAI97C,EAAM27C,EAAMW,SAASh/C,O,WAChB2C,GACL,IAAI28C,EAAUjB,EAAMW,SAASr8C,GAE7B+9C,EAAM78C,SAAQ,SAAC27C,GACPA,EAAKC,QAAQjrB,OAAS8qB,EAAQX,cAC9BW,EAAQE,KAAOA,OALlB78C,EAAI,EAAGA,EAAID,IAAOC,E,EAAlBA,GAUTy7C,EAASe,QAAU,CAAE73B,kBAAmBA,EAAmB03B,SAAUX,EAAMW,SAAUO,gBAAiBmB,IAEjF,IAAjBtB,IAAuBA,IAAgBa,EAAgB,GAAKS,EAAM1gD,OAAS,KAC3E,EAAK69C,UAAU/8C,OAAOs+C,EAAa,GAE/BA,EAAca,IACdA,GAAgC,IAInCQ,GACD,EAAK5C,UAAU/8C,OAAOm/C,EAAgB,EAAG,EAAG,CAAE1B,mBAAmB,EAAMY,QAASf,EAASe,QAASd,MAAOD,EAASC,MAAOC,SAAUF,EAASE,cAEjJlrC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAKvB,YAAAstC,WAAA,SAAWnB,EAA2BF,GAClC,GAAY,MAARE,EAOA,OANAF,EAAQX,YAAc,KACtBW,EAAQE,KAAO,KACfF,EAAQT,cAAgB,KACxBS,EAAQ9sB,WAAa,KACrB8sB,EAAQxJ,MAAQ,UAChBwJ,EAAQZ,eAAiB,MAI7BY,EAAQX,YAAca,EAAKC,QAAQjrB,KACnC8qB,EAAQE,KAAOA,EACfF,EAAQT,cAAgB,KACxBS,EAAQ9sB,WAAa,KACrB8sB,EAAQxJ,MAAQ,GAChBwJ,EAAQZ,gBAAiB,EACzBY,EAAQb,yBAA2Be,EAAKoB,2BAA2B,IAGvE,YAAAC,mBAAA,SAAmBvB,GAGf,IAAK,IAAMvyC,KAFXuyC,EAAQ9sB,WAAa,KAEH8sB,EAAQxJ,MAElBwJ,EAAQxJ,MAAMpK,eAAe3+B,KAC7BuyC,EAAQxJ,MAAM/oC,GAAO,OAKjC,YAAAwI,SAAA,sBA+BIvX,KAAK+T,QAAQqF,MAAMpZ,KAAKkyB,QAAQrd,MAAK,SAAAypC,GACjC,EAAKiB,UAAUttC,KAAKqsC,GACpB,EAAKpqC,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAuiB,OAAA,sBAC2B,MAAnB53B,KAAKkyB,OAAO1wB,IACZxB,KAAK+T,QAAQ4gB,OAAO30B,KAAKkyB,OAAO1wB,KAAKqT,MAAK,WACtC,EAAKX,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,MAGfrV,KAAKkU,WAAWwD,QAIxB,YAAApC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAne3C1I,GAAmC,0K,iCAAnCA,EAAmC,qE,GAAA,K,ygJClChD,4BACE,8BAEA,4BACE,yBACE,4BACF,iBACF,iBACA,+BAAwC,sFAA0B,EAAA4K,cAEhE,+BACE,8BASA,4BACE,6BACE,6BAAO,6BAA+D,iBACxE,iBACA,8BACE,+BACE,iCAAoB,4EAAiC,4BAA+B,EAAAmqC,4BAClF,yBACA,mCACF,iBACF,iBACF,iBACF,iBACA,gCAcA,gCAcA,kCAwMA,6BACE,wBACA,8BACE,8BACE,gCAAmF,wCAAS,EAAA9pB,Y,wBAA5F,iBACA,2B,wBACF,iBACF,iBACF,iBAEF,iBACF,iBACF,iB,+BAhRQ,oDAU8C,mEAetB,6DAAiC,+BAE3B,uDAK1B,iDAcA,6DAcmB,4FA4ME,2EACA,2EAAqC,uB,yUD7OtE,GAKa,EAAAjrB,wC,+DAAAA,GAAmC,E,KAL/C,EAAAwC,U,MAAU,CACPC,SAAU,+BACVC,YAAa,gDACbC,UAAW,Q,sIAMQ05B,KAAI,E,KAAtB,EAAAvsB,U,MAAU,a,0HEtCf,WAGA,GAFA,MAEA,QAOA,GAJA,MAGA,OACA,Q,2HCJI,4BAAqE,YAAW,kB,6BAAX,+C,qBA0D/C,6B,qBACA,6B,qBACA,6B,yBAVJ,yBACE,2BACE,6BAA0E,YAC5E,iBACA,yBACE,YACF,iBACA,4BACE,oCACA,oCACA,oCACF,iBACF,kB,iCAV8E,iDAG1E,6DAGW,yDACA,6DACA,oD,yBA/B3B,4BACE,4BAEI,yBACI,6BACJ,iBACA,+BACI,4BACE,yBACE,yBACE,6BACF,iBACA,yBACE,8BACF,iBACA,6BACE,8BACF,iBACF,iBACF,iBACA,6BACE,gCAaF,iBACJ,iBAEJ,iBACF,kB,8BAjBkC,uE,yBAwCd,8BACE,YACF,kB,uCADE,kE,wBAIJ,mC,uCAA0G,oC,yBAM1G,2BACE,gCACE,6BACF,iBACF,kB,uCAJoC,kE,yBAnB1C,yBACE,2BACE,6BACE,sBACA,2BACE,8BAA+B,YAAiB,iBAChD,8BAA+B,YAAmB,iBAClD,8BAA+B,aAAyB,iBACxD,iCAGF,iBAEA,2CAEF,iBACF,iBACA,6BACE,8BACE,8BAKD,iBACF,iBACH,kB,4CArBuC,wDACA,0DACA,kEACxB,sGAKQ,sGAMb,0D,mDAWd,6BACE,6CAAqB,uGAAoC,iBAC3D,kB,4HA/GZ,4BAEE,4BACE,4BACE,yBAAI,YAA+B,iBACrC,iBACF,iBAEA,4BACE,4BACE,4BACE,8BAAuC,kBAAG,iBAC1C,uBACA,+BAAuC,aAAsB,iBAC/D,iBACA,8BACE,oCACE,8BACE,iCAAiD,wF,wBAC/C,8BACF,iBACF,iBACF,iBACF,iBACF,iBAEA,iCAyCA,6BACE,8BACE,6BACE,8BACE,gCACE,6BACE,6BACE,4BAAoC,8BAA2C,iBACjF,iBACF,iBACA,6BAEE,gC,wBA4BF,iBACF,iBACA,gCAGF,iBACF,iBACF,iBACF,iBACF,iBACF,iB,oDAjHU,kEASqC,yDAKsE,kDAA2B,0DAQ1H,0FAqDc,oJA8BlB,+DDxGxB,iBAqBI,WAAoB1I,EAA+CE,EAAuCq3B,GAAtF,KAAAv3B,UAA+C,KAAAE,WAAuC,KAAAq3B,QAd1G,KAAA94B,QAAkB,KAElB,KAAA0f,OAAgC,KAEhC,KAAAyZ,KAAuC,CACnC/6B,SAAU,GACVC,WAAY,EACZ+6B,MAAO,EACPjE,UAAW,I,OAQf,YAAAnoC,SAAA,sBACUgC,EAAMxB,KAAKsrC,MAAMa,SAASC,SAASn7B,IAAI,OAE7CjR,KAAK+T,QAAQ9C,IAAIzP,GAAKqT,MAAK,SAAAqd,GACvB,EAAKA,OAASA,EACd,EAAKinB,aAAa,MAGtB,IAAIG,EAAU,SAAW75C,OAAOutC,SAASuM,UAAY95C,OAAOutC,SAASwM,KAAO,IAAM/5C,OAAOutC,SAASwM,KAAO,IAAMxpC,IAE/GhQ,KAAKy5C,SAAW,EAAAC,UAAUJ,EAAU,qBACpCt5C,KAAKy5C,SAAS3/B,WAAU,SAAAtH,GACC,2BAAjBA,EAAQnR,MACR,EAAK83C,aAAa,EAAKxN,KAAK96B,gBAKxC,YAAA+B,YAAA,WACyB,MAAjB5S,KAAKy5C,UACLz5C,KAAKy5C,SAASppC,YAItB,YAAAyyC,MAAA,sBACI9iD,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQ6gB,IAAI50B,KAAKkyB,OAAO1wB,KAAKqT,MAAK,WAEnC,EAAKskC,aAAa,EAAKxN,KAAK96B,eAC7BuE,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA8jC,aAAA,SAAatoC,GAAb,WACuB,MAAf7Q,KAAKkyB,SACLlyB,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQ8gB,QAAQ70B,KAAKkyB,OAAO1wB,IAAKqP,EAAY7Q,KAAK2rC,KAAK/6B,UAAUiE,MAAK,SAAA4C,GACvE,EAAKykC,iBAAiBzkC,GACtB,EAAKk0B,KAAOl0B,KACbrC,OAAM,SAACC,GACN,EAAKC,MAAMD,QAKvB,YAAA2mC,gBAAA,SAAgBC,GACZ,MAAmB,aAAfA,EAAIvrC,OACG1Q,KAAKiU,SAASsL,OAAO,0BACN,YAAf08B,EAAIvrC,QAAuC,QAAfurC,EAAIvrC,OAChC1Q,KAAKiU,SAASsL,OAAO,yBACN,WAAf08B,EAAIvrC,OACJ1Q,KAAKiU,SAASsL,OAAO,wBACN,YAAf08B,EAAIvrC,OACJ1Q,KAAKiU,SAASsL,OAAO,yBACN,aAAf08B,EAAIvrC,OACJ1Q,KAAKiU,SAASsL,OAAO,0BACN,YAAf08B,EAAIvrC,OACJ1Q,KAAKiU,SAASsL,OAAO,yBAErBvf,KAAKiU,SAASsL,OAAO,0BAIpC,YAAA28B,iBAAA,SAAiBvQ,GAAjB,WACIA,EAAKhE,UAAU9hC,SAAQ,SAACo2C,GACpBA,EAAIE,WAAa,CACbthB,MAAO,CACH,CACIxnB,MAAO,EAAKY,SAASsL,OAAO,+BAC5B7O,OAAsB,QAAdurC,EAAIG,MAAkB,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,QAG9F,CACI/oC,MAAO,EAAKY,SAASsL,OAAO,mCAC5B7O,OAAsB,eAAdurC,EAAIG,OAAwC,sBAAdH,EAAIG,MAAgC,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,sBAE1I,CACI/oC,MAAO,EAAKY,SAASsL,OAAO,uCAC5B7O,OAAsB,WAAdurC,EAAIG,OAAoC,mBAAdH,EAAIG,OAA4C,kBAAdH,EAAIG,MAA4B,EAAKC,aAAaJ,GAAO,UAOjJ,YAAAK,mBAAA,SAAmBC,EAAkBC,GACjC,IAAI3D,EAAQ,CAAC,aAAc,oBAAqB,SAAU,iBAAkB,iBAExE4D,EAAS5D,EAAMzlC,QAAQmpC,GAG3B,OAFgB1D,EAAMzlC,QAAQopC,GAEdC,EACL,WAEA,IAIf,YAAAJ,aAAA,SAAaJ,GACT,MAAmB,WAAfA,EAAIvrC,QAAsC,YAAfurC,EAAIvrC,OACxB,UACe,aAAfurC,EAAIvrC,QAAwC,YAAfurC,EAAIvrC,OACjC,QAGJ,IAGX,YAAA4E,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCAlI3CzI,GAA8B,uI,iCAA9BA,EAA8B,mgECnB3C,4BACE,4BACA,6BAEA,4BAEE,8BAEA,4BACE,gCAsHF,iBACF,iBACF,kB,MA3HU,oDAGE,qD,yTDKZ,GAKa,EAAAA,kC,+DAAAA,EAA8B,E,KAL1C,EAAAuC,U,MAAU,CACPC,SAAU,yBACVC,YAAa,0CACbC,UAAW,Q,uOEjBf,WAKA,GAJA,MAGA,MACA,Q,GAEA,O,iGCFQ,4BAAqE,YAAW,kB,6BAAX,+C,yBAOjE,4BAKI,4BACI,6BAEI,sBACA,2BACI,8BACE,6BACA,YACF,iBACA,8BACE,6BACA,aACF,iBACJ,iBAEJ,iBACJ,iBACA,8BACI,2BAEI,0BAAI,yBAAG,aACL,8BACA,aACA,8BACF,iBAAI,iBACJ,0BAAI,aAAwC,8BAA6D,iBAE7G,iBACJ,iBACJ,kB,6BAtBkB,0DAIA,8DASC,kEAEL,6DAGE,mF,yBA0BI,yBACI,4BACE,wBAAG,YAAY,iBACjB,iBACA,4BACE,wBAAG,YAAe,iBACpB,iBACA,4BACE,wBAAG,YAAc,iBACnB,iBACJ,kB,uBARS,2CAGA,8CAGA,8C,mDAMb,6BACI,6CAAqB,uGAAoC,iBAC7D,kB,kGApCZ,6BAEI,4BAEI,+BACI,4BACI,yBACC,4BACI,6BAA2C,gBAAM,6BACrD,iBACA,4BACK,8BACJ,iBACD,6BACG,8BACF,iBACF,iBACJ,iBAEA,6BACI,gC,wBAWJ,iBACJ,iBACA,8BACI,gCAGJ,iBACJ,iBACJ,kB,8BAnBoC,iJAclB,6D,yBAnCtB,6BACI,gCAwCJ,kB,6BAxCuC,2CDtCnD,iBAsBI,WAAmByE,EAAkCu3B,EAAuBn3B,EAAiCmnC,GAA1F,KAAAvnC,UAAkC,KAAAu3B,QAAwD,KAAAgQ,YAf7G,KAAA9oC,QAAkB,KAElB,KAAAqf,UAAoB,GAEpB,KAAA8Z,KAAY,CACRC,MAAO,EACP/6B,WAAY,EACZD,SAAU,GACVwmB,QAAS,IAQTp3B,KAAKi4B,QAAU9jB,EAAY8jB,UAC3Bj4B,KAAKk4B,aAAel4B,KAAKi4B,SAAW9jB,EAAY+jB,eAChDl4B,KAAKm4B,cAAgBn4B,KAAKi4B,SAAWj4B,KAAKk4B,cAAgB/jB,EAAYikB,gB,OAG1E,YAAA54B,SAAA,WACIQ,KAAK6xB,UAAY7xB,KAAKsrC,MAAMa,SAASr7B,OAAY,IAEjD9Q,KAAKm5C,aAAa,IAGtB,YAAAvmC,YAAA,aAGA,YAAAsqC,mBAAA,SAAmBC,GACf,OAAOA,EAAKxb,QAAQ,KAAM,OAG9B,YAAAyb,wBAAA,SAAwBryB,GACpB,OAAO9a,KAAKC,UAAU6a,IAG1B,YAAAouB,aAAA,SAAatoC,GAAb,WACI7Q,KAAKwS,QAAU,KAEfxS,KAAK+T,QAAQge,iBAAiB/xB,KAAK6xB,UAAW7xB,KAAK2rC,KAAK/6B,SAAUC,GAAYgE,MAAK,SAAA4C,GAC/E,EAAKwkC,IAAMxkC,EAEX,EAAKk0B,KAAO,EAAKsQ,IAAI8G,gBACtB3tC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCArD3CxI,GAAoB,mJ,iCAApBA,EAAoB,slDCfjC,4BACI,4BACA,6BAEA,4BACI,8BAEI,4BACI,yBACI,4BACJ,iBACJ,iBACA,+BAmCA,8BA0CR,iBACJ,kB,MArFc,oDAOI,0CAmCA,sE,qgBDrClB,GAKa,EAAAA,wB,+DAAAA,EAAoB,E,KALhC,EAAAsC,U,MAAU,CACPC,SAAU,MACVC,YAAa,2BACbC,UAAW,CAAC,sB,yOEbhB,WAEA,GADA,MACA,QAKA,GAHA,MAGA,QASA,GAFA,OAEA,Q,GAEA,M,gKCEoB,6BACE,6BACF,kB,mDAkBA,6BACE,2BAAyD,mHAAuC,6BAAoD,iBACtJ,kB,mDAdN,4BACE,4BACE,4BACE,6BACE,+BAAwC,+FAAwB,mFAAhE,iBACA,8BACE,gCAA8C,yFAC5C,yBAEF,iBACF,iBACF,iBACA,+BAIF,iBACF,iBACF,iB,gCAdyE,8CAAkB,mCAEhB,+DAM/D,2E,mDAeJ,6BAEE,6BAA+B,gHAC7B,6BACE,2BAA6F,uH,uBAAiF,iBAC9K,4BAAqF,YAA0E,iBACjK,iBACF,iBACF,iB,0BAJyI,8EAC9C,6G,yBAVvG,4BACE,4BACE,6BACM,6BAEE,+BAUN,iBACF,iBACF,iBACF,kB,6BAbkC,+C,mDAepC,4BACE,4BAIE,uCAKE,iGAA0B,wFAA1B,CAA0B,wFAA1B,CAA0B,2FAI3B,iBACH,iBACF,iB,gCAVM,2CAAa,iCAAb,CAAa,oBAAb,CAAa,4C,mDAuBjB,6BAEE,0BACI,0BAAK,4BAAO,6BAAoE,iBAAQ,iBACxF,0BACA,6BACE,+BAA0D,+GAAiC,2FAA3F,iBACF,iBACF,iBACF,iBACA,0BACI,0BAAK,6BAAO,8BAAqE,iBAAQ,iBACzF,2BACA,8BACE,gCAA2D,gHAAkC,2FAA7F,iBACF,iBACF,iBACF,iBAEF,iB,gCAbkE,6DAQC,+DD3F7E,IAGA,aAwHI,WAAoB4N,EAAsC8lC,EAAgC9qC,EAAqCnE,EACnHu3B,EAA+BlG,EAAwBnxB,GAD/C,KAAAiJ,eAAsC,KAAA8lC,aAAgC,KAAA9qC,cAAqC,KAAAnE,UACnH,KAAAu3B,QAA+B,KAAAlG,SAAwB,KAAAnxB,WAlHnE,KAAA4/B,WAGI,CAAEoP,UAAW,KAAMC,SAAU,MAEjC,KAAApmB,KAAmB,CACfqmB,OAAQ,EACRC,KAAM,GAKV,KAAAC,oBAA8B,EAO9B,KAAAp+C,KAAoB,GAKpB,KAAA2f,KAAe,GAKf,KAAA4Y,KAAex9B,KAAK88B,KAAKqmB,OAKzB,KAAApsB,QAAkB,KAElB,KAAAre,QAAgB,KAehB,KAAA+kB,QAAkB,EAUlB,KAAAzB,QAAkB,EAEX,KAAAsnB,0BAAoC,EAE3C,KAAAC,aAAyB,GAOzB,KAAAroB,WAAoB,CAChB,CACI1E,KAAM,YACNnjB,MAAO,YACP9R,GAAI,eACJ45B,OAAQ,uCACRC,IAAK,4BACLC,UAAU,IAalB,KAAAmoB,oBAA8B,EAE9B,KAAAC,mBAA6B,EAY7B,KAAAxoC,IAAqB,K,OAUrB,YAAAzb,SAAA,sBACIQ,KAAKm4C,cAAgBn4C,KAAKsrC,MAAMx6B,OAAOgJ,WAAU,SAAAhJ,GAC7C,IAAI4yC,EAAe5yC,EAAqB,aACpCwY,EAAoBxY,EAA0B,kBAClD,EAAK2yC,kBAAoB3yC,EAA0B,kBACnD,EAAK6yC,cAAgB,EAAKrY,MAAMa,SAAW,EAAKb,MAAMa,SAASr7B,OAAsB,cAAI,KAEzF,EAAKimB,QAAUjmB,EAAgB,QAC/B,EAAKwmB,mBAEDosB,GAAgBp6B,GAAqB,EAAKyN,SAC1C,EAAKhjB,QAAQsI,aAAaqnC,EAAcp6B,GAAmBzU,MAAK,SAAA+uC,GAC5D,EAAKx+C,QAAQ,CAACw+C,IACd,EAAKjkC,OAAOikC,EAAQ,SACrBxuC,OAAM,SAACC,GACN,EAAKC,MAAMD,UAM3B,YAAAzC,YAAA,WACI5S,KAAKkY,YAAYvY,UACjBK,KAAKm4C,cAAcvgC,eAGvB,YAAAnF,gBAAA,sBACU/R,EAAQV,KAAKk7B,WAAW,GAE9Bl7B,KAAKH,IAAM,IAAI,EAAAgkD,IAAI,CACfC,UAAW,MACXpwC,MAAO,CACHooB,QAAS,EACTtF,KAAM91B,EAAM81B,KACZutB,SAAU,CACN,wBAAwB,GAE5BC,QAAS,CACLC,OAAQ,CACJ5iD,KAAM,SACN+5B,IAAK16B,EAAM06B,IACX8oB,SAAU,MAGlB/oB,OAAQz6B,EAAMy6B,OACdgpB,OAAQ1kD,OAAOutC,SAASoX,SAAW,KAAO3kD,OAAOutC,SAASuI,KAAOvlC,IAAM,kCACvE7Q,OAAQ,CACJ,CACIoC,GAAIb,EAAMa,GACVF,KAAM,SACN6D,OAAQ,YAKpBsB,KAAM,EACN69C,oBAAoB,EACpBn+C,OAAQ,EAAE,UAAW,aAGzBlG,KAAKH,IAAIK,GAAG,QAAQ,WAChB,EAAKokD,aAGLtkD,KAAKX,mBACLW,KAAKH,IAAIsE,WAAWnE,KAAKX,oBAIjC,YAAAuC,WAAA,SAAW47B,GACPx9B,KAAKw9B,KAAOA,EAERx9B,KAAKw9B,OAASx9B,KAAK88B,KAAKqmB,SACxBnjD,KAAKy9B,QAAS,GAGlBz9B,KAAKkY,YAAYvY,SAAQ,GAEzBK,KAAKib,IAAM,MAGf,YAAAspC,aAAA,SAAaniD,GACTpC,KAAKy9B,OAASr7B,GAGlB,YAAAk1B,iBAAA,WACwB,MAAhBt3B,KAAK+2B,UACL/2B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAMpb,KAAK+2B,UACxC/2B,KAAKsjD,0BAA2B,IAIxC,YAAAgB,QAAA,sBAoBI,GAnBAtkD,KAAKH,IAAIK,GAAG,cAAc,WACtB,EAAKD,eAGTD,KAAKC,YAGLD,KAAKH,IAAIsE,WAAW,IAAI,EAAAqgD,kBAAkB,CAAEC,gBAAgB,KAC5DzkD,KAAKH,IAAIsE,WAAW,IAAI,EAAAugD,mBAAmB,CAAEC,SAAS,IAAS,gBAE/D3kD,KAAKH,IAAIK,GAAG,QAAS,mBAAmB,SAACiT,GACrC,EAAKyxC,oBAAoBzxC,MAG7BnT,KAAKH,IAAIK,GAAG,QAAS,oBAAoB,SAACiT,GACtC,EAAKyxC,oBAAoBzxC,MAIzBnT,KAAKiF,KAAM,CACX,IAAI4/C,EAAK,CAAExjD,KAAM,oBAAqBC,SAAUtB,KAAKiF,MAC9CjF,KAAKH,IAAIqE,UAAU,YAAakB,QAAQy/C,GAE/C7kD,KAAK8kD,cAAc9kD,KAAKiF,KAAK,GAAI,MAGrCjF,KAAK+kD,wBAGT,YAAAA,qBAAA,WACQ/kD,KAAKotC,SACLptC,KAAKglD,eAAehlD,KAAKotC,QAAQ3rC,WAAW8rC,MAIpD,YAAA0X,qBAAA,WACQjlD,KAAKotC,SACLptC,KAAKklD,kBAAkBllD,KAAKotC,QAAQ3rC,WAAW8rC,MAIvD,YAAAqX,oBAAA,SAAoBzxC,GAChB,IAAKnT,KAAKy9B,QAA4B,MAAlBtqB,EAAM7R,UAAoB6R,EAAM7R,SAASU,OAAS,EAAG,CACrE,IAAMuD,EAAU4N,EAAM7R,SAAS,GAEA,MAA3BiE,EAAQ9D,WAAWuM,MAAiC,MAAhBhO,KAAKotC,SAAmBptC,KAAKotC,QAAQ3rC,WAAWuM,OAASzI,EAAQ9D,WAAWuM,MAChHhO,KAAK2f,OAAOpa,EAAS,QAKjC,YAAA4/C,cAAA,WAC8B,MAAtBnlD,KAAK2jD,eAAyB3jD,KAAK2jD,cAAc3hD,QAAU,EAG/C,OAFFhC,KAAK2jD,cAAc7e,UAAU,EAAG,IAGtC9kC,KAAKolC,OAAOQ,SAAS,CAAC,8BAG1B5lC,KAAK4B,WAAW5B,KAAK88B,KAAKqmB,QAG9BnjD,KAAK+kD,wBAGT,YAAAK,cAAA,SAAcnnB,GAAd,WAEIj+B,KAAKkY,YAAY/X,YAEb89B,EAAUC,gBACgB,MAAtBl+B,KAAK2jD,eAAyB3jD,KAAK2jD,cAAc3hD,QAAU,GAA4C,OAAvChC,KAAK2jD,cAAc7e,UAAU,EAAG,IAChG9kC,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAA67B,sBAAuB,CAAE96B,UAAU,EAAMc,MAAO,0BAEzFrrB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKiU,SAASsL,OAAO,4CACvDvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKiU,SAASsL,OAAO,uCAE1Dvf,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,WACxC,EAAKsrB,OAAOQ,SAAS,CAAC,4BAA6B3H,EAAUqnB,uBAGjEtlD,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAAET,UAAU,EAAMc,MAAO,0BAEzFrrB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKiU,SAASsL,OAAO,4CACvDvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKiU,SAASsL,OAAO,uCAC1Dvf,KAAKkU,WAAWuW,QAAQkb,WAAa3lC,KAAKiU,SAASsL,OAAO,0CAE1Dvf,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,WACxC,EAAKsrB,OAAOQ,SAAS,CAAC,4BAA6B3H,EAAUqnB,qBAEjEtlD,KAAKkU,WAAWuW,QAAQ9S,SAASmC,WAAU,WACvC,EAAKlY,WAAW,EAAKk7B,KAAKqmB,aAIlCnjD,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAA67B,sBAAuB,CAAE96B,UAAU,EAAMc,MAAO,0BAEzFrrB,KAAKkU,WAAWuW,QAAQjY,QAAUxS,KAAKiU,SAASsL,OAAO,mCACvDvf,KAAKkU,WAAWuW,QAAQQ,WAAajrB,KAAKiU,SAASsL,OAAO,0CAE1Dvf,KAAKkU,WAAWuW,QAAQS,UAAUpR,WAAU,WACxC,EAAKqrC,qBAKjB,YAAAllD,UAAA,sBACUiF,EAAS,WAEflF,KAAKH,IAAImF,UAAUE,EAAQ,CACvB7D,KAAM,UACN4D,KAAM,CACF5D,KAAM,oBACNC,SAAU,MAKlBtB,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,WACb7D,KAAM,OACN6D,OAAQA,EACRC,OAAQ,GACRlB,MAAO,CACH,aAtVM,UAuVN,eAAgB,GAChB,qBAAsB,SAE1BX,OAAQ,CAAC,MACL,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,MAKxEtD,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,UACb7D,KAAM,SACN6D,OAAQA,EACRjB,MAAO,CACH,gBAAiB,GACjB,eAtWM,UAuWN,sBAAuB,EACvB,sBAAuB,WAE3BX,OAAQ,CAAC,MACL,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,MAsCnEtD,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,SACbA,OAAQA,EACR7D,KAAM,SACN4C,MAAO,CACH,aAAc,QACd,kBAAmB,OACnB,kBAAmB,GAEvBkB,OAAQ,CACJ,aAAc,CAAC,MAAO,iBAAkB,CAAC,MAAO,iBAChD,YAAa,CAAC,mBACd,cAAe,CAAC,EAAG,IACnB,cAAe,MACf,YAAa,MAIrBnF,KAAKujD,aAAa19C,SAAQ,SAAAy2B,GACtB,EAAK0oB,eAAe1oB,OAI5B,YAAAipB,mBAAA,SAAmB7kD,GAGfV,KAAKk7B,WAAWr1B,SAAQ,SAAA2/C,GACpBA,EAAUnqB,UAAW,KAGzB36B,EAAM26B,UAAW,EAEjBr7B,KAAKH,IAAI4lD,SAAS,CACd3pB,QAAS,EACTtF,KAAM91B,EAAM81B,KACZutB,SAAU,CACN,wBAAwB,GAE5BC,QAAS,CACLC,OAAQ,CACJ5iD,KAAM,SACN+5B,IAAK16B,EAAM06B,IACX8oB,SAAU,MAGlB/oB,OAAQz6B,EAAMy6B,OACdgpB,OAAQ1kD,OAAOutC,SAASoX,SAAW,KAAO3kD,OAAOutC,SAASuI,KAAOvlC,IAAM,kCACvE7Q,OAAQ,CACJ,CACIoC,GAAIb,EAAMa,GACVF,KAAM,SACN6D,OAAQ,cAOxB,YAAA0qB,OAAA,sBACI5vB,KAAKkY,YAAYvY,SAAQ,GACzBK,KAAKgjD,WAAWpzB,OAAO5vB,KAAK4kB,KAAM5kB,KAAK+2B,SAASliB,MAAK,SAAA5P,GAC1C,EAAKpF,IAAIqE,UAAU,YAAakB,QAAQH,GAE/C,EAAKG,QAAQH,EAAK3D,aACnB8T,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAyvC,cAAA,SAActmC,EAAiBrL,GAA/B,WACiB,MAATA,GACAA,EAAM2W,kBAGV9pB,KAAKwjD,oBAAqB,EAG1BxjD,KAAK0lD,MAAQ94B,YAAW,WACpB,IAAK,EAAK42B,oBACFhlC,GAAyB,MAAjBA,EAAK9c,SAAkB,CAC/B,IAAMikD,EAAS,UAAKnnC,GAEhB3X,EAAU,GACV++C,EAAU,GAGa,UAAvBpnC,EAAK9c,SAASL,MAA2C,eAAvBmd,EAAK9c,SAASL,OAChDwF,EAAU,IACV++C,EAAU,IAGd,EAAK/lD,IAAI+G,UAAU++C,EAAQ,CAAE9+C,QAASA,EAASoM,SAAS,EAAM2yC,QAASA,OAhBrE,MAsBlB,YAAAjmC,OAAA,SAAOnB,EAAiBrL,GAAxB,WASiB,MAATA,GACAA,EAAM2W,kBAGV9pB,KAAK+T,QAAQ8b,kBAAkB,CAACrR,EAAK/c,WAAWJ,MAAO,MAAMwT,MAAK,SAAAC,GAC9D,EAAKzT,KAAOyT,EAAM,GAClB,EAAKs4B,QAAU5uB,EACf,EAAKgf,KAAO,EAAKV,KAAKsmB,KAEtB,EAAKlrC,YAAYtY,WAAW,EAAKC,IAAK,EAAKwB,KAAKvB,cAAe,EAAK29B,QACpE,EAAKvlB,YAAYtS,wBAclBwP,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAjQ,QAAA,SAAQH,GACJjF,KAAKiF,KAAOA,GAGhB,YAAA4gD,qBAAA,SAAqBnlD,GACbA,EAAMs7B,OACNh8B,KAAKglD,eAAetkD,EAAMc,KAE1BxB,KAAKklD,kBAAkBxkD,EAAMc,MAIrC,YAAA0jD,kBAAA,SAAkBhgD,GACd,IAAMmiB,EAAQrnB,KAAKujD,aAAanwC,QAAQlO,IAEzB,IAAXmiB,IACArnB,KAAKH,IAAI4E,YAAYS,EAAS,WAC9BlF,KAAKH,IAAI4E,YAAYS,EAAS,YAC9BlF,KAAKH,IAAI4E,YAAYS,EAAS,UAC9BlF,KAAKH,IAAIwE,aAAaa,GAEtBlF,KAAKujD,aAAazgD,OAAOukB,EAAO,KAIxC,YAAA29B,eAAA,SAAe9/C,GAGX,IAAe,IAFDlF,KAAKujD,aAAanwC,QAAQlO,GAEtB,CACd,IAEIk/C,EAAW3kD,OAAOutC,SAASoX,SAC3B7O,EAAO91C,OAAOutC,SAASuI,KAE3Bv1C,KAAKH,IAAImF,UAAUE,EAAQ,CACvB7D,KAAM,SACNykD,MAAO,CAAC1B,EAAW,KAAO7O,EAAOvlC,IAAM,8CAAgD8qC,mBAAmB7qC,KAAKC,UAAU,CAAE1O,IAAK0D,QAIpIlF,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,UACb7D,KAAM,SACN6D,OAAQA,EACR,eAAgB,UAChBjB,MAAO,CACH,gBAAiB,GACjB,eAtkBG,UAukBH,sBAAuB,EACvB,sBAAuB,WAE3BX,OAAQ,CAAC,MACL,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,KAvBjD,oBA4BlBtD,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,WACb7D,KAAM,OACN6D,OAAQA,EACR,eAAgB,UAChBC,OAAQ,GACRlB,MAAO,CACH,aAvlBG,UAwlBH,eAAgB,GAChB,qBAAsB,SAE1BX,OAAQ,CAAC,MACL,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,KAxCtD,oBA6ClBtD,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,SACbA,OAAQA,EACR,eAAgB,UAChB7D,KAAM,SACN4C,MAAO,CACH,aAAc,QACd,kBAAmB,OACnB,kBAAmB,GAEvBkB,OAAQ,CACJ,aAAc,CAAC,OACX,CAAC,MAAO,gBAAkB4gD,UAAUz2B,SAAS3G,eAC7C,CAAC,WAAY,CAAC,SAAU,CAAC,MAAO,gBAAkBo9B,UAAUz2B,SAAS3G,gBAAiB,CAAC,SAAU,CAAC,MAAO,kBACzG,CAAC,SAAU,CAAC,MAAO,kBAEvB,YAAa,CAAC,mBACd,cAAe,CAAC,EAAG,IACnB,cAAe,MACf,YAAa,KAhEH,oBAoElB3oB,KAAKujD,aAAaxgD,KAAKmC,KA0C/B,YAAAoQ,MAAA,SAAMD,GACFrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCA5pBtDpQ,GAAwB,uQ,iCAAxBA,EAAwB,yD,GAAA,K,sxEC9BrC,4BACE,4BACA,6BAGA,4BAEE,4BACE,4BACE,0BACE,4BACE,4BAEE,4BACE,6BACE,6BACE,8BAAiC,6BAA0F,iBAE3H,oCAAY,8DAAmB,4BAA4C,EAAAwqB,sBACyH,iBACpM,+BAGF,iBACF,iBACF,iBAGA,gCAmBF,iBACF,iBAEA,gCAmBF,iBACA,gCAiBF,iBAEA,8BACE,6BAEE,kCACE,sCAAa,+CAAe,EAAAuuB,qBAAA,MAA8B,iBAC5D,iBAEA,yBAGA,iCAqBF,iBACF,iBACF,iBACF,iBACF,kB,MA1GgC,gDAAmB,sBAAnB,CAAmB,uDAAnB,CAAmB,mBAAnB,CAAmB,sBAAnB,CAAmB,cAAnB,CAAmB,mEAAnB,CAAmB,qBAEzB,+DAQN,yDAsBS,2DAoBf,0EA6BE,4H,glDD1EhB,GAKa,EAAA/4C,4B,+DAAAA,EAAwB,E,KALpC,EAAAqC,U,MAAU,CACPC,SAAU,mBACVC,YAAa,oCACbC,UAAW,CAAC,+B,yLAgHoBjQ,kBAAmB,CAAF,C,KAAhD,EAAAod,U,MAAU,0B,sHE5If,WAEA,GADA,MACA,O,+DCcoC,0BACI,+BAAkD,mFAAlD,iBAA0H,YAI9H,kB,uBAJ2B,iDAAmG,6D,yBAJtI,6BACI,yBAAI,YAA8B,iBAClC,4BACI,8BAMJ,iBACJ,kB,uCATQ,mDAEwB,wD,yBAJpC,0BACI,+BAWJ,kB,2CAXU,oEDNlC,iBAgBI,WAAmBvI,GAAA,KAAAA,a,OAEnB,YAAA1U,SAAA,WACIQ,KAAKuX,SAAW,IAAI,EAAA7F,SAGxB,YAAAs0C,sBAAA,SAAsB7pB,GAClB,IAAI8pB,GAAa,EAOjB,OANAjmD,KAAKs7B,mBAAmBz1B,SAAQ,SAAAw2B,GACxBA,EAAY76B,MAAQ26B,GAASE,EAAYT,cAAc55B,OAAS,IAChEikD,GAAa,MAIdA,GAGX,YAAA5a,QAAA,WACIrrC,KAAKuX,SAAStF,KAAKjS,KAAKs7B,oBACxBt7B,KAAKkU,WAAWwD,Q,iCA9BX1K,GAA0B,oC,iCAA1BA,EAA0B,mqBCZvC,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,6BACI,+BACI,4BACI,4BACI,4BACI,8BAaJ,iBACJ,iBACJ,iBAEA,6BACI,6BACI,6BACI,gCAAsB,wCAAS,EAAAkH,WAAA,UAE3B,4BACI,8BACJ,iBACJ,iBACA,iCAAsB,wCAAS,EAAAm3B,aAC3B,4BACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MApCqD,8D,i7CDLrD,GAKa,EAAAr+B,8B,+DAAAA,EAA0B,E,KALtC,EAAAmC,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,CAAC,+B,2KEVhB,WAIA,GAHA,MAEA,MACA,QAMA,GAFA,OACA,OACA,Q,GAEA,M,2HCCc,yBAAiB,YAA6B,kB,8BAA7B,iE,mDALzB,4BACE,4BACE,4BAEE,6BACE,8BACA,yBAAI,6BAAuD,YAAyB,iBACtF,iBAEA,uCAOE,0GAAuC,4FAAvC,CAAuC,wFAAvC,CAAuC,wFAAvC,CAAuC,2FAKxC,iBACH,iBACF,iBACF,iB,gCAnBa,2CACsD,qEAI3D,2CAAa,cAAb,CAAa,oBAAb,CAAa,wBAAb,CAAa,sBAAb,CAAa,oC,qBAwBb,sB,mDACA,6BAEE,8BAAM,kGACJ,gCACE,6BACF,iBACF,iBACF,kB,mDAVF,6BAAqE,kGAA+B,IAA/B,CAAoC,qFAAgC,KAEvI,6BACA,+BASF,iB,gCAVgC,sDACxB,sD,iFDxBpB,aAgEI,WAAoB0zC,EAA+B9qC,EAAqCnE,EAAkCmJ,EAAsCouB,EAC5Jn3B,EAAkCF,EAAuCG,EAAkCgxB,GAD3F,KAAA4d,aAA+B,KAAA9qC,cAAqC,KAAAnE,UAAkC,KAAAmJ,eAAsC,KAAAouB,QAC1H,KAAAr3B,WAAuC,KAAAG,cAAkC,KAAAgxB,SA1D/G,KAAAyO,WAGI,CAAEoP,UAAW,KAAMC,SAAU,MAEjC,KAAApmB,KAAO,CACHC,SAAU,WACVC,WAAY,aACZC,UAAW,aAGf,KAAAipB,gBAA0B,EAG1B,KAAAnmD,UAAoB,EACpB,KAAAomD,UAAoB,EACpB,KAAA1oB,QAAkB,EAYlB,KAAA8lB,aAAyB,GAKzB,KAAAroB,WAAoB,CAChB,CACI1E,KAAM,YACNnjB,MAAO,YACP9R,GAAI,eACJ45B,OAAQ,uCACRC,IAAK,4BACLC,UAAU,IAWlB,KAAAmC,KAAe,KAEf,KAAA9kB,QAAgB,IAAIpE,KAMhBtU,KAAKk4B,aAAe/jB,EAAY8jB,WAAa9jB,EAAY+jB,e,OAG7D,YAAA14B,SAAA,sBACIQ,KAAKg+B,UAAYh+B,KAAKsrC,MAAMa,SAASr7B,OAAkB,UACvD9Q,KAAKiV,SAAWjV,KAAKsrC,MAAMa,SAASr7B,OAAiB,SACrD9Q,KAAK8X,KAAO9X,KAAKsrC,MAAMa,SAASr7B,OAAa,KAC7C9Q,KAAKD,SAAsD,SAA3CC,KAAKsrC,MAAMa,SAASr7B,OAAiB,SACrD9Q,KAAKmmD,SAAsD,SAA3CnmD,KAAKsrC,MAAMa,SAASr7B,OAAiB,SACrD9Q,KAAK2jD,cAAgB3jD,KAAKsrC,MAAMa,SAASr7B,OAAsB,cAErB,MAAtC9Q,KAAKsrC,MAAMa,SAASr7B,OAAa,OACjC9Q,KAAKgO,KAAOhO,KAAKsrC,MAAMa,SAASr7B,OAAa,MAGjD9Q,KAAK0Y,QAAU1Y,KAAKoU,YAAYgyC,sBAAsBpmD,KAAK8X,MAE3D9X,KAAK+T,QAAQ8b,kBAAkB,CAAC7vB,KAAKiV,UAAW,MAAMJ,MAAK,SAAAC,GACvD,EAAKzT,KAAOyT,EAAM,GAClB,EAAKoD,YAAYtY,WAAW,EAAKC,IAAK,EAAKwB,KAAKvB,cAAe,EAAK29B,WACrEroB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA8vC,cAAA,WACI,GAA0B,MAAtBnlD,KAAK2jD,eAAyB3jD,KAAK2jD,cAAc3hD,QAAU,GAG/C,OAFFhC,KAAK2jD,cAAc7e,UAAU,EAAG,GAExB,CACd,IAAIuhB,EAAmD,MAAvCrmD,KAAK2jD,cAAc7e,UAAU,EAAG,GAC5CtjC,EAAMxB,KAAK2jD,cAAc7e,UAAU,GAEvC9kC,KAAKolC,OAAOQ,SAAS,CAAC,wBAAyBpkC,EAAK6kD,IAI5DrmD,KAAK+kD,wBAGT,YAAAK,cAAA,SAAcnnB,GAAd,WAMI,GAJAj+B,KAAKkY,YAAY/X,YAEjBH,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAA88B,sBAAuB,CAAE/7B,UAAU,EAAMc,MAAO,0BAErF4S,EAAUC,gBAAiB,CAC3B,IAAM1rB,EAAUxS,KAAKiU,SAASsL,OAAO,6CAC/BgnC,EAAU,IAERxjD,KAAK,CACTsQ,MAAOrT,KAAKiU,SAASsL,OAAO,sCAC5BqqB,QAAS,WAAQ,EAAKub,iBACtBqB,aAAa,EACbn7B,MAAO,gBAGXk7B,EAAQxjD,KAAK,CACTsQ,MAAOrT,KAAKiU,SAASsL,OAAO,uCAC5BqqB,QAAS,WACL,EAAKxE,OAAOQ,SAAS,CAAC,4BAA6B3H,EAAUqnB,mBAEjEkB,aAAa,EACbn7B,MAAO,gBAGXk7B,EAAQxjD,KAAK,CACTsQ,MAAOrT,KAAKiU,SAASsL,OAAO,oCAC5BqqB,QAAS,aACT4c,aAAa,EACbn7B,MAAO,gBAGXrrB,KAAKkU,WAAWuW,QAAQ3T,KAAKtE,EAAS+zC,OACnC,CACH,IACMA,EADA/zC,EAAUxS,KAAKiU,SAASsL,OAAO,oCAC/BgnC,EAAU,IAERxjD,KAAK,CACTsQ,MAAOrT,KAAKiU,SAASsL,OAAO,sCAC5BqqB,QAAS,WAAQ,EAAKub,iBACtBqB,aAAa,EACbn7B,MAAO,gBAGXk7B,EAAQxjD,KAAK,CACTsQ,MAAOrT,KAAKiU,SAASsL,OAAO,oCAC5BqqB,QAAS,aACT4c,aAAa,EACbn7B,MAAO,gBAGXrrB,KAAKkU,WAAWuW,QAAQ3T,KAAKtE,EAAS+zC,KAI9C,YAAA3zC,YAAA,WACI5S,KAAKkY,YAAYvY,WAGrB,YAAA8S,gBAAA,sBACU/R,EAAQV,KAAKk7B,WAAW,GAE9Bl7B,KAAKH,IAAM,IAAI,EAAAgkD,IAAI,CACfC,UAAW,cACXpwC,MAAO,CACHooB,QAAS,EACTtF,KAAM91B,EAAM81B,KACZutB,SAAU,CACN,wBAAwB,GAE5BC,QAAS,CACL,mBAAoB,CAChB3iD,KAAM,SACN+5B,IAAK16B,EAAM06B,IACX8oB,SAAU,MAGlB/oB,OAAQz6B,EAAMy6B,OACdgpB,OAAQ1kD,OAAOutC,SAASoX,SAAW,KAAO3kD,OAAOutC,SAASuI,KAAOvlC,IAAM,kCACvE7Q,OAAQ,IAQZqH,KAAM,EACN69C,oBAAoB,EACpBn+C,OAAQ,EAAE,UAAW,aAGzBlG,KAAKH,IAAIK,GAAG,QAAQ,WAChB,EAAKokD,cAIb,YAAAC,aAAA,SAAaniD,GACTpC,KAAKy9B,OAASr7B,EACdpC,KAAKkY,YAAYvY,SAAQ,IAG7B,YAAA2kD,QAAA,sBACsB,YAAdtkD,KAAKgO,MACLhO,KAAK+T,QAAQqd,yBAAyBpxB,KAAKgO,KAAMhO,KAAKiV,SAAUjV,KAAK8X,MAAMjD,MAAK,SAAA8wC,GAC5E,GAAIA,EAAQ,CACR,IAAIc,EAAM,IAAI,EAAA1gD,aAAa,CAAC4/C,EAAO,GAAIA,EAAO,IAAK,CAACA,EAAO,GAAIA,EAAO,KAElE9+C,EAAU,GACV++C,EAAU,GAGiB,UAA3B,EAAKvkD,KAAKvB,cAAuD,eAA3B,EAAKuB,KAAKvB,eAChD+G,EAAU,IACV++C,EAAU,IAGd,EAAK/lD,IAAI+G,UAAU6/C,EAAK,CAAE5/C,QAASA,EAASoM,SAAS,EAAO2yC,QAASA,QAKjF5lD,KAAKH,IAAIK,GAAG,cAAc,WACtB,EAAKD,eAGTD,KAAKC,YAGLD,KAAKH,IAAIsE,WAAW,IAAI,EAAAqgD,kBAAkB,CAAEC,gBAAgB,KAC5DzkD,KAAKH,IAAIsE,WAAW,IAAI,EAAAugD,mBAAmB,CAAEC,SAAS,IAAS,gBAE/D3kD,KAAKH,IAAIK,GAAG,QAASF,KAAKg+B,UAAY,WAAW,SAAC7qB,GAC9C,EAAKyxC,oBAAoBzxC,MAG7BnT,KAAKH,IAAIK,GAAG,QAASF,KAAKg+B,UAAY,YAAY,SAAC7qB,GAC/C,EAAKyxC,oBAAoBzxC,MAG7BnT,KAAK+kD,wBAGT,YAAAA,qBAAA,WACI/kD,KAAKglD,eAAehlD,KAAKg+B,YAG7B,YAAAinB,qBAAA,WACIjlD,KAAKklD,kBAAkBllD,KAAKg+B,YAGhC,YAAA/9B,UAAA,sBACID,KAAKH,IAAI4C,SAAS,CACdpB,KAAM,SACNE,GAAI,gBACJ2D,OAAQ,qBAGZlF,KAAKujD,aAAa19C,SAAQ,SAAA6gD,GACtB,EAAK1B,eAAe0B,OAI5B,YAAAnB,mBAAA,SAAmB7kD,GACE,gBAAbA,EAAMa,GACNvB,KAAKH,IAAI4lD,SAAS/kD,EAAM06B,KACJ,iBAAb16B,EAAMa,IACbvB,KAAKH,IAAI4lD,SAAS,CACd3pB,QAAS,EACTtF,KAAM91B,EAAM81B,KACZutB,SAAU,CACN,wBAAwB,GAE5BC,QAAS,CACL,mBAAoB,CAChB3iD,KAAM,SACN+5B,IAAK16B,EAAM06B,IACX8oB,SAAU,MAGlB/oB,OAAQz6B,EAAMy6B,OACdgpB,OAAQ1kD,OAAOutC,SAASoX,SAAW,KAAO3kD,OAAOutC,SAASuI,KAAOvlC,IAAM,kCACvE7Q,OAAQ,CACJ,CACIoC,GAAIb,EAAMa,GACVF,KAAM,SACN6D,OAAQ,wBAO5B,YAAA2gD,qBAAA,SAAqBnlD,GACbA,EAAMs7B,OACNh8B,KAAKglD,eAAetkD,EAAMc,KAE1BxB,KAAKklD,kBAAkBxkD,EAAMc,MAIrC,YAAA0jD,kBAAA,SAAkBhgD,GACd,IAAMmiB,EAAQrnB,KAAKujD,aAAanwC,QAAQlO,IAEzB,IAAXmiB,IACArnB,KAAKH,IAAI4E,YAAYS,EAAS,WAC9BlF,KAAKH,IAAI4E,YAAYS,EAAS,YAC9BlF,KAAKH,IAAI4E,YAAYS,EAAS,oBAC9BlF,KAAKH,IAAI4E,YAAYS,EAAS,qBAC9BlF,KAAKH,IAAI4E,YAAYS,EAAS,UAC9BlF,KAAKH,IAAIwE,aAAaa,GAEtBlF,KAAKujD,aAAazgD,OAAOukB,EAAO,KAIxC,YAAA29B,eAAA,SAAe9/C,GAGX,IAAe,IAFDlF,KAAKujD,aAAanwC,QAAQlO,GAEtB,CACd,IAAMyhD,EAAazhD,IAAWlF,KAAKg+B,UAAah+B,KAAKg+B,UAAY,UAAY,KAEzEomB,EAAW3kD,OAAOutC,SAASoX,SAC3B7O,EAAO91C,OAAOutC,SAASuI,KAE3Bv1C,KAAKH,IAAImF,UAAUE,EAAQ,CACvB7D,KAAM,SACNykD,MAAO,CAAC1B,EAAW,KAAO7O,EAAOvlC,IAAM,8CAAgD8qC,mBAAmB7qC,KAAKC,UAAU,CAAE1O,IAAK0D,QAIpIlF,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,UACb7D,KAAM,SACN6D,OAAQA,EACR,eAAgB,UAChBjB,MAAO,CACH,gBAAiB,GACjB,eA5VE,UA6VF,sBAAuB,EACvB,sBAAuB,WAE3BX,OAAQ,CAAC,MACL,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,KAEhEqjD,GAGH3mD,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,WACb7D,KAAM,OACN6D,OAAQA,EACR,eAAgB,UAChBC,OAAQ,GACRlB,MAAO,CACH,aA7WE,UA8WF,eAAgB,GAChB,qBAAsB,SAE1BX,OAAQ,CAAC,MACL,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,KAErEqjD,GAGCzhD,IAAWlF,KAAKg+B,YAChBh+B,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,mBACb7D,KAAM,SACN6D,OAAQA,EACR,eAAgB,UAChBjB,MAAO,CACH,gBAAiB,GACjB,eA9XD,UA+XC,sBAAuB,EACvB,sBAAuB,WAE3BX,OAAQ,CAAC,MACL,CAAC,KAAM,CAAC,MAAO,QAAsB,MAAbtD,KAAKgO,KAAehO,KAAKgO,KAAO,IACxD,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,KAEhE24C,GAEH3mD,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,oBACb7D,KAAM,OACN6D,OAAQA,EACR,eAAgB,UAChBC,OAAQ,GACRlB,MAAO,CACH,aA/YD,UAgZC,eAAgB,GAChB,qBAAsB,SAE1BX,OAAQ,CAAC,MACL,CAAC,KAAM,CAAC,MAAO,QAAsB,MAAbtD,KAAKgO,KAAehO,KAAKgO,KAAO,IACxD,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,KAErE24C,IAIP3mD,KAAKH,IAAI4C,SAAS,CACdlB,GAAI2D,EAAS,SACbA,OAAQA,EACR,eAAgB,UAChB7D,KAAM,SACN4C,MAAO,CACH,aAAc,QACd,kBAAmB,OACnB,kBAAmB,GAEvBkB,OAAQ,CACJ,aAAc,CAAC,OACX,CAAC,MAAO,gBAAkB4gD,UAAUz2B,SAAS3G,eAC7C,CAAC,WAAY,CAAC,SAAU,CAAC,MAAO,gBAAkBo9B,UAAUz2B,SAAS3G,gBAAiB,CAAC,SAAU,CAAC,MAAO,kBACzG,CAAC,SAAU,CAAC,MAAO,kBAEvB,YAAa,CAAC,mBACd,cAAe,CAAC,EAAG,IACnB,cAAe,MACf,YAAa,KAElBg+B,GAEH3mD,KAAKujD,aAAaxgD,KAAKmC,KAI/B,YAAA0hD,gBAAA,WAEI5mD,KAAKilD,uBACLjlD,KAAK+kD,wBAGT,YAAAH,oBAAA,SAAoBzxC,GAChB,IAAKnT,KAAKy9B,QAA4B,MAAlBtqB,EAAM7R,UAAoB6R,EAAM7R,SAASU,OAAS,EAAG,CACrE,IAAMuD,EAAU4N,EAAM7R,SAAS,GAEA,MAA3BiE,EAAQ9D,WAAWuM,MAAgBhO,KAAKgO,OAASzI,EAAQ9D,WAAWuM,OACpEhO,KAAKgO,KAAOzI,EAAQ9D,WAAWuM,KAG/BhO,KAAKH,IAAIgnD,UAAU7mD,KAAKg+B,UAAY,mBAAoB,CAAC,MACrD,CAAC,KAAM,CAAC,MAAO,QAAsB,MAAbh+B,KAAKgO,KAAehO,KAAKgO,KAAO,IACxD,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,KAG/DhO,KAAKH,IAAIgnD,UAAU7mD,KAAKg+B,UAAY,oBAAqB,CAAC,MACtD,CAAC,KAAM,CAAC,MAAO,QAAsB,MAAbh+B,KAAKgO,KAAehO,KAAKgO,KAAO,IACxD,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,QAMhF,YAAA4sC,eAAA,WACI56C,KAAKgO,KAAO,WAGhB,YAAA6J,WAAA,SAAWC,GACP,OAAO9X,KAAKoU,YAAY2D,qBAAqBD,IAG1C,YAAAxC,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCAndtDnQ,GAA+B,6U,iCAA/BA,EAA+B,mvCCxB5C,0BACE,4BACA,6BAGA,4BAEE,4BACE,8BA0BA,4BACE,4BAEE,gCACE,oCAAa,+CAAe,EAAA84C,qBAAA,KAAf,CAA4C,sCAAoB,EAAAN,mBAAA,MAAmD,iBAEhI,+BAaF,iBAEA,wBACF,iBACF,iBACF,iBACF,iBACF,kB,MApDY,+DA0BD,wFAI0G,yEAEnG,kD,utCDrBlB,GAKa,EAAAx4C,mC,+DAAAA,EAA+B,E,KAL3C,EAAAoC,U,MAAU,CACPC,SAAU,2BACVC,YAAa,4CACbC,UAAW,CAAC,uC,qVErBhB,aACA,SAKA,SACA,SAIA,SAGA,aAeI,WAAY4R,EAAwC4lC,EAAoChzC,EAA8B4uB,EAC3GtlB,EAA6CF,EAAqC/I,GAAlF,KAAAiJ,kBAA6C,KAAAF,eAAqC,KAAA/I,cACzFnU,KAAKkhB,mBAAqBA,EAC1BlhB,KAAK8mD,iBAAmBA,EACxB9mD,KAAK8T,cAAgBA,EACrB9T,KAAK0iC,SAAWA,EAwgBxB,OArgBI,YAAAD,QAAA,WACI,OAAOziC,KAAK8T,cAAc9F,MAG9B,YAAA2Y,OAAA,SAAO/F,EAAWC,EAAWkmC,GACzB,IAAI3xB,EAAOp1B,KAAKgnD,UAGhBtnC,EAAGC,OAAO,oEAAuE3f,KAAKyiC,UAAY,MAC7F9e,QAAQ,WAAYojC,GACpBxrC,KAAK,IAAKqF,GACVrF,KAAK,IAAKsF,GAEfnB,EAAGC,OAAO,sEAAyE3f,KAAKyiC,UAAY,MAC/F9e,QAAQ,WAAYojC,GACpBxrC,KAAK,IAAKqF,GACVrF,KAAK,IAAKsF,EAAI,EAAAP,iBAAiBkD,SAAW,EAAI,GAEnD9D,EAAGC,OAAO,qEAAwE3f,KAAKyiC,UAAY,MAC9F9e,QAAQ,WAAYojC,GACpBxrC,KAAK,IAAKqF,EAAI,GACdrF,KAAK,IAAKsF,EAAI,GAEnBnB,EAAGC,OAAO,8EAAiF3f,KAAKyiC,UAAY,MACvG9e,QAAQ,WAAYojC,GACpBxrC,KAAK,IAAKqF,EAAIwU,EAAKtU,MAAQ,IAC3BvF,KAAK,IAAKsF,EAAI,IAInB,IAAIomC,EAAmBvnC,EAAGC,OAAO,2EAA8E3f,KAAKyiC,UAAY,MAAOjkB,OACvI,GAAmB,MAAfyoC,EAAqB,CACrB,IAAMC,EAAUtmC,EAAIwU,EAAKtU,MAAQ,GAC3BqmC,EAAUtmC,EAAIuU,EAAKrU,OAAS,GAC9BqmC,EAAcH,EAAYtmC,UAC9BjB,EAAGC,OAAO,2EAA8E3f,KAAKyiC,UAAY,MACpG9e,QAAQ,WAAYojC,GACpBxrC,KAAK,YAAa,cAAgB2rC,EAASE,EAAYxmC,GAAK,KAAOumC,EAASC,EAAYvmC,GAAK,KAGtG,IAAIwmC,EAAqB3nC,EAAGC,OAAO,6EAAgF3f,KAAKyiC,UAAY,MAAOjkB,OAC3I,GAAqB,MAAjB6oC,EAAuB,CACjBH,EAAUtmC,EAAIwU,EAAKtU,MAAQ,GAC3BqmC,EAAUtmC,EAAIuU,EAAKrU,OAAS,GADlC,IAEIumC,EAAgBD,EAAc1mC,UAClCjB,EAAGC,OAAO,6EAAgF3f,KAAKyiC,UAAY,MACtG9e,QAAQ,WAAYojC,GACpBxrC,KAAK,YAAa,cAAgB2rC,EAASI,EAAc1mC,GAAK,KAAOumC,EAASG,EAAczmC,GAAK,OAI9G,YAAA6F,OAAA,WACI,IAAI/G,EAASD,EAAGC,OAAO,oEAAuE3f,KAAKyiC,UAAY,MAE/G,MAAO,CAAE7hB,EAAGoD,SAASrE,EAAOpE,KAAK,MAAOsF,EAAGmD,SAASrE,EAAOpE,KAAK,QAGpE,YAAAyrC,QAAA,WACI,IAAIrnC,EAASD,EAAGC,OAAO,oEAAuE3f,KAAKyiC,UAAY,MAE/G,MAAO,CAAE7hB,EAAGoD,SAASrE,EAAOpE,KAAK,MAAOsF,EAAGmD,SAASrE,EAAOpE,KAAK,MAAQ,EAAGuF,MAAOkD,SAASrE,EAAOpE,KAAK,UAAWwF,OAAQiD,SAASrE,EAAOpE,KAAK,WAAa,IAGhK,YAAAgsC,YAAA,WACI,OAAOvnD,KAAK0iC,UAGhB,YAAA8kB,qBAAA,WACI,IAAIC,EAAoB/nC,EAAGC,OAAO,sCAClC,GAAgC,MAA5B8nC,EAAkBjpC,OAKlB,OAJAipC,EAAkBnnD,SAClBN,KAAKkhB,mBAAmBV,sBAEIinC,EAAkBlsC,KAAK,cAK3D,YAAA4pB,6BAAA,sBACQnjB,EAAOhiB,KACP0nD,EAAehoC,EAAGC,OAAO,mBAE7B,GAA2B,MAAvB+nC,EAAalpC,OAAgB,CAE7B,IAEImpC,EAFSjoC,EAAGC,OAAO,QAEOS,OAAO,KAAKuD,QAAQ,kBAAkB,GAEhE2D,EAAqBtnB,KAAK8mD,iBAAiBpjB,sBAAsB1jC,KAAKyiC,WAEpEmlB,EAAwB5nD,KAAKmU,YAAY8J,SAAWje,KAAKmU,YAAYyL,iBAAiB5f,KAAK8mD,iBAAiBtlC,cAAc3B,kBAE5HuV,EAAOp1B,KAAKgnD,UACZpmC,EAAIwU,EAAKxU,EAAIwU,EAAKtU,MAAQ,EAC1BD,EAAIuU,EAAKvU,EAAIuU,EAAKrU,OAAS,EAAI,EAS7B8mC,EAAa7nD,KAAKkhB,mBAAmB5B,SAAS,wCAC9CwoC,EAAe9nD,KAAKkhB,mBAAmB5B,SAAS,kCAChDyoC,EAA2B/nD,KAAKkhB,mBAAmB5B,SAAS,yCAC5D0oC,EAAqBhoD,KAAKkhB,mBAAmB5B,SAAS,0CACtD2oC,EAA4BjoD,KAAKkhB,mBAAmB5B,SAAS,0CAC7D4oC,EAAiBloD,KAAKkhB,mBAAmB5B,SAAS,+BAClD6oC,EAAenoD,KAAKkhB,mBAAmB5B,SAAS,6BAElD8oC,EAA4F,MAA5D1oC,EAAGC,OAAO,sCAAwCnB,OAElF6pC,EAAaT,EAAyBQ,EAA+B,EAAI,EAAK,EAG9E,EAAQ,EAAAzjC,mBAAmBkjC,EAfT,GAkBlBS,EAAc,EAAA3jC,mBAAmBojC,EAvBpB,GA0BjB,GAFA,EAAQO,EAAc,EAAQA,EAAc,EAExCF,EAA8B,CAE9B,IAAIG,EAAmB,EAAA5jC,mBAAmBsjC,EA5B7B,GA6Bb,EAAQM,EAAmB,EAAQA,EAAmB,EAG1D,GAA4B,MAAxBvoD,KAAK0iC,SAASpf,QAAsE,MAApDtjB,KAAK0iC,SAASpf,OAAOre,KAAK2c,wBAAsF,IAApD5hB,KAAK0iC,SAASpf,OAAOre,KAAK2c,uBAA8B,CACpJ,IAAI4mC,EAAiB,EAAA7jC,mBAAmBujC,EAjC3B,GAkCb,EAAQM,EAAiB,EAAQA,EAAiB,EAClDH,QACG,CAEH,GAAgC,OAD5BZ,EAAoB/nC,EAAGC,OAAO,uCACZnB,OAAgB,CAClC,IAAIiqC,EAAwBhB,EAAkBlsC,KAAK,aAC/CmtC,EAAqB1oD,KAAKkhB,mBAAmB2F,oBAAoB4hC,GAGjEE,EAAmG,MAD3E,IAAI,EAAAroC,iBAAiBtgB,KAAKkhB,mBAAoBxB,EAAGC,OAAO,QAAS+oC,GAAoB,EAAM1oD,KAAKod,gBAAiBpd,KAAKkd,aAAcld,KAAKmU,aACpHgN,cAAcnhB,KAAKyiC,WAAW8kB,cAAcjkC,OAE7F,GAA4B,MAAxBtjB,KAAK0iC,SAASpf,QAAkBqlC,EAAsB,CACtD,IAAIC,EAAe,EAAAjkC,mBAAmBwjC,EA9CjC,GA+CL,EAAQS,EAAe,EAAQA,EAAe,EAC9CP,MAQZ,GAAI/gC,EAAmBtlB,OAAS,EAC5BslB,EAAmBzhB,SAAQ,SAACgjD,GACxB,IAAIC,EAAmB,EAAK5nC,mBAAmB2F,oBAAoBgiC,GAE/DE,EAAwBD,EAAiBz1C,MAAMqV,eACvB,MAAxB,EAAKga,SAASpf,QAAkB,EAAKof,SAASpf,OAAOre,KAAK2c,yBAA2BknC,EAAiB96C,OACtG+6C,EAAwBA,EAAwB,KAAO,EAAK7nC,mBAAmB5B,SAAS,+BAAiC,KAG7H,IAAIgkB,EAAY,EAAA3e,mBAAmBokC,EAjE1B,GAmELzlB,EAAY,IACZ,EAAQA,UAGb,CACH,IAAI0lB,EAAmB,EAAArkC,mBAAmBqjC,EAxE7B,GAyEb,EAAQgB,EAAmB,EAAQA,EAAmB,EAG1D,GA3EqB,GA6ErB,IA+JYvB,EA/JRwB,EAA0B3hC,EAAmBtlB,OAAS,EAAKqmD,EAAa,EAAMA,EAAa,EAqC/F,GAlCAV,EAAiBvnC,OAAO,QACnBuD,QAAQ,uCAAuC,GAC/CpI,KAAK,IAAKqF,GACVrF,KAAK,IAAKsF,GACVtF,KAAK,KAAM,GACXA,KAAK,QAAS,GACdA,KAAK,SAxFK,IAwFe+L,EAAmBtlB,OAASinD,IACrD1tC,KAAK,OAAQ,SACbA,KAAK,eAAgB,IACrBA,KAAK,SAxFU,WA2FpBosC,EAAiBvnC,OAAO,QACnBuD,QAAQ,kCAAkC,GAC1CpI,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,KAC7BtF,KAAK,YA5FY,GA6FjBA,KAAK,cA9FS,cA+FdA,KAAK,cAAe,QACpBqJ,KAAKijC,GAEVhnC,GAvGe,GA0Gf8mC,EAAiBvnC,OAAO,QACnBuD,QAAQ,oCAAoC,GAC5CpI,KAAK,KAAMqF,GACXrF,KAAK,KAAMsF,GACXtF,KAAK,KAAMqF,EAAI,GACfrF,KAAK,KAAMsF,GACXtF,KAAK,SA7GU,WA8GfA,KAAK,eAAgB,IAGtB+L,EAAmBtlB,OAAS,EAE5B,I,eAAS2C,GACL,IAAIkkD,EAAuBvhC,EAAmB3iB,GAC1CmkD,EAAmB,EAAK5nC,mBAAmB2F,oBAAoBgiC,GAE/DE,EAAwBD,EAAiBz1C,MAAMqV,eACvB,MAAxB,EAAKga,SAASpf,QAAkB,EAAKof,SAASpf,OAAOre,KAAK2c,yBAA2BknC,EAAiB96C,OACtG+6C,EAAwBA,EAAwB,KAAO,EAAK7nC,mBAAmB5B,SAAS,+BAAiC,KAI7HqoC,EAAiBvnC,OAAO,QACnBuD,QAAQ,iCAAiC,GACzCpI,KAAK,gBAAiBstC,GACtBttC,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,GAC7BtF,KAAK,YApID,GAqIJA,KAAK,cAjIC,cAkINqJ,KAAKmkC,GACLr1C,MAAM,SAAU,WAChBxT,GAAG,SAAS,SAASiT,EAAOqL,GAAQwD,EAAKmnC,yBAAyBL,MAEvEjoC,GA3IO,GA8IHlc,EAAI2iB,EAAmBtlB,QACvB2lD,EAAiBvnC,OAAO,QACnBuD,QAAQ,oCAAoC,GAC5CpI,KAAK,gBAAiBstC,GACtBttC,KAAK,KAAMqF,EAAI,GACfrF,KAAK,KAAMsF,GACXtF,KAAK,KAAMqF,EAAI,EAAQ,GACvBrF,KAAK,KAAMsF,GACXtF,KAAK,SAlJD,WAmJJA,KAAK,eAAgB,K,OAjCzB5W,EAAI,EAAGA,EAAI2iB,EAAmBtlB,SAAU2C,E,EAAxCA,QAsCTgjD,EAAiBvnC,OAAO,QACnBuD,QAAQ,iCAAiC,GACzCpI,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,GAC7BtF,KAAK,YA/JG,GAgKRA,KAAK,cA5JK,cA6JVqJ,KAAKojC,GAEVnnC,GApKW,GAuKX8mC,EAAiBvnC,OAAO,QACnBuD,QAAQ,oCAAoC,GAC5CpI,KAAK,KAAMqF,EAAI,GACfrF,KAAK,KAAMsF,GACXtF,KAAK,KAAMqF,EAAI,EAAQ,GACvBrF,KAAK,KAAMsF,GACXtF,KAAK,SAzKO,WA0KZA,KAAK,eAAgB,IAI9B,GAAIqsC,EAsCA,GApCAD,EAAiBvnC,OAAO,QACnBuD,QAAQ,kCAAkC,GAC1CpI,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,KAC7BtF,KAAK,YAlLQ,GAmLbA,KAAK,cApLK,cAqLVA,KAAK,cAAe,QACpBqJ,KAAKkjC,GAEVjnC,GA7LW,GAgMX8mC,EAAiBvnC,OAAO,QACnBuD,QAAQ,oCAAoC,GAC5CpI,KAAK,KAAMqF,GACXrF,KAAK,KAAMsF,GACXtF,KAAK,KAAMqF,EAAI,GACfrF,KAAK,KAAMsF,GACXtF,KAAK,SAnMM,WAoMXA,KAAK,eAAgB,IAG1BosC,EAAiBvnC,OAAO,QACnBuD,QAAQ,iCAAiC,GACzCpI,KAAK,cAAe,qBACpBA,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,GAC7BtF,KAAK,YA9MG,GA+MRA,KAAK,cA3MK,cA4MVqJ,KAAKmjC,GACLr0C,MAAM,SAAU,WAChBxT,GAAG,SAAS,SAASiT,EAAOqL,GAAQwD,EAAKonC,4BAE9CvoC,GArNW,GAwNiB,MAAxB7gB,KAAK0iC,SAASpf,QAAsE,MAApDtjB,KAAK0iC,SAASpf,OAAOre,KAAK2c,wBAAsF,IAApD5hB,KAAK0iC,SAASpf,OAAOre,KAAK2c,uBACtH+lC,EAAiBvnC,OAAO,QACnBuD,QAAQ,oCAAoC,GAC5CpI,KAAK,KAAMqF,GACXrF,KAAK,KAAMsF,GACXtF,KAAK,KAAMqF,EAAI,GACfrF,KAAK,KAAMsF,GACXtF,KAAK,SA5NE,WA6NPA,KAAK,eAAgB,IAE1BosC,EAAiBvnC,OAAO,QACnBuD,QAAQ,iCAAiC,GACzCpI,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,GAC7BtF,KAAK,YArOD,GAsOJA,KAAK,cAlOC,cAmONqJ,KAAKsjC,GACLx0C,MAAM,SAAU,WAChBxT,GAAG,SAAS,SAASiT,EAAOqL,GAAQwD,EAAKqnC,+BAE9CxoC,GA5OO,QA+OP,GAAgC,OAD5B4mC,EAAoB/nC,EAAGC,OAAO,uCACZnB,OAAgB,CAC9BiqC,EAAwBhB,EAAkBlsC,KAAK,aAAnD,IACI,EAAqBvb,KAAKkhB,mBAAmB2F,oBAAoB4hC,GAGjEE,EAAmG,MAD3E,IAAI,EAAAroC,iBAAiBtgB,KAAKkhB,mBAAoBxB,EAAGC,OAAO,QAAS,GAAoB,EAAM3f,KAAKod,gBAAiBpd,KAAKkd,aAAcld,KAAKmU,aACpHgN,cAAcnhB,KAAKyiC,WAAW8kB,cAAcjkC,OAEjE,MAAxBtjB,KAAK0iC,SAASpf,QAAkBqlC,IAChChB,EAAiBvnC,OAAO,QACnBuD,QAAQ,oCAAoC,GAC5CpI,KAAK,KAAMqF,GACXrF,KAAK,KAAMsF,GACXtF,KAAK,KAAMqF,EAAI,GACfrF,KAAK,KAAMsF,GACXtF,KAAK,SA1PN,WA2PCA,KAAK,eAAgB,IAE1BosC,EAAiBvnC,OAAO,QACnBuD,QAAQ,iCAAiC,GACzCpI,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,GAC7BtF,KAAK,YAnQT,GAoQIA,KAAK,cAhQP,cAiQEqJ,KAAKujC,GACLz0C,MAAM,SAAU,WAChBxT,GAAG,SAAS,SAASiT,EAAOqL,GAAQwD,EAAKsnC,wBAAwB,MAEtEzoC,GA1QD,IAgRXunC,IACAT,EAAiBvnC,OAAO,QACnBuD,QAAQ,oCAAoC,GAC5CpI,KAAK,KAAMqF,GACXrF,KAAK,KAAMsF,GACXtF,KAAK,KAAMqF,EAAI,GACfrF,KAAK,KAAMsF,GACXtF,KAAK,SApRM,WAqRXA,KAAK,eAAgB,IAE1BosC,EAAiBvnC,OAAO,QACnBuD,QAAQ,iCAAiC,GACzCpI,KAAK,IAAKqF,EAAIsoC,GACd3tC,KAAK,IAAKsF,EAAI,GAAe,GAC7BtF,KAAK,YA7RG,GA8RRA,KAAK,cA1RK,cA2RVqJ,KAAKqjC,GACLv0C,MAAM,SAAU,WAChBxT,GAAG,SAAS,SAASiT,EAAOqL,GACzBwD,EAAKwlC,uBAEL,IAAIE,EAAehoC,EAAGC,OAAO,mBACF,MAAvB+nC,EAAalpC,QACbkpC,EAAapnD,SAGjBof,EAAGC,OAAO,8BAA8Brf,aAIpDN,KAAKkhB,mBAAmBV,2BAExBknC,EAAapnD,UAIrB,YAAA8oD,uBAAA,sBACQ3iC,EAASzmB,KAAKkhB,mBAAmBb,oBAAoBc,cAAcnhB,KAAK8T,cAAc9F,MAEtF+c,EAAM/qB,KAAKkhB,mBAAmB4C,wBAAwB2C,EAAOgc,WAEjEziC,KAAKkU,WAAalU,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CAC5DV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGzB,IAAIhY,EAAUxS,KAAKod,gBAAgBmC,OAAO,yCAC1C/M,EAAUA,EAAQmvB,QAAQ,UAAW5W,EAAI1X,MAAMqV,gBAE/C1oB,KAAKkU,WAAWuW,QAAQjY,QAAUA,EAClCxS,KAAKkU,WAAWuW,QAAQxlB,KAAO8lB,EAAI/c,KAEVhO,KAAKkU,WAAWuW,QAASS,UAAUpR,WAAU,SAAA7U,GAClE,IAAIy9B,EAAWjc,EAAO8gC,cAClBjkC,EAAS,KAETA,EADmB,MAAnBof,EAASpf,QAG0C,MAA/Cof,EAASpf,OAAOre,KAAK2c,uBAFhB,OAKI8gB,EAASpf,OAAOre,KAAK6O,cAItC,EAAKoN,mBAAmBqL,oBAAoBjJ,EAAQmD,EAAOgc,WAAW,SAACptB,GAAe6kB,QAAQC,IAAI9kB,UAI1G,YAAA8zC,yBAAA,SAAyBL,GACrBppC,EAAGC,OAAO,mBAAmBrf,SAC7Bof,EAAGC,OAAO,8BAA8Brf,SAExC,IAAIipD,EAASvpD,KAAKgnD,UACd7mC,EAAMT,EAAGC,OAAO,QAGpB,GAAI3f,KAAKwnD,yBAA2BsB,EAAiB96C,KAArD,CAKA,IAAIw7C,EAAmB9pC,EAAGC,OAAO,mCAAmCnB,OAAemC,UAGrD,IAAI,EAAAL,iBAAiBtgB,KAAKkhB,mBAAoBf,EAAK2oC,GAAkB,EAAO9oD,KAAKod,gBAAiBpd,KAAKkd,aAAcld,KAAKmU,aAClJoM,SACN,IAAIkpC,EAAa/pC,EAAGC,OAAO,sCAIvByV,EADkB1V,EAAGC,OAAO,sCAAwCnB,OAClDmC,UAClB+oC,EAAsBF,EAAgB1oC,MAAQ,IAAM0oC,EAAgB5oC,EAAIwU,EAAKxU,GACjF6oC,EAAWluC,KAAK,YAAa,aAAemuC,EAAc,OAG1D,IAAIC,EAAejqC,EAAGC,OAAO,qEAAwE3f,KAAKyiC,UAAY,MAClHmnB,EAAmB,CAAEhpC,EAAGoD,SAAS2lC,EAAapuC,KAAK,MAAOsF,EAAGmD,SAAS2lC,EAAapuC,KAAK,MAAQ,EAAGuF,MAAOkD,SAAS2lC,EAAapuC,KAAK,UAAWwF,OAAQiD,SAAS2lC,EAAapuC,KAAK,WAAa,GACpMquC,EAAiBhpC,EAAIgpC,EAAiBhpC,EAAI8oC,EAC1ChqC,EAAGC,OAAO,8BAA8Brf,SACxC,IAAIupD,EAAanqC,EAAGC,OAAO,QAAQS,OAAO,KAAKuD,QAAQ,6BAA6B,GACpFkmC,EAAWzpC,OAAO,QACbuD,QAAQ,2BAA2B,GACnCpI,KAAK,OAAQ,QACbA,KAAK,SAAU,QACfA,KAAK,iBAAkB,IACvBA,KAAK,mBAAoB,OACzBA,KAAK,eAAgB,KACrBA,KACG,IACA,KAAOguC,EAAO3oC,EAAI2oC,EAAOzoC,OAAS,KAAOyoC,EAAO1oC,EAAI0oC,EAAOxoC,OAAS,GACpE,MAAS6oC,EAAkB,GAAKL,EAAO3oC,EAAI2oC,EAAOzoC,QAAU,EAAIyoC,EAAO3oC,EAAI2oC,EAAOzoC,OAClF,KAAO8oC,EAAiB/oC,EAAI+oC,EAAiB7oC,OAAS,GACtD,IAAM6oC,EAAiBhpC,GAI/B,IAAMmkB,EAAuB,GAAvBA,EAAkC,EACpCC,EAAS6kB,EAAWzpC,OAAO,KAAKuD,QAAQ,mCAAmC,GAC/EqhB,EAAO5kB,OAAO,QACTuD,QAAQ,sCAAsC,GAC9CpI,KAAK,IAAKguC,EAAO3oC,EAAI2oC,EAAOzoC,MAAQikB,EAAmB,GACvDxpB,KAAK,IAAKguC,EAAO1oC,EAAI0oC,EAAOxoC,OAAS,EAAIgkB,EAAoB,GAC7DxpB,KAAK,QAASwpB,GACdxpB,KAAK,SAAUwpB,GACfxpB,KAAK,OAAQ,EAAAyB,2BAClBgoB,EAAO5kB,OAAO,QACTuD,QAAQ,sCAAsC,GAC9CpI,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,IACF,KAAOguC,EAAO3oC,EAAI2oC,EAAOzoC,MAAQikB,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAOwkB,EAAO1oC,EAAI0oC,EAAOxoC,OAAS,EAAIgkB,EAAoB,EAA0B,EAApBA,EAAyB,GACjL,KAAOwkB,EAAO3oC,EAAI2oC,EAAOzoC,MAAQikB,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAOwkB,EAAO1oC,EAAI0oC,EAAOxoC,OAAS,GAC1H,KAAOwoC,EAAO3oC,EAAI2oC,EAAOzoC,MAAQikB,EAAmB,EAAyB,EAAnBA,EAAwB,GAAM,KAAOwkB,EAAO1oC,EAAI0oC,EAAOxoC,OAAS,EAAIgkB,EAAoB,EAAIA,EAAoB,IAIlL/kC,KAAKkhB,mBAAmBV,wBAG5B,YAAA8oC,wBAAA,SAAwB7nC,GACpBzhB,KAAKkhB,mBAAmB2L,uBAAuB7sB,KAAK8mD,iBAAiBrkB,UAAWhhB,EAAUzT,KAAMhO,KAAKyiC,YAGzG,YAAA4mB,0BAAA,WACIrpD,KAAKkhB,mBAAmB+L,yBAAyBjtB,KAAK8mD,iBAAiBrkB,UAAWziC,KAAKyiC,YAG/F,EA5hBA,GAAa,EAAAE,oB,6HCfb,WAEA,GADA,MACA,OAGA,S,GAGA,O,uECJI,6BAAqE,YAAW,kB,8BAAX,+C,yBAgB/D,gCACE,YACF,kB,uBAFqD,wCACnD,qE,mDANJ,gCAAkC,4GAChC,gCAA6D,kBAAG,6BACgB,kBAAE,iBAElF,wBACA,kCAGF,iB,iCAP0B,kEAIO,4D,mDAlBvC,4BAEE,8BAEA,4BACE,yBACE,4BACF,iBACF,iBACA,+BAEE,4BAEE,iCAUF,iBAEA,4BACE,+BAAsB,6EAASzuB,WAAA,UAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,iGACpB,4BACE,8BACF,iBACF,iBACF,iBACF,iBACF,iB,gCApCQ,oDAWO,yDDJjB,iBAyBI,WAAoBhC,EAA2CgC,GAA3C,KAAAhC,mBAA2C,KAAAgC,aAVvD,KAAA41C,QAAkB,EAE1B,KAAAt3C,QAAkB,K,OAUlB,YAAAhT,SAAA,WACIQ,KAAK+pD,aAAe,IAAI,EAAAr4C,SAG5B,YAAA+6B,SAAA,SAASrqC,GAAT,WACIpC,KAAKgqD,kBAAkBnkD,SAAQ,SAAAokD,GACvBA,EAAKj8C,OAAS5L,IACd,EAAK8nD,sBAAwBD,OAKzC,YAAAp3C,eAAA,sBACI7S,KAAKwS,QAAU,KAEf,IAAI8Q,EAAUtjB,KAAW,OAAI,OAASA,KAAKsjB,OAAOre,KAAK6O,cACvD9T,KAAKkS,iBAAiBkV,oBAAoBpnB,KAAKwhB,cAAcxT,KAAMsV,EAAQtjB,KAAKkqD,sBAAsBl8C,MAAM6G,MAAK,SAAA5P,GAC7G,EAAK8kD,aAAa93C,KAAKhN,GACvB,EAAKiP,WAAWwD,UACjBtC,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAC,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA/C3ChM,GAAiC,4E,iCAAjCA,EAAiC,iyBChB9C,6BAEE,+BAuCF,kB,MAvCQ,qD,4LDSR,GAKa,EAAAA,qC,+DAAAA,EAAiC,E,KAL7C,EAAA8F,U,MAAU,CACPC,SAAU,+BACVC,YAAa,gDACbC,UAAW,Q,oMEdf,WAEA,GADA,MACA,OAGA,SACA,SAIA,GAHA,MAEA,OACA,Q,GAEA,O,+FCXI,4BAAqE,YAAW,kB,6BAAX,+C,mDAiCjC,2BAAoG,uI,uBACvD,iB,KAAzC,6D,mDACJ,2BAAuG,6I,uBACxD,iB,KAA3C,+D,yBANZ,yBACI,yBAAI,YAA6B,iBACjC,4BACI,6BAEA,6BAEJ,iBACJ,kB,uBAPQ,2DAEI,qEAEA,sE,mDAjCxC,+BAA8D,wFAC1D,4BACI,yBACI,4BAAyE,YAAsC,iBACvH,iBACA,+BAEI,0BACI,4BACI,4BACI,6BACJ,iBACJ,iBACA,8BAEI,8BACI,gCACI,6BACI,0BACI,0BACI,8BACJ,iBACA,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BACI,+BASJ,iBACJ,iBACJ,iBAkBJ,iBACJ,iBACA,8BACI,wBAEA,8BACI,4BAAgG,uGAC5F,8BACJ,iBACJ,iBACJ,iBAEA,8BACI,8BACI,8BACI,iCAA8C,wFAC1C,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,gCA5EqF,iFAyBpC,oEDjBrD,iBA2BI,WAAmB4E,EAA+B+qB,EAAuC/hB,EAAsCE,EACnHqiB,EAA8DP,EAAwE7hB,GAD/H,KAAAnJ,aAA+B,KAAA+qB,oBAAuC,KAAA/hB,eAAsC,KAAAE,kBACnH,KAAAqiB,4BAA8D,KAAAP,iCAAwE,KAAA7hB,kBApBzI,KAAAtK,UAA2B,KAC1B,KAAA4sB,oBAAmD,IAAI,EAAApgC,aAEjE,KAAAiT,QAAkB,KAClB,KAAAotB,gBAA8B,CAC1B/E,MAAO,CACH,CAAExnB,MAAOrT,KAAKod,gBAAgBmC,OAAO,6CAA8Cyc,QAAQ,EAAMC,SAAS,GAC1G,CAAE5oB,MAAOrT,KAAKod,gBAAgBmC,OAAO,0CAA2Cyc,QAAQ,EAAMC,SAAS,KAI/G,KAAAnqB,WAA4C,CAAEE,MAAO,EAAAmtB,yBAAyBe,iBAAkBntB,UAAW/S,KAAK+S,UAAWqsB,WAAY,I,OAWvI,YAAA5/B,SAAA,WACIQ,KAAKmqD,kBAAoB,IAAI,EAAAz4C,QAC7B1R,KAAKy/B,0BAA0BK,cAAc9/B,KAAK4/B,kBAGtD,YAAAhtB,YAAA,WACI5S,KAAKmqD,kBAAkBvyC,eAG3B,YAAAooB,qBAAA,WACIhgC,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBc,gBAAiBltB,UAAW,GAAIqsB,WAAY,MAGpI,YAAAe,cAAA,SAAc5kB,EAAqBzN,GAC/B9N,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyBgB,cAAeptB,UAAWwI,EAAM6jB,WAAY,MAGpI,YAAAgB,oBAAA,SAAoB7kB,EAAqBzN,GAAzC,WACI9N,KAAKi/B,kBAAoBj/B,KAAKkd,aAAasM,KAAK,EAAAwB,sBAAuB,CACnEV,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBxqB,KAAKi/B,kBAAkBxU,QAAQjY,QAAUxS,KAAKod,gBAAgBmC,OAAO,+BAAiC,IAAMhE,EAAKlI,MAAMqV,eAAiB,IACxI1oB,KAAKi/B,kBAAkBxU,QAAQxlB,KAAO,CAAE2rB,cAAerV,EAAMzH,cAAe9T,KAAK8T,eACjF9T,KAAKi/B,kBAAkBxU,QAAQQ,WAAajrB,KAAKod,gBAAgBmC,OAAO,uBACxEvf,KAAKi/B,kBAAkBxU,QAAQppB,KAAO,EAAA2qB,WAAWC,OAExBjsB,KAAKi/B,kBAAkBxU,QAASS,UAAUpR,WAAU,SAAA7U,GACzE,EAAK6rB,oBAAoB7rB,EAAK6O,cAAc9F,KAAM/I,EAAK2rB,mBAI/D,YAAAE,oBAAA,SAAoBxH,EAA2B/N,GAA/C,WACIvb,KAAKqd,gBAAgByT,oBAAoBxH,EAAmB/N,EAAKvN,MAAM6G,MAAK,SAAA5P,GACxE,EAAKklD,kBAAkBl4C,KAAKhN,GAExBA,GACA,EAAK6O,cAAcwF,WAAWxW,OAAO,EAAKgR,cAAcwF,WAAWlG,QAAQmI,GAAO,GAGtF,EAAKokB,oBAAoB3lB,KAAK,EAAKlG,kBACpCsB,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAmqB,MAAA,WACIx/B,KAAKk/B,+BAA+BntB,cAAc,CAAEC,MAAO,EAAAmtB,yBAAyB/S,oBAAqBrZ,UAAW/S,KAAK+S,UAAWqsB,WAAY,MAGpJ,YAAA9pB,MAAA,SAAMD,GACFrV,KAAKwS,QAAU,EAAAwF,aAAaC,oBAAoB5C,I,iCA7E3C9L,GAA8B,qS,iCAA9BA,EAA8B,40CCnB3C,4BACI,8BAEA,gCAiFJ,kB,MAnFU,oDAEgB,sD,klBDW1B,GAKa,EAAAA,kC,+DAAAA,EAA8B,E,KAL1C,EAAA4F,U,MAAU,CACPC,SAAU,0BACVC,YAAa,2CACbC,UAAW,CAAC,sC,uNAIHwE,cAAe,CAAF,C,KAArB,EAAAvE,QACQwD,UAAW,CAAF,C,KAAjB,EAAAxD,QACSowB,oBAAqB,CAAF,C,KAA5B,EAAA14B,Y,seEtBL,aAEA,SACA,SACA,UAEA,SAAYqtC,GACV,gBACA,gBAFF,CAAY,EAAAA,aAAA,EAAAA,WAAU,KAKtB,mBAAa,EAAAD,QAcb,kBAeE,WAAYqB,EAAoCr7B,GAAhD,MAEE,cAAO,K,OATT,EAAA3X,SAAkB,KAClB,EAAA6xC,SAAkB,KAUhB,EAAKmB,UAAYA,EAEoB,aAAjCA,EAAU9kB,cAAcvvB,KAE1B,EAAKc,eAAiB,IAAI,EAAA6vC,wBAAwB0D,EAAWr7B,EAAQ,EAAM,MAI3E,EAAKlY,eAAiB,IAAI,EAAA80C,4BAA4BvB,EAAWr7B,EAAQ,G,EA2D/E,OAtFqC,OA+BnC,YAAAw4B,oBAAA,SAAoBD,GAElB,GAAY,MAARA,EAMJ,GAAoB,WAAhBA,EAAKv4B,OAKJ,GAAoB,WAAhBu4B,EAAKv4B,OAAT,CAML,IAAI+vC,EAA+B,MAArBxX,EAAKG,cAA2C,MAAnBH,EAAKI,WAC5CqX,EAAWn8C,OAAO+jC,UAAUvE,eAAewE,KAAKU,EAAM,YAIxD5yC,KAAKmwC,WAFHia,GAAWC,EAEK,EAAAja,WAAWka,OAEtBF,EAEW,EAAAha,WAAWma,YAEtBF,EAEW,EAAAja,WAAWoa,aAIX,EAAApa,WAAW2B,gBArB7B/xC,KAAKmwC,WAAa,EAAAC,WAAWuC,YAL7B3yC,KAAKmwC,WAAa,EAAAC,WAAWC,SAN7BrwC,KAAKmwC,WAAa,EAAAC,WAAW2B,YAoCjC,sBAAI,yBAAU,C,IAMd,WAEE,OAAO/xC,KAAKyqD,gB,IARd,SAAeC,GAEb1qD,KAAKyqD,eAAiBC,EACtB1qD,KAAK2qD,sB,gCAQC,YAAAA,mBAAR,WAEE3qD,KAAK4qD,oBAAsB5qD,KAAK01C,UAAUzhC,SAASsL,OAAO,4CAA8Cvf,KAAKyqD,iBAEjH,EAtFA,CAAqC,EAAA5S,eAAxB,EAAArH,mB,gIC1Bb,WAWA,GATA,MAKA,OAEA,MAEA,Q,2MCiBQ,yD,6BAGI,oCAAqB,gCAArB,CAAqB,uFAArB,CAAqB,oBAArB,CAAqB,cAArB,CAAqB,yB,mDAiBvB,gCAAwC,4FACtC,6BACF,kB,mDACA,gCAAuC,0FACrC,6BACF,kB,mDACA,gCAAuC,8FACrC,6BACF,kBDtCV,iBAwCI,WAAoB5Z,EAAoD1Z,EAAsCG,EAClGlJ,GADQ,KAAAyiB,uBAAoD,KAAA1Z,eAAsC,KAAAG,kBAClG,KAAAlJ,cA/BZ,KAAA+jB,cAAwB,EAIxB,KAAA2F,aAAkC,KAElC,KAAA1lB,cAAmC,KAEnC,KAAArE,cAA+B,KAI/B,KAAAnT,WAAqB,EAWrB,KAAAo2B,QAAkB,KAKlB,KAAAre,QAAgB,KAKZ1Y,KAAKk4B,aAAe/jB,EAAY8jB,WAAa9jB,EAAY+jB,eAEzDl4B,KAAK0Y,QAAU,IAAIpE,KAEnB,IAAM+jB,EAAMr4B,KAAK0Y,QAAQ4f,aACzBt4B,KAAK+2B,QAAU/2B,KAAK0Y,QAAQ6f,iBAAmB,KAAOv4B,KAAK0Y,QAAQ8f,cAAgB,GAAK,KAAOH,EAAM,GAAK,IAAM,IAAMA,E,OAI1H,YAAA74B,SAAA,WAEIQ,KAAKmY,cAAgBnY,KAAKqa,OAAOuyB,cACjC5sC,KAAK8T,cAAgB9T,KAAKqa,OAAOvG,cAE7B9T,KAAKyU,UAELzU,KAAK69B,aAAe79B,KAAKmY,eAI7BnY,KAAKysC,SAASzsC,KAAKqa,SAIvB,YAAA5F,MAAA,WAEI,MAAmC,iEAA3BzU,KAAKqa,OAAOC,YAIxB,YAAAgd,iBAAA,WAEIt3B,KAAK0Y,QAAU,IAAIpE,KAAKA,KAAK8G,MAAMpb,KAAK+2B,WAI5C,YAAA8zB,YAAA,WAGI,IAAIxwC,EAASra,KAAKqa,OAElBA,EAAOuyB,cAAgB5sC,KAAKy3B,gBAAgBpb,eAEjB,MAAvBrc,KAAKwc,iBAELnC,EAAOuyB,cAAclrC,SAAW1B,KAAKwc,eAAesuC,WAAWppD,WAkBvE,YAAA+qC,SAAA,SAASpyB,GAAT,WAoBmC,iEAA3Bra,KAAKqa,OAAOC,YAIZta,KAAKqd,gBAAgBqV,qBAAqB1yB,KAAKmY,cAAcmB,WAAWtL,KAAMhO,KAAK8T,cAAc9F,MAAM6G,MAAK,SAAA8e,GAExG,EAAKkK,aAAelK,KAErBve,OAAM,SAACC,GAEN,EAAKC,MAAMD,OA4BvB,YAAA01C,UAAA,aAMO,YAAAC,QAAP,aA2DA,YAAAhd,YAAA,WAEI,OAAOhuC,KAAKmU,YAAY65B,eAIrB,YAAA14B,MAAP,SAAaD,GAETrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCArOtD/T,GAAoC,8J,iCAApCA,EAAoC,yE,GAAA,M,oyCC1BjD,4BAEI,4BACI,2BAAiC,YAAsB,iBAC5D,iBAEC,4BACE,yBACE,4BAA4C,YAC9C,iBAEA,4BACE,6BAAiC,6BAAkD,iBACnF,+BAAmB,gEAAqB,4BAAW,EAAAmuB,sBAAnD,iBACF,iBAcE,8DAYA,2BACI,gCACI,8BAA0E,mBAC9E,iBACA,mCAAoF,gFAA8D,iBACtJ,iBAEA,8BACE,mCAGA,mCAGA,mCAGF,iBACJ,iBACJ,kB,MAxDyC,yDAKW,0EAKzB,iDAiBd,6CAcmF,iEAAqC,yBAIlH,8DAGA,6DAGA,+D,8jBDpCnB,GAQa,EAAAnuB,wC,+DAAAA,EAAoC,E,KARhD,EAAAgG,U,MAAU,CAEPC,SAAU,mCACVC,YAAa,0BACbC,UAAW,CAAC,0CACZu/B,cAAe,EAAAC,kBAAkBC,U,0HAOxB10B,OAAQ,CAAF,C,KAAd,EAAA9K,QAQQxP,SAAU,CAAF,C,KAAhB,EAAAwP,QAI6BkoB,gBAAe,E,KAA5C,EAAAhb,U,MAAU,qBAEkBD,eAAc,E,KAA1C,EAAAC,U,MAAU,uB,uHE5Cf,WAKA,GAFA,OAEA,Q,mDAKA,aA8CI,WAAoBvE,EAAsCmF,EAA0C2lC,GAAhF,KAAA9qC,cAAsC,KAAAmF,kBAA0C,KAAA2lC,aAnCpG,KAAAiI,WAAqB,IA4BZ,KAAAlrD,UAAoB,E,OA1B7B,sBAAa,wBAAS,C,IAAtB,SAAuBghB,GACfA,EAAS,MACT/gB,KAAKirD,WAAalqC,I,gCAiC1B,YAAAvhB,SAAA,aAGA,YAAAiT,gBAAA,sBACIma,YAAW,WACP,EAAKs+B,OAAOlsC,cAAczd,GAAK0zC,KAAKkW,MAAsB,OAAhBlW,KAAKmW,UAAuB,IAEtE,EAAKvrD,IAAM,IAAI,EAAAgkD,IAAI,CACfC,UAAW,EAAKoH,OAAOlsC,cAAczd,GACrCmS,MAAO,sCACPlN,KAAM,EACNN,OAAQ,CAAC,WAAY,aAGzB,EAAKrG,IAAIK,GAAG,QAAQ,WAChB,EAAKokD,eAEV,IAGP,YAAA1xC,YAAA,WACI5S,KAAKkY,YAAYvY,WAGrB,YAAAyc,WAAA,WACI,OAAOpc,KAAKkY,YAAYpW,WAG5B,YAAAwiD,QAAA,WACItkD,KAAKH,IAAIK,GAAG,cAAc,eAK1BF,KAAKkY,YAAYtY,WAAWI,KAAKH,IAAKG,KAAKF,aAAcE,KAAKD,UAG9DC,KAAKH,IAAIsE,WAAW,IAAI,EAAAqgD,mBAExBxkD,KAAKqrD,cAGT,YAAAA,WAAA,WACIrrD,KAAKkY,YAAYtS,sBAGd,YAAA0P,MAAP,SAAaD,GAET6kB,QAAQC,IAAI,QAAS9kB,I,iCAvFhBpK,GAA2B,kH,iCAA3BA,EAA2B,+E,GAAA,K,sZCnBxC,4BACE,yBACF,kB,MADsD,2D,gBDStD,GASa,EAAAA,+B,+DAAAA,EAA2B,E,KATvC,EAAAkE,U,MAAU,CACPC,SAAU,qCACVC,YAAa,wCACbC,UAAW,CAAC,6C,4FAUCg8C,UAAS,E,KAArB,EAAA/7C,QASQzP,aAAc,CAAF,C,KAApB,EAAAyP,QAKQg8C,SAAU,CAAF,C,KAAhB,EAAAh8C,QAKQi8C,SAAU,CAAF,C,KAAhB,EAAAj8C,QAEQk8C,SAAU,CAAF,C,KAAhB,EAAAl8C,QAKQxP,SAAU,CAAF,C,KAAhB,EAAAwP,QAEoB27C,OAAM,E,KAA1B,EAAAzuC,U,MAAU,e,6GElDf,W,mHCAE,0B,qDAEE,8DAAwD,0E,sBAK1D,4BACE,4BACE,4BACF,iBACA,uBACF,kBDVF,iBAeI,WAAYivC,GANF,KAAAC,YAAc,IAAI,EAAApsD,aAEnB,KAAAqsD,SAAmB,EACnB,KAAAvI,oBAA8B,EAC9B,KAAAwI,MAAgB,EAGrB7rD,KAAK0rD,MAAQA,E,OAGjB,YAAAI,MAAA,SAAMjsD,GACF,OAAOG,KAAK0rD,MAAM1sC,eAGtB,YAAAwgC,SAAA,SAAS3/C,GACLG,KAAK0rD,MAAM1sC,cAAc1e,UAG7B,YAAAspC,QAAA,WACI5pC,KAAK2rD,YAAY3xC,Q,iCAvBZ9O,GAAiB,oC,iCAAjBA,EAAiB,+jBCR9B,4BAAK,wCAAS,eACZ,iCAOA,8BAMF,kB,MAbW,yDAOH,2D,gqCDLR,GAKa,EAAAA,qB,+DAAAA,EAAiB,E,KAL7B,EAAAiE,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,CAAC,kC,0CAMFq8C,YAAW,E,KAApB,EAAA1kD,SAEQ2kD,QAAS,CAAF,C,KAAf,EAAAr8C,QACQ8zC,mBAAoB,CAAF,C,KAA1B,EAAA9zC,QACQs8C,KAAM,CAAF,C,KAAZ,EAAAt8C,W,2GEhBL,W,GAGA,O,uDCMQ,4BACE,6BACF,kB,6BADa,6CAAe,sB,mDAO9B,+BAAsF,yFAAmB,4BAA6C,kBDZ5J,iBAgCI,aAtBS,KAAAxP,UAAoB,EAEpB,KAAA2Y,QAAgB,KAEf,KAAAI,gBAAkB,IAAI,EAAAvZ,aAEhC,KAAAwsD,MAAe,GAEf,KAAA3tC,cAAgC,CAC5BC,MAAO,CACHC,MAAO,OAIf,KAAAJ,QAAwB,CACpBC,aAAc,OACd6tC,gBAAiB,WACjBC,QAAS,OACT7tC,cAAepe,KAAKoe,e,OAQxB,YAAA5e,SAAA,WACIQ,KAAKu4C,aAGT,YAAA5lC,YAAA,SAAY6oB,GACJA,EAAiB,SACjBx7B,KAAKu4C,aAIb,YAAAA,UAAA,sBACQC,EAAO,KAES,MAAhBx4C,KAAK0Y,UACL8/B,EAAOx4C,KAAK0Y,QAAQqb,WAGxB,IAAIg4B,EAAQ,GACR3e,EAAU,KAEdptC,KAAKyhB,UAAUowB,QAAQhsC,SAAQ,SAAA4yC,GAC3B,IAAM9f,EAAYrkB,KAAK8G,MAAMq9B,EAAI9f,WAC3ByO,EAAU9yB,KAAK8G,MAAMq9B,EAAIrR,UAGnB,MAARoR,GAAgBA,GAAQ7f,GAAa6f,GAAQpR,IAC7C,EAAK3lB,UAAU3M,MAAMjP,SAAQ,SAAAxE,GACzB,IAAImd,EAAY,CACZxQ,KAAM3M,EAAK2M,KACXqF,MAAOhS,EAAKgS,MACZqI,SAAU,GACVwwC,UAAU,GAGgB,MAA1BzT,EAAI9e,QAAQt4B,EAAK2M,QACjBwQ,EAAKgY,KAAOiiB,EAAI9e,QAAQt4B,EAAK2M,MAAM4W,KAEvB,MAAR4zB,IACAh6B,EAAKgY,KAAOhY,EAAKgY,KAAO,KAAOiiB,EAAI9f,UAAY,OAAS8f,EAAIrR,QAAU,KAG1E5oB,EAAKmV,UAAY8kB,EAAI9e,QAAQt4B,EAAK2M,MAAM2lB,WAG7B,MAAXyZ,EACA2e,EAAMhpD,KAAKyb,IAEX4uB,EAAQ1xB,SAAS3Y,KAAKyb,GACtB4uB,EAAQ8e,UAAW,GAGvB9e,EAAU5uB,KAIlB4uB,EAAU,QAGdptC,KAAK+rD,MAAQA,GAGjB,YAAAhhB,OAAA,WACI/qC,KAAK8Y,gBAAgBkB,KAAKha,KAAKyhB,Y,iCA5F1BnW,I,iCAAAA,EAAe,+iBCX5B,0BAEE,4BACE,4BACE,2BAAuB,YAAmB,iBAC5C,iBACA,4BAGI,8BAQF,iCAEF,iBACF,iBACF,kB,MAjB6B,sDAKf,qDAQ6D,kD,wEDZ3E,GAMa,EAAAA,mB,+DAAAA,EAAe,E,KAN3B,EAAA6D,U,MAAU,CAEPC,SAAU,oBACVC,YAAa,2BACbC,UAAW,CAAC,gC,uBAIHmS,UAAW,CAAF,C,KAAjB,EAAAlS,QAEQxP,SAAU,CAAF,C,KAAhB,EAAAwP,QAEQmJ,QAAS,CAAF,C,KAAf,EAAAnJ,QAESuJ,gBAAe,E,KAAxB,EAAA7R,Y,sHEnBL,W,GACA,M,8GCQY,2DAA2K,iGAA2C,iB,gCAA3C,gCAAmB,wB,mDAC9L,0DAA+J,iGAA2C,iB,gCAA3C,gCAAmB,wB,mDAClL,6CAA+F,iGAA2C,iB,gCAA3C,gCAAmB,wBDH9H,iBA2BI,WAAmBiN,GAAA,KAAAA,a,OAXnB,YAAAi4C,UADA,SACU9xC,EAAa9F,GACnBvU,KAAKqa,OAASA,EACdra,KAAKuU,SAAWA,GAWpB,YAAA/U,SAAA,aAGA,YAAAo4B,OAAA,WACyB,MAAjB53B,KAAKosD,UACLpsD,KAAKosD,SAASpB,UAGG,MAAjBhrD,KAAKqsD,UACLrsD,KAAKqsD,SAASrB,UAGG,MAAjBhrD,KAAKssD,UACLtsD,KAAKssD,SAAStB,UAGlBhrD,KAAKkU,WAAWwD,QAGpB,YAAA2zB,QAAA,WACIrrC,KAAKkU,WAAWwD,Q,iCA5CXnM,GAA0B,oC,iCAA1BA,EAA0B,4D,GAAA,M,2rBCbvC,4BAOI,4BACI,4BACI,2DACA,0DACA,4CACJ,iBACJ,iBAEA,oBACA,4BACI,4BACI,4BACI,gCAAsB,wCAAS,EAAAqsB,YAC3B,4BAAO,6BACP,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAlByD,6JACD,kJACd,gG,oBDH1C,GAKa,EAAArsB,8B,+DAAAA,EAA0B,E,KALtC,EAAA4D,U,MAAU,CACPC,SAAU,sBACVC,YAAa,uCACbC,UAAW,Q,0CAQY88C,SAAU,CAAF,C,KAA9B,EAAA3vC,U,MAAU,cACY4vC,SAAU,CAAF,C,KAA9B,EAAA5vC,U,MAAU,cACY6vC,SAAU,CAAF,C,KAA9B,EAAA7vC,U,MAAU,cAGX0vC,UAAS,E,KADR,EAAA58C,W,+GEvBL,WAKA,GAJA,MAIA,Q,GAEA,OACA,M,uFCkBgC,gCAAuD,YAAc,kB,uBAAlC,6BAAoB,6C,yBAWvD,gCAAuE,YAAmB,kB,uBAA5C,6BAAyB,6C,mDAPnF,4BACI,+BACI,6BACJ,iBACA,4BACI,gCAA6C,sGACzC,wBACA,iCACJ,iBACJ,iBACJ,iB,iCALqD,mDAEX,sD,mDApB9C,kCACI,4BACI,8BACI,4BACJ,iBACA,4BACI,+BAAkD,gGAAkB,8FAEhE,wBACA,iCACJ,iBACJ,iBACJ,iBACA,8BAWA,6BACI,+BACI,8BACJ,iBACA,6BACI,iCAAsD,kGAClD,yBACA,iCACI,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACA,6BACI,8BACI,iCAAwE,2FACpE,8BACJ,iBACJ,iBACJ,iBACJ,iB,mDAzC8D,8CAGrB,+CAIR,2DAgBiC,gDAaR,mDD/C1E,iBAuCI,WAAoBwE,EAA4BmJ,EAAsC/I,GAAlE,KAAAJ,UAA4B,KAAAmJ,eAAsC,KAAA/I,cAvBtF,KAAAnG,KAAe,KAKf,KAAAuI,YAAiD,GAKjD,KAAAkL,UAAoB,KAKpB,KAAAgnB,OAAiB,K,OAUjB,YAAAjpC,SAAA,sBACIQ,KAAK+T,QAAQa,oBAAmB,GAAMC,MAAK,SAAAC,GAIvC,IADA,IAAIC,EAAa,GACRpQ,EAAI,EAAGA,EAAImQ,EAAM9S,SAAU2C,EAC5B,EAAKwP,YAAYyL,iBAAiB9K,EAAMnQ,GAAGqQ,UAC3CD,EAAWhS,KAAK+R,EAAMnQ,IAG9B,EAAKmQ,MAAQC,KACdK,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAA+B,SAAA,SAASpJ,GAAT,WACgB,MAARA,GAAgBA,EAAKhM,OAAS,EAC9BhC,KAAK+T,QAAQsD,sBAAsBrJ,GAAM,GAAO6G,MAAK,SAAA0B,GACjD,EAAKA,YAAcA,EACnB,EAAKkL,UAAY,QAClBrM,OAAM,SAACC,GACN,EAAKC,MAAMD,OAGfrV,KAAKuW,YAAc,GACnBvW,KAAKyhB,UAAY,OAIzB,YAAAo5B,SAAA,WACwB,cAAhB76C,KAAKyoC,OACLhpC,OAAOutC,SAASC,KAAOj9B,IAAM,oCAAsChQ,KAAKgO,KAAO,kBAAoBhO,KAAKyhB,UACjF,UAAhBzhB,KAAKyoC,SACZhpC,OAAOutC,SAASC,KAAOj9B,IAAM,kCAAoChQ,KAAKgO,KAAO,kBAAoBhO,KAAKyhB,YAIvG,YAAAnM,MAAP,SAAaD,GACTrV,KAAKkU,WAAa,EAAA8D,aAAamV,kBAAkB9X,EAAKrV,KAAKkd,e,iCA1EtDzR,GAAmB,4G,iCAAnBA,EAAmB,82BChB5B,6BAeY,iC,MAAsB,8C,+RDLtC,GAMa,EAAAA,uB,+DAAAA,EAAmB,E,KAN/B,EAAA0D,U,MAAU,CAEPC,SAAU,cACVC,YAAa,+BACbC,UAAW,Q,8MEhBf,WAUA,OAMA,SAIA,GAFA,MACA,OACA,M,gHCnBE,6BACE,6BACF,kB,sBAiBsB,2BACE,6BACF,kB,mDAKM,4BACE,4BACE,gCAAgC,2IAC9B,6BACF,iBACA,gCAAsB,kJAClB,6BACF,iBACJ,iBACF,kB,4FAyBI,2BACE,YACF,kB,uBAFkD,mFAChD,wD,yBALN,yBAII,6BAGJ,kB,uCAHuB,0D,oJArC7B,4BACE,4BACE,4BACE,8BAUA,4BACE,yBACE,yBACE,6BACF,iBAEA,uCAAiC,0EAAgC,oFAAiH,iBAEpL,iBACA,0BACE,8BACI,0BACE,8BACF,iBAEA,wCAAiC,wEAA8B,oFAA2J,iBAE5N,iBACJ,iBACF,iBACA,+BAQF,iBACF,iBACA,6BAAgJ,6G,wBAC9I,uBACF,iBACF,iB,yDA9C+F,wNACzF,2FAEiC,uEAgBI,iDAAgC,2BAAhC,CAAgC,sBAAhC,CAAgC,eAS5B,+CAA8B,yBAA9B,CAA8B,mBAA9B,CAA8B,sBAA9B,CAA8B,cAA9B,CAA8B,sBAKlE,kFAUmE,0G,mDAtD5F,6BAEM,4BACE,4BACE,+BAEE,+BACE,6BAIA,gCA+CF,iBACF,iBACF,iBAEA,4BACE,2BAAgC,6FAAyB,SAAQ,6BACjE,iBACF,iBACF,iBACF,iB,gCA5D8B,8FAIO,uF,mDAiEvC,gCAAwC,2FACtC,6BACF,kB,mDACA,gCAAwC,2FACtC,6BACF,iB,mDAFmG,+CDtE/G,iBAqEI,WAAoB2E,EAAsC2yB,EAA8CxyB,GAApF,KAAAH,WAAsC,KAAA2yB,oBAA8C,KAAAxyB,cAzCxG,KAAAC,YAAoB,IAAIC,KAExB,KAAAxS,SAAmB,EAInB,KAAA0Q,QAAkB,KAElB,KAAA+B,UAAoB,EAEpB,KAAA86B,aAAuB,EAKb,KAAAj4B,SAAW,IAAI,EAAA7X,aAEf,KAAAgtD,gBAAkB,IAAI,EAAAhtD,aAEtB,KAAAwrC,OAAS,IAAI,EAAAxrC,aAad,KAAAs4B,gBAA0B,EAMnC,KAAAuX,kBAA4B,E,OAX5B,sBAAa,qCAAsB,C,IAAnC,SAAoChtC,GAChCpC,KAAKyvC,0BAA4Bx/B,KAAKmL,MAAMnL,KAAKC,UAAU9N,IAC3DpC,KAAKwsD,kBAAoBpqD,G,gCAc7B,YAAA5C,SAAA,aAGA,YAAAwqC,uBAAA,WAGI,IAFA,IAAIE,EAAalqC,KAAKmqC,yBAAyBC,UAEtCzlC,EAAI,EAAGA,EAAIulC,EAAWloC,OAAQ2C,IAAK,CAExC,IADYulC,EAAWvlC,GACZkU,MACP,OAAO,EAIf,OAAO,GAGX,YAAAo3B,aAAA,WACIjwC,KAAKqvC,aAAc,EAEnBrvC,KAAK8B,QAAU9B,KAAKgqC,yBAEpB,IAAIyiB,EAAczsD,KAAKwsD,kBAAkBlzC,WAAqB,SAAEua,OAEhE7zB,KAAKqvC,YAAcrvC,KAAKoU,YAAY87B,YAAYuc,IAGpD,YAAAj4C,KAAA,SAAKyG,EAAoByxC,GACrB1sD,KAAK+qC,OAAO/wB,KAAKiB,GAEjBjb,KAAK0sD,sBAAwBA,GAGjC,YAAAnc,gBAAA,SAAgB7uC,GACZ,IAAIwvC,EAA0BlxC,KAAKwsD,kBAAkBlzC,WAAqB,SAAEua,OAExE5Y,EAAqB,IAAI,EAAA48B,cAC7B58B,EAAI0d,UAAY,KAChB1d,EAAImsB,QAAU,KAEV1lC,GAAYA,EAASU,MACrB6Y,EAAI7Y,MAAQV,EAASU,MAErB6Y,EAAI7Y,MAAQ,CAAEf,KAAMrB,KAAK8T,cAAchU,aAAc6B,YAAa,IAG9B,iBAApC3B,KAAK8T,cAAchU,aACnBmb,EAAI7Y,MAAMf,KAAO,eAC0B,YAApCrB,KAAK8T,cAAchU,aAC1Bmb,EAAI7Y,MAAMf,KAAO,UAC0B,UAApCrB,KAAK8T,cAAchU,aAC1Bmb,EAAI7Y,MAAMf,KAAO,QAC0B,eAApCrB,KAAK8T,cAAchU,aAC1Bmb,EAAI7Y,MAAMf,KAAO,aAC0B,SAApCrB,KAAK8T,cAAchU,aAC1Bmb,EAAI7Y,MAAMf,KAAO,OAC0B,cAApCrB,KAAK8T,cAAchU,eAC1Bmb,EAAI7Y,MAAMf,KAAO,aAGrB6vC,EAAOnuC,KAAKkY,GAEZjb,KAAK4mC,kBAAkBl0B,iBAG3B,YAAAi+B,eAAA,SAAe59B,GACX,IAAI8oB,EAA4B,GAQhC,OANA77B,KAAKwsD,kBAAkBlzC,WAAWvG,EAAU/E,MAAM6lB,OAAOhuB,SAAQ,SAAA8pC,GAC7DA,EAAWvtC,MAAMkR,aAAazN,SAAQ,SAAAiuB,GAClC+H,EAAS94B,KAAK+wB,SAIf+H,GAGX,YAAAiV,oBAAA,SAAoBhB,GAChB,IAAIiB,EAAS,KAQb,OANAjB,EAAOx8B,aAAazN,SAAQ,SAAAmrC,GACF,kBAAlBA,EAAOlB,SACPiB,EAASC,EAAO5uC,UAIjB2uC,GAGX,YAAA4b,iBAAA,SAAiB1xC,EAAoB6Y,GACjC7Y,EAAI7Y,MAAQ,IAAIkS,KAAKwf,GAAKC,UAAU/iB,YAGxC,YAAA1Q,OAAA,SAAOw7B,GAIH,IAHA,IAAIhI,EAAM9zB,KAAKwsD,kBAAkBlzC,WAAqB,SAElDgT,GAAY,EACP3nB,EAAI,EAAGA,EAAImvB,EAAID,OAAO7xB,OAAQ2C,IAAK,CAC7BmvB,EAAID,OAAOlvB,GAEbg0B,YAAcmD,EAAQnD,YAC3BrM,EAAW3nB,GAIf2nB,GAAY,GACZwH,EAAID,OAAO/wB,OAAOwpB,EAAU,IAIpC,YAAAzU,WAAA,SAAWC,GACP,IACI2wB,EADamkB,EAAOC,WAAW/0C,GACXg1C,eAAe,KACvC,OAAOF,IAASnkB,OAAOA,IAG3B,YAAAskB,YAAA,SAAYpd,EAAYr2B,GAChBq2B,EAAWvI,UAAY,EAAA4lB,QACvBrd,EAAWvI,QAAU,IAAI9yB,KAEzBq7B,EAAWvI,QAAU,EAAA4lB,QAGzBhtD,KAAKiwC,gBAGT,YAAAjtC,KAAA,SAAKkuC,GAEDA,EAAOluC,MAAK,SAASC,EAAGC,GACpB,OAAmB,MAAfD,EAAE01B,WAAqC,KAAhB11B,EAAE01B,UAClB,EACe,MAAfz1B,EAAEy1B,WAAqC,KAAhBz1B,EAAEy1B,WACxB,EAGK,IAAIrkB,KAAKrR,EAAE01B,WACZ,IAAIrkB,KAAKpR,EAAEy1B,eAKnC,YAAAs0B,4BAAA,SAA4BvrD,GACxB1B,KAAKuwC,gBAAgB7uC,IAGzB,YAAA6V,SAAA,WACIvX,KAAKoX,SAAS4C,KAAKha,KAAKwsD,oBAG5B,YAAA70C,SAAA,WACI3X,KAAKoX,SAAS4C,KAAKha,KAAKyvC,4B,iCApMnBtiC,GAAsB,yH,iCAAtBA,EAAsB,uD,GAAA,K,m4EC9CnC,0BACE,8BAKA,+BAEE,+BACE,4BAGE,4BACE,+BAoEF,iBAEF,iBAEA,4BAEE,4BACE,6BACE,kCAGA,mCAGF,iBACF,iBACF,iBAEF,iBACF,iBACF,kB,MApGQ,uDAY0C,wDA4E7B,gDAGA,kD,kUDjEL,CACR,CACI,EAAAsG,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,a,EAjBrC,GAwBa,EAAAxG,0B,+DAAAA,EAAsB,E,KAxBlC,EAAAgC,U,MAAU,CACPC,SAAU,iBACVC,YAAa,kCACbC,UAAW,CAAC,wBACZimC,KAAM,CAAE,eAAgB,QACxB1hC,WAAY,CACR,CACI,EAAAJ,QAAQ,YAAa,CACjB,EAAAG,WAAW,YAAa,CACpB,EAAAF,MAAM,CACFC,QAAS,IAEb,EAAAV,QAAQ,WAEZ,EAAAW,WAAW,SACP,EAAAX,QAAQ,QACJ,EAAAS,MAAM,CACFC,QAAS,e,mGASIw2B,yBAA0B,CAAF,C,KAA5D,EAAAK,a,MAAa,yBAiBJpzB,SAAQ,E,KAAjB,EAAAnQ,SAESslD,gBAAe,E,KAAxB,EAAAtlD,SAES8jC,OAAM,E,KAAf,EAAA9jC,SAEQ6M,cAAe,CAAF,C,KAArB,EAAAvE,QAMY29C,uBAAsB,E,KAAlC,EAAA39C,QAKQsoB,eAAgB,CAAF,C,KAAtB,EAAAtoB,W,6GElFL,W,OAIA,2B,OAMI,YAAAwoC,UAAA,SAAUC,EAAwB10C,GAC9B,IAAK00C,IAAU10C,EACX,OAAO00C,EAGX,IAAImV,EAAkC,GAKtC,OAJAntD,KAAKotD,2BAA2B9pD,EAAQ6pD,GAIjCnV,EAAM10C,QAAO,SAAAsmB,GAAQ,OAA8C,IAA9CujC,EAAsB/5C,QAAQwW,EAAK5b,UAGnE,YAAAo/C,2BAAA,SAA2B9pD,EAAyB6pD,GAApD,WACI7pD,EAAOuC,SAAQ,SAAAq0C,GACX,EAAK9wB,sBAAsB8wB,EAAGiT,OAItC,YAAA/jC,sBAAA,SAAsB5K,EAAqB2uC,GAA3C,WACIA,EAAsBpqD,KAAKyb,EAAK1K,eAEhC0K,EAAK9C,SAAS7V,SAAQ,SAAAwb,GAClB,EAAK+H,sBAAsB/H,EAAO8rC,O,iCAzBjCljD,I,kDAAAA,EAAiB,U,EAJ9B,GAIa,EAAAA,qB,+DAAAA,EAAiB,E,KAJ7B,EAAAguC,K,MAAK,CACFzhB,KAAM,gBACN0hB,MAAM,M,2HCNV,W,OAEA,2B,OAMI,YAAAH,UAAA,SAAUjgC,GACN,OAAKA,EAIE,IAAIxD,KAAKwD,GAAMic,UAHXjc,G,iCAJNlQ,I,oDAAAA,EAAmB,U,EAJhC,GAIa,EAAAA,uB,+DAAAA,EAAmB,E,KAJ/B,EAAAqwC,K,MAAK,CACFzhB,KAAM,kBACN0hB,MAAM,M,6HCJV,WACA,OACA,QAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,S,eAEMmV,EAAiB,CACnB,CACIC,KAAM,GACN5X,UAAW,EAAAzsC,mBACXskD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,cACN5X,UAAW,EAAAzsC,mBACXskD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,OACN5X,UAAW,EAAAvqC,kBACXoiD,YAAa,CAAC,EAAAE,kBAElB,CACIH,KAAM,kBACN5X,UAAW,EAAAtqC,2BACXmiD,YAAa,CAAC,EAAAG,mBAElB,CACIJ,KAAM,uBACN5X,UAAW,EAAAtqC,2BACXmiD,YAAa,CAAC,EAAAG,mBAElB,CACIJ,KAAM,eACN5X,UAAW,EAAAhqC,2BACX6hD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,iBACN5X,UAAW,EAAAzpC,uBACXshD,YAAa,CAAC,EAAAE,kBAElB,CACIH,KAAM,WACN5X,UAAW,EAAAxpC,aACXqhD,YAAa,CAAC,EAAAE,kBAElB,CACIH,KAAM,8BACN5X,UAAW,EAAA/pC,oBACX4hD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,wBACN5X,UAAW,EAAA3pC,wBACXwhD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,iBACN5X,UAAW,EAAA5qC,6BACXyiD,YAAa,CAAC,EAAAG,mBAElB,CACIJ,KAAM,QACN5X,UAAW,EAAAjpC,oBACX8gD,YAAa,CAAC,EAAAE,kBAElB,CACIH,KAAM,0BACN5X,UAAW,EAAAhpC,sCACX6gD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,8BACN5X,UAAW,EAAA9oC,+BACX2gD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,mBACN5X,UAAW,EAAA5oC,yBACXygD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,gFACN5X,UAAW,EAAA5oC,yBACXygD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,+FACN5X,UAAW,EAAA5oC,yBACXygD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,gEACN5X,UAAW,EAAA3oC,gCACXwgD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,sEACN5X,UAAW,EAAA3oC,gCACXwgD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,gFACN5X,UAAW,EAAA3oC,gCACXwgD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,+FACN5X,UAAW,EAAA3oC,gCACXwgD,YAAa,CAAC,EAAAC,YAElB,CACIF,KAAM,oBACN5X,UAAW,EAAA7oC,qBACX0gD,YAAa,CAAC,EAAAE,mBAItB,2B,wCAOa3kD,I,gCAAAA,I,qCAJE,CACP,CAAEm4B,QAAS,EAAA0sB,iBAAkBC,SAAU,EAAAC,uBAC1C,SAJQ,CAAC,EAAA7lD,aAAa8lD,SAAST,IACtB,EAAArlD,gB,EAFd,GAOa,EAAAc,yB,gEAAAA,EAAqB,mCALpB,EAAAd,iB,+DAKDc,EAAqB,E,KAPjC,EAAAsE,S,MAAS,CACNC,QAAS,CAAC,EAAArF,aAAa8lD,SAAST,IAChCh/C,QAAS,CAAC,EAAArG,cACVuF,UAAW,CACP,CAAE0zB,QAAS,EAAA0sB,iBAAkBC,SAAU,EAAAC,2B","file":"1.chunk.js","sourcesContent":["import { Injectable, Output, EventEmitter } from \"@angular/core\";\n\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { Map, LngLat, LngLatBounds } from \"mapbox-gl\";\n\nimport { Layer } from \"../component/geoobject-shared-attribute-editor/manage-versions-model\";\n\n// eslint-disable-next-line no-unused-vars\ndeclare let acp: any;\n\n/**\n * This is a generic service used for rendering layers from ValueOverTime objects\n */\n@Injectable()\nexport class GeometryService {\n\n    map: Map;\n\n    layers: Layer[] = [];\n\n    geometryType: String;\n\n    readOnly: boolean;\n\n    // @Output() layersChange: EventEmitter<VersionOverTimeLayer[]> = new EventEmitter();\n\n    editingControl: any = null;\n\n    simpleEditControl: any = null;\n\n    editingLayer: Layer;\n\n    @Output() geometryChange = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    ngOnInit() {\n        window.onbeforeunload = () => this.destroy();\n    }\n\n    initialize(map: Map, geometryType: String, readOnly: boolean) {\n        this.map = map;\n        this.geometryType = geometryType;\n        // this.editingControl = null;\n\n        this.addLayers();\n\n        this.map.on(\"draw.create\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.delete\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.update\", () => {\n            this.saveEdits();\n        });\n    }\n\n    destroy(destroyMap: boolean = true): void {\n        if (this.editingControl != null) {\n            this.map.removeControl(this.editingControl);\n            this.editingControl = null;\n        }\n\n        if (this.map != null && destroyMap) {\n            this.map.remove();\n            this.map = null;\n        } else if (this.map != null) {\n            this.removeLayers();\n        }\n\n        this.editingLayer = null;\n        this.layers = [];\n    }\n\n    startEditing(layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        this.editingLayer = layer;\n        this.editingLayer.isEditing = true;\n\n        if (!this.readOnly) {\n            this.enableEditing();\n        }\n\n        this.addEditingLayers();\n    }\n\n    stopEditing(rerender: boolean = true) {\n        if (this.isEditing()) {\n            this.saveEdits(rerender);\n\n            this.editingLayer.isEditing = false;\n            this.editingLayer = null;\n\n            this.editingControl.deleteAll();\n            this.map.removeControl(this.editingControl);\n\n            this.editingControl = null;\n        }\n    }\n\n    isEditing(): boolean {\n        return this.editingLayer != null;\n    }\n\n    setPointCoordinates(lat: any, long: any) {\n        if (this.editingLayer != null) {\n            this.editingControl.set({\n                type: \"FeatureCollection\",\n                features: [{\n                    id: this.editingLayer.oid,\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: { type: \"Point\", coordinates: [long, lat] }\n                }]\n            });\n\n            this.editingControl.changeMode(\"simple_select\", { featureIds: this.editingLayer.oid });\n\n            this.saveEdits();\n\n            /*\n            this.editingLayer.value = {\n              type: 'FeatureCollection',\n              features: [{\n              id: this.editingLayer.oid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ long, lat ] }\n              }]\n            };\n            */\n\n            /*\n            this.editingLayer.value.coordinates = [ -97.4870830718814, 41.84836050415993 ];\n\n            this.editingControl.set(this.editingLayer.value);\n\n            this.removeLayers();\n            this.addLayers();\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.editingLayer.oid } );\n            */\n        }\n    }\n\n    isValid(): boolean {\n        if (!this.readOnly) {\n            let isValid: boolean = false;\n\n            if (this.editingControl != null) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if (featureCollection.features.length > 0) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    saveEdits(rerender: boolean = true): void {\n        if (this.editingLayer != null) {\n            let geoJson = this.getDrawGeometry();\n\n            this.editingLayer.editPropagator.value = geoJson;\n\n            if (rerender) {\n                this.removeLayers();\n                this.addLayers();\n            }\n        }\n    }\n\n    public reload(): void {\n        if (this.map != null) {\n            this.removeLayers();\n            this.addLayers();\n\n            if (this.editingControl != null) {\n                this.editingControl.deleteAll();\n            }\n\n            this.addEditingLayers();\n        }\n    }\n\n    setEditing(isEditing: boolean, layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        layer.isEditing = isEditing;\n\n        if (isEditing) {\n            this.startEditing(layer);\n        }\n    }\n\n    setRendering(isRendering: boolean, layer: Layer) {\n        layer.isRendering = isRendering;\n        this.addLayer(layer);\n    }\n\n    addLayer(newLayer: Layer) {\n        let existingIndex = this.layers.findIndex((findLayer: Layer) => { return findLayer.oid === newLayer.oid; });\n\n        if (existingIndex !== -1) {\n            this.layers.splice(existingIndex, 1);\n            this.layers.push(newLayer);\n        } else {\n            this.layers.push(newLayer);\n        }\n\n        if (newLayer.isEditing) {\n            this.startEditing(newLayer);\n        }\n\n        this.layers = this.layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.removeLayers();\n        this.addLayers();\n    }\n\n    getLayers(): Layer[] {\n        return this.layers;\n    }\n\n    getRenderedLayers(): Layer[] {\n        return this.layers.filter(layer => layer.isRendering);\n    }\n\n    setLayers(layers: Layer[]): void {\n        this.removeLayers();\n\n        this.layers = layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.addLayers();\n    }\n\n    enableEditing(): void {\n        if (this.editingControl == null) {\n            if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: false,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n                this.editingControl = new MapboxDraw({\n                    userProperties: true,\n                    controls: {\n                        point: true,\n                        line_string: false,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    },\n                    styles: [\n                        {\n                            id: \"highlight-active-points\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"true\"]],\n                            paint: {\n                                \"circle-radius\": 13,\n                                \"circle-color\": \"#33FFF9\",\n                                \"circle-stroke-width\": 4,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        },\n                        {\n                            id: \"points-are-blue\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"false\"]],\n                            paint: {\n                                \"circle-radius\": 10,\n                                \"circle-color\": \"#800000\",\n                                \"circle-stroke-width\": 2,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        }\n                    ]\n                });\n            } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: true,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            }\n\n            if (this.map.getSource(\"mapbox-gl-draw-cold\") == null) {\n                this.map.addControl(this.editingControl);\n            }\n        }\n    }\n\n    addEditingLayers(): void {\n        if (this.editingLayer != null && this.editingControl != null) {\n            let val = this.editingLayer.editPropagator.value;\n\n            if (val) {\n                this.editingControl.add(this.editingLayer.editPropagator.value);\n            }\n        }\n    }\n\n    removeSource(prefix: string): void {\n        if (!this.map) {\n            return;\n        }\n\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            if (this.map.getLayer(sourceName + \"-polygon\") != null) {\n                this.map.removeLayer(sourceName + \"-polygon\");\n            }\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            if (this.map.getLayer(sourceName + \"-point\") != null) {\n                this.map.removeLayer(sourceName + \"-point\");\n            }\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\") {\n            if (this.map.getLayer(sourceName + \"-line\") != null) {\n                this.map.removeLayer(sourceName + \"-line\");\n            }\n        }\n\n        if (this.map.getSource(sourceName) != null) {\n            this.map.removeSource(sourceName);\n        }\n    }\n\n    removeLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n                this.removeSource(layer.oid);\n            }\n        }\n    }\n\n    addLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n\n                if (layer.isRendering) {\n                    this.renderGeometryAsLayer(layer.editPropagator == null ? layer.geojson : layer.editPropagator.value, layer.oid, layer.color);\n                }\n            }\n        }\n    }\n\n    renderGeometryAsLayer(geometry: any, sourceName: string, color: string) {\n        let finalSourceName: string = sourceName + \"-geoobject\";\n\n        if (!this.map) {\n            return;\n        }\n        if (!geometry) {\n            return;\n        }\n\n        this.map.addSource(finalSourceName, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n            // Polygon Layer\n            this.map.addLayer({\n                id: finalSourceName + \"-polygon\",\n                type: \"fill\",\n                source: finalSourceName,\n                paint: {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7\n                }\n            });\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            // Point layer\n            this.map.addLayer({\n                id: finalSourceName + \"-point\",\n                type: \"circle\",\n                source: finalSourceName,\n                paint: {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                }\n            });\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n            this.map.addLayer({\n                id: finalSourceName + \"-line\",\n                source: finalSourceName,\n                type: \"line\",\n                layout: {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                paint: {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            });\n        }\n\n        (<any> this.map.getSource(finalSourceName)).setData(geometry);\n    }\n\n    getDrawGeometry(): any {\n        if (this.editingControl != null) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if (featureCollection.features.length > 0) {\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if (this.geometryType === \"MULTIPOLYGON\") {\n                    let polygons = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPolygon\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                polygons.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            polygons.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: \"MultiPolygon\"\n                    };\n                } else if (this.geometryType === \"MULTIPOINT\") {\n                    let points = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPoint\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                points.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            points.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: \"MultiPoint\"\n                    };\n                } else if (this.geometryType === \"MULTILINE\") {\n                    let lines = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiLineString\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                lines.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            lines.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: \"MultiLineString\"\n                    };\n                } else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public createEmptyGeometryValue(): any {\n        let value = { type: this.geometryType, coordinates: [] };\n\n        if (this.geometryType === \"MULTIPOLYGON\") {\n            value.type = \"MultiPolygon\";\n        } else if (this.geometryType === \"POLYGON\") {\n            value.type = \"Polygon\";\n        } else if (this.geometryType === \"POINT\") {\n            value.type = \"Point\";\n        } else if (this.geometryType === \"MULTIPOINT\") {\n            value.type = \"MultiPoint\";\n        } else if (this.geometryType === \"LINE\") {\n            value.type = \"Line\";\n        } else if (this.geometryType === \"MULTILINE\") {\n            value.type = \"MultiLine\";\n        }\n\n        return value;\n    }\n\n    zoomToLayersExtent(): void {\n        this.layers.forEach(layer => {\n            if (layer.geojson != null) {\n                if (this.geometryType === \"MULTIPOINT\" || this.geometryType === \"POINT\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(coord => {\n                            bounds.extend(coord);\n                        });\n\n                        let center = bounds.getCenter();\n                        let pt = new LngLat(center.lng, center.lat);\n\n                        this.map.flyTo({\n                            center: pt,\n                            zoom: 9,\n                            essential: true\n                        });\n                    }\n                } else if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(polys => {\n                            polys.forEach(subpoly => {\n                                subpoly.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(lines => {\n                            lines.forEach(subline => {\n                                subline.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule, DatePipe } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\n\nimport { LocalizedInputComponent } from \"./component/form-fields/localized-input/localized-input.component\";\nimport { LocalizedTextComponent } from \"./component/form-fields/localized-text/localized-text.component\";\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { CreateHierarchyTypeModalComponent } from \"./component/hierarchy/modals/create-hierarchy-type-modal.component\";\nimport { AddChildToHierarchyModalComponent } from \"./component/hierarchy/modals/add-child-to-hierarchy-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./component/hierarchy/modals/create-geoobjtype-modal.component\";\nimport { ManageAttributesModalComponent } from \"./component/hierarchy/geoobjecttype-management/manage-attributes-modal.component\";\nimport { DefineAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component\";\nimport { EditAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component\";\nimport { ShapefileModalComponent } from \"./component/importer/modals/shapefile-modal.component\";\nimport { AttributesPageComponent } from \"./component/importer/modals/attributes-page.component\";\nimport { LocationPageComponent } from \"./component/importer/modals/location-page.component\";\nimport { LocationProblemPageComponent } from \"./component/importer/modals/location-problem-page.component\";\nimport { LocationProblemComponent } from \"./component/importer/modals/location-problem.component\";\nimport { TermProblemPageComponent } from \"./component/importer/modals/term-problem-page.component\";\nimport { TermProblemComponent } from \"./component/importer/modals/term-problem.component\";\nimport { SpreadsheetModalComponent } from \"./component/importer/modals/spreadsheet-modal.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { TermOptionWidgetComponent } from \"./component/hierarchy/geoobjecttype-management/term-option-widget.component\";\nimport { AttributeInputComponent } from \"./component/hierarchy/geoobjecttype-management/attribute-input.component\";\nimport { EditTermOptionInputComponent } from \"./component/hierarchy/geoobjecttype-management/edit-term-option-input.component\";\nimport { ManageTermOptionsComponent } from \"./component/hierarchy/geoobjecttype-management/manage-term-options.component\";\nimport { GeoObjectTypeInputComponent } from \"./component/hierarchy/geoobjecttype-management/geoobjecttype-input.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./component/hierarchy/modals/manage-geoobjecttype-modal.component\";\nimport { MasterListManagerComponent } from \"./component/master-list/master-list-manager.component\";\nimport { PublishModalComponent } from \"./component/master-list/publish-modal.component\";\nimport { ExportFormatModalComponent } from \"./component/master-list/export-format-modal.component\";\nimport { RequestTableComponent } from \"./component/crtable/request-table.component\";\nimport { CreateUpdateGeoObjectDetailComponent } from \"./component/crtable/action-detail/create-update-geo-object/detail.component\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component\";\nimport { ManageVersionsComponent } from \"./component/geoobject-shared-attribute-editor/manage-versions.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { GeoObjectEditorComponent } from \"./component/geoobject-editor/geoobject-editor.component\";\nimport { GeoObjectEditorMapComponent } from \"./component/geoobject-editor-map/geoobject-editor-map.component\";\nimport { SimpleEditControl } from \"./component/geoobject-editor-map/simple-edit-control/simple-edit-control.component\";\nimport { CascadingGeoSelector } from \"./component/cascading-geo-selector/cascading-geo-selector\";\nimport { TreeGeoSelector } from \"./component/tree-geo-selector/tree-geo-selector\";\nimport { ActionDetailModalComponent } from \"./component/crtable/action-detail/action-detail-modal.component\";\nimport { DataImporterComponent } from \"./component/importer/dataimporter.component\";\nimport { DataExportComponent } from \"./component/data-export/data-export.component\";\nimport { MasterListComponent } from \"./component/master-list/master-list.component\";\nimport { PublishedMasterListHistoryComponent } from \"./component/master-list/published-master-list-history.component\";\nimport { MasterListHistoryComponent } from \"./component/master-list/master-list-history.component\";\nimport { MasterListViewComponent } from \"./component/master-list/master-list-view.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { JobConflictModalComponent } from \"./component/scheduled-jobs/conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./component/scheduled-jobs/conflict-widgets/reupload-modal.component\";\nimport { ParentReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component\";\nimport { TermReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component\";\nimport { RowValidationProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component\";\nimport { StepIndicatorComponent } from \"./component/scheduled-jobs/step-indicator.component\";\nimport { ImportProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/import-problem-widget.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\n\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigModalComponent } from \"./component/synchronization-config/synchronization-config-modal.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\n\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { DatasetLocationManagerComponent } from \"./component/location-manager/dataset-location-manager.component\";\nimport { ContextLayerModalComponent } from \"./component/location-manager/context-layer-modal.component\";\nimport { LayerPanelComponent } from \"./component/location-manager/layer-panel.component\";\nimport { FeaturePanelComponent } from \"./component/location-manager/feature-panel.component\";\nimport { GeometryPanelComponent } from \"./component/location-manager/geometry-panel.component\";\n\nimport { GeoObjectAttributeCodeValidator } from \"./factory/form-validation.factory\";\n\nimport { GeoObjectTypePipe } from \"./pipe/geoobjecttype.pipe\";\nimport { GeoObjectAttributeExcludesPipe } from \"./pipe/geoobject-attribute-excludes.pipe\";\nimport { ToEpochDateTimePipe } from \"./pipe/to-epoch-date-time.pipe\";\nimport { RegistryService } from \"./service/registry.service\";\nimport { TaskService } from \"./service/task.service\";\nimport { HierarchyService } from \"./service/hierarchy.service\";\nimport { SynchronizationConfigService } from \"./service/synchronization-config.service\";\nimport { LocalizationManagerService } from \"./service/localization-manager.service\";\nimport { ChangeRequestService } from \"./service/change-request.service\";\nimport { IOService } from \"./service/io.service\";\nimport { MapService } from \"./service/map.service\";\nimport { GeoObjectTypeManagementService } from \"./service/geoobjecttype-management.service\";\n\nimport { RegistryRoutingModule } from \"./registry-routing.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { AccordionModule } from \"ngx-bootstrap/accordion\";\n\nimport \"../rxjs-extensions\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        TabsModule,\n        CollapseModule,\n        NgxPaginationModule,\n        SharedModule,\n        RegistryRoutingModule,\n        AccordionModule.forRoot()\n    ],\n    declarations: [\n        HierarchyComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        ManageVersionsComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        TreeGeoSelector,\n        ActionDetailModalComponent,\n        HierarchyComponent,\n        DataImporterComponent,\n        DataExportComponent,\n        // Master List screens\n        MasterListManagerComponent,\n        MasterListComponent,\n        MasterListHistoryComponent,\n        PublishedMasterListHistoryComponent,\n        PublishModalComponent,\n        MasterListViewComponent,\n        // Scheduled jobs\n        ExportFormatModalComponent,\n        ScheduledJobsComponent,\n        JobComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        ParentReferenceProblemWidgetComponent,\n        TermReferenceProblemWidgetComponent,\n        RowValidationProblemWidgetComponent,\n        StepIndicatorComponent,\n        ImportProblemWidgetComponent,\n        TaskViewerComponent,\n        // Synchronization Config\n        SynchronizationConfigManagerComponent,\n        SynchronizationConfigModalComponent,\n        SynchronizationConfigComponent,\n        SyncDetailsComponent,\n        // Location manager\n        LocationManagerComponent,\n        DatasetLocationManagerComponent,\n        ContextLayerModalComponent,\n        LayerPanelComponent,\n        FeaturePanelComponent,\n        GeometryPanelComponent\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        LocalizationManagerService,\n        ChangeRequestService,\n        IOService,\n        GeoObjectTypeManagementService,\n        RegistryService,\n        TaskService,\n        DatePipe,\n        ToEpochDateTimePipe,\n        StepIndicatorComponent,\n        SynchronizationConfigService\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        PublishModalComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        StepIndicatorComponent,\n        SynchronizationConfigModalComponent,\n        ContextLayerModalComponent\n    ]\n})\nexport class RegistryModule { }\n","var map = {\n\t\"./af\": 381,\n\t\"./af.js\": 381,\n\t\"./ar\": 382,\n\t\"./ar-dz\": 383,\n\t\"./ar-dz.js\": 383,\n\t\"./ar-kw\": 384,\n\t\"./ar-kw.js\": 384,\n\t\"./ar-ly\": 385,\n\t\"./ar-ly.js\": 385,\n\t\"./ar-ma\": 386,\n\t\"./ar-ma.js\": 386,\n\t\"./ar-sa\": 387,\n\t\"./ar-sa.js\": 387,\n\t\"./ar-tn\": 388,\n\t\"./ar-tn.js\": 388,\n\t\"./ar.js\": 382,\n\t\"./az\": 389,\n\t\"./az.js\": 389,\n\t\"./be\": 390,\n\t\"./be.js\": 390,\n\t\"./bg\": 391,\n\t\"./bg.js\": 391,\n\t\"./bm\": 392,\n\t\"./bm.js\": 392,\n\t\"./bn\": 393,\n\t\"./bn-bd\": 394,\n\t\"./bn-bd.js\": 394,\n\t\"./bn.js\": 393,\n\t\"./bo\": 395,\n\t\"./bo.js\": 395,\n\t\"./br\": 396,\n\t\"./br.js\": 396,\n\t\"./bs\": 397,\n\t\"./bs.js\": 397,\n\t\"./ca\": 398,\n\t\"./ca.js\": 398,\n\t\"./cs\": 399,\n\t\"./cs.js\": 399,\n\t\"./cv\": 400,\n\t\"./cv.js\": 400,\n\t\"./cy\": 401,\n\t\"./cy.js\": 401,\n\t\"./da\": 402,\n\t\"./da.js\": 402,\n\t\"./de\": 403,\n\t\"./de-at\": 404,\n\t\"./de-at.js\": 404,\n\t\"./de-ch\": 405,\n\t\"./de-ch.js\": 405,\n\t\"./de.js\": 403,\n\t\"./dv\": 406,\n\t\"./dv.js\": 406,\n\t\"./el\": 407,\n\t\"./el.js\": 407,\n\t\"./en-au\": 408,\n\t\"./en-au.js\": 408,\n\t\"./en-ca\": 409,\n\t\"./en-ca.js\": 409,\n\t\"./en-gb\": 410,\n\t\"./en-gb.js\": 410,\n\t\"./en-ie\": 411,\n\t\"./en-ie.js\": 411,\n\t\"./en-il\": 412,\n\t\"./en-il.js\": 412,\n\t\"./en-in\": 413,\n\t\"./en-in.js\": 413,\n\t\"./en-nz\": 414,\n\t\"./en-nz.js\": 414,\n\t\"./en-sg\": 415,\n\t\"./en-sg.js\": 415,\n\t\"./eo\": 416,\n\t\"./eo.js\": 416,\n\t\"./es\": 417,\n\t\"./es-do\": 418,\n\t\"./es-do.js\": 418,\n\t\"./es-mx\": 419,\n\t\"./es-mx.js\": 419,\n\t\"./es-us\": 420,\n\t\"./es-us.js\": 420,\n\t\"./es.js\": 417,\n\t\"./et\": 421,\n\t\"./et.js\": 421,\n\t\"./eu\": 422,\n\t\"./eu.js\": 422,\n\t\"./fa\": 423,\n\t\"./fa.js\": 423,\n\t\"./fi\": 424,\n\t\"./fi.js\": 424,\n\t\"./fil\": 425,\n\t\"./fil.js\": 425,\n\t\"./fo\": 426,\n\t\"./fo.js\": 426,\n\t\"./fr\": 427,\n\t\"./fr-ca\": 428,\n\t\"./fr-ca.js\": 428,\n\t\"./fr-ch\": 429,\n\t\"./fr-ch.js\": 429,\n\t\"./fr.js\": 427,\n\t\"./fy\": 430,\n\t\"./fy.js\": 430,\n\t\"./ga\": 431,\n\t\"./ga.js\": 431,\n\t\"./gd\": 432,\n\t\"./gd.js\": 432,\n\t\"./gl\": 433,\n\t\"./gl.js\": 433,\n\t\"./gom-deva\": 434,\n\t\"./gom-deva.js\": 434,\n\t\"./gom-latn\": 435,\n\t\"./gom-latn.js\": 435,\n\t\"./gu\": 436,\n\t\"./gu.js\": 436,\n\t\"./he\": 437,\n\t\"./he.js\": 437,\n\t\"./hi\": 438,\n\t\"./hi.js\": 438,\n\t\"./hr\": 439,\n\t\"./hr.js\": 439,\n\t\"./hu\": 440,\n\t\"./hu.js\": 440,\n\t\"./hy-am\": 441,\n\t\"./hy-am.js\": 441,\n\t\"./id\": 442,\n\t\"./id.js\": 442,\n\t\"./is\": 443,\n\t\"./is.js\": 443,\n\t\"./it\": 444,\n\t\"./it-ch\": 445,\n\t\"./it-ch.js\": 445,\n\t\"./it.js\": 444,\n\t\"./ja\": 446,\n\t\"./ja.js\": 446,\n\t\"./jv\": 447,\n\t\"./jv.js\": 447,\n\t\"./ka\": 448,\n\t\"./ka.js\": 448,\n\t\"./kk\": 449,\n\t\"./kk.js\": 449,\n\t\"./km\": 450,\n\t\"./km.js\": 450,\n\t\"./kn\": 451,\n\t\"./kn.js\": 451,\n\t\"./ko\": 452,\n\t\"./ko.js\": 452,\n\t\"./ku\": 453,\n\t\"./ku.js\": 453,\n\t\"./ky\": 454,\n\t\"./ky.js\": 454,\n\t\"./lb\": 455,\n\t\"./lb.js\": 455,\n\t\"./lo\": 456,\n\t\"./lo.js\": 456,\n\t\"./lt\": 457,\n\t\"./lt.js\": 457,\n\t\"./lv\": 458,\n\t\"./lv.js\": 458,\n\t\"./me\": 459,\n\t\"./me.js\": 459,\n\t\"./mi\": 460,\n\t\"./mi.js\": 460,\n\t\"./mk\": 461,\n\t\"./mk.js\": 461,\n\t\"./ml\": 462,\n\t\"./ml.js\": 462,\n\t\"./mn\": 463,\n\t\"./mn.js\": 463,\n\t\"./mr\": 464,\n\t\"./mr.js\": 464,\n\t\"./ms\": 465,\n\t\"./ms-my\": 466,\n\t\"./ms-my.js\": 466,\n\t\"./ms.js\": 465,\n\t\"./mt\": 467,\n\t\"./mt.js\": 467,\n\t\"./my\": 468,\n\t\"./my.js\": 468,\n\t\"./nb\": 469,\n\t\"./nb.js\": 469,\n\t\"./ne\": 470,\n\t\"./ne.js\": 470,\n\t\"./nl\": 471,\n\t\"./nl-be\": 472,\n\t\"./nl-be.js\": 472,\n\t\"./nl.js\": 471,\n\t\"./nn\": 473,\n\t\"./nn.js\": 473,\n\t\"./oc-lnc\": 474,\n\t\"./oc-lnc.js\": 474,\n\t\"./pa-in\": 475,\n\t\"./pa-in.js\": 475,\n\t\"./pl\": 476,\n\t\"./pl.js\": 476,\n\t\"./pt\": 477,\n\t\"./pt-br\": 478,\n\t\"./pt-br.js\": 478,\n\t\"./pt.js\": 477,\n\t\"./ro\": 479,\n\t\"./ro.js\": 479,\n\t\"./ru\": 480,\n\t\"./ru.js\": 480,\n\t\"./sd\": 481,\n\t\"./sd.js\": 481,\n\t\"./se\": 482,\n\t\"./se.js\": 482,\n\t\"./si\": 483,\n\t\"./si.js\": 483,\n\t\"./sk\": 484,\n\t\"./sk.js\": 484,\n\t\"./sl\": 485,\n\t\"./sl.js\": 485,\n\t\"./sq\": 486,\n\t\"./sq.js\": 486,\n\t\"./sr\": 487,\n\t\"./sr-cyrl\": 488,\n\t\"./sr-cyrl.js\": 488,\n\t\"./sr.js\": 487,\n\t\"./ss\": 489,\n\t\"./ss.js\": 489,\n\t\"./sv\": 490,\n\t\"./sv.js\": 490,\n\t\"./sw\": 491,\n\t\"./sw.js\": 491,\n\t\"./ta\": 492,\n\t\"./ta.js\": 492,\n\t\"./te\": 493,\n\t\"./te.js\": 493,\n\t\"./tet\": 494,\n\t\"./tet.js\": 494,\n\t\"./tg\": 495,\n\t\"./tg.js\": 495,\n\t\"./th\": 496,\n\t\"./th.js\": 496,\n\t\"./tk\": 497,\n\t\"./tk.js\": 497,\n\t\"./tl-ph\": 498,\n\t\"./tl-ph.js\": 498,\n\t\"./tlh\": 499,\n\t\"./tlh.js\": 499,\n\t\"./tr\": 500,\n\t\"./tr.js\": 500,\n\t\"./tzl\": 501,\n\t\"./tzl.js\": 501,\n\t\"./tzm\": 502,\n\t\"./tzm-latn\": 503,\n\t\"./tzm-latn.js\": 503,\n\t\"./tzm.js\": 502,\n\t\"./ug-cn\": 504,\n\t\"./ug-cn.js\": 504,\n\t\"./uk\": 505,\n\t\"./uk.js\": 505,\n\t\"./ur\": 506,\n\t\"./ur.js\": 506,\n\t\"./uz\": 507,\n\t\"./uz-latn\": 508,\n\t\"./uz-latn.js\": 508,\n\t\"./uz.js\": 507,\n\t\"./vi\": 509,\n\t\"./vi.js\": 509,\n\t\"./x-pseudo\": 510,\n\t\"./x-pseudo.js\": 510,\n\t\"./yo\": 511,\n\t\"./yo.js\": 511,\n\t\"./zh-cn\": 512,\n\t\"./zh-cn.js\": 512,\n\t\"./zh-hk\": 513,\n\t\"./zh-hk.js\": 513,\n\t\"./zh-mo\": 514,\n\t\"./zh-mo.js\": 514,\n\t\"./zh-tw\": 515,\n\t\"./zh-tw.js\": 515\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 516;","import { ChangeRequestService } from './change-request.service';\nimport { GeoObjectTypeManagementService } from './geoobjecttype-management.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\nimport { GeometryService} from './geometry.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tGeoObjectTypeManagementService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService,\n\tGeometryService\n];\n\nexport * from './change-request.service';\nexport * from './geoobjecttype-management.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';\nexport * from './geometry.service';","/* eslint-disable padded-blocks */\nimport { GeoObjectType } from \"./registry\";\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\n    matchStrategy: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    formatType: string;\n    objectType: string;\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n    isExternal: string;\n    externalSystemId: string;\n    externalSystem?: any;\n    revealGeometryColumn?: any;\n    onValidChange: any;\n    externalIdAttributeTarget: string;\n}\n\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-text\",\n    templateUrl: \"./localized-text.component.html\",\n    styleUrls: [\"./localized-text.css\"],\n})\nexport class LocalizedTextComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Input() public inlinelayout: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","\n<div *ngFor=\"let localeValue of value.localeValues\">\n  <div [ngClass]=\"{'row' : inlinelayout, 'row-holder' : !inlinelayout}\" >\n    <div [ngClass]=\"{'col-md-12' : inlinelayout}\">\n      <div class=\"form-group\">\n        <div [ngClass]=\"{'label-holder' : !inlinelayout}\" >\n          <label>\n            <localize [key]=\"key\"></localize>\n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n        </div>\n        <div [ngClass]=\"{'holder' : !inlinelayout}\">\n          <span class=\"text\">\n            <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { ImportConfiguration } from \"@registry/model/io\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    implementDecisions(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(acp + \"/changerequest/implement-decisions\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    update(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(acp + \"/changerequest/update\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setActionStatus(actionOid: String, status: String): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(acp + \"/changerequest/set-action-status\", JSON.stringify({ actionOid: actionOid, status: status }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAllRequests(pageSize: number, pageNumber: number, filter: string, oid:string): Promise<PageResult<ChangeRequest>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"filter\", filter);\n\n        if (oid != null) {\n            params = params.set(\"oid\", oid);\n        }\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<ChangeRequest>>(acp + \"/changerequest/get-all-requests\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    rejectChangeRequest(request: ChangeRequest): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<void>(acp + \"/changerequest/reject\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(requestId: string): Promise<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<string>(acp + \"/changerequest/delete\", JSON.stringify({ requestId: requestId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteFile(crOid: string, fileId: string): Promise<ImportConfiguration> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ImportConfiguration>(acp + \"/changerequest/delete-file-cr\", JSON.stringify({ crOid: crOid, vfOid: fileId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\nimport { ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n\r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { GeoObjectType, AttributeType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"attribute-input\",\n    templateUrl: \"./attribute-input.component.html\",\n    styleUrls: [\"./attribute-input.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\"))\n            // transition('show => none', animate('100ms'))\n        ])\n    ]\n})\nexport class AttributeInputComponent implements OnInit {\n\n    @Input() disableCodeField: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() isDecimal: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType;\n    @Output() attributeChange = new EventEmitter<AttributeType>();\n    message: string = null;\n\n    state: string = \"none\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges() {\n\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    toggleIsUnique(): void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.attribute.code) {\n            // if code has a space\n            if (this.attribute.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            if (this.attribute.label.localeValues[0].value.length === 0) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == \"\")) {\n                return false;\n            }\n\n            if (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == \"\")) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterList, MasterListByOrg } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"publish-modal\",\n    templateUrl: \"./publish-modal.component.html\",\n    styleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\n    currentDate: Date = new Date();\n    message: string = null;\n\n    master: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onMasterListChange: Subject<MasterList>;\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n    edit: boolean = false;\n\n    isNew: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onMasterListChange = new Subject();\n\n        if (!this.master || !this.readonly) {\n            this.iService.listGeoObjectTypes(true).then(types => {\n                let myOrgTypes = [];\n                for (let i = 0; i < types.length; ++i) {\n                    const orgCode = types[i].orgCode;\n                    const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n                this.types = myOrgTypes;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.master = {\n                oid: null,\n                typeCode: \"\",\n                displayLabel: this.lService.create(),\n                code: \"\",\n                representativityDate: null,\n                publishingStartDate: null,\n                publishDate: null,\n                listAbstract: \"\",\n                process: \"\",\n                progress: \"\",\n                accessConstraints: \"\",\n                useConstraints: \"\",\n                acknowledgements: \"\",\n                disclaimer: \"\",\n                contactName: \"\",\n                organization: \"\",\n                telephoneNumber: \"\",\n                email: \"\",\n                hierarchies: [],\n                subtypeHierarchies: [],\n                leaf: false,\n                frequency: \"ANNUAL\",\n                isMaster: null,\n                visibility: null\n            };\n        }\n    }\n\n    ngAfterContentInit() {\n\n    }\n\n    init(org: MasterListByOrg): void {\n        this.master.organization = org.oid;\n    }\n\n    getIsDisabled(event): boolean {\n        let elClasses = event.target.classList;\n        for (let i = 0; i < elClasses.length; i++) {\n            let c = elClasses[i];\n            if (c === \"disabled\") {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onChange(): void {\n        if (this.master.typeCode != null && this.master.typeCode.length > 0) {\n            this.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n                this.master.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.iService.getHierarchiesForSubtypes(this.master.typeCode, false).then(hierarchies => {\n                this.master.subtypeHierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.master.hierarchies = [];\n        }\n    }\n\n    onSubmit(): void {\n        this.service.createMasterList(this.master).then(response => {\n            this.onMasterListChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    ngOnDestroy() {\n        this.onMasterListChange.unsubscribe();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n        <h1 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h1>\n        <h1 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h1>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> \n                    <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && (readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                  <input [(ngModel)]=\"master.typeLabel.localizedValue\" name=\"typeCode\" type=\"text\" class=\"form-control\" disabled />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"BIANNUAL\"><localize key=\"georegistry.frequency.biannual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.publishingStartDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                              {{formatDate(master.publishingStartDate)}}\n                    </span>\n                    <date-field *ngIf=\"!readonly\" [(value)]=\"master.publishingStartDate\" [classNames]=\"['form-control']\" label=\"\" [inputName]=\"'publishingStartDate'\" \n                        [allowFutureDates]=\"false\" [required]=\"false\" [disable]=\"readonly\"></date-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div *ngIf=\"master.subtypeHierarchies.length > 0\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> <localize key=\"masterlist.subtypeHierarchies\"></localize> </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let hierarchy of master.subtypeHierarchies\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\" [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { GeometryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, AttributeTermType, Term, HierarchyOverTime } from \"@registry/model/registry\";\nimport {  UpdateAttributeAction, AbstractAction, ChangeRequest } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\n\nimport Utils from \"../../utility/Utils\";\n\n@Component({\n    selector: \"geoobject-shared-attribute-editor\",\n    templateUrl: \"./geoobject-shared-attribute-editor.component.html\",\n    styleUrls: [\"./geoobject-shared-attribute-editor.css\"],\n    providers: [DatePipe],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"slide\", [\n                state(\"left\", style({ left: 0 })),\n                state(\"right\", style({ left: \"100%\" })),\n                transition(\"* => *\", animate(200))\n            ])\n        ]]\n})\n\n/**\n * IMPORTANT\n * This component is shared between:\n * - crtable (request-table.component.ts)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget (feature-panel.component.ts)\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    // The changed state of the GeoObject in the GeoRegistry\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    // Array of Actions that will be part of a Change Request Object\n    @Input() actions: AbstractAction[] = [];\n\n    calculatedGeoObject: any = {};\n\n    showAllInstances: boolean = false;\n\n    tabIndex: number = 0;\n\n    isContributorOnly: boolean = false;\n\n    @Input() animate: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n//    @Input() action: Action = null;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isEditingGeometries = false;\n\n    @Input() isGeometryInlined = false;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Output() onManageVersion = new EventEmitter<AttributeType>();\n\n    // Observable subject for MasterList changes.  Called when an update is successful\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Input() customEvent: boolean = false;\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n    isValid: boolean = true;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n    @ViewChild(\"attributeForm\") attributeForm;\n\n    parentAttributeType: AttributeType;\n\n    geometryAttributeType: AttributeType;\n\n    constructor(private lService: LocalizationService, private geomService: GeometryService, private authService: AuthService, private dateService: DateService) {\n        this.isContributorOnly = this.authService.isContributerOnly();\n    }\n\n    ngOnInit(): void {\n        if (this.attributeExcludes != null) {\n            this.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n            if (!this.isGeometryInlined) {\n                this.geoObjectAttributeExcludes.push(\"geometry\");\n            }\n        }\n\n        let geomAttr = null;\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            if (this.geoObjectType.attributes[i].code === \"geometry\") {\n                geomAttr = this.geoObjectType.attributes[i];\n            }\n        }\n        if (geomAttr == null) {\n            this.geometryAttributeType = new AttributeType(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n        }\n\n        this.parentAttributeType = new AttributeType(\"_PARENT_\", \"_PARENT_\", new LocalizedValue(\"Parents\", null), new LocalizedValue(\"Parents\", null), true, false, false, true);\n        this.onCodeChange();\n    }\n\n    ngAfterViewInit() {\n        this.attributeForm.statusChanges.subscribe(result => {\n            this.isValid = (result === \"VALID\" || result === \"DISABLED\");\n\n            this.valid.emit(this.isValid);\n        });\n    }\n\n    changePage(nextPage: number): void {\n        this.geomService.destroy(false);\n        \n        this.tabIndex = nextPage;\n\n        if (nextPage === 2) {\n            this.isEditingGeometries = true;\n        } else {\n            this.isEditingGeometries = false;\n        }\n    }\n\n    setBoolean(attribute, value): void {\n        attribute.value = value;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    hasChanges(tabIndex: number) {\n        let len = this.actions.length;\n\n        if (len > 0) {\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n\n                if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                    return false;\n                } else if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (updateAttrAction.attributeName === \"_PARENT_\" && tabIndex === 1) {\n                        return true;\n                    } else if (updateAttrAction.attributeName === \"geometry\" && tabIndex === 2) {\n                        return true;\n                    } else if (tabIndex === 0 && updateAttrAction.attributeName !== \"_PARENT_\" && updateAttrAction.attributeName !== \"geometry\") {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    onCodeChange(): void {\n        let newVal = this.postGeoObject.attributes[\"code\"];\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.code === \"code\") {\n                att.isValid = (newVal != null) && newVal.length > 0;\n            }\n        });\n    }\n\n    // Invoked when the dates have changed on an attribute\n    // After each change we must check to see if all attributes\n    // are now valid or not\n    onIsValidChange(valid:boolean, attribute: AttributeType): void {\n        attribute.isValid = valid;\n\n        let allValid:boolean = true;\n\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.isValid != null && !att.isValid) {\n                allValid = false;\n            }\n        });\n\n        if (this.parentAttributeType.isValid != null && !this.parentAttributeType.isValid) {\n            allValid = false;\n        }\n\n        if (this.geometryAttributeType.isValid != null && !this.geometryAttributeType.isValid) {\n            allValid = false;\n        }\n\n        this.valid.emit(allValid);\n    }\n\n    isNullValue(vot: any) {\n        return vot == null || vot.value == null || vot.value === \"\";\n    }\n\n    onSelectPropertyOption(event: any, option: any): void {\n        this.currentTermOption = JSON.parse(JSON.stringify(this.modifiedTermOption));\n    }\n\n    getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if (attr.type === \"term\" && attr.code === termAttributeCode) {\n                attr = <AttributeTermType>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                if (attr.code === \"status\") {\n                    return Utils.removeStatuses(attrOpts);\n                } else {\n                    return attrOpts;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isStatusChanged(post, pre) {\n        if ((pre != null && post == null) || (post != null && pre == null)) {\n            return true;\n        } else if (pre == null && post == null) {\n            return false;\n        }\n\n        if ((pre.length === 0 && post.length > 0) || (post.length === 0 && pre.length > 0)) {\n            return true;\n        }\n\n        let preCompare = pre;\n        if (Array.isArray(pre)) {\n            preCompare = pre[0];\n        }\n\n        let postCompare = post;\n        if (Array.isArray(post)) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    getTypeDefinition(key: string): string {\n        for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if (attr.code === key) {\n                return attr.type;\n            }\n        }\n\n        return null;\n    }\n\n    public getActions(): AbstractAction[] {\n        return this.actions;\n    }\n\n    public getIsValid(): boolean {\n        return this.isValid;\n    }\n\n    public getGeoObject(): any {\n        // return this.postGeoObject;\n    }\n\n}\n","<div class=\"row\">\n  <!-- <div class=\"label-holder\"></div> -->\n  <div class=\"col-md-12\">\n    <div class=\"btn-group geobject-editor-tab-holder\">\n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 0}\" (click)=\"changePage(0);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabZero\"></localize></span>\n        <span style=\"display:inline-block; width:10%; text-align:right;\"><span *ngIf=\"hasChanges(0)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 1, tabHasChanges: hasChanges(2)}\" (click)=\"changePage(1);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabOne\"></localize></span>\n        <span style=\"display:inline-block; width:10%; text-align:right;\"><span *ngIf=\"hasChanges(1)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 2, tabHasChanges: hasChanges(3)}\" (click)=\"changePage(2);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabTwo\"></localize></span>\n        <span style=\"display:inline-block; width:10%; text-align:right;\"><span *ngIf=\"hasChanges(2)\" class=\"tabHasChanges\"></span></span>\n      </label>\n    </div>\n  </div>\n</div>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n  <fieldset>\n    <!-- <div class=\"col-md-12\"> -->\n    <div *ngIf=\"postGeoObject\">\n      <div *ngIf=\"tabIndex === 0\" class=\"row\">\n        <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    \n        <div class=\"col-md-12\">\n\n<!--           <div class=\"row\"> -->\n<!--             <div class=\"col-md-12\"> -->\n<!--               <boolean-field [(value)]=\"showAllInstances\" [label]=\"'Show all instances'\" [disable]=\"false\"></boolean-field> -->\n<!--             </div> -->\n<!--           </div> -->\n\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes; let i = index\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n              <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span *ngIf=\"attr.code === 'code'\"> \n                      <localize key=\"geoobject.code.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code === 'displayLabel'\"> \n                      <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\"> {{attr.label.localizedValue}} </span> \n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <div *ngIf=\"attr.code === 'code'\">\n                    <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"postGeoObject.attributes[attr.code]\" id=\"mod-{{attr.code}}\" \n                        (change)=\"onCodeChange()\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew || readOnly\" required>\n                  </div>\n\n                  <div *ngIf=\"attr.code !== 'code'\">\n                    <manage-versions\n                        [geoObjectType]=\"geoObjectType\" [isNewGeoObject]=\"false\" [attributeData]=\"{'attributeType':attr, 'actions':actions, 'changeRequest':changeRequest, 'geoObject':postGeoObject}\"\n                        [readonly]=\"readOnly\" (isValidChange)=\"onIsValidChange($event, attr)\" [isNew]=\"isNew\" [selectedTab]=\"tabIndex\" >\n                    </manage-versions>\n                  </div>\n\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div *ngIf=\"tabIndex === 1\" class=\"row\">\n        <ul class=\"list-group\">\n\t        <li *ngFor=\"let hierarchy of hierarchies\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n\t          <div class=\"panel panel-default\">\n              <div class=\"panel-heading\">\n                <h4 style=\"margin:0;\">\n                  <span> {{hierarchy.label}} </span> \n                </h4>\n              </div>\n\t\t\t      \n\t\t\t        <div class=\"panel-body\">\n\t\t\t          <manage-versions [geoObjectType]=\"geoObjectType\" [isNewGeoObject]=\"false\" [attributeData]=\"{'attributeType':parentAttributeType, 'actions':actions, 'changeRequest':changeRequest, 'geoObject':postGeoObject}\"\n                        [readonly]=\"readOnly\" (isValidChange)=\"onIsValidChange($event, parentAttributeType)\" [isNew]=\"isNew\" [selectedTab]=\"tabIndex\" [hierarchy]=\"hierarchy\"></manage-versions>\n\t\t\t        </div>\n\t\t        </div>\n\t        </li>\n        </ul>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 2\">\n        <div class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span> <localize key=\"shared.attributes.attribute.geometry.label\"></localize> </span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [isNewGeoObject]=\"false\" [attributeData]=\"{'attributeType':geometryAttributeType, 'actions':actions, 'changeRequest':changeRequest, 'geoObject':postGeoObject}\"\n              [readonly]=\"readOnly\" (isValidChange)=\"onIsValidChange($event, geometryAttributeType)\" [isNew]=\"isNew\" [selectedTab]=\"tabIndex\" [isGeometryInlined]=\"isGeometryInlined\"></manage-versions>\n          </div>\n        </div>\n\n      </div>\n    </div>\n    <!-- </div> -->\n  </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-input\",\n    templateUrl: \"./localized-input.component.html\",\n    styleUrls: []\n})\nexport class LocalizedInputComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from \"rxjs\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { ContextMenuService, ContextMenuComponent } from \"ngx-contextmenu\";\nimport * as d3 from \"d3\";\n\nimport { CreateHierarchyTypeModalComponent } from \"./modals/create-hierarchy-type-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./modals/create-geoobjtype-modal.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./modals/manage-geoobjecttype-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { Organization } from \"@shared/model/core\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { SvgHierarchyType } from \"./d3/svg-hierarchy-type\";\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection } from \"./d3/svg-util\";\nimport { SvgHierarchyNode } from \"./d3/svg-hierarchy-node\";\n\nexport const TREE_SCALE_FACTOR_X: number = 1.8;\nexport const TREE_SCALE_FACTOR_Y: number = 1.8;\n\nexport const DEFAULT_NODE_FILL = \"#e6e6e6\";\nexport const DEFAULT_NODE_BANNER_COLOR = \"#A29BAB\";\nexport const INHERITED_NODE_FILL = \"#d4d4d4\";\nexport const INHERITED_NODE_BANNER_COLOR = \"#a0a0a0\";\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n\n    active: boolean;\n    label: string;\n\n}\n\nexport interface DropTarget {\n    dropSelector: string;\n    onDrag(dragEl: Element, dropEl: Element, event: any): void;\n    onDrop(dragEl: Element, event: any): void;\n    [others: string]: any;\n}\n\n@Component({\n\n    selector: \"hierarchies\",\n    templateUrl: \"./hierarchy.component.html\",\n    styleUrls: [\"./hierarchy.css\"]\n})\nexport class HierarchyComponent implements OnInit {\n\n    userOrganization: string = null;\n\n    primarySvgHierarchy: SvgHierarchyType;\n    currentHierarchy: HierarchyType = null;\n\n    instance: Instance = new Instance();\n    hierarchies: HierarchyType[];\n    organizations: Organization[];\n    geoObjectTypes: GeoObjectType[] = [];\n\n    hierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n    typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n    filter: string = \"\";\n    filteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n    filteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n    @ViewChild(\"searchInput\", { static: true }) searchInput: ElementRef;\n\n    hierarchyTypeDeleteExclusions: string[] = [\"AllowedIn\", \"IsARelationship\"];\n    geoObjectTypeDeleteExclusions: string[] = [\"ROOT\"];\n\n    _opened: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n    @ViewChild(\"leafMenu\") public leafMenuComponent: ContextMenuComponent;\n\n    /*\n     * Currently clicked on id for delete confirmation modal\n    */\n    current: any;\n\n    isSRA: boolean = false;\n\n    hierarchyService: HierarchyService;\n\n    localizeService: LocalizationService;\n\n    options = {\n        //      allowDrag: (any) => node.isLeaf,\n        //      allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n        // return true / false based on element, to.parent, to.index. e.g.\n        //          return parent.hasChildren;\n        //        },\n        displayField: \"label\",\n        actionMapping: {\n            mouse: {\n                click: (tree: any, node: any, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: any, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                }\n            }\n        },\n        mouse: {\n            //              drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n            //                console.log('drag', from, to); // from === {name: 'first'}\n            //                // Add a node to `to.parent` at `to.index` based on the data in `from`\n            //                // Then call tree.update()\n            //              }\n        }\n    };\n\n    constructor(hierarchyService: HierarchyService, private modalService: BsModalService, private contextMenuService: ContextMenuService,\n        localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n        this.isSRA = authService.isSRA();\n\n        this.hierarchyService = hierarchyService;\n        this.localizeService = localizeService;\n    }\n\n    ngOnInit(): void {\n        this.refreshAll(null);\n\n        fromEvent(this.searchInput.nativeElement, \"keyup\").pipe(\n\n            // get value\n            filter(Boolean),\n            debounceTime(500),\n            distinctUntilChanged(),\n            tap(() => {\n                this.onFilterChange();\n            })\n            // subscription for response\n        ).subscribe();\n    }\n\n    localize(key: string): string {\n        return this.localizeService.decode(key);\n    }\n\n    private renderTree(): void {\n        if (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length === 0) {\n            d3.select(\"#svg\").remove();\n\n            let canDrag = false;\n            if (this.currentHierarchy != null) {\n                canDrag = (this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode));\n            }\n\n            this.geoObjectTypes.forEach((got: GeoObjectType) => {\n                got.canDrag = canDrag;\n            });\n            return;\n        }\n\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".hierarchy-inherit-button\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let overflowDiv: any = d3.select(\"#overflow-div\").node();\n        let scrollLeft = overflowDiv.scrollLeft;\n        let scrollRight = overflowDiv.scrollRight;\n\n        let svg = d3.select(\"#svg\");\n\n        if (svg.node() == null) {\n            svg = d3.select(\"#svgHolder\").append(\"svg\");\n            svg.attr(\"id\", \"svg\");\n        }\n\n        this.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService, this.authService);\n        this.primarySvgHierarchy.render();\n\n        this.calculateSvgViewBox();\n\n        let overflowDiv2: any = d3.select(\"#overflow-div\").node();\n        overflowDiv2.scrollLeft = scrollLeft;\n        overflowDiv2.scrollRight = scrollRight;\n\n        // this.registerSvgHandlers();\n\n        this.geoObjectTypes.forEach((got: GeoObjectType) => {\n            got.canDrag = this.calculateCanDrag(got);\n        });\n    }\n\n    calculateSvgViewBox(): void {\n        let svg: any = d3.select(\"#svg\");\n        let svgNode: any = svg.node();\n\n        let { x, y, width, height } = svgNode.getBBox();\n\n        const xPadding = 30;\n        const yPadding = 40;\n        svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n        width = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n        height = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n        d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n        // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n    }\n\n    calculateCanDrag(got: GeoObjectType): boolean {\n        let hierarchyComponent = this;\n\n        if (this.primarySvgHierarchy != null) {\n            // Check permissions against GOT and Hierarchy org\n            if (!(this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode))) {\n                return false;\n            }\n\n            // If the child is already on the graph, they cannot drag.\n            if (this.primarySvgHierarchy.getNodeByCode(got.code) != null) {\n                return false;\n            }\n\n            // If we are abstract, and one of our children is on the graph, they cannot drag.\n            if (got.isAbstract) {\n                let isChildOnGraph = false;\n\n                this.geoObjectTypes.forEach((child: GeoObjectType) => {\n                    if (child.superTypeCode === got.code) {\n                        if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null) {\n                            isChildOnGraph = true;\n                        }\n                    }\n                });\n\n                if (isChildOnGraph) {\n                    return false;\n                }\n            } else if (got.superTypeCode != null) {\n                // If we are a child of an abstract type, and our abstract type is on the graph, we cannot drag.\n                if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null) {\n                    return false;\n                }\n            }\n        } else {\n            // If there is no selected hierarchy, they cannot drag.\n            return false;\n        }\n\n        return true;\n    }\n\n    calculateRelatedHierarchies(got: GeoObjectType): string[] {\n        let relatedHiers = [];\n\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let hierarchyType = this.hierarchies[i];\n\n            if (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n                let d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n                let found = d3Hierarchy.find((node) => {\n                    return node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n                });\n\n                if (found) {\n                    relatedHiers.push(hierarchyType.code);\n                }\n            }\n        }\n\n        return relatedHiers;\n    }\n\n    private registerDragHandlers(): any {\n        let that = this;\n\n        let dropTargets: DropTarget[] = [];\n\n        // Empty Hierarchy Drop Zone\n        dropTargets.push({\n            dropSelector: \".drop-box-container\",\n            onDrag: function(dragEl: Element, dropEl: Element) {\n                if (this.dropEl != null) {\n                    this.dropEl.style(\"border-color\", null);\n                    this.dropEl = null;\n                }\n\n                if (dropEl != null) {\n                    let emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n                    if (emptyHierarchyDropZone != null) {\n                        this.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n                    }\n                }\n            },\n            onDrop: function(dragEl: Element) {\n                if (this.dropEl != null) {\n                    this.dropEl.style(\"border-color\", null);\n                    that.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n                    this.dropEl = null;\n                }\n            }\n        });\n\n        // SVG GeoObjectType Drop Zone\n        dropTargets.push({\n            dropSelector: \".svg-got-body-rect\",\n            onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n                this.clearDropZones();\n\n                let lastDropEl = this.dropEl;\n\n                // translate page to SVG co-ordinate\n                let svg: any = d3.select(\"#svg\").node();\n\n                if (svg == null) {\n                    return;\n                }\n                let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n                // Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n                // we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones.\n                that.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n                    if (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n                        this.dropEl = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + node.data.geoObjectType + \"\\\"]\");\n                        node.data.activeDropZones = true;\n\n                        if (node.parent == null) {\n                            node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n                        }\n                    } else {\n                        node.data.activeDropZones = false;\n\n                        if (node.parent == null) {\n                            node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                        }\n                    }\n                });\n\n                if (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") !== this.dropEl.attr(\"data-gotCode\"))) {\n                    this.clearGhostNodes(true);\n                }\n\n                if (this.dropEl != null) {\n                    let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n                    const gotCode = this.dropEl.attr(\"data-gotCode\");\n                    let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n                    let isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n                    this.dropEl.attr(\"stroke\", \"blue\");\n\n                    const dropElX = parseInt(this.dropEl.attr(\"x\"));\n                    const dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n                    // Add drop zones\n                    const childW: number = SvgHierarchyType.gotRectW;\n                    const childH: number = SvgHierarchyType.gotRectH;\n\n                    let dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n                    // Render Child Drop Zone\n                    let dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length === 0);\n                    let isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n                    if (isChildDZActive) {\n                        this.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"white\");\n\n                        this.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"none\")\n                            .attr(\"stroke\", \"black\")\n                            .attr(\"stroke-width\", \"1\")\n                            .attr(\"stroke-dasharray\", \"5,5\");\n\n                        let addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n                        this.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n                            .attr(\"font-family\", \"sans-serif\")\n                            .attr(\"font-size\", 10)\n                            .attr(\"fill\", \"black\")\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n                            .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n                            .text(addChildLabel);\n                    }\n\n                    // Render Parent Drop Zone\n                    // Don't render it if we're a group\n                    if (!isDragGroup) {\n                        this.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"white\");\n\n                        this.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                            .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                            .attr(\"width\", childW)\n                            .attr(\"height\", childH)\n                            .attr(\"fill\", \"none\")\n                            .attr(\"stroke\", \"black\")\n                            .attr(\"stroke-width\", \"1\")\n                            .attr(\"stroke-dasharray\", \"5,5\");\n\n                        d3.select(\".svg-got-parent-dz-text\").remove();\n                        let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n                        this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n                            .attr(\"font-family\", \"sans-serif\")\n                            .attr(\"font-size\", 10)\n                            .attr(\"fill\", \"black\")\n                            .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n                            .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n                            .text(addParentLabel);\n                    }\n\n                    // Render Sibling Drop Zone\n                    if (this.ghostCode !== gotCode) {\n                        if (this.ghostCode != null) {\n                            this.clearGhostNodes(dropNode.parent == null);\n                        }\n\n                        if (dropNode.parent != null) {\n                            let parentIndex = null;\n                            for (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n                                let hn: any = dropNode.parent.data.children[i];\n\n                                if (hn.geoObjectType === gotCode) {\n                                    parentIndex = i + 1;\n                                }\n                            }\n\n                            let addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n                            dropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n                            that.renderTree();\n                            this.ghostCode = gotCode;\n                        }\n                    }\n\n                    let siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n                    if (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n                        this.parentDz.attr(\"stroke\", \"blue\");\n                        this.parentDzText.attr(\"fill\", \"blue\");\n                        isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                        isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                        siblingGhostBody.attr(\"stroke\", \"black\");\n                        this.activeDz = this.parentDz;\n                    } else if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n                        !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                        !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                        this.childDz.attr(\"stroke\", \"blue\");\n                        this.childDzText.attr(\"fill\", \"blue\");\n                        siblingGhostBody.attr(\"stroke\", \"black\");\n                        this.activeDz = this.childDz;\n                    } else if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n                        !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                        !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                        isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                        isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                        siblingGhostBody.attr(\"stroke\", \"blue\");\n                        this.activeDz = \"sibling\";\n                    }\n                }\n            },\n            onDrop: function(dragEl: Element) {\n                if (this.dropEl != null && this.activeDz != null) {\n                    let dropGot = this.dropEl.attr(\"data-gotCode\");\n                    let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n                    let dragGot = d3.select(dragEl).attr(\"id\");\n\n                    if (this.activeDz === this.childDz) {\n                        if (dropNode.data.children.length === 0) {\n                            that.addChild(that.currentHierarchy.code, dropGot, dragGot);\n                        } else {\n                            let youngest = \"\";\n\n                            for (let i = 0; i < dropNode.data.children.length; ++i) {\n                                youngest = youngest + dropNode.data.children[i].geoObjectType;\n\n                                if (i < dropNode.data.children.length - 1) {\n                                    youngest = youngest + \",\";\n                                }\n                            }\n\n                            that.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n                        }\n                    } else if (this.activeDz === this.parentDz) {\n                        if (dropNode.parent == null) {\n                            that.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n                        } else {\n                            that.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n                        }\n                    } else if (this.activeDz === \"sibling\") {\n                        that.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n                    }\n                }\n                this.clearDropZones();\n                this.clearGhostNodes(true);\n            },\n            clearDropZones: function() {\n                if (this.dropEl != null) {\n                    this.dropEl.attr(\"stroke\", null);\n                }\n\n                this.dropEl = null;\n                this.activeDz = null;\n\n                this.childDz = null;\n                this.parentDz = null;\n\n                d3.select(\".svg-dropZone-g\").remove();\n            },\n            clearGhostNodes: function(renderTree: boolean) {\n                if (this.ghostCode != null) {\n                    let ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n                    if (ghostNode != null) {\n                        let parentIndex = null;\n                        for (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n                            let hn: any = ghostNode.parent.data.children[i];\n\n                            if (hn.ghostingCode === this.ghostCode) {\n                                parentIndex = i;\n                            }\n                        }\n\n                        if (parentIndex != null) {\n                            ghostNode.parent.data.children.splice(parentIndex, 1);\n                            if (renderTree) {\n                                that.renderTree();\n                            }\n                        }\n                    }\n\n                    this.ghostCode = null;\n                }\n            }\n        });\n\n        // GeoObjectTypes and Hierarchies\n        let deltaX: number, deltaY: number, width: number;\n        let sidebarDragHandler = d3.drag()\n            .on(\"start\", function(event: any) {\n                let canDrag = d3.select(this).attr(\"data-candrag\");\n                if (canDrag === \"false\") {\n                    return;\n                }\n\n                let rect = this.getBoundingClientRect();\n                deltaX = rect.left - event.sourceEvent.pageX;\n                deltaY = rect.top - event.sourceEvent.pageY;\n                width = rect.width;\n            })\n            .on(\"drag\", function(event: any) {\n                let canDrag = d3.select(this).attr(\"data-candrag\");\n                if (canDrag === \"false\") {\n                    return;\n                }\n\n                d3.select(\".g-context-menu\").remove();\n\n                let selThis = d3.select(this);\n\n                // Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n                selThis.style(\"display\", \"none\");\n\n                let target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n                selThis.style(\"display\", null);\n\n                for (let i = 0; i < dropTargets.length; ++i) {\n                    dropTargets[i].onDrag(this, target, event);\n                }\n\n                // Move the GeoObjectType with the pointer when they move their mouse\n                selThis\n                    .classed(\"dragging\", true)\n                    .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                    .style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n                    .style(\"width\", width + \"px\");\n\n                // If they are moving a GOT group then we have to move the children as well\n                if (selThis.classed(\"got-group-parent\")) {\n                    let index = 1;\n                    d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                        let li: any = this;\n                        let child = d3.select(li);\n\n                        child\n                            .classed(\"dragging\", true)\n                            .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                            .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2) * index) + \"px\")\n                            .style(\"width\", width + \"px\");\n\n                        index++;\n                    });\n                }\n            }).on(\"end\", function(event: any) {\n                let selThis = d3.select(this)\n                    .classed(\"dragging\", false)\n                    .style(\"left\", null)\n                    .style(\"top\", null)\n                    .style(\"width\", null);\n\n                // If they are moving a GOT group then we have to reset the children as well\n                if (selThis.classed(\"got-group-parent\")) {\n                    d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                        let child = d3.select(this);\n\n                        child\n                            .classed(\"dragging\", false)\n                            .style(\"left\", null)\n                            .style(\"top\", null)\n                            .style(\"width\", null);\n                    });\n                }\n\n                for (let i = 0; i < dropTargets.length; ++i) {\n                    dropTargets[i].onDrop(this, event);\n                }\n            });\n\n        sidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n    }\n\n    private registerSvgHandlers(): void {\n        let hierarchyComponent = this;\n\n        // SVG Drag Handler\n        let deltaX: number, deltaY: number, width: number;\n        let startPoint: any;\n        let svgGot: SvgHierarchyNode;\n        let svgDragHandler = d3.drag()\n            .on(\"start\", function(event: any) {\n                let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n                // let select = d3.select(this);\n\n                svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n                // d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n                //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n                //     return -1\n                //   }\n                //   else {\n                //     return 1\n                //   }\n                // });\n\n                //   d3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n                //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n                //     return -1\n                //   }\n                //   else {\n                //     return 1\n                //   }\n                // });\n\n                // d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n                //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n                //     console.log(\"no --> \",a.data.geoObjectType)\n                //     return -1\n                //   }\n                //   else {\n                //     console.log(\"yes --> \",a.data.geoObjectType)\n                //     return 1\n                //   }\n                // });\n\n                startPoint = svgGot.getPos();\n\n                deltaX = startPoint.x - svgMousePoint.x;\n                deltaY = startPoint.y - svgMousePoint.y;\n            })\n            .on(\"drag\", function(event: any) {\n                d3.select(\".g-context-menu\").remove();\n\n                let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n                svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n                svgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n            }).on(\"end\", function(event: any) {\n                svgGot.setPos(startPoint.x, startPoint.y, false);\n\n                // let bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n                // if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n                //   if (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n                //     let obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n                //     hierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n                //       animated: true,\n                //       backdrop: true,\n                //       ignoreBackdropClick: true,\n                //     });\n\n                //     let message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n                //     message = message.replace(\"{label}\", obj.label.localizedValue);\n\n                //     hierarchyComponent.bsModalRef.content.message = message;\n                //     hierarchyComponent.bsModalRef.content.data = obj.code;\n\n                //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n                //       let treeNode = svgGot.getTreeNode();\n                //       let parent = null;\n                //       if (treeNode.parent == null) {\n                //         parent = \"ROOT\";\n                //       }\n                //       else {\n                //         if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                //           parent = \"ROOT\";\n                //         }\n                //         else {\n                //           parent = treeNode.parent.data.geoObjectType;\n                //         }\n                //       }\n\n                //       hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n                //     });\n\n                //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n                //       svgGot.setPos(startPoint.x, startPoint.y, false);\n                //     });\n                //   }\n                //   else {\n                //     svgGot.setPos(startPoint.x, startPoint.y, false);\n                //   }\n\n                // }\n                // else {\n                //   svgGot.setPos(startPoint.x, startPoint.y, false);\n                // }\n            });\n\n        svgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n    }\n\n    public findGeoObjectTypeByCode(code: string): GeoObjectType {\n        for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n            let got: GeoObjectType = this.geoObjectTypes[i];\n\n            if (got.code === code) {\n                return got;\n            }\n        }\n    }\n\n    public findHierarchyByCode(code: string): HierarchyType {\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let ht: HierarchyType = this.hierarchies[i];\n\n            if (ht.code === code) {\n                return ht;\n            }\n        }\n    }\n\n    public findOrganizationByCode(code: string): Organization {\n        for (let i = 0; i < this.organizations.length; ++i) {\n            let org: Organization = this.organizations[i];\n\n            if (org.code === code) {\n                return org;\n            }\n        }\n    }\n\n    private addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n        this.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n            let got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n            let index = null;\n            for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n                if (got.relatedHierarchies[i] === hierarchyCode) {\n                    index = i;\n                    break;\n                }\n            }\n\n            if (index == null) {\n                got.relatedHierarchies.push(hierarchyCode);\n            }\n\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n        this.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    isRA(): boolean {\n        return this.authService.isRA();\n    }\n\n    isOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n        return this.isSRA || this.authService.isOrganizationRA(orgCode);\n    }\n\n    getTypesByOrg(org: Organization): GeoObjectType[] {\n        let orgTypes: GeoObjectType[] = [];\n\n        for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n            let geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n            if (geoObjectType.organizationCode === org.code) {\n                orgTypes.push(geoObjectType);\n            }\n        }\n\n        return orgTypes;\n    }\n\n    getHierarchiesByOrg(org: Organization): HierarchyType[] {\n        let orgHierarchies: HierarchyType[] = [];\n\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let hierarchy: HierarchyType = this.hierarchies[i];\n\n            if (hierarchy.organizationCode === org.code) {\n                orgHierarchies.push(hierarchy);\n            }\n        }\n\n        return orgHierarchies;\n    }\n\n    public refreshAll(desiredHierarchy: HierarchyType) {\n        // Clear the types to then refresh\n        this.geoObjectTypes = [];\n\n        this.registryService.init().then(response => {\n            this.localizeService.setLocales(response.locales);\n\n            this.setGeoObjectTypes(response.types);\n\n            this.organizations = response.organizations;\n\n            this.organizations.forEach(org => {\n                if (this.isOrganizationRA(org.code)) {\n                    this.userOrganization = org.code;\n                }\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            this.setHierarchies(response.hierarchies);\n\n            this.setNodesOnInit(desiredHierarchy);\n\n            this.updateViewDatastructures();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public setGeoObjectTypes(types: GeoObjectType[]): void {\n        // Set group parent types\n        this.setAbstractTypes(types);\n\n        // Set GeoObjectTypes that aren't part of a group.\n        types.forEach(type => {\n            if (!type.isAbstract) {\n                if (!type.superTypeCode) {\n                    this.geoObjectTypes.push(type);\n                }\n            }\n        });\n\n        // Sort aphabetically because all other types to add will be children in a group.\n        this.geoObjectTypes.sort((a, b) => {\n            if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n            else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n            else return 0;\n        });\n\n        // Add group children\n        types.forEach(type => {\n            if (!type.isAbstract) {\n                if (type.superTypeCode && type.superTypeCode.length > 0) {\n                    for (let i = 0; i < this.geoObjectTypes.length; i++) {\n                        let setType = this.geoObjectTypes[i];\n                        if (type.superTypeCode === setType.code) {\n                            this.geoObjectTypes.splice(i + 1, 0, type);\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    private setAbstractTypes(types: GeoObjectType[]): void {\n        types.forEach(type => {\n            if (type.isAbstract) {\n                this.geoObjectTypes.push(type);\n            }\n        });\n    }\n\n    public updateViewDatastructures(): void {\n        this.hierarchiesByOrg = [];\n        this.typesByOrg = [];\n\n        for (let i = 0; i < this.organizations.length; ++i) {\n            let org: Organization = this.organizations[i];\n\n            this.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n            this.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n        }\n\n        this.geoObjectTypes.forEach((got: GeoObjectType) => {\n            got.canDrag = this.calculateCanDrag(got);\n            got.relatedHierarchies = this.calculateRelatedHierarchies(got);\n        });\n\n        this.onFilterChange();\n    }\n\n    public excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n        return (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n    }\n\n    public excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n        return (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n    }\n\n    private setNodesOnInit(desiredHierarchy: HierarchyType): void {\n        let index = -1;\n\n        if (desiredHierarchy != null) {\n            index = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n        } else if (this.hierarchies.length > 0) {\n            index = 0;\n        }\n\n        if (index > -1) {\n            const hierarchy = this.hierarchies[index];\n\n            this.setCurrentHierarchy(hierarchy);\n\n            this.renderTree();\n        }\n    }\n\n    private getHierarchy(hierarchyId: string): HierarchyType {\n        let target: HierarchyType = null;\n        this.hierarchies.forEach(hierarchy => {\n            if (hierarchyId === hierarchy.code) {\n                target = hierarchy;\n            }\n        });\n\n        return target;\n    }\n\n    private setHierarchies(data: HierarchyType[]): void {\n        let hierarchies: HierarchyType[] = [];\n        data.forEach((hierarchyType, index) => {\n            if (hierarchyType.rootGeoObjectTypes.length > 0) {\n                hierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n                    this.processHierarchyNodes(rootGeoObjectType);\n                });\n            }\n\n            hierarchies.push(hierarchyType);\n        });\n\n        this.hierarchies = hierarchies;\n\n        this.hierarchies.sort((a, b) => {\n            if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n            else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n            else return 0;\n        });\n    }\n\n    private processHierarchyNodes(node: HierarchyNode) {\n        if (node != null) {\n            node.label = this.getHierarchyLabel(node.geoObjectType);\n\n            node.children.forEach(child => {\n                this.processHierarchyNodes(child);\n            });\n        }\n    }\n\n    private getHierarchyLabel(geoObjectTypeCode: string): string {\n        let label: string = null;\n        this.geoObjectTypes.forEach(function(gOT) {\n            if (gOT.code === geoObjectTypeCode) {\n                label = gOT.label.localizedValue;\n            }\n        });\n\n        return label;\n    }\n\n    public handleOnMenu(node: any, $event: any): void {\n        if (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n            this.contextMenuService.show.next({\n                contextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n                event: $event,\n                item: node\n            });\n            $event.preventDefault();\n            $event.stopPropagation();\n        } else {\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n    }\n\n    public treeNodeOnClick(node: any, $event: any): void {\n        node.treeModel.setFocusedNode(node);\n\n        if (node.treeModel.isExpanded(node)) {\n            node.collapse();\n        } else {\n            node.treeModel.expandAll();\n        }\n    }\n\n    public hierarchyOnClick(event: any, item: HierarchyType) {\n        this.setCurrentHierarchy(item);\n        this.renderTree();\n    }\n\n    public createHierarchy(): void {\n        this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            // eslint-disable-next-line quote-props\n            \"class\": \"upload-modal\"\n        });\n\n        (<CreateHierarchyTypeModalComponent> this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n            this.hierarchies.push(data);\n\n            this.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n                let nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n                let nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n                if (nameA < nameB) {\n                    return -1; // nameA comes first\n                }\n\n                if (nameA > nameB) {\n                    return 1; // nameB comes first\n                }\n\n                return 0; // names must be equal\n            });\n\n            this.updateViewDatastructures();\n        });\n    }\n\n    public deleteHierarchyType(obj: HierarchyType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.removeHierarchyType(data);\n        });\n    }\n\n    public editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n        this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            class: \"upload-modal\"\n        });\n        this.bsModalRef.content.edit = true;\n        this.bsModalRef.content.readOnly = readOnly;\n        this.bsModalRef.content.hierarchyType = obj;\n        this.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n            let pos = this.getHierarchyTypePosition(data.code);\n\n            this.hierarchies[pos].label = data.label;\n            this.hierarchies[pos].description = data.description;\n            this.hierarchies[pos].progress = data.progress;\n            this.hierarchies[pos].acknowledgement = data.acknowledgement;\n            this.hierarchies[pos].disclaimer = data.disclaimer;\n            this.hierarchies[pos].useConstraints = data.useConstraints;\n            this.hierarchies[pos].accessConstraints = data.accessConstraints;\n            this.hierarchies[pos].contact = data.contact;\n            this.hierarchies[pos].phoneNumber = data.phoneNumber;\n            this.hierarchies[pos].email = data.email;\n\n            this.updateViewDatastructures();\n\n            if (this.currentHierarchy.code === data.code) {\n                this.setCurrentHierarchy(this.hierarchies[pos]);\n\n                this.renderTree();\n            }\n        });\n    }\n\n    setCurrentHierarchy(hierarchyType: HierarchyType): void {\n        this.currentHierarchy = hierarchyType;\n    }\n\n    isPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n        // return hierarchy.isPrimary;\n        return hierarchy.code === this.currentHierarchy.code;\n    }\n\n    public removeHierarchyType(code: string): void {\n        this.hierarchyService.deleteHierarchyType(code).then(response => {\n            let pos = this.getHierarchyTypePosition(code);\n            this.hierarchies.splice(pos, 1);\n            this.updateViewDatastructures();\n\n            if (this.hierarchies.length > 0) {\n                this.setCurrentHierarchy(this.hierarchies[0]);\n            } else {\n                this.currentHierarchy = null;\n            }\n\n            this.renderTree();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean, org: Organization): void {\n        this.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            class: \"upload-modal\"\n        });\n        this.bsModalRef.content.init(org, this.geoObjectTypes, groupSuperType, isAbstract);\n\n        this.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n            data.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n            this.refreshAll(this.currentHierarchy);\n        });\n    }\n\n    public deleteGeoObjectType(obj: GeoObjectType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.removeGeoObjectType(data);\n        });\n    }\n\n    public removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n        this.registryService.deleteGeoObjectType(code).then(response => {\n            let pos = this.getGeoObjectTypePosition(code);\n            this.geoObjectTypes.splice(pos, 1);\n\n            this.refreshAll(this.currentHierarchy);\n        }).catch((err: HttpErrorResponse) => {\n            if (errCallback != null) {\n                errCallback(err);\n            }\n            this.error(err);\n        });\n    }\n\n    public manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n        this.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            class: \"manage-geoobjecttype-modal\"\n        });\n\n        geoObjectType.attributes.sort((a, b) => {\n            if (a.label.localizedValue < b.label.localizedValue) return -1;\n            else if (a.label.localizedValue > b.label.localizedValue) return 1;\n            else return 0;\n        });\n        this.bsModalRef.content.geoObjectType = geoObjectType;\n        this.bsModalRef.content.readOnly = readOnly;\n\n        (<ManageGeoObjectTypeModalComponent>this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n            if (data.isAbstract) {\n                this.refreshAll(this.currentHierarchy);\n            } else {\n                const position = this.getGeoObjectTypePosition(data.code);\n\n                if (position !== -1) {\n                    this.geoObjectTypes[position] = data;\n                }\n\n                // Update all of the hierarchies for the new geo object type\n                this.updateViewDatastructures();\n\n                this.hierarchies.forEach((hierarchyType: HierarchyType) => {\n                    this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n                });\n\n                // Update the current hierarchy view\n                if (this.currentHierarchy != null) {\n                    this.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n                }\n\n                this.renderTree();\n            }\n        });\n    }\n\n    private getHierarchyTypePosition(code: string): number {\n        for (let i = 0; i < this.hierarchies.length; i++) {\n            let obj = this.hierarchies[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    public refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n        this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n        for (let i = 0; i < this.hierarchies.length; ++i) {\n            let hierarchy = this.hierarchies[i];\n\n            if (hierarchy.code === hierarchyType.code) {\n                this.hierarchies[i] = hierarchyType;\n\n                this.setCurrentHierarchy(hierarchyType);\n            }\n        }\n\n        this.updateViewDatastructures();\n\n        this.renderTree();\n    }\n\n    public removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n        const that = this;\n\n        this.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n            let got = that.findGeoObjectTypeByCode(gotCode);\n\n            let index = null;\n            for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n                if (got.relatedHierarchies[i] === hierarchyType.code) {\n                    index = i;\n                    break;\n                }\n            }\n\n            if (index != null) {\n                got.relatedHierarchies.splice(index, 1);\n            }\n\n            that.refreshPrimaryHierarchy(hierarchyType);\n        }).catch((err: HttpErrorResponse) => {\n            if (errCallback != null) {\n                errCallback(err);\n            }\n\n            this.error(err);\n        });\n    }\n\n    public isActive(item: HierarchyType) {\n        return this.currentHierarchy === item;\n    }\n\n    onFilterChange(): void {\n        const label = this.filter.toLowerCase();\n\n        this.filteredHierarchiesByOrg = [];\n        this.filteredTypesByOrg = [];\n\n        this.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n            const filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n                const index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n                return (index !== -1);\n            });\n\n            this.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n        });\n\n        this.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n            const filtered = item.types.filter((type: GeoObjectType) => {\n                const index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n                return (index !== -1);\n            });\n\n            this.filteredTypesByOrg.push({ org: item.org, types: filtered });\n        });\n\n        setTimeout(() => { this.registerDragHandlers(); }, 500);\n    }\n\n    handleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n        this.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n        this.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n            this.refreshPrimaryHierarchy(ht);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"type.permissions.includes('WRITE')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false, typeByOrg.org)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!type.permissions.includes('WRITE') && type.permissions.includes('READ')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': (currentHierarchy != null && hierarchy.code === currentHierarchy.code), 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\">\n                      <div *ngIf=\"isOrganizationRA(currentHierarchy.organizationCode, true)\" id=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n                      </div>\n                      <div *ngIf=\"!isOrganizationRA(currentHierarchy.organizationCode, true)\">\n                          <p class=\"upload-text\">\n                              <localize key=\"hierarchy.content.emptyHierarchy\"></localize>\n                          </p>\n                      </div>\n                    </div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"NodeTooltip\" class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-form\">\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                      <label>\n                        <localize key=\"hierarchy.nodeTooltip.hierarchy\"></localize>\n                      </label>\n                    </div>\n                    <div class=\"holder\">\n                      <label id=\"hierarchyLabel\"></label>\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { HierarchyType, HierarchyGroupedTypeView } from \"@registry/model/hierarchy\";\nimport { TreeEntity } from \"@registry/model/registry\";\nimport { EventService } from \"@shared/service\";\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getHierarchyTypes(types: any): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"types\", JSON.stringify(types));\n\n        return this.http\n            .get<HierarchyType[]>(acp + \"/cgr/hierarchytype/get-all\", { params: params })\n            .toPromise();\n    }\n\n    getHierarchyGroupedTypes(): Promise<HierarchyGroupedTypeView[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<HierarchyGroupedTypeView[]>(acp + \"/hierarchy/groupedTypes\", { params: params })\n            .toPromise();\n    }\n\n    addChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/add\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/insertBetweenTypes\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/remove\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/create\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/cgr/hierarchytype/update\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteHierarchyType(code: string): Promise<TreeEntity> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>(acp + \"/cgr/hierarchytype/delete\", { code: code }, { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/setInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, inheritedHierarchyTypeCode: inheritedHierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(acp + \"/hierarchy/removeInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from \"@registry/model/io\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    importSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(acp + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport(configuration: ImportConfiguration): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/etl/cancel-import\", JSON.stringify({ configuration: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    importShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(acp + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    listGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"includeAbstractTypes\", includeAbstractTypes.toString());\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>(acp + \"/cgr/geoobjecttype/list-types\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        params = params.set(\"includeInheritedTypes\", includeInheritedTypes.toString());\r\n\r\n        return this.http\r\n            .get<Location[]>(acp + \"/cgr/geoobjecttype/get-ancestors\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + \"/cgr/geoobjecttype/get-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(acp + \"/cgr/geoobjecttype/get-subtype-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>(acp + \"/geo-synonym/createGeoEntitySynonym\", JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geo-synonym/deleteGeoEntitySynonym\", JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"mdAttributeId\", mdAttributeId);\r\n        params = params.set(\"text\", text);\r\n        params = params.set(\"limit\", limit);\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>(acp + \"/uploader/getClassifierSuggestions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    createTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n        return this.http\r\n            .post<Synonym>(acp + \"/uploader/createClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym(synonymId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ synonymId: synonymId });\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/uploader/deleteClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/addterm\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from \"@shared/service\";\n\nimport { AllLocaleInfo } from \"@registry/model/localization-manager\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>(acp + \"/localization/getNewLocaleInformation\")\n            .toPromise();\n    }\n\n    installLocale(language: string, country: string, variant: string): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if (language != null) {\n            params = params.set(\"language\", language);\n        }\n\n        if (country != null) {\n            params = params.set(\"country\", country);\n        }\n\n        if (variant != null) {\n            params = params.set(\"variant\", variant);\n        }\n\n        return this.http\n            .get<void>(acp + \"/localization/installLocale\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\nimport * as mapboxgl from \"mapbox-gl\";\r\n\r\nimport { LocationInformation } from \"@registry/model/location-manager\";\r\nimport { EventService } from \"@shared/service\";\r\nimport { GeoObject } from \"@registry/model/registry\";\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) {\r\n        (mapboxgl as any).accessToken = \"pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNWE5bWkwazYwNGFtb3loOGxsbjR1In0.ZNEwT-pBnGookEb-BF_jQQ\";\r\n    }\r\n\r\n    roots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (typeCode != null) {\r\n            params = params.set(\"typeCode\", typeCode);\r\n        }\r\n\r\n        if (hierarchyCode != null) {\r\n            params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        }\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<LocationInformation>(acp + \"/registrylocation/roots\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    search(text: string, date: string): Promise<{ type: string, features: GeoObject[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"text\", text);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ type: string, features: GeoObject[] }>(acp + \"/registrylocation/search\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\nimport { Observable } from \"rxjs\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport {\n    GeoObject, GeoObjectType, AttributeType, Term, MasterList, MasterListVersion, ParentTreeNode,\r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage,\r\n    MasterListByOrg\n} from \"@registry/model/registry\";\r\n\r\nimport { HierarchyType } from \"@registry/model/hierarchy\";\r\nimport { Progress } from \"@shared/model/progress\";\r\n\r\nimport { Organization, LocaleView } from \"@shared/model/core\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }>(acp + \"/cgr/init\")\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (types != null) {\r\n            params = params.set(\"types\", JSON.stringify(types));\r\n        }\r\n\r\n        if (hierarchies != null) {\r\n            params = params.set(\"hierarchies\", JSON.stringify(hierarchies));\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>(acp + \"/cgr/geoobjecttype/get-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects(childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"childId\", childId);\r\n        params = params.set(\"childTypeCode\", childTypeCode);\r\n        params = params.set(\"parentTypes\", JSON.stringify(parentTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>(acp + \"/cgr/geoobject/get-parent-geoobjects\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getChildGeoObjects(parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"parentId\", parentId);\r\n        params = params.set(\"parentTypeCode\", parentTypeCode);\r\n        params = params.set(\"childrenTypes\", JSON.stringify(childrenTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>(acp + \"/cgr/geoobject/getchildren\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(acp + \"/cgr/geoobjecttype/create\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(acp + \"/cgr/geoobjecttype/update\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType(code: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/cgr/geoobjecttype/delete\", JSON.stringify({ code: code }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/addattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/updateattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<boolean>(acp + \"/cgr/geoobjecttype/deleteattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeName: attributeName }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/addterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: term }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(acp + \"/cgr/geoobjecttype/updateterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: termJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<AttributeType> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(acp + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject(id: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"id\", id);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(acp + \"/cgr/geoobject/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/cgr/geoobject/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"date\", date);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/cgr/geoobject-time/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(acp + \"/cgr/geoobject/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject(code: string, typeCode: string): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>(acp + \"/cgr/geoobject/get-hierarchies-over-time\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, parentTypeCode: string, hierarchy: string, date: string): Promise<GeoObject> {\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if (parentTypeCode != null) {\r\n            params.parentTypeCode = parentTypeCode;\r\n        }\r\n\r\n        if (date != null) {\r\n            params.date = date;\r\n        }\r\n\r\n        return this.http\r\n            .post<GeoObject>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>(acp + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/etl/get-active\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/etl/get-completed\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(acp + \"/etl/get-import-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(acp + \"/etl/get-export-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/etl/import-resolve\", JSON.stringify({ historyId: historyId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitValidationResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/etl/validation-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitErrorResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/etl/error-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>(acp + \"/master-list/list-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListHistory(oid: string, versionType: string): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n        params = params.set(\"versionType\", versionType);\r\n\r\n        return this.http\r\n            .get<MasterList>(acp + \"/master-list/versions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getAllMasterListVersions(): Promise<MasterList[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<MasterList[]>(acp + \"/master-list/list-all-versions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListVersion(oid: string): Promise<MasterListVersion> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<MasterListVersion>(acp + \"/master-list/version\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<LocaleView[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<LocaleView[]>(acp + \"/localization/get-locales\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", geoObjectCode);\r\n        params = params.set(\"typeCode\", geoObjectTypeCode);\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>(acp + \"/cgr/geoobject-time/get-code\", { params: params })\r\n            .toPromise();\n    }\r\n\r\n    newGeoObjectOverTime(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/cgr/geoobject-time/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>(acp + \"/cgr/geoobject/setAttributeVersions\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterList(list: MasterList): Promise<MasterList> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>(acp + \"/master-list/create\", JSON.stringify({ list: list }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterListVersion(oid: string, forDate: string): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterListVersion>(acp + \"/master-list/create-version\", JSON.stringify({ oid: oid, forDate: forDate }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterListVersions(oid: string): Promise<{ job: string }> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<{ job: string }>(acp + \"/master-list/publish-versions\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterList(oid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/master-list/remove\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterListVersion(oid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/master-list/remove-version\", JSON.stringify({ oid: oid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterList(oid: string): Observable<string> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http.post<string>(acp + \"/master-list/publish\", JSON.stringify({ oid: oid }), { headers: headers });\r\n    }\r\n\r\n    getMasterList(oid: string): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<MasterList>(acp + \"/master-list/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit(geoObjectCode: string, geoObjectTypeCode: string, actions: string, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n\t  // TODO\r\n\t\t// Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n\t\t// This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n\t\t// for(const prop in geoObject.attributes) {\r\n\t\t//\tlet attr = geoObject.attributes[prop];\r\n \t\t//\tif(attr.type === \"date\"){\r\n\t\t//\t\tattr.values.forEach( val => {\r\n\t\t//\t\t\tval.value = new Date(val.value).getTime().toString();\r\n\t\t//\t\t})\r\n\t\t//\t}\r\n\t\t// }\r\n\r\n        let params = { geoObjectCode: geoObjectCode, geoObjectTypeCode: geoObjectTypeCode, actions: actions };\r\n\r\n        if (masterListId != null) {\r\n            params[\"masterListId\"] = masterListId;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geoobject-editor/updateGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n    * Not really part of the RegistryService\r\n    */\r\n    applyGeoObjectCreate(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n    // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n    // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        for (const prop in geoObject.attributes) {\r\n            let attr = geoObject.attributes[prop];\r\n            if (attr.type === \"date\") {\r\n                attr.values.forEach(val => {\r\n                    val.value = new Date(val.value).getTime().toString();\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = { geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if (parentTreeNode != null) {\r\n            params[\"parentTreeNode\"] = parentTreeNode;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(acp + \"/geoobject-editor/createGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    data(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid,\r\n            sort: sort\r\n        } as any;\r\n\r\n        if (pageNumber != null) {\r\n            params.pageNumber = pageNumber;\r\n        }\r\n\r\n        if (pageSize != null) {\r\n            params.pageSize = pageSize;\r\n        }\r\n\r\n        if (filter.length > 0) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/master-list/data\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    values(oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[]): Promise<{ label: string, value: string }[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid,\r\n            attributeName: attributeName,\r\n            valueAttribute: valueAttribute\r\n        } as any;\r\n\r\n        if (filter.length > 0) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        if (value != null && value.length > 0) {\r\n            params.value = value;\r\n        }\r\n\r\n        return this.http\r\n            .post<{ label: string, value: string }[]>(acp + \"/master-list/values\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    publishShapefile(oid: string): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            oid: oid\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<MasterListVersion>(acp + \"/master-list/generate-shapefile\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    progress(oid: string): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<Progress>(acp + \"/master-list/progress\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListsByOrg(): Promise<{ orgs: MasterListByOrg[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + \"/master-list/list-org\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/master-list/get-publish-jobs\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getDatasetBounds(oid: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<number[]>(acp + \"/master-list/bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getOrganizations(): Promise<Organization[]> {\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(acp + \"/cgr/organizations/get-all\")\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from \"@registry/model/registry\";\nimport { AttributeConfigInfo } from \"@registry/model/sync\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<SynchronizationConfig>>(acp + \"/synchronization-config/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<SynchronizationConfig> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<SynchronizationConfig>(acp + \"/synchronization-config/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<AttributeConfigInfo[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalId\", externalId);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<AttributeConfigInfo[]>(acp + \"/synchronization-config/get-custom-attr\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalSystemId\", externalSystemId);\n        params = params.set(\"hierarchyTypeCode\", hierarchyTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<any[]>(acp + \"/synchronization-config/get-config-for-es\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SynchronizationConfig>(acp + \"/synchronization-config/apply\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {};\n\n        if (oid != null) {\n            params = { oid: oid };\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(acp + \"/synchronization-config/edit\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    run(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/synchronization-config/run\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJobs(oid:string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n//        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExportScheduledJob>>(acp + \"/synchronization-config/get-jobs\", { params: params })\n//            .pipe(finalize(() => {\n//                this.eventService.complete();\n//            }))\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { PaginationPage } from \"@registry/model/registry\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\ndeclare let acp: any;\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    getMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PaginationPage> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"orderBy\", \"createDate\");\r\n        params = params.set(\"pageNum\", pageNum.toString());\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"whereStatus\", whereStatus);\r\n\r\n        return this.http\r\n            .get<PaginationPage>(acp + \"/tasks/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    completeTask(taskId: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/tasks/complete\", JSON.stringify({ id: taskId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setTaskStatus(taskId: string, status: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(acp + \"/tasks/setTaskStatus\", JSON.stringify({ id: taskId, status: status }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","import * as d3 from \"d3\";\n\nexport function calculateTextWidth(text: string, fontSize: number): number {\n    let svg = d3.select(\"#svg\");\n\n    let textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n    let textEl = textCalcGroup.append(\"text\")\n        .attr(\"x\", -5000)\n        .attr(\"y\", -5000)\n        .attr(\"font-size\", fontSize)\n        .text(text);\n\n    let bbox = textEl.node().getBBox();\n\n    d3.select(\".g-text-calc\").remove();\n\n    return bbox.width + 2; // +2 is for padding. I caught this truncating just ever so slightly\n}\n\nexport function svgPoint(x: number, y: number) {\n    let svg: any = d3.select(\"#svg\").node();\n    let pt = svg.createSVGPoint();\n\n    pt.x = x;\n    pt.y = y;\n\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n    return point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) ||\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) &&\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n    return { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy, true ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\nimport { GeoObjectType, GeoObjectOverTime } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"submit-change-request\",\n    templateUrl: \"./submit-change-request.component.html\",\n    styleUrls: [\"./submit-change-request.css\"]\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    geoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    loading: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor(private modalService: BsModalService, private registryService: RegistryService,\n        private changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.dataSource = Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes([], null).then(types => {\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                const type = types[i];\n                const orgCode = type.organizationCode;\n                const typeCode = type.superTypeCode != null && type.superTypeCode != \"\" ? type.superTypeCode : type.code;\n\n                if (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort((a, b) => {\n                if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n                else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n                else return 0;\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public handleDateChange() {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n        } else {\n            this.forDate = null;\n        }\n    }\n\n    public onValidChange(newValid: boolean) {\n        if (this.geoObject == null) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading(e: boolean): void {\n        this.loading = e;\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n            this.geoObject = geoObject;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.geoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div style=\"margin-top:50px;margin-bottom:50px;background:#f7f7f7;width:100%;padding:10px;\">\n      <h3 style=\"margin-bottom: 20px;\"><localize key=\"change.request.search.for.geoobject.header\"></localize></h3>\n      <div class=\"row\">\n\n        <div class=\"col-md-3\">\n          <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>\n          <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\" [(ngModel)]=\"geoObjectType\" required>\n            <option>  </option>\n            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n          </select>\n        </div>\n        \n        <div class=\"col-md-3\">\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"!geoObjectType\" \n            [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" customStyles=\"width:100%\"></date-field>\n        </div>\n        \n        <div class=\"col-md-4\">\n          <localize key=\"change.request.search.for.geoobject.search.label\"></localize>\n          <input type=\"text\" [ngClass]=\"{'inline-loading':loading}\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" (typeaheadLoading)=\"changeTypeaheadLoading($event)\" [placeholder]=\"('masterlist.search' | localize) + '...'\" class=\"form-control\" autocomplete=\"off\">\n        </div>\n        \n        <div class=\"col-md-2\">\n          <label></label>\n           <!-- We cannot use the dataset-location-manager here because it pulls the tiles from the dataset (list) and we don't have a dataset. -->\n           <!-- <a *ngIf=\"preGeoObject && forDate\" [routerLink]=\"['/registry/dataset-location-manager', '123', preGeoObject.attributes.type, 'false', dateStr, preGeoObject.attributes.code, 'true']\" -->\n          \n           <a *ngIf=\"geoObject && forDate\" [routerLink]=\"['/registry/location-manager', geoObject.attributes.uid, geoObject.attributes.type, dateStr, 'true', 'CR']\">\n            <button class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n          </a>\n          <button *ngIf=\"!(geoObject && forDate)\" disabled=\"true\" class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n        </div>\n\n      </div>\n      \n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { DatePipe } from \"@angular/common\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError, ValueOverTime } from \"@registry/model/registry\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\n@Component({\n    selector: \"geoobject-editor\",\n    templateUrl: \"./geoobject-editor.component.html\",\n    styleUrls: [\"./geoobject-editor.component.css\"],\n    providers: [DatePipe]\n})\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n    //    /*\n    //     * GeoObject Geometry Editor\n    //     */\n    //    @ViewChild( \"geometryEditor\" ) geometryEditor;\n    //\n    //    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild(\"parentSelector\") parentSelector;\n\n    areParentsValid: boolean = true;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor(private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate(votArray: ValueOverTime[], startDate: string): any {\n        for (let i: number = 0; i < votArray.length; ++i) {\n            if (votArray[i].startDate === startDate) {\n                return votArray[i];\n            }\n        }\n\n        return null;\n    }\n\n    setMasterListId(id: string) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date(Date.parse(this.dateStr));\n    }\n\n    setOnSuccessCallback(func: Function) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew(typeCode: string, dateStr: string, isGeometryEditable: boolean) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date(Date.parse(this.dateStr));\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(this.goPropertiesPre)).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        });\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError(importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date(Date.parse(dateStr));\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0) {\n            this.hierarchies = importError.object.parents;\n            this.areParentsValid = true;\n        } else {\n            this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n                this.hierarchies = retJson.hierarchies;\n            });\n            this.areParentsValid = false;\n        }\n\n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n\n        this.submitFunction = () => {\n            let config = {\n                historyId: historyId,\n                importErrorId: importError.id,\n                resolution: \"APPLY_GEO_OBJECT\",\n                parentTreeNode: this.hierarchies,\n                geoObject: this.goSubmit,\n                isNew: importError.object.isNew\n            };\n\n            this.registryService.submitErrorResolve(config)\n                .then(() => {\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n        };\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting(code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean): void {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date(Date.parse(this.dateStr));\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject(code, typeCode);\n        this.fetchGeoObjectType(typeCode);\n        this.fetchHierarchies(code, typeCode);\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject(code: string, typeCode: string) {\n        this.registryService.getGeoObjectOverTime(code, typeCode).then(geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(geoObject)).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(this.goPropertiesPre)).attributes);\n            // this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n\n            this.goSubmit = this.goPropertiesPost;\n\n            //            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then(locales => {\n            this.localizeService.setLocales(locales);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchGeoObjectType(code: string) {\n        this.registryService.getGeoObjectTypes([code], null)\n            .then(geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n\n                if (this.goPropertiesPre != null) {\n                    this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null) {\n                    this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if (!this.geoObjectType.isGeometryEditable) {\n                    //                    this.areGeometriesValid = true;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                console.log(err);\n                //                this.error( err );\n            });\n    }\n\n    private fetchHierarchies(code: string, typeTypeCode: string) {\n        this.registryService.getHierarchiesForGeoObject(code, typeTypeCode)\n            .then((hierarchies: any) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    getTypeAheadObservable(text, typeCode) {\n        return Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(text, typeCode).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, ptn: ParentTreeNode): void {\n        this.registryService.getGeoObjectByCode(e.item.code, ptn.geoObject.properties.type)\n            .then(geoObject => {\n                ptn.geoObject = geoObject;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    public onValidChange() {\n        if (this.attributeEditor != null) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n        //        if ( this.geometryEditor != null ) {\n        //            this.areGeometriesValid = this.geometryEditor.getIsValid();\n        //        }\n        if (this.parentSelector != null) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n\n        //        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage(nextPage: number, force: boolean = false): void {\n        if (nextPage === this.tabIndex && !force) {\n            return;\n        }\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n\n        if (nextPage === 2) {\n            this.isEditingGeometries = true;\n        } else {\n            this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if (this.attributeEditor != null) {\n            this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if (this.parentSelector != null) {\n            this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        if (this.isValid) {\n            this.bsModalRef.hide();\n\n            this.persistModelChanges();\n\n            if (this.submitFunction == null) {\n            /*\n                this.registryService.applyGeoObjectEdit(this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes)\n                    .then(() => {\n\n                        if (this.onSuccessCallback != null) {\n                            this.onSuccessCallback();\n                        }\n\n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                    */\n            } else {\n                this.submitFunction();\n            }\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n            \n                <div *ngIf=\"!areParentsValid\" class=\"alert alert-danger\" role=\"alert\">\n                  <localize key=\"geoobject.editor.modal.parents.must.be.assigned.message\"></localize>                \n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, Input } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { Step, StepConfig } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"step-indicator\",\n    templateUrl: \"./step-indicator.component.html\",\n    styleUrls: [\"./step-indicator.css\"]\n})\nexport class StepIndicatorComponent {\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"steps\")\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n    constructor(private localizeService: LocalizationService) {\n        this._stepConfig = { steps: [] };\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ContextLayer, ContextLayerGroup, MasterList } from \"@registry/model/registry\";\nimport { ContextLayerModalComponent } from \"./context-layer-modal.component\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"layer-panel\",\n    templateUrl: \"./layer-panel.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LayerPanelComponent implements OnInit, OnChanges {\n\n    @Input() filter: string[] = [];\n    @Output() layerChange = new EventEmitter<ContextLayer>();\n    @Output() baseLayerChange = new EventEmitter<any>();\n\n    baselayerIconHover = false;\n\n    lists: MasterList[] = [];\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"baselayer.satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n//         {\n//             name: 'Streets',\n//             label: 'baselayer.streets',\n//             id: 'streets-v11',\n//             sprite: 'mapbox://sprites/mapbox/streets-v11',\n//             url: 'mapbox://styles/mapbox/streets-v11'\n//         }\n    ];\n\n    contextLayerGroups: ContextLayerGroup[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, public service: RegistryService) { }\n\n    ngOnInit(): void {\n        this.service.getAllMasterListVersions().then(lists => {\n            this.lists = lists;\n\n            this.updateContextGroups();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.filter.currentValue !== changes.filter.previousValue) {\n            this.updateContextGroups();\n        }\n    }\n\n    updateContextGroups(): void {\n        this.lists.forEach(list => {\n            let contextGroup = { oid: list.oid, displayLabel: list.displayLabel.localizedValue, contextLayers: [] };\n\n            list.versions.forEach(version => {\n                const index = this.filter.indexOf(version.oid);\n\n                if (index === -1) {\n                    let thisContextLayer = { oid: version.oid, displayLabel: version.forDate, active: false, enabled: false };\n\n                    contextGroup.contextLayers.push(thisContextLayer);\n                }\n            });\n\n            if (contextGroup.contextLayers.length > 0) {\n                this.contextLayerGroups.push(contextGroup);\n            }\n        });\n    }\n\n    groupHasEnabledContextLayers(group: string): boolean {\n        let hasEnabled = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            if (cLayerGroup.oid === group) {\n                cLayerGroup.contextLayers.forEach(cLayer => {\n                    if (cLayer.enabled) {\n                        hasEnabled = true;\n                    }\n                });\n            }\n        });\n\n        return hasEnabled;\n    }\n\n    hasEnabledContextLayers(): boolean {\n        let hasEnabled = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            cLayerGroup.contextLayers.forEach(cLayer => {\n                if (cLayer.enabled) {\n                    hasEnabled = true;\n                }\n            });\n        });\n\n        return hasEnabled;\n    }\n\n    toggleContextLayer(layer: ContextLayer): void {\n        layer.active = !layer.active;\n\n        this.layerChange.emit(layer);\n    }\n\n    removeContextLayer(layer: ContextLayer): void {\n        layer.active = false;\n        layer.enabled = false;\n\n        this.layerChange.emit(layer);\n    }\n\n    addContextLayerModal(): void {\n        let bsModalRef = this.modalService.show(ContextLayerModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            // eslint-disable-next-line quote-props\n            \"class\": \"context-layer-modal\"\n        });\n        bsModalRef.content.contextLayerGroups = this.contextLayerGroups;\n\n        //        bsModalRef.content.onSubmit.subscribe(() => {\n        //\n        //            this.contextLayerGroups.forEach(cLayerGroup => {\n        //                cLayerGroup.contextLayers.forEach(cLayer => {\n        //\n        //                    console.log(\"Emitting event\", cLayer);\n        //                    this.layerChange.emit(cLayer);\n        //                });\n        //            })\n        //\n        //        });\n    }\n\n    toggleBaseLayer(layer: any): void {\n        this.baseLayers.forEach(bl => {\n            bl.active = false;\n        });\n\n        layer.active = true;\n\n        this.baseLayerChange.emit(layer);\n    }\n\n}\n","\n<div class=\"layer-toggle\" (mouseenter)=\"baselayerIconHover = true\" (mouseleave)=\"baselayerIconHover = false\">\n\n  <i class=\"fa fa-bars\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n  <div [hidden]=\"!baselayerIconHover\">\n\n    <div style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.base.layers.label\"></localize>\n      </h4>\n      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n        <input class=\"layer-toggle-input\" type='radio' name='baselayers' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"toggleBaseLayer(baseLayer)\">\n        <label class=\"layer-toggle-label\"><localize [key]=\"baseLayer.label\"></localize></label>\n      </div>\n    </div>\n    <div>\n      <div *ngIf=\"hasEnabledContextLayers()\">\n        <h4>\n          <localize key=\"explorer.context.layers.label\"></localize>\n        </h4>\n        <div class=\"list-group\">\n          <div *ngFor=\"let cLayerGroup of contextLayerGroups;\">\n            <div *ngIf=\"groupHasEnabledContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n              <label>{{ cLayerGroup.displayLabel }}</label>\n              <div class=\"list-group\">\n                <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                  <div class=\"list-group-item\" style=\"border: none;\" *ngIf=\"cLayer.enabled\">\n                    <input type=\"checkbox\" [checked]=\"cLayer.active\" (click)=\"toggleContextLayer(cLayer)\"> {{ cLayer.displayLabel }} <i class=\"fa fa-times delete-btn clickable\" aria-hidden=\"true\" (click)=\"removeContextLayer(cLayer)\"></i>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n\n      <button class=\"btn btn-primary\" (click)=\"addContextLayerModal()\">+ <localize key=\"explorer.add.context.layer.button.label\"></localize></button>\n    </div>\n\n  </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\nimport { ErrorModalComponent, ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"feature-panel\",\n    templateUrl: \"./feature-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class FeaturePanelComponent implements OnInit {\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\",\n        GEOMETRY: \"GEOMETRY\"\n    }\n\n    @Input() datasetId: string;\n\n    @Input() type: GeoObjectType;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set code(value: string) {\n        this.updateCode(value);\n    }\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    _code: string = null;\n\n    @Output() featureChange = new EventEmitter<GeoObjectOverTime>();\n    @Output() modeChange = new EventEmitter<boolean>();\n    @Output() panelCancel = new EventEmitter<void>();\n    @Output() panelSubmit = new EventEmitter<{isChangeRequest:boolean, geoObject?: any, changeRequestId?: string}>();\n\n    isValid: boolean = true;\n\n    bsModalRef: BsModalRef;\n\n    mode: string = null;\n\n    isMaintainer: boolean;\n\n    // The current state of the GeoObject in the GeoRegistry\n    preGeoObject: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    postGeoObject: GeoObjectOverTime;\n\n    attribute: AttributeType = null;\n\n    isNew: boolean = false;\n\n    isEdit: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    hierarchy: HierarchyOverTime = null;\n\n    reason: string = \"\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private modalService: BsModalService, private authService: AuthService, private geometryService: GeometryService) { }\n\n    ngOnInit(): void {\n        this.isMaintainer = this.authService.isSRA() || this.authService.isOrganizationRA(this.type.organizationCode) || this.authService.isGeoObjectTypeOrSuperRM(this.type);\n        this.mode = \"ATTRIBUTES\";\n\n//        this.isEdit = !this.readOnly;\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    updateCode(code: string): void {\n        this._code = code;\n        this.postGeoObject = null;\n        this.preGeoObject = null;\n        this.hierarchies = null;\n\n        if (code != null && this.type != null) {\n            if (code !== \"__NEW__\") {\n                this.isNew = false;\n\n                this.service.getGeoObjectOverTime(code, this.type.code).then(geoObject => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(geoObject)).attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n\n                this.service.getHierarchiesForGeoObject(code, this.type.code).then((hierarchies: HierarchyOverTime[]) => {\n                    this.hierarchies = hierarchies;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else {\n                this.isNew = true;\n\n                this.service.newGeoObjectOverTime(this.type.code).then(retJson => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, retJson.geoObject.attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n\n                    this.hierarchies = retJson.hierarchies;\n                    this.setEditMode(true);\n                });\n            }\n        }\n    }\n\n    onCancelInternal(): void {\n        this.panelCancel.emit();\n\n        // if (this._code === '__NEW__') {\n        //    this.updateCode(null);\n        // }\n        // else {\n        //    this.updateCode(this._code);\n        // }\n    }\n\n    onSubmit(): void {\n        if (this.isNew) {\n            this.service.applyGeoObjectCreate(this.hierarchies, this.postGeoObject, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                    this.updateCode(this._code);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.service.applyGeoObjectEdit(this.postGeoObject.attributes.code, this.type.code, this.attributeEditor.getActions(), this.datasetId, this.reason).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                    this.updateCode(this._code);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n\n        this.geometryService.stopEditing();\n    }\n\n    onManageAttributeVersion(attribute: AttributeType): void {\n        this.attribute = attribute;\n        this.mode = this.MODE.VERSIONS;\n    }\n\n    onManageHiearchyVersion(hierarchy: HierarchyOverTime): void {\n        this.hierarchy = hierarchy;\n        this.mode = this.MODE.HIERARCHY;\n    }\n\n    onAttributeChange(postGeoObject: GeoObjectOverTime): void {\n        this.postGeoObject = postGeoObject;\n\n        this.mode = this.MODE.ATTRIBUTES;\n    }\n\n    onHierarchyChange(hierarchy: HierarchyOverTime): void {\n        const index = this.hierarchies.findIndex(h => h.code === hierarchy.code);\n        if (index !== -1) {\n            this.hierarchies[index] = hierarchy;\n        }\n\n        this.mode = this.MODE.ATTRIBUTES;\n    }\n\n    onEditAttributes(): void {\n        this.setEditMode(!this.isEdit);\n    }\n\n    setEditMode(value: boolean): void {\n        this.isEdit = value;\n        this.reason = null;\n\n        this.modeChange.emit(this.isEdit);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div *ngIf=\"mode == MODE.ATTRIBUTES && postGeoObject != null\">\n    <!-- Attributes tab -->\n    <geoobject-shared-attribute-editor \n      #attributeEditor \n      [geoObjectType]=\"type\" \n      [postGeoObject]=\"postGeoObject\" \n      [forDate]=\"this.forDate\" \n      [isNew]=\"isNew\" \n      [isEditingGeometries]=\"false\" \n      [isGeometryInlined]=\"false\"\n      [customEvent]=\"true\"\n      [hierarchies]=\"hierarchies\"\n      (onManageVersion)=\"onManageAttributeVersion($event)\" \n      (onChange)=\"onAttributeChange($event)\" \n      [readOnly]=\"!isEdit\"\n      [animate]=true\n      (valid)=\"setValid($event)\"\n      > \n    </geoobject-shared-attribute-editor>\n    \n    <!--\n    <div *ngIf=\"isEdit\" class=\"panel panel-default\">\n      <div class=\"panel-heading\">\n        <h4 style=\"margin:0;\">\n          <localize key=\"explorer.geometry.section\"></localize>\n        </h4>\n      </div>\n      <div class=\"panel-body\">\n        <div class=\"button-holder text-left\" style=\"margin:0;\">\n          <button type=\"submit\" style=\"width:100%;\" (click)=\"this.mode = this.MODE.GEOMETRY\" class=\"btn btn-primary\" role=\"button\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n    -->\n    \n    <!--\n    <div *ngIf=\"hierarchies != null\">\n      <tree-geo-selector *ngFor=\"let hierarchy of hierarchies\" [forDate]=\"this.forDate\" [hierarchy]=\"hierarchy\" [readOnly]=\"!isEdit\" (onManageVersion)=\"onManageHiearchyVersion($event)\"> </tree-geo-selector>\n    </div>\n    -->\n    \n    <div *ngIf=\"isEdit && !isMaintainer\" class=\"form-group\" style=\"z-index: 0;\">\n      <label> \n        <localize key=\"change.request.reason.label\"></localize>\n      </label>\n      <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" class=\"form-control\" name=\"reason-input\" required></textarea>\n    </div>\n\n    <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    \n      <button *ngIf=\"!readOnly && !isEdit\" type=\"submit\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n        <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n      </button>\n      \n      <button *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-default\" (click)=\"onCancelInternal()\">\n        <localize key=\"modal.button.cancel\"></localize>\n      </button>\n      <button *ngIf=\"isEdit\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || (!isMaintainer && (!reason || (reason && reason.trim().length === 0)))\">\n        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n      </button>\n\n    </div>\n  </div>\n  <!--\n  <div *ngIf=\"mode == MODE.VERSIONS && attribute != null\">\n    <manage-versions \n      [attribute]=\"attribute\"\n      [geoObjectType]=\"type\"\n      [geoObjectOverTimeInput]=\"postGeoObject\"\n      [isNewGeoObject]=\"false\"\n      (onChange)=\"onAttributeChange($event)\">\n    </manage-versions>\n  </div>\n  <div *ngIf=\"mode == MODE.HIERARCHY && hierarchy != null\">\n    <manage-parent-versions \n      [hierarchy]=\"hierarchy\"\n      (onChange)=\"onHierarchyChange($event)\">\n    </manage-parent-versions>\n  </div>\n  <div *ngIf=\"mode == MODE.GEOMETRY\">\n    <geometry-panel \n      [geoObjectType]=\"type\"\n      [geoObjectOverTimeInput]=\"postGeoObject\"\n      [isNewGeoObject]=\"false\"\n      (onChange)=\"onAttributeChange($event)\"\n      (onEdit)=\"onEditGeometryVersion($event)\"\n      (onCloneGeometry)=\"onCloneGeometry($event)\">\n    </geometry-panel>\n  </div>\n  -->\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"create-hierarchy-type-modal\",\n    templateUrl: \"./create-hierarchy-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n\n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n    readOnly: boolean = false;\n\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            rootGeoObjectTypes: [],\n            organizationCode: \"\"\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n            // Filter out organizations they're not RA's of, unless we're readOnly.\n            if (!this.readOnly) {\n                this.organizations = [];\n\n                for (var i = 0; i < orgs.length; ++i) {\n                    if (this.auth.isOrganizationRA(orgs[i].code)) {\n                        this.organizations.push(orgs[i]);\n                    }\n                }\n            } else {\n                this.organizations = orgs;\n            }\n\n            if (!this.edit && this.organizations.length === 1) {\n                this.hierarchyType.organizationCode = this.organizations[0].code;\n                this.organizationLabel = this.organizations[0].label.localizedValue;\n            } else if (this.edit || this.readOnly) {\n                this.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getOrganizationLabelFromCode(orgCode: string) {\n        for (var i = 0; i < this.organizations.length; ++i) {\n            if (this.organizations[i].code === orgCode) {\n                return this.organizations[i].label.localizedValue;\n            }\n        }\n\n        console.log(\"Did not find org with code [\" + orgCode + \"]\");\n        return orgCode;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if (this.readOnly) {\n            this.bsModalRef.hide();\n            return;\n        }\n\n        if (this.edit) {\n            this.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize key=\"hierarchy.management.create.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> \n          <span  style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      \n      <localized-text [(value)]=\"hierarchyType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\" [disabled]=\"readOnly\"></localized-text>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.disclaimer\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.disclaimer\" name=\"disclaimer\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.accessConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.useConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      \n      <hr/>\n      \n      <div class=\"form-group\">\n        <h4>\n          <localize key=\"masterlist.contact\"></localize>\n        </h4>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.phoneNumber\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.phoneNumber\" name=\"phoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.email\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1 || form.invalid\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\n@Component({\n    selector: \"create-geoobjtype-modal\",\n    templateUrl: \"./create-geoobjtype-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organization: Organization = null;\n    message: string = null;\n    parents: GeoObjectType[];\n    hierarchyType: HierarchyType;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            geometryType: \"MULTIPOINT\",\n            isLeaf: false,\n            isGeometryEditable: true,\n            organizationCode: \"\",\n            attributes: []\n        };\n    }\n\n    init(organization: Organization, parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n        this.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\n        if (groupSuperType) {\n            this.geoObjectType.superTypeCode = groupSuperType.code;\n            this.geoObjectType.geometryType = groupSuperType.geometryType;\n            this.geoObjectType.isPrivate = groupSuperType.isPrivate;\n        }\n\n        // Filter out parents that are not abstract\n        this.parents = parents.filter(parent => parent.isAbstract);\n\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n        this.geoObjectType.organizationCode = this.organization.code;\n        this.organizationLabel = this.organization.label.localizedValue;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n            this.onGeoObjTypeCreate.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    toggleIsAbstract(): void {\n        this.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"geoObjectType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <label style=\"display: block;\">\n            <localize key=\"attribute.group.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n        \n          <label style=\"display: block;\">\n            <localize key=\"geoObjectType.attr.visibility.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"geoObjectType.superTypeCode != null\" [(value)]=\"geoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [disabled]=\"geoObjectType.superTypeCode != null && geoObjectType.superTypeCode != ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { ManageGeoObjectTypeModalState, GeoObjectType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-geoobjecttype-modal\",\n    templateUrl: \"./manage-geoobjecttype-modal.component.html\",\n    styleUrls: [\"./manage-geoobjecttype-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, geoObjectTypeManagementService: GeoObjectTypeManagementService) {\n        this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe(modalState => {\n            this.modalState = modalState;\n        });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy() {\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the\n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next(data);\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form>\n\n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n\n<!--   @Deprecate -->\n<!--   <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></manage-attributes-modal> -->\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\"></edit-term-option-input>\n\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, AttributeType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"geoobjecttype-input\",\n    templateUrl: \"./geoobjecttype-input.component.html\",\n    styleUrls: [\"./geoobjecttype-input.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n\n    organizationLabel: string;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"setGeoObjectType\")\n    set in(geoObjectType: GeoObjectType) {\n        if (geoObjectType) {\n            this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        }\n    }\n\n    message: string = null;\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizationService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n\n        this.fetchOrganizationLabel();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    fetchOrganizationLabel(): void {\n        this.registryService.getOrganizations().then(orgs => {\n            for (let i = 0; i < orgs.length; ++i) {\n                if (orgs[i].code === this.editGeoObjectType.organizationCode) {\n                    this.organizationLabel = orgs[i].label.localizedValue;\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageAttributes, attribute: \"\", termOption: \"\" });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType(this.editGeoObjectType).then(geoObjectType => {\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n\n        // return false;\n\n        return true;\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"geoObjectType.attr.visibility.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"geoObjectType.superTypeCode\" [(value)]=\"editGeoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n<!--                             <ul class=\"list-group list-group-flush\"> -->\n<!--                                 <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li> -->\n<!--                             </ul> -->\n\n<!--                             <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\"> -->\n<!--                                 <localize key=\"modal.button.manageAttributes\"></localize> -->\n<!--                             </button> -->\n\n                        <div class=\"table-responsive\">\n                              <table class=\"table\">\n<!--                                   <thead> -->\n<!--                                       <tr> -->\n<!--                                           <th> -->\n<!--                                               <localize key=\"data.property.label.label\"></localize> -->\n<!--                                           </th> -->\n<!--                                           <th class=\"button-column-header\"> -->\n<!--                                               <localize key=\"data.property.label.actions\"></localize> -->\n<!--                                           </th> -->\n<!--                                       </tr> -->\n<!--                                   </thead> -->\n                                  <tbody>\n                                      <tr *ngFor=\"let attr of geoObjectType.attributes\" >\n                                          <td>{{attr.label.localizedValue}}</td>\n                                          <td class=\"button-column\" style=\"width: 60px;\">\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                                  [title]=\"'modal.button.edit' | localize\"></a>\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                                  [title]=\"'modal.button.remove' | localize\"></a>\n                                          </td>\n                                      </tr>\n                                  </tbody>\n                              </table>\n                          </div>\n                          \n                          <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                              <localize key=\"modal.button.add\"></localize>\n                          </i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, AttributeTermType, AttributeDecimalType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"define-attribute-modal-content\",\n    templateUrl: \"./define-attribute-modal-content.component.html\",\n    styleUrls: [\"./define-attribute-modal-content.css\"]\n})\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    newAttribute: AttributeType = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.create.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.attributeInputComponent) {\n            this.attributeInputComponent.animate();\n        }\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.addAttributeType(this.geoObjectType.code, this.newAttribute).then(data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setAttribute(type: string): void {\n        if (type === \"term\") {\n            this.newAttribute = new AttributeTermType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else if (type === \"float\") {\n            this.newAttribute = new AttributeDecimalType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else {\n            this.newAttribute = new AttributeType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        let isAttrValid: boolean = false;\n\n        if (this.attributeInputComponent) {\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n\n        if (isAttrValid) {\n            return true;\n        }\n\n        return false;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Directive } from \"@angular/core\";\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from \"@angular/forms\";\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator(): ValidatorFn {\n    return (c: AbstractControl) => {\n        if (c.value) {\n            let isValid = c.value.indexOf(\" \") === -1;\n\n            if (isValid) {\n                return null;\n            } else {\n                return {\n                    geoObjectAttributeCode: {\n                        valid: false\n                    }\n                };\n            }\n        }\n    };\n}\n\n@Directive({\n    selector: \"[geoObjectAttributeCode][ngModel]\",\n    providers: [\n        // eslint-disable-next-line no-use-before-define\n        { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n    ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n\n    validator: ValidatorFn;\n\n    constructor() {\n        this.validator = validateGeoObjectAttributeCodeValidator();\n    }\n\n    validate(c: FormControl) {\n        return this.validator(c);\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"edit-attribute-modal-content\",\n    templateUrl: \"./edit-attribute-modal-content.component.html\",\n    styleUrls: [\"./edit-attribute-modal-content.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]]\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n            for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n                let attr = this.geoObjectType.attributes[i];\n                if (attr.code === data.code) {\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    back(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectType, AttributeTermType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { GeoObjectTypeManagementService } from \"@registry/service/geoobjecttype-management.service\";\n\n@Component({\n    selector: \"term-option-widget\",\n    templateUrl: \"./term-option-widget.component.html\",\n    styleUrls: [\"./term-option-widget.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    state: string = \"none\";\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n\n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n\n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" });\n    }\n\n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\nimport { GeoObjectType, AttributeTermType, Term } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"manage-term-options\",\n    templateUrl: \"./manage-term-options.component.html\",\n    styleUrls: [\"./manage-term-options.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType;\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    message: string = null;\n    termOption: Term;\n    state: string = \"none\";\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: true }\n        ]\r\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.termOption.code && this.termOption.code.length > 0) {\n            // If code has a space\n            if (this.termOption.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            // If label is only spaces\n            for (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n                if (this.termOption.label.localeValues[i].value.replace(/\\s/g, \"\").length === 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n            return false;\n        }\n\n        return false;\n    }\n\n    addTermOption(): void {\n        this.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            this.attribute.rootTerm.children.push(data);\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    deleteTermOption(termOption: Term): void {\n        this.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n            if (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n                this.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n            }\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    removeTermOption(termOption: Term): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + termOption.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteTermOption(termOption);\n        });\n    }\n\n    editTermOption(termOption: Term): void {\n        const state = {\n            state: GeoObjectTypeModalStates.editTermOption,\n            attribute: this.attribute,\n            termOption: JSON.parse(JSON.stringify(termOption))\n        };\n\n        this.geoObjectTypeManagementService.setModalState(state);\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from \"@shared/model/modal\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"edit-term-option-input\",\n    templateUrl: \"./edit-term-option-input.component.html\",\n    styleUrls: [],\n    animations: [\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n                    ]\n                )]\n        )\n    ]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTermType = null;\n    @Input() termOption: Term;\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), active: true, enabled: true }\n\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            // Update the term definition on the attribute\n            const index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n            if (index !== -1) {\n                this.attribute.rootTerm.children[index] = data;\n            }\n\n            this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: null });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\n\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { SvgHierarchyNode } from \"./svg-hierarchy-node\";\nimport { calculateTextWidth } from \"./svg-util\";\nimport { INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL, HierarchyComponent, TREE_SCALE_FACTOR_X, TREE_SCALE_FACTOR_Y } from \"../hierarchy.component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nexport class SvgHierarchyType {\n\n    public static gotRectW: number = 150;\n    public static gotRectH: number = 25;\n    public static gotBodyFontSize: number = 8;\n    public static gotOptionsButtonFontSize: number = 12;\n\n    public static gotHeaderW: number = 150;\n    public static gotHeaderH: number = 14;\n    public static gotHeaderFontSize: number = 8;\n\n    public static MOUSE_HOVER_EVENT_ENTER = \"mouseenter\";\n\n    public static MOUSE_HOVER_EVENT_MOVE = \"mousemove\";\n\n    public static MOUSE_HOVER_EVENT_EXIT = \"mouseleave\";\n\n    hierarchyComponent: HierarchyComponent;\n\n    hierarchyType: HierarchyType;\n\n    svgEl: any;\n\n    d3Hierarchy: any;\n\n    d3Tree: any;\n\n    isPrimary: boolean;\n\n    tooltip: any;\n\n    public constructor(hierarchyComponent: HierarchyComponent, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        const hierarchyType = ht;\n\n        this.hierarchyComponent = hierarchyComponent;\n        this.hierarchyType = hierarchyType;\n        this.svgEl = svgEl;\n\n        this.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n        this.isPrimary = isPrimary;\n\n        this.d3Tree = d3.tree().nodeSize([SvgHierarchyType.gotRectW * TREE_SCALE_FACTOR_X, (SvgHierarchyType.gotRectH + SvgHierarchyType.gotHeaderH) * TREE_SCALE_FACTOR_Y]).separation((a, b) => 0.8)(this.d3Hierarchy);\n    }\n\n    public getD3Tree() {\n        return this.d3Tree;\n    }\n\n    public getCode(): string {\n        return this.hierarchyType.code;\n    }\n\n    public getNodeByCode(gotCode: string): SvgHierarchyNode {\n        let treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\n        if (treeNode == null) {\n            return null;\n        }\n\n        return new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService, this.authService);\n    }\n\n    public renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n        let bbox = hg.node().getBBox();\n\n        let colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        let headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        const headerFontSize: number = 10;\n        const iconWidth: number = 20;\n        const maxHierarchyLabelLength = 200;\n\n        let hierarchyLabelW: number = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize);\n        let hierarchyLabelH:number = headerFontSize * 2;\n        let hierarchyLabelY:number = bbox.y + headerFontSize * 1.6;\n        if (hierarchyLabelW > maxHierarchyLabelLength) {\n            hierarchyLabelW = maxHierarchyLabelLength;\n            hierarchyLabelH = headerFontSize * 3;\n            hierarchyLabelY = bbox.y + headerFontSize;\n        }\n\n        let lineWidth = bbox.width;\n        let textWidth = hierarchyLabelW + iconWidth;\n\n        if (textWidth > lineWidth) {\n            lineWidth = textWidth;\n        }\n\n        // Hierarchy icon (font awesome)\n        headerg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .style(\"font-family\", \"FontAwesome\")\n            .attr(\"fill\", \"grey\")\n            .attr(\"font-size\", 12)\n            .text(\"\\uf0e8\");\n\n        // Hierarchy display label\n        colHeader.append(\"foreignObject\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"x\", bbox.x + iconWidth)\n            .attr(\"y\", hierarchyLabelY)\n            .attr(\"width\", hierarchyLabelW)\n            .attr(\"height\", hierarchyLabelH)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"gray\")\n            // .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => this.hierarchyType.label.localizedValue);\n\n        // Line underneath the header\n        headerg.append(\"line\").classed(\"hierarchy-header-line\", true)\n            .attr(\"x1\", bbox.x)\n            .attr(\"y1\", bbox.y + headerFontSize)\n            .attr(\"x2\", bbox.x + lineWidth)\n            .attr(\"y2\", bbox.y + headerFontSize)\n            .attr(\"stroke\", \"grey\")\n            .attr(\"stroke-width\", .5);\n\n        let headerGBbox = headerg.node().getBBox();\n        headerg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n        // Col header label\n        colHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize + 2)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"grey\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .text(colHeaderLabel);\n\n        colHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n        return headerg;\n    }\n\n    getRelatedHierarchies(gotCode: string): string[] {\n        let got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n        if (got.relatedHierarchies == null) {\n            got.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n        }\n\n        let relatedHiers: string[] = got.relatedHierarchies;\n\n        let index = null;\n        for (let i = 0; i < relatedHiers.length; ++i) {\n            if (relatedHiers[i] === this.getCode()) {\n                index = i;\n            }\n        }\n\n        if (index != null) {\n            relatedHiers.splice(index, 1);\n        }\n\n        return relatedHiers;\n    }\n\n    private nodeMouseover(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 1);\n    }\n\n    private nodeMousemove(event: any, element: any, data:any) {\n        d3.select(\"#hierarchyLabel\").html(this.hierarchyType.label.localizedValue);\n        d3.select(\"#hierarchyCodeLabel\").html(this.hierarchyType.code);\n\n        d3.select(\"#geoObjectTypeLabel\").html(data.data.label);\n        d3.select(\"#geoObjectTypeCodeLabel\").html(data.data.geoObjectType);\n\n        d3.select(\"#hierarchyOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyType.organizationCode).label.localizedValue);\n        d3.select(\"#geoObjectTypeOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyComponent.findGeoObjectTypeByCode(data.data.geoObjectType).organizationCode).label.localizedValue);\n\n        let nodeTooltip: any = d3.select(\"#NodeTooltip\").node();\n        let nodeTooltipBbox: DOMRect = nodeTooltip.getBoundingClientRect();\n\n        let pos = { x: event.pageX, y: event.pageY };\n        const yPointerOffset: number = 50;\n        const xPointerOffset: number = 0;\n\n    // If overflow off bottom of page\n        if ((event.pageY + nodeTooltipBbox.height + yPointerOffset) > document.documentElement.scrollHeight) {\n      // render above mouse pointer\n            pos.y = event.pageY - nodeTooltipBbox.height - yPointerOffset;\n        }\n\n    // If overflow off right side of page\n        if ((event.pageX + nodeTooltipBbox.width + xPointerOffset) > document.documentElement.scrollWidth) {\n      // render to the left of the mouse pointer\n            pos.x = event.pageX - nodeTooltipBbox.width - xPointerOffset;\n        }\n\n        d3.select(\"#NodeTooltip\")\n            .style(\"left\", pos.x + \"px\")\n            .style(\"top\", pos.y + \"px\");\n    }\n\n    private nodeMouseleave(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 0)\n            .style(\"left\", \"-10000px\")\n            .style(\"top\", \"-10000px\");\n    }\n\n    public render() {\n        let that = this;\n        let descends: any = this.d3Tree.descendants();\n\n        d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").remove();\n        if (this.isPrimary) {\n            d3.select(\".g-hierarchy[data-primary=\\\"true\\\"]\").remove();\n        }\n\n        let hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n        hg.attr(\"font-family\", \"sans-serif\");\n\n        let gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n        // Edge\n        gtree.append(\"g\").classed(\"g-got-edge\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(this.d3Tree.links())\n            .join(\"path\")\n            // .attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n            .attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n                return \"M\" + d.source.x + \",\" + (d.source.y) +\n                    \"V\" + ((d.source.y + d.target.y) / 2) +\n                    \"H\" + d.target.x +\n                    \"V\" + (d.target.y);\n            });\n\n        // Header on square which denotes which hierarchy it's a part of\n        let gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n        gHeader.selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"rx\", 3)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) =>\n                d.data.inheritedHierarchyCode != null\n            )\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Write the name of the hierarchy on the header\n        gHeader.selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) =>\n                d.x - (SvgHierarchyType.gotHeaderW / 2)\n            )\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .style(\"text-align\", \"center\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"white\")\n            .style(\"height\", (SvgHierarchyType.gotHeaderH - 4) + \"px\")\n            .style(\"width\", SvgHierarchyType.gotHeaderW + \"px\")\n            .html(function(d: any) {\n                let name = d.data.inheritedHierarchyCode != null ? that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue : that.hierarchyType.label.localizedValue;\n                // eslint-disable-next-line no-unused-expressions\n                calculateTextWidth(name, SvgHierarchyType.gotHeaderFontSize) > (SvgHierarchyType.gotHeaderW - 5) ? name = name.substring(0, 34) + \"...\" : true;\n                return name;\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // GeoObjectType Body Square\n        gtree.append(\"g\").classed(\"g-got\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-body-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"rx\", 3)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .each(function(d: any) {\n                if (d.data.geoObjectType !== \"GhostNode\") {\n                    if (d.data.activeDropZones) {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n                    } else {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                    }\n                }\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Arrows on Edges\n        const arrowRectD = { height: 7, width: 10 };\n        let gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n        gArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-rect\", true)\n            .attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n            .attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n        gArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3)) +\n                \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n            );\n\n        // Ghost Drop Zone (Sibling) Backer\n        gtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-backer-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"white\");\n\n        // Ghost Drop Zone (Sibling) Body Rectangle\n        gtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-body-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#6BA542\")\n            .attr(\"stroke-width\", \"1\")\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType);\n\n        // GeoObjectType label\n        gtree.append(\"g\").classed(\"g-got-codelabel\", true)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", SvgHierarchyType.gotBodyFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .classed(\"svg-got-label-text\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n            .attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n            .attr(\"height\", SvgHierarchyType.gotRectH - 4)\n            // .filter(function(d: any) {\n            //     return calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n            // })\n            // .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => d.data.label)\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        let headerg;\n        if (this.isPrimary) {\n            gtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n                .selectAll(\"text\")\n                .data(descends)\n                .join(\"text\")\n                .filter(function(d: any) {\n                    return (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n                })\n                .classed(\"svg-got-relatedhiers-button\", true)\n                .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n                .attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - (SvgHierarchyType.gotOptionsButtonFontSize) - 3)\n                .attr(\"y\", (d: any) => d.y + (SvgHierarchyType.gotOptionsButtonFontSize * 0.8) - SvgHierarchyType.gotOptionsButtonFontSize / 2)\n                .style(\"font-family\", \"FontAwesome\")\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", \"#767676\")\n                .style(\"font-size\", SvgHierarchyType.gotOptionsButtonFontSize + \"px\")\n                .text(\"\\uf013\")\n                .on(\"click\", function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n            headerg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n        } else {\n            headerg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n        }\n\n\n        // let paddingTop = (headerg.node().getBBox().height + 20);\n        // gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n    }\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a> \n          <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> \n          <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> \n          <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span>\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"data-page\",\n    templateUrl: \"./data-page.component.html\",\n    styleUrls: [\"./data-page.css\"]\n})\nexport class DataPageComponent implements OnInit {\n\n    content: string = \"SPREADSHEET\";\n    pageTitle: string;\n    bsModalRef: BsModalRef;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n    }\n\n    ngOnInit(): void {\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n\n        if (content === \"SPREADSHEET\") {\n            this.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n        } else if (content === \"SHAPEFILE\") {\n            this.pageTitle = this.localizationService.decode(\"shapefile.title\");\n        } else if (content === \"EXPORT\") {\n            this.pageTitle = this.localizationService.decode(\"io.export.title\");\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">\n                      <localize key=\"import-spreadsheet-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">\n                      <localize key=\"import-shapefile-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ViewChildren, ElementRef, QueryList, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from \"@shared/service\";\nimport { HierarchyService, IOService } from \"@registry/service\";\nimport { ExternalSystem } from \"@shared/model/core\";\n\nimport { SpreadsheetModalComponent } from \"./modals/spreadsheet-modal.component\";\nimport { ShapefileModalComponent } from \"./modals/shapefile-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"dataimporter\",\n    templateUrl: \"./dataimporter.component.html\",\n    styleUrls: [\"./dataimporter.css\"]\n})\nexport class DataImporterComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray:QueryList<DateFieldComponent>;\n\n    currentDate : Date = new Date();\n\n    showImportConfig: boolean = false;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Start date\n     */\n    startDate: Date = null;\n\n    /*\n     * End date\n     */\n    endDate: Date | string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string; // Can be SHAPEFILE or EXCEL\n\n    isExternal: boolean = false;\n\n    /*\n     * List of available external systems (filtered based on user's org)\n     */\n    externalSystems: ExternalSystem[];\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    isLoading: boolean = true;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService,\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private authService: AuthService,\n        private sysService: ExternalSystemService,\n        private hierarchyService: HierarchyService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) { }\n\n    ngOnInit(): void {\n        this.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n            this.externalSystems = paginatedSystems.resultSet;\n\n            if (this.externalSystems.length === 0) {\n                this.isExternal = false;\n                this.showImportConfig = true; // Show the upload widget if there are no external systems registered\n            }\n\n            this.isLoading = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = acp + \"/excel/get-configuration\";\n        if (this.format === \"SHAPEFILE\") {\n            getUrl = acp + \"/shapefile/get-shapefile-configuration\";\n\n            // this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n        }\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.typeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.startDate != null) {\n                form.append(\"startDate\", this.startDate);\n            }\n            if (this.endDate != null) {\n                form.append(\"endDate\", this.endDate);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.isExternal = this.isExternal;\n            configuration.hierarchy = this.hierarchyCode;\n\n            let externalSystem: ExternalSystem = null;\n            for (let i = 0; i < this.externalSystems.length; ++i) {\n                let sys: ExternalSystem = this.externalSystems[i];\n\n                if (sys.oid === this.externalSystemId) {\n                    externalSystem = sys;\n                }\n            }\n\n            configuration.externalSystemId = this.externalSystemId;\n            configuration.externalSystem = externalSystem;\n\n            if (this.format === \"SHAPEFILE\") {\n                this.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            } else {\n                this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            }\n\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n\n        this.checkDates();\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    setImportSource(event, type): void {\n        if (type === \"EXTERNAL\") {\n            this.isExternal = true;\n        } else {\n            this.isExternal = false;\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n//    setInfinity(endDate: any): void {\n//\n//        if(endDate === PRESENT){\n//            this.endDate = null;\n//        }\n//        else{\n//            this.endDate = PRESENT;\n//        }\n//    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = this.checkDateFieldValidity();\n        }, 0);\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        let startDateField: DateFieldComponent;\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n\n            if (field.inputName === \"startDate\") {\n                // set startDateField so we can use it in the next check\n                startDateField = field;\n            }\n\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        if (this.startDate > this.endDate) {\n            startDateField.setInvalid(this.localizationService.decode(\"date.input.startdate.after.enddate.error.message\"));\n\n            this.changeDetectorRef.detectChanges();\n        }\n\n        return true;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\" autocomplete=\"off\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                <label class=\"col-md-2 text-right\" for=\"hierarchyCode\"> <localize key=\"io.modal.hierarchy\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\" [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                        <option></option>\n                        <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>{{view.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\" (change)=\"onSelectType()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>{{type.super ? type.super.label + \" : \" + type.label : type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" (change)=\"checkDates()\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"startDate\" label=\"\" [inputName]=\"'startDate'\" (change)=\"checkDates()\" [allowFutureDates]=\"false\"></date-field>\n                </div>\n                \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"endDate\"><localize key=\"io.endDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"endDate\" label=\"\" [inputName]=\"'endDate'\" (change)=\"checkDates()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" ></date-field>\n                </div>\n                                      \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                \n                <label class=\"col-md-2 text-right\" for=\"copyBlank\"><localize key=\"dataimporter.importblankcells\"></localize></label>\n                <div class=\"col-md-8\">\n                   <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n<!--                     <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\"> -->\n<!--                         <localize key=\"io.back\"></localize> -->\n<!--                     </button> -->\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterListByOrg } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"master-list-manager\",\n    templateUrl: \"./master-list-manager.component.html\",\n    styleUrls: [\"./master-list-manager.css\"]\n})\nexport class MasterListManagerComponent implements OnInit {\n\n    message: string = null;\n    orgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.service.getMasterListsByOrg().then(response => {\n            this.orgs = response.orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(org: MasterListByOrg): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(org);\n        this.bsModalRef.content.isNew = true;\n        this.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n            const obj = {\n                label: list.displayLabel.localizedValue,\n                oid: list.oid,\n                createDate: list.createDate,\n                lastUpdateDate: list.lastUpdateDate,\n                isMaster: list.isMaster,\n                write: list.write,\n                read: list.read,\n                visibility: list.visibility\n            };\n\n            org.lists.push(obj);\n        });\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-view/\", code])\n    }\n\n    onEdit(pair: { label: string, oid: string, visibility: string }): void {\n        this.service.getMasterList(pair.oid).then(list => {\n            this.bsModalRef = this.modalService.show(PublishModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.edit = true;\n            this.bsModalRef.content.readonly = !list.write;\n            this.bsModalRef.content.master = list;\n            this.bsModalRef.content.isNew = false;\n\n            this.bsModalRef.content.onMasterListChange.subscribe(ret => {\n                pair.label = ret.displayLabel.localizedValue;\n                pair.visibility = ret.visibility;\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + list.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterList(list.oid).then(response => {\n                org.lists = org.lists.filter((value, index, arr) => {\n                    return value.oid !== list.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                    <span>\n                                      (\n                                      <localize *ngIf=\"list.visibility === 'PUBLIC'\" key=\"masterlist.public\"></localize>\n                                      <localize *ngIf=\"list.visibility === 'PRIVATE'\" key=\"masterlist.private\"></localize>\n                                      )\n                                    </span>                                    \n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\n\n@Component({\n    selector: \"export-format-modal\",\n    templateUrl: \"./export-format-modal.component.html\",\n    styleUrls: []\n})\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next(this.format);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"export-modal.title\"></localize>\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, ViewEncapsulation, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\n\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { GeoObjectOverTime } from \"@registry/model/registry\";\n\nimport { ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { LocalizationService, AuthService, EventService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\ndeclare var acp: string;\n\n@Component({\n\n    selector: \"request-table\",\n    templateUrl: \"./request-table.component.html\",\n    styleUrls: [\"./request-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class RequestTableComponent {\n\n    today: Date = new Date();\n    todayString: string = this.dateService.getDateString(new Date());\n\n    objectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    requests: ChangeRequest[] = [];\n\n    actions: AbstractAction[];\n\n    columns: any[] = [];\n\n    @Input() toggleId: string;\n\n    uploadRequest: ChangeRequest;\n\n    filterCriteria: string = \"ALL\";\n\n    hasBaseDropZoneOver: boolean = false;\n\n    waitingOnScroll: boolean = false;\n\n    // Restrict page to the specified oid\n    oid: string = null;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    isValid: boolean = true;\n\n    isEditing: boolean = false;\n\n    constructor(private service: ChangeRequestService, private geomService: GeometryService, private modalService: BsModalService, private authService: AuthService, private localizationService: LocalizationService,\n        private eventService: EventService, private route: ActivatedRoute, private router: Router, private dateService: DateService) {\n        this.columns = [\n            { name: localizationService.decode(\"change.request.user\"), prop: \"createdBy\", sortable: false },\n            { name: localizationService.decode(\"change.request.createDate\"), prop: \"createDate\", sortable: false, width: 195 },\n            { name: localizationService.decode(\"change.request.status\"), prop: \"approvalStatus\", sortable: false }\n        ];\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        if (this.oid != null) {\n            this.toggleId = this.oid;\n        }\n\n        let getUrl = acp + \"/changerequest/upload-file-cr\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"crOid\", this.uploadRequest.oid);\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: any, status: number, headers: any) => {\n            const doc = JSON.parse(response);\n\n            const index = this.requests.findIndex(request => request.oid === doc.requestId);\n\n            if (index !== -1) {\n                this.requests[index].documents.push(doc);\n            }\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n\n        if (this.toggleId != null) {\n            this.onSelect({ selected: [{ oid: this.toggleId }] });\n            this.waitingOnScroll = true;\n        }\n\n        this.refresh();\n    }\n\n    getGOTLabel(action: any): string {\n        if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.displayLabel && action.geoObjectJson.attributes.displayLabel.values &&\n            action.geoObjectJson.attributes.displayLabel.values[0] && action.geoObjectJson.attributes.displayLabel.values[0].value && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues &&\n            action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0] && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value) {\n            return action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value;\n        } else if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.code) {\n            return action.geoObjectJson.attributes.code;\n        } else {\n            return this.localizationService.decode(\"geoObject.label\");\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    onUpload(request: ChangeRequest): void {\n        this.uploadRequest = request;\n\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onDownloadFile(request: ChangeRequest, fileOid: string): void {\n        window.location.href = acp + \"/changerequest/download-file-cr?crOid=\" + request.oid + \"&\" + \"vfOid=\" + fileOid;\n    }\n\n    onDeleteFile(request: ChangeRequest, fileOid: string): void {\n        this.service.deleteFile(request.oid, fileOid).then(() => {\n            const index = request.documents.findIndex(doc => doc.oid === fileOid);\n\n            if (index !== -1) {\n                request.documents.splice(index, 1);\n            }\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    public fileOverBase(e: any): void {\n        this.hasBaseDropZoneOver = e;\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, pageNumber, this.filterCriteria, this.oid).then(requests => {\n            this.page = requests;\n            this.requests = requests.resultSet;\n\n            // Copying the Geo-Object to add consistency for template processing\n            this.requests.forEach((req) => {\n                if (!req.current.geoObject) {\n                    for (let i = 0; i < req.actions.length; i++) {\n                        if (req.actions[0].actionType === \"CreateGeoObjectAction\") {\n                            // This is the state of the Geo-Object as the Registry Contributor configured it.\n                            req.current.geoObject = JSON.parse(JSON.stringify(req.actions[0].geoObjectJson));\n                        }\n                    }\n                }\n            });\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    onSelect(selected: any): void {\n        // this.request = selected.selected;\n\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, 1, \"ALL\", this.oid).then(requests => {\n            this.requests = requests.resultSet;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.implementDecisions(changeRequest).then(request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n\n                const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true\n                });\n\n                bsModalRef.content.submitText = this.localizationService.decode(\"change.requests.more.geoobject.updates.submit.btn\");\n                bsModalRef.content.cancelText = this.localizationService.decode(\"change.requests.more.geoobject.updates.cancel.btn\");\n                bsModalRef.content.message = this.localizationService.decode(\"change.requests.more.geoobject.updates.message\");\n\n                bsModalRef.content.onConfirm.subscribe(() => {\n                    const object = this.getFirstGeoObjectInActions(request);\n\n                    if (object != null) {\n                        this.router.navigate([\"/registry/location-manager\", object.attributes.uid, object.geoObjectType.code, this.todayString, true]);\n                    } else {\n                        let object = request.current.geoObject;\n                        let type = request.current.geoObjectType;\n\n                        if (object != null && type != null) {\n                            this.router.navigate([\"/registry/location-manager\", object.attributes.uid, type.code, this.todayString, true]);\n                        }\n                    }\n                });\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    onReject(cr: ChangeRequest): void {\n        this.service.rejectChangeRequest(cr).then(() => {\n            // TODO: Determine if there is a way to update an individual record\n            // TODO : cr.statusLabel needs to be updated...\n            /*\n            cr.approvalStatus = \"REJECTED\";\n\n            let len = this.actions.length;\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n\n                action.approvalStatus = \"REJECTED\";\n            }\n            */\n\n            this.refresh();\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    getFirstGeoObjectInActions(request: ChangeRequest): GeoObjectOverTime {\n        for (let i = 0; i < request.actions.length; i++) {\n            let action = request.actions[i];\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (action.hasOwnProperty(\"geoObjectJson\")) {\n                return action[\"geoObjectJson\"];\n            }\n        }\n\n        return null;\n    }\n\n    onDelete(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            bsModalRef.content.type = \"danger\";\n            bsModalRef.content.submitText = this.localizationService.decode(\"change.request.delete.request.confirm.btn\");\n            bsModalRef.content.message = this.localizationService.decode(\"change.request.delete.request.message\");\n\n            bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.delete(changeRequest.oid).then(deletedRequestId => {\n                    let pos = -1;\n                    for (let i = 0; i < this.requests.length; i++) {\n                        let req = this.requests[i];\n                        if (req.oid === deletedRequestId) {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > -1) {\n                        this.requests.splice(pos, 1);\n                    }\n\n                    this.refresh();\n                }).catch((response: HttpErrorResponse) => {\n                    this.error(response);\n                });\n            });\n        }\n    }\n\n    onUpdate(changeRequest: ChangeRequest): void {\n        console.log('Request', changeRequest);\n\n        if (changeRequest != null) {\n            this.service.update(changeRequest).then(request => {\n\n                // TODO update the individual change request\n\n                this.refresh();\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n\n    applyActionStatusProperties(action: any): void {\n        // var action = JSON.parse(JSON.stringify(this.action));\n        // action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        this.service.setActionStatus(action.oid, action.approvalStatus).then(response => {\n            action.decisionMaker = (action.approvalStatus !== \"PENDING\") ? this.authService.getUsername() : \"\";\n\n            // this.crtable.refresh()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    requestTrackBy(index: number, request: ChangeRequest) {\n        return request.oid;\n    }\n\n    toggle(event: any, oid: string): void {\n        if (!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")) {\n            if (this.toggleId === oid) {\n                this.toggleId = null;\n            } else {\n                this.toggleId = oid;\n                //                this.onSelect({ selected: [{ oid: oid }] });\n                this.requests.forEach(req => {\n                    if (req.oid === oid) {\n                        this.actions = req.actions;\n                    }\n                });\n            }\n        }\n    }\n\n    filter(criteria: string): void {\n        this.filterCriteria = criteria;\n\n        this.refresh(1);\n    }\n\n    setActionStatus(action: CreateGeoObjectAction | UpdateAttributeAction, status: string): void {\n        const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        bsModalRef.content.onConfirm.subscribe(data => {\n            action.approvalStatus = status;\n\n            this.applyActionStatusProperties(action);\n        });\n    }\n\n    getActiveDetailComponent(action: CreateGeoObjectAction | UpdateAttributeAction): any {\n        // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n        if (action.actionType.endsWith(\"CreateGeoObjectAction\") || action.actionType.endsWith(\"UpdateGeoObjectAction\")) {\n            // return this.cuDetail;\n        }\n        //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n        //   {\n        //     return this.arDetail;\n        //   }\n\n        return action;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    getUsername(): string {\n        return this.authService.getUsername();\n    }\n\n    isRequestTooOld(request: ChangeRequest): boolean {\n        if (request.actions && request.actions.length > 0) {\n            let firstAction = request.actions[0];\n\n            if (firstAction.actionType === ActionTypes.UPDATEGEOOBJECTACTION) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    onEditAttributes(): void {\n        this.isEditing = !this.isEditing;\n    }\n\n    canEdit(request: ChangeRequest) : boolean {\n        return (request.permissions.includes(\"WRITE_DETAILS\") && this.isEditing);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"form-group button-row\">\n\n      <a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" style=\"border-bottom: 1px solid;\" >\n        <localize key=\"change.request.all.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.pending.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.accepted.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PARTIAL')\" [ngClass]=\"filterCriteria === 'PARTIAL' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.partial.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.rejected.filter.link\"></localize>\n      </a>\n\n    </div>\n\n    <hr style=\"border-top:solid 3px #6BA542\" />\n\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <table class=\"table\">\n      <thead>\n        <tr style=\"height: 50px;color: grey;\">\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.id.label\"></localize> </th>\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n          <th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n          <!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-template ngFor let-req [ngForOf]=\"requests | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" [ngForTrackBy]=\"requestTrackBy\">\n        \n          <tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n            <td class=\"col-md-3\">\n              <h5><strong>{{req.createdBy}}</strong></h5>\n            </td>\n            <td class=\"col-md-4\">\n              <h5><strong>{{req.oid}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n               <span class=\"date-string-display\">\n                  {{formatDate(req.createDate)}}\n               </span>\n            </td>\n            <td class=\"col-md-2\">\n              <h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-partial':req.approvalStatus === 'PARTIAL', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n                 <strong>{{req.statusLabel}}</strong>\n              </h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:right;padding-right:25px;\">\n              <i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n            </td>\n          </tr>\n          \n          <!-- Action panel only shows when activated with click -->\n          <tr [@fadeInOut] *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\" [ngClass]=\"{'status-pending-container':req.approvalStatus === 'PENDING', 'status-accepted-container':req.approvalStatus === 'ACCEPTED', 'status-partial-container':req.approvalStatus === 'PARTIAL', 'status-rejected-container':req.approvalStatus === 'REJECTED'}\">\n            \n            <td colspan=\"5\">\n              <div class=\"geoobject-panel-header\">\n              \n                    <div>\n                        <h3 style=\"margin-top: 10px;\">{{req.geoObject.label}}</h3>\n                        <h4 style=\"font-style: italic;\">{{req.geoObject.code}}</h4>\n                        \n                        <h4 *ngIf=\"req.type === 'UpdateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.update.geoobject.label\"></localize></h4>\n                        <h4 *ngIf=\"req.type === 'CreateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.create.geoobject.label\"></localize></h4>\n                    </div>\n              </div>\n                  \n              <div class=\"row\" style=\"margin:0;background: white;\">\n                <!-- <div class=\"col-md-1\"></div> -->\n                <div class=\"col-md-12\">\n                \n                  <div *ngIf=\"!isRequestTooOld(req) && req.approvalStatus === 'INVALID'\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.invalid\"></localize>\n                  </div>\n                  <div *ngIf=\"isRequestTooOld(req)\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.tooOld\"></localize>\n                  </div>\n                \n                  <div *ngIf=\"req.permissions.includes('READ_CONTRIBUTOR_NOTES')\" class=\"form-group\" style=\"margin-top:20px;\">\n                     <label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n                     <textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;\" [(ngModel)]=\"req.contributorNotes\" [disabled]=\"!req.permissions.includes('WRITE_DETAILS')\"></textarea>\n                  </div>  \n                  \n                  <div>\n                    <p><localize key=\"change.request.contributor.prefix.label\"></localize>&nbsp;<strong>{{req.createdBy}}</strong></p>\n                    <p><localize key=\"change.request.contributor.email.prefix.label\"></localize>&nbsp;<strong>{{req.email}}</strong></p>\n                    <p><localize key=\"change.request.contributor.phone.prefix.label\"></localize>&nbsp;<strong>{{req.phoneNumber}}</strong></p>\n                  </div>\n  \n                  <div *ngIf=\"req.approvalStatus !== 'INVALID' && !isRequestTooOld(req)\" class=\"cr-details\">\n\t                  <div class=\"action-card\" style=\"margin-bottom:10px; background-color:white;\"> \n\t                    <div class=\"row\" style=\"background: white;\">\n\t                      <div class=\"col-md-12\">\n\t                      \n\t                         <geoobject-shared-attribute-editor *ngIf=\"req\"\n\t                              #attributeEditor\n\t                              [readOnly]=\"!canEdit(req)\"  \n\t                              [geoObjectType]=\"req.current.geoObjectType\"\n                                [postGeoObject]=\"req.type == 'UpdateGeoObject' ? req.current.geoObject : req.actions[0].geoObjectJson\" \n\t                              [actions]=\"req.actions\"\n\t                              [changeRequest]=\"req\"\n\t                              [forDate]=\"today\"\n\t                              [hierarchies]=\"req.type == 'UpdateGeoObject' ? req.current.hierarchies : req.actions[0].parentJson\"\n\t                              [isGeometryInlined]=\"true\"\n                                [isNew]=\"req.type === 'CreateGeoObject'\"\n                                (valid)=\"setValid($event)\">\n\t                         </geoobject-shared-attribute-editor>\n\t                         \n\t                       </div>\n\t                    </div>\n\t  \n\t                    <div class=\"row\" style=\"border-top: 1px grey solid;margin:0;padding: 10px 0;\">\n\t                      <div class=\"col-md-6\" >\n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                          <label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t                          <textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;margin:0\" [(ngModel)]=\"req.maintainerNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\"></textarea>\n\t                        </div>  \n\t                        \n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                              <label for=\"additionalNotes-{{req.oid}}\"> <localize key=\"change.request.action.detail.additionalNotes\"></localize> </label>\n\t                              <input type=\"text\" id=\"additionalNotes-{{req.oid}}\" class=\"form-control\" style=\"width:100%;\" [(ngModel)]=\"req.additionalNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\">\n\t                        </div>  \n\t                      </div>\n\t                      \n\t                      <div class=\"col-md-6\" >\n\t                        <div>\n\t                          <label><localize key=\"change.request.reference.documents.label\"></localize></label>\n\t                          <div *ngIf=\"req.documents.length > 0\" style=\"border:1px solid #ccc;border-radius: 4px;\">\n\t                            <ul style=\"padding:10px;margin:0;\">\n\t                                <li *ngFor=\"let doc of req.documents\" class=\"list-group-item\" style=\"padding:0;font-size:inherit;\">\n\t                                  <a (click)=\"onDownloadFile(req, doc.oid)\" >{{doc.fileName}}</a>\n\t                                  <i (click)=\"onDeleteFile(req, doc.oid)\" class=\"fa fa-times ico-remove\" style=\"margin-left:10px;\" aria-hidden=\"true\"></i>\n\t                                </li>\n\t                            </ul>\n\t                          </div>\n\t                          <p *ngIf=\"req.documents.length === 0\" style=\"color:grey;font-style:italic;\">\n\t                            <localize key=\"change.request.no.documents.label\"></localize>\n\t                          </p>\n\t                        \n\t                          <div *ngIf=\"req.permissions.includes('WRITE_DOCUMENTS') && isEditing\" style=\"padding:10px 0;\">\n\t                              <!-- Limit file types with: accept=\".xls, .xlsx, .pdf, .doc\" -->\n\t                              <input class=\"ghost-input\" style=\"display:inline-block;padding:0;height:auto;border-radius:0;margin-top:10px;\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" required />\n\t                              \n\t                              <button class=\"btn btn-primary pull-right\" style=\"margin:0;\" (click)=\"onUpload(req)\" [title]=\"'change.request.upload.document.btn.hover' | localize\">\n\t                                <localize key=\"change.request.reference.document.upload\"></localize>\n\t                              </button>\n\t                          </div>\n\t                        </div>\n\t  \n\t                      </div>\n\t                    </div>\n\t                  </div> \n\t  \n\t  \n\t                  <div *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS') || req.permissions.includes('DELETE')\" class=\"button-holder\" style=\"margin-bottom:20px;min-height:40px;\">\n\t                    <span *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS')\">\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\" [title]=\"'change.request.implement.decisions.btn.hover' | localize\">\n\t                        <localize [key]=\"req.type === 'UpdateGeoObject' ? 'change.request.accept.changes.btn' : 'change.request.accept.newGeoObject.btn'\"></localize>\n\t                      </button>\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" *ngIf=\"req.type === 'CreateGeoObject'\" type=\"submit\" (click)=\"onReject(req)\" class=\"btn btn-danger\" style=\"margin:0 10px;\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\">\n                            <localize key=\"change.request.reject.all.btn\"></localize>\n                          </button>\n\t                    </span>\n\n                        <span *ngIf=\"isValid && req.permissions.includes('WRITE_DETAILS') && req.createdBy === getUsername()\">\n                          <button type=\"submit\" *ngIf=\"!isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                          </button>\n                          <button type=\"submit\" *ngIf=\"isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                          </button>\n                          <button type=\"submit\" role=\"button\" class=\"btn btn-primary\" *ngIf=\"isEditing\" (click)=\"onUpdate(req)\" [title]=\"'modal.button.update' | localize\" >\n                            <localize key=\"modal.button.update\"></localize>\n                          </button>\n                          \n                          <button type=\"submit\" role=\"button\" class=\"btn btn-danger pull-right\" [disabled]=\"!isEditing\" *ngIf=\"req.permissions.includes('DELETE') && req.createdBy === getUsername()\" (click)=\"onDelete(req)\" [title]=\"'change.request.delete.request.hover' | localize\" >\n                            <localize key=\"change.request.delete.request.btn\"></localize>\n                          </button>\n                        </span>\n\t                  </div>\n                  </div>\n                </div>\n                <!-- <div class=\"col-md-1\"></div> -->\n              </div>\n  \n            </td>\n          </tr> <!-- END Action panel -->\n          \n        </ng-template>\n      </tbody>\n    </table>\n    <div class=\"solid-table-footer\">\n\t    <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n        <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n\t    </div>\n    </div>\n  </div>   \n</div>\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, AttributeTermType, HierarchyOverTime, HierarchyOverTimeEntry, GeoObject } from \"@registry/model/registry\";\nimport { CreateGeoObjectAction, UpdateAttributeAction, AbstractAction, ValueOverTimeDiff, ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { ConflictType, ActionTypes, GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport Utils from \"../../utility/Utils\";\n\nimport { VersionDiffView, Layer, LayerColor } from \"./manage-versions-model\";\nimport { HierarchyEditPropagator } from \"./HierarchyEditPropagator\";\nimport { ControlContainer, NgForm } from \"@angular/forms\";\n\n@Component({\n    selector: \"manage-versions\",\n    templateUrl: \"./manage-versions.component.html\",\n    styleUrls: [\"./manage-versions.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class ManageVersionsComponent implements OnInit {\n\n    // height (as number) in pixels\n    mapRowHeight: number;\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    message: string = null;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() selectedTab: number = 0;\n\n    @Input() isGeometryInlined: boolean = false;\n\n    // Observable subject for MasterList changes.  Called when an update is successful // TODO : This probably doesn't work anymore\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    attributeType: AttributeType;\n    actions: AbstractAction[] = [];\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set attributeData(value: {\"attributeType\":AttributeType, \"changeRequest\":ChangeRequest, \"actions\":AbstractAction[], geoObject:GeoObjectOverTime}) {\n        this.attributeType = value.attributeType;\n\n        this.changeRequest = value.changeRequest;\n\n        if (this.changeRequest != null) {\n            this.actions = value.changeRequest.actions;\n        } else {\n            this.actions = value.actions;\n        }\n\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value.geoObject));\n        this.postGeoObject = value.geoObject;\n    }\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    postGeoObject: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    @Input() hierarchy: HierarchyOverTime = null;\n\n    changeRequest: ChangeRequest;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    conflict: string;\n    hasConflict: boolean = false;\n    hasGap: boolean = false;\n\n    originalAttributeState: AttributeType;\n\n    viewModels: VersionDiffView[] = [];\n\n    // The 'current' action which is to be used whenever we're applying new edits.\n    editAction: AbstractAction;\n\n    isRootOfHierarchy: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public geomService: GeometryService, public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.calculateViewModels();\n        this.isRootOfHierarchy = this.attributeType.type === \"_PARENT_\" && (this.hierarchy == null || this.hierarchy.types == null || this.hierarchy.types.length === 0);\n    }\n\n    ngAfterViewInit() {\n    }\n\n    geometryChange(vAttribute, event): void {\n\n        // vAttribute.value = event; // TODO\n\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasLocalizationChanged(viewModel: VersionDiffView, locale: string): boolean {\n        return viewModel.oldValue != null && this.getValueAtLocale(viewModel.oldValue, locale) !== this.getValueAtLocale(viewModel.value, locale);\n    }\n\n    onDateChange(): any {\n        setTimeout(() => {\n            this.hasConflict = false;\n            this.hasGap = false;\n\n            this.isValid = this.checkDateFieldValidity();\n\n            this.hasConflict = this.dateService.checkRanges(this.viewModels);\n\n            this.isValidChange.emit(this.isValid && !this.hasConflict);\n        }, 0);\n    }\n\n    public stringify(obj: any): string {\n        return JSON.stringify(obj);\n    }\n\n    remove(view: VersionDiffView): void {\n        view.editPropagator.remove();\n\n        if (view.summaryKey === SummaryKey.NEW || view.editPropagator.action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n            const index = this.viewModels.findIndex(v => v.oid === view.oid);\n\n            if (index > -1) {\n                this.viewModels.splice(index, 1);\n            }\n        }\n\n        this.onDateChange();\n    }\n\n    onAddNewVersion(): void {\n        let view: VersionDiffView = new VersionDiffView(this, this.editAction);\n        view.oid = this.generateUUID();\n\n        view.editPropagator.onAddNewVersion();\n\n        this.viewModels.push(view);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    generateUUID() {\n        return uuid();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.postGeoObject.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if (attr.type === \"term\" && attr.code === termAttributeCode) {\n                attr = <AttributeTermType>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if (attrOpts.length > 0) {\n                    if (attr.code === \"status\") {\n                        return Utils.removeStatuses(attrOpts);\n                    } else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isChangeOverTime(attr: AttributeType): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach(attribute => {\n            if (this.attributeType.code === attr.code) {\n                isChangeOverTime = attr.isChangeOverTime;\n            }\n        });\n\n        return isChangeOverTime;\n    }\n\n    // TODO: Deprecate becasue it seems to not be used anywhere\n    sort(votArr: ValueOverTimeDiff[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.oldStartDate == null || a.oldStartDate === \"\") {\n                return 1;\n            } else if (b.oldStartDate == null || b.oldStartDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.oldStartDate);\n            let next: any = new Date(b.oldStartDate);\n            return first - next;\n        });\n    }\n\n    onActionChange(action: AbstractAction) {\n        let hasChanges: boolean = true;\n\n        if (action instanceof UpdateAttributeAction) {\n            let updateAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n            if (updateAction.attributeDiff.valuesOverTime.length === 0) {\n                hasChanges = false;\n            }\n        }\n\n        let index = -1;\n\n        let len = this.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let loopAction = this.actions[i];\n\n            if (action === loopAction) {\n                index = i;\n            }\n        }\n\n        if (index !== -1 && !hasChanges) {\n            this.actions.splice(index, 1);\n        } else if (index === -1 && hasChanges) {\n            this.actions.push(action);\n        }\n    }\n\n    findViewByOid(oid: string): VersionDiffView {\n        let len = this.viewModels.length;\n        for (let i = 0; i < len; ++i) {\n            let view = this.viewModels[i];\n\n            if (view.oid === oid) {\n                return view;\n            }\n        }\n\n        return null;\n    }\n\n    findPostGeoObjectVOT(oid: string) {\n        this.postGeoObject.attributes[this.attributeType.code].values.forEach((vot: ValueOverTime) => {\n            if (vot.oid === oid) {\n                return vot;\n            }\n        });\n\n        return null;\n    }\n\n    /**\n     * Our goal here is to loop over the action diffs and then calculate what to display to the end user.\n     */\n    calculateViewModels(): void {\n        if (this.isNew) {\n            if (this.actions.length > 0 && this.actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                this.editAction = this.actions[0];\n                const action = this.editAction as CreateGeoObjectAction;\n\n                if (action.parentJson == null) {\n                    action.parentJson = this.hierarchy;\n                }\n\n                if (action.geoObjectJson == null) {\n                    action.geoObjectJson = this.postGeoObject;\n                }\n            } else {\n                let createAction: CreateGeoObjectAction = new CreateGeoObjectAction();\n                createAction.geoObjectJson = this.postGeoObject;\n                createAction.parentJson = this.hierarchy;\n                this.actions[0] = createAction;\n                this.editAction = createAction;\n            }\n        } else {\n            this.actions.forEach((action: AbstractAction) => {\n                if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (this.attributeType.code === updateAttrAction.attributeName && (this.attributeType.type !== \"_PARENT_\" || updateAttrAction.attributeDiff.hierarchyCode === this.hierarchy.code)) {\n                        this.editAction = action;\n                    }\n                }\n            });\n\n            if (this.editAction == null) {\n                this.editAction = new UpdateAttributeAction(this.attributeType.code);\n            }\n        }\n\n        this.viewModels = [];\n\n        // First, we have to create a view for every ValueOverTime object. This is done to simply display what's currently\n        // on the GeoObject\n        if (this.changeRequest == null || this.changeRequest.type === \"CreateGeoObject\" ||\n          (this.changeRequest.approvalStatus !== \"ACCEPTED\" && this.changeRequest.approvalStatus !== \"PARTIAL\" && this.changeRequest.approvalStatus !== \"REJECTED\")\n        ) {\n            if (this.attributeType.type === \"_PARENT_\") {\n                this.hierarchy.entries.forEach((entry: HierarchyOverTimeEntry) => {\n                    let view = new VersionDiffView(this, this.editAction);\n\n                    view.oid = entry.oid;\n                    view.summaryKey = SummaryKey.UNMODIFIED;\n                    view.startDate = entry.startDate;\n                    view.endDate = entry.endDate;\n                    view.value = JSON.parse(JSON.stringify(entry));\n                    view.value.loading = {};\n\n                    view.editPropagator = new HierarchyEditPropagator(this, this.editAction, view, entry);\n\n                    // In the corner case where this object isn't assigned to the lowest level, we may have\n                    // empty values in our parents array for some of the types. Our front-end assumes there\n                    // will always be an entry for all the types.\n                    let len = this.hierarchy.types.length;\n                    for (let i = 0; i < len; ++i) {\n                        let type = this.hierarchy.types[i];\n\n                        if (!Object.prototype.hasOwnProperty.call(view.value.parents, type.code)) {\n                            view.value.parents[type.code] = { text: \"\", geoObject: null };\n                        }\n                    }\n\n                    this.viewModels.push(view);\n                });\n            } else {\n                this.postGeoObject.attributes[this.attributeType.code].values.forEach((vot: ValueOverTime) => {\n                    let view = new VersionDiffView(this, this.editAction);\n\n                    view.oid = vot.oid;\n                    view.summaryKey = SummaryKey.UNMODIFIED;\n                    view.startDate = vot.startDate;\n                    view.endDate = vot.endDate;\n                    view.value = vot.value == null ? null : JSON.parse(JSON.stringify(vot.value));\n\n                    view.editPropagator.valueOverTime = vot;\n\n                    this.viewModels.push(view);\n                });\n            }\n        }\n\n        // Next, we must apply all changes which may exist in the actions.\n        let len = this.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let action: AbstractAction = this.actions[i];\n\n            if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                if (this.attributeType.code === updateAttrAction.attributeName) {\n                    if (this.attributeType.type === \"_PARENT_\" && updateAttrAction.attributeDiff.hierarchyCode !== this.hierarchy.code) {\n                        continue;\n                    }\n\n                    updateAttrAction.attributeDiff.valuesOverTime.forEach((votDiff: ValueOverTimeDiff) => {\n                        let view = this.findViewByOid(votDiff.oid);\n\n                        if (votDiff.action === \"DELETE\") {\n                            if (view == null) {\n                                view = new VersionDiffView(this, action);\n                                this.viewModels.push(view);\n\n                                if (this.changeRequest == null || (this.changeRequest.approvalStatus !== \"ACCEPTED\" && this.changeRequest.approvalStatus !== \"PARTIAL\" && this.changeRequest.approvalStatus !== \"REJECTED\")) {\n                                    view.conflictMessage = [{ severity: \"ERROR\", message: this.lService.decode(\"changeovertime.manageVersions.missingReference\"), type: ConflictType.MISSING_REFERENCE }];\n                                }\n                            }\n\n                            this.populateViewFromDiff(view, votDiff);\n\n                            delete view.oldValue;\n                            delete view.oldStartDate;\n                            delete view.oldEndDate;\n\n                            // view.startDate = votDiff.oldStartDate;\n                            // view.endDate = votDiff.oldEndDate;\n                            // view.oid = votDiff.oid;\n                            // view.value = votDiff.oldValue;\n\n                            view.summaryKey = SummaryKey.DELETE;\n\n                            view.editPropagator.diff = votDiff;\n                        } else if (votDiff.action === \"UPDATE\") {\n                            if (view == null) {\n                                view = new VersionDiffView(this, action);\n                                this.viewModels.push(view);\n\n                                if (this.changeRequest == null || (this.changeRequest.approvalStatus !== \"ACCEPTED\" && this.changeRequest.approvalStatus !== \"PARTIAL\" && this.changeRequest.approvalStatus !== \"REJECTED\")) {\n                                    view.conflictMessage = [{ severity: \"ERROR\", message: this.lService.decode(\"changeovertime.manageVersions.missingReference\"), type: ConflictType.MISSING_REFERENCE }];\n                                }\n                            }\n\n                            this.populateViewFromDiff(view, votDiff);\n\n                            view.calculateSummaryKey(votDiff);\n                        } else if (votDiff.action === \"CREATE\") {\n                            if (view != null) {\n                                console.log(\"This action doesn't make sense. We're trying to create something that already exists?\", votDiff)\n                            } else {\n                                view = new VersionDiffView(this, action);\n\n                                this.populateViewFromDiff(view, votDiff);\n\n                                view.summaryKey = SummaryKey.NEW;\n\n                                this.viewModels.push(view);\n                            }\n                        }\n                    });\n                }\n            } else if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n              // Nothing to do here. Create actions don't have diffs.\n            } else {\n                console.log(\"Unexpected action : \" + action.actionType, action);\n            }\n        }\n    }\n\n    populateViewFromDiff(view: VersionDiffView, votDiff: ValueOverTimeDiff) {\n        if (this.attributeType.type === \"_PARENT_\") {\n            view.value = (view.editPropagator as HierarchyEditPropagator).createEmptyHierarchyEntry();\n            view.value.oid = votDiff.oid;\n            view.value.startDate = votDiff.newStartDate || votDiff.oldStartDate;\n            view.value.endDate = votDiff.newEndDate || votDiff.oldEndDate;\n\n            view.value.parents = votDiff.parents;\n\n            // In the corner case where this object isn't assigned to the lowest level, we may have\n            // empty values in our parents array for some of the types. Our front-end assumes there\n            // will always be an entry for all the types.\n            let len = this.hierarchy.types.length;\n            for (let i = 0; i < len; ++i) {\n                let type = this.hierarchy.types[i];\n\n                if (!Object.prototype.hasOwnProperty.call(view.value.parents, type.code)) {\n                    view.value.parents[type.code] = { text: \"\", geoObject: null };\n                }\n            }\n\n            view.value.loading = {};\n\n            if (votDiff.oldValue != null) {\n                let oldCodeArray: string[] = votDiff.oldValue.split(\"_~VST~_\");\n                // let oldTypeCode: string = oldCodeArray[0];\n                let oldGoCode: string = oldCodeArray[1];\n\n                view.oldValue = oldGoCode;\n\n                let len = this.hierarchy.types.length;\n                for (let i = len - 1; i >= 0; --i) {\n                    let type = this.hierarchy.types[i];\n\n                    if (Object.prototype.hasOwnProperty.call(votDiff.parents, type.code)) {\n                        let lowestLevel = votDiff.parents[type.code];\n\n                        if (lowestLevel.text == null || lowestLevel.text.length === 0) {\n                            lowestLevel.text = oldGoCode;\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (votDiff.newValue != null) {\n                view.value = JSON.parse(JSON.stringify(votDiff.newValue));\n                view.oldValue = votDiff.oldValue == null ? null : JSON.parse(JSON.stringify(votDiff.oldValue));\n            } else {\n                view.value = votDiff.oldValue == null ? null : JSON.parse(JSON.stringify(votDiff.oldValue));\n            }\n        }\n\n        view.oid = votDiff.oid;\n        view.startDate = votDiff.newStartDate || votDiff.oldStartDate;\n        view.endDate = votDiff.newEndDate || votDiff.oldEndDate;\n        if (votDiff.newStartDate !== votDiff.oldStartDate) {\n            view.oldStartDate = votDiff.newStartDate == null ? null : votDiff.oldStartDate;\n        }\n        if (votDiff.newEndDate !== votDiff.oldEndDate) {\n            view.oldEndDate = votDiff.newEndDate == null ? null : votDiff.oldEndDate;\n        }\n        view.editPropagator.diff = votDiff;\n    }\n\n    isStatusChanged(post, pre) {\n        if ((pre != null && post == null) || (post != null && pre == null)) {\n            return true;\n        } else if (pre == null && post == null) {\n            return false;\n        }\n\n        if ((pre.length === 0 && post.length > 0) || (post.length === 0 && pre.length > 0)) {\n            return true;\n        }\n\n        let preCompare = pre;\n        if (Array.isArray(pre)) {\n            preCompare = pre[0];\n        }\n\n        let postCompare = post;\n        if (Array.isArray(post)) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    hasAttributeChanges(): boolean {\n        if (this.attributeType.isChangeOverTime) {\n            for (let i = 0; i < this.actions.length; i++) {\n                let action = this.actions[i];\n\n                if (action.actionType === \"UpdateAttributeAction\") {\n                    let uAction = action as UpdateAttributeAction;\n\n                    if (uAction.attributeName === this.attributeType.code) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    onApprove(): void {\n        this.requestService.setActionStatus(this.editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            this.editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        this.requestService.setActionStatus(this.editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            this.editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        this.requestService.setActionStatus(this.editAction.oid, GovernanceStatus.PENDING).then(results => {\n            this.editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    /**\n     * GEOMETRY EDITING\n     */\n\n    toggleGeometryEditing(view: VersionDiffView) {\n        this.geomService.setEditing(!view.newLayer.isEditing, view.newLayer);\n\n        if (this.geoObjectType.geometryType === \"POINT\" || this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            view.coordinate = {};\n        }\n    }\n\n    toggleGeometryView(view: VersionDiffView) {\n        // Using setTimeout() to pull the calc out of the animation stack so the dom can finish mutating before getting final height.\n        setTimeout(() => {\n            this.mapRowHeight = this.elementRef.nativeElement.children[0].getElementsByClassName(\"attribute-element-wrapper\")[0].offsetHeight;\n        }, 0);\n\n        let layer: Layer = this.getOrCreateLayer(view, \"NEW\");\n\n        if (layer.isEditing) {\n            this.geomService.stopEditing();\n        }\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    toggleOldGeometryView(view: VersionDiffView) {\n        let layer: Layer = this.getOrCreateLayer(view, \"OLD\");\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    getOrCreateLayer(view: VersionDiffView, context: string): Layer {\n        if (context === \"NEW\") {\n            if (view.newLayer != null) {\n                return view.newLayer;\n            }\n\n            view.newLayer = new Layer();\n            view.newLayer.oid = \"NEW_\" + view.oid;\n            view.newLayer.isEditing = false;\n            view.newLayer.isRendering = false;\n            view.newLayer.zindex = 1;\n            view.newLayer.color = LayerColor.NEW;\n            view.newLayer.geojson = view.value;\n            view.newLayer.editPropagator = view.editPropagator;\n\n            return view.newLayer;\n        } else {\n            if (view.oldLayer != null) {\n                return view.oldLayer;\n            }\n\n            view.oldLayer = new Layer();\n            view.oldLayer.oid = \"OLD_\" + view.oid;\n            view.oldLayer.isEditing = false;\n            view.oldLayer.isRendering = false;\n            view.oldLayer.zindex = 0;\n            view.oldLayer.color = LayerColor.OLD;\n            view.oldLayer.geojson = view.oldValue;\n            view.oldLayer.editPropagator = null;\n\n            return view.oldLayer;\n        }\n    }\n\n    manualCoordinateChange(view: VersionDiffView): void {\n        if (view.newCoordinateX || view.newCoordinateY) {\n            let newX = view.newCoordinateX;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newX = view.value.coordinates[0];\n            }\n            let newY = view.newCoordinateY;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newY = view.value.coordinates[1];\n            }\n            view.value.coordinates = [[newX || 0, newY || 0]];\n            delete view.newCoordinateX;\n            delete view.newCoordinateY;\n            return;\n        }\n\n        const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n        const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n        view.coordinate.latValid = isLatitude(view.value.coordinates[0][1]);\n        view.coordinate.longValid = isLongitude(view.value.coordinates[0][0]);\n\n        if (!view.coordinate.latValid || !view.coordinate.longValid) {\n            // outside EPSG bounds\n            this.isValid = false;\n            this.isValidChange.emit(this.isValid);\n            return;\n        }\n\n        this.geomService.setPointCoordinates(view.value.coordinates[0][1], view.value.coordinates[0][0]);\n    }\n\n}\n","<div>\n  <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n  </ng-template>\n\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form name=\"manage-versions-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div [ngStyle]=\"{'width' : (isGeometryInlined && geomService.getRenderedLayers().length > 0) ? '45%' : '100%'}\" style=\"display:inline-block;\" class=\"col\">\n          <div *ngIf=\"postGeoObject\" class=\"attribute-version-wrapper\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                <div *ngIf=\"attributeType && actions\">\n                  <table class=\"table table-striped\">\n                    <tbody class=\"attribute-element-wrapper\" >\n                      <p class=\"message\" *ngIf=\"!isRootOfHierarchy && viewModels.length === 0\">\n                        <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize> \n                      </p>\n                      <div *ngIf=\"isRootOfHierarchy\">\n                        <localize key=\"changeovertime.manageVersions.rootOfHierarchy.message\"></localize>\n                      </div>\n                      \n                      <ng-container *ngIf=\"!isRootOfHierarchy\">\n\t                      <tr @fadeInOut *ngFor=\"let viewModel of viewModels; let i = index;\" class=\"version-row\"\n\t                          [ngClass]=\"{'error-border': viewModel.conflictMessage && viewModel.conflictMessage.length > 0 && viewModel.conflictMessage[0].severity === 'ERROR',\n\t                          'warning-border': viewModel.conflictMessage && viewModel.conflictMessage.length > 0 && viewModel.conflictMessage[0].severity === 'WARNING',\n\t                          'geometry-edit-active' : (viewModel.newLayer && viewModel.newLayer.isEditing) }\">\n                            <td class=\"version-column-wrapper\" [ngClass]=\"{'warning' : viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'}\" >\n\t                          <div *ngIf=\"viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'\" class=\"version-column-indicator\">\n                                {{viewModel.summaryKeyLocalized}}\n                              </div>\n\t                          \n\t                          <table>\n\t                          \n\t                            <!-- \n\t                              Local Type \n\t                            -->\n\t                            <ng-container *ngIf=\"attributeType.type === 'local'\">\n\t\t                           <tr *ngFor=\"let loc of viewModel.value.localeValues; let idx = index;\" class=\"attribute-value-row\">\n\t\t                             <td colspan=\"2\">\n\t\t                               <h5><convert-key-label [key]=\"loc.locale\"></convert-key-label></h5>\n\t\t                               \n\t\t                               <input [ngClass]=\"{'has-changed': (hasLocalizationChanged(viewModel, loc.locale) && !isNew)}\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"viewModel.editPropagator.setLocalizedValue(loc)\" [required]=\"loc.locale === 'defaultLocale'\">\n\t\t                               \n\t\t                               <div class=\"form-input-validation-error-message-wrapper\">\n\t\t                                 <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">\n\t\t                                   <localize key=\"manage.versions.value.required.message\"></localize>\n\t\t                                 </p>\n\t\t                               </div>\n\t\t                               \n\t\t                               <div *ngIf=\"hasLocalizationChanged(viewModel, loc.locale) && !isNew\">\n\t\t                                 <p class=\"warning-text display-current-value\" style=\"padding: 5px 0;margin-bottom:0;\">\n\t\t                                   <localize key=\"change.request.changed.value.prefix\"></localize>\n\t\t                                   {{ getValueAtLocale(viewModel.oldValue, loc.locale) }}\n\t\t                                 </p>\n\t\t                               </div>\n\t\t                             </td>\n\t\t                           </tr>\n\t                            </ng-container>\n\t                            <tr *ngIf=\"attributeType.type === 'geometry' || attributeType.type === '_PARENT_' || attributeType.type === 'term' || attributeType.type === 'character' || attributeType.type === 'date' || attributeType.type === 'integer' || attributeType.type === 'float' || attributeType.type === 'boolean'\" class=\"attribute-value-row\">\n\t                             <td colspan=\"2\">\n                               \n\t                               <div *ngIf=\"attributeType.type === 'term'\">\n\t                                 <select [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" id=\"mod-{{attributeType.code}}\" [name]=\"'mod-term-' + i + '-' + attributeType.code\" class=\"select-area\" [(ngModel)]=\"viewModel.editPropagator.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n\t                                     <option value=\"\"></option>\n\t                                     <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\" [value]=\"option.code\">{{option.label.localizedValue}}</option>\n\t                                 </select>\n\t                               </div>\n\t                               <div *ngIf=\"attributeType.type === 'character'\">\n\t                                 <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"viewModel.editPropagator.value\" (ngModelChange)=\"viewModel.value = $event\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === 'date'\">\n\t                                 <date-field [customStyles]=\"(viewModel.oldValue && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.editPropagator.value\" label=\"\" [inputName]=\"'date-val-' + i\" [allowInfinity]=\"false\" [allowFutureDates]=\"true\" \n\t                                     [required]=\"true\" [placement]=\"'right'\" [(valid)]=\"isValid\" [disable]=\"readonly\" ></date-field>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === 'integer' || attributeType.type === 'float'\">\n\t                                 <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"number\" class=\"form-control\" [name]=\"'int-val-' + i\" [(ngModel)]=\"viewModel.editPropagator.value\" (ngModelChange)=\"viewModel.value = $event\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === 'boolean'\">\n\t                                   <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t                                     <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === true\" [value]=\"true\" [(ngModel)]=\"viewModel.editPropagator.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                     <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t                                   </label> \n\t                                   <label class=\"radio radio-inline\"> \n\t                                     <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === false\" [value]=\"false\" [(ngModel)]=\"viewModel.editPropagator.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                     <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t                                   </label>\n\t                               </div>\n\t                               \n\t                               <div *ngIf=\"attributeType.type === '_PARENT_'\">\n                                   <ng-container *ngIf=\"hierarchy != null && hierarchy.types != null && hierarchy.types.length > 0\">\n\t\t                                 <div style=\"float:left;width:100%;\" *ngFor=\"let type of hierarchy.types; let j = index\"> \n\t\t\t                                 {{type.label}}\n\t\t\t                                 <div class=\"input-group\">\n\t\t\t                                    <input style=\"width:100%;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t\t\t                                      [name]=\"type.code + '-' + i\"\n\t\t\t                                      [disabled]=\"readonly || viewModel.summaryKey === 'DELETE' || viewModel.editPropagator.startDate == null || viewModel.editPropagator.startDate === ''\"\n\t\t\t                                      [(ngModel)]=\"viewModel.editPropagator.value.parents[type.code].text\" \n\t\t\t                                      [typeaheadAsync]=\"true\"\n\t\t\t                                      [typeahead]=\"viewModel.editPropagator.getTypeAheadObservable(viewModel.editPropagator.startDate, type, viewModel.editPropagator.value, j)\"\n\t\t\t                                      (typeaheadOnSelect)=\"viewModel.editPropagator.typeaheadOnSelect($event, type, viewModel.editPropagator.value, viewModel.editPropagator.startDate)\" \n\t\t\t                                      (typeaheadLoading)=\"viewModel.editPropagator.value.loading[type.code] = $event\"\n\t\t\t                                      [ngClass]=\"{'inline-loading':viewModel.editPropagator.value.loading[type.code], 'has-changed': (viewModel.oldValue && !isNew)}\"                                                                \n\t\t\t                                      [typeaheadOptionsLimit]=\"7\"\n\t\t\t                                      [typeaheadItemTemplate]=\"customItemTemplate\" \n\t\t\t                                      [typeaheadMinLength]=\"0\"\n\t\t\t                                      [typeaheadWaitMs]=\"300\">\n\t\t\t                                    \n\t\t\t                                      <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\" (click)=\"viewModel.editPropagator.removeType(type)\"> \n\t\t\t                                        <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n\t\t\t                                      </span>\n                                                  \n                                            <!-- Hack: This is needed for formatting  -->\n\t\t\t                                      <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\"> \n\t\t\t                                      </span>\n\t\t\t                                  </div>\n\t\t\t                               </div>\n                                   </ng-container>\n\t                               </div> \n                                 <div *ngIf=\"viewModel.oldValue && !isNew && attributeType.type !== 'geometry'\">\n                                  <p class=\"warning-text display-current-value\">\n                                    <localize key=\"change.request.changed.value.prefix\"></localize>\n                                    {{ viewModel.oldValue }}\n                                  </p>\n                                </div>\n                                 \n                                 <table *ngIf=\"attributeType.type === 'geometry'\" style=\"padding:0;\">\n                                 <!-- \n                                    Geometry \n                                 -->\n<!--                                   <div *ngIf=\"attributeType.type === 'geometry'\"> -->\n  \n<!--                                     <td style=\"vertical-align: middle;padding-left:0;\"> -->\n                                      <tr>\n                                        <td colspan=\"2\" style=\"padding-left:0;\">\n                                        \n                                          <button *ngIf=\"viewModel.oldValue && viewModel.newLayer\" class=\"btn btn-primary\" (click)=\"toggleOldGeometryView(viewModel)\" role=\"button\" [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                           <localize *ngIf=\"!viewModel.oldLayer || !viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.viewOld\"></localize>\n                                           <localize *ngIf=\"viewModel.oldLayer && viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hideOld\"></localize>\n                                          </button>\n                                          <button class=\"btn btn-primary\" style=\"margin-left:0;\" (click)=\"toggleGeometryView(viewModel)\" role=\"button\"\n                                            [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"!viewModel.newLayer || !viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.view\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hide\"></localize>\n                                          </button>\n                                          <button *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering\" class=\"btn btn-primary\" (click)=\"toggleGeometryEditing(viewModel)\" role=\"button\"\n                                            [disabled]=\"readonly || viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"viewModel.newLayer && !viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.save\"></localize>\n                                          </button>\n                                        </td>\n                                      </tr>\n  \n                                      <tr *ngIf=\"(viewModel.newLayer && viewModel.newLayer.isRendering) && (geoObjectType.geometryType === 'POINT' || geoObjectType.geometryType === 'MULTIPOINT') && viewModel.value && viewModel.value.coordinates && (viewModel.value.coordinates.length == 1 || viewModel.value.coordinates.length == 0)\">\n                                        \n                                        <td style=\"width:50%;padding-left:0;padding-right:5px;\" >\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.latitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][1]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateY\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLatitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n                                        <td style=\"width:50%;\">\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.longitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][0]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateX\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLongitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n  \n                                      </tr>\n<!--                                     </td> -->\n<!--                                   </div> -->\n                                  </table>\n                              </td>\n\n\t                            </tr>\n\t                            <tr class=\"attribute-date-input-row\">\n\t                              <td>\n\t                                <h5>\n\t                                  <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n\t                                </h5>\n\t                            \n\t                                <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldStartDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.editPropagator.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE'\" ></date-field>\n\t                                \n\t                                <div *ngIf=\"viewModel.oldStartDate && !isNew\">\n\t                                  <p class=\"warning-text display-current-value\">\n\t                                    <localize key=\"change.request.changed.value.prefix\"></localize>\n\t                                    {{ viewModel.oldStartDate }}\n\t                                  </p>\n\t                                </div>\n\t                              </td>\n\t                              <td>\n\t                                <div class=\"version-edit-date-container\">\n\t                                  <h5>\n\t                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n\t                                  </h5>\n\t                              \n\t                                  <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldEndDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.editPropagator.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"viewModel.summaryKey !== 'DELETE' && !readonly\" [allowFutureDates]=\"true\" \n\t                                      [required]=\"true\" [placement]=\"'bottom'\" [oldDate]=\"(viewModel.oldEndDate && !isNew) ? viewModel.oldEndDate : null\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE'\" ></date-field>\n\t                    \n\t                                  <!--\n\t                                  <div *ngIf=\"viewModel.oldEndDate && !isNew\">\n\t                                    <p class=\"warning-text\">\n\t                                      <localize key=\"change.request.changed.value.prefix\"></localize>\n\t                                      {{ viewModel.oldEndDate }}\n\t                                    </p>\n\t                                  </div>\n\t                                  -->\n\t                                </div>\n\t                              </td>\n\t                            </tr>\n\t                            <tr *ngIf=\"viewModel.conflictMessage && viewModel.conflictMessage.length > 0\">\n\t                              <p *ngFor=\"let msg of viewModel.conflictMessage\" [ngClass]=\"{'error-message': msg.severity === 'ERROR', 'warning-message': msg.severity === 'WARNING'}\" >\n\t                                {{msg.message}}\n\t                              </p>\n\t                            </tr>\n\t                          </table>\n\t                          \n\t                        </td>\n\t                        \n\t                        <td *ngIf=\"!readonly\" (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" [title]=\"(viewModel.summaryKey === 'UNMODIFIED' ? 'changeovertime.manageVersions.remove.version' : 'changeovertime.manageVersions.revert.version') | localize\">\n\t                          <i class=\"fa\" [class]=\"{'fa-times' : viewModel.summaryKey === 'UNMODIFIED', 'fa-undo' : viewModel.summaryKey !== 'UNMODIFIED'}\" ></i>\n\t                        </td>\n\t                      </tr>\n\t                    </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </li>\n              \n              <li *ngIf=\"!readonly && !isRootOfHierarchy\" class=\"list-group-item\" style=\"text-align: left;\">\n                <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"> \n                  <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                </i>\n              </li>\n              \n            </ul>\n            <div *ngIf=\"changeRequest && changeRequest.approvalStatus === 'PENDING' && changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && editAction && hasAttributeChanges()\" style=\"margin-left: 15px;\">\n              <button [disabled]=\"editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n                <localize key=\"change.request.accept.btn\"></localize>\n              </button>\n              <button [disabled]=\"editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n                <localize key=\"change.request.reject.btn\"></localize>\n              </button>\n              <button [disabled]=\"editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n                <localize key=\"change.request.pending.btn\"></localize>\n              </button>\n            </div>              \n            <div *ngIf=\"changeRequest && changeRequest.approvalStatus !== 'PENDING'\" style=\"margin-left:15px;\">\n<!--               <button *ngIf=\"editAction.approvalStatus === 'ACCEPTED'\" disabled type=\"submit\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.accept.all.btn.hover' | localize\"> -->\n<!--                 <localize key=\"change.request.accept.btn\"></localize> -->\n<!--               </button> -->\n<!--               <button *ngIf=\"editAction.approvalStatus === 'REJECTED'\" disabled type=\"submit\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\"> -->\n<!--                 <localize key=\"change.request.reject.btn\"></localize> -->\n<!--               </button> -->\n                <strong style=\"color:#6BA542;\" *ngIf=\"editAction.approvalStatus === 'ACCEPTED'\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </strong>\n                <strong style=\"color:#6d0400;\" *ngIf=\"editAction.approvalStatus === 'REJECTED'\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </strong>\n            </div>              \n          </div>\n        </div>\n\t      <geoobject-editor-map style=\"width:55%;display:inline-block;vertical-align:top;margin-top:15px;\" *ngIf=\"isGeometryInlined && geomService.getRenderedLayers().length > 0\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" \n\t        [mapHeight]=\"mapRowHeight\" [readOnly]=\"!geoObjectType.isGeometryEditable && readonly\"\n\t        [bboxCode]=\"this.postGeoObject.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"geomService.getRenderedLayers()[0].startDate\">\n\t      </geoobject-editor-map>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { ValueOverTimeEditPropagator } from \"./ValueOverTimeEditPropagator\";\nimport { HierarchyOverTimeEntry, GeoObject, HierarchyOverTimeEntryParent } from \"@registry/model/registry\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { VersionDiffView } from \"./manage-versions-model\";\nimport { CreateGeoObjectAction, UpdateAttributeAction, AbstractAction, ValueOverTimeDiff, SummaryKey } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n\nexport class HierarchyEditPropagator extends ValueOverTimeEditPropagator {\n\n  hierarchyEntry: HierarchyOverTimeEntry;\n\n  constructor(component: ManageVersionsComponent, action: AbstractAction, view: VersionDiffView, hierarchyEntry: HierarchyOverTimeEntry) {\n      super(component, action, view);\n      this.hierarchyEntry = hierarchyEntry;\n\n      if (this.hierarchyEntry != null) {\n          this.hierarchyEntry.loading = {};\n      }\n  }\n\n  set startDate(startDate: string) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeAction).attributeDiff.hierarchyCode = this.component.hierarchy.code;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  if (this.hierarchyEntry.startDate === startDate) {\n                      return;\n                  }\n\n                  let immediateParent: GeoObject = this.hierarchyEntry.parents[this.component.hierarchy.types[this.component.hierarchy.types.length - 1].code].geoObject;\n                  let oldValue: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeAction).attributeDiff.hierarchyCode = this.component.hierarchy.code;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n                  this.diff.parents = this.hierarchyEntry.parents;\n              }\n          }\n\n          if (startDate === this.diff.oldStartDate) {\n              delete this.diff.newStartDate;\n              delete this.view.oldStartDate;\n          } else {\n              this.diff.newStartDate = startDate;\n              this.view.oldStartDate = this.convertDateForDisplay(this.diff.oldStartDate);\n          }\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.startDate = startDate;\n      }\n\n      this.view.startDate = startDate;\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n  }\n\n  get startDate() {\n      return this.view.startDate;\n  }\n\n  set endDate(endDate: string) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeAction).attributeDiff.hierarchyCode = this.component.hierarchy.code;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  if (this.hierarchyEntry.endDate === endDate) {\n                      return;\n                  }\n\n                  let immediateParent: GeoObject = this.hierarchyEntry.parents[this.component.hierarchy.types[this.component.hierarchy.types.length - 1].code].geoObject;\n                  let oldValue: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeAction).attributeDiff.hierarchyCode = this.component.hierarchy.code;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n                  this.diff.parents = this.hierarchyEntry.parents;\n              }\n          }\n\n          if (endDate === this.diff.oldEndDate) {\n              delete this.diff.newEndDate;\n              delete this.view.oldEndDate;\n          } else {\n              this.diff.newEndDate = endDate;\n              this.view.oldEndDate = this.convertDateForDisplay(this.diff.oldEndDate);\n          }\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.endDate = endDate;\n      }\n\n      this.view.endDate = endDate;\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n  }\n\n  get endDate() {\n      return this.view.endDate;\n  }\n\n  setParentValue(type: {code: string, label: string}, parents: { [k: string]: HierarchyOverTimeEntryParent }) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      let directParent: GeoObject = null;\n      if (type != null) {\n          directParent = parents[type.code].geoObject;\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeAction).attributeDiff.hierarchyCode = this.component.hierarchy.code;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  // let currentDirectParent: GeoObject = this.hierarchyEntry.parents[type.code].geoObject;\n                  let currentDirectParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n                  let oldValue: string = currentDirectParent == null ? null : currentDirectParent.properties.type + \"_~VST~_\" + currentDirectParent.properties.code;\n\n                  if (\n                      (currentDirectParent == null && directParent == null) ||\n                      ((currentDirectParent != null && directParent != null) &&\n                      currentDirectParent.properties.code === directParent.properties.code)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldParents = this.hierarchyEntry.parents;\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeAction).attributeDiff.hierarchyCode = this.component.hierarchy.code;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          let newValueStrConcat: string = null;\n          if (directParent != null) {\n              newValueStrConcat = directParent.properties.type + \"_~VST~_\" + directParent.properties.code;\n          }\n\n          if (newValueStrConcat === this.diff.oldValue) {\n              delete this.diff.newValue;\n              delete this.view.oldValue;\n          } else {\n              this.diff.newValue = newValueStrConcat;\n              this.view.oldValue = this.diff.oldValue == null ? null : this.diff.oldValue.split(\"_~VST~_\")[1];\n          }\n\n          this.diff.parents = parents;\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.parents = parents;\n      }\n\n      this.view.value.parents = parents;\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n  }\n\n  public getLowestLevelFromHierarchyEntry(parents: any): {geoObject: GeoObject, text: string} {\n      let len = this.component.hierarchy.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.component.hierarchy.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(parents, type.code) && parents[type.code].geoObject) {\n              return parents[type.code];\n          }\n      }\n\n      return null;\n  }\n\n  set value(val: any) {\n      this.view.value = val;\n  }\n\n  get value() {\n      return this.view.value;\n  }\n\n  public removeType(type): void {\n      this.view.value.parents[type.code] = { text: \"\", geoObject: null };\n\n      // Set the value to be the next existing ancestor.\n      let entry = this.view.value;\n      let len = this.component.hierarchy.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.component.hierarchy.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(entry.parents, type.code) && entry.parents[type.code].geoObject) {\n              this.setParentValue(type, this.view.value.parents);\n              return;\n          }\n      }\n\n      // If we do not have a next existing ancestor, then we must set the value to null.\n      this.setParentValue(null, this.view.value.parents);\n  }\n\n  getTypeAheadObservable(date: string, type: any, entry: any, index: number): Observable<any> {\n      let geoObjectTypeCode = type.code;\n\n      let parentCode = null;\n      let parentTypeCode = null;\n      let hierarchyCode = null;\n\n      if (index > 0) {\n          let pType = this.component.hierarchy.types[index - 1];\n          const parent = entry.parents[pType.code];\n\n          if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n              hierarchyCode = this.component.hierarchy.code;\n              parentCode = parent.geoObject.properties.code;\n              parentTypeCode = parent.geoObject.properties.type;\n          }\n      }\n\n      return Observable.create((observer: any) => {\n          if (parentCode == null) {\n              let loopI = index;\n\n              while (parentCode == null && loopI > 0) {\n                  loopI = loopI - 1;\n\n                  let parent = entry.parents[this.component.hierarchy.types[loopI].code];\n\n                  if (parent != null) {\n                      if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                          parentCode = parent.geoObject.properties.code;\n                          hierarchyCode = this.component.hierarchy.code;\n                          parentTypeCode = this.component.hierarchy.types[loopI].code;\n                      } else if (parent.goCode != null) {\n                          parentCode = parent.goCode;\n                          hierarchyCode = this.component.hierarchy.code;\n                          parentTypeCode = this.component.hierarchy.types[loopI].code;\n                      }\n                  }\n              }\n          }\n\n          this.component.service.getGeoObjectSuggestions(entry.parents[type.code].text, geoObjectTypeCode, parentCode, parentTypeCode, hierarchyCode, date).then(results => {\n              observer.next(results);\n          });\n      });\n  }\n\n  typeaheadOnSelect(e: TypeaheadMatch, type: any, entry: any, date: string): void {\n    //        let ptn: ParentTreeNode = parent.ptn;\n\n      entry.parents[type.code].text = e.item.name + \" : \" + e.item.code;\n      entry.parents[type.code].goCode = e.item.code;\n\n      let parentTypes = [];\n\n      for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n          let current = this.component.hierarchy.types[i];\n\n          parentTypes.push(current.code);\n\n          if (current.code === type.code) {\n              break;\n          }\n      }\n\n      this.component.service.getParentGeoObjects(e.item.uid, type.code, parentTypes, true, date).then(ancestors => {\n          // First filter the response for ancestors of only the correct hierarchy\n          ancestors.parents = ancestors.parents.filter(p => p.hierarchyType === this.component.hierarchy.code);\n\n          delete entry.parents[type.code].goCode;\n          entry.parents[type.code].geoObject = ancestors.geoObject;\n          entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestors.geoObject.properties.code;\n\n          for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n              let current = this.component.hierarchy.types[i];\n              let ancestor = ancestors;\n\n              while (ancestor != null && ancestor.geoObject.properties.type !== current.code) {\n                  if (ancestor.parents.length > 0) {\n                      ancestor = ancestor.parents[0];\n                  } else {\n                      ancestor = null;\n                  }\n              }\n\n              if (ancestor != null) {\n                  entry.parents[current.code].geoObject = ancestor.geoObject;\n                  entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestor.geoObject.properties.code;\n              }\n          }\n\n          this.setParentValue(type, entry.parents);\n      });\n  }\n\n  createEmptyHierarchyEntry(): HierarchyOverTimeEntry {\n      let hierarchyEntry = new HierarchyOverTimeEntry();\n      hierarchyEntry.loading = {};\n      hierarchyEntry.oid = this.component.generateUUID();\n\n      hierarchyEntry.parents = {};\n\n      for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n          let current = this.component.hierarchy.types[i];\n\n          hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n\n          hierarchyEntry.loading = {};\n      }\n\n      return hierarchyEntry;\n  }\n\n  onAddNewVersion(): void {\n      this.view.summaryKey = SummaryKey.NEW;\n\n      this.view.value = this.createEmptyHierarchyEntry();\n\n      if (this.component.editAction instanceof CreateGeoObjectAction) {\n          this.hierarchyEntry = this.createEmptyHierarchyEntry();\n\n          this.component.editAction.parentJson.entries.push(this.hierarchyEntry);\n      }\n  }\n\n  recalculateView(): void {\n      if (this.diff === null) {\n          if (this.action.actionType === \"UpdateAttributeAction\") {\n              if (this.hierarchyEntry != null) {\n                  this.view.value = JSON.parse(JSON.stringify({ parents: this.hierarchyEntry.parents, loading: {} }));\n                  this.view.startDate = this.hierarchyEntry.startDate;\n                  this.view.endDate = this.hierarchyEntry.endDate;\n\n                  delete this.view.oldValue;\n                  delete this.view.oldStartDate;\n                  delete this.view.oldEndDate;\n              }\n          } else {\n              // TODO\n          }\n      }\n\n      this.view.calculateSummaryKey(this.diff);\n  }\n\n  public remove(): void {\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeAction = this.action as UpdateAttributeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.component.onActionChange(this.action);\n              this.recalculateView();\n              return;\n          } else if (this.hierarchyEntry != null && this.diff == null) {\n              let currentImmediateParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n              let oldValue: string = currentImmediateParent == null ? null : currentImmediateParent.properties.type + \"_~VST~_\" + currentImmediateParent.properties.code;\n\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.hierarchyEntry.oid;\n              this.diff.oldValue = oldValue;\n              this.diff.oldStartDate = this.hierarchyEntry.startDate;\n              this.diff.oldEndDate = this.hierarchyEntry.endDate;\n              (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              (this.action as UpdateAttributeAction).attributeDiff.hierarchyCode = this.component.hierarchy.code;\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let index = (this.action as CreateGeoObjectAction).parentJson.entries.findIndex(vot => vot.oid === this.hierarchyEntry.oid);\n\n          if (index !== -1) {\n              (this.action as CreateGeoObjectAction).parentJson.entries.splice(index, 1);\n          }\n      }\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n  }\n\n}","import { ValueOverTime } from \"@registry/model/registry\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { VersionDiffView } from \"./manage-versions-model\";\nimport { CreateGeoObjectAction, UpdateAttributeAction, AbstractAction, ValueOverTimeDiff, SummaryKey } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\n\nexport class ValueOverTimeEditPropagator {\n\n  view: VersionDiffView;\n  diff: ValueOverTimeDiff; // Any existing diff which may be associated with this view object.\n  valueOverTime?: ValueOverTime; // Represents a vot on an existing GeoObject. If this is set and the action is UpdateAttribute, we must be doing an UPDATE, and valueOverTime represents the original value in the DB.\n  action: AbstractAction;\n  component: ManageVersionsComponent;\n\n  constructor(component: ManageVersionsComponent, action: AbstractAction, view: VersionDiffView) {\n      this.view = view;\n      this.action = action;\n      this.component = component;\n  }\n\n  // eslint-disable-next-line accessor-pairs\n  get oid(): string {\n      return this.view.oid;\n  }\n\n  get startDate() {\n      return this.view.startDate;\n  }\n\n  set startDate(startDate: string) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.valueOverTime == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  if (this.valueOverTime.startDate === startDate) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.valueOverTime.oid;\n                  this.diff.oldValue = this.valueOverTime.value;\n                  this.diff.oldStartDate = this.valueOverTime.startDate;\n                  this.diff.oldEndDate = this.valueOverTime.endDate;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          if (startDate === this.diff.oldStartDate) {\n              delete this.diff.newStartDate;\n              delete this.view.oldStartDate;\n          } else {\n              this.diff.newStartDate = startDate;\n              this.view.oldStartDate = this.convertDateForDisplay(this.diff.oldStartDate);\n          }\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.valueOverTime.startDate = startDate;\n      }\n\n      this.view.startDate = startDate;\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n  }\n\n  get endDate() {\n      return this.view.endDate;\n  }\n\n  set endDate(endDate: string) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.valueOverTime == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  if (this.valueOverTime.endDate === endDate) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.valueOverTime.oid;\n                  this.diff.oldValue = this.valueOverTime.value;\n                  this.diff.oldStartDate = this.valueOverTime.startDate;\n                  this.diff.oldEndDate = this.valueOverTime.endDate;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          if (endDate === this.diff.oldEndDate) {\n              delete this.diff.newEndDate;\n              delete this.view.oldEndDate;\n          } else {\n              this.diff.newEndDate = endDate;\n              this.view.oldEndDate = this.convertDateForDisplay(this.diff.oldEndDate);\n          }\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.valueOverTime.endDate = endDate;\n      }\n\n      this.view.endDate = endDate;\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n  }\n\n  get value() {\n      return this.view.value;\n  }\n\n  set value(value: any) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      if (value != null) {\n          if (this.component.attributeType.type === \"term\") {\n              value = [value];\n          } else if (this.component.attributeType.type === \"date\") {\n              value = new Date(value).getTime();\n          }\n      } else if (value == null) {\n          if (this.component.attributeType.type === \"geometry\") {\n              value = this.component.geomService.createEmptyGeometryValue();\n          } else if (this.component.attributeType.type === \"character\") {\n              value = \"\";\n          }\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.valueOverTime == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  if (this.areValuesEqual(this.valueOverTime.value, value)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.valueOverTime.oid;\n                  this.diff.oldValue = this.valueOverTime.value;\n                  this.diff.oldStartDate = this.valueOverTime.startDate;\n                  this.diff.oldEndDate = this.valueOverTime.endDate;\n                  (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          if (this.diff.action !== \"CREATE\" && this.areValuesEqual(this.diff.oldValue, value)) {\n              delete this.diff.newValue;\n              delete this.view.oldValue;\n          } else {\n              this.diff.newValue = JSON.parse(JSON.stringify(value));\n              this.view.oldValue = this.diff.oldValue == null ? null : this.convertValueForDisplay(this.diff.oldValue);\n          }\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.valueOverTime.value = value;\n      }\n\n      this.view.value = value;\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n  }\n\n  public setLocalizedValue(localeValue: {locale: string, value: string}) {\n      // eslint-disable-next-line no-self-assign\n      this.value = this.value;\n  }\n\n  removeEmptyDiff(): void {\n      if (this.diff != null && this.diff.newValue === undefined && this.diff.newStartDate === undefined && this.diff.newEndDate === undefined) {\n          const diffs = (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime;\n\n          const index = diffs.findIndex(d => d.oid === this.diff.oid);\n\n          if (index !== -1) {\n              diffs.splice(index, 1);\n          }\n\n          this.diff = null;\n      }\n  }\n\n  convertDateForDisplay(date: string): string {\n      return this.component.dateService.formatDateForDisplay(date);\n  }\n\n  convertValueForDisplay(val: any): any {\n      if (this.component.attributeType.type === \"date\") {\n          return this.component.dateService.formatDateForDisplay(new Date(val));\n      }\n\n      return val;\n  }\n\n  areValuesEqual(val1: any, val2: any): boolean {\n      if (this.component.attributeType.type === \"boolean\") {\n          return val1 === val2;\n      }\n\n      if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n          return true;\n      }\n\n      if (!val1 && !val2) {\n          return true;\n      } else if ((!val1 && val2) || (!val2 && val1)) {\n          return false;\n      }\n\n    // if (this.component.attributeType.type === \"local\")\n    // {\n      // Not used anymore\n    // }\n      if (this.component.attributeType.type === \"term\") {\n          if (val1 != null && val2 != null) {\n              return val1.length === val2.length && val1[0] === val2[0];\n          }\n      } else if (this.component.attributeType.type === \"geometry\") {\n          return turf_booleanequal(val1, val2);\n      } else if (this.component.attributeType.type === \"date\") {\n          let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n          let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n          return casted1 === casted2;\n      } else if (this.component.attributeType.type === \"local\") {\n          if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n              return false;\n          }\n\n          let len = val1.localeValues.length;\n          for (let i = 0; i < len; ++i) {\n              let localeValue = val1.localeValues[i];\n\n              let lv2 = this.component.getValueAtLocale(val2, localeValue.locale);\n              let lv1 = localeValue.value;\n\n              if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                  continue;\n              } else if (lv1 !== lv2) {\n                  return false;\n              }\n          }\n\n          return true;\n      }\n\n      return val1 === val2;\n  }\n\n  recalculateView(): void {\n      if (this.diff === null) {\n          if (this.action.actionType === \"UpdateAttributeAction\") {\n              if (this.valueOverTime != null) {\n                  this.view.value = this.valueOverTime.value != null ? JSON.parse(JSON.stringify(this.valueOverTime.value)) : null;\n                  this.view.startDate = this.valueOverTime.startDate;\n                  this.view.endDate = this.valueOverTime.endDate;\n\n                  delete this.view.oldValue;\n                  delete this.view.oldStartDate;\n                  delete this.view.oldEndDate;\n              }\n          } else {\n              // TODO\n          }\n      }\n\n      this.view.calculateSummaryKey(this.diff);\n\n      if (this.component.attributeType.type === \"geometry\") {\n          this.component.geomService.reload();\n      }\n  }\n\n  public remove(): void {\n      if (this.component.geomService.isEditing()) {\n          this.component.geomService.stopEditing();\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeAction = this.action as UpdateAttributeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.component.onActionChange(this.action);\n              this.recalculateView();\n              return;\n          } else if (this.valueOverTime != null && this.diff == null) {\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.valueOverTime.oid;\n              this.diff.oldValue = this.valueOverTime.value;\n              this.diff.oldStartDate = this.valueOverTime.startDate;\n              this.diff.oldEndDate = this.valueOverTime.endDate;\n              (this.action as UpdateAttributeAction).attributeDiff.valuesOverTime.push(this.diff);\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let votc = (this.action as CreateGeoObjectAction).geoObjectJson.attributes[this.component.attributeType.code].values;\n\n          let index = votc.findIndex((vot) => { return vot.oid === this.valueOverTime.oid; });\n\n          if (index !== -1) {\n              votc.splice(index, 1);\n          }\n      }\n\n      this.view.calculateSummaryKey(this.diff);\n\n      this.component.onActionChange(this.action);\n\n      if (this.component.attributeType.type === \"geometry\") {\n          this.component.geomService.reload();\n      }\n  }\n\n  public onAddNewVersion(): void {\n      if (this.component.editAction instanceof CreateGeoObjectAction) {\n          let vot = new ValueOverTime();\n          vot.oid = this.component.generateUUID();\n\n          this.component.editAction.geoObjectJson.attributes[this.component.attributeType.code].values.push(vot);\n\n          this.valueOverTime = vot;\n      }\n\n      if (this.component.attributeType.type === \"local\") {\n          this.value = this.component.lService.create();\n      } else if (this.component.attributeType.type === \"geometry\") {\n          if (this.component.viewModels.length > 0) {\n              this.value = JSON.parse(JSON.stringify(this.component.viewModels[this.component.viewModels.length - 1].value));\n          } else {\n              this.value = this.component.geomService.createEmptyGeometryValue();\n          }\n      } else if (this.component.attributeType.type === \"term\") {\n          let terms = this.component.getGeoObjectTypeTermAttributeOptions(this.component.attributeType.code);\n\n          if (terms && terms.length > 0) {\n              this.value = terms[0].code;\n          }\n      } else {\n          this.value = null;\n      }\n\n      this.view.summaryKey = SummaryKey.NEW;\n  }\n\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"geoObjectAttributeExcludesFilter\",\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"change-request-page\",\n    templateUrl: \"./change-request-page.component.html\",\n    styleUrls: [\"./change-request-page.css\"]\n})\nexport class ChangeRequestPageComponent implements OnInit {\n\n  pageTitle: string;\n  bsModalRef: BsModalRef;\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n  isContributorOnly: boolean;\n\n  urlSubscriber: any;\n\n  highlightOid: string;\n\n  constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService, private route: ActivatedRoute) {\n      this.isAdmin = service.isAdmin();\n      this.isMaintainer = this.isAdmin || service.isMaintainer();\n      this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n      this.isContributorOnly = service.isContributerOnly();\n  }\n\n  ngOnInit(): void {\n      this.urlSubscriber = this.route.params.subscribe(params => {\n          this.highlightOid = params[\"oid\"];\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.urlSubscriber.unsubscribe();\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>{{pageTitle}}</h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <request-table [toggleId]=\"highlightOid\"></request-table>\n            \n            <submit-change-request *ngIf=\"isContributorOnly\"></submit-change-request>\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\n@Component({\n\n    selector: \"cascading-geo-selector\",\n    templateUrl: \"./cascading-geo-selector.html\"\n})\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mainForm\") mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() customEvent: boolean = false;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach(hierarchy => {\n            const object = {};\n            object[\"label\"] = hierarchy.label;\n            object[\"code\"] = hierarchy.code;\n\n            this.isValid = this.isValid && (this.hierarchies.length > 0);\n\n            hierarchy.entries.forEach(pot => {\n                const startDate = Date.parse(pot.startDate);\n                const endDate = Date.parse(pot.endDate);\n\n                if (time >= startDate && time <= endDate) {\n                    let parents = [];\n\n                    hierarchy.types.forEach(type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if (pot.parents[type.code] != null) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push(parent);\n                    });\n\n                    object[\"parents\"] = parents;\n                }\n            });\n\n            this.cHierarchies.push(object);\n        });\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions(code: string): void {\n        const hierarchy = this.hierarchies.find(h => h.code === code);\n\n        if (this.customEvent) {\n            this.onManageVersion.emit(hierarchy);\n        } else {\n/*\n            this.bsModalRef = this.modalService.show(ManageParentVersionsModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            });\n            this.bsModalRef.content.init(hierarchy);\n            this.bsModalRef.content.onVersionChange.subscribe(hierarchy => {\n                this.calculate();\n            });\n            */\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\" *ngIf=\"!readOnly\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { Observable } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { MasterListVersion } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ExportFormatModalComponent } from \"./export-format-modal.component\";\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, ProgressService } from \"@shared/service\";\n\ndeclare let acp: string;\ndeclare let $: any;\n\n@Component({\n    selector: \"master-list\",\n    templateUrl: \"./master-list.component.html\",\n    styleUrls: [\"./master-list.component.css\"]\n})\nexport class MasterListComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    list: MasterListVersion = null;\n    p: number = 1;\n    current: string = \"\";\n    filter: { attribute: string, value: string, label: string }[] = [];\n    selected: string[] = [];\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 100,\n        results: []\n    };\n\n    sort = { attribute: \"code\", order: \"ASC\" };\n    isPublished: boolean = true;\n    isRefreshing: boolean = false;\n    isWritable: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    public searchPlaceholder = \"\";\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n\n    constructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private dateService: DateService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n        this.isPublished = (this.route.snapshot.paramMap.get(\"published\") == \"true\");\n\n        this.service.getMasterListVersion(oid).then(version => {\n            this.list = version;\n            this.list.attributes.forEach(attribute => {\n                attribute.isCollapsed = true;\n            });\n            const orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(orgCode, typeCode);\n\n            this.onPageChange(1);\n\n            if (version.refreshProgress != null) {\n                this.handleProgressChange(version.refreshProgress);\n            }\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.notifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(message);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.notifier.complete();\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n\n    onPageChange(pageNumber: number): void {\n        this.message = null;\n\n        this.service.data(this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onSort(attribute: { name: string, label: string }): void {\n        if (this.sort.attribute === attribute.name) {\n            this.sort.order = (this.sort.order === \"ASC\" ? \"DESC\" : \"ASC\");\n        } else {\n            this.sort = { attribute: attribute.name, order: \"ASC\" };\n        }\n\n        this.onPageChange(1);\n    }\n\n    clearFilters(): void {\n        this.list.attributes.forEach(attr => {\n            attr.search = null;\n        });\n\n        this.filter = [];\n        this.selected = [];\n\n        this.onPageChange(1);\n    }\n\n    toggleFilter(attribute: any): void {\n        attribute.isCollapsed = !attribute.isCollapsed;\n    }\n\n    getValues(attribute: any): void {\n        return Observable.create((observer: any) => {\n            this.message = null;\n\n            // Get the valid values\n            this.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.filter).then(options => {\n                options.unshift({ label: \"[\" + this.localizeService.decode(\"masterlist.nofilter\") + \"]\", value: null });\n\n                observer.next(options);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    handleProgressChange(progress: any): void {\n        this.isRefreshing = (progress.current < progress.total);\n\n        this.pService.progress(progress);\n\n        if (!this.isRefreshing) {\n            // Refresh the resultSet\n            this.onPageChange(1);\n        }\n    }\n\n    handleDateChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && (attribute.value.start !== \"\" || attribute.value.end !== \"\")) {\n            let label = \"[\" + attribute.label + \"] : [\";\n\n            if (attribute.value.start != null) {\n                label += attribute.value.start;\n            }\n\n            if (attribute.value.start != null && attribute.value.end != null) {\n                label += \" - \";\n            }\n\n            if (attribute.value.end != null) {\n                label += attribute.value.end;\n            }\n\n            label += \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleInputChange(attribute: any): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        if (attribute.value != null && attribute.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n            this.selected.push(attribute.base);\n        }\n\n        this.onPageChange(1);\n    }\n\n    handleListChange(e: TypeaheadMatch, attribute: any): void {\n        attribute.value = e.item;\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter(f => f.attribute !== attribute.base);\n        this.selected = this.selected.filter(s => s !== attribute.base);\n\n        this.list.attributes.forEach(attr => {\n            if (attr.base === attribute.base) {\n                attr.search = \"\";\n            }\n        });\n\n        if (attribute.value.value != null && attribute.value.value !== \"\") {\n            const label = \"[\" + attribute.label + \"] : \" + \"[\" + attribute.value.label + \"]\";\n\n            this.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n            this.selected.push(attribute.base);\n            attribute.search = e.item.label;\n        } else {\n            attribute.search = \"\";\n        }\n\n        this.onPageChange(1);\n    }\n\n    isFilterable(attribute: any): boolean {\n        return attribute.type !== \"none\" && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n    }\n\n    onEdit(data): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        editModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setMasterListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishMasterList(this.list.oid).toPromise()\n            .then((historyOid: string) => {\n                this.isRefreshing = true;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n        // this.list = list;\n        // this.list.attributes.forEach(attribute => {\n        //  attribute.isCollapsed = true;\n        // });\n\n        // Refresh the resultSet\n        // this.onPageChange(1);\n    }\n\n    onNewGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        // editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n        editModal.content.configureAsNew(this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setMasterListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n        });\n    }\n\n    onExport(): void {\n        this.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.onFormat.subscribe(format => {\n            if (format === \"SHAPEFILE\") {\n                window.location.href = acp + \"/master-list/export-shapefile?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n            } else if (format === \"EXCEL\") {\n                window.location.href = acp + \"/master-list/export-spreadsheet?oid=\" + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n            }\n        });\n    }\n\n    changeTypeaheadLoading(attribute: any, loading: boolean): void {\n        attribute.loading = loading;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onWheel(event: WheelEvent): void {\n        let tableEl = (<Element>event.target).parentElement.closest(\"table\").parentElement;\n\n        tableEl.scrollLeft += event.deltaY;\n        event.preventDefault();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar *ngIf=\"isRefreshing\"></progress-bar>\n    \n    <!--\n    <div *ngIf=\"isRefreshing\" class=\"version-busy-overlay\">\n      This Master List Version is currently refreshing...\n      ...Please wait... ?\n    </div>\n    -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.generatedDate\"></localize>\n                    : <span class=\"date-string-display\">\n                          {{formatDate(list.publishDate)}}\n                      </span>\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : <span class=\"date-string-display\">\n                          {{formatDate(list.forDate)}}\n                      </span>\n                </h4>\n            </div>\n        </div>\n<!--         <div class=\"row\"> -->\n<!--             <div *ngIf=\"list\" class=\"col-md-12\"> -->\n<!--               <a [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, (!isWritable || list.isAbstract), list.forDate]\" routerLinkActive=\"active\"> -->\n<!--                 <localize key=\"masterlist.gotoMap\"></localize> -->\n<!--               </a> -->\n                \n<!--             </div> -->\n<!--         </div> -->\n\n\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true}\" style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n\n                        <button *ngIf=\"isWritable && !list.isAbstract\" type=\"submit\"\n                           [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, !isWritable, list.forDate, '__NEW__', (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\"\n                         class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                        </button>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"dropdown\" *ngIf=\"isWritable && list.isAbstract\">\n\t\t\t\t\t\t\t\t\t\t\t\t  <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <localize key=\"masterlist.newGeoObject\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t    <span class=\"caret\"></span>\n\t\t\t\t\t\t\t\t\t\t\t\t  </button>\n\t\t\t\t\t\t\t\t\t\t\t\t  <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <li><localize style=\"padding-left:10px;\" key=\"masterlist.newGeoObject.selectASubtype\"></localize></li>\n\t\t\t\t\t\t\t\t\t\t\t\t    <li role=\"separator\" class=\"divider\"></li>\n\t\t\t\t\t\t\t\t\t\t\t\t    <li *ngFor=\"let subtype of list.subtypes\"><a [routerLink]=\"['/registry/dataset-location-manager', list.oid, subtype.code, !isWritable, list.forDate, '__NEW__', (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\">{{subtype.label}}</a></li>\n\t\t\t\t\t\t\t\t\t\t\t\t  </ul>\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n                        <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\"  class=\"col-md-12 table-responsive text-nowrap\" id=\"list-view-table\" style=\"max-height:calc(100vh - 399px);\">\n                <table class=\"list-table table table-bordered table-striped\"  >\n                    <thead style=\"position: sticky;top: 0;background: #ececec;\">\n                        <tr>\n                            <th style=\"width: 3%;position: sticky;top: 0;\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th style=\"position: sticky;top: 0\" *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\" [title]=\"'button.filter.helptext' | localize\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n<!--                                             <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />  -->\n<!--                                             <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> -->\n                                            <date-field [(value)]=\"attribute.value.start\" label=\"\" [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'Start'\" (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\"></date-field>\n                                            <date-field [(value)]=\"attribute.value.end\" label=\"\" [classNames]=\"'search-input'\" [inputName]=\"attribute.name + 'End'\" (change)=\"handleDateChange(attribute)\" [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'bottom'\"></date-field>\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" \n                                          type=\"text\" \n                                          [placeholder]=\"('masterlist.search' | localize) + '...'\" \n                                          [name]=\"attribute.name\"\n                                          [(ngModel)]=\"attribute.search\"\n                                          [typeaheadAsync]=\"true\"\n                                          [typeahead]=\"getValues(attribute)\"\n                                          (typeaheadOnSelect)=\"handleListChange($event, attribute)\"\n                                          [typeaheadOptionsLimit]=\"100\"\n                                          [typeaheadMinLength]=\"0\"\n                                          [typeaheadWaitMs]=\"300\"\n                                          [ngClass]=\"{'inline-loading':attribute.loading}\"    \n                                          (typeaheadLoading)=\"changeTypeaheadLoading(attribute, $event)\"                                      \n                                          typeaheadOptionField=\"label\"\n                                          class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td style=\"width: 3%; text-align: center;\" class=\"label-column\">\n                              <a class=\"fa\" style=\"padding:3px;\" [ngClass]=\"isWritable ? 'fa fa-pencil' : 'fa fa-eye'\" [routerLink]=\"['/registry/dataset-location-manager', list.oid, list.typeCode, !isWritable, list.forDate, result.code, (!isWritable || list.isAbstract), 'ML' + (isPublished ? 'T' : 'F') + list.oid]\" routerLinkActive=\"active\"></a>\n                            </td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"display:inline-block;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                <span style=\"display:inline-block;margin-left:20px;vertical-align:middle;color:#cacaca;font-weight:bold;\">\n                  <localize key=\"masterlist.pagination.showing\"></localize>\n                  &nbsp;{{(page.pageNumber-1)*page.pageSize}} \n                  -&nbsp;{{page.pageNumber*page.pageSize}} \n                  &nbsp;<localize key=\"masterlist.pagination.of\"></localize>&nbsp;{{page.count}}\n                </span> \n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { PublishModalComponent } from \"./publish-modal.component\";\nimport { MasterList, MasterListVersion } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { AuthService, LocalizationService } from \"@shared/service\";\n\ndeclare var acp: any;\n\n@Component({\n    selector: \"published-master-list-history\",\n    templateUrl: \"./published-master-list-history.component.html\",\n    styleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit, OnDestroy {\n    message: string = null;\n    list: MasterList = null;\n    page: any = {\n        pageSize: 10,\n        pageNumber: 1,\n        count: 1,\n        results: []\n    };\n\n    @Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n\n    isAdmin: boolean;\n\n\n    constructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService, private localizeService: LocalizationService,\n        private dateService: DateService) {\n\n        this.isAdmin = authService.isAdmin();\n    }\n\n    ngOnInit(): void {\n        this.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n            this.list = list;\n\n            this.onPageChange(1);\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.notifier.subscribe(message => {\n            if (message.type === \"PUBLISH_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.notifier.complete();\n    }\n\n    //isGeoObjectTypeRM(type: string): boolean {\n    //    return this.authService.isGeoObjectTypeRM(type);\n    //}\n\n    onDeleteMasterListVersion(version: MasterListVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + version.forDate + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterListVersion(version.oid).then(response => {\n                this.updateList();\n\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    updateList(): void {\n        // update the list of versions. \n        this.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n            this.list = list;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: number): void {\n        if (this.list != null) {\n\n            this.message = null;\n\n            this.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n                this.page = response;\n\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.updateList();\n        }\n    }\n\n    onViewMetadata(): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.isNew = false;\n    }\n\n\n    onView(version: MasterListVersion): void {\n        this.router.navigate([\"/registry/master-list/\", version.oid, true])\n    }\n\n    onPublishShapefile(version: MasterListVersion): void {\n\n        this.service.publishShapefile(version.oid).then(() => {\n\n            this.onPageChange(this.page.pageNumber);\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDownloadShapefile(version: MasterListVersion): void {\n        window.location.href = acp + \"/master-list/download-shapefile?oid=\" + version.oid;\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n     <div *ngIf=\"list && ((list.write))\" style=\"margin-bottom: 10px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" \n                    [title]=\"'masterList.publish.help.text' | localize\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.publishDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.write)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version )\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.forDate)}}\n                          </span>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.publishDate)}}\n                          </span>\n                        </td>\n                        \n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <div class=\"row\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span>\n                                            <span style=\"display: block;\"> {{job.author}} </span>\n                                            <span style=\"display: block;\"> {{job.type}} </span>\n                                            <span style=\"display: block;\"> {{job.status}} </span>\n                                            <span *ngIf=\"job.exception\" style=\"display: block;\"> {{job.exception.message}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { MasterList, MasterListVersion } from \"@registry/model/registry\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"master-list-history\",\n    templateUrl: \"./master-list-history.component.html\",\n    styleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\n    message: string = null;\n    list: MasterList = null;\n    forDate: string = \"\";\n    isForDateValid: boolean = true;\n\n    @Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: RegistryService, private router: Router, private modalService: BsModalService, private localizeService: LocalizationService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n            this.list = list;\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n            this.list.versions.push(version);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewMetadata(): void {\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.isNew = false;\n    }\n\n    onView(version: MasterListVersion): void {\n        this.router.navigate([\"/registry/master-list/\", version.oid, false]);\n    }\n\n    onDelete(version: MasterListVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + version.forDate + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteMasterListVersion(version.oid).then(response => {\n                this.list.versions = this.list.versions.filter((value, index, arr) => {\n                    return value.oid !== version.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && list.exploratory\" style=\"margin-bottom: 10px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\" style=\"margin-left: 10px;\" autocomplete=\"off\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> \n\n                    <date-field [(value)]=\"forDate\" [(valid)]=\"isForDateValid\" label=\"\" style=\"display:inline-grid;\" [inputName]=\"'forDate'\" \n                        [allowFutureDates]=\"false\" [required]=\"true\" [placement]=\"'right'\"></date-field>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid || !isForDateValid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.generatedDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.forDate)}}\n                          </span>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">\n                          <span class=\"date-string-display\">\n                              {{formatDate(version.createDate)}}\n                          </span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { MasterList } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { PublishModalComponent } from \"./publish-modal.component\";\n\n@Component({\n\n    selector: \"master-list-view\",\n    templateUrl: \"./master-list-view.component.html\",\n    styleUrls: [\"./master-list-view.component.css\"]\n})\nexport class MasterListViewComponent implements OnInit {\n\n    content: string = \"\";\n    list: MasterList = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        if (oid != null) {\n            this.content = \"PUB\";\n        }\n\n        this.service.getMasterList(oid).then(list => {\n            this.list = list;\n\n            if (list.read) {\n                this.content = \"EXP\";\n            }\n        });\n    }\n\n    onViewMetadata(event: any): void {\n        event.preventDefault();\n\n        this.bsModalRef = this.modalService.show(PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n        this.bsModalRef.content.isNew = false;\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a *ngIf=\"list && list.read\" style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\"><localize key=\"lists.exploratory.link.label\"></localize></a>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\"><localize key=\"lists.published.link.label\"></localize></a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { interval } from \"rxjs\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\n@Component({\n    selector: \"scheduled-jobs\",\n    templateUrl: \"./scheduled-jobs.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class ScheduledJobsComponent implements OnInit {\n\n    message: string = null;\n\n    activeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    completeJobsPage: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    isViewAllOpen: boolean = false;\n\n    constructor(public service: RegistryService, private modalService: BsModalService, private router: Router, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.onActiveJobsPageChange(1);\n\n        this.pollingData = interval(1000).subscribe(() => {\n            this.activeTimeCounter++;\n            this.completeTimeCounter++;\n\n            if (this.isViewAllOpen) {\n                if (this.activeTimeCounter >= 4) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n                if (this.completeTimeCounter >= 7) {\n                    this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n                    this.completeTimeCounter = 0;\n                }\n            } else {\n                if (this.activeTimeCounter >= 2) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n        if (job.status === \"FEEDBACK\") {\n            return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PaginationPage): void {\n        page.results.forEach(job => {\n            let stepConfig = {\n                steps: [\n                    { label: this.localizeService.decode(\"scheduler.step.fileImport\"), status: \"COMPLETE\" },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.staging\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.validation\"),\n                        status: job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.databaseImport\"),\n                        status: job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n\n            job = job as ScheduledJobOverview;\n            job.stepConfig = stepConfig;\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    onViewAllCompleteJobs(): void {\n        this.onCompleteJobsPageChange(1);\n\n        this.isViewAllOpen = true;\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-history/\", code]);\n    }\n\n    onActiveJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCompleteJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(job.configuration).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n                    let activeJob = this.activeJobsPage.results[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.results.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n                    let activeJob = this.activeJobsPage.results[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.results.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    <span class=\"date-string-display\">\n                                                        {{formatDate(job.createDate)}}\n                                                    </span>\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                              <span class=\"date-string-display\">\n                                {{formatDate(job.createDate)}}\n                              </span>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <span class=\"date-string-display\">\n                                {{formatDate(job.lastUpdateDate)}}\n                            </span>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from \"./conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./conflict-widgets/reupload-modal.component\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\ndeclare let acp: any;\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./job.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class JobComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n\n    constructor(public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.notifier.subscribe(message => {\n            if (message.type === \"IMPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n        for (let i = 0; i < this.page.results.length; ++i) {\n            let pageConflict = this.page.results[i];\n\n            if (pageConflict.id === problem.id) {\n                this.page.results.splice(i, 1);\n            }\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: any): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n        this.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe(data => {\n            if (data.action === \"RESOLVED\") {\n                this.onProblemResolved(data.data);\n            }\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n            this.job = response;\n\n            if (this.job.stage === \"IMPORT_RESOLVE\") {\n                this.page = this.job.importErrors;\n            } else if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.page = this.job.problems;\n\n                for (let i = 0; i < this.page.results.length; ++i) {\n                    let problem = this.page.results[i];\n\n                    if (problem.type === \"RowValidationProblem\") {\n                        this.hasRowValidationProblem = true;\n                    }\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.results.forEach(row => {\n            row.selected = this.allSelected;\n        });\n    }\n\n    onReuploadAndResume(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.job = this.job;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.router.navigate([\"/registry/scheduled-jobs\"]);\n        });\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n        if (this.page.results.length === 0) {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n            } else {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n            }\n\n            this.bsModalRef.content.type = ModalTypes.danger;\n\n            this.bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.resolveScheduledJob(historyId).then(response => {\n                    this.router.navigate([\"/registry/scheduled-jobs\"]);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            });\n        }\n    }\n\n    onCancelScheduledJob(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(this.job.configuration).then(response => {\n                // this.bsModalRef.hide()\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              <span class=\"date-string-display\">\n                                    {{formatDate(job.createDate)}}\n                              </span>\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"job-conflict-modal\",\n    templateUrl: \"./job-conflict-modal.component.html\",\n    styleUrls: []\n})\nexport class JobConflictModalComponent implements OnInit {\n\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef) {\n        this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onProblemResolvedListener(problem: any): void {\n        this.onConflictAction.next({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJob, ImportError } from \"@registry/model/registry\";\n\nimport { GeoObjectEditorComponent } from \"../../geoobject-editor/geoobject-editor.component\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"import-problem-widget\",\n    templateUrl: \"./import-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ImportProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId(null);\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolved.emit(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>:\n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div *ngIf=\"problem.object != null && problem.object.geoObject != null\" style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"parent-reference-problem-widget\",\n    templateUrl: \"./parent-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"term-reference-problem-widget\",\n    templateUrl: \"./term-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(conflict: any): Observable<any> {\n        return Observable.create((observer: any) => {\n            this.iService.getTermSuggestions(conflict.mdAttributeId, this.searchLabel, \"20\").then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.termId = e.item.value;\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            classifierId: this.termId,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"row-validation-problem-widget\",\n    templateUrl: \"./row-validation-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class RowValidationProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.uid, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                              {{formatDate(job.createDate)}}\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">{{errorMessage}}</div>\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <div>{{message}}</div>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\n\nimport { TaskService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectType, PaginationPage } from \"@registry/model/registry\";\n\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"task-viewer\",\n    templateUrl: \"./task-viewer.component.html\",\n    styleUrls: [\"./task-viewer.component.css\"],\n    providers: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    completedTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    isViewAllOpen: boolean = false;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private taskService: TaskService, private localizeService: LocalizationService, private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onInProgressTasksPageChange(1);\n    }\n\n    upper(str: string): string {\n        if (str != null) {\n            return str.toUpperCase();\n        } else {\n            return \"\";\n        }\n    }\n\n    onInProgressTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, \"UNRESOLVED\").then(page => {\n            this.inProgressTasks = page;\n        });\n    }\n\n    onCompletedTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, \"RESOLVED\").then(page => {\n            this.completedTasks = page;\n        });\n    }\n\n    onCompleteTask(task: any): void {\n        // this.isViewAllOpen = true;\n\n        this.taskService.completeTask(task.id).then(() => {\n            const index = this.inProgressTasks.results.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.inProgressTasks.results.splice(index, 1);\n            }\n\n            this.completedTasks.results.push(task);\n            // this.onCompletedTasksPageChange(1);\n        });\n    }\n\n    onMoveTaskToInProgress(task: any): void {\n        this.isViewAllOpen = true;\n\n        this.taskService.setTaskStatus(task.id, \"UNRESOLVED\").then(() => {\n            const index = this.completedTasks.results.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.completedTasks.results.splice(index, 1);\n            }\n\n            this.completedTasks.results.splice(index, 1);\n            this.inProgressTasks.results.push(task);\n        });\n    }\n\n    onViewAllCompletedTasks(): void {\n        this.isViewAllOpen = true;\n\n        this.onCompletedTasksPageChange(1);\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label>\n                  <span class=\"date-string-display\">\n                      {{formatDate(task.createDate)}}\n                  </span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label>\n                <span class=\"date-string-display\" style=\"margin-right:30px;\">\n                   {{formatDate(task.createDate)}}\n                </span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label>\n                <span class=\"date-string-display\" >\n                   {{formatDate(task.completedDate)}}\n                </span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { SynchronizationConfigModalComponent } from \"./synchronization-config-modal.component\";\n\n@Component({\n    selector: \"synchronization-config-manager\",\n    templateUrl: \"./synchronization-config-manager.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\n    message: string = null;\n\n    page: PageResult<SynchronizationConfig> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 20\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.service.getPage(pageNumber, this.page.pageSize).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    create(): void {\n        this.service.edit(null).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(null, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onEdit(config: SynchronizationConfig): void {\n        this.service.edit(config.oid).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(response.config, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onRemove(config: SynchronizationConfig): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + config.label.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(config.oid).then(() => {\n                this.onPageChange(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(config: SynchronizationConfig): void {\n        this.router.navigate([\"/registry/synchronization-config/\", config.oid]);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from \"@registry/model/registry\";\nimport { SynchronizationConfigService, RegistryService } from \"@registry/service\";\nimport { AttributeConfigInfo, DHIS2AttributeMapping, SyncLevel } from \"@registry/model/sync\";\n\nlet DEFAULT_MAPPING_STRATEGY = \"net.geoprism.registry.etl.DHIS2AttributeMapping\";\n\nexport interface LevelRow {\n    isAttributeEditor: boolean;\n\n    level?: SyncLevel;\n    levelNum?: number;\n\n    // eslint-disable-next-line no-use-before-define\n    attrCfg?: GOTAttributeConfig;\n}\nexport interface GOTAttributeConfig {\n    geoObjectTypeCode?: string;\n    mappings: DHIS2AttributeMapping[];\n    attrConfigInfos: AttributeConfigInfo[];\n}\n\n@Component({\n    selector: \"synchronization-config-modal\",\n    templateUrl: \"./synchronization-config-modal.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit {\n\n    message: string = null;\n\n    @ViewChild(\"form\") form;\n\n    config: SynchronizationConfig = {\n        organization: null,\n        system: null,\n        hierarchy: null,\n        label: this.lService.create(),\n        configuration: {}\n    };\n\n    organizations: OrgSyncInfo[] = [];\n\n    cOrg: OrgSyncInfo = null;\n    cSystem: { label: string, oid: string, type: string } = null;\n\n    types: GeoObjectType[] = [];\n\n    levelRows: LevelRow[] = [];\n\n    orgUnitGroups: any[] = [];\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onSuccess: Subject<SynchronizationConfig>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: SynchronizationConfigService, private registryService: RegistryService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onSuccess = new Subject();\n    }\n\n    init(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n        this.organizations = organizations;\n\n        if (config != null) {\n            this.config = config;\n\n            let oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n            if (oIndex !== -1) {\n                this.cOrg = this.organizations[oIndex];\n            }\n\n            let sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n            if (sIndex !== -1) {\n                this.cSystem = this.cOrg.systems[sIndex];\n            }\n\n            if (this.cSystem != null && this.cSystem.type === \"DHIS2ExternalSystem\") {\n                // Get the types\n                // this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n                //  this.types = types;\n                // });\n\n                this.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n                    this.types = esConfig.types;\n                    this.orgUnitGroups = esConfig.orgUnitGroups;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n\n            this.levelRows = [];\n            for (let i = 0; i < this.config.configuration.levels.length; ++i) {\n                let level = this.config.configuration.levels[i];\n\n                let levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n                this.levelRows.push(levelRow);\n            }\n        }\n    }\n\n    buildDefaultMappings(): DHIS2AttributeMapping[] {\n        return [\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"displayLabel\",\n                externalId: null,\n                dhis2Id: \"name\",\n                dhis2AttrName: \"name\"\n            },\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"displayLabel\",\n                externalId: null,\n                dhis2Id: \"shortName\",\n                dhis2AttrName: \"shortName\"\n            },\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"code\",\n                dhis2Id: \"code\",\n                externalId: null,\n                dhis2AttrName: \"code\"\n            },\n            {\n                attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n                isOrgUnitGroup: false,\n                cgrAttrName: \"createDate\",\n                externalId: null,\n                dhis2Id: \"openingDate\",\n                dhis2AttrName: \"openingDate\"\n            }\n            /*\n            {\n              \"attributeMappingStrategy\": DEFAULT_MAPPING_STRATEGY,\n              \"isOrgUnitGroup\": false,\n              \"cgrAttrName\": \"createDate\",\n              \"externalId\": null,\n              \"dhis2Id\": \"created\",\n              \"dhis2AttrName\": \"created\"\n            },\n            {\n              \"attributeMappingStrategy\": DEFAULT_MAPPING_STRATEGY,\n              \"isOrgUnitGroup\": false,\n              \"cgrAttrName\": \"lastUpdateDate\",\n              \"externalId\": null,\n              \"dhis2Id\": \"lastUpdated\",\n              \"dhis2AttrName\": \"lastUpdated\"\n            },\n            */\n        ];\n    }\n\n    clearMappingData(): void {\n        this.types = [];\n        this.levelRows = [];\n        this.config.configuration[\"levels\"] = [];\n\n        if (this.cSystem != null && this.cSystem.type === \"DHIS2ExternalSystem\") {\n            this.service.getConfigForES(this.config.system, this.config.hierarchy).then(esConfig => {\n                this.types = esConfig.types;\n                this.orgUnitGroups = esConfig.orgUnitGroups;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            let lvl = {\n                type: null,\n                geoObjectType: null,\n                level: 0,\n                mappings: [],\n                orgUnitGroupId: null\n            };\n            this.config.configuration[\"levels\"] = [lvl];\n            this.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n        }\n    }\n\n    onSelectLevelType(levelRow: LevelRow): void {\n        if (levelRow.level.type === \"RELATIONSHIPS\") {\n            levelRow.attrCfg.mappings = [];\n            levelRow.level.mappings = [];\n\n            let editorIndex = this.getEditorIndex();\n            if (editorIndex !== -1) {\n                this.levelRows.splice(editorIndex, 1);\n            }\n        } else {\n            if (levelRow.attrCfg.mappings.length === 0) {\n                levelRow.attrCfg.mappings = this.buildDefaultMappings();\n                levelRow.level.mappings = levelRow.attrCfg.mappings;\n\n                let len = levelRow.level.mappings.length;\n                for (let i = 0; i < len; ++i) {\n                    let mapping = levelRow.level.mappings[i];\n\n                    levelRow.attrCfg.attrConfigInfos.forEach((info) => {\n                        if (info.cgrAttr.name === mapping.cgrAttrName) {\n                            mapping.info = info;\n                        }\n                    });\n                }\n            }\n        }\n    }\n\n    onOrganizationSelected(): void {\n        let index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n        if (index !== -1) {\n            this.cOrg = this.organizations[index];\n        } else {\n            this.cOrg = null;\n            this.cSystem = null;\n        }\n\n        this.clearMappingData();\n    }\n\n    deleteMapping(levelRow: LevelRow, index: number): void {\n        levelRow.attrCfg.mappings.splice(index, 1);\n    }\n\n    addNewMapping(levelRow: LevelRow): void {\n        levelRow.attrCfg.mappings.push({\n            attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n            cgrAttrName: null,\n            dhis2AttrName: null,\n            externalId: null,\n            terms: []\n        });\n    }\n\n    onChangeExternalSystem(): void {\n        let index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n        if (index !== -1) {\n            this.cSystem = this.cOrg.systems[index];\n        } else {\n            this.cSystem = null;\n        }\n\n        this.clearMappingData();\n    }\n\n    onChangeHierarchy(): void {\n        this.clearMappingData();\n    }\n\n    addLevel(): void {\n        let lvl = {\n            type: null,\n            geoObjectType: null,\n            level: this.config.configuration.levels.length,\n            mappings: [],\n            orgUnitGroupId: null\n        };\n        let len = this.config.configuration[\"levels\"].push(lvl);\n        this.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n    }\n\n    removeLevel(levelNum: number, levelRowIndex: number): void {\n        if (levelNum < this.config.configuration[\"levels\"].length) {\n            let editorIndex = this.getEditorIndex();\n            if (editorIndex === levelRowIndex + 1) {\n                this.levelRows.splice(editorIndex, 1);\n            }\n\n            this.levelRows.splice(levelRowIndex, 1);\n\n            let newLevelNum = 0;\n            for (let i = 0; i < this.levelRows.length; ++i) {\n                let levelRow: LevelRow = this.levelRows[i];\n\n                levelRow.levelNum = newLevelNum;\n\n                if (!levelRow.isAttributeEditor) {\n                    newLevelNum = newLevelNum + 1;\n                }\n            }\n\n            this.config.configuration[\"levels\"].splice(levelNum, 1);\n        }\n    }\n\n    getEditorIndex(): number {\n        for (let i = 0; i < this.levelRows.length; ++i) {\n            let levelRow = this.levelRows[i];\n\n            if (levelRow.isAttributeEditor) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    configureAttributes(levelRow: any): void {\n        let editorIndex = this.getEditorIndex();\n\n        if (editorIndex !== -1) {\n            this.levelRows.splice(editorIndex, 1);\n\n            if (editorIndex === levelRow.levelNum + 1) {\n                return;\n            }\n        }\n\n        this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n    }\n\n    getTermOptions(info: AttributeConfigInfo, dhis2Id: string) {\n        for (let i = 0; i < info.dhis2Attrs.length; ++i) {\n            let dhis2Attr = info.dhis2Attrs[i];\n\n            if (dhis2Attr.dhis2Id === dhis2Id) {\n                return dhis2Attr.options;\n            }\n        }\n    }\n\n    onChangeDHIS2Attr(mapping: DHIS2AttributeMapping) {\n        if (mapping.dhis2Id == null || mapping.dhis2Id === \"\") {\n            if (mapping.terms != null) {\n                mapping.terms = {};\n            }\n\n            mapping.dhis2AttrName = null;\n\n            return;\n        }\n\n        mapping.terms = {};\n\n        let len = mapping.info.dhis2Attrs.length;\n        for (let i = 0; i < len; ++i) {\n            if (mapping.info.dhis2Attrs[i].dhis2Id === mapping.dhis2Id) {\n                if (mapping.info.dhis2Attrs[i].dhis2Id !== mapping.info.dhis2Attrs[i].name) {\n                    mapping.externalId = mapping.info.dhis2Attrs[i].dhis2Id;\n                } else {\n                    mapping.externalId = null;\n                }\n                mapping.dhis2AttrName = mapping.info.dhis2Attrs[i].name;\n            }\n        }\n    }\n\n    onSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n        if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n            let levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n            levelRow.attrCfg = null;\n            levelRow.level.mappings = [];\n\n            let editorIndex = this.getEditorIndex();\n\n            if (editorIndex !== -1 && editorIndex === levelRowIndex + 1) {\n                this.levelRows.splice(editorIndex, 1);\n            }\n\n            return;\n        }\n\n        let attrCfg = this.levelRows[levelRowIndex].attrCfg;\n        if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n            // Resume an editing session on attributes that we fetched previously\n\n            let editorIndex = this.getEditorIndex();\n\n            if (editorIndex !== -1 && editorIndex !== levelRowIndex + 1) {\n                this.levelRows.splice(editorIndex, 1);\n\n                if (editorIndex < levelRowIndex) {\n                    levelRowIndex = levelRowIndex - 1;\n                }\n            }\n\n            this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n        } else {\n            this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((infos: AttributeConfigInfo[]) => {\n                let editorIndex = this.getEditorIndex();\n                let levelRow: LevelRow = this.levelRows[levelRowIndex];\n                let level = levelRow.level;\n\n                if (level.mappings.length === 0 || isDifferentGot) {\n                    level.mappings = this.buildDefaultMappings();\n                }\n\n                let len = level.mappings.length;\n                for (let i = 0; i < len; ++i) {\n                    let mapping = level.mappings[i];\n\n                    infos.forEach((info) => {\n                        if (info.cgrAttr.name === mapping.cgrAttrName) {\n                            mapping.info = info;\n                        }\n                    });\n                }\n\n                levelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, mappings: level.mappings, attrConfigInfos: infos };\n\n                if (editorIndex !== -1 && (editorIndex === levelRowIndex + 1 || infos.length > 0)) {\n                    this.levelRows.splice(editorIndex, 1);\n\n                    if (editorIndex < levelRowIndex) {\n                        levelRowIndex = levelRowIndex - 1;\n                    }\n                }\n\n                if (!isDifferentGot) {\n                    this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: levelRow.attrCfg, level: levelRow.level, levelNum: levelRow.levelNum });\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    mapCgrAttr(info: AttributeConfigInfo, mapping: DHIS2AttributeMapping) {\n        if (info == null) {\n            mapping.cgrAttrName = null;\n            mapping.info = null;\n            mapping.dhis2AttrName = null;\n            mapping.externalId = null;\n            mapping.terms = null;\n            mapping.isOrgUnitGroup = null;\n            return;\n        }\n\n        mapping.cgrAttrName = info.cgrAttr.name;\n        mapping.info = info;\n        mapping.dhis2AttrName = null;\n        mapping.externalId = null;\n        mapping.terms = {};\n        mapping.isOrgUnitGroup = false;\n        mapping.attributeMappingStrategy = info.attributeMappingStrategies[0];\n    }\n\n    onChangeTargetType(mapping: DHIS2AttributeMapping): void {\n        mapping.externalId = null;\n\n        for (const key in mapping.terms) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (mapping.terms.hasOwnProperty(key)) {\n                mapping.terms[key] = null;\n            }\n        }\n    }\n\n    onSubmit(): void {\n        /*\n        let levelIndex = 0;\n        let len = this.levelRows.length;\n        for (let i = 0; i < len; ++i)\n        {\n          let levelRow: LevelRow = this.levelRows[i];\n\n          if (levelRow.isAttributeEditor)\n          {\n            continue;\n          }\n          else if (levelRow.attrCfg == null)\n          {\n            levelIndex++;\n            continue;\n          }\n\n          let mappings = this.config.configuration.levels[levelIndex].mappings;\n          let mappingsLen = levelRow.attrCfg.mappings.length;\n          for (let j = 0; j < mappingsLen; ++j)\n          {\n            let mapping = JSON.parse(JSON.stringify(levelRow.attrCfg.mappings[j]));\n            delete mapping.info;\n            mappings.push(mapping);\n          }\n\n          levelIndex++;\n        }\n        */\n\n        this.service.apply(this.config).then(cfg => {\n            this.onSuccess.next(cfg);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancel(): void {\n        if (this.config.oid != null) {\n            this.service.unlock(this.config.oid).then(() => {\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef.hide();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.hierarchy\" name=\"hierarchy\" (change)='onChangeHierarchy()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"config.hierarchy != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"row-holder\" *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.units\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n              <thead>\n                <tr>\n                  <th style=\"width:3%\">\n                    <localize key=\"settings.external.synchronization.level.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                  </th>\n                  <th style=\"width:25%\">\n                    <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                  </th>\n                  <th style=\"width:17%\">\n                    <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                  </th>\n                  <th style=\"width:25%; text-align: center;\">\n                    <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                  <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" (change)=\"onSelectLevelType(levelRow)\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                      <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                      <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                    </select>\n                  </td>\n                  <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                      <option></option>\n                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n\t\t\t\t\t\t\t\t\t  <div>\n\t\t\t\t\t\t\t\t\t    <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n\t\t\t\t\t\t\t\t\t      <i class=\"fa fa-trash-o ico-remove\"></i>\n\t\t\t\t\t\t\t\t\t      <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n\t\t\t\t\t\t\t\t\t    </a> \n\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t  <div>\n                      <a *ngIf=\"levelRow.level.geoObjectType && (levelRow.level.type === 'ORG_UNITS' || levelRow.level.type === 'ALL')\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                        <i class=\"fa fa-edit\"></i>\n                        <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.attributes.editButton\"></localize></label>\n                      </a> \n                    </div>\n\t\t\t\t\t\t\t\t\t</td>\n                  <td colspan=\"5\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                    <h4><localize key=\"sync.attr.attributes.title\"></localize></h4>\n\t                  <table class=\"table table-bordered table-striped\" style=\"margin-left:80px; width: calc(100% - 80px)\">\n\n\t                    <colgroup>\n\t\t\t\t\t\t\t\t\t        <col width=\"5%\">\n\t\t\t\t\t\t\t\t\t        <col width=\"95%\">\n\t\t\t\t\t\t\t\t\t    </colgroup>\n\t                    <tbody>\n\t                      <tr *ngFor=\"let mapping of levelRow.attrCfg.mappings; let mappingIndex = index;\">\n\t                        <td colspan=\"2\" class=\"row-holder\">\n\t                          <table style=\"width:80%; margin-top:15px; margin-bottom: 10px;\">\n\t                            <thead>\n\t                              <tr>\n\t                                <th style=\"width:5%\"></th>\n\t                                <th style=\"width:23%\">\n\t                                  <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n\t                                </th>\n\t                                <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\">\n                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n\t                              </tr>\n\t                            </thead>\n\t                            <tbody>\n\t                              <tr>\n\t                                <td style=\"width:5%\">\n\t                                  <i (click)=\"deleteMapping(levelRow, mappingIndex)\" class=\"fa fa-times\"></i>\n\t                                </td>\n\t                                <td style=\"width:23%\">\n\t                                  <select style=\"width:95%\" [(ngModel)]=\"mapping.cgrAttrName\" (change)=\"mapCgrAttr($event.target.selectedIndex == 0 ? null : levelRow.attrCfg.attrConfigInfos[$event.target.selectedIndex-1], mapping)\" [name]=\"'sourceAttrSelect' + i + '-' + mappingIndex + (mapping.cgrAttrName ? mapping.cgrAttrName : '')\">\n\t\t\t\t\t                            <option [ngValue]=\"null\"></option>\n\t\t\t\t\t                            <option *ngFor=\"let info of levelRow.attrCfg.attrConfigInfos\" [ngValue]=\"info.cgrAttr.name\">\n\t\t\t\t\t                              <label style=\"color:#999;\">{{info.cgrAttr.label}}</label>\n\t\t\t\t\t                            </option>\n\t\t\t\t\t                          </select>\n\t                                </td>\n\t                                <td style=\"width:23%\">\n\t                                  <label *ngIf=\"mapping.info\" style=\"color:#999;\">{{mapping.info.cgrAttr.typeLabel}}</label>\n\t                                </td>\n\t                                <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\" style=\"margin-right:20px; width:23%\">\n\t                                  <select style=\"width:95%\" *ngIf=\"mapping.info.cgrAttr.type === 'term'\" [(ngModel)]=\"mapping.isOrgUnitGroup\" (change)=\"onChangeTargetType(mapping)\" [name]=\"'isOrgUnitGroup' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"false\"><localize key=\"sync.attr.targetTypeOptionSet\"></localize></option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n\t                                </td>\n\t                                <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type !== 'term' && mapping.info.cgrAttr.name\" style=\"float:right; margin-right:20px; width:23%\">\n\t                                  <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n\t                                </td>\n\t                                <td style=\"width:23%\" *ngIf=\"mapping.info\">\n\t                                  <select *ngIf=\"mapping.info.dhis2Attrs.length > 0 && !mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.dhis2Id\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeDHIS2Attr(mapping)\">\n\t                                    <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                    <option [ngValue]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of mapping.info.dhis2Attrs\">\n\t                                      {{dhis2Attr.name}}\n\t                                    </option>\n\t                                  </select>\n\t                                  <label *ngIf=\"mapping.info.dhis2Attrs.length == 0 && !mapping.isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n\t                                </td>\n\t                              </tr>\n\t                            </tbody>\n\t                          </table>\n\t                          <div *ngIf=\"mapping.info && ((mapping.externalId != null && mapping.externalId.length > 0) || mapping.isOrgUnitGroup)\">\n\t\t                          <table *ngFor=\"let term of mapping.info.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n\t                              <thead>\n\t                                <tr>\n\t                                  <th style=\"width:25%\">\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <!-- To -->\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label>\n\t                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n\t                                      <localize *ngIf=\"mapping.isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n\t                                    </label>\n\t                                  </th>\n\t                                </tr>\n\t                              </thead>\n\t                              <tbody>\n\t                                <tr>\n\t                                  <td></td>\n\t                                  <td><label style=\"color:#999;\">{{term.label}}</label></td>\n\t                                  <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n\t                                  <td>\n\t                                    <select *ngIf=\"!mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                      <option *ngFor=\"let option of getTermOptions(mapping.info, mapping.externalId)\" [value]=\"option.code\">\n\t                                        {{option.name}}\n\t                                      </option>\n\t                                    </select>\n\t                                    <select *ngIf=\"mapping.isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t\t\t\t\t\t\t                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t\t\t\t\t\t\t\t\t                      <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n\t\t\t\t\t\t\t\t\t                    </select>\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n                            </div>\n\t                        </td>\n\t                      </tr>\n\t                      <tr>\n                          <td class=\"button-column\">\n                            <a class=\"fa fa-plus\" (click)=\"addNewMapping(levelRow)\" [title]=\"'sync.attr.attributes.add.tooltip' | localize\"></a>\n                          </td>\n                        </tr>\n\t                    </tbody>\n\t                  </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          \n          </div>\n      </div>\n\n\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { SynchronizationConfig, ExportScheduledJob } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component/error-handler/error-handler\";\n\ndeclare let acp: any;\n\n@Component({\n    selector: \"synchronization-config\",\n    templateUrl: \"./synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\n    message: string = null;\n\n    config: SynchronizationConfig = null;\n\n    page: PageResult<ExportScheduledJob> = {\n        pageSize: 10,\n        pageNumber: 1,\n        count: 1,\n        resultSet: []\n    };\n\n    notifier: WebSocketSubject<{ type: string, content: any }>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.get(oid).then(config => {\n            this.config = config;\n            this.onPageChange(1);\n        });\n\n        let baseUrl = \"wss://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + acp;\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.notifier.subscribe(message => {\n            if (message.type === \"DATA_EXPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.notifier != null) {\n            this.notifier.complete();\n        }\n    }\n\n    onRun(): void {\n        this.message = null;\n\n        this.service.run(this.config.oid).then(() => {\n            // Refresh the page\n            this.onPageChange(this.page.pageNumber);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: number): void {\n        if (this.config != null) {\n            this.message = null;\n\n            this.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n                this.formatStepConfig(response);\n                this.page = response;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    formatJobStatus(job: ExportScheduledJob): string {\n        if (job.status === \"FEEDBACK\") {\n            return this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.lService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.lService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.lService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.lService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.lService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.lService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PageResult<ExportScheduledJob>): void {\n        page.resultSet.forEach((job: ExportScheduledJob) => {\n            job.stepConfig = {\n                steps: [\n                    {\n                        label: this.lService.decode(\"synchronization.step.Queued\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.lService.decode(\"synchronization.step.Connecting\"),\n                        status: job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n                    },\n                    {\n                        label: this.lService.decode(\"synchronization.step.DatabaseExport\"),\n                        status: job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ExportScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label> \n              <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i> \n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <form #myForm=\"ngForm\">\n                <div class=\"form-group text-right\" style=\"margin: 0;\">\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n                <h4>\n                    <localize key=\"synchronization.config.units\"></localize>\n                </h4>\n                <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>\n                          <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th>\n                          <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                        </th>\n                        <th style=\"text-align: right;\">\n                          <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\" >\n                        <td style=\"vertical-align: middle;\">\n                          <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                        </td>\n                        <td style=\"\">\n                          {{level.geoObjectType}}\n                        </td>\n                        <td style=\"text-align: right;\">\n                          <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                          <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                          <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                        </td>\n                      </tr>\n                    </tbody>\n                </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\" style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\" [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\" [routerLink]=\"'/registry/sync/details/' + job.historyId\" routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                           </div>\n                         </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { AuthService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./details.component.html\",\n    styleUrls: [\"./details.css\"]\n})\nexport class SyncDetailsComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    historyId: string = \"\";\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(public service: RegistryService, private route: ActivatedRoute, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n            this.job = response;\n\n            this.page = this.job.exportErrors;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Map, LngLatBoundsLike, NavigationControl, MapboxEvent, AttributionControl, IControl } from \"mapbox-gl\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { AllGeoJSON } from \"@turf/helpers\";\nimport bbox from \"@turf/bbox\";\n\nimport { Subject } from \"rxjs\";\n\nimport { GeoObject, ContextLayer, GeoObjectType, ValueOverTime } from \"@registry/model/registry\";\nimport { ModalState } from \"@registry/model/location-manager\";\n\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ErrorModalComponent, ConfirmModalComponent, SuccessModalComponent } from \"@shared/component\";\n\nimport { LocalizationService } from \"@shared/service\";\n\ndeclare let acp: string;\n\nconst DEFAULT_COLOR = \"#80cdc1\";\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"location-manager\",\n    templateUrl: \"./location-manager.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE: ModalState = {\n        SEARCH: 0,\n        VIEW: 1\n    }\n\n    urlSubscriber: any;\n\n    editSessionEnabled: boolean = false;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Root nodes of the tree\n     */\n    data: GeoObject[] = [];\n\n    /*\n     *  Search Text\n     */\n    text: string = \"\";\n\n    /*\n     *  MODE\n     */\n    mode: number = this.MODE.SEARCH;\n\n    /*\n     * Date of data for explorer\n     */\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    /*\n     * Currently selected geo object\n     */\n    current: GeoObject;\n\n    /*\n     * Currently selected geo object type\n     */\n    type: GeoObjectType;\n\n    /*\n     * Flag denoting if an object is currently being editted\n     */\n    isEdit: boolean = false;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    /*\n     * Flag denoting the draw control is active\n     */\n    active: boolean = false;\n\n    public displayDateRequiredError: boolean = false;\n\n    vectorLayers: string[] = [];\n\n    backReference: string;\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        // {\n        //   name: 'Streets',\n        //   label: 'Streets',\n        //   id: 'streets-v9',\n        //   sprite: 'mapbox://sprites/mapbox/basic-v9',\n        //   url: 'mapbox://mapbox.basic-v9'\n        // }\n    ];\n\n    hoverFeatureId: string;\n\n    preventSingleClick: boolean = false;\n\n    hideSearchOptions: boolean = false;\n\n    /*\n       * Timer for determining double click vs single click\n       */\n    timer: any;\n\n    /*\n       * debounced subject for map extent change events\n       */\n    subject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n    vot: ValueOverTime = null;\n\n    @ViewChild(\"simpleEditControl\") simpleEditControl: IControl;\n\n    editingControl: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private mapService: MapService, private geomService: GeometryService, public service: RegistryService,\n        private route: ActivatedRoute, private router: Router, private lService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.urlSubscriber = this.route.params.subscribe(params => {\n            let geoObjectUid = params[\"geoobjectuid\"];\n            let geoObjectTypeCode = params[\"geoobjecttypecode\"];\n            this.hideSearchOptions = params[\"hideSearchOptions\"];\n            this.backReference = this.route.snapshot ? this.route.snapshot.params[\"backReference\"] : null;\n\n            this.dateStr = params[\"datestr\"];\n            this.handleDateChange();\n\n            if (geoObjectUid && geoObjectTypeCode && this.dateStr) {\n                this.service.getGeoObject(geoObjectUid, geoObjectTypeCode).then(geoObj => {\n                    this.setData([geoObj]);\n                    this.select(geoObj, null);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n        this.urlSubscriber.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n        const layer = this.baseLayers[0];\n\n        this.map = new Map({\n            container: \"map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    mapbox: {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox\"\n                        // \"source-layer\": \"mapbox_satellite_full\"\n                    }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            center: [-78.880453, 42.897852]\n        });\n\n        this.map.on(\"load\", () => {\n            this.initMap();\n        });\n\n        if (this.simpleEditControl) {\n            this.map.addControl(this.simpleEditControl);\n        }\n    }\n\n    changeMode(mode: number): void {\n        this.mode = mode;\n\n        if (this.mode === this.MODE.SEARCH) {\n            this.isEdit = false;\n        }\n\n        this.geomService.destroy(false);\n\n        this.vot = null;\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n    }\n\n    handleDateChange(): void {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n            this.displayDateRequiredError = false;\n        }\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl({ visualizePitch: true }));\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n\n        this.map.on(\"click\", \"children-points\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"click\", \"children-polygon\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        // Set map data on page load with URL params (single Geo-Object)\n        if (this.data) {\n            let fc = { type: \"FeatureCollection\", features: this.data };\n            (<any> this.map.getSource(\"children\")).setData(fc);\n\n            this.zoomToFeature(this.data[0], null);\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    showOriginalGeometry() {\n        if (this.current) {\n            this.addVectorLayer(this.current.properties.uid);\n        }\n    }\n\n    hideOriginalGeometry() {\n        if (this.current) {\n            this.removeVectorLayer(this.current.properties.uid);\n        }\n    }\n\n    handleMapClickEvent(event: any): void {\n        if (!this.isEdit && event.features != null && event.features.length > 0) {\n            const feature = event.features[0];\n\n            if (feature.properties.code != null && (this.current == null || this.current.properties.code !== feature.properties.code)) {\n                this.select(feature, null);\n            }\n        }\n    }\n\n    onPanelCancel(): void {\n        if (this.backReference != null && this.backReference.length >= 2) {\n            let ref = this.backReference.substring(0, 2);\n\n            if (ref === \"CR\") {\n                this.router.navigate([\"/registry/change-requests\"]);\n            }\n        } else {\n            this.changeMode(this.MODE.SEARCH);\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        if (applyInfo.isChangeRequest) {\n            if (this.backReference != null && this.backReference.length >= 2 && this.backReference.substring(0, 2) === \"CR\") {\n                this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n            } else {\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n                this.bsModalRef.content.cancelText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n                this.bsModalRef.content.onCancel.subscribe(() => {\n                    this.changeMode(this.MODE.SEARCH);\n                });\n            }\n        } else {\n            this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n            this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n            this.bsModalRef.content.onConfirm.subscribe(() => {\n                this.onPanelCancel();\n            });\n        }\n    }\n\n    addLayers(): void {\n        const source = \"children\";\n\n        this.map.addSource(source, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        // Polygon layer\n        this.map.addLayer({\n            id: source + \"-polygon\",\n            type: \"fill\",\n            source: source,\n            layout: {},\n            paint: {\n                \"fill-color\": DEFAULT_COLOR,\n                \"fill-opacity\": 0.8,\n                \"fill-outline-color\": \"black\"\n            },\n            filter: [\"all\",\n                [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n            ]\n        });\n\n        // Point layer\n        this.map.addLayer({\n            id: source + \"-points\",\n            type: \"circle\",\n            source: source,\n            paint: {\n                \"circle-radius\": 10,\n                \"circle-color\": DEFAULT_COLOR,\n                \"circle-stroke-width\": 2,\n                \"circle-stroke-color\": \"#FFFFFF\"\n            },\n            filter: [\"all\",\n                [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n            ]\n        });\n\n        //    // Selected layers\n        //    this.map.addLayer({\n        //      \"id\": source + \"-points-selected\",\n        //      \"type\": \"circle\",\n        //      \"source\": source,\n        //      \"paint\": {\n        //        \"circle-radius\": 10,\n        //        \"circle-color\": DEFAULT_COLOR,\n        //        \"circle-stroke-width\": 2,\n        //        \"circle-stroke-color\": '#FFFFFF'\n        //      },\n        //      filter: ['all',\n        //        [\"==\", ['get', 'code'], this.current != null ? this.current.properties.code : ''],\n        //        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n        //      ]\n        //    });\n        //\n        //    this.map.addLayer({\n        //      'id': source + '-polygon-selected',\n        //      'type': 'fill',\n        //      'source': source,\n        //      'layout': {},\n        //      'paint': {\n        //        'fill-color': DEFAULT_COLOR,\n        //        'fill-opacity': 0.8,\n        //        'fill-outline-color': 'black'\n        //      },\n        //      filter: ['all',\n        //        [\"==\", ['get', 'code'], this.current != null ? this.current.properties.code : ''],\n        //        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n        //      ]\n        //    });\n\n        // Label layer\n        this.map.addLayer({\n            id: source + \"-label\",\n            source: source,\n            type: \"symbol\",\n            paint: {\n                \"text-color\": \"black\",\n                \"text-halo-color\": \"#fff\",\n                \"text-halo-width\": 2\n            },\n            layout: {\n                \"text-field\": [\"get\", \"localizedValue\", [\"get\", \"displayLabel\"]],\n                \"text-font\": [\"NotoSansRegular\"],\n                \"text-offset\": [0, 0.6],\n                \"text-anchor\": \"top\",\n                \"text-size\": 12\n            }\n        });\n\n        this.vectorLayers.forEach(cLayer => {\n            this.addVectorLayer(cLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        // this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n        this.baseLayers.forEach(baseLayer => {\n            baseLayer.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.map.setStyle({\n            version: 8,\n            name: layer.name,\n            metadata: {\n                \"mapbox:autocomposite\": true\n            },\n            sources: {\n                mapbox: {\n                    type: \"raster\",\n                    url: layer.url,\n                    tileSize: 256\n                }\n            },\n            sprite: layer.sprite,\n            glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n            layers: [\n                {\n                    id: layer.id,\n                    type: \"raster\",\n                    source: \"mapbox\"\n                    // \"source-layer\": \"mapbox_satellite_full\"\n                }\n            ]\n        });\n    }\n\n    search(): void {\n        this.geomService.destroy(false);\n        this.mapService.search(this.text, this.dateStr).then(data => {\n            (<any> this.map.getSource(\"children\")).setData(data);\n\n            this.setData(data.features);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    zoomToFeature(node: GeoObject, event: MouseEvent): void {\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.preventSingleClick = false;\n        const delay = 200;\n\n        this.timer = setTimeout(() => {\n            if (!this.preventSingleClick) {\n                if (node && node.geometry != null) {\n                    const bounds = bbox(node as AllGeoJSON) as LngLatBoundsLike;\n\n                    let padding = 50;\n                    let maxZoom = 20;\n\n                    // Zoom level was requested to be reduced when displaying point types as per #420\n                    if (node.geometry.type === \"Point\" || node.geometry.type === \"MultiPoint\") {\n                        padding = 100;\n                        maxZoom = 12;\n                    }\n\n                    this.map.fitBounds(bounds, { padding: padding, animate: true, maxZoom: maxZoom });\n                }\n            }\n        }, delay);\n    }\n\n    select(node: GeoObject, event: MouseEvent): void {\n        /*\n        if (this.forDate == null) {\n            this.displayDateRequiredError = true;\n\n            return;\n        }\n        */\n\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.service.getGeoObjectTypes([node.properties.type], null).then(types => {\n            this.type = types[0];\n            this.current = node;\n            this.mode = this.MODE.VIEW;\n\n            this.geomService.initialize(this.map, this.type.geometryType, !this.isEdit);\n            this.geomService.zoomToLayersExtent();\n\n            //      const code = this.current.properties.code;\n            //\n            //      // Update the filter properties\n            //      this.map.setFilter('children-points-selected', ['all',\n            //        [\"==\", ['get', 'code'], code != null ? code : ''],\n            //        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n            //      ]);\n            //\n            //      this.map.setFilter('children-polygon-selected', ['all',\n            //        [\"==\", ['get', 'code'], code != null ? code : ''],\n            //        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n            //      ]);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setData(data: GeoObject[]): void {\n        this.data = data;\n    }\n\n    onContextLayerChange(layer: ContextLayer): void {\n        if (layer.active) {\n            this.addVectorLayer(layer.oid);\n        } else {\n            this.removeVectorLayer(layer.oid);\n        }\n    }\n\n    removeVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index !== -1) {\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.vectorLayers.splice(index, 1);\n        }\n    }\n\n    addVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index === -1) {\n            const prevLayer = \"children-polygon\";\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + acp + \"/master-list/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))]\n            });\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": SELECTED_COLOR,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": SELECTED_COLOR,\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n\n            this.vectorLayers.push(source);\n        }\n    }\n\n// TODO : Not sure what the point of this code was\n/*\n    refreshInputsFromDraw(): void {\n        let geom = this.getDrawGeometry();\n        let point = geom.coordinates[0];\n\n        this.coordinate.latitude = point[1];\n        this.coordinate.longitude = point[0];\n    }\n\n    refreshDrawFromInput(): void {\n\n        if( this.coordinate.longitude != null && this.coordinate.latitude != null ) {\n\n            const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n            const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n            if( !isLatitude(this.coordinate.latitude) || !isLongitude(this.coordinate.longitude)){\n                // outside EPSG bounds\n            }\n\n            this.editingControl.set({\n              type: 'FeatureCollection',\n              features: [{\n                id: this.current.properties.uid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ this.coordinate.longitude, this.coordinate.latitude ] }\n              }]\n            });\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.current.properties.uid } );\n\n            this.editSessionEnabled = true;\n        }\n    }\n    */\n\n    error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div id=\"navigator-left-sidebar\" class=\"col-md-5 lw-inner-col\" style=\"height: calc(100vh - 145px);overflow-y: auto;\">\n        <div>\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n  \n              <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"location-management-widget-section\">\n                    <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\" ng-reflect-key=\"changeOverTime.forDate\"></localize></span>\n<!--                     <input style=\"width: 100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" [disabled]=\"mode !== MODE.SEARCH\"/> -->\n                    <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"mode !== MODE.SEARCH && !hideSearchOptions\" \n                        [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [classNames]=\"displayDateRequiredError ? 'date-required-message' : ''\" [placement]=\"'right'\" style=\"display:inline-grid;\"></date-field>\n                    <div *ngIf=\"displayDateRequiredError\" class=\"error-message\">\n                      <localize key=\"geoobject.editor.forDate.requiredErrorMessage\"></localize>\n                    </div>\n                  </div>\n                </div>\n              </div>\n  \n              <!-- Search bar -->\n              <div *ngIf=\"!hideSearchOptions\" class=\"row\">\n                <div class=\"col-md-12\">\n                  <div class=\"location-management-widget-section\">\n                    <div class=\"input-group\">\n                      <input type=\"text\" class=\"form-control\" (keyup.enter)=\"search()\" [(ngModel)]=\"text\" name=\"text\" [disabled]=\"mode !== MODE.SEARCH\">\n                      <span class=\"input-group-btn\">\n                        <button class=\"btn btn-primary\" type=\"button\" (click)=\"search()\" [disabled]=\"mode !== MODE.SEARCH\">\n                          <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span> \n<!--                           <localize key=\"explorer.search.button.message\"></localize> -->\n                        </button>\n                      </span>\n                    </div>\n                    <div *ngIf=\"mode === MODE.VIEW && current != null\" style=\"padding: 20px 0;\">\n                      <i class=\"fa fa-arrow-left clickable\" aria-hidden=\"true\" (click)=\"changeMode(this.MODE.SEARCH)\"><localize key=\"explorer.back.to.results\"></localize></i>              \n                    </div>\n                    \n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n  \n          <div class=\"row\"  *ngIf=\"mode === MODE.SEARCH\">\n            <div class=\"col-md-12\">\n              <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n                    <div class=\"list-group\">\n  \n                      <div *ngFor=\"let node of data; let i = index\" class=\"list-group-item\">\n                        <!-- Single column card -->\n                        <div class=\"card card-default\" (click)=\"select(node, $event)\">\n                          <div class=\"card-body\">\n                            <i class=\"fa fa-map-marker clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\" (click)=\"zoomToFeature(node, $event)\" [title]=\"'explorer.zoom.label' | localize\"></i>\n                            <h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"View Geo-Object details\">{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n                          </div>\n                        </div>\n                      </div>\n  \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>    \n        <div *ngIf=\"mode === MODE.VIEW && current != null\" class=\"row\">\n          <div class=\"col-md-12\">\n<!--             <div style=\"padding: 20px 0;\"> -->\n<!--               <i class=\"fa fa-arrow-left clickable\" aria-hidden=\"true\" (click)=\"changeMode(this.MODE.SEARCH)\"><localize key=\"explorer.back.to.results\"></localize></i>               -->\n<!--             </div> -->\n            <feature-panel\n              [type]=\"type\"\n              [code]=\"current.properties.code\"              \n              [forDate]=\"forDate\"\n              [readOnly]=\"!current.properties.writable\"\n              (featureChange)=\"search()\"\n              (modeChange)=\"onModeChange($event)\"\n              (panelCancel)=\"onPanelCancel()\"\n              (panelSubmit)=\"onPanelSubmit($event)\"\n            ></feature-panel>\n          </div>\n        </div>            \n      </div>\n\n      <div class=\"col-md-7\" id=\"site-explorer-map\">\n        <div class=\"row\">\n          \n          <article class=\"base-layer-panel\">\n            <layer-panel (layerChange)=\"onContextLayerChange($event)\"></layer-panel>\n          </article>\n\n          <div id=\"map\" class=\"map-view-port\"></div>\n<!--           <simple-edit-control [visible]=\"editingControl != null\" [editSessionEnabled]=\"editSessionEnabled\" [save]=\"true\" (editEmitter)=\"onMapSave()\" #simpleEditControl></simple-edit-control> -->\n          \n          <div *ngIf=\"editingControl && (type.geometryType === 'POINT' || type.geometryType === 'MULTIPOINT')\" style=\"position:absolute;top:185px;right:10px;color:white;\">\n            \n            <div >\n                <div><label><localize key=\"geoobject.editor.geometry.latitude.label\"></localize></label></div>\n                <div>\n                <div class=\"text-left\">\n                  <input name=\"latitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.latitude\" (change)=\"refreshDrawFromInput()\" required />\n                </div>\n              </div>\n            </div>\n            <div >\n                <div><label><localize key=\"geoobject.editor.geometry.longitude.label\"></localize></label></div>\n                <div>\n                <div class=\"text-left\">\n                  <input name=\"longitude\" type=\"number\" class=\"form-control\" [(ngModel)]=\"coordinate.longitude\" (change)=\"refreshDrawFromInput()\" required />\n                </div>\n              </div>\n            </div>\n            \n          </div>\n          \n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nimport { ContextLayerGroup } from \"@registry/model/registry\";\n\n\n@Component({\n    selector: \"context-layer-modal\",\n    templateUrl: \"./context-layer-modal.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class ContextLayerModalComponent {\n\n    contextLayerGroups: ContextLayerGroup[];\n\n\n    /*\n     * Called on confirm\n     */\n    public onSubmit: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onSubmit = new Subject();\n    }\n\n    groupHasContextLayers(group:string): boolean {\n        let hasCLayers = false;\n        this.contextLayerGroups.forEach(cLayerGroup => {\n            if (cLayerGroup.oid === group && cLayerGroup.contextLayers.length > 0) {\n                hasCLayers = true;\n            }\n        });\n\n        return hasCLayers;\n    }\n\n    confirm(): void {\n        this.onSubmit.next(this.contextLayerGroups);\n        this.bsModalRef.hide();\n    }\n\n}\n","<div class=\"modal-body\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"explorer.add.context.layers.modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"list-group\">\n                        <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                            <div *ngIf=\"groupHasContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n                                <h4>{{ cLayerGroup.displayLabel }}</h4>\n                                <div class=\"list-group\">\n                                    <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                                        <input type=\"checkbox\" [checked]=\"cLayer.enabled\" (change)=\"cLayer.enabled = !cLayer.enabled\" style=\"margin-left: 10px;\"> {{ cLayer.displayLabel }}\n                                        \n                                        <!-- <boolean-field [(value)]=\"cLayer.enabled\" [label]=\"cLayer.displayLabel\"></boolean-field> -->\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, OnDestroy, AfterViewInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Map, NavigationControl, AttributionControl, LngLatBounds } from \"mapbox-gl\";\n\nimport { ContextLayer, GeoObjectType, ValueOverTime } from \"@registry/model/registry\";\n// MapService IS REQUIRED to set the mapbox access token for the map\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler, GenericModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\nconst DEFAULT_COLOR = \"#80cdc1\";\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"dataset-location-manager\",\n    templateUrl: \"./dataset-location-manager.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class DatasetLocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\"\n    }\n\n    toolsIconHover: boolean = false;\n    datasetId: string;\n    typeCode: string;\n    readOnly: boolean = false;\n    editOnly: boolean = false;\n    isEdit: boolean = false;\n    date: string;\n    code: string;\n    type: GeoObjectType;\n    bsModalRef: BsModalRef;\n    backReference: string;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    vectorLayers: string[] = [];\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        //     {\n        //       name: 'Streets',\n        //       label: 'Streets',\n        //       id: 'streets-v11',\n        //       sprite: 'mapbox://sprites/mapbox/basic-v11',\n        //       url: 'mapbox://styles/mapbox/streets-v11'\n        //     }\n    ];\n\n    mode: string = null;\n    isMaintainer: boolean;\n    forDate: Date = new Date();\n\n    vot: ValueOverTime;\n\n    constructor(private mapService: MapService, public geomService: GeometryService, public service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute,\n        authService: AuthService, private lService: LocalizationService, private dateService: DateService, private router: Router) {\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n    }\n\n    ngOnInit(): void {\n        this.datasetId = this.route.snapshot.params[\"datasetId\"];\n        this.typeCode = this.route.snapshot.params[\"typeCode\"];\n        this.date = this.route.snapshot.params[\"date\"];\n        this.readOnly = this.route.snapshot.params[\"readOnly\"] === \"true\";\n        this.editOnly = this.route.snapshot.params[\"editOnly\"] === \"true\";\n        this.backReference = this.route.snapshot.params[\"backReference\"];\n\n        if (this.route.snapshot.params[\"code\"] != null) {\n            this.code = this.route.snapshot.params[\"code\"];\n        }\n\n        this.forDate = this.dateService.getDateFromDateString(this.date);\n\n        this.service.getGeoObjectTypes([this.typeCode], null).then(types => {\n            this.type = types[0];\n            this.geomService.initialize(this.map, this.type.geometryType, !this.isEdit);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPanelCancel(): void {\n        if (this.backReference != null && this.backReference.length >= 2) {\n            let ref = this.backReference.substring(0, 2);\n\n            if (ref === \"ML\") {\n                let published = this.backReference.substring(3, 3) === \"T\";\n                let oid = this.backReference.substring(3);\n\n                this.router.navigate([\"/registry/master-list\", oid, published]);\n            }\n        }\n\n        this.showOriginalGeometry();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        this.bsModalRef = this.modalService.show(GenericModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n        if (applyInfo.isChangeRequest) {\n            const message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n            const buttons = [];\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.cancel.returnList\"),\n                onClick: () => { this.onPanelCancel(); },\n                shouldClose: true,\n                class: \"btn-primary\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.changerequest.view\"),\n                onClick: () => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.continueEditing\"),\n                onClick: () => { },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            this.bsModalRef.content.init(message, buttons);\n        } else {\n            const message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            const buttons = [];\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.cancel.returnList\"),\n                onClick: () => { this.onPanelCancel(); },\n                shouldClose: true,\n                class: \"btn-primary\"\n            });\n\n            buttons.push({\n                label: this.lService.decode(\"geoobject-editor.continueEditing\"),\n                onClick: () => { },\n                shouldClose: true,\n                class: \"btn-default\"\n            });\n\n            this.bsModalRef.content.init(message, buttons);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    ngAfterViewInit() {\n        const layer = this.baseLayers[0];\n        // eslint-disable-next-line no-import-assign\n        this.map = new Map({\n            container: \"dataset-map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    \"mapbox-satellite\": {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    //          {\n                    //            \"id\": layer.id,\n                    //            \"type\": 'raster',\n                    //            \"source\": 'mapbox-satellite',\n                    //          }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            center: [-78.880453, 42.897852]\n        });\n\n        this.map.on(\"load\", () => {\n            this.initMap();\n        });\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n        this.geomService.destroy(false);\n    }\n\n    initMap(): void {\n        if (this.code !== \"__NEW__\") {\n            this.service.getGeoObjectBoundsAtDate(this.code, this.typeCode, this.date).then(bounds => {\n                if (bounds) {\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                    let padding = 50;\n                    let maxZoom = 20;\n\n                    // Zoom level was requested to be reduced when displaying point types as per #420\n                    if (this.type.geometryType === \"POINT\" || this.type.geometryType === \"MULTIPOINT\") {\n                        padding = 100;\n                        maxZoom = 12;\n                    }\n\n                    this.map.fitBounds(llb, { padding: padding, animate: false, maxZoom: maxZoom });\n                }\n            });\n        }\n\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl({ visualizePitch: true }));\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n\n        this.map.on(\"click\", this.datasetId + \"-points\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"click\", this.datasetId + \"-polygon\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.showOriginalGeometry();\n    }\n\n    showOriginalGeometry() {\n        this.addVectorLayer(this.datasetId);\n    }\n\n    hideOriginalGeometry() {\n        this.removeVectorLayer(this.datasetId);\n    }\n\n    addLayers(): void {\n        this.map.addLayer({\n            type: \"raster\",\n            id: \"satellite-map\",\n            source: \"mapbox-satellite\"\n        });\n\n        this.vectorLayers.forEach(vLayer => {\n            this.addVectorLayer(vLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        if (layer.id === \"streets-v11\") {\n            this.map.setStyle(layer.url);\n        } else if (layer.id === \"satellite-v9\") {\n            this.map.setStyle({\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    \"mapbox-satellite\": {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + acp + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox-satellite\"\n                    }\n                ]\n            });\n        }\n    }\n\n    onContextLayerChange(layer: ContextLayer): void {\n        if (layer.active) {\n            this.addVectorLayer(layer.oid);\n        } else {\n            this.removeVectorLayer(layer.oid);\n        }\n    }\n\n    removeVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index !== -1) {\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-points-selected\");\n            this.map.removeLayer(source + \"-polygon-selected\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.vectorLayers.splice(index, 1);\n        }\n    }\n\n    addVectorLayer(source: string): void {\n        const index = this.vectorLayers.indexOf(source);\n\n        if (index === -1) {\n            const prevLayer = (source !== this.datasetId) ? this.datasetId + \"-points\" : null;\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + acp + \"/master-list/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))]\n            });\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": DEFAULT_COLOR,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": DEFAULT_COLOR,\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Selected object layers\n            if (source === this.datasetId) {\n                this.map.addLayer({\n                    id: source + \"-points-selected\",\n                    type: \"circle\",\n                    source: source,\n                    \"source-layer\": \"context\",\n                    paint: {\n                        \"circle-radius\": 10,\n                        \"circle-color\": SELECTED_COLOR,\n                        \"circle-stroke-width\": 2,\n                        \"circle-stroke-color\": \"#FFFFFF\"\n                    },\n                    filter: [\"all\",\n                        [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                    ]\n                }, prevLayer);\n\n                this.map.addLayer({\n                    id: source + \"-polygon-selected\",\n                    type: \"fill\",\n                    source: source,\n                    \"source-layer\": \"context\",\n                    layout: {},\n                    paint: {\n                        \"fill-color\": SELECTED_COLOR,\n                        \"fill-opacity\": 0.8,\n                        \"fill-outline-color\": \"black\"\n                    },\n                    filter: [\"all\",\n                        [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                    ]\n                }, prevLayer);\n            }\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n\n            this.vectorLayers.push(source);\n        }\n    }\n\n    onFeatureChange(): void {\n        // Refresh the layer\n        this.hideOriginalGeometry();\n        this.showOriginalGeometry();\n    }\n\n    handleMapClickEvent(event: any): void {\n        if (!this.isEdit && event.features != null && event.features.length > 0) {\n            const feature = event.features[0];\n\n            if (feature.properties.code != null && this.code !== feature.properties.code) {\n                this.code = feature.properties.code;\n\n                // Update the filter properties\n                this.map.setFilter(this.datasetId + \"-points-selected\", [\"all\",\n                    [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]);\n\n                this.map.setFilter(this.datasetId + \"-polygon-selected\", [\"all\",\n                    [\"==\", [\"get\", \"code\"], this.code != null ? this.code : \"\"],\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]);\n            }\n        }\n    }\n\n    onNewGeoObject(): void {\n        this.code = \"__NEW__\";\n    }\n\n    formatDate(date: Date): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div *ngIf=\"type != null && code != null\" id=\"navigator-left-sidebar\" class=\"col-md-5 lw-inner-col\" style=\"height: calc(100vh - 145px);overflow-y: auto;\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            \n            <div id=\"attributes-header\">\n              <h3 *ngIf=\"type\">{{type.label.localizedValue}}</h3>\n              <h4><localize key=\"cgr.validity.valid.on.label\"></localize>: {{formatDate(forDate)}}</h4>\n            </div>\n            \n            <feature-panel\n              [type]=\"type\"\n              [code]=\"code\"              \n              [forDate]=\"forDate\"\n              [datasetId]=\"datasetId\"\n              [readOnly]=\"readOnly\"\n              [geometryChange]=\"geometryChange\"\n              (geometryEdit)=\"onGeometryEdit($event)\"\n              (featureChange)=\"onFeatureChange()\"              \n              (modeChange)=\"onModeChange($event)\"\n              (panelCancel)=\"onPanelCancel()\"\n              (panelSubmit)=\"onPanelSubmit($event)\"\n            ></feature-panel>\n          </div>\n        </div>\n      </div>\n\n      <div [ngClass]=\"{'col-md-7':code != null, 'col-md-12':code == null}\" id=\"site-explorer-map\">\n        <div class=\"row\">\n\n          <article class=\"base-layer-panel\">\n            <layer-panel (layerChange)=\"onContextLayerChange($event)\" (baseLayerChange)=\"handleBasemapStyle($event)\" [filter]=\"[datasetId]\"></layer-panel>\n            \n            <div *ngIf=\"!editOnly\" class=\"layer-toggle\" style=\"margin-top:10px;\" (mouseenter)=\"toolsIconHover = true\" (mouseleave)=\"toolsIconHover = false\">\n             \n              <i class=\"fa fa-plus-square\" *ngIf=\"!toolsIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n              <div *ngIf=\"toolsIconHover\" style=\"margin-top:10px;\">\n            \n                <span (click)=\"onNewGeoObject()\" role=\"button\">\n                  <button class=\"btn btn-primary\">\n                    <localize key=\"masterlist.newGeoObject\"></localize>              \n                  </button>\n                </span>\n              </div>\n            \n            </div>\n          </article>\n\n          <div id=\"dataset-map\" class=\"map-view-port\"></div>     \n        </div>\n      </div>\n    </div>\n  </div>\n</div>","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\nimport { calculateTextWidth } from \"./svg-util\";\n\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\nimport { SvgHierarchyType } from \"./svg-hierarchy-type\";\nimport { HierarchyComponent, RELATED_NODE_BANNER_COLOR } from \"../hierarchy.component\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nexport class SvgHierarchyNode {\n\n    private hierarchyComponent: HierarchyComponent;\n\n    private svgHierarchyType: SvgHierarchyType;\n\n    private geoObjectType: GeoObjectType;\n\n    private treeNode: any;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    constructor(hierarchyComponent: HierarchyComponent, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n        public localizeService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        this.hierarchyComponent = hierarchyComponent;\n        this.svgHierarchyType = svgHierarchyType;\n        this.geoObjectType = geoObjectType;\n        this.treeNode = treeNode;\n    }\n\n    getCode(): string {\n        return this.geoObjectType.code;\n    }\n\n    setPos(x: number, y: number, dragging: boolean) {\n        let bbox = this.getBbox();\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + 5)\n            .attr(\"y\", y + 1);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + bbox.width - 20)\n            .attr(\"y\", y + 17);\n\n        // Move inherit and uninherit buttons with the node they're moving\n\n        let inheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (inheritNode != null) {\n            const heritX = (x + bbox.width - 60);\n            const heritY = (y + bbox.height - 24);\n            let inheritBbox = inheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n        }\n\n        let uninheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (uninheritNode != null) {\n            const heritX = (x + bbox.width - 71);\n            const heritY = (y + bbox.height - 24);\n            let uninheritBbox = uninheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n        }\n    }\n\n    getPos() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n    }\n\n    getBbox() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n    }\n\n    getTreeNode() {\n        return this.treeNode;\n    }\n\n    hideRelatedHierarchy(): string {\n        let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n        if (existingSecondary.node() != null) {\n            existingSecondary.remove();\n            this.hierarchyComponent.calculateSvgViewBox();\n\n            let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n            return existingSecondaryCode;\n        }\n    }\n\n    renderRelatedHierarchiesMenu() {\n        let that = this;\n        let existingMenu = d3.select(\".g-context-menu\");\n\n        if (existingMenu.node() == null) {\n            //let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n            let parent = d3.select(\"#svg\");\n\n            let contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n            let relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n            const hasActionsPermissions = this.authService.isSRA() || this.authService.isOrganizationRA(this.svgHierarchyType.hierarchyType.organizationCode);\n\n            let bbox = this.getBbox();\n            let x = bbox.x + bbox.width - 5;\n            let y = bbox.y + bbox.height / 2 - 8;\n            const height = 20;\n            const fontSize = 8;\n            const widthPadding = 10;\n            const borderColor = \"#aaaaaa\";\n            const dividerColor = \"#e4e4e4\";\n            const fontFamily = \"sans-serif\";\n            const titleFontSize = 9;\n\n            const titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n            const actionsTitle = this.hierarchyComponent.localize(\"hierarchy.content.actionsTitle\");\n            const removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n            const noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n            const hideRelatedHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.hideRelatedHierarchy\");\n            const uninheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n            const inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\n            let isSecondaryHierarchyRendered = (d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node() != null);\n\n            let numActions = hasActionsPermissions ? (isSecondaryHierarchyRendered ? 2 : 1) : 0;\n\n            // Calculate the width of our title\n            let width = calculateTextWidth(titleLabel, titleFontSize);\n\n            // Calculate with of remove text\n            let removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n            width = removeWidth > width ? removeWidth : width;\n\n            if (isSecondaryHierarchyRendered) {\n              // Calculate width of \"hide related hierarchy\" label\n                let hideRelatedWidth = calculateTextWidth(hideRelatedHierarchyLabel, fontSize);\n                width = hideRelatedWidth > width ? hideRelatedWidth : width;\n            }\n\n            if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                let uninheritWidth = calculateTextWidth(uninheritLabel, fontSize);\n                width = uninheritWidth > width ? uninheritWidth : width;\n                numActions++;\n            } else {\n                let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                if (existingSecondary.node() != null) {\n                    let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                    let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                    let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                    let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                    if (this.treeNode.parent == null && relatedGotHasParents) {\n                        let inheritWidth = calculateTextWidth(inheritLabel, fontSize);\n                        width = inheritWidth > width ? inheritWidth : width;\n                        numActions++;\n                    }\n                }\n            }\n\n            // Calculate the width of our context menu, which is based on how long the text inside it will be.\n            // We don't know how long text is until we render it. So we'll need to loop over all the text and\n            // render and destroy all of it.\n            if (relatedHierarchies.length > 0) {\n                relatedHierarchies.forEach((relatedHierarchyCode: string) => {\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    let textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n\n                    if (textWidth > width) {\n                        width = textWidth;\n                    }\n                });\n            } else {\n                let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n                width = noHierLabelWidth > width ? noHierLabelWidth : width;\n            }\n\n            width = width + widthPadding;\n\n            let heightAdditions: number = relatedHierarchies.length > 0 ? (numActions + 2) : (numActions + 3);\n\n            // Background rectangle with border\n            contextMenuGroup.append(\"rect\")\n                .classed(\"contextmenu-relatedhiers-background\", true)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"rx\", 5)\n                .attr(\"width\", width)\n                .attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", .5)\n                .attr(\"stroke\", borderColor);\n\n            // Related Hierarchies Title\n            contextMenuGroup.append(\"text\")\n                .classed(\"contextmenu-relatedhiers-title\", true)\n                .attr(\"x\", x + widthPadding / 2)\n                .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                .attr(\"font-size\", titleFontSize)\n                .attr(\"font-family\", fontFamily)\n                .attr(\"font-weight\", \"bold\")\n                .text(titleLabel);\n\n            y = y + height;\n\n            // Dividing line at the bottom\n            contextMenuGroup.append(\"line\")\n                .classed(\"contextmenu-relatedhiers-divider\", true)\n                .attr(\"x1\", x)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x + width)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", borderColor)\n                .attr(\"stroke-width\", .5);\n\n\n            if (relatedHierarchies.length > 0) {\n                // Loop over all related hierarchies and draw them as list items\n                for (let i = 0; i < relatedHierarchies.length; ++i) {\n                    let relatedHierarchyCode = relatedHierarchies[i];\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    // Text that says the hierarchy's display label\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"data-hierCode\", relatedHierarchyCode)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(relatedHierarchyLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n                    y = y + height;\n\n                    // Dividing line at the bottom\n                    if (i < relatedHierarchies.length) {\n                        contextMenuGroup.append(\"line\")\n                            .classed(\"contextmenu-relatedhiers-divider\", true)\n                            .attr(\"data-hierCode\", relatedHierarchyCode)\n                            .attr(\"x1\", x + 5)\n                            .attr(\"y1\", y)\n                            .attr(\"x2\", x + width - 5)\n                            .attr(\"y2\", y)\n                            .attr(\"stroke\", dividerColor)\n                            .attr(\"stroke-width\", .5);\n                    }\n                }\n            } else {\n                // Text that says \"No related Hierarchies\"\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(noRelatedHierLabel);\n\n                y = y + height;\n\n                    // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x + 5)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width - 5)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", dividerColor)\n                    .attr(\"stroke-width\", .5);\n            }\n\n      // Actions Section\n            if (hasActionsPermissions) {\n              // Actions Title\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-title\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                    .attr(\"font-size\", titleFontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .attr(\"font-weight\", \"bold\")\n                    .text(actionsTitle);\n\n                y = y + height;\n\n              // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n        // \"Remove from hierarchy\" button\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"data-remove\", \"REPLACE---gotCode\")\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(removeFromHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) { that.removeGotFromHierarchy(); });\n\n                y = y + height;\n\n            // Inherit / Uninherit buttons\n                if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                    contextMenuGroup.append(\"line\")\n                        .classed(\"contextmenu-relatedhiers-divider\", true)\n                        .attr(\"x1\", x)\n                        .attr(\"y1\", y)\n                        .attr(\"x2\", x + width)\n                        .attr(\"y2\", y)\n                        .attr(\"stroke\", borderColor)\n                        .attr(\"stroke-width\", .5);\n\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(uninheritLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.onClickUninheritHierarchy(); });\n\n                    y = y + height;\n                } else {\n                    let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                    if (existingSecondary.node() != null) {\n                        let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                        let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                        let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                        let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                        if (this.treeNode.parent == null && relatedGotHasParents) {\n                            contextMenuGroup.append(\"line\")\n                                .classed(\"contextmenu-relatedhiers-divider\", true)\n                                .attr(\"x1\", x)\n                                .attr(\"y1\", y)\n                                .attr(\"x2\", x + width)\n                                .attr(\"y2\", y)\n                                .attr(\"stroke\", borderColor)\n                                .attr(\"stroke-width\", .5);\n\n                            contextMenuGroup.append(\"text\")\n                                .classed(\"contextmenu-relatedhiers-text\", true)\n                                .attr(\"x\", x + widthPadding / 2)\n                                .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-family\", fontFamily)\n                                .text(inheritLabel)\n                                .style(\"cursor\", \"pointer\")\n                                .on(\"click\", function(event, node) { that.onClickInheritHierarchy(secondaryHierarchy); });\n\n                            y = y + height;\n                        }\n                    }\n                }\n            }\n\n            if (isSecondaryHierarchyRendered) {\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(hideRelatedHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) {\n                        that.hideRelatedHierarchy();\n\n                        let existingMenu = d3.select(\".g-context-menu\");\n                        if (existingMenu.node() != null) {\n                            existingMenu.remove();\n                        }\n\n                        d3.select(\".g-hierarchy-got-connector\").remove();\n                    });\n            }\n\n            this.hierarchyComponent.calculateSvgViewBox();\n        } else {\n            existingMenu.remove();\n        }\n    }\n\n    removeGotFromHierarchy() {\n        let svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n        let obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        let message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.data = obj.code;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            let treeNode = svgGot.getTreeNode();\n            let parent = null;\n            if (treeNode.parent == null) {\n                parent = \"ROOT\";\n            } else {\n                if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                    parent = \"ROOT\";\n                } else {\n                    parent = treeNode.parent.data.geoObjectType;\n                }\n            }\n\n            this.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err); });\n        });\n    }\n\n    renderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let myBbox = this.getBbox();\n        let svg = d3.select(\"#svg\");\n\n        // Remove any secondary hierarchy that may already be rendered\n        if (this.hideRelatedHierarchy() === relatedHierarchy.code) {\n            return;\n        }\n\n        // Get the bounding box for our primary hierarchy\n        let primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n        // Render the secondary hierarchy\n        let svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService, this.authService);\n        svgHt.render();\n        let gSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n\n        // Translate the secondary hierarchy to the right of the primary hierarchy\n        let gHierarchy: any = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node();\n        let bbox = gHierarchy.getBBox();\n        let paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n        gSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n        // Draw dotted line between the shared node in the hierarchies\n        let secondaryGot = d3.select(\".g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n        let secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n        secondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n        d3.select(\".g-hierarchy-got-connector\").remove();\n        let gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n        gConnector.append(\"path\")\n            .classed(\"hierarchy-got-connector\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\n                \"d\",\n                \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width) +\n                \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2) +\n                \"H\" + secondaryGotBbox.x\n            );\n\n        // Draw arrow for dotted line\n        const arrowRectD = { height: 10, width: 7 };\n        let gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n        gArrow.append(\"rect\")\n            .classed(\"hierarchy-got-connector-arrow-rect\", true)\n            .attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n            .attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n        gArrow.append(\"path\")\n            .classed(\"hierarchy-got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\",\n                \"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n            );\n\n        // Recalculate the viewbox (should probably be the last thing that happens)\n        this.hierarchyComponent.calculateSvgViewBox();\n    }\n\n    onClickInheritHierarchy(hierarchy: HierarchyType) {\n        this.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n    }\n\n    onClickUninheritHierarchy() {\n        this.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { TreeNode } from \"@circlon/angular-tree-component\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\n\n\n@Component({\n    selector: \"add-child-to-hierarchy-modal\",\n    templateUrl: \"./add-child-to-hierarchy-modal.component.html\",\n    styleUrls: []\n})\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n    /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n    public hierarchyType: HierarchyType;\n    public nodes: HierarchyNode[];\n    public allGeoObjectTypes: GeoObjectType[];\n    public selectedGeoObjectType: GeoObjectType;\n    private toRoot: boolean = false;\n    selectUndefinedOptionValue: any;\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n\n    onSelect(value: string): void {\n        this.allGeoObjectTypes.forEach(gObj => {\n            if (gObj.code === value) {\n                this.selectedGeoObjectType = gObj;\n            }\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy(this.hierarchyType.code, parent, this.selectedGeoObjectType.code).then(data => {\n            this.onNodeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { RegistryService, GeoObjectTypeManagementService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-attributes-modal\",\n    templateUrl: \"./manage-attributes-modal.component.html\",\n    styleUrls: [\"./manage-attributes-modal.css\"]\n})\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n\n    message: string = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageAttributes, attribute: this.attribute, termOption: \"\" };\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy() {\n        this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            this.onDeleteAttribute.next(data);\n\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            [title]=\"'modal.button.edit' | localize\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            [title]=\"'modal.button.remove' | localize\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","\nimport { ValueOverTime, ConflictMessage } from \"@registry/model/registry\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { CreateGeoObjectAction, UpdateAttributeAction, AbstractAction, ValueOverTimeDiff, ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { HierarchyEditPropagator } from \"./HierarchyEditPropagator\";\nimport { ValueOverTimeEditPropagator } from \"./ValueOverTimeEditPropagator\";\n\nexport enum LayerColor {\n  \"OLD\" = \"#A4A4A4\",\n  \"NEW\" = \"#0062AA\"\n}\n\nexport class Layer {\n  oid: string;\n  isEditing: boolean;\n  isRendering: boolean;\n  color: LayerColor;\n  zindex: number;\n  geojson: any;\n  editPropagator: ValueOverTimeEditPropagator;\n}\n\n/*\n * This class exists purely for the purpose of storing what data to be rendered to the front-end. Any storage or submission of this data to the back-end must be translated\n * using the edit propagator.\n */\nexport class VersionDiffView extends ValueOverTime {\n  component: ManageVersionsComponent;\n  summaryKeyData: SummaryKey;\n  summaryKeyLocalized: string; // If we try to localize this in the html with a localize element then it won't update as frequently as we need so we're doing stuff manually here.\n  conflictMessage?: [ConflictMessage];\n  oldValue?: any;\n  oldStartDate?: string;\n  oldEndDate?: string;\n  newLayer: Layer = null;\n  oldLayer: Layer = null;\n  coordinate?: any;\n  newCoordinateX?: any;\n  newCoordinateY? : any;\n  editPropagator: ValueOverTimeEditPropagator;\n\n  constructor(component: ManageVersionsComponent, action: AbstractAction)\n  {\n    super();\n\n    this.component = component;\n\n    if (component.attributeType.type === '_PARENT_')\n    {\n      this.editPropagator = new HierarchyEditPropagator(component, action, this, null);\n    }\n    else\n    {\n      this.editPropagator = new ValueOverTimeEditPropagator(component, action, this);\n    }\n  }\n\n  calculateSummaryKey(diff: ValueOverTimeDiff)\n  {\n    if (diff == null)\n    {\n      this.summaryKey = SummaryKey.UNMODIFIED;\n      return;\n    }\n\n    if (diff.action === 'CREATE')\n    {\n      this.summaryKey = SummaryKey.NEW;\n      return;\n    }\n    else if (diff.action === 'DELETE')\n    {\n      this.summaryKey = SummaryKey.DELETE;\n      return;\n    }\n\n    let hasTime = diff.newStartDate != null || diff.newEndDate != null;\n    let hasValue = Object.prototype.hasOwnProperty.call(diff, \"newValue\");\n\n    if (hasTime && hasValue)\n    {\n      this.summaryKey = SummaryKey.UPDATE;\n    }\n    else if (hasTime)\n    {\n      this.summaryKey = SummaryKey.TIME_CHANGE;\n    }\n    else if (hasValue)\n    {\n      this.summaryKey = SummaryKey.VALUE_CHANGE;\n    }\n    else\n    {\n      this.summaryKey = SummaryKey.UNMODIFIED;\n    }\n  }\n\n  set summaryKey(newKey: SummaryKey)\n  {\n    this.summaryKeyData = newKey;\n    this.localizeSummaryKey();\n  }\n\n  get summaryKey(): SummaryKey\n  {\n    return this.summaryKeyData;\n  }\n\n  private localizeSummaryKey(): void\n  {\n    this.summaryKeyLocalized = this.component.lService.decode('changeovertime.manageVersions.summaryKey.' + this.summaryKeyData);\n  }\n}\n","import { Input, Component, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectOverTime, GeoObjectType } from \"@registry/model/registry\";\nimport { AbstractAction } from \"@registry/model/crtable\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\n\nimport { AuthService } from \"@shared/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { ActionDetailComponent } from \"../action-detail-modal.component\";\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component({\n\n    selector: \"crtable-detail-create-geo-object\",\n    templateUrl: \"./detail.component.html\",\n    styleUrls: [\"./crtable-detail-create-geo-object.css\"],\n    encapsulation: ViewEncapsulation.None\n})\n// export class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\nexport class CreateUpdateGeoObjectDetailComponent implements ActionDetailComponent {\n\n    isMaintainer: boolean = false;\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    @Input() readOnly: boolean;\n\n    isEditing: boolean = false;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    constructor(private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService,\n        private authService: AuthService) {\n\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if (this.isNew()) {\n\n            this.preGeoObject = this.postGeoObject;\n\n        }\n\n        this.onSelect(this.action);\n\n    }\n\n    isNew(): boolean {\n\n        return (this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\");\n\n    }\n\n    handleDateChange(): void {\n\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n    }\n\n    applyAction() {\n\n        // var action = JSON.parse( JSON.stringify( this.action ) );\n        let action = this.action;\n\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if (this.geometryEditor != null) {\n\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n\n        }\n\n        /*\n        this.changeRequestService.applyAction(action).then(response => {\n\n            this.endEdit();\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n        */\n\n    }\n\n    onSelect(action: AbstractAction) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n\n            this.registryService.getGeoObjectOverTime(this.postGeoObject.attributes.code, this.geoObjectType.code).then(geoObject => {\n\n                this.preGeoObject = geoObject;\n\n            }).catch((err: HttpErrorResponse) => {\n\n                this.error(err);\n\n            });\n\n        }\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    // @HostListener( 'window:beforeunload' )\n    // canDeactivate(): Observable<boolean> | boolean {\n    //    if ( this.isEditing ) {\n    //        //event.preventDefault();\n    //        //event.returnValue = 'Are you sure?';\n    //        //return 'Are you sure?';\n//\n     //       return false;\n     //   }\n//\n    //    return true;\n    // }\n\n    // afterDeactivate( isDeactivating: boolean ) {\n    //    if ( isDeactivating && this.isEditing ) {\n    //        this.unlockActionSync();\n    //    }\n    // }\n\n    startEdit(): void {\n\n        //this.lockAction();\n\n    }\n\n    public endEdit(): void {\n\n        //this.unlockAction();\n\n    }\n/*\n    lockAction() {\n\n        this.changeRequestService.lockAction(this.action.oid).then(response => {\n\n            this.isEditing = true;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(true);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    unlockAction() {\n\n        this.changeRequestService.unlockAction(this.action.oid).then(response => {\n\n            this.isEditing = false;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(false);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n\n        $.ajax({\n            url: acp + \"/changerequest/unlockAction\",\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function(a) {\n\n            },\n            async: false\n        });\n\n    }\n*/\n    getUsername(): string {\n\n        return this.authService.getUsername();\n\n    }\n\n    public error(err: HttpErrorResponse): void {\n\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading text-center\">\n        <h1 class=\"action-detail-header\">{{action.actionLabel}}</h1>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <h4>\n        <localize key=\"io.geoObjectType\"></localize>: {{action.geoObjectType.code}}\n      </h4>\n    \n      <div style=\"margin: 20px 0;\">\n        <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\"></localize></span>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n\n<!--         <geoobject-shared-attribute-editor  -->\n<!--           #attributeEditor -->\n<!--           *ngIf=\"preGeoObject\" -->\n<!--           [readOnly]=\"!isEditing\"   -->\n<!--           [geoObjectType]=\"geoObjectType\" -->\n<!--           [postGeoObject]=\"postGeoObject\" -->\n<!--           [preGeoObject]=\"preGeoObject\" -->\n<!--           [forDate]=\"forDate\" -->\n<!--           [isGeometryInlined]=\"true\"> -->\n<!--         </geoobject-shared-attribute-editor> -->\n        \n        <geoobject-shared-attribute-editor \n            #attributeEditor\n            *ngIf=\"action\"\n            [readOnly]=\"readOnly\"  \n            [geoObjectType]=\"geoObjectType\"\n            [geoObjectData]=\"{'geoObject':postGeoObject, 'actions': [action]}\"\n            [forDate]=\"forDate\"\n            [readOnly]=\"false\"\n            [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\" [disabled]=\"!isEditing\"></textarea>\n        </div>\n\n        <div class=\"button-holder text-right\" style=\"margin:40px 0 20px 0;\">\n          <button *ngIf=\"!readOnly && !isEditing\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, OnDestroy, Input } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService, MapService, GeometryService } from \"@registry/service\";\n\nimport { Map, NavigationControl } from \"mapbox-gl\";\n\n// eslint-disable-next-line no-unused-vars\ndeclare let acp: string;\n\n@Component({\n    selector: \"geoobject-editor-map[geometryType]\",\n    templateUrl: \"./geoobject-editor-map.component.html\",\n    styleUrls: [\"./geoobject-editor-map.component.css\"]\n})\n\n/**\n * This component is used when viewing change requests\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    _mapHeight: number = 400;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set mapHeight(height: number) {\n        if (height > 400) {\n            this._mapHeight = height;\n        }\n    }\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mapDiv\") mapDiv;\n\n    map: Map;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private geomService: GeometryService, private registryService: RegistryService, private mapService: MapService) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.mapDiv.nativeElement.id = Math.floor(Math.random() * (899999)) + 100000;\n\n            this.map = new Map({\n                container: this.mapDiv.nativeElement.id,\n                style: \"mapbox://styles/mapbox/satellite-v9\",\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            });\n\n            this.map.on(\"load\", () => {\n                this.initMap();\n            });\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    getIsValid(): boolean {\n        return this.geomService.isValid();\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            // this.addLayers();\n            // this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n        });\n\n        this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl());\n\n        this.zoomToBbox();\n    }\n\n    zoomToBbox(): void {\n        this.geomService.zoomToLayersExtent();\n    }\n\n    public error(err: HttpErrorResponse): void {\n        // TODO\n        console.log(\"ERROR\", err);\n    }\n\n}\n","<div class=\"geoobject-editor-map-wrapper\">\n  <div #mapDiv class=\"map-view-port-inline text-left\" [style.height.px]=\"_mapHeight\" style=\"width:calc(100% - 15px)\"></div>\n</div>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: \"simple-edit-control\",\n    templateUrl: \"./simple-edit-control.component.html\",\n    styleUrls: [\"./simple-edit-control.css\"]\n})\nexport class SimpleEditControl {\n\n    elRef: ElementRef\n\n    @Output() editEmitter = new EventEmitter<void>();\n\n    @Input() visible: boolean = true;\n    @Input() editSessionEnabled: boolean = false;\n    @Input() save: boolean = false;\n\n    constructor(elRef: ElementRef) {\n        this.elRef = elRef;\n    }\n\n    onAdd(map): any {\n        return this.elRef.nativeElement;\n    }\n\n    onRemove(map): void {\n        this.elRef.nativeElement.remove();\n    }\n\n    onClick(): void {\n        this.editEmitter.emit();\n    }\n}\n","<div (click)=\"this.onClick();\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button *ngIf=\"editSessionEnabled\" \n    class=\"fa\" \n    [ngClass]=\"{'fa-pencil-square-o':!save, 'fa-save':save}\" \n    style=\"color: black; font-size: 18px;\" \n    [title]=\"'changeovertime.manageVersions.button.label' | localize\" \n    >\n  </button>\n  <div *ngIf=\"editSessionEnabled\" class=\"map-button-info-hint-wrapper\">\n    <div class=\"map-button-info-hint\">\n      <localize key=\"map.button.info.hint\"></localize>\n    </div>\n    <div class=\"map-button-pointer\"></div>\n  </div>\n</div>","import { Component, Input, EventEmitter, Output, SimpleChanges } from \"@angular/core\";\nimport { IActionMapping, ITreeOptions } from \"@circlon/angular-tree-component\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\n\n@Component({\n\n    selector: \"tree-geo-selector\",\n    templateUrl: \"./tree-geo-selector.html\",\n    styleUrls: [\"./tree-geo-selector.css\"]\n})\nexport class TreeGeoSelector {\n\n    @Input() hierarchy: HierarchyOverTime;\n\n    @Input() readOnly: boolean = false;\n\n    @Input() forDate: Date = null;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    nodes: any[] = [];\n\n    actionMapping: IActionMapping = {\n        mouse: {\n            click: null\n        }\n    }\n\n    options: ITreeOptions = {\n        displayField: \"name\",\n        isExpandedField: \"expanded\",\n        idField: \"code\",\n        actionMapping: this.actionMapping\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        let time = null;\n\n        if (this.forDate != null) {\n            time = this.forDate.getTime();\n        }\n\n        let nodes = [];\n        let current = null;\n\n        this.hierarchy.entries.forEach(pot => {\n            const startDate = Date.parse(pot.startDate);\n            const endDate = Date.parse(pot.endDate);\n\n            // eslint-disable-next-line no-mixed-operators\n            if (time == null || time >= startDate && time <= endDate) {\n                this.hierarchy.types.forEach(type => {\n                    let node: any = {\n                        code: type.code,\n                        label: type.label,\n                        children: [],\n                        expanded: false\n                    };\n\n                    if (pot.parents[type.code] != null) {\n                        node.name = pot.parents[type.code].text;\n\n                        if (time == null) {\n                            node.name = node.name + \" (\" + pot.startDate + \" -> \" + pot.endDate + \")\";\n                        }\n\n                        node.geoObject = pot.parents[type.code].geoObject;\n                    }\n\n                    if (current == null) {\n                        nodes.push(node);\n                    } else {\n                        current.children.push(node);\n                        current.expanded = true;\n                    }\n\n                    current = node;\n                });\n            }\n\n            current = null;\n        });\n\n        this.nodes = nodes;\n    }\n\n    onEdit(): void {\n        this.onManageVersion.emit(this.hierarchy);\n    }\n\n}\n","<div>\n\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 style=\"margin: 0;\">{{hierarchy.label}}</h4>\n    </div>\n    <div class=\"panel-body\">\n\n<!--       <div class=\"input-group\"> -->\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\" >\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n<!--         <span *ngIf=\"!readOnly\" class=\"input-group-addon\">  -->\n<!--           <i class=\"fa fa-pencil clickable\" (click)=\"onEdit()\" aria-hidden=\"true\"></i> -->\n<!--         </span> -->\n<!--       </div> -->\n      \n      <button class=\"btn btn-primary\" style=\"width:100%;margin-top:10px;\" *ngIf=\"!readOnly\" (click)=\"onEdit()\"><localize key=\"modal.button.edit\"></localize></button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component({\n    selector: \"action-detail-modal\",\n    templateUrl: \"./action-detail-modal.component.html\",\n    styleUrls: []\n})\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    readonly: boolean;\n\n    @ViewChild(\"cuDetail\") cuDetail: ActionDetailComponent;\n    @ViewChild(\"arDetail\") arDetail: ActionDetailComponent;\n    @ViewChild(\"spDetail\") spDetail: ActionDetailComponent;\n\n    @Input()\n    curAction(action: any, readonly: boolean) {\n        this.action = action;\n        this.readonly = readonly;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if (this.cuDetail != null) {\n            this.cuDetail.endEdit();\n        }\n\n        if (this.arDetail != null) {\n            this.arDetail.endEdit();\n        }\n\n        if (this.spDetail != null) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { IOService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\n\ndeclare let acp: string;\n\n@Component({\n\n    selector: \"data-export\",\n    templateUrl: \"./data-export.component.html\",\n    styleUrls: []\n})\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService, private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes(true).then(types => {\n            // this.types = types;\n\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                if (this.authService.isOrganizationRA(types[i].orgCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.types = myOrgTypes;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onChange(code: string): void {\n        if (code != null && code.length > 0) {\n            this.service.getHierarchiesForType(code, false).then(hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n    }\n\n    onExport(): void {\n        if (this.format === \"SHAPEFILE\") {\n            window.location.href = acp + \"/shapefile/export-shapefile?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        } else if (this.format === \"EXCEL\") {\n            window.location.href = acp + \"/excel/export-spreadsheet?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, PRESENT } from \"@registry/model/registry\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport * as moment from \"moment\";\n\n@Component({\n    selector: \"geometry-panel\",\n    templateUrl: \"./geometry-panel.component.html\",\n    styleUrls: [\"./geometry-panel.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeometryPanelComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n\n    isVersionForHighlight: number;\n\n    message: string = null;\n\n    readonly: boolean = false;\n\n    hasConflict: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Output() onCloneGeometry = new EventEmitter<any>();\n\n    @Output() onEdit = new EventEmitter<ValueOverTime>();\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    geoObjectOverTime: GeoObjectOverTime;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set geoObjectOverTimeInput(value: GeoObjectOverTime) {\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value));\n        this.geoObjectOverTime = value;\n    }\n\n    @Input() isNewGeoObject: boolean = false;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public changeDetectorRef: ChangeDetectorRef, private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    onDateChange(): any {\n        this.hasConflict = false;\n\n        this.isValid = this.checkDateFieldValidity();\n\n        let vAttributes = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        this.hasConflict = this.dateService.checkRanges(vAttributes);\n    }\n\n    edit(vot: ValueOverTime, isVersionForHighlight: number): void {\n        this.onEdit.emit(vot);\n\n        this.isVersionForHighlight = isVersionForHighlight;\n    }\n\n    onAddNewVersion(geometry: ValueOverTime): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null; // Utils.formatDateString(new Date());\n        vot.endDate = null; // Utils.formatDateString(new Date());\n\n        if (geometry && geometry.value) {\n            vot.value = geometry.value;\n        } else {\n            vot.value = { type: this.geoObjectType.geometryType, coordinates: [] };\n        }\n\n        if (this.geoObjectType.geometryType === \"MULTIPOLYGON\") {\n            vot.value.type = \"MultiPolygon\";\n        } else if (this.geoObjectType.geometryType === \"POLYGON\") {\n            vot.value.type = \"Polygon\";\n        } else if (this.geoObjectType.geometryType === \"POINT\") {\n            vot.value.type = \"Point\";\n        } else if (this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            vot.value.type = \"MultiPoint\";\n        } else if (this.geoObjectType.geometryType === \"LINE\") {\n            vot.value.type = \"Line\";\n        } else if (this.geoObjectType.geometryType === \"MULTILINE\") {\n            vot.value.type = \"MultiLine\";\n        }\n\n        votArr.push(vot);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    setDateAttribute(vot: ValueOverTime, val: string): void {\n        vot.value = new Date(val).getTime().toString();\n    }\n\n    remove(version: any): void {\n        let val = this.geoObjectOverTime.attributes[\"geometry\"];\n\n        let position = -1;\n        for (let i = 0; i < val.values.length; i++) {\n            let vals = val.values[i];\n\n            if (vals.startDate === version.startDate) {\n                position = i;\n            }\n        }\n\n        if (position > -1) {\n            val.values.splice(position, 1);\n        }\n    }\n\n    formatDate(date: string) {\n        let localeData = moment.localeData(date);\n        let format = localeData.longDateFormat(\"L\");\n        return moment().format(format);\n    }\n\n    setInfinity(vAttribute, attributes): void {\n        if (vAttribute.endDate === PRESENT) {\n            vAttribute.endDate = new Date();\n        } else {\n            vAttribute.endDate = PRESENT;\n        }\n\n        this.onDateChange();\n    }\n\n    sort(votArr: ValueOverTime[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    onCloneGeometryToNewVersion(geometry: ValueOverTime): void {\n        this.onAddNewVersion(geometry);\n    }\n\n    onSubmit(): void {\n        this.onChange.emit(this.geoObjectOverTime);\n    }\n\n    onCancel(): void {\n        this.onChange.emit(this.originalGeoObjectOverTime);\n    }\n\n}\n","<div>\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #versionsform=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"col-md-12\">\n          <div class=\"attribute-version-wrapper\" *ngIf=\"geoObjectOverTime\">\n\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                    <table class=\"table table-striped\">\n\n                      <tbody class=\"attribute-element-wrapper\">\n                        <p class=\"message\" *ngIf=\"geoObjectOverTime.attributes['geometry'].values.length === 0\">\n                          <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize>\n                        </p>\n\n                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\" [ngClass]=\"{'error-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'ERROR', 'warning-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'WARNING'}\">\n                          <td [ngClass]=\"{'active' : i === isVersionForHighlight}\">\n                            <table>\n                              <tr class=\"attribute-value-row\" *ngIf=\"geoObjectType.isGeometryEditable\">\n                                <td colspan=\"2\">\n                                  <button class=\"btn btn-primary\" (click)=\"edit(vAttribute, i)\" role=\"button\">\n                                    <localize key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                  </button>\n                                  <button type=\"submit\" (click)=\"onCloneGeometryToNewVersion(vAttribute)\" class=\"btn btn-default\" role=\"button\">\n                                      <localize key=\"changeovertime.manageVersions.copy.geometry.button\"></localize>\n                                    </button>\n                                </td>\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5> \n                                  \n                                  <date-field #dateFieldComponents [(value)]=\"vAttribute.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" ></date-field>\n                                  \n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                      <h5>\n                                        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                      </h5>\n                                      \n                                      <date-field #dateFieldComponents [(value)]=\"vAttribute.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" [placement]=\"'bottom'\"></date-field>\n                                      \n                                    </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0\">\n<!--                                   <p class=\"error-message\"> -->\n<!--                                     <localize key=\"manage.versions.overlap.message\"></localize> -->\n<!--                                   </p> -->\n                                  <p *ngFor=\"let msg of vAttribute.conflictMessage\" [ngClass]=\"{'error-message': msg.type === 'ERROR', 'warning-message': msg.type === 'WARNING'}\">\n                                    {{msg.message}}\n                                  </p>\n                              </tr>    \n                            </table>\n                          </td>\n                          <td style=\"vertical-align: middle;\" class=\"manage-version-button clickable\" [title]=\"'changeovertime.manageVersions.remove.version' | localize\" (click)=\"remove(vAttribute)\">\n                            <i class=\"fa fa-times\"></i>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </li>\n\n                  <li class=\"list-group-item\" style=\"text-align: left;\">\n                    <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion(null)\"> <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                    </i>\n                  </li>\n                </ul>\n              </div>\n        </div>\n\n      </div>\n\n      <div class=\"row-holder\">\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"holder\" style=\"border: none; width: 100%;\">\n          <div class=\"button-holder pull-right\">\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n              <localize key=\"io.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || !versionsform.valid\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\n@Pipe({\n    name: \"geoobjecttype\",\n    pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n\n    transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        let unassignedGeoObjTypes: string[] = [];\n        this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n\n        // filter items array, items which match and return true will be\n        // kept, false will be filtered out\n        return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n    }\n\n    buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void {\n        filter.forEach(f => {\n            this.processHierarchyNodes(f, unassignedGeoObjTypes);\n        })\n    }\n\n    processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]) {\n        unassignedGeoObjTypes.push(node.geoObjectType)\n\n        node.children.forEach(child => {\n            this.processHierarchyNodes(child, unassignedGeoObjTypes);\n        })\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"toEpochDateTime\",\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n\n    transform(date: string): any {\n        if (!date) {\n            return date;\n        }\n\n        return new Date(date).getTime();\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { MasterListManagerComponent } from \"./component/master-list/master-list-manager.component\";\nimport { MasterListComponent } from \"./component/master-list/master-list.component\";\nimport { MasterListViewComponent } from \"./component/master-list/master-list-view.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { DatasetLocationManagerComponent } from \"./component/location-manager/dataset-location-manager.component\";\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from \"../shared/service/guard.service\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"hierarchies\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"data\",\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-requests\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"change-requests/:oid\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"master-lists\",\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"scheduled-jobs\",\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"job/:oid\",\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"master-list/:oid/:published\",\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"master-list-view/:oid\",\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"change-request\",\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"tasks\",\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"synchronization-configs\",\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"synchronization-config/:oid\",\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager/:geoobjectuid/:geoobjecttypecode/:datestr/:hideSearchOptions\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager/:geoobjectuid/:geoobjecttypecode/:datestr/:hideSearchOptions/:backReference\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code/:editOnly\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"dataset-location-manager/:datasetId/:typeCode/:readOnly/:date/:code/:editOnly/:backReference\",\n        component: DatasetLocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"sync/details/:oid\",\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n})\nexport class RegistryRoutingModule { }\n"],"sourceRoot":""}