{"version":3,"sources":["webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/localization-manager/localization-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/importer/spreadsheet.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/shapefile.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.ts","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/localization-manager/new-locale-modal.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.ts","webpack:///./src/app/registry/registry.module.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/model/hierarchy.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/spreadsheet.component.html","webpack:///./src/app/registry/component/importer/shapefile.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/localization-manager/localization-manager.component.html","webpack:///./src/app/registry/model/localization-manager.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/localization-manager/new-locale-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.html","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["http","eventService","init","this","get","acp","toPromise","getGeoObjectTypes","types","params","HttpParams","set","JSON","stringify","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","date","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","typeCode","headers","HttpHeaders","start","post","finally","complete","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","code","addAttributeType","geoObjTypeId","attribute","updateAttributeType","deleteAttributeType","attributeName","addAttributeTermTypeOption","parentTermCode","term","updateAttributeTermTypeOption","termJSON","deleteAttributeTermTypeOption","termCode","getGeoObject","id","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestions","text","type","parent","hierarchy","getGeoObjectSuggestionsTypeAhead","getMasterLists","getMasterListHistory","oid","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","createMasterList","list","createMasterListVersion","forDate","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","parentTreeNode","geoObject","isNew","masterListId","notes","data","pageNumber","pageSize","filter","sort","length","values","value","valueAttribute","progress","RegistryService","importSpreadsheet","configuration","cancelSpreadsheetImport","importShapefile","cancelShapefileImport","listGeoObjectTypes","includeLeafTypes","toString","getTypeAncestors","hierarchyCode","getHierarchiesForType","includeTypes","createGeoObjectSynonym","entityId","label","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","removeTerm","IOService","getHierarchyTypes","addChildToHierarchy","parentGeoObjectTypeCode","childGeoObjectTypeCode","removeFromHierarchy","createHierarchyType","htJSON","updateHierarchyType","deleteHierarchyType","HierarchyService","PRESENT","TreeEntity","description","children","addChild","push","Term","GeoObject","attributes","GeoObjectType","geoObjectType","getVotAtDate","attrCode","lService","retVot","startDate","endDate","time","getTime","i","attr","create","isChangeOverTime","forEach","vot","Date","parse","Array","isArray","GeoObjectOverTime","ValueOverTime","isDefault","required","unique","Attribute","isChange","rootTerm","termOptions","setRootTerm","AttributeTerm","precision","scale","AttributeDecimal","GeoObjectTypeModalStates","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","MasterList","MasterListVersion","HierarchyOverTime","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","GeoObjectTypeManagementService","getAllActions","requestId","applyAction","action","applyActionStatusProperties","lockAction","actionId","unlockAction","getAllRequests","getRequestDetails","confirmChangeRequest","execute","rejectAllActions","actions","approveAllActions","submitChangeRequest","ChangeRequestService","transform","ToEpochDateTimePipe","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","EventEmitter","message","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","toggleIsRequired","animate","onAnimationDone","event","isValid","indexOf","AttributeInputComponent","ImportSheet","Location","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","getNewLocaleInfo","installLocale","language","country","variant","LocalizationManagerService","service","modalService","changeDetectorRef","registryService","elRef","changeRequestService","datePipe","toEpochDateTimePipe","preGeoObject","calculatedPreObject","postGeoObject","calculatedPostObject","attributeExcludes","readOnly","isEditingGeometries","isGeometryInlined","valid","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","attributeForm","statusChanges","subscribe","result","emit","apply","geomAttr","geometry","LocalizedValue","calculate","changes","calculateCurrent","geometryEditor","reload","goot","object","formatDate","localize","handleChangeCode","e","onManageAttributeVersions","bsModalRef","show","ManageVersionsModalComponent","animated","backdrop","ignoreBackdropClick","content","geoObjectOverTime","isNewGeoObject","onAttributeVersionChange","versionObj","tfInit","onManageGeometryVersions","isDifferentText","trim","isDifferentValue","onSelectPropertyOption","option","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attrOpts","removeStatuses","isStatusChanged","pre","preCompare","postCompare","getTypeDefinition","key","getIsValid","GeoObjectSharedAttributeEditorComponent","localizeService","geoObjectTypes","geoObjectId","reason","dataSource","Observable","observer","then","results","a","b","localizedValue","toLowerCase","pos","getGeoObjectTypePosition","splice","catch","err","error","onValidChange","newValid","attributeEditor","changeTypeaheadLoading","typeaheadLoading","typeaheadOnSelect","item","submit","goSubmit","saveDraw","cancel","SuccessModalComponent","decode","ErrorModalComponent","localizedMessage","SubmitChangeRequestComponent","valueChange","LocalizedInputComponent","contextMenuService","instance","Instance","nodes","currentHierarchy","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","desiredHierarchy","response","setLocales","locales","setHierarchies","hierarchies","setNodesOnInit","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","index","findIndex","h","rootGeoObjectTypes","setTimeout","treeModel","expandAll","setNodesForHierarchy","hierarchyType","getHierarchy","hierarchyId","target","rootGeoObjectType","processHierarchyNodes","updateHierarchy","getHierarchyLabel","child","gOT","childType","nodeMenuComponent","leafMenuComponent","preventDefault","stopPropagation","setFocusedNode","isExpanded","collapse","hierarchyOnClick","update","createHierarchy","CreateHierarchyTypeModalComponent","onHierarchytTypeCreate","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","edit","getHierarchyTypePosition","CreateGeoObjTypeModalComponent","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","manageGeoObjectType","ManageGeoObjectTypeModalComponent","onGeoObjectTypeSubmitted","position","addChildAndRootToHierarchy","that","AddChildToHierarchyModalComponent","allGeoObjectTypes","toRoot","onNodeChange","current","deleteTreeNode","removeTreeNode","n","hasChildren","isActive","onDrop","element","allowDrop","HierarchyComponent","localizationService","isAdmin","isMaintainer","isContributor","isContributer","renderContent","pageTitle","DataPageComponent","geometryChange","onClickEdit","mapboxgl","accessToken","mapDiv","nativeElement","Math","floor","random","map","Map","container","style","zoom","center","on","initMap","removeLayers","addLayers","remove","editingControl","getAll","features","zoomToBbox","addControl","NavigationControl","addEditButton","enableEditing","simpleEditControl","editEmitter","geometryType","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","postGeometry","add","removeSource","prefix","sourceName","removeLayer","getSource","preGeometry","renderGeometryAsLayer","color","addSource","addLayer","setData","bboxCode","bboxType","bboxDate","boundArr","bounds","LngLatBounds","fitBounds","padding","featureCollection","polygons","feature","j","coordinates","points","lines","console","log","GeoObjectEditorMapComponent","locale","LocaleValue","localeValues","ChangeRequestPageComponent","router","localizationManagerService","showNewLocaleModal","NewLocaleModalComponent","importLocalization","fileList","files","file","formData","FormData","append","name","exportLocalization","window","location","href","LocalizationManagerComponent","authService","lists","onCreate","PublishModalComponent","onMasterListChange","displayLabel","createDate","lastUpdateDate","onView","navigate","onEdit","pair","master","ret","onDelete","arr","MasterListManagerComponent","iService","readonly","representativityDate","publishDate","listAbstract","process","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","leaf","getIsDisabled","elClasses","classList","onChange","onSubmit","hide","onCancel","showIndicator","prog","total","registerListener","deregisterListener","ProgressBarComponent","pService","route","p","selected","page","count","order","searchPlaceholder","snapshot","paramMap","version","isCollapsed","onPageChange","onSort","clearFilters","search","toggleFilter","getValues","base","unshift","handleDateChange","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","includes","editModal","GeoObjectEditorComponent","configureAsExisting","isGeometryEditable","setMasterListId","setOnSuccessCallback","onGoto","open","onPublish","subscription","interval","unsubscribe","onNewGeoObject","configureAsNew","onExport","ExportFormatModalComponent","onFormat","format","encodeURIComponent","MasterListComponent","versions","onViewMetadata","MasterListHistoryComponent","LocalizedTextComponent","configurationChange","stateChange","onNext","AttributesPageComponent","locations","onBack","LocationPageComponent","hasProblems","locationProblems","resolved","handleError","exclusions","problem","exclusion","LocationProblemPageComponent","termProblems","attributeCode","TermProblemPageComponent","cHierarchies","parentMap","day","getUTCDate","dateStr","getUTCFullYear","getUTCMonth","entries","pot","parents","getHierarchies","onManageVersions","find","ManageParentVersionsModalComponent","onVersionChange","CascadingGeoSelector","onSelect","gObj","selectedGeoObjectType","toggleIsLeaf","isLeaf","toggleIsGeometryEditable","confirmBsModalRef","geoObjectTypeManagementService","modalStateSubscription","onModalStateChange","onGeoObjectTypeChange","close","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","onBeforeUploadItem","onCompleteItem","status","fileRef","onSuccessItem","SpreadsheetModalComponent","onErrorItem","onClick","queue","uploadAll","SpreadsheetComponent","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","config","ShapefileModalComponent","ShapefileComponent","DataExportComponent","visible","onAdd","onRemove","SimpleEditControl","editingGeometry","hasDuplicateDate","vAttribute","onDateChange","vAttributes","snapDates","votArr","prev","formatDateString","onAddNewVersion","terms","editGeometry","getVersionData","val","getDefaultLocaleVal","defVal","locVal","setDateAttribute","newI","pendI","dateObj","month","objectKeys","Object","keys","requests","columns","filterCriteria","prop","sortable","width","refresh","onExecute","changeRequest","request","onApproveAll","onRejectAll","requestTrackBy","toggle","parentElement","className","toggleId","criteria","setActionStatus","approvalStatus","getActiveDetailComponent","actionType","endsWith","showActionDetail","ActionDetailModalComponent","curAction","RequestTableComponent","ChangeRequest","AbstractAction","UpdateGeoObjectAction","CreateGeoObjectAction","AddChildAction","RemoveChildAction","GovernanceStatus","PageEvent","SetParentAction","cuDetail","endEdit","arDetail","spDetail","confirm","allLocaleInfo","AllLocaleInfo","allLocaleInfoIN","tabIndex","arePropertiesValid","areParentsValid","findVotWithStartDate","votArray","func","onSuccessCallback","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","goPropertiesPost","fetchGeoObject","fetchHierarchies","typeTypeCode","getTypeAheadObservable","ptn","properties","parentSelector","changePage","nextPage","force","persistModelChanges","modalStepIndicatorService","modalStepConfig","manageAttributes","onDeleteAttribute","setStepConfig","defineAttributeModal","defineAttribute","editAttribute","removeAttributeType","attributeType","ManageAttributesModalComponent","validator","c","geoObjectAttributeCode","validate","GeoObjectAttributeCodeValidator","newAttribute","setAttribute","attributeInputComponent","isFormValid","DefineAttributeModalContentComponent","manageTermOption","openAddTermOptionForm","TermOptionWidgetComponent","back","EditAttributeModalContentComponent","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","LocationProblemComponent","termLabel","termId","createOption","parentCode","ignoreValue","TermProblemComponent","termOption","EditTermOptionInputComponent","geoObjectTypeChange","editGeoObjectType","GeoObjectTypeInputComponent","enableTermOptionForm","replace","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","ManageTermOptionsComponent","entry","pType","uid","ancestors","ancestor","geoObjectJson","canDeactivate","afterDeactivate","isDeactivating","unlockActionSync","startEdit","$","ajax","method","success","async","CreateUpdateGeoObjectDetailComponent","original","assign","AddRemoveChildDetailComponent","json","SetParentDetailComponent","RegistryModule","HierarchyType","Hierarchy","HierarchyNode","items","GeoObjectAttributeExcludesPipe","LocaleInfo","el","onKeyDown","OnlyNumber","keyCode","ctrlKey","shiftKey","MapService","MaintainerGuard","ContributerGuard","AdminGuard","RegistryRoutingModule"],"mappings":"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","file":"1.chunk.js","sourcesContent":["///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable, TestScheduler } from 'rxjs';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/finally';\r\n\r\nimport { GeoObject, GeoObjectType, Attribute, Term, MasterList, MasterListVersion, ParentTreeNode, ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime } from '../model/registry';\r\nimport { HierarchyNode, HierarchyType } from '../model/hierarchy';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\nimport { templateJitUrl } from '@angular/compiler';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }>( acp + '/cgr/init' )\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes( types: any ): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'types', JSON.stringify( types ) );\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>( acp + '/cgr/geoobjecttype/get-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects( childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string ): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'childId', childId )\r\n        params = params.set( 'childTypeCode', childTypeCode )\r\n        params = params.set( 'parentTypes', JSON.stringify( parentTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        if ( date != null ) {\r\n            params = params.set( 'date', date );\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>( acp + '/cgr/geoobject/get-parent-geoobjects', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    getChildGeoObjects( parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean ): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'parentId', parentId )\r\n        params = params.set( 'parentTypeCode', parentTypeCode )\r\n        params = params.set( 'childrenTypes', JSON.stringify( childrenTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>( acp + '/cgr/geoobject/getchildren', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType( gtJSON: string ): Promise<GeoObjectType> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/create', JSON.stringify( { 'gtJSON': gtJSON } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType( gtJSON: GeoObjectType ): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/update', JSON.stringify( { \"gtJSON\": gtJSON } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType( code: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/delete', JSON.stringify( { code: code } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    addAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/addattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/updateattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType( geoObjTypeId: string, attributeName: string ): Promise<boolean> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<boolean>( acp + '/cgr/geoobjecttype/deleteattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeName': attributeName } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption( parentTermCode: string, term: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( { 'parentTermCode': parentTermCode, 'termJSON': term } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption( termJSON: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/updateterm', JSON.stringify( { 'termJSON': termJSON } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption( termCode: string ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { 'termCode': termCode } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject( id: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'id', id )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds( code: string, typeCode: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n    \r\n    getGeoObjectBoundsAtDate( code: string, typeCode: string, date: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n        params = params.set( 'date', date );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject-time/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode( code: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get-code', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject( code: string, typeCode: string ): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>( acp + '/cgr/geoobject/get-hierarchies-over-time', { params: params } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string, date: string ): Promise<GeoObject> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if ( date != null ) {\r\n            params.date = date;\r\n        }\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead( text: string, type: string ): Promise<GeoObject> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>( acp + '/master-list/list-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListHistory( oid: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/versions', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListVersion( oid: string ): Promise<MasterListVersion> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterListVersion>( acp + '/master-list/version', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<string[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<string[]>( acp + '/localization/get-locales', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime( geoObjectCode: string, geoObjectTypeCode: string ): Promise<GeoObjectOverTime> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        // let params: HttpParams = new HttpParams();\r\n        // params = params.set( 'geoObjectCode', geoObjectCode );\r\n        // params = params.set( 'geoObjectTypeCode', geoObjectTypeCode );\r\n        // params = params.set( 'attributeName', attributeName );\r\n\r\n        // return this.http\r\n        //     .get<ValueOverTime[]>( acp + '/cgr/geoobject/getAttributeVersions', { params: params } )\r\n        //     .toPromise();\r\n\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', geoObjectCode );\r\n        params = params.set( 'typeCode', geoObjectTypeCode );\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>( acp + '/cgr/geoobject-time/get-code', { params: params } )\r\n            .toPromise();\r\n\r\n    }\r\n\r\n    newGeoObjectOverTime( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject-time/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n\r\n\r\n    // getAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string ): any[] {\r\n    //     let test =[\r\n    //         {\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":{\"localeValues\":[\r\n    //             {\"locale\":\"defaultLocale\",\"value\":\"Anlong Veaeng\"}]}}\r\n    //     ]\r\n\r\n    //     // let test = [{\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":\"test\"}];\r\n\r\n    //     return test;\r\n    // }\r\n\r\n\r\n    setAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[] ): Promise<Response> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>( acp + '/cgr/geoobject/setAttributeVersions', JSON.stringify( params ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterList( list: MasterList ): Promise<MasterList> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>( acp + '/master-list/create', JSON.stringify( { list: list } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterListVersion( oid: string, forDate: string ): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterListVersion>( acp + '/master-list/create-version', JSON.stringify( { oid: oid, forDate: forDate } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterList( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    deleteMasterListVersion( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove-version', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    publishMasterList( oid: string ): Observable<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http.post<MasterListVersion>( acp + '/master-list/publish', JSON.stringify( { oid: oid } ), { headers: headers } );\r\n    }\r\n\r\n    getMasterList( oid: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit( parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTreeNode: parentTreeNode, geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if ( notes != null ) {\r\n            params['notes'] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geoobject-editor/apply', JSON.stringify( params ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    data( oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string } ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            sort: sort\r\n        } as any;\r\n\r\n        if ( pageNumber != null ) {\r\n            params.pageNumber = pageNumber;\r\n        }\r\n\r\n        if ( pageSize != null ) {\r\n            params.pageSize = pageSize;\r\n        }\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/master-list/data', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    values( oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[] ): Promise<{ label: string, value: string }[]> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            attributeName: attributeName,\r\n            valueAttribute: valueAttribute\r\n        } as any;\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        if ( value != null && value.length > 0 ) {\r\n            params.value = value;\r\n        }\r\n\r\n\r\n        return this.http\r\n            .post<{ label: string, value: string }[]>( acp + '/master-list/values', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    progress( oid: string ): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<Progress>( acp + '/master-list/progress', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/finally';\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from '../model/io';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    importSpreadsheet( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/excel/import-spreadsheet', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    cancelSpreadsheetImport( configuration: ImportConfiguration ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/excel/cancel-import', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    importShapefile( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/shapefile/import-shapefile', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    cancelShapefileImport( configuration: ImportConfiguration ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/shapefile/cancel-import', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    listGeoObjectTypes( includeLeafTypes: boolean ): Promise<{ label: string, code: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'includeLeafTypes', includeLeafTypes.toString() );\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string }[]>( acp + '/cgr/geoobjecttype/list-types', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors( code: string, hierarchyCode: string ): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'hierarchyCode', hierarchyCode );\r\n\r\n        return this.http\r\n            .get<Location[]>( acp + '/cgr/geoobjecttype/get-ancestors', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType( code: string, includeTypes: boolean ): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'includeTypes', includeTypes.toString() );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>( acp + '/cgr/geoobjecttype/get-hierarchies', { params: params } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string ): Promise<any> {\r\n        \r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym( entityId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/geo-synonym/createGeoEntitySynonym', JSON.stringify( { entityId: entityId, label: label } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym( synonymId: string, vOid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geo-synonym/deleteGeoEntitySynonym', JSON.stringify( { synonymId: synonymId, vOid: vOid } ), { headers: headers } )\r\n            .finally(() => {\r\n                this.eventService.complete();\r\n            } )\r\n            .toPromise()\r\n    }\r\n\r\n    getTermSuggestions( mdAttributeId: string, text: string, limit: string ): Promise<{ text: string, data: any }[]> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'mdAttributeId', mdAttributeId );\r\n        params = params.set( 'text', text );\r\n        params = params.set( 'limit', limit );\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>( acp + '/uploader/getClassifierSuggestions', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTermSynonym( classifierId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { classifierId: classifierId, label: label } );\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/uploader/createClassifierSynonym', data, { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym( synonymId: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { synonymId: synonymId } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/uploader/deleteClassifierSynonym', data, { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTerm( label: string, code: string, parentTermCode: string ): Promise<Term> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm( termCode: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { termCode: termCode } ), { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\n\nimport { HierarchyType } from '../model/hierarchy';\nimport { TreeEntity } from '../model/registry';\nimport { EventService } from '../../shared/service/event.service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    getHierarchyTypes( types: any ): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'types', JSON.stringify(types) );\n        \n        return this.http\n            .get<HierarchyType[]>( acp + '/cgr/hierarchytype/get-all', {params: params})\n            .toPromise();\n    }\n    \n    addChildToHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n\t   let headers = new HttpHeaders( {\n           'Content-Type': 'application/json'\n       } );\n\n       this.eventService.start();\n\n       return this.http\n           .post<HierarchyType>( acp + '/cgr/hierarchytype/add', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n           .finally(() => {\n               this.eventService.complete();\n           } )\n           .toPromise();\n    }\n    \n    removeFromHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n \t   let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/remove', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n     }\n    \n    createHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/create', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n    \n    updateHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/update', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n    \n    deleteHierarchyType( code: string ): Promise<TreeEntity> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n        \n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>( acp + '/cgr/hierarchytype/delete', { 'code': code }, { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise()\n    }\n\n}\n","import { LocalizedValue } from '../../shared/model/core';\nimport { LocalizationService } from '../../shared/service/localization.service';\n\nexport const PRESENT: string = '5000-12-31'\n\nexport class TreeEntity {\n    id: string;\n    name: string;\n    hasChildren: boolean;\n}\n\nexport class Term {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n\n    constructor( code: string, label: LocalizedValue, description: LocalizedValue ) {\n        this.code = code;\n        this.label = label;\n        this.description = description;\n    }\n    children: Term[] = [];\n\n    addChild( term: Term ) {\n        this.children.push( term );\n    }\n}\n\nexport class GeoObject {\n    type: string;\n    geometry: any;\n    properties: {\n        uid: string,\n        code: string,\n        displayLabel: LocalizedValue,\n        type: string,\n        status: string[],\n        sequence: string\n        createDate: string,\n        lastUpdateDate: string,\n    };\n}\n\nexport class GeoObjectType {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    geometryType: string;\n    frequency: string;\n    isLeaf: boolean;\n    isGeometryEditable: boolean;\n    attributes: Array<Attribute | AttributeTerm | AttributeDecimal> = [];\n}\n\n// export class Attribute {\n\n//   name: string;\n//   type: string;\n//   label: string;\n//   description: string;\n//   isDefault: boolean;\n// }\n\n// export class AttributeTerm extends Attribute {\n//     descendants: Attribute[];\n//     rootTerm: string;\n// }\n\nexport class GeoObjectOverTime {\n\n    geoObjectType: GeoObjectType;\n\n    attributes: any;\n\n    public constructor( geoObjectType: GeoObjectType, attributes: any ) {\n        this.geoObjectType = geoObjectType;\n        this.attributes = attributes;\n    }\n\n    public getVotAtDate( date: Date, attrCode: string, lService: LocalizationService ) {\n        let retVot = { startDate: date, endDate: null, value: null };\n\n        const time = date.getTime();\n\n        for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if ( attr.code === attrCode ) {\n                if ( attr.type === 'local' ) {\n                    retVot.value = lService.create();\n                }\n\n                if ( attr.isChangeOverTime ) {\n                    let values = this.attributes[attr.code].values;\n\n                    values.forEach( vot => {\n\n                        const startDate = Date.parse( vot.startDate );\n                        const endDate = Date.parse( vot.endDate );\n\n                        if ( time >= startDate && time <= endDate ) {\n\n                            if ( attr.type === 'local' ) {\n                                retVot.value = JSON.parse( JSON.stringify( vot.value ) );\n                            }\n                            else if ( attr.type === 'term' && vot.value != null && Array.isArray( vot.value ) && vot.value.length > 0 ) {\n                                retVot.value = vot.value[0];\n                            }\n                            else {\n                                retVot.value = vot.value;\n                            }\n                        }\n                    } );\n                }\n                else {\n                    retVot.value = this.attributes[attr.code];\n                }\n\n                break;\n            }\n        }\n\n        return retVot;\n    }\n}\n\nexport class ValueOverTime {\n    startDate: string;\n    endDate: string;\n    value: any;\n    removable?: boolean;\n}\n\nexport class Attribute {\n    code: string;\n    type: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    isDefault: boolean;\n    required: boolean;\n    unique: boolean;\n    isChangeOverTime?: boolean;\n\n    constructor( code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean ) {\n\n        this.code = code;\n        this.type = type;\n        this.label = label;\n        this.description = description;\n        this.isDefault = isDefault;\n        this.required = required;\n        this.unique = unique;\n        this.isChangeOverTime = isChangeOverTime;\n    }\n\n}\n\nexport class AttributeTerm extends Attribute {\n    //descendants: Attribute[];\n\n    constructor( code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean ) {\n        super( code, type, label, description, isDefault, required, unique, isChange );\n    }\n\n    rootTerm: Term = new Term( null, null, null );\n\n    termOptions: Term[] = [];\n\n    setRootTerm( term: Term ) {\n        this.rootTerm = term;\n    }\n}\n\nexport class AttributeDecimal extends Attribute {\n    precision: number = 32;\n    scale: number = 8;\n\n    constructor( code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean ) {\n        super( code, type, label, description, isDefault, required, unique, isChange );\n    }\n}\n\nexport enum GeoObjectTypeModalStates {\n    \"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n    \"editAttribute\" = \"EDIT-ATTRIBUTE\",\n    \"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n    \"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n    \"editTermOption\" = \"EDIT-TERM-OPTION\",\n    \"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport class TreeNode {\n    geoObject: GeoObject;\n    hierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n    children: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n    parents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n    state: string;\n    attribute: any;\n    termOption: any;\n}\n\nexport class MasterList {\n    oid: string;\n    typeCode: string;\n    displayLabel: LocalizedValue;\n    code: string;\n    representativityDate: Date;\n    publishDate: Date;\n    listAbstract: string;\n    process: string;\n    progress: string;\n    accessConstraints: string;\n    useConstraints: string;\n    acknowledgements: string;\n    disclaimer: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n    hierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n    leaf: boolean;\n    versions?: MasterListVersion[]\n}\n\nexport class MasterListVersion {\n    displayLabel: string;\n    oid: string;\n    typeCode: string;\n    leaf: boolean;\n    masterlist: string;\n    forDate: string;\n    createDate: string;\n    publishDate: string;\n    attributes: any[];\n    locales?: string[];\n    isGeometryEditable: boolean;\n}\n\nexport class HierarchyOverTime {\n    code: string;\n    label: string;\n    types: {\n        code: string;\n        label: string;\n    }[];\n    entries: {\n        startDate: string;\n        endDate: string;\n        parents: { [k: string]: { text: string; geoObject: GeoObject } };\n    }[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\nimport {  ManageGeoObjectTypeModalState } from '../model/registry';\r\n\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    constructor(  ) { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n        \r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ChangeRequest, AbstractAction } from '../model/crtable';\nimport { EventService } from '../../shared/service/event.service';\nimport { GeoObject } from '../model/registry';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\t  getAllActions( requestId: string ): Promise<AbstractAction[]> {\n        let params: HttpParams = new HttpParams();\n\n        if ( requestId != null ) {\n            params = params.set( 'requestId', requestId );\n\t\t}\n\t\t\n        this.eventService.start();\n\n        return this.http\n            .get<AbstractAction[]>( acp + '/changerequest/getAllActions', { params: params } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n\n//    fetchData( cb: any, requestId: string ): Promise<HttpResponse> {\n//        let params: HttpParams = new HttpParams();\n//\n//        if ( requestId != null ) {\n//            params = params.set( 'requestId', requestId );\n//        }\n//\n//        this.eventService.start();\n//\n//        return this.http\n//            .get( acp + '/changerequest/getAllActions', { params: params } )\n//            .finally(() => {\n//                this.eventService.complete();\n//            } )\n//            .toPromise()\n//            .then( response => {\n//                cb( response.json() );\n//\n//                return response;\n//            } )\n//    }\n\n    applyAction( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyAction', JSON.stringify( { action: action } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n\tapplyActionStatusProperties( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyActionStatusProperties', JSON.stringify( { action: action } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n\t\n    lockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/lockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    unlockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/unlockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    getAllRequests(filter: string): Promise<ChangeRequest[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tparams = params.set('filter', filter );\n\n        return this.http.get<ChangeRequest[]>( acp + '/changerequest/get-all-requests', { params: params } )\n            .toPromise();\n    }\n\n    getRequestDetails( requestId: string ): Promise<ChangeRequest> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'requestId', requestId );\n\n        this.eventService.start();\n\n        return this.http.get<ChangeRequest>( acp + '/changerequest/get-request-details', { params: params } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n\tconfirmChangeRequest( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/confirm-change-request', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n\t}\n\t\n    execute( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/execute-actions', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    rejectAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/reject-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    approveAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/approve-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n    submitChangeRequest( actions: string ): Promise<GeoObject> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'actions', actions )\n\n        this.eventService.start();\n\n        return this.http.post<GeoObject>( acp + '/cgr/submitChangeRequest', {actions: actions}, { headers: headers } )\n            .finally(() => {\n                this.eventService.complete();\n            } )\n            .toPromise();\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'toEpochDateTime',\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n    transform(date: string): any {\n        if (!date ) {\n            return date;\n        }\n       \n        return new Date(date).getTime();\n    }\n}","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\n\nimport { GeoObjectType, Attribute } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n \n@Component( {\n    selector: 'attribute-input',\n    templateUrl: './attribute-input.component.html',\n    styleUrls: ['./attribute-input.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms'))\n            //   transition('show => none', animate('100ms'))\n        ])\n    ]\n} )\nexport class AttributeInputComponent implements OnInit {\n\n    @Input() disableCodeField: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() isDecimal: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    @Output() attributeChange = new EventEmitter<Attribute>();\n    message: string = null;\n\n    state: string = 'none';\n\n    constructor( private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges() {\n \n    }\n\n    ngOnDestroy(){\n        \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    toggleIsUnique():void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    toggleIsRequired():void {\n        this.attribute.required = !this.attribute.required;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if(this.attribute.code) {\n\n            // if code has a space\n            if(this.attribute.code.indexOf(\" \") !== -1){\n                return false;\n            }\n\n            return true;\n        }\n        \n        return false;\n    }\n}\n","import { GeoObjectType } from './registry';\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n}\n\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '../../shared/service/event.service';\n\nimport { AllLocaleInfo } from '../model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <!-- <div class=\"col-md-12\"> -->\n            <div *ngIf=\"preGeoObject\">\n                <div *ngIf=\"!this.isEditingGeometries\" class=\"row-holder\"> \n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\"></span>\n                            <div class=\"panel\" style=\"box-shadow: none;\">\n                                <div class=\"panel-body\">\n                                    <ul class=\"list-group\">\n                                        <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes\">\n                                            <h5 *ngIf=\"attr.code !== 'geometry'\">{{attr.label.localizedValue}}\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>\n                                            </h5>\n                                            \n                                            <h5 *ngIf=\"attr.code === 'geometry'\">\n                                              <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>                                              \n                                            </h5>\n                                            \n\n                                            <div *ngIf=\"attr.code === 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"calculatedPostObject[attr.code]\" (change)=\"handleChangeCode($event)\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew\" required> \n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'character' && attr.code !== 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [ngModel]=\"calculatedPostObject[attr.code].value\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n\n                                              <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentText(attr)\">\n                                                <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                              </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'local'\">\n                                              <ul class=\"list-group\" *ngIf=\"calculatedPostObject[attr.code].value != null\">\n                                                <li class=\"list-group-item\" *ngFor=\"let localeValue of calculatedPostObject[attr.code].value.localeValues; let i = index\">\n                                                  <h5>{{localeValue.locale}}</h5>\n                                                  <input disabled [required]=\"localeValue.locale === 'defaultLocale'\" type=\"text\" [ngModel]=\"localeValue.value\" [name]=\"'mod-' + attr.code + '-' + localeValue.locale\"> \n\n                                                  <p class=\"warning-text\" *ngIf=\"!isNew && calculatedPreObject[attr.code].value != null && localeValue.value != null && localeValue.value.trim() !== calculatedPreObject[attr.code].value.localeValues[i].value\">\n                                                    <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value.localeValues[i].value}}\n                                                  </p>\n                                                </li>\n                                              </ul>                                            \n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'date'\">\n                                                <input type=\"date\" [ngModel]=\"calculatedPostObject[attr.code].value | date:'yyyy-MM-dd'\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n                                                    \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value | date}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'boolean'\">\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"calculatedPostObject[attr.code].value\" disabled [value]=\"true\" id=\"mod-{{attr.code}}-true\" name=\"mod-{{attr.code}}-true\">\n                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                </label>\n\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"!calculatedPostObject[attr.code].value\" disabled [value]=\"false\" id=\"mod-{{attr.code}}-false\" name=\"mod-{{attr.code}}-false\">\n                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                </label>\n                                                \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'float'\">\n                                                <input disabled type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\"\n                                                    id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'integer'\">\n                                                <input type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\" disabled id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'term'\">\n                                                <select id=\"mod-{{attr.code}}\" name=\"mod-term-{{attr.code}}\" class=\"select-area\" style=\"float:none;\" disabled [(ngModel)]=\"calculatedPostObject[attr.code].value\">\n                                                    <option value=\"\" ></option>\n                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attr.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                </select>\n\n                                                <!-- \n                                                <p class=\"warning-text\" *ngIf=\"calculatedPreObject[attr.code].value && calculatedPostObject[attr.code].value !== calculatedPreObject[attr.code].value\">\n                                                -->\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isStatusChanged(calculatedPostObject[attr.code].value, calculatedPreObject[attr.code].value)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'geometry' && this.isGeometryInlined\">\n                                              <geoobject-editor-map #geometryEditor\n                                                [geometryType]=\"this.geoObjectType.geometryType\"\n                                                [readOnly]=\"true\"\n                                                [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                                                [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                                                [bboxCode]=\"this.preGeoObject.attributes.code\"\n                                                [bboxType]=\"this.geoObjectType.code\"\n                                                (onClickEdit)=\"this.onManageGeometryVersions()\"\n                                                [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                                              </geoobject-editor-map>\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.isChangeOverTime\" class=\"button-holder\" style=\"padding: 20px 0 20px 0;\">\n                                              <button type=\"submit\" style=\"\" (click)=\"onManageAttributeVersions(attr)\" class=\"btn btn-primary\" role=\"button\">\n                                                <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                                              </button>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                    </div>\n                 </div>\n                 <div *ngIf=\"this.isEditingGeometries && !this.isGeometryInlined\">\n                   <div class=\"label-holder\">\n                     <label>\n                      <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                     </label>\n                   </div>\n                   <div class=\"holder\">\n                     <geoobject-editor-map #geometryEditor \n                       [geometryType]=\"this.geoObjectType.geometryType\"\n                       [readOnly]=\"true\"\n                       [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                       [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                       [bboxCode]=\"this.preGeoObject.attributes.code\"\n                       [bboxType]=\"this.geoObjectType.code\"\n                       (onClickEdit)=\"this.onManageGeometryVersions()\"\n                       [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                     </geoobject-editor-map>\n                   </div>\n                 </div>\n           </div>\n        <!-- </div> -->\n    </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { ManageVersionsModalComponent } from './manage-versions-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, PRESENT } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport Utils from '../../utility/Utils';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-shared-attribute-editor',\n    templateUrl: './geoobject-shared-attribute-editor.component.html',\n    styleUrls: ['./geoobject-shared-attribute-editor.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is shared between:\n * - crtable (create-update-geo-object action detail)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget\n * \n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    private bsModalRef: BsModalRef;\n\n    /*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    @Input() preGeoObject: GeoObjectOverTime = null;\n\n    calculatedPreObject: any = {};\n\n    /*\n\t * The state of the GeoObject being modified\n\t */\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    calculatedPostObject: any = {};\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isEditingGeometries = false;\n\n    @Input() isGeometryInlined = false;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n    isValid: boolean = true;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n    @ViewChild( \"attributeForm\" ) attributeForm;\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private datePipe: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private lService: LocalizationService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.preGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\n        if ( this.postGeoObject == null ) {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // Object.assign is a shallow copy. We want a deep copy.\n        }\n        else {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.postGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n        }\n\n        this.attributeForm.statusChanges.subscribe( result => {\n            this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n            this.valid.emit( this.isValid );\n        } );\n\n        if ( this.attributeExcludes != null ) {\n            this.geoObjectAttributeExcludes.push.apply( this.geoObjectAttributeExcludes, this.attributeExcludes );\n\n            if ( !this.isGeometryInlined ) {\n                this.geoObjectAttributeExcludes.push( \"geometry\" );\n            }\n        }\n\n        let geomAttr = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geomAttr = this.geoObjectType.attributes[i];\n            }\n        }\n        if ( geomAttr == null ) {\n            let geometry: Attribute = new Attribute( \"geometry\", \"geometry\", new LocalizedValue( \"Geometry\", null ), new LocalizedValue( \"Geometry\", null ), true, false, false, true );\n            this.geoObjectType.attributes.push( geometry );\n        }\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): void {\n        this.calculatedPreObject = this.calculateCurrent( this.preGeoObject );\n        this.calculatedPostObject = this.calculateCurrent( this.postGeoObject );\n\n        if ( this.geometryEditor != null ) {\n            this.geometryEditor.reload();\n        }\n    }\n\n    calculateCurrent( goot: GeoObjectOverTime ): any {\n      const object = {};\n\n      const time = this.forDate.getTime();\n\n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n          let attr = this.geoObjectType.attributes[i];\n          object[attr.code] = null;\n\n          if ( attr.type === 'local' ) {\n              object[attr.code] = this.lService.create();\n          }\n\n          if ( attr.isChangeOverTime ) {\n            let values = goot.attributes[attr.code].values;\n\n            values.forEach( vot => {\n\n                const startDate = Date.parse( vot.startDate );\n                const endDate = Date.parse( vot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n\n                    if ( attr.type === 'local' ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: JSON.parse( JSON.stringify( vot.value ) )\n                        };\n                    }\n                    else if ( attr.type === 'term' && vot.value != null && Array.isArray( vot.value ) && vot.value.length > 0 ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value[0]\n                        };\n                    }\n                    else {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value\n                        };\n                    }\n                }\n            } );\n          }\n          else {\n              object[attr.code] = goot.attributes[attr.code];\n          }\n      }\n      \n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        let attr = this.geoObjectType.attributes[i];\n        \n        if ( attr.isChangeOverTime && object[attr.code] == null ) {\n          object[attr.code] = {\n            startDate: null,\n            endDate: null,\n            value: \"\"\n          }\n        }\n      }\n\n      return object;\n    }\n\n    formatDate( date: string ): string {\n        if ( date === PRESENT ) {\n            return this.lService.localize(\"changeovertime\", \"present\");\n        }\n\n        return date;\n    }\n\n    handleChangeCode( e: any ): void {\n        this.postGeoObject.attributes.code = this.calculatedPostObject['code'];\n        //        \n        //        console.log(this.calculatedPostObject['code'])\n        //        console.log(e)\n    }\n\n    onManageAttributeVersions( attribute: Attribute ): void {\n        this.bsModalRef = this.modalService.show( ManageVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        // TODO: sending the properties like this is wrong\n        this.bsModalRef.content.geoObjectOverTime = this.postGeoObject;\n        this.bsModalRef.content.geoObjectType = this.geoObjectType;\n        this.bsModalRef.content.isNewGeoObject = this.isNew;\n        this.bsModalRef.content.attribute = attribute;\n        this.bsModalRef.content.onAttributeVersionChange.subscribe( versionObj => {\n            this.calculate();\n        } );\n        this.bsModalRef.content.tfInit();\n    }\n\n    onManageGeometryVersions(): void {\n        let geometry = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geometry = this.geoObjectType.attributes[i];\n            }\n        }\n\n        this.onManageAttributeVersions( geometry );\n    }\n\n    isDifferentText( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null ) {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value.trim() !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    isDifferentValue( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null )\n        {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    onSelectPropertyOption( event: any, option: any ): void {\n        this.currentTermOption = JSON.parse( JSON.stringify( this.modifiedTermOption ) );\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                if ( attr.code === \"status\" ) {\n                    return Utils.removeStatuses( JSON.parse( JSON.stringify( attrOpts ) ) );\n                }\n                else {\n                    return attrOpts;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isStatusChanged( post, pre ) {\n\n        if ( pre != null && post == null ) {\n            return true;\n        }\n\n        if ( pre == null || post == null || pre.length == 0 || post.length == 0 ) {\n            return false;\n        }\n\n        var preCompare = pre;\n        if ( Array.isArray( pre ) ) {\n            preCompare = pre[0];\n        }\n\n        var postCompare = post;\n        if ( Array.isArray( post ) ) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    getTypeDefinition( key: string ): string {\n        // let attrs = this.geoObjectType.attributes;\n\n\n        // attrs.attributes.forEach(attr => {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if ( attr.code === key ) {\n                return attr.type;\n            }\n        }\n\n        return null;\n    }\n\n    public getIsValid(): boolean {\n        return this.isValid;\n    }\n\n    public getGeoObject(): any {\n        return this.postGeoObject;\n\n        //        // The front-end uses the 'yyyy-mm-dd' date format. Our backend expects dates in epoch format.\n        //        var submitGO = JSON.parse( JSON.stringify( this.postGeoObject ) );\n        //        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        //            var attr = this.geoObjectType.attributes[i];\n        //\n        //            if ( attr.type === \"date\" && this.postGeoObject.properties[attr.code] != null ) {\n        //                var parts = this.postGeoObject.properties[attr.code].split( '-' );\n        //                var date = new Date( parts[0], parts[1] - 1, parts[2] );\n        //\n        //                submitGO.properties[attr.code] = date.getTime();\n        //            }\n        //        }\n        //\n        //        return submitGO;\n    }\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\n\nimport { DatePipe } from '@angular/common';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'submit-change-request',\n    templateUrl: './submit-change-request.component.html',\n    styleUrls: []\n} )\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    typeaheadLoading: boolean;\n\n    typeaheadNoResults: boolean;\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n\t/*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    preGeoObject: GeoObjectOverTime = null;\n\n\t/*\n\t * The state of the GeoObject after our Change Request has been approved \n\t */\n    postGeoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private localizeService: LocalizationService ) {\n\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( this.geoObjectId, this.geoObjectType.code ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes( [] ).then( types => {\n            this.geoObjectTypes = types;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n\n\n    private onValidChange( newValid: boolean ) {\n        if ( this.preGeoObject == null ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.geometryEditor != null && !this.geometryEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.attributeEditor != null && !this.attributeEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading( e: boolean ): void {\n        this.typeaheadLoading = e;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.registryService.getGeoObjectOverTime( e.item.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n                this.postGeoObject = JSON.parse( JSON.stringify( this.preGeoObject ) ); // Object.assign is a shallow copy. We want a deep copy.\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    submit(): void {\n\n        let goSubmit: GeoObjectOverTime = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            let goGeometries: GeoObjectOverTime = this.geometryEditor.saveDraw();\n//            goSubmit.geometry = goGeometries.geometry;\n        }\n\n        let actions = [{\n            \"actionType\": \"geoobject/update\", // TODO: account for create\n            \"apiVersion\": \"1.0-SNAPSHOT\", // TODO: make dynamic\n            \"createActionDate\": new Date().getTime(),\n            \"geoObject\": goSubmit,\n            \"contributorNotes\": this.reason\n        }]\n\n        this.changeRequestService.submitChangeRequest( JSON.stringify( actions ) )\n            .then( geoObject => {\n                this.cancel();\n\n                this.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"change.request.success.message\" );\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.isValid = false;\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.preGeoObject = null;\n        this.postGeoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.localizedMessage || err.message );\n        }\n    }\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-input',\n    templateUrl: './localized-input.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedInputComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TreeNode, TreeComponent, TreeDropDirective } from 'angular-tree-component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { HierarchyType, HierarchyNode } from '../../model/hierarchy';\nimport { GeoObjectType } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal'\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\n\nclass Instance {\n    active: boolean;\n    label: string;\n}\n\n@Component( {\n\n    selector: 'hierarchies',\n    templateUrl: './hierarchy.component.html',\n    styleUrls: ['./hierarchy.css']\n} )\n\nexport class HierarchyComponent implements OnInit {\n    instance: Instance = new Instance();\n    hierarchies: HierarchyType[];\n    geoObjectTypes: GeoObjectType[] = [];\n    nodes = [] as HierarchyNode[];\n    currentHierarchy: HierarchyType = null;\n\n    hierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n    geoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild( TreeComponent )\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild( 'nodeMenu' ) public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n    @ViewChild( 'leafMenu' ) public leafMenuComponent: ContextMenuComponent;\n\n    /* \n     * Currently clicked on id for delete confirmation modal \n     */\n    current: TreeNode;\n\n\n    constructor( private hierarchyService: HierarchyService, private modalService: BsModalService,\n        private contextMenuService: ContextMenuService, private changeDetectorRef: ChangeDetectorRef,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.refreshAll( null );\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    public refreshAll( desiredHierarchy ) {\n        this.registryService.init().then( response => {\n            this.localizeService.setLocales( response.locales );\n\n            this.geoObjectTypes = response.types;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            this.setHierarchies( response.hierarchies );\n\n            this.setNodesOnInit( desiredHierarchy );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public excludeHierarchyTypeDeletes( hierarchy: HierarchyType ) {\n        return ( this.hierarchyTypeDeleteExclusions.indexOf( hierarchy.code ) !== -1 );\n    }\n\n    public excludeGeoObjectTypeDeletes( geoObjectType: GeoObjectType ) {\n        return ( this.geoObjectTypeDeleteExclusions.indexOf( geoObjectType.code ) !== -1 );\n    }\n\n    private setNodesOnInit( desiredHierarchy ): void {\n\n        let index = -1;\n\n        if ( desiredHierarchy != null ) {\n            index = this.hierarchies.findIndex( h => h.code === desiredHierarchy.code );\n        }\n        else if ( this.hierarchies.length > 0 ) {\n            index = 0;\n        }\n\n        if ( index > -1 ) {\n            let hierarchy = this.hierarchies[index];\n\n            this.nodes = hierarchy.rootGeoObjectTypes;\n\n            this.currentHierarchy = hierarchy;\n\n            setTimeout(() => {\n                if ( this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n    }\n\n    private setNodesForHierarchy( hierarchyType: HierarchyType ): void {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let hierarchy = this.hierarchies[i];\n            if ( hierarchy.code === hierarchyType.code ) {\n                this.nodes = hierarchyType.rootGeoObjectTypes;\n                this.currentHierarchy = hierarchy;\n                break;\n            }\n        }\n\n        setTimeout(() => {\n            this.tree.treeModel.expandAll();\n        }, 1 )\n    }\n\n    private getHierarchy( hierarchyId: string ): HierarchyType {\n        let target: HierarchyType = null;\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchyId === hierarchy.code ) {\n                target = hierarchy;\n            }\n        } );\n\n        return target;\n    }\n\n    private setHierarchies( data: HierarchyType[] ): void {\n        let hierarchies: HierarchyType[] = [];\n        data.forEach(( hierarchyType, index ) => {\n\n            if ( hierarchyType.rootGeoObjectTypes.length > 0 ) {\n                hierarchyType.rootGeoObjectTypes.forEach( rootGeoObjectType => {\n                    this.processHierarchyNodes( rootGeoObjectType );\n                } )\n            }\n\n            hierarchies.push( hierarchyType );\n\n        } );\n\n        this.hierarchies = hierarchies\n\n        this.hierarchies.sort(( a, b ) => {\n            if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n            else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n            else return 0;\n        } );\n    }\n\n    private updateHierarchy( code: string, rootGeoObjectTypes: HierarchyNode[] ): void {\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchy.code === code ) {\n                hierarchy.rootGeoObjectTypes = rootGeoObjectTypes;\n            }\n        } )\n    }\n\n    /**\n     * Set properties required by angular-tree-component using recursion.\n     */\n    private processHierarchyNodes( node: HierarchyNode ) {\n        node.label = this.getHierarchyLabel( node.geoObjectType );\n\n        node.children.forEach( child => {\n            this.processHierarchyNodes( child );\n        } )\n    }\n\n    private getHierarchyLabel( geoObjectTypeCode: string ): string {\n        let label: string = null;\n        this.geoObjectTypes.forEach( function( gOT ) {\n            if ( gOT.code === geoObjectTypeCode ) {\n                label = gOT.label.localizedValue;\n            }\n        } );\n\n        return label;\n    }\n\n    public handleOnMenu( node: any, $event: any ): void {\n\n        this.contextMenuService.show.next( {\n            contextMenu: ( node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent ),\n            event: $event,\n            item: node,\n        } );\n        $event.preventDefault();\n        $event.stopPropagation();\n    }\n\n    public treeNodeOnClick( node: TreeNode, $event: any ): void {\n\n        node.treeModel.setFocusedNode( node );\n\n        if ( node.treeModel.isExpanded( node ) ) {\n            node.collapse();\n        }\n        else {\n            node.treeModel.expandAll();\n        }\n    }\n\n    options = {\n        //\t\t  allowDrag: (node:TreeNode) => node.isLeaf,\n        //\t\t  allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n        // return true / false based on element, to.parent, to.index. e.g.\n        //\t\t\t    return parent.hasChildren;\n        //\t\t\t  },\n        displayField: \"label\",\n        actionMapping: {\n            mouse: {\n                click: ( tree: TreeComponent, node: TreeNode, $event: any ) => {\n                    this.treeNodeOnClick( node, $event );\n                },\n                contextMenu: ( tree: any, node: any, $event: any ) => {\n                    this.handleOnMenu( node, $event );\n                }\n            }\n        },\n        mouse: {\n            //\t            drop: (tree: TreeComponent, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n            //\t              console.log('drag', from, to); // from === {name: 'first'}\n            //\t              // Add a node to `to.parent` at `to.index` based on the data in `from`\n            //\t              // Then call tree.update()\n            //\t            }\n        }\n    };\n\n    public hierarchyOnClick( event: any, item: any ) {\n        let hierarchyId = item.code;\n\n        this.currentHierarchy = item;\n\n        this.nodes = [];\n\n        if ( this.getHierarchy( hierarchyId ).rootGeoObjectTypes.length > 0 ) {\n            // TODO: should rootGeoObjectTypes be hardcoded to only one entry in the array?\n            this.nodes.push( this.getHierarchy( hierarchyId ).rootGeoObjectTypes[0] );\n\n            setTimeout(() => {\n                if ( this && this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n\n        if ( this.tree ) {\n            this.tree.treeModel.update();\n        }\n    }\n\n    public createHierarchy(): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n\n        ( <CreateHierarchyTypeModalComponent>this.bsModalRef.content ).onHierarchytTypeCreate.subscribe( data => {\n\n            this.hierarchies.push( data );\n        } );\n    }\n\n    public deleteHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeHierarchyType( data );\n        } );\n    }\n\n    public editHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.edit = true;\n        this.bsModalRef.content.hierarchyType = obj;\n        this.bsModalRef.content.onHierarchytTypeCreate.subscribe( data => {\n            let pos = this.getHierarchyTypePosition( data.code );\n\n            this.hierarchies[pos].label = data.label;\n            this.hierarchies[pos].description = data.description;\n        } );\n    }\n\n    public removeHierarchyType( code: string ): void {\n        this.hierarchyService.deleteHierarchyType( code ).then( response => {\n\n            let pos = this.getHierarchyTypePosition( code );\n            this.hierarchies.splice( pos, 1 );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public createGeoObjectType(): void {\n        this.bsModalRef = this.modalService.show( CreateGeoObjTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\n        ( <CreateGeoObjTypeModalComponent>this.bsModalRef.content ).onGeoObjTypeCreate.subscribe( data => {\n            this.geoObjectTypes.push( data );\n        } );\n    }\n\n    public deleteGeoObjectType( obj: GeoObjectType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeGeoObjectType( data );\n        } );\n    }\n\n    public removeGeoObjectType( code: string ): void {\n        this.registryService.deleteGeoObjectType( code ).then( response => {\n\n            let pos = this.getGeoObjectTypePosition( code );\n            this.geoObjectTypes.splice( pos, 1 );\n\n            //          const parent = node.parent;\n            //          let children = parent.data.children;\n            //\n            //          parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            //\n            //          if ( parent.data.children.length === 0 ) {\n            //              parent.data.hasChildren = false;\n            //          }\n            //\n            //        this.tree.treeModel.update();\n            //this.setNodesOnInit();\n\n            this.refreshAll( this.currentHierarchy );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public manageGeoObjectType( geoObjectType: GeoObjectType ): void {\n\n        this.bsModalRef = this.modalService.show( ManageGeoObjectTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'manage-geoobjecttype-modal'\n        } );\n\n        geoObjectType.attributes.sort(( a, b ) => {\n            if ( a.label.localizedValue < b.label.localizedValue ) return -1;\n            else if ( a.label.localizedValue > b.label.localizedValue ) return 1;\n            else return 0;\n        } );\n        this.bsModalRef.content.geoObjectType = geoObjectType;\n\n        ( <ManageGeoObjectTypeModalComponent>this.bsModalRef.content ).onGeoObjectTypeSubmitted.subscribe( data => {\n\n            let position = this.getGeoObjectTypePosition( data.code );\n            if ( position ) {\n                this.geoObjectTypes[position] = data;\n            }\n        } );\n    }\n\n    private getHierarchyTypePosition( code: string ): number {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let obj = this.hierarchies[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    public addChildAndRootToHierarchy(): void {\n        const that = this;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = \"ROOT\";\n        this.bsModalRef.content.toRoot = true;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public addChildToHierarchy( parent: TreeNode ): void {\n        const that = this;\n        that.current = parent;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = parent;\n        this.bsModalRef.content.toRoot = false;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n            const d = that.current.data;\n\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public deleteTreeNode( node: TreeNode ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + node.data.label + ']';\n        this.bsModalRef.content.data = node;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeTreeNode( data );\n        } );\n    }\n\n    public removeTreeNode( node: TreeNode ): void {\n        this.hierarchyService.removeFromHierarchy( this.currentHierarchy.code, node.parent.data.geoObjectType, node.data.geoObjectType ).then( data => {\n\n            if ( node.parent.data.geoObjectType == null ) {\n                this.nodes = [];\n                // this.refreshAll(null);\n                //return;\n            }\n\n            const parent = node.parent;\n            let children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            if ( parent.data.children.length === 0 ) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n\n            // Update the available GeoObjectTypes\n            this.changeDetectorRef.detectChanges()\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public isActive( item: any ) {\n        return this.currentHierarchy === item;\n    };\n\n    public onDrop( $event: any ) {\n        // Dropped $event.element\n        this.removeTreeNode( $event.element )\n    }\n\n    public allowDrop( element: Element ) {\n        // Return true/false based on element\n        return true;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-page',\n    templateUrl: './data-page.component.html',\n    styleUrls: ['./data-page.css']\n} )\nexport class DataPageComponent implements OnInit {\n\n\tcontent: string = \"SPREADSHEET\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SPREADSHEET\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n\t\t}\n\t\telse if(content === \"SHAPEFILE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"shapefile.title\");\n\t\t}\n\t\telse if(content === \"EXPORT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"io.export.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, ViewChild, SimpleChanges, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObject, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, ParentTreeNode } from '../../model/registry';\n\nimport { SimpleEditControl } from './simple-edit-control/simple-edit-control.component';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { Map, LngLatBounds, NavigationControl, ImageSource } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport * as mapboxgl from 'mapbox-gl';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor-map[geometryType]',\n    templateUrl: './geoobject-editor-map.component.html',\n    styleUrls: ['./geoobject-editor-map.component.css']\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. We will invoke this event with GeoJSON when the user makes an edit to the geometry.\n     */\n    @Output() geometryChange = new EventEmitter<any>();\n\n    /*\n     * Optional. If specified, we will diff based on this GeoJSON geometry.\n     */\n    @Input() preGeometry: any;\n\n    /*\n     * Optional. If we are read-only, this will be displayed as a layer. If we are not, it will be editable.\n     */\n    @Input() postGeometry: any;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    /*\n     * Optional. If specified, we will display an edit button on the map, and when it is clicked we will emit this event.\n     */\n    @Output() onClickEdit = new EventEmitter<void>();\n\n    @ViewChild( \"simpleEditControl\" ) simpleEditControl;\n\n    @ViewChild( \"mapDiv\" ) mapDiv;\n\n    map: Map;\n\n    editingControl: any;\n\n    constructor( private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            //this.registryService.getGeoObjectOverTime( \"22\", \"Province\" )\n            //.then( geoObject => {\n\n            ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\n\n            this.mapDiv.nativeElement.id = Math.floor( Math.random() * ( 899999 ) ) + 100000;\n\n            this.map = new Map( {\n                container: this.mapDiv.nativeElement.id,\n                style: 'mapbox://styles/mapbox/satellite-v9',\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            } );\n\n            this.map.on( 'load', () => {\n                this.initMap();\n            } );\n\n            this.map.on( 'draw.create', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.delete', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.update', () => {\n                this.onValidChange();\n            } );\n\n            //} ).catch(( err: HttpErrorResponse ) => {\n            //    this.error( err );\n            //} );\n        }, 10 );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['preGeometry'] || changes['postGeometry'] ) {\n            this.reload();\n        }\n    }\n\n    public reload(): void {\n        if ( this.map != null ) {\n            this.removeLayers();\n            this.addLayers();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    getIsValid(): boolean {\n        if ( !this.readOnly ) {\n            let isValid: boolean = false;\n\n            if ( this.editingControl != null ) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if ( featureCollection.features.length > 0 ) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    private onValidChange(): void {\n        this.geometryChange.emit( this.saveDraw() );\n    }\n\n    initMap(): void {\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            this.onValidChange();\n        } );\n\n        this.addLayers();\n\n        this.zoomToBbox();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        if ( !this.readOnly ) {\n            this.enableEditing();\n        }\n        else {\n            this.addEditButton();\n        }\n\n        this.onValidChange();\n    }\n\n    addEditButton(): void {\n        this.simpleEditControl.editEmitter.subscribe( versionObj => {\n            this.onClickEdit.emit();\n        } );\n\n        this.map.addControl( this.simpleEditControl );\n    }\n\n    enableEditing(): void {\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: false,\n                    polygon: true,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: true,\n                    line_string: false,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: true,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        this.map.addControl( this.editingControl );\n\n        if ( this.postGeometry != null ) {\n            this.editingControl.add( this.postGeometry );\n        }\n    }\n\n    removeSource( prefix: string ): void {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.map.removeLayer( sourceName + \"-polygon\" );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.map.removeLayer( sourceName + \"-point\" );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\" ) {\n            this.map.removeLayer( sourceName + \"-line\" );\n        }\n\n        this.map.removeSource( sourceName );\n    }\n\n    removeLayers(): void {\n        if ( this.map.getSource( \"pre-geoobject\" ) ) {\n            this.removeSource( \"pre\" );\n        }\n        if ( this.map.getSource( \"post-geoobject\" ) ) {\n            this.removeSource( \"post\" );\n        }\n    }\n\n    addLayers(): void {\n        if ( this.preGeometry != null ) {\n            this.renderGeometryAsLayer( this.preGeometry, \"pre\", \"#EFA22E\" )\n        }\n        if ( this.readOnly && this.postGeometry != null ) {\n            this.renderGeometryAsLayer( this.postGeometry, \"post\", \"#3368EF\" );\n        }\n    }\n\n    renderGeometryAsLayer( geometry: any, prefix: string, color: string ) {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        this.map.addSource( sourceName, {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            // Polygon Layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-polygon\",\n                \"type\": \"fill\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7,\n                },\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            // Point layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-point\",\n                \"type\": \"circle\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": '#FFFFFF'\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.map.addLayer( {\n                \"id\": sourceName + \"-line\",\n                \"source\": sourceName,\n                \"type\": \"line\",\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            } );\n        }\n\n        ( <any>this.map.getSource( sourceName ) ).setData( geometry );\n    }\n\n    zoomToBbox(): void {\n        if ( this.bboxCode != null && this.bboxType != null ) {\n            if ( this.bboxDate == null ) {\n                this.registryService.getGeoObjectBounds( this.bboxCode, this.bboxType ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n            else {\n                this.registryService.getGeoObjectBoundsAtDate( this.bboxCode, this.bboxType, this.bboxDate ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n        }\n    }\n\n    saveDraw(): any {\n        if ( this.editingControl != null ) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if ( featureCollection.features.length > 0 ) {\n\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if ( this.geometryType === \"MULTIPOLYGON\" ) {\n                    let polygons = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPolygon' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                polygons.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            polygons.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: 'MultiPolygon'\n                    };\n                }\n                else if ( this.geometryType === \"MULTIPOINT\" ) {\n                    let points = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPoint' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                points.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            points.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: 'MultiPoint'\n                    };\n                }\n                else if ( this.geometryType === \"MULTILINE\" ) {\n                    let lines = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiLineString' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                lines.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            lines.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: 'MultiLineString'\n                    };\n                }\n                else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n\n            return this.postGeometry;\n        }\n\n        return this.postGeometry;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n        console.log( \"ERROR\", err );\n\n        // Handle error\n        //if (err !== null) {\n        //    this.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n        //    this.bsModalRef.content.message = (err.localizedMessage || err.message);\n        //}\n    }\n\n\n}\n","export interface MessageContainer {\n    setMessage( message: string );\n}\n\nexport class LocaleValue {\n    locale: string;\n    value: string;\n    \n    constructor( locale: string, value: string ) {\n        this.locale = locale;\n        this.value = value;\n    }\n}\n\nexport class LocalizedValue {\n    localizedValue: string;\n    localeValues: LocaleValue[];\n    \n    constructor( localizedValue: string, localeValues: LocaleValue[] ) {\n        this.localizedValue = localizedValue;\n        this.localeValues = localeValues;\n    }\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'change-request-page',\n    templateUrl: './change-request-page.component.html',\n    styleUrls: ['./change-request-page.css']\n} )\nexport class ChangeRequestPageComponent implements OnInit {\n\n\tcontent: string = \"SUBMIT\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"MANAGE\") : this.renderContent(\"SUBMIT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SUBMIT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.page.title\");\n\t\t}\n\t\telse if(content === \"MANAGE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.table.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport { EventService } from '../../../shared/service/event.service';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { LocalizationManagerService } from '../../service/localization-manager.service';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { NewLocaleModalComponent } from './new-locale-modal.component';\n\ndeclare var acp: any;\n\n@Component( {\n\n    selector: 'localization-manager',\n    templateUrl: './localization-manager.component.html',\n    styleUrls: []\n} )\nexport class LocalizationManagerComponent implements OnInit {\n\n\n\n    constructor( private router: Router, private eventService: EventService, private http: HttpClient, private localizationManagerService: LocalizationManagerService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    showNewLocaleModal() {\n        let bsModalRef = this.modalService.show( NewLocaleModalComponent, { backdrop: true } );\n    }\n\n    importLocalization( event: any ) {\n        let fileList: FileList = event.target.files;\n        if ( fileList.length > 0 ) {\n            let file: File = fileList[0];\n            let formData: FormData = new FormData();\n            formData.append( 'file', file, file.name );\n\n            let headers = new HttpHeaders();\n\n            this.eventService.start();\n\n            this.http.post( acp + \"/localization/importSpreadsheet\", formData, { headers: headers } )\n                .toPromise()\n                .then( response => {\n                    this.eventService.complete();\n                    this.error( { message: \"Import success\", error: {} } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    console.log( err )\n                    this.eventService.complete();\n                    this.error( err );\n                } );\n        }\n    }\n\n    exportLocalization() {\n        //this.localizationManagerService.exportLocalization();\n        window.location.href = acp + \"/localization/exportSpreadsheet\";\n    }\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component( {\n    selector: 'master-list-manager',\n    templateUrl: './master-list-manager.component.html',\n    styleUrls: ['./master-list-manager.css']\n} )\nexport class MasterListManagerComponent implements OnInit {\n    message: string = null;\n    lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[];\n    \n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor( public service: RegistryService, private modalService: BsModalService, private router: Router,\n        private localizeService: LocalizationService, authService: AuthService ) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n        this.service.getMasterLists().then( response => {\n\n            this.localizeService.setLocales( response.locales );\n\n            this.lists = response.lists;\n            \n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show( PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.onMasterListChange.subscribe( list => {\n            this.lists.push( { label: list.displayLabel.localizedValue, oid: list.oid, createDate: list.createDate, lastUpdateDate: list.lastUpdateDate } );\n        } );\n    }\n\n    onView( code: string ): void {\n        this.router.navigate( ['/registry/master-list-history/', code] )\n    }\n\n    onEdit( pair: { label: string, oid: string } ): void {\n        this.service.getMasterList( pair.oid ).then( list => {\n\n            this.bsModalRef = this.modalService.show( PublishModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            } );\n            this.bsModalRef.content.edit = true;\n            this.bsModalRef.content.master = list;\n            this.bsModalRef.content.onMasterListChange.subscribe( ret => {\n                pair.label = ret.displayLabel.localizedValue;\n            } );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onDelete( list: { label: string, oid: string } ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + list.label + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n         this.bsModalRef.content.onConfirm.subscribe( data => {\n             this.service.deleteMasterList( list.oid ).then( response => {\n                 this.lists = this.lists.filter(( value, index, arr ) => {\n                     return value.oid !== list.oid;\n                 } );\n\n             } ).catch(( err: HttpErrorResponse ) => {\n                 this.error( err );\n             } );\n         } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GeoObjectType, MasterList } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'publish-modal',\n    templateUrl: './publish-modal.component.html',\n    styleUrls: []\n} )\nexport class PublishModalComponent implements OnInit {\n    message: string = null;\n    master: MasterList;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onMasterListChange: Subject<MasterList>;\n\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onMasterListChange = new Subject();\n\n        if ( this.master == null || !this.readonly ) {\n            this.iService.listGeoObjectTypes( true ).then( types => {\n                this.types = types;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n\n            this.master = {\n                oid: null,\n                typeCode: '',\n                displayLabel: this.lService.create(),\n                code: '',\n                representativityDate: null,\n                publishDate: null,\n                listAbstract: '',\n                process: '',\n                progress: '',\n                accessConstraints: '',\n                useConstraints: '',\n                acknowledgements: '',\n                disclaimer: '',\n                contactName: '',\n                organization: '',\n                telephoneNumber: '',\n                email: '',\n                hierarchies: [],\n\t\t\t\tleaf: false\n            };\n        }\n\n\n    }\n\n    getIsDisabled(event):boolean {\n        let elClasses = event.target.classList;\n        for(let i=0; i<elClasses.length; i++){\n            let c = elClasses[i];\n            if(c === 'disabled'){\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onChange(): void {\n\n        if ( this.master.typeCode != null && this.master.typeCode.length > 0 ) {\n            this.iService.getHierarchiesForType( this.master.typeCode, true ).then( hierarchies => {\n                this.master.hierarchies = hierarchies;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.master.hierarchies = [];\n        }\n    }\n\n    onSubmit(): void {\n        this.service.createMasterList( this.master ).then( response => {\n\n            this.onMasterListChange.next( response );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Progress } from '../../model/progress';\nimport { ProgressService, IProgressListener } from '../../service/progress.service';\n\n@Component({\n  \n  selector: 'progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styles: [\n    '.progress-overlay { background-color: #CCCCCC; position: absolute; display: block;opacity: 0.8;z-index: 99999 !important;}',\n    '.progress-div { width: 100%; margin-left: 0; padding-left: 25%; padding-right: 25%; margin-top: 30% }'\n  ]\n})\nexport class ProgressBarComponent implements OnInit, IProgressListener {\n  public showIndicator: boolean = false;\n\n  public prog:Progress = {\n    current:0,\n    total:1,\n    description:\"Initializing\"      \n  };\n\n  constructor(private service: ProgressService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.prog = {\n      current:0,\n      total:1,\n      description:\"Initializing\"      \n    };\t  \n    \n    this.showIndicator = true;    \n  }\n  \n  progress(progress:Progress):void {\n    this.prog = progress;\n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { ExportFormatModalComponent } from './export-format-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ProgressService } from '../../../shared/service/progress.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { GeoObjectEditorComponent } from '../geoobject-editor/geoobject-editor.component';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'master-list',\n    templateUrl: './master-list.component.html',\n    styleUrls: []\n} )\nexport class MasterListComponent implements OnInit {\n    message: string = null;\n    list: MasterListVersion = null;\n    p: number = 1;\n    current: string = '';\n    filter: { attribute: string, value: string, label: string }[] = [];\n    selected: string[] = [];\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 100,\n        results: []\n    };\n    sort = { attribute: 'code', order: 'ASC' };\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    public searchPlaceholder = \"\";\n\n    private isAdmin: boolean;\n    private isMaintainer: boolean;\n    private isContributor: boolean;\n\n\n    constructor( public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private router: Router,\n        private modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService ) {\n\n        this.searchPlaceholder = localizeService.decode( \"masterlist.search\" );\n\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get( 'oid' );\n\n        this.service.getMasterListVersion( oid ).then( version => {\n            this.list = version;\n            this.list.attributes.forEach( attribute => {\n                attribute.isCollapsed = true;\n            } );\n\n            this.onPageChange( 1 );\n        } );\n    }\n\n    onPageChange( pageNumber: number ): void {\n\n        this.message = null;\n\n        this.service.data( this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort ).then( page => {\n            this.page = page;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    //    onSearch(): void {\n    //        this.filter = this.current;\n    //\n    //        this.onPageChange( 1 );\n    //    }\n\n    onSort( attribute: { name: string, label: string } ): void {\n        if ( this.sort.attribute === attribute.name ) {\n            this.sort.order = ( this.sort.order === 'ASC' ? 'DESC' : 'ASC' );\n        }\n        else {\n            this.sort = { attribute: attribute.name, order: 'ASC' };\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    clearFilters(): void {\n        this.list.attributes.forEach( attr => {\n            attr.search = null;\n        } );\n\n        this.filter = [];\n        this.selected = [];\n\n        this.onPageChange( 1 );\n    }\n\n    toggleFilter( attribute: any ): void {\n        attribute.isCollapsed = !attribute.isCollapsed;\n    }\n\n    getValues( attribute: any ): void {\n        return Observable.create(( observer: any ) => {\n            this.message = null;\n\n            // Get the valid values\n            this.service.values( this.list.oid, attribute.search, attribute.name, attribute.base, this.filter ).then( options => {\n                options.unshift( { label: '[' + this.localizeService.decode( \"masterlist.nofilter\" ) + ']', value: null } );\n\n                observer.next( options );\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        } );\n    }\n\n\n    handleDateChange( attribute: any ): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter( f => f.attribute !== attribute.base );\n        this.selected = this.selected.filter( s => s !== attribute.base );\n\n        if ( attribute.value != null && ( attribute.value.start !== '' || attribute.value.end !== '' ) ) {\n\n            let label = '[' + attribute.label + '] : [';\n\n            if ( attribute.value.start != null ) {\n                label += attribute.value.start;\n            }\n\n            if ( attribute.value.start != null && attribute.value.end != null ) {\n                label += ' - ';\n            }\n\n            if ( attribute.value.end != null ) {\n                label += attribute.value.end;\n            }\n\n            label += ']';\n\n            this.filter.push( { attribute: attribute.base, value: attribute.value, label: label } );\n            this.selected.push( attribute.base );\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    handleInputChange( attribute: any ): void {\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter( f => f.attribute !== attribute.base );\n        this.selected = this.selected.filter( s => s !== attribute.base );\n\n        if ( attribute.value != null && attribute.value !== '' ) {\n            const label = '[' + attribute.label + '] : ' + '[' + attribute.value + ']';\n\n            this.filter.push( { attribute: attribute.base, value: attribute.value, label: label } );\n            this.selected.push( attribute.base );\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    handleListChange( e: TypeaheadMatch, attribute: any ): void {\n        attribute.value = e.item;\n        attribute.isCollapsed = true;\n\n        // Remove the current attribute filter if it exists\n        this.filter = this.filter.filter( f => f.attribute !== attribute.base );\n        this.selected = this.selected.filter( s => s !== attribute.base );\n\n        this.list.attributes.forEach( attr => {\n            if ( attr.base === attribute.base ) {\n                attr.search = '';\n            }\n        } );\n\n        if ( attribute.value.value != null && attribute.value.value !== '' ) {\n            const label = '[' + attribute.label + '] : ' + '[' + attribute.value.label + ']';\n\n            this.filter.push( { attribute: attribute.base, value: e.item.value, label: label } );\n            this.selected.push( attribute.base );\n            attribute.search = e.item.label;\n        }\n        else {\n            attribute.search = '';\n        }\n\n        this.onPageChange( 1 );\n    }\n\n    isFilterable( attribute: any ): boolean {\n        return attribute.type !== 'none' && ( attribute.dependency.length === 0 || this.selected.indexOf( attribute.base ) !== -1 || this.selected.filter( value => attribute.dependency.includes( value ) ).length > 0 );\n    }\n\n    onEdit( data ): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, { backdrop: true } );\n        editModal.content.configureAsExisting( data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable );\n        editModal.content.setMasterListId( this.list.oid );\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange( this.page.pageNumber );\n        } );\n    }\n\n    onGoto( data ): void {\n        const oid = data.code;\n\n        if ( oid != null && oid.length > 0 ) {\n            window.open( acp + \"/nav/management#/locations/\" + oid, '_blank' );\n        }\n\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        let subscription = Observable.interval( 1000 ).subscribe(() => {\n            this.service.progress( this.list.oid ).then( progress => {\n                this.pService.progress( progress );\n            } );\n        } );\n\n        this.service.publishMasterList( this.list.oid ).finally(() => {\n            subscription.unsubscribe();\n\n            this.pService.complete();\n        } ).toPromise()\n            .then( list => {\n                this.list = list;\n                this.list.attributes.forEach( attribute => {\n                    attribute.isCollapsed = true;\n                } );\n\n                // Refresh the resultSet\n                this.onPageChange( 1 );\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.pService.start();\n    }\n\n    onNewGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, { backdrop: true } );\n        //editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n        editModal.content.configureAsNew( this.list.typeCode, this.list.forDate, this.list.isGeometryEditable );\n        editModal.content.setMasterListId( this.list.oid );\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            this.onPageChange( this.page.pageNumber );\n        } );\n    }\n\n    onExport(): void {\n        this.bsModalRef = this.modalService.show( ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.onFormat.subscribe( format => {\n            if ( format == 'SHAPEFILE' ) {\n                window.location.href = acp + '/master-list/export-shapefile?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent( JSON.stringify( this.filter ) );\n            }\n            else if ( format == 'EXCEL' ) {\n                window.location.href = acp + '/master-list/export-spreadsheet?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent( JSON.stringify( this.filter ) );\n            }\n        } );\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ProgressService } from '../../../shared/service/progress.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'master-list-history',\n    templateUrl: './master-list-history.component.html',\n    styleUrls: []\n} )\nexport class MasterListHistoryComponent implements OnInit {\n    message: string = null;\n    list: MasterList = null;\n    forDate: string = '';\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n\n    constructor( public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private router: Router,\n        private modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService ) {\n\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get( 'oid' );\n\n        this.service.getMasterListHistory( oid ).then( list => {\n            this.list = list;\n        } );\n    }\n\n\n    onEdit( data ): void {\n        // let editModal = this.modalService.show( GeoObjectEditorComponent, { backdrop: true } );\n        // editModal.content.configureAsExisting( data.code, this.list.typeCode, this.list.isGeometryEditable );\n        // editModal.content.setMasterListId( this.list.oid );\n        // editModal.content.setOnSuccessCallback(() => {\n        //     // Refresh the page\n        //     this.onPageChange( this.page.pageNumber );\n        // } );\n    }\n\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.createMasterListVersion( this.list.oid, this.forDate ).then( version => {\n            this.list.versions.push( version );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onViewMetadata( event: any ): void {\n        event.preventDefault();\n\n        this.bsModalRef = this.modalService.show( PublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.readonly = true;\n        this.bsModalRef.content.master = this.list;\n    }\n\n\n    onView( version: MasterListVersion ): void {\n        event.preventDefault();\n\n        this.router.navigate( ['/registry/master-list/', version.oid] )\n    }\n\n    onDelete( version: MasterListVersion ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + version.forDate + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n        this.bsModalRef.content.onConfirm.subscribe( data => {\n            this.service.deleteMasterListVersion( version.oid ).then( response => {\n                this.list.versions = this.list.versions.filter(( value, index, arr ) => {\n                    return value.oid !== version.oid;\n                } );\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n        } );\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.required\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n\n        <div class=\"check-block\">\n         <div (click)=\"toggleIsRequired()\" [ngClass]=\"{'chk-checked' : attribute.required}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n          <span></span>\n         </div>\n    \n         <!-- <label class=\"checkbox-label\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label> -->\n        </div>\n\n      <!-- <span>\n        <input type=\"checkbox\" [(ngModel)]=\"attribute.required\" [disabled]=\"disableCodeField\" name=\"required\">\n      </span> -->\n    </div>\n  </div>\n\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.unique\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n        \n    <!-- <div class=\"form-group\"> -->\n      <!-- <div> -->\n        <div class=\"check-block\">\n         <div (click)=\"toggleIsUnique()\" [ngClass]=\"{'chk-checked' : attribute.unique}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n          <span></span>\n         </div>\n    \n         <!-- <label class=\"checkbox-label\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label> -->\n        </div>\n       <!-- </div> -->\n    <!-- </div> -->\n      \n    <!-- <div class=\"check-block\">\n        <input type=\"checkbox\" class=\"jcf-unselectable chk-area\" [ngClass]=\"{'chk-checked' : attribute.unique}\" [(ngModel)]=\"attribute.unique\" [disabled]=\"disableCodeField\" name=\"unique\">\n        <span class=\"checkmark\"></span>\n    </div> -->\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-text',\n    templateUrl: './localized-text.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedTextComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ImportConfiguration } from '../../../model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ParentTreeNode, GeoObject, HierarchyOverTime } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\n\nimport { ManageParentVersionsModalComponent } from './manage-parent-versions-modal.component';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\n@Component( {\n\n    selector: 'cascading-geo-selector',\n    templateUrl: './cascading-geo-selector.html',\n} )\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n\n    @ViewChild( \"mainForm\" ) mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    constructor( private modalService: BsModalService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach( hierarchy => {\n            const object = {};\n            object['label'] = hierarchy.label;\n            object['code'] = hierarchy.code;\n\n            this.isValid = this.isValid && ( this.hierarchies.length > 0 );\n\n            hierarchy.entries.forEach( pot => {\n                const startDate = Date.parse( pot.startDate );\n                const endDate = Date.parse( pot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n                    let parents = [];\n\n                    hierarchy.types.forEach( type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if ( pot.parents[type.code] != null ) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push( parent );\n                    } );\n\n                    object['parents'] = parents;\n                }\n            } );\n\n            this.cHierarchies.push( object );\n\n        } );\n        \n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions( code: string ): void {\n\n        const hierarchy = this.hierarchies.find( h => h.code === code );\n\n        this.bsModalRef = this.modalService.show( ManageParentVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.init( hierarchy );\n        this.bsModalRef.content.onVersionChange.subscribe( hierarchy => {\n            this.calculate();\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType } from '../../../model/hierarchy';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'create-hierarchy-type-modal',\n    templateUrl: './create-hierarchy-type-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n\n    message: string = null;\n\n    edit: boolean = false;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    constructor( private lService: LocalizationService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"rootGeoObjectTypes\": []\n        };\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if ( this.edit ) {\n            this.hierarchyService.updateHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchyService.createHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType, HierarchyNode } from '../../../model/hierarchy';\nimport { GeoObjectType } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\n\n@Component( {\n    selector: 'add-child-to-hierarchy-modal',\n    templateUrl: './add-child-to-hierarchy-modal.component.html',\n    styleUrls: []\n} )\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n\t /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n\n    public hierarchyType: HierarchyType;\n\n    public nodes: HierarchyNode[];\n\n    public allGeoObjectTypes: GeoObjectType[];\n\n    public selectedGeoObjectType: GeoObjectType;\n\n    private selectUndefinedOptionValue: any;\n\n\tprivate toRoot: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) {\n    }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n    \n    onSelect(value: string): void {\n    \tthis.allGeoObjectTypes.forEach(gObj => {\n    \t\tif(gObj.code === value){\n    \t\t\tthis.selectedGeoObjectType = gObj;\n    \t\t}\n    \t})\n    }\n    \n    handleOnSubmit(): void {\n        this.message = null;\n        \n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy( this.hierarchyType.code, parent, this.selectedGeoObjectType.code ).then( data => {\n            this.onNodeChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n        \n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'create-geoobjtype-modal',\n    templateUrl: './create-geoobjtype-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    constructor( private lService: LocalizationService, private registryService: RegistryService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"geometryType\": \"POINT\",\n            \"frequency\": \"ANNUAL\",\n            \"isLeaf\": false,\n            \"isGeometryEditable\": true,\n            \"attributes\": []\n        };\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType( JSON.stringify( this.geoObjectType ) ).then( data => {\n            this.onGeoObjTypeCreate.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport {  GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, GeoObjectType } from '../../../model/registry';\n\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'manage-geoobjecttype-modal',\n    templateUrl: './manage-geoobjecttype-modal.component.html',\n    styleUrls: ['./manage-geoobjecttype-modal.css']\n} )\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n\n    constructor( public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n      this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe( modalState => {\n            this.modalState = modalState;\n      });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy(){\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the \n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next( data );\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { SpreadsheetModalComponent } from './modals/spreadsheet-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'spreadsheet',\n    templateUrl: './spreadsheet.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n    \n    /*\n     * Currently start date\n     */\n    startDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild( 'myFile' )\n    fileRef: ElementRef;\n\n\n    constructor( private service: IOService, private eventService: EventService, private modalService: BsModalService, private localizationService: LocalizationService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( true ).then( types => {\n            this.types = types;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: acp + '/excel/get-configuration'\n        };\n\n        this.uploader = new FileUploader( options );\n\n        this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n            form.append( 'type', this.code );\n            \n            if ( this.startDate != null ) {\n                form.append( 'startDate', this.startDate );\n            }\n        };\n        this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n            const configuration = JSON.parse( response );\n\n            this.bsModalRef = this.modalService.show( SpreadsheetModalComponent, { backdrop: true } );\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.error( JSON.parse( response ) );\n        }\n    }\n\n    onClick(): void {\n\n        if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n            this.uploader.uploadAll();\n        }\n        else {\n            this.error( {\n                message: this.localizationService.decode( 'io.missing.file' ),\n                error:{},\n            } );\n        }\n    }\n\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n\tconstructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n\t\tprivate localizeService: LocalizationService ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n\t\t\t\tthis.bsModalRef.hide()\n\t\t\t\t\n\t\t\t\tthis.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n\t\t\t    this.bsModalRef.content.message = this.localizeService.decode(\"upload.success.message\");\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelSpreadsheetImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload/ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ShapefileModalComponent } from './modals/shapefile-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'shapefile',\n    templateUrl: './shapefile.component.html',\n    styleUrls: []\n} )\nexport class ShapefileComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * Currently start date\n     */\n    startDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild( 'myFile' )\n    fileRef: ElementRef;\n\n    constructor( private service: IOService, private eventService: EventService, private modalService: BsModalService, private localizationService: LocalizationService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( true ).then( types => {\n            this.types = types;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: acp + '/shapefile/get-shapefile-configuration'\n        };\n\n        this.uploader = new FileUploader( options );\n        this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n            form.append( 'type', this.code );\n\n            if ( this.startDate != null ) {\n                form.append( 'startDate', this.startDate );\n            }\n        };\n        this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n            const configuration = JSON.parse( response );\n\n            this.bsModalRef = this.modalService.show( ShapefileModalComponent, { backdrop: true } );\n            this.bsModalRef.content.configuration = configuration;\n        };\n        this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n            this.error( JSON.parse( response ) );\n        }\n    }\n\n    onClick(): void {\n\n        if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n            this.uploader.uploadAll();\n        }\n        else {\n            this.error( { message: this.localizationService.decode( 'io.missing.file' ), error: {} } );\n        }\n    }\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"upload.success.message\" );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelShapefileImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { IOService } from '../../service/io.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-export',\n    templateUrl: './data-export.component.html',\n    styleUrls: []\n} )\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n\n    constructor( private service: IOService, private modalService: BsModalService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( false ).then( types => {\n            this.types = types;\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onChange( code: string ): void {\n\n        if ( code != null && code.length > 0 ) {\n            this.service.getHierarchiesForType( code, false ).then( hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n\n    }\n\n    onExport(): void {\n\n        if ( this.format == 'SHAPEFILE' ) {\n            window.location.href = acp + '/shapefile/export-shapefile?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n        else if ( this.format == 'EXCEL' ) {\n            window.location.href = acp + '/excel/export-spreadsheet?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n}\n","<!-- <div class=\"new-admin-design-main\" style=\"height: 100vh;\">\n    <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\" style=\"max-height: 100%;\">\n\n        <div class=\"py-5 text-center\">\n            <h2>\n                <localize key=\"change.request.page.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"change.request.page.description\"></localize>\n            </p>\n        </div>\n        <div class=\"row\" style=\"padding: 15px;\">\n            <div class=\"modal-body\"> -->\n\n                <form  class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n                    <fieldset>\n                        <!-- <div class=\"col-md-12\"> -->\n                        <!-- <div *ngIf=\"preGeoObject\"> -->\n                        <div class=\"row-holder\" style=\"min-height:50vh; padding-left: calc(50% - 500Px);\">\n\n                            <div class=\"row-holder\">\n                                <div class=\"label-holder\">\n                                    <label>\n                                        <localize key=\"dropdown.select.geoobjecttype.label\"></localize>\n                                    </label>\n                                </div>\n                                <div class=\"holder\">\n                                    <span class=\"text\">\n                                        <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\"\n                                            [(ngModel)]=\"geoObjectType\" required>\n                                            <!-- <option> <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize> </option> -->\n                                            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n                                        </select>\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div class=\"row-holder\" style=\"overflow: visible;\">\n                                <div class=\"label-holder\">\n                                    <label>\n                                        <localize key=\"dropdown.select.geoobject.label\"></localize>\n                                    </label>\n                                </div>\n                                <div class=\"holder\">\n                                    <span class=\"text\">\n                                        <input type=\"text\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\"\n                                            [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n                                            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\"\n                                            autocomplete=\"off\" required>\n\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div *ngIf=\"preGeoObject\">\n\t                            <geoobject-shared-attribute-editor #attributeEditor (valid)=\"this.onValidChange($event)\"\n\t                                [geoObjectType]=\"this.geoObjectType\" [preGeoObject]=\"this.preGeoObject\"\n\t                                [(postGeoObject)]=\"this.postGeoObject\" [isGeometryInlined]=\"true\"></geoobject-shared-attribute-editor>\n<!-- \n\t                            <geoobject-editor-map #geometryEditor *ngIf=\"this.geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [readOnly]=\"!geoObjectType.isGeometryEditable\" (valid)=\"this.onValidChange()\" [isNew]=\"false\"></geoobject-editor-map>\n -->                                    \n                            </div>\n\n                            <div class=\"row-holder\" style=\"z-index: 0;\">\n                                <div class=\"label-holder\">\n                                    <label>\n                                        <localize key=\"change.request.reason.label\"></localize>\n                                    </label>\n                                </div>\n                                <div class=\"holder\">\n                                    <span class=\"text\">\n                                        <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" name=\"reason-input\" required></textarea>\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div class=\"row-holder\">\n                                <div class=\"label-holder\">\n                                </div>\n                                <div class=\"holder\">\n                                    <div class=\"button-holder\">\n                                        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                            <localize key=\"modal.button.cancel\"></localize>\n                                        </button>\n<!-- \n                                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!this.isValid\">\n                                            <localize key=\"modal.button.submit\"></localize>\n                                        </button>\n -->                                        \n                                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\">\n                                            <localize key=\"modal.button.submit\"></localize>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <!-- </div> -->\n                        <!-- </div> -->\n                    </fieldset>\n                </form>\n            <!-- </div>\n        </div>\n    </div> -->\n<!-- </div> -->\n","<div #mapDiv class=\"map-view-port text-left\" style=\"height:400px;\"></div>\n\n<simple-edit-control #simpleEditControl></simple-edit-control>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-edit-control',\n  templateUrl: './simple-edit-control.component.html',\n})\nexport class SimpleEditControl {\n  elRef: ElementRef\n  \n  @Input() visible = false;\n  \n  @Output() editEmitter = new EventEmitter<void>();\n  \n  constructor(elRef: ElementRef) {\n    this.elRef = elRef;\n  }\n\n  onAdd(map): any {\n    this.visible = true;\n    return this.elRef.nativeElement;\n  }\n  \n  onRemove(map): void {\n    this.elRef.nativeElement.remove();\n  }\n  \n  onClick(): void {\n    this.editEmitter.emit();\n  }\n}\n","import { Component, OnInit, Input, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\n\nimport { GeoObjectType, Attribute, ValueOverTime, GeoObjectOverTime, AttributeTerm, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component( {\n    selector: 'manage-versions-modal',\n    templateUrl: './manage-versions-modal.component.html',\n    styleUrls: [],\n    host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger( 'fadeInOut', [\n                transition( 'void => *', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] ),\n                transition( '* => void', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] )\n            ] )\n        ]]\n} )\nexport class ManageVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    readonly: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onAttributeVersionChange: Subject<GeoObjectOverTime>;\n\n    @Input() attribute: Attribute;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObjectOverTime: GeoObjectOverTime;\n\n    goGeometries: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    newVersion: ValueOverTime;\n\n    editingGeometry: number = -1;\n\n    hasDuplicateDate: boolean = false;\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService,\n        public bsModalRef: BsModalRef, public changeDetectorRef: ChangeDetectorRef ) { }\n\n    ngOnInit(): void {\n\n        this.onAttributeVersionChange = new Subject();        \n    }\n\n    tfInit(): void {\n      if ( this.attribute.code === 'geometry' && this.geoObjectOverTime.attributes[this.attribute.code].values.length === 1 ) {\n        this.editingGeometry = 0;\n      }\n    }\n    \n    geometryChange(vAttribute, event): void {\n      vAttribute.value = event;\n    }\n\n    onDateChange( event: any, vAttribute: ValueOverTime ): any {\n\n        //        console.log( event.currentTarget.value );\n        //\n        //        let dt = new Date( event.currentTarget.value );\n        //let dt = new Date(event);\n\n        let vAttributes = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        //        vAttribute.startDate = Utils.formatDateString( dt );\n\n        this.snapDates( vAttributes );\n\n        //        this.changeDetectorRef.detectChanges();\n    }\n\n    snapDates( votArr: ValueOverTime[] ): void {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data by start date \n        votArr.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n        for ( let i = 1; i < votArr.length; i++ ) {\n            let prev = votArr[i - 1];\n            let current = votArr[i];\n\n            if ( current.startDate ) {\n                prev.endDate = Utils.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n            }\n            else {\n                prev.endDate = PRESENT;\n            }\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( votArr.length > 0 ) {\n            votArr[votArr.length - 1].endDate = PRESENT;\n        }\n    }\n\n    onAddNewVersion(): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null;  // Utils.formatDateString(new Date());\n        vot.endDate = null;  // Utils.formatDateString(new Date());\n\n        if ( this.attribute.type === \"local\" ) {\n            //   vot.value = {\"localizedValue\":null,\"localeValues\":[{\"locale\":\"defaultLocale\",\"value\":null},{\"locale\":\"km_KH\",\"value\":null}]};\n            vot.value = this.lService.create();\n        }\n        else if ( this.attribute.type === 'geometry' ) {\n\n            if ( votArr.length > 0 ) {\n                if ( this.editingGeometry != -1 && this.editingGeometry != null ) {\n                    vot.value = votArr[this.editingGeometry].value;\n                }\n                else {\n                    vot.value = votArr[0].value;\n                }\n            }\n            else {\n                vot.value = { \"type\": this.geoObjectType.geometryType, \"coordinates\": [] };\n\n                if ( this.geoObjectType.geometryType === \"MULTIPOLYGON\" ) {\n                    vot.value.type = \"MultiPolygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POLYGON\" ) {\n                    vot.value.type = \"Polygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POINT\" ) {\n                    vot.value.type = \"Point\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTIPOINT\" ) {\n                    vot.value.type = \"MultiPoint\";\n                }\n                else if ( this.geoObjectType.geometryType === \"LINE\" ) {\n                    vot.value.type = \"Line\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTILINE\" ) {\n                    vot.value.type = \"MultiLine\";\n                }\n            }\n        }\n        else if ( this.attribute.type === 'term' ) {\n            var terms = this.getGeoObjectTypeTermAttributeOptions( this.attribute.code );\n\n            if ( terms.length > 0 ) {\n                vot.value = terms[0].code;\n            }\n        }\n\n        votArr.push( vot );\n\n        if ( this.attribute.code === 'geometry' ) {\n            this.editingGeometry = votArr.length - 1;\n        }\n\n        this.snapDates( votArr );\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    editGeometry( index: number ) {\n        this.editingGeometry = index;\n    }\n\n    getVersionData( attribute: Attribute ) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach( vAttribute => {\n            vAttribute.value.localeValues.forEach( val => {\n                versions.push( val );\n            } )\n        } )\n        return versions;\n    }\n\n    getDefaultLocaleVal( locale: any ): string {\n        let defVal = null;\n\n        locale.localeValues.forEach( locVal => {\n            if ( locVal.locale === 'defaultLocale' ) {\n                defVal = locVal.value;\n            }\n\n        } )\n\n        return defVal;\n    }\n\n    setDateAttribute( vot: ValueOverTime, val: string ): void {\n        vot.value = new Date( val ).getTime().toString()\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if ( attrOpts.length > 0 ) {\n                    if ( attr.code === \"status\" ) {\n                        return Utils.removeStatuses( JSON.parse( JSON.stringify( attrOpts ) ) );\n                    }\n                    else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    remove( version: any ): void {\n\n        let val = this.geoObjectOverTime.attributes[this.attribute.code];\n\n        for ( let i = 0; i < val.values.length; i++ ) {\n            let vals = val.values[i];\n\n            if ( vals.startDate === version.startDate ) {\n                val.values.splice( i, 1 );\n            }\n        }\n\n        this.snapDates( val.values );\n    }\n\n    isChangeOverTime( attr: Attribute ): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach( attribute => {\n            if ( this.attribute.code === attr.code ) {\n                isChangeOverTime = attr.isChangeOverTime\n            }\n        } )\n\n        return isChangeOverTime;\n    }\n\n    onSubmit(): void {\n\n        this.onAttributeVersionChange.next( this.geoObjectOverTime );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n        var newI = -1;\n        for ( var i = 0; i < arr.length; ++i ) {\n            if ( arr[i].code === \"CGR:Status-New\" ) {\n                newI = i;\n                break;\n            }\n        }\n        if ( newI != -1 ) {\n            arr.splice( newI, 1 );\n        }\n\n\n        var pendI = 0;\n        for ( var i = 0; i < arr.length; ++i ) {\n            if ( arr[i].code === \"CGR:Status-Pending\" ) {\n                pendI = i;\n                break;\n            }\n        }\n        if ( pendI != -1 ) {\n            arr.splice( pendI, 1 );\n        }\n\n        return arr;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n    \n}","import { Component, OnInit, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ChangeRequest, PageEvent, AbstractAction, AddChildAction, SetParentAction, CreateGeoObjectAction, RemoveChildAction, UpdateGeoObjectAction } from '../../model/crtable';\n\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ActionDetailModalComponent } from './action-detail/action-detail-modal.component'\n\n@Component( {\n\n    selector: 'request-table',\n    templateUrl: './request-table.component.html',\n    styleUrls: ['./request-table.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class RequestTableComponent {\n\n\tobjectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n\trequests: ChangeRequest[] = [];\n\n\tactions: AbstractAction[] | SetParentAction[] | AddChildAction[] | CreateGeoObjectAction[] | RemoveChildAction[] | UpdateGeoObjectAction[];\n\n\tcolumns: any[] = [];\n\t\n\ttoggleId: string;\n\n\tfilterCriteria: string = 'ALL';\n\n    constructor( private service: ChangeRequestService, private modalService: BsModalService, private localizationService: LocalizationService ) {\n        this.columns = [\n            { name: localizationService.decode( 'change.request.user' ), prop: 'createdBy', sortable: false },\n            { name: localizationService.decode( 'change.request.createDate' ), prop: 'createDate', sortable: false, width: 195 },\n            { name: localizationService.decode( 'change.request.status' ), prop: 'approvalStatus', sortable: false }\n        ];\n\n        this.refresh();\n    }\n\n    refresh(): void {\n\n            this.service.getAllRequests(\"ALL\").then( requests => {\n\n\t\t\t\tthis.requests = requests;\n\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } )\n\n    }\n\n\n    onSelect( selected: any ): void {\n\n\t\t// this.request = selected.selected;\n\n        this.service.getAllActions( selected.selected[0].oid ).then(actions => {\n\t\t\t\n\t\t\tthis.actions = actions;\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.execute( changeRequest.oid ).then( request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n\t}\n\t\n\t// onConfirmChangeRequest(request: any): void {\n\n    //     if ( request != null ) {\n    //         this.service.confirmChangeRequest( request.oid ).then( request => {\n    //             this.request = request;\n\n    //             // TODO: Determine if there is a way to update an individual record\n    //             this.refresh();\n    //         } ).catch(( response: HttpErrorResponse ) => {\n    //             this.error( response );\n    //         } );\n    //     }\n\t// }\n\t\n\tapplyActionStatusProperties(action: any ): void {\n\t\t// var action = JSON.parse(JSON.stringify(this.action));\n\t\t// action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n\t\tthis.service.applyActionStatusProperties(action).then( response => {\n\t\t\t// this.crtable.refresh()\n\t\t} ).catch(( err: HttpErrorResponse ) => {\n\t\t\tthis.error( err );\n\t\t} );\n\t}\n\n    onApproveAll(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.approveAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    onRejectAll(changeRequest: ChangeRequest): void {\n        if ( changeRequest != null ) {\n            this.service.rejectAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n\n                // TODO: Determine if there is a way to update an individual record\n                // this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\t}\n\t\n\trequestTrackBy(index: number, request: ChangeRequest) {\n    \treturn request.oid;\n\t}\n\t\n\ttoggle(event: any, oid: string): void {\n\n\t\tif(!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")){\n\t\t\tif(this.toggleId === oid){\n\t\t\t\tthis.toggleId = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggleId = oid;\n\t\t\t\tthis.onSelect({selected:[{oid:oid}]});\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(criteria: string): void {\n\n\t\t   this.service.getAllRequests(criteria).then( requests => {\n\t\t\t\tthis.requests = requests;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n\t\t\t} )\n\t\t\t\n\t\tthis.filterCriteria = criteria;\n\t}\n\n\tsetActionStatus(action: AbstractAction, status:string): void {\n\t\taction.approvalStatus = status;\n\n\t\tthis.applyActionStatusProperties(action);\n\t}\n\n\tgetActiveDetailComponent(action: AbstractAction) : any {\n      // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n      if (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\n      {\n        // return this.cuDetail;\n      }\n    //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n    //   {\n    //     return this.arDetail;\n\t//   }\n\t\n\t  return action;\n\t}\n\t\n    showActionDetail( action: any ) {\n\n\t\tthis.bsModalRef = this.modalService.show( ActionDetailModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\t\tthis.bsModalRef.content.curAction = action;\n      \n    //   var detail = this.getActiveDetailComponent();\n    //   if (detail != null)\n    //   {\n        // action.onSelect(action);\n    //   }\n    }\n\n}\n","import { GeoObjectOverTime, HierarchyOverTime } from './registry';\n\nexport class ChangeRequest {\n  oid: string;\n  createdBy: string;\n  createDate: Date;\n  approvalStatus: string;\n  statusCode: string;\n  total: number;\n  pending: number;\n}\n\nexport class AbstractAction {\n  approvalStatus: string;\n  createActionDate: Date;\n  label: string;\n  oid: string;\n  actionType: string;\n  actionLabel: string;\n}\n\nexport class UpdateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class AddChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyTypeCode: string;\n  contributorNotes: string;\n  maintainerNotes: string;\n}\n\nexport class RemoveChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyCode: string;\n}\n\nexport class GovernanceStatus {\n  key: string;\n  label: string;\n}\n\nexport class PageEvent {\n  type:string;\n  data:any;\n}\n\nexport class SetParentAction extends AbstractAction {\n  childCode: string;\n  childTypeCode: string;\n  json: HierarchyOverTime[];\n}\n\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { Action } from 'rxjs/scheduler/Action';\nimport { GeoObject, GeoObjectType } from '../../../model/registry';\nimport { CreateUpdateGeoObjectDetailComponent } from './create-update-geo-object/detail.component';\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component( {\n    selector: 'action-detail-modal',\n    templateUrl: './action-detail-modal.component.html',\n    styleUrls: []\n} )\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    @ViewChild( \"cuDetail\" ) cuDetail: ActionDetailComponent;\n    @ViewChild( \"arDetail\" ) arDetail: ActionDetailComponent;\n    @ViewChild( \"spDetail\" ) spDetail: ActionDetailComponent;\n\n    @Input()\n    set curAction( action: any ) {\n        this.action = action;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if ( this.cuDetail != null ) {\n            this.cuDetail.endEdit();\n        }\n\n        if ( this.arDetail != null ) {\n            this.arDetail.endEdit();\n        }\n\n        if ( this.spDetail != null ) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\n\nimport { LocalizationManagerService } from '../../service/localization-manager.service';\n\nimport { EventService } from '../../../shared/service/event.service';\n\nimport { AllLocaleInfo } from '../../model/localization-manager';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\n@Component( {\n    selector: 'new-locale-modal',\n    templateUrl: './new-locale-modal.component.html',\n    styleUrls: []\n} )\nexport class NewLocaleModalComponent {\n\n    allLocaleInfo: AllLocaleInfo;\n    \n    language: string;\n    \n    country: string;\n    \n    variant: string;\n\n    constructor( public bsModalRef: BsModalRef, private localizationManagerService: LocalizationManagerService, private eventService: EventService, private modalService: BsModalService ) { }\n\n    ngOnInit(): void {\n      this.allLocaleInfo = new AllLocaleInfo();\n    \n      this.localizationManagerService.getNewLocaleInfo()\n      .then( allLocaleInfoIN => {\n        this.allLocaleInfo = allLocaleInfoIN;\n        this.eventService.complete();\n      }).catch(( err: HttpErrorResponse) => {\n        console.log(err);\n        \n        this.bsModalRef.hide();\n        this.eventService.complete();\n        this.error( err );\n      });\n    }\n\n    submit(): void {\n      this.eventService.start();\n      \n      this.localizationManagerService.installLocale(this.language, this.country, this.variant)\n      .then( () => {\n        this.eventService.complete();\n        this.bsModalRef.hide();\n      }).catch(( err: HttpErrorResponse) => {\n        console.log(err);\n        \n        this.bsModalRef.hide();\n        this.eventService.complete();\n        this.error( err );\n      });\n    }\n    \n    cancel(): void {\n      this.bsModalRef.hide();\n      \n      \n    }\n    \n    public error( err: HttpErrorResponse ): void {\n      // Handle error\n      if ( err !== null ) {\n          let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n          bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n      }\n    }\n}\n","<div *ngIf=\"showIndicator\" class=\"progress-overlay\" style=\"height: 100%; width: 100%;\">\n  <div class=\"progress-div\">\n    <progressbar class=\"progress-striped active\" [max]=\"prog.total\" [value]=\"prog.current\"><i>{{prog.description}}</i></progressbar>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\n\n\n@Component( {\n    selector: 'export-format-modal',\n    templateUrl: './export-format-modal.component.html',\n    styleUrls: []\n} )\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next( this.format );\n    }\n}\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, ParentTreeNode } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor',\n    templateUrl: './geoobject-editor.component.html',\n    styleUrls: ['./geoobject-editor.component.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n//    /*\n//     * GeoObject Geometry Editor\n//     */\n//    @ViewChild( \"geometryEditor\" ) geometryEditor;\n//\n//    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild( \"parentSelector\" ) parentSelector;\n\n    areParentsValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n    \n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor( private service: IOService, private modalService: BsModalService, public bsModalRef: BsModalRef, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private localizeService: LocalizationService, private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, authService: AuthService ) {\n        \n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n    \n    findVotWithStartDate( votArray, startDate ): any {\n      for (let i: number = 0; i < votArray.length; ++i)\n      {\n        if (votArray[i].startDate === startDate)\n        {\n          return votArray[i];\n        }\n      }\n      \n      return null;\n    }\n\n    setMasterListId( id: string ) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    setOnSuccessCallback( func: Function ) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew( typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        } );\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting( code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject( code, typeCode );\n        this.fetchGeoObjectType( typeCode );\n        this.fetchHierarchies( code, typeCode );\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject( code: string, typeCode: string ) {\n        this.registryService.getGeoObjectOverTime( code, typeCode ).then( geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( geoObject ) ).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n            //this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n            \n            this.goSubmit = this.goPropertiesPost;\n\n//            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then( locales => {\n            this.localizeService.setLocales( locales );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchGeoObjectType( code: string ) {\n        this.registryService.getGeoObjectTypes( [code] )\n            .then( geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n                \n                if (this.goPropertiesPre != null)\n                {\n                  this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null)\n                {\n                  this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if ( !this.geoObjectType.isGeometryEditable ) {\n//                    this.areGeometriesValid = true;\n                }\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( err );\n                //                this.error( err );\n            } );\n    }\n\n    private fetchHierarchies( code: string, typeTypeCode: string ) {\n        this.registryService.getHierarchiesForGeoObject( code, typeTypeCode )\n            .then(( hierarchies: any ) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    getTypeAheadObservable( text, typeCode ) {\n        return Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( text, typeCode ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, ptn: ParentTreeNode ): void {\n        this.registryService.getGeoObjectByCode( e.item.code, ptn.geoObject.properties.type )\n            .then( geoObject => {\n\n                ptn.geoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    private onValidChange() {\n        if ( this.attributeEditor != null ) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n//        if ( this.geometryEditor != null ) {\n//            this.areGeometriesValid = this.geometryEditor.getIsValid();\n//        }\n        if ( this.parentSelector != null ) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n        \n//        console.log(\"Attributes\", this.arePropertiesValid);\n//        console.log(\"Parents\", this.areParentsValid);\n\n//        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage( nextPage: number, force: boolean = false ): void {\n        if ( nextPage === this.tabIndex && !force ) {\n            return;\n        }\n\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n        \n        if (nextPage === 2)\n        {\n          this.isEditingGeometries = true;\n        }\n        else\n        {\n          this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if ( this.attributeEditor != null ) {\n          this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if ( this.parentSelector != null ) {\n          this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        if ( this.isValid ) {\n            this.bsModalRef.hide();\n\n            this.persistModelChanges();\n\n            this.registryService.applyGeoObjectEdit( this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes )\n                .then(() => {\n\n                    if ( this.onSuccessCallback != null ) {\n                        this.onSuccessCallback();\n                    }\n\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n        }\n    }\n}\n","<div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            title=\"<localize key='modal.button.edit'></localize>\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            title=\"<localize key='modal.button.remove'></localize>\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n\n@Component( {\n    selector: 'manage-attributes-modal',\n    templateUrl: './manage-attributes-modal.component.html',\n    styleUrls: ['./manage-attributes-modal.css']\n} )\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy(){\n      this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    editAttribute(attr: Attribute, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":attr, \"termOption\":\"\"})\n    }\n\n    removeAttributeType(attr: Attribute, e: any): void {\n\n      this.confirmBsModalRef = this.modalService.show( ConfirmModalComponent, {\n\t\t  animated: true,\n\t\t  backdrop: true,\n\t\t  ignoreBackdropClick: true,\n\t  } );\n\t  this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + attr.label.localizedValue + ']';\n      this.confirmBsModalRef.content.data = {'attributeType': attr, 'geoObjectType': this.geoObjectType};\n      this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n\t  ( <ConfirmModalComponent>this.confirmBsModalRef.content ).onConfirm.subscribe( data => {\n          this.deleteAttributeType( data.geoObjectType.code, data.attributeType );\n\t  } );\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: Attribute): void {\n\n          this.registryService.deleteAttributeType( geoObjectTypeCode, attr.code ).then( data => {\n            this.onDeleteAttribute.next( data );\n\n            if(data){\n              this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message\" class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                        <error-message [message]=\"message\"></error-message>\n                    </div>\n                </div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\"> \n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <textarea [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\"></textarea>\n    </span>\n  </div>\n</div>\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from '@angular/forms';\n\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator() : ValidatorFn {\n  return (c: AbstractControl) => {\n    if(c.value){\n        let isValid = c.value.indexOf(\" \") === -1;\n        \n        if(isValid) {\n            return null;\n        } else {\n            return {\n                geoObjectAttributeCode: {\n                     valid: false\n                }\n            };\n        }\n    }\n\n  }\n}\n\n\n@Directive({\n  selector: '[geoObjectAttributeCode][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n  ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n  validator: ValidatorFn;\n  \n  constructor() {\n    this.validator = validateGeoObjectAttributeCodeValidator();\n  }\n  \n  validate(c: FormControl) {\n    return this.validator(c);\n  }\n  \n}","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ErrorMessageComponent } from '../../../../shared/component/message/error-message.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, AttributeTerm, AttributeDecimal, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n \n\n@Component( {\n    selector: 'define-attribute-modal-content',\n    templateUrl: './define-attribute-modal-content.component.html',\n    styleUrls: ['./define-attribute-modal-content.css'],\n    animations: [\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    message: string = null;\n    newAttribute: Attribute = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.create.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, \n        private geoObjectTypeManagementService: GeoObjectTypeManagementService, private localizeService: LocalizationService,\n        private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.addAttributeType( this.geoObjectType.code, this.newAttribute ).then( data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    setAttribute(type:string): void {\n        if(type === 'term'){\n            this.newAttribute = new AttributeTerm(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else if(type === 'float') {\n            this.newAttribute = new AttributeDecimal(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else{\n            this.newAttribute = new Attribute(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n\n        this.attributeInputComponent.animate();\n    }\n\n    isFormValid(): boolean {\n        \n        let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        if(isAttrValid){\n            return true;\n        }\n\n        return false;\n    }\n    \n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n   <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { GeoObjectType, AttributeTerm, GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, Term} from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component( {\n    selector: 'term-option-widget',\n    templateUrl: './term-option-widget.component.html',\n    styleUrls: ['./term-option-widget.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms')),\n              transition('show => none', animate('100ms'))\n        ]),\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    state: string = 'none';\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy(){\n    \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n            \n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n            \n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\": \"\"})\n\n    }    \n}\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\n\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n \n@Component( {\n    selector: 'edit-attribute-modal-content',\n    templateUrl: './edit-attribute-modal-content.component.html',\n    styleUrls: ['./edit-attribute-modal-content.css'],\n    animations: [\n        trigger('openClose', \n            [\n                transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":this.attribute, \"termOption\":\"\"};\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.updateAttributeType( this.geoObjectType.code, this.attribute ).then( data => {\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    isFormValid(): boolean {\n        \n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    back(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    <form class=\"modal-form\" #form=\"ngForm\">\n      <div class=\"form-group row\">\n        <label class=\"col-sm-2\">\n          <localize key=\"io.modal.hierarchy\"></localize>\n        </label>\n        <div class=\"col-sm-10\">\n          <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"configuration.hierarchy\" required>\n            <option></option>\n            <option *ngFor=\"let hierarchy of configuration.hierarchies\" value={{hierarchy.code}}>{{hierarchy.label}}</option>\n          </select>\n        </div>\n      </div>\n      <hr />\n      <div class=\"form-group row\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <label class=\"col-sm-2\">{{attribute.label.localizedValue}}</label>\n        <div class=\"col-sm-10\">\n          <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\" [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n            <option></option>\n            <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n          </select>\n        </div>\n      </div>\n      <hr />\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group row\">\n        <label class=\"col-sm-2\">\n          <localize key=\"io.modal.postalCode\"></localize>\n        </label>\n        <div class=\"form-check\">\n          <div class=\"check-block\">\n            <div (click)=\"configuration.postalCode = !configuration.postalCode\" [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\" name=\"postalCode\">\n                <span></span>\n            </div>\n          </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span class=\"ui-button-text\">\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n            <span class=\"ui-button-text\">\n              <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      <div class=\"form-group row\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <label class=\"col-sm-2\"> {{location.label}} </label>\n        <div class=\"col-sm-10\">\n          <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n            <option value=\"\"></option>\n            <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n          </select>\n        </div>\n      </div>\n      <div class=\"form-group row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-info\" role=\"button\">\n            <span class=\"ui-button-text\"><localize key=\"io.back\"></localize></span>\n          </button>\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span class=\"ui-button-text\"><localize key=\"io.cancel\"></localize></span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n            <span class=\"ui-button-text\"><localize key=\"io.ok\"></localize></span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</form>","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span class=\"ui-button-text\">\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span class=\"ui-button-text\">\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span class=\"ui-button-text\">\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span class=\"ui-button-text\">\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm( action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"modal-body\">\n   <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input autofocus type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\" required geoObjectAttributeCode>\n                            </span>\n                        </div>\n                    </div>\n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n\nimport { Step, StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, Term, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n \n@Component( {\n    selector: 'edit-term-option-input',\n    templateUrl: './edit-term-option-input.component.html',\n    styleUrls: [],\n    animations: [\n        trigger('openClose', \n            [\n                transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    @Input() termOption: Term;\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":this.attribute, \"termOption\":\"\"};\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), \"active\":true, \"enabled\":true}\n\n    ]};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.updateAttributeTermTypeOption( this.termOption ).then( data => {\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    isFormValid(): boolean {\n        \n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<!-- <form class=\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable com-runwaysdk-ui-factory-jquery-Dialog com-runwaysdk-ui-factory-runway-Widget ui-dialog-buttons\"> -->\n\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.editGeoObjectType.title\"></localize>\n                {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n\n            <localized-input [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                        <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"frequency\" [(ngModel)]=\"editGeoObjectType.frequency\" disabled>\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                        <option value=\"DAILY\"><localize key=\"georegistry.frequency.daily\"></localize></option>\n                    </select>\n                </div>\n            </div>\n<!-- \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.leafnode\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <i *ngIf=\"editGeoObjectType.isLeaf === 'true'\" class=\"fa fa-check-square\" style=\"color: #6BA542; font-size: 18px; cursor: auto; line-height: 38px;\" aria-hidden=\"true\"></i> <i *ngIf=\"editGeoObjectType.isLeaf === 'false'\" class=\"fa fa-square-o\" style=\"font-size: 18px; cursor: auto; line-height: 38px;\" aria-hidden=\"true\"></i>\n                </div>\n            </div>\n -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : editGeoObjectType.isGeometryEditable}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                        <span></span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group list-group-flush\">\n                                <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li>\n                            </ul>\n\n                            <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\">\n                                <localize key=\"modal.button.manageAttributes\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                    </div>                    \n                    <div class=\"holder\">\n                      <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-primary\" (click)=\"manageAttributes()\">\n                            <localize key=\"modal.button.manageAttributes\"></localize>\n                        </button>\n                    </div>\n                    </div>\n                </div>  -->\n\n            <!-- <div>\n                    <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                    </div>          \n                    <div class=\"holder dataset-attr-holder\" >\n                    <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    </div>\n                </div>       -->\n\n\n            <!-- <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                    </div>                    \n                    <div class=\"holder\">\n                    <i class=\"fa fa-plus\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\"><localize key=\"modal.button.add\"></localize></i>\n                    </div>\n                </div>           -->\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'geoobjecttype-input',\n    templateUrl: './geoobjecttype-input.component.html',\n    styleUrls: ['./geoobjecttype-input.css']\n} )\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange:  EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n    \n    @Input('setGeoObjectType') \n    set in(geoObjectType: GeoObjectType){\n        if(geoObjectType){\n          this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        //   this.geoObjectType = geoObjectType;\n        }\n    }\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizationService: LocalizationService, private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n    }\n\n    ngAfterViewInit() {\n    }\n\n    ngOnDestroy(){\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType( this.editGeoObjectType ).then( geoObjectType => {\n\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n    \n    toggleIsGeometryEditable(): void {\n        this.editGeoObjectType.isGeometryEditable = !this.editGeoObjectType.isGeometryEditable;\n    }\n\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n        \n        // return false;\n\n        return true;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message\" class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                    <error-message [message]=\"message\"></error-message>\n                </div>\n            </div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option, $event)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option, $event)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from '../../../../shared/component/message/error-message.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectType, AttributeTerm, Term, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n@Component( {\n    selector: 'manage-term-options',\n    templateUrl: './manage-term-options.component.html',\n    styleUrls: ['./manage-term-options.css'],\n    animations: [\n        trigger( 'toggleInputs', [\n            state( 'none, void',\n                style( { 'opacity': 0 } )\n            ),\n            state( 'show',\n                style( { 'opacity': 1 } )\n            ),\n            transition( 'none => show', animate( '300ms' ) ),\n            transition( 'show => none', animate( '100ms' ) )\n        ] ),\n        trigger( 'openClose',\n            [\n                transition(\n                    ':enter', [\n                        style( { 'opacity': 0 } ),\n                        animate( '500ms', style( { 'opacity': 1 } ) )\n                    ]\n                ),\n                transition(\n                    ':leave', [\n                        style( { 'opacity': 1 } ),\n                        animate( '0ms', style( { 'opacity': 0 } ) ),\n\n                    ]\n                )]\n        )\n    ]\n} )\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    termOption: Term;\n    state: string = 'none';\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        \"steps\": [\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.geoobjecttype\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.attributes\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.edit.attribute\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.term.options\" ), \"active\": true, \"enabled\": true }\n        ]\r\n    };\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig( this.modalStepConfig );\n        this.termOption = new Term( \"\", this.localizeService.create(), this.localizeService.create() );\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone( event: AnimationEvent ): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if ( this.termOption.code && this.termOption.code.length > 0 ) {\n\n            // If code has a space\n            if ( this.termOption.code.indexOf( \" \" ) !== -1 ) {\n                return false;\n            }\n\n            // If label is only spaces\n            for(let i = 0; i < this.termOption.label.localeValues.length; i++) {\n              if ( this.termOption.label.localeValues[i].value.replace( /\\s/g, '' ).length === 0 ) {\n                return false\n              }                \n            }\n            \n\n            return true;\n        }\n        else if ( this.termOption.code && this.termOption.code.indexOf( \" \" ) !== -1 ) {\n            return false;\n        }\n\n        return false\n    }\n\n    addTermOption(): void {\n\n        this.registryService.addAttributeTermTypeOption( this.attribute.rootTerm.code, this.termOption ).then( data => {\n\n            this.attribute.rootTerm.children.push( data );\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n    deleteTermOption( termOption: Term ): void {\n\n        this.registryService.deleteAttributeTermTypeOption( termOption.code ).then( data => {\n\n            if ( this.attribute.rootTerm.children.indexOf( termOption ) !== -1 ) {\n                this.attribute.rootTerm.children.splice( this.attribute.rootTerm.children.indexOf( termOption ), 1 );\n            }\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    removeTermOption( termOption: Term ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + '[' + termOption.label + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.deleteTermOption( termOption );\n        } );\n    }\n\n    editTermOption( termOption: Term ): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editTermOption, \"attribute\": this.attribute, \"termOption\": termOption } )\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" } )\n    }\n\n    error( err: HttpErrorResponse ): void {\n        if ( err !== null ) {\n            // TODO: add error modal\n            //   this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            //   this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { HierarchyOverTime, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'manage-parent-versions-modal',\n    templateUrl: './manage-parent-versions-modal.component.html',\n    styleUrls: []\n} )\nexport class ManageParentVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onVersionChange: Subject<HierarchyOverTime>;\n\n    hierarchy: HierarchyOverTime = null;\n\n    hasDuplicateDate: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onVersionChange = new Subject();\n\n    }\n\n    init( hierarchy: HierarchyOverTime ): void {\n        this.hierarchy = hierarchy;\n    }\n\n    onAddNewVersion(): void {\n\n        let parents = {};\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parents[current.code] = {};\n        }\n\n        const entry = {\n            startDate: null,\n            endDate: null,\n            parents: parents\n        }\n\n        this.hierarchy.entries.push( entry );\n    }\n\n    remove( entry: any ): void {\n\n        for ( let i = 0; i < this.hierarchy.entries.length; i++ ) {\n            let vals = this.hierarchy.entries[i];\n\n            if ( vals.startDate === entry.startDate ) {\n                this.hierarchy.entries.splice( i, 1 );\n            }\n        }\n\n        this.snapDates();\n    }\n\n    getTypeAheadObservable( date: string, type: any, entry: any, index: number ): Observable<any> {\n\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let hierarchyCode = null;\n\n        if ( index > 0 ) {\n            let pType = this.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if ( parent.geoObject != null && parent.geoObject.properties.code != null ) {\n                hierarchyCode = this.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n            }\n        }\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( entry.parents[type.code].text, geoObjectTypeCode, parentCode, hierarchyCode, date ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, type: any, entry: any, date: string ): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        let parentTypes = [];\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parentTypes.push( current.code );\n\n            if ( current.code === type.code ) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects( e.item.uid, type.code, parentTypes, true, date ).then( ancestors => {\n\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n            for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n                let current = this.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while ( ancestor != null && ancestor.geoObject.properties.type != current.code ) {\n                    if ( ancestor.parents.length > 0 ) {\n                        ancestor = ancestor.parents[0];\n                    }\n                    else {\n                        ancestor = null;\n                    }\n                }\n\n                if ( ancestor != null ) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue;\n                }\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSubmit(): void {\n\n        this.onVersionChange.next( this.hierarchy );\n\n        this.bsModalRef.hide();\n    }\n\n    onDateChange( event: any ): any {\n        this.snapDates();\n    }\n\n    snapDates() {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data\n        this.hierarchy.entries.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n\n        for ( let i = 1; i < this.hierarchy.entries.length; i++ ) {\n            let prev = this.hierarchy.entries[i - 1];\n            let current = this.hierarchy.entries[i];\n\n            prev.endDate = this.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( this.hierarchy.entries.length > 0 ) {\n            this.hierarchy.entries[this.hierarchy.entries.length - 1].endDate = PRESENT;\n        }\n    }\n\n    formatDateString( dateObj: Date ): string {\n        const day = dateObj.getUTCDate();\n\n        return dateObj.getUTCFullYear() + \"-\" + ( dateObj.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [(ngModel)]=\"parent.geoObject.properties.displayLabel.localizedValue\" name=\"{{hierarchy.code}}-{{parent.code}}-input\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Observable } from 'rxjs/Observable';\n\nimport { GeoObjectOverTime, GeoObjectType } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-create-geo-object',\n    templateUrl: './detail.component.html',\n    styleUrls: ['./crtable-detail-create-geo-object.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    readOnly: boolean = true;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if ( this.isNew() ) {\n            this.preGeoObject = this.postGeoObject;\n        }\n\n        this.onSelect( this.action );\n    }\n\n    isNew(): boolean {\n        return ( this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\" );\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n        }\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSelect( action: AbstractAction ) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n            this.registryService.getGeoObjectOverTime( this.postGeoObject.attributes.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( \"Error\", err );\n                this.error( err );\n            } );\n        }\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( true );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( false );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\n\nimport { AddChildAction } from '../../../../model/crtable';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-add-remove-child',\n    templateUrl: './detail.component.html',\n    styleUrls: []\n} )\nexport class AddRemoveChildDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: AddChildAction;\n\n    original: AddChildAction;\n\n    readOnly: boolean = true;\n\n\n    private bsModalRef: BsModalRef;\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.original = Object.assign( {}, this.action );\n    }\n\n    applyAction() {\n        this.changeRequestService.applyAction( this.action ).then( response => {\n            this.original = Object.assign( {}, this.action );\n\n            this.unlockAction();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n\n            this.action = this.original;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n\n    onSelect( action: AddChildAction ) {\n        this.action = action;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Observable } from 'rxjs/Observable';\n\nimport { HierarchyOverTime } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'set-parent-detail',\n    templateUrl: './set-parent-detail.component.html',\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class SetParentDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    hierarchies: HierarchyOverTime[] = [];\n    readOnly: boolean = true;\n\n    bsModalRef: BsModalRef;\n    \n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;    \n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.hierarchies = this.action.json;\n\n        this.onSelect( this.action );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }    \n\n    onSelect( action: AbstractAction ) {\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FileUploadModule } from 'ng2-file-upload/ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { DatePipe } from '@angular/common';\nimport { CustomFormsModule } from 'ng2-validation'\n\nimport { LocalizedInputComponent } from './component/form-fields/localized-input/localized-input.component';\nimport { LocalizedTextComponent } from './component/form-fields/localized-text/localized-text.component';\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { LocalizationManagerComponent } from './component/localization-manager/localization-manager.component';\nimport { CreateHierarchyTypeModalComponent } from './component/hierarchy/modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './component/hierarchy/modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './component/hierarchy/modals/create-geoobjtype-modal.component';\nimport { ManageAttributesModalComponent } from './component/hierarchy/geoobjecttype-management/manage-attributes-modal.component';\nimport { DefineAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component';\nimport { EditAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component';\nimport { ShapefileModalComponent } from './component/importer/modals/shapefile-modal.component';\nimport { AttributesPageComponent } from './component/importer/modals/attributes-page.component';\nimport { LocationPageComponent } from './component/importer/modals/location-page.component';\nimport { LocationProblemPageComponent } from './component/importer/modals/location-problem-page.component';\nimport { LocationProblemComponent } from './component/importer/modals/location-problem.component';\nimport { TermProblemPageComponent } from './component/importer/modals/term-problem-page.component';\nimport { TermProblemComponent } from './component/importer/modals/term-problem.component';\nimport { SpreadsheetModalComponent } from './component/importer/modals/spreadsheet-modal.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { NewLocaleModalComponent } from './component/localization-manager/new-locale-modal.component';\nimport { TermOptionWidgetComponent } from './component/hierarchy/geoobjecttype-management/term-option-widget.component';\nimport { AttributeInputComponent } from './component/hierarchy/geoobjecttype-management/attribute-input.component';\nimport { EditTermOptionInputComponent } from './component/hierarchy/geoobjecttype-management/edit-term-option-input.component';\nimport { ManageTermOptionsComponent } from './component/hierarchy/geoobjecttype-management/manage-term-options.component';\nimport { GeoObjectTypeInputComponent } from './component/hierarchy/geoobjecttype-management/geoobjecttype-input.component';\nimport { ManageGeoObjectTypeModalComponent } from './component/hierarchy/modals/manage-geoobjecttype-modal.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { PublishModalComponent } from './component/master-list/publish-modal.component';\nimport { ExportFormatModalComponent } from './component/master-list/export-format-modal.component';\nimport { RequestTableComponent } from './component/crtable/request-table.component';\nimport { CreateUpdateGeoObjectDetailComponent } from './component/crtable/action-detail/create-update-geo-object/detail.component';\nimport { AddRemoveChildDetailComponent } from './component/crtable/action-detail/add-remove-child/detail.component';\nimport { SetParentDetailComponent } from './component/crtable/action-detail/set-parent/set-parent-detail.component';\nimport { GeoObjectSharedAttributeEditorComponent } from './component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component';\nimport { ManageVersionsModalComponent } from './component/geoobject-shared-attribute-editor/manage-versions-modal.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { GeoObjectEditorComponent } from './component/geoobject-editor/geoobject-editor.component';\nimport { GeoObjectEditorMapComponent } from './component/geoobject-editor-map/geoobject-editor-map.component';\nimport { SimpleEditControl } from './component/geoobject-editor-map/simple-edit-control/simple-edit-control.component';\nimport { CascadingGeoSelector } from './component/cascading-geo-selector/cascading-geo-selector';\nimport { ManageParentVersionsModalComponent } from './component/cascading-geo-selector/manage-parent-versions-modal.component';\nimport { ActionDetailModalComponent } from './component/crtable/action-detail/action-detail-modal.component';\nimport { ShapefileComponent } from './component/importer/shapefile.component';\nimport { SpreadsheetComponent } from './component/importer/spreadsheet.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\n\nimport { GeoObjectAttributeCodeValidator } from './factory/form-validation.factory';\n\nimport { GeoObjectTypePipe } from './pipe/geoobjecttype.pipe';\nimport { GeoObjectAttributeExcludesPipe } from './pipe/geoobject-attribute-excludes.pipe';\nimport { ToEpochDateTimePipe } from './pipe/to-epoch-date-time.pipe';\nimport { RegistryService } from './service/registry.service';\nimport { HierarchyService } from './service/hierarchy.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\nimport { ChangeRequestService } from './service/change-request.service';\nimport { IOService } from './service/io.service';\nimport { MapService } from './service/map.service';\nimport { GeoObjectTypeManagementService } from './service/geoobjecttype-management.service'\n\nimport { RegistryRoutingModule } from './registry-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n\n@NgModule( {\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n//        ModalModule.forRoot(),\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        CollapseModule,\n        NgxPaginationModule,\n        CustomFormsModule,\n        SharedModule,\n        RegistryRoutingModule        \n    ],\n    declarations: [\n        HierarchyComponent,\n        LocalizationManagerComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        AddRemoveChildDetailComponent,\n        SetParentDetailComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        NewLocaleModalComponent,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        ManageVersionsModalComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        ManageParentVersionsModalComponent,        \n        ActionDetailModalComponent,\n        HierarchyComponent,\n        ShapefileComponent,\n        SpreadsheetComponent,\n        DataExportComponent,\n        MasterListComponent,\n        MasterListHistoryComponent,\n        // Master List screens\n        MasterListManagerComponent,\n        PublishModalComponent,\n        ExportFormatModalComponent,\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        LocalizationManagerService,\n        ChangeRequestService,\n        IOService,\n        GeoObjectTypeManagementService,\n        RegistryService,\n        DatePipe,\n        ToEpochDateTimePipe,\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        NewLocaleModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        ManageVersionsModalComponent,\n        ManageParentVersionsModalComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        PublishModalComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n    ]\n} )\nexport class RegistryModule { }\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <loading-bar></loading-bar>\n  \n  <div id=\"app-container\" class=\"container-fluid\">\n  \n  <!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n    \n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.types.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <!-- to filter out already assigned types use this pipe > geoobjecttype:nodes -->\n          <li class=\"list-group-item\" *ngFor=\"let type of geoObjectTypes\">\n            {{type.label.localizedValue}} <i *ngIf=\"type.isLeaf === 'true'\" class=\"fa fa-leaf\" style=\"font-size:15px;cursor:auto;margin-left:5px;\" aria-hidden=\"true\"></i> \n            <i class=\"fa fa-pencil clickable pull-right\" (click)=\"manageGeoObjectType(type)\"> </i> \n            <i class=\"fa fa-times delete-btn clickable pull-right\" *ngIf=\"!excludeGeoObjectTypeDeletes(type)\" (click)=\"deleteGeoObjectType(type)\"></i> \n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"createGeoObjectType()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n        \n      </div>\n    \n    \n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <li class=\"list-group-item clickable\" [ngClass]=\"{active: isActive(hierarchy)}\" *ngFor=\"let hierarchy of hierarchies;\" (click)=\"hierarchyOnClick($event,hierarchy)\">\n            <i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}} \n            <i class=\"fa fa-pencil pull-right clickable\" (click)=\"editHierarchyType(hierarchy)\"> </i>            \n            <i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\" class=\"fa fa-times delete-btn clickable pull-right\" (click)=\"deleteHierarchyType(hierarchy)\"></i> \n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" (click)=\"createHierarchy()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <h3> \n            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n            <span *ngIf=\"currentHierarchy\">{{currentHierarchy.label.localizedValue}}</span>\n        </h3>\n        <hr>\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n          <div>\n            <button type=\"submit\" class=\"btn btn-primary\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n          </div>\n        </div>\n      </div>\n            \n    </div>\n    \n  </div>\n  \n  <context-menu #nodeMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"addChildToHierarchy($event.item)\">\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>\n    </ng-template>\n  </context-menu>\n  \n  <context-menu #leafMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>  {{item?.data.label.localizedValue}}\n    </ng-template>\n  </context-menu>\n\n</div>\n","import { LocalizedValue } from \"../../shared/model/core\";\n\nexport class HierarchyType {\n  code: string;\n  description: LocalizedValue;\n  label: LocalizedValue;\n  rootGeoObjectTypes: HierarchyNode[];\n}\n\nexport class Hierarchy {\n  id: string;\n  label: string;\n}\n\n//export class HierarchyNodeType {\n//  id: string;\n//  name: string;\n//}\n\nexport class HierarchyNode {\n\tgeoObjectType: string;\n    children: HierarchyNode[];\n    label: string; // added for angular-tree-widget\n//    id: string; // added for angular-tree-widget\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!-- <div id=\"app-container\" class=\"container-fluid\"> -->\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">Import spreadsheet</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">Import shapefile</a> \n\t\t\t\t\t<a style=\"font-size:20px;\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'EXPORT'}\" (click)=\"renderContent('EXPORT')\">Export data</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<spreadsheet *ngIf=\"content === 'SPREADSHEET'\"></spreadsheet>\n\t\t\t\t\t<shapefile *ngIf=\"content === 'SHAPEFILE'\"></shapefile>\n\t\t\t\t\t<data-export *ngIf=\"content === 'EXPORT'\"></data-export>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n    <!-- </div> -->\n</div>\n","\n<form #form=\"ngForm\">\n    <div class=\"form-group row\" *ngIf=\"types\">\n        <!-- <div class=\"col-md-12\"> -->\n        <label class=\"col-md-3 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                <option></option>\n                <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n            </select>\n        </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"file\"> <localize key=\"io.spreadsheet\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n        </div>\n    </div>\n\n\n    <div class=\"form-group row\">\n        <div class=\"button-holder col-md-12 text-right\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n        </div>\n    </div>\n</form>\n\n","<form #form=\"ngForm\">\n    <div class=\"form-group row\" *ngIf=\"types\">\n        <label class=\"col-md-3 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n        <div class=\"col-md-9\">\n            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                <option></option>\n                <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n            </select>\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\"></div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"file\"> <localize key=\"io.shapefile\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <div class=\"button-holder col-md-12 text-right\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n        </div>\n    </div>\n</form>\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'MANAGE'}\" (click)=\"renderContent('MANAGE')\">Manage</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isContributor\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SUBMIT'}\" (click)=\"renderContent('SUBMIT')\">Submit</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<submit-change-request *ngIf=\"content === 'SUBMIT'\"></submit-change-request>\n\t\t\t\t\t<request-table *ngIf=\"content === 'MANAGE'\"></request-table>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n        </div>\n    </div>\n</div>\n","<div *ngIf=\"this.visible\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button class=\"fa fa-pencil-square-o\" style=\"color: black; font-size: 18px;\" title=\"location.management.editing | localize\" (click)=\"this.onClick();\"></button>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'geoObjectAttributeExcludesFilter',\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n       \n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","<!-- <div class=\"row text-center\">\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"change.request.title\"></localize>\n        </h2>\n    </div>\n</div> -->\n\n<!-- <div class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            <localize key=\"change.request.table.title\"></localize>\n        </h3>\n    </div>\n</div> -->\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\t\t<div class=\"form-group button-row\">\n\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" >\n\t\t\t\t<localize key=\"change.request.all.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.pending.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.accepted.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;\" >\n\t\t\t\t<localize key=\"change.request.rejected.filter.link\"></localize>\n\t\t\t</a>\n\n\t\t</div>\n\n\t\t<hr style=\"border-top:solid 3px #6BA542\" />\n\n\t</div>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\n\t<table class=\"table\">\n\t\t<thead>\n\t\t\t<tr style=\"height: 50px;color: grey;\">\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n\t\t\t\t<!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n        <tbody>\n\t\t\t<ng-template ngFor let-req [ngForOf]=\"requests\" [ngForTrackBy]=\"requestTrackBy\">\n\t\t\t\t<tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n                \t<td class=\"col-md-4\">\n\t\t\t\t\t\t<h5><strong>{{req.createdBy}}</strong></h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n\t\t\t\t\t\t {{req.createDate}}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\">\n\t\t\t\t\t\t<h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n\t\t\t\t\t\t\t <strong>{{req.approvalStatus}}</strong>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!-- <td class=\"col-md-3\">\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onConfirmChangeRequest(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t</button>\t\n\t\t\t\t\t</td> -->\n\t\t\t\t\t<td class=\"col-md-1\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\">\n            \t\t<td colspan=\"5\" >\n\n\t\t\t\t\t\t<div class=\"row\" style=\"margin:0;\">\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\n\t\t\t\t\t\t\t\t<div *ngFor=\"let action of actions\" class=\"action-card\" [ngClass]=\"{'status-pending-container':action.approvalStatus === 'PENDING', 'status-accepted-container':action.approvalStatus === 'ACCEPTED', 'status-rejected-container':action.approvalStatus === 'REJECTED'}\" style=\"margin-bottom:10px; background-color:white;\"> \n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"margin:0; padding-top:5px; padding-bottom:5px;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-3\" style=\"border-right:2px grey solid; height:50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-circle\" style=\"float:left; line-height: 50px;\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"vertical-center\" style=\"margin:0; float:left; padding-left:20px;\">{{req.createdBy}}</h4>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" style=\"height: 50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"fa fa-refresh vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"fa fa-plus vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"fa fa-link vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"fa fa-chain-broken vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Update <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ]</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Create <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ] </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.SetParentAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set parents of <b>{{action.childCode}}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set <b>{{action.childTypeCode}}</b> as a child of <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Remove <b>{{action.childTypeCode}}</b> from <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-4\" style=\"height: 50px;text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t\t<h4 *ngIf=\"req.approvalStatus !== 'PENDING'\" class=\"vertical-center\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" style=\"margin: 0;\">{{action.approvalStatus}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'ACCEPTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'ACCEPTED')\" class=\"btn btn-primary vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.accept.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'ACCEPTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'REJECTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'REJECTED')\" class=\"btn btn-danger vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.reject.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'REJECTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'PENDING'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'PENDING')\" class=\"btn btn-warning vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.pending.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'PENDING'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"height: 150px;border-top: 1px grey solid;margin:0;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.contributorNotes\" readonly=\"true\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.maintainerNotes\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-2\" style=\"height:100%;\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" (click)=\"showActionDetail(action)\" class=\"btn btn-default vertical-center\" style=\"width:100%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.action.details.label\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> <!-- END action-card -->\n\n\t\t\t\t\t\t\t\t<!-- <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\">Change Request Notes</label>\n\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" value=\"\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t</div>\t -->\n\n\t\t\t\t\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onApproveAll(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll(req)\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\t\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.changes.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</td>\n        \t\t</tr>\n\t\t\t</ng-template>\n        </tbody>\n\t</table>\n\t</div>\t \n</div>\n\n\n\n\n<!-- <div *ngIf=\"request != null\" class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            Change request detail\n        </h3>\n    </div>\n</div> -->\n\n<!-- <div *ngIf=\"request != null\" class=\"row\">\n\n    <div class=\"col-md-12\" style=\"margin-top:40px;padding:20px;border:solid 1px lightgrey;background:#fafafa;\">\n        <h3>\n            <localize key=\"change.request.detail.title\"></localize>\n        </h3>\n        <table class=\"table table-bordered table-striped\">\n            <thead>\n                <tr>\n                    <th>Create Date</th>\n                    <th>\n                        <localize key=\"change.request.user\"></localize>\n                    </th>\n                    <th>\n                        <localize key=\"change.request.status\"></localize>\n                    </th>\n                    <th>\n                        <localize key=\"change.request.total\"></localize>\n                    </th>\n                    <th>\n                        <localize key=\"change.request.pending\"></localize>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>{{request.createDate}}</td>\n                    <td>{{request.createdBy}}</td>\n                    <td>{{request.approvalStatus}}</td>\n                    <td>{{request.total}}\n                        <button type=\"submit\" (click)=\"onClick($event)\" class=\"btn btn-primary\" style=\"height: 25px;padding: 0;margin-left: 10px;\"\n                            role=\"button\">\n                            <localize key=\"change.request.link\"></localize>\n                        </button>\n                    </td>\n                    <td>{{request.pending}}</td>\n                </tr>\n            </tbody>\n        </table>\n\n\n        <div *ngIf=\"request.statusCode === 'PENDING'\">\n\n\n            <div class=\"form-group button-row\">\n\n                <div class=\"\">\n                    <div style=\"background:#f1f1f1;padding: 10px;width: fit-content;\">\n                        <h3 style=\"margin-top: 5px;\"> <localize key=\"change.request.detail.bulk.action.label\"></localize> </h3>\n                        <button type=\"submit\" (click)=\"onExecute()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"request.pending > 0\">\n                            <localize key=\"change.request.execute\"></localize>\n                        </button>\n                        <button type=\"submit\" (click)=\"onApproveAll()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"change.request.approveAll\"></localize>\n                        </button>\n                        <button type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"change.request.rejectAll\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div> -->","<div class=\"new-admin-design-main\">\n    <!-- <div class=\"row\"> -->\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container\">\n        <h2>\n            <localize key=\"localization-manager.title\"></localize>\n        </h2>\n\n        <label><a href=\"https://terraframe.atlassian.net/wiki/spaces/GGR/pages/816021527/Localization\" target=\"_blank\">\n                <localize key=\"localization-manager.viewDoc1\"></localize>\n            </a>\n            <localize key=\"localization-manager.viewDoc2\"></localize>\n        </label>\n\n        <div class=\"row\" style=\"padding: 15px;\">\n\n            <div class=\"col-md-4\">\n                <div class=\"row\">\n                    <h3>\n                        <localize key=\"localization-manager.importButton\"></localize>\n                    </h3>\n                    <div>\n                        <!-- <button type=\"submit\" class=\"btn btn-primary\" (click)=\"importLocalization()\"><localize key=\"localization-manager.importButton\"></localize></button> -->\n                        <input class=\"ghost-input\" type=\"file\" (change)=\"importLocalization($event)\" placeholder=\"<localize key='localization.manager.input.placeholder.uploadFile'></localize>\"\n                            accept=\".xlsx,\" required />\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"col-md-4\">\n\n                <div class=\"row\">\n                    <h3>\n                        <localize key=\"localization-manager.installLocale\"></localize>\n                    </h3>\n                    <div class=\"btn-holder\">\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"showNewLocaleModal()\" >\n                            <localize key=\"localization-manager.installLocale\"></localize>\n                        </button>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"col-md-4\">\n                <div class=\"row\">\n                    <h3>\n                        <localize key=\"localization-manager.exportButton\"></localize>\n                    </h3>\n                    <div class=\"btn-holder\">\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"exportLocalization()\">\n                            <localize key=\"localization-manager.exportButton\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","export class LocaleInfo {\n  key: string;\n  label: string;\n}\n\nexport class AllLocaleInfo {\n  countries: LocaleInfo[];\n  languages: LocaleInfo[];\n}","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"masterlist.manager.title\"></localize>\n            </h2>\n        </div>\n        <div style=\"margin-top: 30px;margin-bottom: 30px;\" class=\"row\">\n            <div class=\"col-md-12\">\n                <div *ngIf=\"isAdmin || isMaintainer\" >\n                    <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"hierarchy.management.button.create\"></localize>                                      \n                    </button>                                \n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <table class=\"table\"> \n                        <thead> \n                            <tr> \n                                <th style=\"width:70%;\">\n                                  <localize key=\"masterlist.menu\"></localize>                                      \n                                </th> \n                                <!-- <th *ngIf=\"isAdmin || isMaintainer\" style=\"width:30%;\">\n                                    <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary pull-right\" role=\"button\">\n                                      <localize key=\"hierarchy.management.button.create\"></localize>                                      \n                                    </button>                                \n                                </th> -->\n                            </tr> \n                        </thead> \n                        <tbody> \n                            <tr *ngFor=\"let list of lists; let i = index;\"> \n                                <td style=\"width:70%; vertical-align: middle;\">\n                                    <a [routerLink]=\"'/registry/master-list-history/' + list.oid\" routerLinkActive=\"active\">{{list.label}}</a>\n                                </td> \n                                <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:30%;text-align: right;\">                                \n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"modal.button.view\"></localize></button>\n                                    <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"modal.button.edit\"></localize></button>\n                                    <button type=\"submit\" (click)=\"onDelete(list)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button>\n                                </td> \n                            </tr> \n                        </tbody> \n                    </table>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar></progress-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" style=\"padding: 30px 0 0 0;\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <a [routerLink]=\"'/registry/master-list-history/' + list.masterlist\">\n                  <i class=\"fa fa-arrow-left\"></i> <localize key=\"masterlist.back\"></localize>\n                </a>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel.localizedValue}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n            <!-- <div class=\"col-md-12\" *ngIf=\"list\"> -->\n            <!-- <div class=\"row form-group\"> -->\n            <!-- <div class=\"col-sm-1\">\n\t\t\t<label>\n\t\t\t\t<localize key=\"masterlist.field\"></localize>\n\t\t\t</label>\n\t\t\t</div> -->\n\n            <div class=\"col-md-6\">\n                <h4>\n                    <localize key=\"masterlist.publishDate\"></localize>\n                    : {{list.publishDate}}\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : {{list.forDate}}\n                </h4>\n            </div>\n            <div class=\"col-md-6\" style=\"text-align: right;\">\n                <!-- <h4>Master List Controls</h4> -->\n                <button type=\"submit\" (click)=\"clearFilters()\" class=\"btn btn-default\" role=\"button\">\n                    <localize key=\"masterlist.clearFilters\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"masterlist.newGeoObject\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                    <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                    <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                </button>\n                <button *ngIf=\"isMaintainer\" type=\"submit\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"masterlist.publish\"></localize>\n                </button>\n\n            </div>\n        </div>\n\n        <!--\n\t\t<div class=\"row form-group\">\n\t\t\t<div class=\"col-md-6\"></div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t<div class=\"input-group\">\n\t\t\t\t<div class=\"submit-form\">\n\t\t\t\t\t<input [(ngModel)]=\"current\" name=\"current\" type=\"text\" class=\"form-control search-input\" placeholder=\"{{searchPlaceholder}}...\" />\n\t\t\t\t</div>\n\t\t\t\t<span class=\"input-group-btn\">\n\t\t\t\t<button class=\"btn btn-default search-input-button\" type=\"submit\" (click)=\"onSearch()\">\n\t\t\t\t\t<i class=\"fa fa-search\"></i>\n\t\t\t\t</button>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t-->\n\n        <!-- <div class=\"row form-group\">\n\t\t\t<pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\t\t</div> -->\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th *ngIf=\"!list.leaf\" style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.edit.column\"></localize></th>\n                            <th *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\" [typeaheadAsync]=\"true\" [typeahead]=\"getValues(attribute)\" (typeaheadOnSelect)=\"handleListChange($event, attribute)\" [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td *ngIf=\"!list.leaf\" style=\"width: 3%; text-align: center;\" class=\"label-column\"><a class=\"fa fa-map-marker\" (click)=\"onGoto(result)\"></a></td>\n                            <td style=\"width: 3%\" class=\"label-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(result)\"></a></td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar></progress-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n        <div class=\"row\" style=\"padding: 30px 0 0 0;\">\n            <div class=\"col-md-12\">\n                <a [routerLink]=\"'/registry/master-lists'\">\n                  <i class=\"fa fa-arrow-left\"></i> <localize key=\"masterlist.back\"></localize>\n                </a>\n            </div>\n        </div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"masterlist.manager.title\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"list\" class=\"row\">\n            <div class=\"col-md-12\">\n                <h3>\n                    {{list.displayLabel.localizedValue}}\n                </h3>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row\">\n            <div class=\"col-md-12\">\n                <h5>\n                    <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                </h5>\n            </div>\n        </div>\n\n        <div *ngIf=\"list && (isMaintainer || isAdmin)\" style=\"margin-top: 30px;margin-bottom: 30px;\" class=\"row\">\n\n            <div class=\"col-md-12\">\n                <form #myForm=\"ngForm\">\n                    <div class=\"form-group\">\n                        <label for=\"forDate\" style=\"display: block;margin-bottom:0;\"><localize key=\"masterlist.publishingFor\"></localize></label>\n                        <input id=\"forDate\" type=\"date\" name=\"forDate\" [(ngModel)]=\"forDate\" required>\n\n                        <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                            <localize key=\"masterlist.publishNewVersion\"></localize>\n                        </button>\n                    </div>\n                </form>\n            </div>\n\n        </div>\n\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table\">\n                    <thead>\n                        <tr>\n                            <!-- <th *ngFor=\"let attribute of history.history\" class=\"label-column\">\n\n\t\t\t\t\t\t\t\t<a (click)=\"\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{history.displayLabel}} </a> \n\n                            </th> -->\n\n                            <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                            <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                            <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.createDate\"></localize></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                        <tr *ngFor=\"let version of list.versions\">\n                            <td style=\"width: 70%\">\n                                <div class=\"button-holder\">\n                                    <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"modal.button.view\"></localize></button>\n<!-- \n                                    <button type=\"submit\" (click)=\"onEdit(version)\" class=\"btn btn-primary\" role=\"button\">Edit</button>\n -->                                \n                                    <button *ngIf=\"isMaintainer || isAdmin\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button>\n                                </div>\n                            </td>\n                            <td style=\"width: 15%\" class=\"label-column\">\n                                {{ version.forDate }}\n                            </td>\n                            <td style=\"width: 15%\" class=\"label-column\">\n                                {{ version.createDate }}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n\n\n    </div>\n    <!-- </div> -->\n</div>\n","<form class=\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable com-runwaysdk-ui-factory-jquery-Dialog com-runwaysdk-ui-factory-runway-Widget ui-dialog-buttons\">\n  \n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n    \n    <error-message [message]=\"message\"></error-message>\n    \n    <div class=\"form-group\">\n    \n      <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n        <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n        <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n        <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n          {{geoObjType.label.localizedValue}}\n        </option>\n      </select>\n    \n    </div>\n    \n    <div class=\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\">\n      <div class=\"ui-dialog-buttonset\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span class=\"ui-button-text\"><localize key=\"modal.button.cancel\"></localize></span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary btn ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span class=\"ui-button-text\"><localize key=\"modal.button.ok\"></localize></span>\n        </button>\n      </div>\n    </div>\n  \n  </div>\n</form>\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable com-runwaysdk-ui-factory-jquery-Dialog com-runwaysdk-ui-factory-runway-Widget ui-dialog-buttons\">\n  \n  <div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n    \n    <div class=\"form-group\">\n      <div>\n         <label for=\"codeInput\"><localize key=\"data.property.label.code\"></localize></label>\n         <input  [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\" required>\n      </div>\n    </div>\n    <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n      <label><localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})</label>\n      <input  [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\" required>\n    </div>\n    <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.description.localeValues\">\n      <div >\n         <label><localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})</label>\n        <input  [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\" class=\"form-control\" >\n       </div>\n    </div>\n    <div class=\"form-group\">   \n      <label for=\"geometryType\"><localize key=\"data.property.label.geometryType\"></localize></label>\n      <select  class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required>\n        <option></option>\n        <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option>\n      </select>\n    </div>\n    <div class=\"form-group\">   \n      <label for=\"frequency\"><localize key=\"data.property.label.frequency\"></localize></label>\n      <select  class=\"select-area\" name=\"frequency\" [(ngModel)]=\"geoObjectType.frequency\" required>\n        <option></option>\n        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n        <option value=\"DAILY\"><localize key=\"georegistry.frequency.daily\"></localize></option>\n      </select>\n    </div>\n<!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->    \n\t\n    <div class=\"form-group\">\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize></label>\n        </div>\n    </div>\n\t\n\t\n\t<div class=\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\">\n\t\t<div class=\"ui-dialog-buttonset\">\n\t\t\t<div class=\"button-holder\">\n\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n\t\t\t\t\t<localize key=\"modal.button.cancel\"></localize>\n\t\t\t\t</button>\n\t\t\t\t<button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\" style=\"padding: 4px 18px;\">\n\t\t\t\t\t<localize key=\"modal.button.ok\"></localize>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n  </div>\n</form>\n","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]'\n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","<form class=\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable com-runwaysdk-ui-factory-jquery-Dialog com-runwaysdk-ui-factory-runway-Widget ui-dialog-buttons\">\n  \n  <div class=\"modal-body\">\n    \n    <error-message [message]=\"message\"></error-message>\n\n    <div class=\"form-group\">\n      <label for=\"codeInput\"><localize key=\"data.property.label.code\"></localize></label>\n      <input  [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\" [disabled]=\"edit\" required>\n    </div>\n    <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n      <label for=\"labelInput\"><localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})</label>\n      <input  [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\" required>\n    </div>\n    <div class=\"form-group\"  *ngFor=\"let localeValue of hierarchyType.description.localeValues\">\n      <label for=\"descriptionInput\"><localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})</label>\n      <input  [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\" class=\"form-control\"  >\n    </div>\n\t\n\t<div class=\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\">\n\t\t<div class=\"ui-dialog-buttonset\">\n\t\t\t<div class=\"button-holder\">\n\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n\t\t\t\t\t<localize key=\"modal.button.cancel\"></localize>\n\t\t\t\t</button>\n\t\t\t\t<button type=\"submit\" [disabled]=\"hierarchyType.code.length < 1\" class=\"btn btn-primary\" (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n\t\t\t\t\t<localize key=\"modal.button.ok\"></localize>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\t\t\t\t\n  </div>\n</form>\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a (click)=\"toggle()\"> <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span *ngIf=\"show\">\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","<div class=\"confirm-modal ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable com-runwaysdk-ui-factory-jquery-Dialog com-runwaysdk-ui-factory-runway-Widget ui-dialog-buttons\" tabindex=\"-1\" role=\"dialog\">\n  <div class=\"ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix\">\n    <span id=\"ui-id-1\" class=\"ui-dialog-title\"><localize key=\"new-locale.title\"></localize></span>\n  </div>\n    \n  <div class=\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\">\n    <div>\n      <label><localize key=\"new-locale.language\"></localize></label>\n\t\t\t<select [(ngModel)]=\"language\">\n\t\t\t  <option *ngFor=\"let lang of allLocaleInfo.languages\" [ngValue]=\"lang.key\">{{lang.label}}</option>\n\t\t\t</select>\n    </div>\n    \n    <div>\n      <label><localize key=\"new-locale.country\"></localize></label>\n      <select [(ngModel)]=\"country\">\n        <option *ngFor=\"let count of allLocaleInfo.countries\" [ngValue]=\"count.key\">{{count.label}}</option>\n      </select>\n    </div>\n    \n    <div>\n      <label><localize key=\"new-locale.variant\"></localize></label>\n      <input type=\"text\" [(ngModel)]=\"variant\"/>\n    </div>\n  \n    <div class=\"ui-dialog-buttonset\">\n      <button type=\"button\" (click)=\"cancel()\" class=\"btn ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n        <span class=\"ui-button-text\"><localize key=\"new-locale.cancel\"></localize></span>\n      </button>\n      <button type=\"button\" (click)=\"submit()\" class=\"btn btn-primary ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n        <span class=\"ui-button-text\"><localize key=\"new-locale.submit\"></localize></span>\n      </button>\n    </div>\n  </div>\n</div>  ","\n<form class=\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable com-runwaysdk-ui-factory-jquery-Dialog com-runwaysdk-ui-factory-runway-Widget ui-dialog-buttons\">\n     \n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n  \n  <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\"></manage-attributes-modal>\n  \n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" ></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" ></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n \n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\" ></edit-term-option-input>\n \n</form>","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #versionsform=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\">\n\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"width: 100%;border: none;\">\n                    <div *ngIf=\"geoObjectOverTime\" >\n\n                        <div class=\"panel\" style=\"box-shadow: none;\">\n                            <div class=\"panel-body\">\n                                <ul class=\"list-group\">\n                                    <!-- <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> -->\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        \n                                        <div *ngIf=\"attribute.type !== 'geometry'\">\n                                                <table class=\"table table-striped\"> \n                                                    <thead style=\"font-size: 14px;\"> \n                                                        <tr> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                            <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                            <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                                        </tr> \n                                                    </thead> \n\n                                                    <tbody *ngIf=\"attribute.type === 'local'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\" >\n                                                            <td >\n                                                                <table style=\"width: 100%;\">\n                                                                    <tr *ngFor=\"let loc of vAttribute.value.localeValues; let idx = index;\" > \n                                                                        <td style=\"vertical-align: bottom; width: 35%;padding: 5px;\">\n                                                                            <h5>{{loc.locale}}</h5>\n                                                                            <input type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"loc.value = $event\" [attr.required]=\"loc.locale === 'defaultLocale'\">\n                                                                            <div class=\"form-input-validation-error-message-wrapper\">\n                                                                                <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">Value is required.</p>\n                                                                            </div>\n                                                                        </td> \n                                                                    </tr>\n                                                                </table>\n                                                            </td>\n\n                                                            <td style=\"vertical-align: middle; width: 35%;padding: 5px;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate_' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                                <div class=\"form-input-validation-error-message-wrapper\">\n                                                                    <p *ngIf=\"!vAttribute.startDate\" class=\"error-message\">Start date is required.</p>\n                                                                </div>\n                                                            </td> \n                                                            <td style=\"vertical-align: middle; width: 20%;padding: 5px;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle; width: 10%;padding: 5px; text-align: center;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n\n                                                    <!-- TODO: This isn't getting the options on load -->\n                                                    <tbody *ngIf=\"attribute.type === 'term'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <!-- <h5>{{loc.locale}}</h5> -->\n                                                                <!-- <input type=\"text\" class=\"form-control\" id=\"loc-val-{{i}}\" name=\"loc-val-{{i}}\" [(ngModel)]=\"version.value\" (ngModelChange)=\"version.value = $event\"> -->\n                                                                <select id=\"mod-{{attribute.code}}\" [name]=\"'mod-term-' + i + '-' + attribute.code\" class=\"select-area\" style=\"float:none;\" [(ngModel)]=\"vAttribute.value\">\n                                                                    <option value=\"\" ></option>\n                                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attribute.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                                </select>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'character'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'date'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"date\" class=\"form-control\" [name]=\"'char-val-' + i\" [ngModel]=\"vAttribute.value | date:'yyyy-MM-dd'\" (ngModelChange)=\"setDateAttribute(vAttribute, $event)\" required> \n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'boolean'\">\n\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === true\" [value]=\"true\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\">\n                                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                                </label>\n\n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === false\"  [value]=\"false\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\">\n                                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                                </label>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n\n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'float'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'integer'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td style=\"vertical-align: bottom;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n                                            </table>\n                                        </div> \n\n                                        <div *ngIf=\"attribute.type === 'geometry'\">\n                                           <table class=\"table table-striped\">\n                                             <thead style=\"font-size: 14px;\">\n                                               <th style=\"width:60%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                               <th style=\"width:20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                               <th style=\"width:10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                               <th style=\"width: 10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                             </thead>\n                                             <tbody style=\"text-align: center;\">\n                                               <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\">\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <button *ngIf=\"this.editingGeometry != i\" class=\"btn\" (click)=\"editGeometry(i)\" role=\"button\"><localize key=\"changeovertime.manageVersions.geometry.edit\"></localize></button>\n                                                   <geoobject-editor-map *ngIf=\"this.editingGeometry === i\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" (geometryChange)=\"this.geometryChange(vAttribute, $event);\" [readOnly]=\"!geoObjectType.isGeometryEditable\" [postGeometry]=\"vAttribute.value\" [bboxCode]=\"this.geoObjectOverTime.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"vAttribute.startDate\"></geoobject-editor-map>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <input type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <i class=\"fa fa-times delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                 </td>\n                                               </tr>\n                                              </tbody>\n                                          </table>\n                                        </div>\n\n                                    </li>\n\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\">\n                                            <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                                        </i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none;width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button> -->\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!versionsform.valid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"holder\" style=\"width: 100%; border: none;\">\n                    <div class=\"panel\" style=\"box-shadow: none;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\" *ngIf=\"hierarchy != null\">\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                    <table class=\"table table-striped\">\n                                        <thead style=\"font-size: 14px;\">\n                                            <tr>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let entry of hierarchy.entries; let i = index;\">\n                                                <td>\n                                                \n                                                  <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let type of hierarchy.types; let j = index\">\n                                                    {{type.label}}\n                                                    \n                                                    <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                                      name=\"{{type.code}}-{{i}}\"\n                                                      [disabled]=\"entry.startDate == null || entry.startDate === ''\"\n                                                      [(ngModel)]=\"entry.parents[type.code].text\" \n                                                      [typeaheadAsync]=\"true\"\n                                                      [typeahead]=\"getTypeAheadObservable(entry.startDate, type, entry, j)\"\n                                                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, type, entry, entry.startDate)\" \n                                                      [typeaheadOptionsLimit]=\"7\"\n                                                      typeaheadOptionField=\"name\" \n                                                      [typeaheadMinLength]=\"0\"\n                                                      [typeaheadWaitMs]=\"300\">\n                                                  </div>\n                                                \n                                                </td>\n                                                <td style=\"vertical-align: bottom;\">\n                                                  <input style=\"width: 100%;\" type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"entry.startDate\" (blur)=\"snapDates()\" required />\n                                                </td> \n                                                <td style=\"vertical-align: bottom;\">\n                                                  <p *ngIf=\"entry.startDate != null && entry.startDate !== ''\" style=\"font-size: 14px;\"> {{entry.endDate | date:'MM-dd-yyyy'}} </p>\n                                                </td>\n                                                <td style=\"vertical-align: middle; width: 10%; padding: 5px; text-align: center;\">\n                                                  <i class=\"fa fa-times delete-btn\" (click)=\"remove(entry)\"></i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </li>\n\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                  <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"><localize key=\"changeovertime.manageVersions.newVersion\"></localize></i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none; width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid || hasDuplicateDate\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>","<div class=\"modal-body text-center\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"masterlist.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n            </div>\n        </div>\n        \n        <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"type.publish.title\"></localize>\n        </h2>\n        <h2 *ngIf=\"readonly\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> ({{localeValue.locale}})\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange($event)\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.organization\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.organization\" name=\"organization\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n                            role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n                            <span class=\"ui-button-text\">\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\" class=\"btn btn-primary ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n                            role=\"button\" style=\"padding: 4px 18px;\">\n                            <span class=\"ui-button-text\">\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <!-- <form class=\"modal-form\" name=\"export-form\"> -->\n    <!-- <fieldset> -->\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\"> </set-parent-detail>\n        </div>\n    </div>\n    <!-- </fieldset> -->\n    <!-- </form> -->\n\n    <hr>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <div class=\"button-holder\" style=\"text-align: right;\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n                    <span class=\"ui-button-text\"> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n      <div>\n        <label class=\"detail-label\">GeoObjectType : </label>\n        <label class=\"detail-value\">{{action.geoObjectType.code}}</label>\n      </div>\n    \n      <div>\n        <localize key=\"masterlist.forDate\"></localize>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n        <!-- \n\t  <label class=\"detail-label\">Label : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.displayLabel\">\n\t  \n\t  <label class=\"detail-label\">Code : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.code\">\n\t  -->\n\n        <geoobject-shared-attribute-editor \n          #attributeEditor\n          *ngIf=\"preGeoObject\"\n          [readOnly]=\"readOnly\"\n          [geoObjectType]=\"geoObjectType\"\n          [postGeoObject]=\"postGeoObject\"\n          [preGeoObject]=\"preGeoObject\"\n          [forDate]=\"forDate\"\n          [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n<!-- \n\t      <geoobject-editor-map #geometryEditor *ngIf=\"this.preGeoObject != null && this.postGeoObject != null && this.geoObjectType.isGeometryEditable\" [readOnly]=\"readOnly || !geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [isNew]=\"isNew()\"></geoobject-editor-map>\n -->\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    <div class=\"detail-content\">\n\n        <label class=\"detail-label\">Child UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childId\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Child TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childTypeCode\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentId\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Hierarchy Code : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.hierarchyTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">\n            <localize key=\"change.request.status\"></localize> :\n        </label>\n        <select style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=action.approvalStatus   [disabled]=\"readOnly\">\n            <option value=\"REJECTED\">\n                <localize key=\"change.request.status.rejected\"></localize>\n            </option>\n            <option value=\"ACCEPTED\">\n                <localize key=\"change.request.status.accepted\"></localize>\n            </option>\n            <option value=\"PENDING\">\n                <localize key=\"change.request.status.pending\"></localize>\n            </option>\n        </select>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n        \n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n        \n    </div>\n</div>","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n        <div>\n          <localize key=\"masterlist.forDate\"></localize>\n          <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n        </div>    \n    \n        <cascading-geo-selector #parentSelector \n          [hierarchies]=\"this.hierarchies\"\n          [forDate]=\"this.forDate\">\n        </cascading-geo-selector>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.status\"></localize> :\n            </label>\n            <select [disabled]=\"readOnly\" style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=\"action.approvalStatus\">\n                <option value=\"REJECTED\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </option>\n                <option value=\"ACCEPTED\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </option>\n                <option value=\"PENDING\">\n                    <localize key=\"change.request.status.pending\"></localize>\n                </option>\n            </select>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/operator/finally';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor( private http: HttpClient ) {\r\n        ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n    }\r\n\r\n    features(): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>( acp + '/project/features', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}","import { NgModule, Injectable, Inject } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule, Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { LocalizationManagerComponent } from './component/localization-manager/localization-manager.component';\nimport { ShapefileComponent } from './component/importer/shapefile.component';\nimport { SpreadsheetComponent } from './component/importer/spreadsheet.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\n\nimport { AuthGuard, AdminGuard, MaintainerGuard, ContributerGuard } from '../shared/service/guard.service';\nimport { PendingChangesGuard } from \"../shared/service/pending-changes-guard\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HierarchyComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'hierarchies',\n        component: HierarchyComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'data',\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'change-requests',\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'localization-manager',\n        component: LocalizationManagerComponent,\n        canActivate: [AdminGuard]\n    },\n    {\n        path: 'master-lists',\n        component: MasterListManagerComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-list/:oid',\n        component: MasterListComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-list-history/:oid',\n        component: MasterListHistoryComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'change-request',\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class RegistryRoutingModule { }"],"sourceRoot":""}